
STM32H747I_DISCO_PersonDetect_MobileNetv2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector_m4 00000008  08100000  08100000  00090000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata2      0000ce1e  08100008  08100008  00090008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00025474  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0003eef0  08025720  08025720  00035720  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08064610  08064610  00074610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  08064618  08064618  00074618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806461c  0806461c  0007461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000049f4  20000000  08064620  00080000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029b8  20004a00  08069014  00084a00  2**5
                  ALLOC
 10 ._user_heap_stack 00001400  200073b8  08069014  000873b8  2**0
                  ALLOC
 11 .axiram_section 0004b000  24000000  24000000  000a0000  2**5
                  ALLOC
 12 .sram_section 00000300  30000000  30000000  000a0000  2**5
                  ALLOC
 13 .sdram_section 00d3bd40  d0000000  d0000000  000a0000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0009ce26  2**0
                  CONTENTS, READONLY
 15 .debug_line   00065be9  00000000  00000000  0009ce54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0006af6a  00000000  00000000  00102a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b557  00000000  00000000  0016d9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000025a0  00000000  00000000  00178f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001cdfd1  00000000  00000000  0017b4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 0000ab78  00000000  00000000  00349478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00054901  00000000  00000000  00353ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0005145e  00000000  00000000  003a88f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  003f9d4f  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00009774  00000000  00000000  003f9da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .stab         000000cc  00000000  00000000  00403514  2**2
                  CONTENTS, READONLY, DEBUGGING
 26 .stabstr      000001b9  00000000  00000000  004035e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20004a00 	.word	0x20004a00
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080256fc 	.word	0x080256fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20004a04 	.word	0x20004a04
 80002dc:	080256fc 	.word	0x080256fc

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b9a8 	b.w	8000718 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f83a 	bl	8000448 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__aeabi_f2lz>:
 80003e0:	ee07 0a90 	vmov	s15, r0
 80003e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ec:	d401      	bmi.n	80003f2 <__aeabi_f2lz+0x12>
 80003ee:	f000 b80b 	b.w	8000408 <__aeabi_f2ulz>
 80003f2:	eef1 7a67 	vneg.f32	s15, s15
 80003f6:	b508      	push	{r3, lr}
 80003f8:	ee17 0a90 	vmov	r0, s15
 80003fc:	f000 f804 	bl	8000408 <__aeabi_f2ulz>
 8000400:	4240      	negs	r0, r0
 8000402:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000406:	bd08      	pop	{r3, pc}

08000408 <__aeabi_f2ulz>:
 8000408:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000438 <__aeabi_f2ulz+0x30>
 800040c:	ee07 0a90 	vmov	s15, r0
 8000410:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000440 <__aeabi_f2ulz+0x38>
 8000414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000418:	ee27 6b06 	vmul.f64	d6, d7, d6
 800041c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000420:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000424:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000428:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800042c:	ee16 1a10 	vmov	r1, s12
 8000430:	ee17 0a90 	vmov	r0, s15
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	00000000 	.word	0x00000000
 800043c:	3df00000 	.word	0x3df00000
 8000440:	00000000 	.word	0x00000000
 8000444:	41f00000 	.word	0x41f00000

08000448 <__udivmoddi4>:
 8000448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800044c:	9d08      	ldr	r5, [sp, #32]
 800044e:	4604      	mov	r4, r0
 8000450:	468e      	mov	lr, r1
 8000452:	2b00      	cmp	r3, #0
 8000454:	d14d      	bne.n	80004f2 <__udivmoddi4+0xaa>
 8000456:	428a      	cmp	r2, r1
 8000458:	4694      	mov	ip, r2
 800045a:	d969      	bls.n	8000530 <__udivmoddi4+0xe8>
 800045c:	fab2 f282 	clz	r2, r2
 8000460:	b152      	cbz	r2, 8000478 <__udivmoddi4+0x30>
 8000462:	fa01 f302 	lsl.w	r3, r1, r2
 8000466:	f1c2 0120 	rsb	r1, r2, #32
 800046a:	fa20 f101 	lsr.w	r1, r0, r1
 800046e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000472:	ea41 0e03 	orr.w	lr, r1, r3
 8000476:	4094      	lsls	r4, r2
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	0c21      	lsrs	r1, r4, #16
 800047e:	fbbe f6f8 	udiv	r6, lr, r8
 8000482:	fa1f f78c 	uxth.w	r7, ip
 8000486:	fb08 e316 	mls	r3, r8, r6, lr
 800048a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800048e:	fb06 f107 	mul.w	r1, r6, r7
 8000492:	4299      	cmp	r1, r3
 8000494:	d90a      	bls.n	80004ac <__udivmoddi4+0x64>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f106 30ff 	add.w	r0, r6, #4294967295
 800049e:	f080 811f 	bcs.w	80006e0 <__udivmoddi4+0x298>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 811c 	bls.w	80006e0 <__udivmoddi4+0x298>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b4:	fb08 3310 	mls	r3, r8, r0, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb00 f707 	mul.w	r7, r0, r7
 80004c0:	42a7      	cmp	r7, r4
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x92>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80004cc:	f080 810a 	bcs.w	80006e4 <__udivmoddi4+0x29c>
 80004d0:	42a7      	cmp	r7, r4
 80004d2:	f240 8107 	bls.w	80006e4 <__udivmoddi4+0x29c>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004de:	1be4      	subs	r4, r4, r7
 80004e0:	2600      	movs	r6, #0
 80004e2:	b11d      	cbz	r5, 80004ec <__udivmoddi4+0xa4>
 80004e4:	40d4      	lsrs	r4, r2
 80004e6:	2300      	movs	r3, #0
 80004e8:	e9c5 4300 	strd	r4, r3, [r5]
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d909      	bls.n	800050a <__udivmoddi4+0xc2>
 80004f6:	2d00      	cmp	r5, #0
 80004f8:	f000 80ef 	beq.w	80006da <__udivmoddi4+0x292>
 80004fc:	2600      	movs	r6, #0
 80004fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000502:	4630      	mov	r0, r6
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	fab3 f683 	clz	r6, r3
 800050e:	2e00      	cmp	r6, #0
 8000510:	d14a      	bne.n	80005a8 <__udivmoddi4+0x160>
 8000512:	428b      	cmp	r3, r1
 8000514:	d302      	bcc.n	800051c <__udivmoddi4+0xd4>
 8000516:	4282      	cmp	r2, r0
 8000518:	f200 80f9 	bhi.w	800070e <__udivmoddi4+0x2c6>
 800051c:	1a84      	subs	r4, r0, r2
 800051e:	eb61 0303 	sbc.w	r3, r1, r3
 8000522:	2001      	movs	r0, #1
 8000524:	469e      	mov	lr, r3
 8000526:	2d00      	cmp	r5, #0
 8000528:	d0e0      	beq.n	80004ec <__udivmoddi4+0xa4>
 800052a:	e9c5 4e00 	strd	r4, lr, [r5]
 800052e:	e7dd      	b.n	80004ec <__udivmoddi4+0xa4>
 8000530:	b902      	cbnz	r2, 8000534 <__udivmoddi4+0xec>
 8000532:	deff      	udf	#255	; 0xff
 8000534:	fab2 f282 	clz	r2, r2
 8000538:	2a00      	cmp	r2, #0
 800053a:	f040 8092 	bne.w	8000662 <__udivmoddi4+0x21a>
 800053e:	eba1 010c 	sub.w	r1, r1, ip
 8000542:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000546:	fa1f fe8c 	uxth.w	lr, ip
 800054a:	2601      	movs	r6, #1
 800054c:	0c20      	lsrs	r0, r4, #16
 800054e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000552:	fb07 1113 	mls	r1, r7, r3, r1
 8000556:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800055a:	fb0e f003 	mul.w	r0, lr, r3
 800055e:	4288      	cmp	r0, r1
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x12c>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f103 38ff 	add.w	r8, r3, #4294967295
 800056a:	d202      	bcs.n	8000572 <__udivmoddi4+0x12a>
 800056c:	4288      	cmp	r0, r1
 800056e:	f200 80cb 	bhi.w	8000708 <__udivmoddi4+0x2c0>
 8000572:	4643      	mov	r3, r8
 8000574:	1a09      	subs	r1, r1, r0
 8000576:	b2a4      	uxth	r4, r4
 8000578:	fbb1 f0f7 	udiv	r0, r1, r7
 800057c:	fb07 1110 	mls	r1, r7, r0, r1
 8000580:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000584:	fb0e fe00 	mul.w	lr, lr, r0
 8000588:	45a6      	cmp	lr, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x156>
 800058c:	eb1c 0404 	adds.w	r4, ip, r4
 8000590:	f100 31ff 	add.w	r1, r0, #4294967295
 8000594:	d202      	bcs.n	800059c <__udivmoddi4+0x154>
 8000596:	45a6      	cmp	lr, r4
 8000598:	f200 80bb 	bhi.w	8000712 <__udivmoddi4+0x2ca>
 800059c:	4608      	mov	r0, r1
 800059e:	eba4 040e 	sub.w	r4, r4, lr
 80005a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x9a>
 80005a8:	f1c6 0720 	rsb	r7, r6, #32
 80005ac:	40b3      	lsls	r3, r6
 80005ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80005b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005b6:	fa20 f407 	lsr.w	r4, r0, r7
 80005ba:	fa01 f306 	lsl.w	r3, r1, r6
 80005be:	431c      	orrs	r4, r3
 80005c0:	40f9      	lsrs	r1, r7
 80005c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005c6:	fa00 f306 	lsl.w	r3, r0, r6
 80005ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80005ce:	0c20      	lsrs	r0, r4, #16
 80005d0:	fa1f fe8c 	uxth.w	lr, ip
 80005d4:	fb09 1118 	mls	r1, r9, r8, r1
 80005d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005dc:	fb08 f00e 	mul.w	r0, r8, lr
 80005e0:	4288      	cmp	r0, r1
 80005e2:	fa02 f206 	lsl.w	r2, r2, r6
 80005e6:	d90b      	bls.n	8000600 <__udivmoddi4+0x1b8>
 80005e8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80005f0:	f080 8088 	bcs.w	8000704 <__udivmoddi4+0x2bc>
 80005f4:	4288      	cmp	r0, r1
 80005f6:	f240 8085 	bls.w	8000704 <__udivmoddi4+0x2bc>
 80005fa:	f1a8 0802 	sub.w	r8, r8, #2
 80005fe:	4461      	add	r1, ip
 8000600:	1a09      	subs	r1, r1, r0
 8000602:	b2a4      	uxth	r4, r4
 8000604:	fbb1 f0f9 	udiv	r0, r1, r9
 8000608:	fb09 1110 	mls	r1, r9, r0, r1
 800060c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000610:	fb00 fe0e 	mul.w	lr, r0, lr
 8000614:	458e      	cmp	lr, r1
 8000616:	d908      	bls.n	800062a <__udivmoddi4+0x1e2>
 8000618:	eb1c 0101 	adds.w	r1, ip, r1
 800061c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000620:	d26c      	bcs.n	80006fc <__udivmoddi4+0x2b4>
 8000622:	458e      	cmp	lr, r1
 8000624:	d96a      	bls.n	80006fc <__udivmoddi4+0x2b4>
 8000626:	3802      	subs	r0, #2
 8000628:	4461      	add	r1, ip
 800062a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800062e:	fba0 9402 	umull	r9, r4, r0, r2
 8000632:	eba1 010e 	sub.w	r1, r1, lr
 8000636:	42a1      	cmp	r1, r4
 8000638:	46c8      	mov	r8, r9
 800063a:	46a6      	mov	lr, r4
 800063c:	d356      	bcc.n	80006ec <__udivmoddi4+0x2a4>
 800063e:	d053      	beq.n	80006e8 <__udivmoddi4+0x2a0>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x212>
 8000642:	ebb3 0208 	subs.w	r2, r3, r8
 8000646:	eb61 010e 	sbc.w	r1, r1, lr
 800064a:	fa01 f707 	lsl.w	r7, r1, r7
 800064e:	fa22 f306 	lsr.w	r3, r2, r6
 8000652:	40f1      	lsrs	r1, r6
 8000654:	431f      	orrs	r7, r3
 8000656:	e9c5 7100 	strd	r7, r1, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	f1c2 0320 	rsb	r3, r2, #32
 8000666:	40d8      	lsrs	r0, r3
 8000668:	fa0c fc02 	lsl.w	ip, ip, r2
 800066c:	fa21 f303 	lsr.w	r3, r1, r3
 8000670:	4091      	lsls	r1, r2
 8000672:	4301      	orrs	r1, r0
 8000674:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000678:	fa1f fe8c 	uxth.w	lr, ip
 800067c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000680:	fb07 3610 	mls	r6, r7, r0, r3
 8000684:	0c0b      	lsrs	r3, r1, #16
 8000686:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800068a:	fb00 f60e 	mul.w	r6, r0, lr
 800068e:	429e      	cmp	r6, r3
 8000690:	fa04 f402 	lsl.w	r4, r4, r2
 8000694:	d908      	bls.n	80006a8 <__udivmoddi4+0x260>
 8000696:	eb1c 0303 	adds.w	r3, ip, r3
 800069a:	f100 38ff 	add.w	r8, r0, #4294967295
 800069e:	d22f      	bcs.n	8000700 <__udivmoddi4+0x2b8>
 80006a0:	429e      	cmp	r6, r3
 80006a2:	d92d      	bls.n	8000700 <__udivmoddi4+0x2b8>
 80006a4:	3802      	subs	r0, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	1b9b      	subs	r3, r3, r6
 80006aa:	b289      	uxth	r1, r1
 80006ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80006b0:	fb07 3316 	mls	r3, r7, r6, r3
 80006b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006b8:	fb06 f30e 	mul.w	r3, r6, lr
 80006bc:	428b      	cmp	r3, r1
 80006be:	d908      	bls.n	80006d2 <__udivmoddi4+0x28a>
 80006c0:	eb1c 0101 	adds.w	r1, ip, r1
 80006c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80006c8:	d216      	bcs.n	80006f8 <__udivmoddi4+0x2b0>
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d914      	bls.n	80006f8 <__udivmoddi4+0x2b0>
 80006ce:	3e02      	subs	r6, #2
 80006d0:	4461      	add	r1, ip
 80006d2:	1ac9      	subs	r1, r1, r3
 80006d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006d8:	e738      	b.n	800054c <__udivmoddi4+0x104>
 80006da:	462e      	mov	r6, r5
 80006dc:	4628      	mov	r0, r5
 80006de:	e705      	b.n	80004ec <__udivmoddi4+0xa4>
 80006e0:	4606      	mov	r6, r0
 80006e2:	e6e3      	b.n	80004ac <__udivmoddi4+0x64>
 80006e4:	4618      	mov	r0, r3
 80006e6:	e6f8      	b.n	80004da <__udivmoddi4+0x92>
 80006e8:	454b      	cmp	r3, r9
 80006ea:	d2a9      	bcs.n	8000640 <__udivmoddi4+0x1f8>
 80006ec:	ebb9 0802 	subs.w	r8, r9, r2
 80006f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006f4:	3801      	subs	r0, #1
 80006f6:	e7a3      	b.n	8000640 <__udivmoddi4+0x1f8>
 80006f8:	4646      	mov	r6, r8
 80006fa:	e7ea      	b.n	80006d2 <__udivmoddi4+0x28a>
 80006fc:	4620      	mov	r0, r4
 80006fe:	e794      	b.n	800062a <__udivmoddi4+0x1e2>
 8000700:	4640      	mov	r0, r8
 8000702:	e7d1      	b.n	80006a8 <__udivmoddi4+0x260>
 8000704:	46d0      	mov	r8, sl
 8000706:	e77b      	b.n	8000600 <__udivmoddi4+0x1b8>
 8000708:	3b02      	subs	r3, #2
 800070a:	4461      	add	r1, ip
 800070c:	e732      	b.n	8000574 <__udivmoddi4+0x12c>
 800070e:	4630      	mov	r0, r6
 8000710:	e709      	b.n	8000526 <__udivmoddi4+0xde>
 8000712:	4464      	add	r4, ip
 8000714:	3802      	subs	r0, #2
 8000716:	e742      	b.n	800059e <__udivmoddi4+0x156>

08000718 <__aeabi_idiv0>:
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop

0800071c <Reset_Handler_m4>:
    .section  .text.Reset_Handler_m4
  .weak  Reset_Handler_m4
  .type  Reset_Handler_m4, %function
Reset_Handler_m4:
 Infinite_Loop:
  b  Infinite_Loop
 800071c:	e7fe      	b.n	800071c <Reset_Handler_m4>
	...

08000720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000758 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000724:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000726:	e003      	b.n	8000730 <LoopCopyDataInit>

08000728 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800072a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800072c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800072e:	3104      	adds	r1, #4

08000730 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000734:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000736:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000738:	d3f6      	bcc.n	8000728 <CopyDataInit>
  ldr  r2, =_sbss
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800073c:	e002      	b.n	8000744 <LoopFillZerobss>

0800073e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800073e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000740:	f842 3b04 	str.w	r3, [r2], #4

08000744 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000746:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000748:	d3f9      	bcc.n	800073e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800074a:	f005 fd69 	bl	8006220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800074e:	f021 fd69 	bl	8022224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000752:	f004 fc87 	bl	8005064 <main>
  bx  lr    
 8000756:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000758:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800075c:	08064620 	.word	0x08064620
  ldr  r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000764:	200049f4 	.word	0x200049f4
  ldr  r2, =_sbss
 8000768:	20004a00 	.word	0x20004a00
  ldr  r3, = _ebss
 800076c:	200073b8 	.word	0x200073b8

08000770 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC3_IRQHandler>
	...

08000774 <ai_get_input_format>:
 * @brief Returns the input format type
 * @retval ai_size Input format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_input_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 8000774:	4b02      	ldr	r3, [pc, #8]	; (8000780 <ai_get_input_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 8000776:	6818      	ldr	r0, [r3, #0]
}
 8000778:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20004a1c 	.word	0x20004a1c

08000784 <ai_get_output_format>:
 * @brief Returns the output format type
 * @retval ai_size Output format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_output_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[0]);
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <ai_get_output_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 8000786:	6818      	ldr	r0, [r3, #0]
}
 8000788:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20004a38 	.word	0x20004a38

08000794 <ai_get_input_quantized_format>:
 * @brief Returns value of the input quantized format
 * @retval ai_size Input quantized format
 */
ai_size ai_get_input_quantized_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <ai_get_input_quantized_format+0x18>)
 8000796:	6818      	ldr	r0, [r3, #0]
  return (AI_BUFFER_FMT_GET_BITS(fmt) - AI_BUFFER_FMT_GET_SIGN(fmt) - AI_BUFFER_FMT_GET_FBITS(fmt));
 8000798:	f3c0 52c0 	ubfx	r2, r0, #23, #1
 800079c:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80007a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80007a4:	1a9b      	subs	r3, r3, r2
 80007a6:	3840      	subs	r0, #64	; 0x40
}
 80007a8:	1a18      	subs	r0, r3, r0
 80007aa:	4770      	bx	lr
 80007ac:	20004a1c 	.word	0x20004a1c

080007b0 <ai_get_input_quantization_scheme>:
 * @brief Returns value of the scale for the input quantized format
 * @retval ai_size Scale for input quantized format
 */
ai_float ai_get_input_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <ai_get_input_quantization_scheme+0x38>)
 80007b2:	6893      	ldr	r3, [r2, #8]
 80007b4:	b1b3      	cbz	r3, 80007e4 <ai_get_input_quantization_scheme+0x34>
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	f010 0001 	ands.w	r0, r0, #1
 80007bc:	d013      	beq.n	80007e6 <ai_get_input_quantization_scheme+0x36>
 80007be:	6858      	ldr	r0, [r3, #4]
 80007c0:	b188      	cbz	r0, 80007e6 <ai_get_input_quantization_scheme+0x36>
 80007c2:	6843      	ldr	r3, [r0, #4]
 80007c4:	b173      	cbz	r3, 80007e4 <ai_get_input_quantization_scheme+0x34>
 80007c6:	8840      	ldrh	r0, [r0, #2]
 80007c8:	b168      	cbz	r0, 80007e6 <ai_get_input_quantization_scheme+0x36>
 80007ca:	681b      	ldr	r3, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007cc:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 80007ce:	edd3 7a00 	vldr	s15, [r3]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007d2:	f3c0 50c0 	ubfx	r0, r0, #23, #1
  if(scale==0)
 80007d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007de:	d001      	beq.n	80007e4 <ai_get_input_quantization_scheme+0x34>
    if(sign==0)
 80007e0:	3001      	adds	r0, #1
 80007e2:	4770      	bx	lr
    return AI_FXP_Q;
 80007e4:	2000      	movs	r0, #0
}
 80007e6:	4770      	bx	lr
 80007e8:	20004a1c 	.word	0x20004a1c

080007ec <ai_get_output_quantization_scheme>:
 * @brief Returns value of the scale for the output quantized format
 * @retval ai_size Scale for output quantized format
 */
ai_float ai_get_output_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <ai_get_output_quantization_scheme+0x38>)
 80007ee:	6893      	ldr	r3, [r2, #8]
 80007f0:	b1b3      	cbz	r3, 8000820 <ai_get_output_quantization_scheme+0x34>
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	f010 0001 	ands.w	r0, r0, #1
 80007f8:	d013      	beq.n	8000822 <ai_get_output_quantization_scheme+0x36>
 80007fa:	6858      	ldr	r0, [r3, #4]
 80007fc:	b188      	cbz	r0, 8000822 <ai_get_output_quantization_scheme+0x36>
 80007fe:	6843      	ldr	r3, [r0, #4]
 8000800:	b173      	cbz	r3, 8000820 <ai_get_output_quantization_scheme+0x34>
 8000802:	8840      	ldrh	r0, [r0, #2]
 8000804:	b168      	cbz	r0, 8000822 <ai_get_output_quantization_scheme+0x36>
 8000806:	681b      	ldr	r3, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 8000808:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 800080a:	edd3 7a00 	vldr	s15, [r3]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 800080e:	f3c0 50c0 	ubfx	r0, r0, #23, #1
  if(scale==0)
 8000812:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081a:	d001      	beq.n	8000820 <ai_get_output_quantization_scheme+0x34>
    if(sign==0)
 800081c:	3001      	adds	r0, #1
 800081e:	4770      	bx	lr
    return AI_FXP_Q;
 8000820:	2000      	movs	r0, #0
}
 8000822:	4770      	bx	lr
 8000824:	20004a38 	.word	0x20004a38

08000828 <ai_get_output_fxp_scale>:
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <ai_get_output_fxp_scale+0x20>)
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 800082a:	2301      	movs	r3, #1
 800082c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000836:	3a40      	subs	r2, #64	; 0x40
 8000838:	4093      	lsls	r3, r2
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000842:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8000846:	4770      	bx	lr
 8000848:	20004a38 	.word	0x20004a38

0800084c <ai_get_input_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <ai_get_input_scale+0x28>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	b163      	cbz	r3, 800086c <ai_get_input_scale+0x20>
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	07d2      	lsls	r2, r2, #31
 8000856:	d509      	bpl.n	800086c <ai_get_input_scale+0x20>
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	b13b      	cbz	r3, 800086c <ai_get_input_scale+0x20>
 800085c:	685a      	ldr	r2, [r3, #4]
 800085e:	b12a      	cbz	r2, 800086c <ai_get_input_scale+0x20>
 8000860:	885b      	ldrh	r3, [r3, #2]
 8000862:	b11b      	cbz	r3, 800086c <ai_get_input_scale+0x20>
 8000864:	6813      	ldr	r3, [r2, #0]
 8000866:	ed93 0a00 	vldr	s0, [r3]
 800086a:	4770      	bx	lr
 800086c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000878 <ai_get_input_scale+0x2c>
}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20004a1c 	.word	0x20004a1c
 8000878:	00000000 	.word	0x00000000

0800087c <ai_get_input_zero_point>:
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <ai_get_input_zero_point+0x44>)
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	b192      	cbz	r2, 80008a8 <ai_get_input_zero_point+0x2c>
 8000882:	6813      	ldr	r3, [r2, #0]
 8000884:	f013 0001 	ands.w	r0, r3, #1
 8000888:	d00d      	beq.n	80008a6 <ai_get_input_zero_point+0x2a>
 800088a:	6850      	ldr	r0, [r2, #4]
 800088c:	b158      	cbz	r0, 80008a6 <ai_get_input_zero_point+0x2a>
 800088e:	8803      	ldrh	r3, [r0, #0]
 8000890:	f013 0f02 	tst.w	r3, #2
 8000894:	6843      	ldr	r3, [r0, #4]
 8000896:	d009      	beq.n	80008ac <ai_get_input_zero_point+0x30>
 8000898:	b123      	cbz	r3, 80008a4 <ai_get_input_zero_point+0x28>
 800089a:	8840      	ldrh	r0, [r0, #2]
 800089c:	b118      	cbz	r0, 80008a6 <ai_get_input_zero_point+0x2a>
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	7818      	ldrb	r0, [r3, #0]
 80008a2:	4770      	bx	lr
 80008a4:	4618      	mov	r0, r3
}
 80008a6:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 80008a8:	4610      	mov	r0, r2
 80008aa:	4770      	bx	lr
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d0f9      	beq.n	80008a4 <ai_get_input_zero_point+0x28>
 80008b0:	8840      	ldrh	r0, [r0, #2]
 80008b2:	2800      	cmp	r0, #0
 80008b4:	d0f7      	beq.n	80008a6 <ai_get_input_zero_point+0x2a>
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f993 0000 	ldrsb.w	r0, [r3]
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20004a1c 	.word	0x20004a1c

080008c4 <ai_get_output_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <ai_get_output_scale+0x28>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	b163      	cbz	r3, 80008e4 <ai_get_output_scale+0x20>
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	07d2      	lsls	r2, r2, #31
 80008ce:	d509      	bpl.n	80008e4 <ai_get_output_scale+0x20>
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	b13b      	cbz	r3, 80008e4 <ai_get_output_scale+0x20>
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	b12a      	cbz	r2, 80008e4 <ai_get_output_scale+0x20>
 80008d8:	885b      	ldrh	r3, [r3, #2]
 80008da:	b11b      	cbz	r3, 80008e4 <ai_get_output_scale+0x20>
 80008dc:	6813      	ldr	r3, [r2, #0]
 80008de:	ed93 0a00 	vldr	s0, [r3]
 80008e2:	4770      	bx	lr
 80008e4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80008f0 <ai_get_output_scale+0x2c>
}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	20004a38 	.word	0x20004a38
 80008f0:	00000000 	.word	0x00000000

080008f4 <ai_get_output_zero_point>:
 * @brief Returns value of the zero point for the output quantized format
 * @retval ai_size Zero point for output quantized format
 */
ai_i32 ai_get_output_zero_point(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <ai_get_output_zero_point+0x44>)
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	b192      	cbz	r2, 8000920 <ai_get_output_zero_point+0x2c>
 80008fa:	6813      	ldr	r3, [r2, #0]
 80008fc:	f013 0001 	ands.w	r0, r3, #1
 8000900:	d00d      	beq.n	800091e <ai_get_output_zero_point+0x2a>
 8000902:	6850      	ldr	r0, [r2, #4]
 8000904:	b158      	cbz	r0, 800091e <ai_get_output_zero_point+0x2a>
 8000906:	8803      	ldrh	r3, [r0, #0]
 8000908:	f013 0f02 	tst.w	r3, #2
 800090c:	6843      	ldr	r3, [r0, #4]
 800090e:	d009      	beq.n	8000924 <ai_get_output_zero_point+0x30>
 8000910:	b123      	cbz	r3, 800091c <ai_get_output_zero_point+0x28>
 8000912:	8840      	ldrh	r0, [r0, #2]
 8000914:	b118      	cbz	r0, 800091e <ai_get_output_zero_point+0x2a>
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	7818      	ldrb	r0, [r3, #0]
 800091a:	4770      	bx	lr
 800091c:	4618      	mov	r0, r3
}
 800091e:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 8000920:	4610      	mov	r0, r2
 8000922:	4770      	bx	lr
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0f9      	beq.n	800091c <ai_get_output_zero_point+0x28>
 8000928:	8840      	ldrh	r0, [r0, #2]
 800092a:	2800      	cmp	r0, #0
 800092c:	d0f7      	beq.n	800091e <ai_get_output_zero_point+0x2a>
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f993 0000 	ldrsb.w	r0, [r3]
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20004a38 	.word	0x20004a38

0800093c <ai_init>:
 * @brief Initializes the generated C model for a neural network
 * @param  activation_buffer Pointer to the activation buffer (i.e. working buffer used during NN inference)
 * @retval ai_handle
 */
ai_handle ai_init(void* activation_buffer)
{
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
  network_handle = AI_HANDLE_NULL;
 800093e:	4c18      	ldr	r4, [pc, #96]	; (80009a0 <ai_init+0x64>)
{
 8000940:	b08f      	sub	sp, #60	; 0x3c
  network_handle = AI_HANDLE_NULL;
 8000942:	2100      	movs	r1, #0
{
 8000944:	4605      	mov	r5, r0

  /* Creating the network */
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 8000946:	4620      	mov	r0, r4
  
  /*Retrieve network descriptor*/
  ai_network_get_info(network_handle, &desc_report);
  
  /*Copy descriptor info*/
  ai_input[0]= desc_report.inputs[0];
 8000948:	4e16      	ldr	r6, [pc, #88]	; (80009a4 <ai_init+0x68>)
  network_handle = AI_HANDLE_NULL;
 800094a:	6021      	str	r1, [r4, #0]
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 800094c:	f005 fa5e 	bl	8005e0c <ai_network_create>
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8000950:	f005 fab6 	bl	8005ec0 <ai_network_data_weights_get>
 8000954:	4601      	mov	r1, r0
 8000956:	4668      	mov	r0, sp
 8000958:	f005 fa9a 	bl	8005e90 <ai_network_data_weights_buffer_get>
 800095c:	4629      	mov	r1, r5
 800095e:	a807      	add	r0, sp, #28
  ai_network_get_info(network_handle, &desc_report);
 8000960:	4d11      	ldr	r5, [pc, #68]	; (80009a8 <ai_init+0x6c>)
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8000962:	f005 fa7d 	bl	8005e60 <ai_network_data_activations_buffer_get>
  ai_network_init(network_handle, &params);
 8000966:	4669      	mov	r1, sp
 8000968:	6820      	ldr	r0, [r4, #0]
 800096a:	f005 fa5f 	bl	8005e2c <ai_network_init>
  ai_network_get_info(network_handle, &desc_report);
 800096e:	4629      	mov	r1, r5
 8000970:	6820      	ldr	r0, [r4, #0]
 8000972:	f005 f9fd 	bl	8005d70 <ai_network_get_info>
  ai_input[0]= desc_report.inputs[0];
 8000976:	6b6f      	ldr	r7, [r5, #52]	; 0x34
  ai_output[0]= desc_report.outputs[0];
 8000978:	6bad      	ldr	r5, [r5, #56]	; 0x38
  ai_input[0]= desc_report.inputs[0];
 800097a:	46bc      	mov	ip, r7
  ai_output[0]= desc_report.outputs[0];
 800097c:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <ai_init+0x70>)
  ai_input[0]= desc_report.inputs[0];
 800097e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000982:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000984:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8000988:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  ai_output[0]= desc_report.outputs[0];
 800098c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000990:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000994:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  
  return desc_report.inputs->data;
}
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	b00f      	add	sp, #60	; 0x3c
 800099c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800099e:	bf00      	nop
 80009a0:	20004ad0 	.word	0x20004ad0
 80009a4:	20004a1c 	.word	0x20004a1c
 80009a8:	20004a54 	.word	0x20004a54
 80009ac:	20004a38 	.word	0x20004a38

080009b0 <ai_deinit>:

/**
 * @brief De-initializes the generated C model for a neural network
 */
void ai_deinit(void) { ai_network_destroy(network_handle); }
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <ai_deinit+0x8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	f005 ba38 	b.w	8005e28 <ai_network_destroy>
 80009b8:	20004ad0 	.word	0x20004ad0

080009bc <ai_run>:
 * @brief  Run an inference of the generated C model for a neural network
 * @param  input   Pointer to the buffer containing the inference input data
 * @param  output  Pointer to the buffer for the inference output data
 */
void ai_run(void* input, void* output)
{
 80009bc:	b570      	push	{r4, r5, r6, lr}
  ai_i32 nbatch;
  
  ai_input[0].data = AI_HANDLE_PTR(input);
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <ai_run+0x20>)
{
 80009c0:	4605      	mov	r5, r0
  ai_output[0].data = AI_HANDLE_PTR(output);
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <ai_run+0x24>)
{
 80009c4:	460c      	mov	r4, r1
  
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009c6:	4e07      	ldr	r6, [pc, #28]	; (80009e4 <ai_run+0x28>)
 80009c8:	4619      	mov	r1, r3
  ai_input[0].data = AI_HANDLE_PTR(input);
 80009ca:	605d      	str	r5, [r3, #4]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009cc:	6830      	ldr	r0, [r6, #0]
  ai_output[0].data = AI_HANDLE_PTR(output);
 80009ce:	6054      	str	r4, [r2, #4]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009d0:	f005 fa44 	bl	8005e5c <ai_network_run>
  
  if (nbatch != 1) {
 80009d4:	2801      	cmp	r0, #1
 80009d6:	d000      	beq.n	80009da <ai_run+0x1e>
        while(1);
 80009d8:	e7fe      	b.n	80009d8 <ai_run+0x1c>
  }
}
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	20004a1c 	.word	0x20004a1c
 80009e0:	20004a38 	.word	0x20004a38
 80009e4:	20004ad0 	.word	0x20004ad0

080009e8 <AI_Init>:
  * @brief  Initializes the generated C model for a neural network
  * @param  Ai_Context_Ptr Pointer to the AI NN context
  * @retval None
  */
void AI_Init(AiContext_TypeDef* Ai_Context_Ptr)
{
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	4606      	mov	r6, r0
#ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
  void *input_data_ptr;
  
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 80009ec:	6880      	ldr	r0, [r0, #8]
{
 80009ee:	ed2d 8b02 	vpush	{d8}
 80009f2:	b082      	sub	sp, #8
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 80009f4:	f7ff ffa2 	bl	800093c <ai_init>
  
  if(input_data_ptr!= NULL)
 80009f8:	b100      	cbz	r0, 80009fc <AI_Init+0x14>
    Ai_Context_Ptr->nn_input_buffer=input_data_ptr;
 80009fa:	6070      	str	r0, [r6, #4]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 80009fc:	4c57      	ldr	r4, [pc, #348]	; (8000b5c <AI_Init+0x174>)
  float prepro_scale = Ai_Context_Ptr->nn_input_norm_scale;
 80009fe:	ed96 8a04 	vldr	s16, [r6, #16]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 8000a02:	60f4      	str	r4, [r6, #12]
  int32_t prepro_zp = Ai_Context_Ptr->nn_input_norm_zp;
 8000a04:	6975      	ldr	r5, [r6, #20]
  switch(ai_get_input_quantization_scheme())
 8000a06:	f7ff fed3 	bl	80007b0 <ai_get_input_quantization_scheme>
 8000a0a:	2801      	cmp	r0, #1
 8000a0c:	d007      	beq.n	8000a1e <AI_Init+0x36>
 8000a0e:	2802      	cmp	r0, #2
 8000a10:	d05f      	beq.n	8000ad2 <AI_Init+0xea>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d047      	beq.n	8000aa6 <AI_Init+0xbe>
  ai_init((void*)(Ai_Context_Ptr->activation_buffer));
#endif
  
  Ai_Context_Init(Ai_Context_Ptr);
  Compute_pix_conv_tab(Ai_Context_Ptr);
}
 8000a16:	b002      	add	sp, #8
 8000a18:	ecbd 8b02 	vpop	{d8}
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
    Precompute_8IntU(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000a1e:	f7ff ff15 	bl	800084c <ai_get_input_scale>
 8000a22:	eef0 8a40 	vmov.f32	s17, s0
 8000a26:	f7ff ff29 	bl	800087c <ai_get_input_zero_point>
 8000a2a:	f1c4 0101 	rsb	r1, r4, #1
 8000a2e:	1e62      	subs	r2, r4, #1
 8000a30:	f104 0cff 	add.w	ip, r4, #255	; 0xff
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a34:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    float tmp = (i - zp_prepro) * scale_prepro;
 8000a38:	1b49      	subs	r1, r1, r5
 8000a3a:	ee68 6a28 	vmul.f32	s13, s16, s17
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a3e:	b2c4      	uxtb	r4, r0
 8000a40:	e016      	b.n	8000a70 <AI_Init+0x88>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	dd2d      	ble.n	8000aa2 <AI_Init+0xba>
 8000a46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4e:	bf4c      	ite	mi
 8000a50:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 8000a54:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 8000a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a5c:	edcd 7a01 	vstr	s15, [sp, #4]
 8000a60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000a64:	4423      	add	r3, r4
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int32_t i = 0 ; i < 256 ; i++)
 8000a6c:	4562      	cmp	r2, ip
 8000a6e:	d0d2      	beq.n	8000a16 <AI_Init+0x2e>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000a70:	188b      	adds	r3, r1, r2
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a86:	bf4c      	ite	mi
 8000a88:	ee37 7ac6 	vsubmi.f32	s14, s15, s12
 8000a8c:	ee37 7a86 	vaddpl.f32	s14, s15, s12
 8000a90:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000a94:	ee17 3a10 	vmov	r3, s14
 8000a98:	4403      	add	r3, r0
 8000a9a:	2bfe      	cmp	r3, #254	; 0xfe
 8000a9c:	ddd1      	ble.n	8000a42 <AI_Init+0x5a>
 8000a9e:	23ff      	movs	r3, #255	; 0xff
 8000aa0:	e7e2      	b.n	8000a68 <AI_Init+0x80>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e7e0      	b.n	8000a68 <AI_Init+0x80>
    Precompute_8FXP(lut, ai_get_input_quantized_format());
 8000aa6:	f7ff fe75 	bl	8000794 <ai_get_input_quantized_format>
   *(lut+index)=__USAT((index + (1 << q_input_shift)) >> (1 + q_input_shift), 8);
 8000aaa:	2301      	movs	r3, #1
 8000aac:	1e62      	subs	r2, r4, #1
 for(index=0;index<256;index++)
 8000aae:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8000ab2:	1b19      	subs	r1, r3, r4
   *(lut+index)=__USAT((index + (1 << q_input_shift)) >> (1 + q_input_shift), 8);
 8000ab4:	4083      	lsls	r3, r0
 8000ab6:	3001      	adds	r0, #1
 8000ab8:	4419      	add	r1, r3
 8000aba:	188b      	adds	r3, r1, r2
 8000abc:	40c3      	lsrs	r3, r0
 8000abe:	f383 0308 	usat	r3, #8, r3
 8000ac2:	f802 3f01 	strb.w	r3, [r2, #1]!
 for(index=0;index<256;index++)
 8000ac6:	4295      	cmp	r5, r2
 8000ac8:	d1f7      	bne.n	8000aba <AI_Init+0xd2>
}
 8000aca:	b002      	add	sp, #8
 8000acc:	ecbd 8b02 	vpop	{d8}
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
    Precompute_8IntS(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000ad2:	f7ff febb 	bl	800084c <ai_get_input_scale>
 8000ad6:	eef0 8a40 	vmov.f32	s17, s0
 8000ada:	f7ff fecf 	bl	800087c <ai_get_input_zero_point>
 8000ade:	f1c4 0101 	rsb	r1, r4, #1
 8000ae2:	1e62      	subs	r2, r4, #1
 8000ae4:	f104 0cff 	add.w	ip, r4, #255	; 0xff
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000ae8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    float tmp = (i - zp_prepro) * scale_prepro;
 8000aec:	1b49      	subs	r1, r1, r5
 8000aee:	ee68 6a28 	vmul.f32	s13, s16, s17
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000af2:	b2c4      	uxtb	r4, r0
 8000af4:	e017      	b.n	8000b26 <AI_Init+0x13e>
 8000af6:	337f      	adds	r3, #127	; 0x7f
 8000af8:	db2e      	blt.n	8000b58 <AI_Init+0x170>
 8000afa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b02:	bf4c      	ite	mi
 8000b04:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 8000b08:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 8000b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b10:	edcd 7a01 	vstr	s15, [sp, #4]
 8000b14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000b18:	4423      	add	r3, r4
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int32_t i = 0 ; i < 256 ; i++)
 8000b20:	4594      	cmp	ip, r2
 8000b22:	f43f af78 	beq.w	8000a16 <AI_Init+0x2e>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000b26:	188b      	adds	r3, r1, r2
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000b30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3c:	bf4c      	ite	mi
 8000b3e:	ee37 7ac6 	vsubmi.f32	s14, s15, s12
 8000b42:	ee37 7a86 	vaddpl.f32	s14, s15, s12
 8000b46:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000b4a:	ee17 3a10 	vmov	r3, s14
 8000b4e:	4403      	add	r3, r0
 8000b50:	2b7e      	cmp	r3, #126	; 0x7e
 8000b52:	ddd0      	ble.n	8000af6 <AI_Init+0x10e>
 8000b54:	237f      	movs	r3, #127	; 0x7f
 8000b56:	e7e1      	b.n	8000b1c <AI_Init+0x134>
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	e7df      	b.n	8000b1c <AI_Init+0x134>
 8000b5c:	20004af0 	.word	0x20004af0

08000b60 <AI_Run>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Run(AiContext_TypeDef* Ai_Context_Ptr)
{
  ai_run((void*)Ai_Context_Ptr->nn_input_buffer, (void*)Ai_Context_Ptr->nn_output_buffer);
 8000b60:	e9d0 1000 	ldrd	r1, r0, [r0]
 8000b64:	f7ff bf2a 	b.w	80009bc <ai_run>

08000b68 <AI_PixelValueConversion>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @param  pSrc           Pointer to source buffer
* @retval None
*/
void AI_PixelValueConversion(AiContext_TypeDef* Ai_Context_Ptr, void *pSrc)
{
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
  /**Check format of the input so to call the right fucntion for pixel format conversion**/
  if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_Q)
 8000b6e:	f7ff fe01 	bl	8000774 <ai_get_input_format>
 8000b72:	2802      	cmp	r0, #2
 8000b74:	d02a      	beq.n	8000bcc <AI_PixelValueConversion+0x64>
  {
    AI_PixelValueConversion_QuantizedNN(Ai_Context_Ptr, (uint8_t *)pSrc);
  }
  else if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_FLOAT)
 8000b76:	f7ff fdfd 	bl	8000774 <ai_get_input_format>
 8000b7a:	2801      	cmp	r0, #1
 8000b7c:	d000      	beq.n	8000b80 <AI_PixelValueConversion+0x18>
      while(1);
    }
  }
  else
  {
    while(1);
 8000b7e:	e7fe      	b.n	8000b7e <AI_PixelValueConversion+0x16>
    if(Ai_Context_Ptr->nn_input_norm_scale == 255.0f)
 8000b80:	edd5 7a04 	vldr	s15, [r5, #16]
 8000b84:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000c2c <AI_PixelValueConversion+0xc4>
 8000b88:	eef4 7a47 	vcmp.f32	s15, s14
 8000b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b90:	d03a      	beq.n	8000c08 <AI_PixelValueConversion+0xa0>
    else if(Ai_Context_Ptr->nn_input_norm_scale == 127.0f)
 8000b92:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000c30 <AI_PixelValueConversion+0xc8>
 8000b96:	eef4 7a47 	vcmp.f32	s15, s14
 8000b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9e:	d132      	bne.n	8000c06 <AI_PixelValueConversion+0x9e>
    while(1);
  }

  for (int32_t i = 0; i < nb_pixels; i++)
  {
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000ba0:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000ba4:	686b      	ldr	r3, [r5, #4]
  for (int32_t i = 0; i < nb_pixels; i++)
 8000ba6:	f504 4240 	add.w	r2, r4, #49152	; 0xc000
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000baa:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000c34 <AI_PixelValueConversion+0xcc>
 8000bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bb2:	eeb0 7a46 	vmov.f32	s14, s12
 8000bb6:	ee07 1a90 	vmov	s15, r1
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bba:	42a2      	cmp	r2, r4
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000bc4:	eca3 7a01 	vstmia	r3!, {s14}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bc8:	d1f1      	bne.n	8000bae <AI_PixelValueConversion+0x46>
}
 8000bca:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t *pDst = (uint8_t *) Ai_Context_Ptr->nn_input_buffer;
 8000bcc:	686b      	ldr	r3, [r5, #4]
  const uint8_t *lut = Ai_Context_Ptr->lut;
 8000bce:	68e9      	ldr	r1, [r5, #12]
  if (pDst > pSrc)
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	d20b      	bcs.n	8000bec <AI_PixelValueConversion+0x84>
 8000bd4:	f504 4240 	add.w	r2, r4, #49152	; 0xc000
 8000bd8:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
      pDst[i] = lut[pSrc[i]];
 8000bdc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8000be0:	5c08      	ldrb	r0, [r1, r0]
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000be2:	42a2      	cmp	r2, r4
      pDst[i] = lut[pSrc[i]];
 8000be4:	f803 0d01 	strb.w	r0, [r3, #-1]!
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000be8:	d1f8      	bne.n	8000bdc <AI_PixelValueConversion+0x74>
}
 8000bea:	bd38      	pop	{r3, r4, r5, pc}
 8000bec:	f64b 7cff 	movw	ip, #49151	; 0xbfff
 8000bf0:	1e62      	subs	r2, r4, #1
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	44a4      	add	ip, r4
      pDst[i] = lut[pSrc[i]];
 8000bf6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8000bfa:	5c08      	ldrb	r0, [r1, r0]
    for (int32_t i = 0; i < nb_pixels; i++)
 8000bfc:	4594      	cmp	ip, r2
      pDst[i] = lut[pSrc[i]];
 8000bfe:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (int32_t i = 0; i < nb_pixels; i++)
 8000c02:	d1f8      	bne.n	8000bf6 <AI_PixelValueConversion+0x8e>
}
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
      while(1);
 8000c06:	e7fe      	b.n	8000c06 <AI_PixelValueConversion+0x9e>
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000c08:	686b      	ldr	r3, [r5, #4]
  for (int32_t i = 0; i < nb_pixels; i++)
 8000c0a:	f504 4240 	add.w	r2, r4, #49152	; 0xc000
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000c0e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000c38 <AI_PixelValueConversion+0xd0>
 8000c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c16:	ee07 1a90 	vmov	s15, r1
  for (int32_t i = 0; i < nb_pixels; i++)
 8000c1a:	42a2      	cmp	r2, r4
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c24:	ece3 7a01 	vstmia	r3!, {s15}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000c28:	d1f3      	bne.n	8000c12 <AI_PixelValueConversion+0xaa>
}
 8000c2a:	bd38      	pop	{r3, r4, r5, pc}
 8000c2c:	437f0000 	.word	0x437f0000
 8000c30:	42fe0000 	.word	0x42fe0000
 8000c34:	3c008081 	.word	0x3c008081
 8000c38:	3b808081 	.word	0x3b808081

08000c3c <AI_Output_Dequantize>:
* @brief  Performs the dequantization of a quantized NN output
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Output_Dequantize(AiContext_TypeDef* Ai_Context_Ptr)
{
 8000c3c:	b510      	push	{r4, lr}
 8000c3e:	ed2d 8b02 	vpush	{d8}
 8000c42:	4604      	mov	r4, r0
  /**Check format of the output and convert to float if required**/
  if(ai_get_output_format() == AI_BUFFER_FMT_TYPE_Q)
 8000c44:	f7ff fd9e 	bl	8000784 <ai_get_output_format>
 8000c48:	2802      	cmp	r0, #2
 8000c4a:	d002      	beq.n	8000c52 <AI_Output_Dequantize+0x16>
      
    default:
      break;
    }  
  }
}
 8000c4c:	ecbd 8b02 	vpop	{d8}
 8000c50:	bd10      	pop	{r4, pc}
    switch(ai_get_output_quantization_scheme())
 8000c52:	f7ff fdcb 	bl	80007ec <ai_get_output_quantization_scheme>
 8000c56:	2801      	cmp	r0, #1
 8000c58:	d066      	beq.n	8000d28 <AI_Output_Dequantize+0xec>
 8000c5a:	2802      	cmp	r0, #2
 8000c5c:	d02d      	beq.n	8000cba <AI_Output_Dequantize+0x7e>
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d1f4      	bne.n	8000c4c <AI_Output_Dequantize+0x10>
      scale=ai_get_output_fxp_scale();
 8000c62:	f7ff fde1 	bl	8000828 <ai_get_output_fxp_scale>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000c66:	6823      	ldr	r3, [r4, #0]
        float q_value = (float) *(nn_output_i8 + i);
 8000c68:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000c6c:	ee06 2a10 	vmov	s12, r2
 8000c70:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000c74:	ee06 2a90 	vmov	s13, r2
 8000c78:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000c7c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000c80:	ee07 2a10 	vmov	s14, r2
 8000c84:	f993 2000 	ldrsb.w	r2, [r3]
 8000c88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000c8c:	ee07 2a90 	vmov	s15, r2
 8000c90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        *(nn_output_f32 + i) = scale * q_value;
 8000c94:	ee26 6a00 	vmul.f32	s12, s12, s0
        float q_value = (float) *(nn_output_i8 + i);
 8000c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        *(nn_output_f32 + i) = scale * q_value;
 8000c9c:	ee66 6a80 	vmul.f32	s13, s13, s0
 8000ca0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8000ca4:	ed83 6a03 	vstr	s12, [r3, #12]
 8000ca8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000cac:	edc3 6a02 	vstr	s13, [r3, #8]
 8000cb0:	ed83 7a01 	vstr	s14, [r3, #4]
 8000cb4:	ed83 0a00 	vstr	s0, [r3]
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000cb8:	e7c8      	b.n	8000c4c <AI_Output_Dequantize+0x10>
      scale = ai_get_output_scale();
 8000cba:	f7ff fe03 	bl	80008c4 <ai_get_output_scale>
 8000cbe:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000cc2:	f7ff fe17 	bl	80008f4 <ai_get_output_zero_point>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000cc6:	6823      	ldr	r3, [r4, #0]
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000cc8:	f993 c003 	ldrsb.w	ip, [r3, #3]
 8000ccc:	f993 4002 	ldrsb.w	r4, [r3, #2]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000cd0:	ebac 0200 	sub.w	r2, ip, r0
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000cd4:	f993 1001 	ldrsb.w	r1, [r3, #1]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000cd8:	ee05 2a90 	vmov	s11, r2
 8000cdc:	1a22      	subs	r2, r4, r0
 8000cde:	ee06 2a10 	vmov	s12, r2
 8000ce2:	1a0a      	subs	r2, r1, r0
 8000ce4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000ce8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000cec:	ee06 2a90 	vmov	s13, r2
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000cf0:	f993 2000 	ldrsb.w	r2, [r3]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000cf4:	1a12      	subs	r2, r2, r0
 8000cf6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000cfa:	ee65 5a88 	vmul.f32	s11, s11, s16
 8000cfe:	ee07 2a90 	vmov	s15, r2
 8000d02:	ee26 6a08 	vmul.f32	s12, s12, s16
 8000d06:	ee66 6a88 	vmul.f32	s13, s13, s16
 8000d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d0e:	edc3 5a03 	vstr	s11, [r3, #12]
 8000d12:	ed83 6a02 	vstr	s12, [r3, #8]
 8000d16:	edc3 6a01 	vstr	s13, [r3, #4]
 8000d1a:	ee67 7a08 	vmul.f32	s15, s14, s16
}
 8000d1e:	ecbd 8b02 	vpop	{d8}
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000d22:	edc3 7a00 	vstr	s15, [r3]
}
 8000d26:	bd10      	pop	{r4, pc}
      scale = ai_get_output_scale();
 8000d28:	f7ff fdcc 	bl	80008c4 <ai_get_output_scale>
 8000d2c:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000d30:	f7ff fde0 	bl	80008f4 <ai_get_output_zero_point>
      nn_output_u8 = (ai_u8 *) Ai_Context_Ptr->nn_output_buffer;
 8000d34:	6823      	ldr	r3, [r4, #0]
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8000d36:	f893 c003 	ldrb.w	ip, [r3, #3]
 8000d3a:	789c      	ldrb	r4, [r3, #2]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000d3c:	ebac 0200 	sub.w	r2, ip, r0
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8000d40:	7859      	ldrb	r1, [r3, #1]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000d42:	ee05 2a90 	vmov	s11, r2
 8000d46:	1a22      	subs	r2, r4, r0
 8000d48:	ee06 2a10 	vmov	s12, r2
 8000d4c:	1a0a      	subs	r2, r1, r0
 8000d4e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000d52:	ee06 2a90 	vmov	s13, r2
 8000d56:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	e7ca      	b.n	8000cf4 <AI_Output_Dequantize+0xb8>
 8000d5e:	bf00      	nop

08000d60 <AI_Deinit>:
/**
 * @brief De-initializes the generated C model for a neural network
 */
void AI_Deinit(void) 
{ 
  ai_deinit(); 
 8000d60:	f7ff be26 	b.w	80009b0 <ai_deinit>

08000d64 <APP_Init>:
  App_Context_Ptr->Operating_Mode=NOMINAL;
  App_Context_Ptr->run_loop=1;
  
  /*Initializes app pointers to contextx*/
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 8000d64:	4926      	ldr	r1, [pc, #152]	; (8000e00 <APP_Init+0x9c>)
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000d66:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <APP_Init+0xa0>)
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <APP_Init+0xa4>)
  
  /**AI**/
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
  /*{scale,zero-point} set to {127.5,127} since Person Detect NN model was trained using input data normalized in the range [-1, 1]*/
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=127.5f;
 8000d6a:	eddf 7a28 	vldr	s15, [pc, #160]	; 8000e0c <APP_Init+0xa8>
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_mobilenetv2");
 8000d6e:	f503 7c70 	add.w	ip, r3, #960	; 0x3c0
/**
 * @brief Initializes the application context structure
 * @param App_Context_Ptr pointer to application context
 */
void APP_Init(AppContext_TypeDef *App_Context_Ptr)
{  
 8000d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 8000d76:	62c1      	str	r1, [r0, #44]	; 0x2c
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000d78:	2701      	movs	r7, #1
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 8000d7a:	4925      	ldr	r1, [pc, #148]	; (8000e10 <APP_Init+0xac>)
{  
 8000d7c:	4604      	mov	r4, r0
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000d7e:	7007      	strb	r7, [r0, #0]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_zp=127;
 8000d80:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
  App_Context_Ptr->run_loop=1;
 8000d84:	6047      	str	r7, [r0, #4]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.w = AI_NETWORK_WIDTH;
 8000d86:	2680      	movs	r6, #128	; 0x80
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000d88:	6242      	str	r2, [r0, #36]	; 0x24
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000d8a:	f04f 0e00 	mov.w	lr, #0
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 8000d8e:	6381      	str	r1, [r0, #56]	; 0x38
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.bpp = IMAGE_BPP_RGB565;
 8000d90:	f04f 0902 	mov.w	r9, #2
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 8000d94:	491f      	ldr	r1, [pc, #124]	; (8000e14 <APP_Init+0xb0>)
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp = IMAGE_BPP_RGB888;
 8000d96:	f04f 0804 	mov.w	r8, #4
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_mobilenetv2");
 8000d9a:	4d1f      	ldr	r5, [pc, #124]	; (8000e18 <APP_Init+0xb4>)
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 8000d9c:	6343      	str	r3, [r0, #52]	; 0x34
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 8000d9e:	6281      	str	r1, [r0, #40]	; 0x28
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8000da0:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8000e20 <APP_Init+0xbc>
  App_Context_Ptr->Camera_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000da4:	e9c2 0706 	strd	r0, r7, [r2, #24]
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 8000da8:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <APP_Init+0xb8>)
 8000daa:	6302      	str	r2, [r0, #48]	; 0x30
  App_Context_Ptr->Utils_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000dac:	6390      	str	r0, [r2, #56]	; 0x38
  App_Context_Ptr->Test_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000dae:	f8c3 05d0 	str.w	r0, [r3, #1488]	; 0x5d0
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_mobilenetv2");
 8000db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000dbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dc2:	e88c 0003 	stmia.w	ip, {r0, r1}
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000dc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  App_Context_Init(App_Context_Ptr);
  Init_DataMemoryLayout(App_Context_Ptr);
 8000dc8:	4620      	mov	r0, r4
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000dca:	60dc      	str	r4, [r3, #12]
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000dcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8000dce:	f8c3 b000 	str.w	fp, [r3]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=127.5f;
 8000dd2:	edc3 7a04 	vstr	s15, [r3, #16]
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000dd6:	e9c3 a405 	strd	sl, r4, [r3, #20]
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr = App_Context_Ptr;
 8000dda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  App_Context_Ptr->Preproc_ContextPtr->red_blue_swap = 1; /* See UM2611 section 3.2.6 Pixel data order */
 8000ddc:	609f      	str	r7, [r3, #8]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.bpp = IMAGE_BPP_RGB565;
 8000dde:	f8c3 9044 	str.w	r9, [r3, #68]	; 0x44
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr = App_Context_Ptr;
 8000de2:	64dc      	str	r4, [r3, #76]	; 0x4c
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000de4:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000de8:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp = IMAGE_BPP_RGB888;
 8000dec:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.h = AI_NETWORK_HEIGHT;
 8000df0:	e9c3 660f 	strd	r6, r6, [r3, #60]	; 0x3c
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.h = AI_NETWORK_HEIGHT;
 8000df4:	e9c3 6607 	strd	r6, r6, [r3, #28]
}
 8000df8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Init_DataMemoryLayout(App_Context_Ptr);
 8000dfc:	f016 bf42 	b.w	8017c84 <Init_DataMemoryLayout>
 8000e00:	20004ccc 	.word	0x20004ccc
 8000e04:	20004c40 	.word	0x20004c40
 8000e08:	200054b8 	.word	0x200054b8
 8000e0c:	42ff0000 	.word	0x42ff0000
 8000e10:	20004ad4 	.word	0x20004ad4
 8000e14:	20004cdc 	.word	0x20004cdc
 8000e18:	080257ec 	.word	0x080257ec
 8000e1c:	20005fe4 	.word	0x20005fe4
 8000e20:	20004c30 	.word	0x20004c30

08000e24 <APP_GetNextReadyFrame>:
 *        1. send it to LCD for display
 *        2. make it available for subsequent processing
 * @param App_Context_Ptr pointer to application context
 */
void APP_GetNextReadyFrame(AppContext_TypeDef *App_Context_Ptr)
{
 8000e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
#endif
  
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000e28:	7807      	ldrb	r7, [r0, #0]
{
 8000e2a:	4606      	mov	r6, r0
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000e2c:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 8000e2e:	b08d      	sub	sp, #52	; 0x34
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000e30:	2f02      	cmp	r7, #2
  ValidationContext_TypeDef* Validation_Ctx_Ptr=&App_Context_Ptr->Test_ContextPtr->ValidationContext;
 8000e32:	6b40      	ldr	r0, [r0, #52]	; 0x34
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8000e34:	e9d2 4500 	ldrd	r4, r5, [r2]
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000e38:	f000 808a 	beq.w	8000f50 <APP_GetNextReadyFrame+0x12c>
  {
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
                                cam_capture_buff);    
  } 
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000e3c:	2f03      	cmp	r7, #3
          (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 8000e3e:	f890 9004 	ldrb.w	r9, [r0, #4]
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000e42:	d03c      	beq.n	8000ebe <APP_GetNextReadyFrame+0x9a>
                          cam_capture_buff);
  }
  else
  {
    /* Wait for current camera acquisition to complete*/
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000e44:	7d13      	ldrb	r3, [r2, #20]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0fc      	beq.n	8000e44 <APP_GetNextReadyFrame+0x20>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000e4a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e4e:	46a0      	mov	r8, r4
 8000e50:	f019 f93a 	bl	801a0c8 <UTIL_LCD_Clear>
  if (operating_mode == VALID || ((operating_mode == DUMP) && (frame_source == SDCARD_FILE)))
 8000e54:	2f02      	cmp	r7, #2
 8000e56:	d045      	beq.n	8000ee4 <APP_GetNextReadyFrame+0xc0>
 8000e58:	2f03      	cmp	r7, #3
 8000e5a:	d108      	bne.n	8000e6e <APP_GetNextReadyFrame+0x4a>
 8000e5c:	f1b9 0f03 	cmp.w	r9, #3
 8000e60:	d105      	bne.n	8000e6e <APP_GetNextReadyFrame+0x4a>
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000e62:	2202      	movs	r2, #2
 8000e64:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000e68:	4640      	mov	r0, r8
 8000e6a:	f004 f879 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr,
 8000e6e:	2300      	movs	r3, #0
 8000e70:	22f0      	movs	r2, #240	; 0xf0
 8000e72:	4641      	mov	r1, r8
 8000e74:	9303      	str	r3, [sp, #12]
 8000e76:	2302      	movs	r3, #2
 8000e78:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8000e7c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2378      	movs	r3, #120	; 0x78
 8000e84:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8000e86:	f000 fd51 	bl	800192c <DISPLAY_Copy2LCDWriteBuffer>
  
  /* DMA2D transfer from camera frame buffer to LCD write buffer */
  CameraCaptureBuff2LcdBuff_Copy(App_Context_Ptr);
  
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT  
  if(App_Context_Ptr->Operating_Mode != VALID)
 8000e8a:	7833      	ldrb	r3, [r6, #0]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d005      	beq.n	8000e9c <APP_GetNextReadyFrame+0x78>
  {
    /****Coherency purpose: invalidate the camera_capture_buffer area in L1 D-Cache before CPU reading****/
    UTILS_DCache_Coherency_Maintenance((void*)cam_capture_buff, 
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000e96:	4620      	mov	r0, r4
 8000e98:	f004 f862 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
 8000e9c:	1c63      	adds	r3, r4, #1
 8000e9e:	1aeb      	subs	r3, r5, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d95f      	bls.n	8000f64 <APP_GetNextReadyFrame+0x140>
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	462a      	mov	r2, r5
 8000ea8:	f504 3016 	add.w	r0, r4, #153600	; 0x25800
  }
  
  /****Copy the camera_capture_buff buffer content onto the camera_frame_buff buffer so to release the camera capture buffer before triggering the subsequent camera frame capture****/
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
  {
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000eac:	f853 1b04 	ldr.w	r1, [r3], #4
 8000eb0:	4283      	cmp	r3, r0
 8000eb2:	f842 1b04 	str.w	r1, [r2], #4
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000eb6:	d1f9      	bne.n	8000eac <APP_GetNextReadyFrame+0x88>
  }
#endif
}
 8000eb8:	b00d      	add	sp, #52	; 0x34
 8000eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000ebe:	f1b9 0f03 	cmp.w	r9, #3
 8000ec2:	d1bf      	bne.n	8000e44 <APP_GetNextReadyFrame+0x20>
    TEST_GetNextDumpInput(App_Context_Ptr->Test_ContextPtr, 
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	f002 fa5b 	bl	8003380 <TEST_GetNextDumpInput>
  MemDumpFrameSource_TypeDef frame_source = App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource;
 8000eca:	6b72      	ldr	r2, [r6, #52]	; 0x34
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000ecc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  uint8_t *camera_capture_buffer = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000ed0:	6a73      	ldr	r3, [r6, #36]	; 0x24
  AppOperatingMode_TypeDef operating_mode = App_Context_Ptr->Operating_Mode;
 8000ed2:	7837      	ldrb	r7, [r6, #0]
  MemDumpFrameSource_TypeDef frame_source = App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource;
 8000ed4:	f892 9004 	ldrb.w	r9, [r2, #4]
  uint8_t *camera_capture_buffer = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000ed8:	f8d3 8000 	ldr.w	r8, [r3]
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000edc:	f019 f8f4 	bl	801a0c8 <UTIL_LCD_Clear>
  if (operating_mode == VALID || ((operating_mode == DUMP) && (frame_source == SDCARD_FILE)))
 8000ee0:	2f02      	cmp	r7, #2
 8000ee2:	d1b9      	bne.n	8000e58 <APP_GetNextReadyFrame+0x34>
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000ee4:	463a      	mov	r2, r7
 8000ee6:	4640      	mov	r0, r8
 8000ee8:	f44f 3116 	mov.w	r1, #153600	; 0x25800
    camera_out_img.w = CAM_RES_WIDTH;
 8000eec:	f04f 09f0 	mov.w	r9, #240	; 0xf0
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000ef0:	f004 f836 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    thumb_img.data = valid_image_buff;
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <APP_GetNextReadyFrame+0x164>)
    STM32Ipl_Downscale(&camera_out_img, &thumb_img, false);
 8000ef6:	a908      	add	r1, sp, #32
 8000ef8:	2200      	movs	r2, #0
 8000efa:	a804      	add	r0, sp, #16
    thumb_img.data = valid_image_buff;
 8000efc:	930b      	str	r3, [sp, #44]	; 0x2c
    thumb_img.bpp = IMAGE_BPP_RGB565;
 8000efe:	970a      	str	r7, [sp, #40]	; 0x28
    camera_out_img.bpp = IMAGE_BPP_RGB565;
 8000f00:	e9cd 7806 	strd	r7, r8, [sp, #24]
    camera_out_img.w = CAM_RES_WIDTH;
 8000f04:	f44f 78a0 	mov.w	r8, #320	; 0x140
 8000f08:	e9cd 8904 	strd	r8, r9, [sp, #16]
    thumb_img.w = 224;
 8000f0c:	f04f 08e0 	mov.w	r8, #224	; 0xe0
 8000f10:	f04f 09e0 	mov.w	r9, #224	; 0xe0
 8000f14:	e9cd 8908 	strd	r8, r9, [sp, #32]
    STM32Ipl_Downscale(&camera_out_img, &thumb_img, false);
 8000f18:	f018 fd8a 	bl	8019a30 <STM32Ipl_Downscale>
    UTILS_DCache_Coherency_Maintenance((void *)thumb_img.data, STM32Ipl_ImageDataSize(&thumb_img), CLEAN);
 8000f1c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000f20:	a808      	add	r0, sp, #32
 8000f22:	f016 ffed 	bl	8017f00 <STM32Ipl_ImageDataSize>
 8000f26:	463a      	mov	r2, r7
 8000f28:	4601      	mov	r1, r0
 8000f2a:	4640      	mov	r0, r8
 8000f2c:	f004 f818 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr,
 8000f30:	2200      	movs	r2, #0
 8000f32:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8000f36:	9203      	str	r2, [sp, #12]
 8000f38:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	2382      	movs	r3, #130	; 0x82
 8000f40:	9200      	str	r2, [sp, #0]
 8000f42:	2232      	movs	r2, #50	; 0x32
 8000f44:	9702      	str	r7, [sp, #8]
 8000f46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000f48:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8000f4a:	f000 fcef 	bl	800192c <DISPLAY_Copy2LCDWriteBuffer>
 8000f4e:	e79c      	b.n	8000e8a <APP_GetNextReadyFrame+0x66>
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000f50:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8000f54:	b19b      	cbz	r3, 8000f7e <APP_GetNextReadyFrame+0x15a>
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000f56:	7d13      	ldrb	r3, [r2, #20]
          (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 8000f58:	f890 9004 	ldrb.w	r9, [r0, #4]
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f43f af71 	beq.w	8000e44 <APP_GetNextReadyFrame+0x20>
 8000f62:	e772      	b.n	8000e4a <APP_GetNextReadyFrame+0x26>
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <APP_GetNextReadyFrame+0x168>)
 8000f66:	1e63      	subs	r3, r4, #1
 8000f68:	1e6a      	subs	r2, r5, #1
 8000f6a:	4420      	add	r0, r4
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000f6c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000f70:	4283      	cmp	r3, r0
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000f72:	f802 1f01 	strb.w	r1, [r2, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000f76:	d1f9      	bne.n	8000f6c <APP_GetNextReadyFrame+0x148>
}
 8000f78:	b00d      	add	sp, #52	; 0x34
 8000f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
 8000f7e:	4621      	mov	r1, r4
 8000f80:	f002 fa5e 	bl	8003440 <TEST_GetNextValidationInput>
 8000f84:	e7a1      	b.n	8000eca <APP_GetNextReadyFrame+0xa6>
 8000f86:	bf00      	nop
 8000f88:	d0100000 	.word	0xd0100000
 8000f8c:	000257ff 	.word	0x000257ff

08000f90 <APP_StartNewFrameAcquisition>:
/**
 * @brief Start the camera acquisition of the subsequent frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_StartNewFrameAcquisition(AppContext_TypeDef *App_Context_Ptr)
{
 8000f90:	b570      	push	{r4, r5, r6, lr}
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8000f92:	7803      	ldrb	r3, [r0, #0]
{
 8000f94:	4604      	mov	r4, r0
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d008      	beq.n	8000fac <APP_StartNewFrameAcquisition+0x1c>
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d006      	beq.n	8000fac <APP_StartNewFrameAcquisition+0x1c>
     App_Context_Ptr->Operating_Mode == CAPTURE || 
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d000      	beq.n	8000fa4 <APP_StartNewFrameAcquisition+0x14>
    
    /***Resume the camera capture in NOMINAL mode****/
    BSP_CAMERA_Resume(0);
  //  __enable_irq();
  }
}
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
       ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)))
 8000fa4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000fa6:	791b      	ldrb	r3, [r3, #4]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d0fa      	beq.n	8000fa2 <APP_StartNewFrameAcquisition+0x12>
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000fac:	2500      	movs	r5, #0
 8000fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000fb0:	6b26      	ldr	r6, [r4, #48]	; 0x30
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000fb2:	609d      	str	r5, [r3, #8]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000fb4:	f009 fdc2 	bl	800ab3c <HAL_GetTick>
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000fba:	4602      	mov	r2, r0
    BSP_CAMERA_Resume(0);
 8000fbc:	4628      	mov	r0, r5
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000fbe:	61b2      	str	r2, [r6, #24]
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000fc0:	751d      	strb	r5, [r3, #20]
}
 8000fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_CAMERA_Resume(0);
 8000fc6:	f008 bdb5 	b.w	8009b34 <BSP_CAMERA_Resume>
 8000fca:	bf00      	nop

08000fcc <APP_FramePreprocess>:
 * @param App_Context_Ptr pointer to application context
 */
void APP_FramePreprocess(AppContext_TypeDef *App_Context_Ptr)
{
  /*Call a fct in charge of executing the sequence of preprocessing steps*/
  Run_Preprocessing(App_Context_Ptr);
 8000fcc:	f016 be6e 	b.w	8017cac <Run_Preprocessing>

08000fd0 <APP_NetworkInference>:
/**
 * @brief Run neural network inference on preprocessed captured frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_NetworkInference(AppContext_TypeDef *App_Context_Ptr)
{
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	4604      	mov	r4, r0
  uint32_t tinf_stop;
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8000fd4:	2180      	movs	r1, #128	; 0x80
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
  TestRunCtxt_Ptr->PerformCapture=1;
 8000fd6:	2201      	movs	r2, #1
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
 8000fd8:	2504      	movs	r5, #4
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 8000fda:	4e15      	ldr	r6, [pc, #84]	; (8001030 <APP_NetworkInference+0x60>)
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8000fdc:	e9d0 300d 	ldrd	r3, r0, [r0, #52]	; 0x34
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8000fe0:	6840      	ldr	r0, [r0, #4]
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8000fe2:	f8c3 15a0 	str.w	r1, [r3, #1440]	; 0x5a0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8000fe6:	f8c3 0598 	str.w	r0, [r3, #1432]	; 0x598
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
 8000fea:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8000fee:	f8c3 15a4 	str.w	r1, [r3, #1444]	; 0x5a4
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 8000ff2:	2100      	movs	r1, #0
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
 8000ff4:	f8c3 55a8 	str.w	r5, [r3, #1448]	; 0x5a8
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
 8000ff8:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
  TestRunCtxt_Ptr->rb_swap=1;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8000ffc:	4618      	mov	r0, r3
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 8000ffe:	f8c3 659c 	str.w	r6, [r3, #1436]	; 0x59c
  TestRunCtxt_Ptr->PerformCapture=1;
 8001002:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
  TestRunCtxt_Ptr->rb_swap=1;
 8001006:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 800100a:	f883 15b4 	strb.w	r1, [r3, #1460]	; 0x5b4
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 800100e:	7821      	ldrb	r1, [r4, #0]
 8001010:	f002 fedc 	bl	8003dcc <TEST_Run>
 
  tinf_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8001014:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001016:	f003 fef5 	bl	8004e04 <UTILS_GetTimeStamp>
 800101a:	4605      	mov	r5, r0
  
  /***********************************/
  /*********Run NN inference**********/
  /***********************************/
  AI_Run(App_Context_Ptr->Ai_ContextPtr);
 800101c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800101e:	f7ff fd9f 	bl	8000b60 <AI_Run>
  
  tinf_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8001022:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001024:	f003 feee 	bl	8004e04 <UTILS_GetTimeStamp>

  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=tinf_stop-tinf_start;
 8001028:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800102a:	1b40      	subs	r0, r0, r5
 800102c:	6118      	str	r0, [r3, #16]
}
 800102e:	bd70      	pop	{r4, r5, r6, pc}
 8001030:	2000007c 	.word	0x2000007c

08001034 <APP_Postprocess>:
/**
 * @brief Run post-processing operation
 * @param App_Context_Ptr pointer to application context
 */
void APP_Postprocess(AppContext_TypeDef *App_Context_Ptr)
{
 8001034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;

  /*** At that point, it is recommended to wait until current camera acquisition is completed before proceeding  
  *** before proceeding in order to avoid bottleneck at FMC slave (btw LTDC/DMA2D and DMA).
  ***/
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001038:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 800103a:	b094      	sub	sp, #80	; 0x50
 800103c:	4604      	mov	r4, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 800103e:	6b45      	ldr	r5, [r0, #52]	; 0x34
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001040:	7d13      	ldrb	r3, [r2, #20]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0fc      	beq.n	8001040 <APP_Postprocess+0xc>
  
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8001046:	6b20      	ldr	r0, [r4, #48]	; 0x30
  /**NN ouput dequantization if required**/
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);

  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
  TestRunCtxt_Ptr->src_width_size=0;
 8001048:	2600      	movs	r6, #0
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 800104a:	f003 ffe5 	bl	8005018 <UTILS_Compute_ExecutionTiming>
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);
 800104e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001050:	f7ff fdf4 	bl	8000c3c <AI_Output_Dequantize>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8001054:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8001056:	4b94      	ldr	r3, [pc, #592]	; (80012a8 <APP_Postprocess+0x274>)
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=AI_NETWORK_OUT_1_SIZE * sizeof(float);
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
 8001058:	2702      	movs	r7, #2
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 800105a:	6812      	ldr	r2, [r2, #0]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 800105c:	f8c5 359c 	str.w	r3, [r5, #1436]	; 0x59c
  TestRunCtxt_Ptr->src_size=AI_NETWORK_OUT_1_SIZE * sizeof(float);
 8001060:	2310      	movs	r3, #16
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8001062:	f8c5 2598 	str.w	r2, [r5, #1432]	; 0x598
  TestRunCtxt_Ptr->src_size=AI_NETWORK_OUT_1_SIZE * sizeof(float);
 8001066:	f8c5 35ac 	str.w	r3, [r5, #1452]	; 0x5ac
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
 800106a:	f885 75b4 	strb.w	r7, [r5, #1460]	; 0x5b4
  TestRunCtxt_Ptr->src_width_size=0;
 800106e:	f8c5 65a0 	str.w	r6, [r5, #1440]	; 0x5a0
  TestRunCtxt_Ptr->src_height_size=0;
 8001072:	f8c5 65a4 	str.w	r6, [r5, #1444]	; 0x5a4
  TestRunCtxt_Ptr->PerformCapture=0;
 8001076:	f8c5 65b0 	str.w	r6, [r5, #1456]	; 0x5b0
  TestRunCtxt_Ptr->rb_swap=0;
 800107a:	f8c5 65b8 	str.w	r6, [r5, #1464]	; 0x5b8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 800107e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001080:	7821      	ldrb	r1, [r4, #0]
 8001082:	f002 fea3 	bl	8003dcc <TEST_Run>
  for (int i = 0; i < NN_OUTPUT_CLASS_NUMBER; i++)
  {
    App_Context_Ptr->ranking[i] = i;
  }
  
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 8001086:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    App_Context_Ptr->ranking[i] = i;
 8001088:	2303      	movs	r3, #3
 800108a:	2201      	movs	r2, #1
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 800108c:	6808      	ldr	r0, [r1, #0]
 800108e:	f104 0114 	add.w	r1, r4, #20
    App_Context_Ptr->ranking[i] = i;
 8001092:	6223      	str	r3, [r4, #32]
 8001094:	6166      	str	r6, [r4, #20]
  
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 8001096:	4d85      	ldr	r5, [pc, #532]	; (80012ac <APP_Postprocess+0x278>)
    App_Context_Ptr->ranking[i] = i;
 8001098:	e9c4 2706 	strd	r2, r7, [r4, #24]
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 800109c:	2204      	movs	r2, #4
 800109e:	f003 ff91 	bl	8004fc4 <UTILS_Bubblesort>
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010a4:	6961      	ldr	r1, [r4, #20]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010a6:	681a      	ldr	r2, [r3, #0]
  
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80010a8:	7823      	ldrb	r3, [r4, #0]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010aa:	6812      	ldr	r2, [r2, #0]
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010ac:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80010b0:	2b01      	cmp	r3, #1
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010b2:	6122      	str	r2, [r4, #16]
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010b4:	60e1      	str	r1, [r4, #12]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80010b6:	d005      	beq.n	80010c4 <APP_Postprocess+0x90>
    
    BSP_LED_Toggle(LED_BLUE);
  }
  else 
  {
    TEST_PostProcess(App_Context_Ptr->Test_ContextPtr);
 80010b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
}
 80010ba:	b014      	add	sp, #80	; 0x50
 80010bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TEST_PostProcess(App_Context_Ptr->Test_ContextPtr);
 80010c0:	f003 b960 	b.w	8004384 <TEST_PostProcess>
  occurrence_number--;
 80010c4:	4a7a      	ldr	r2, [pc, #488]	; (80012b0 <APP_Postprocess+0x27c>)
 80010c6:	6813      	ldr	r3, [r2, #0]
  if (occurrence_number == 0)
 80010c8:	1e5e      	subs	r6, r3, #1
 80010ca:	d006      	beq.n	80010da <APP_Postprocess+0xa6>
  occurrence_number--;
 80010cc:	6016      	str	r6, [r2, #0]
    BSP_LED_Toggle(LED_BLUE);
 80010ce:	2003      	movs	r0, #3
}
 80010d0:	b014      	add	sp, #80	; 0x50
 80010d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    BSP_LED_Toggle(LED_BLUE);
 80010d6:	f007 bcaf 	b.w	8008a38 <BSP_LED_Toggle>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80010da:	4630      	mov	r0, r6
 80010dc:	f007 fd0c 	bl	8008af8 <BSP_PB_GetState>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d16d      	bne.n	80011c0 <APP_Postprocess+0x18c>
 80010e4:	af02      	add	r7, sp, #8
      sprintf(msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[i]], *((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+i) * 100);
 80010e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010e8:	4638      	mov	r0, r7
 80010ea:	eddf 7a72 	vldr	s15, [pc, #456]	; 80012b4 <APP_Postprocess+0x280>
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6962      	ldr	r2, [r4, #20]
 80010f2:	ed93 7a00 	vldr	s14, [r3]
 80010f6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80010fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010fe:	496e      	ldr	r1, [pc, #440]	; (80012b8 <APP_Postprocess+0x284>)
 8001100:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001104:	ed8d 7b00 	vstr	d7, [sp]
 8001108:	f021 fe58 	bl	8022dbc <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + i), (uint8_t *)msg, CENTER_MODE);
 800110c:	f018 ffd4 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001110:	88c1      	ldrh	r1, [r0, #6]
 8001112:	2301      	movs	r3, #1
 8001114:	463a      	mov	r2, r7
 8001116:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800111a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800111e:	2000      	movs	r0, #0
 8001120:	f019 f8c2 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Context_Ptr->nn_inference_time);
 8001124:	68a2      	ldr	r2, [r4, #8]
 8001126:	4965      	ldr	r1, [pc, #404]	; (80012bc <APP_Postprocess+0x288>)
 8001128:	4638      	mov	r0, r7
 800112a:	f021 fe47 	bl	8022dbc <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 800112e:	f018 ffc3 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001132:	88c1      	ldrh	r1, [r0, #6]
 8001134:	2301      	movs	r3, #1
 8001136:	463a      	mov	r2, r7
 8001138:	0109      	lsls	r1, r1, #4
 800113a:	2000      	movs	r0, #0
 800113c:	f019 f8b4 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Fps: %.1f", 1000.0F / (float)(App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.Tfps));
 8001140:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001142:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80012c0 <APP_Postprocess+0x28c>
 8001146:	4638      	mov	r0, r7
 8001148:	edd3 7a05 	vldr	s15, [r3, #20]
 800114c:	495d      	ldr	r1, [pc, #372]	; (80012c4 <APP_Postprocess+0x290>)
 800114e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001156:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800115a:	ec53 2b17 	vmov	r2, r3, d7
 800115e:	f021 fe2d 	bl	8022dbc <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_FPS_LINE), (uint8_t *)msg, CENTER_MODE);
 8001162:	f018 ffa9 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001166:	4601      	mov	r1, r0
 8001168:	2301      	movs	r3, #1
 800116a:	463a      	mov	r2, r7
 800116c:	88c9      	ldrh	r1, [r1, #6]
 800116e:	2000      	movs	r0, #0
 8001170:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001174:	4099      	lsls	r1, r3
 8001176:	f019 f897 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 800117a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800117c:	f000 fbb4 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_Off(LED_GREEN);
 8001180:	2000      	movs	r0, #0
 8001182:	f007 fc47 	bl	8008a14 <BSP_LED_Off>
    BSP_LED_Off(LED_ORANGE);
 8001186:	2001      	movs	r0, #1
 8001188:	f007 fc44 	bl	8008a14 <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 800118c:	2002      	movs	r0, #2
 800118e:	f007 fc41 	bl	8008a14 <BSP_LED_Off>
    if ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_BAD_RES)
 8001192:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001194:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80012c8 <APP_Postprocess+0x294>
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	d47b      	bmi.n	80012a0 <APP_Postprocess+0x26c>
    else if (((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) >= NN_BAD_RES) && ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_GOOD_RES))
 80011a8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80012cc <APP_Postprocess+0x298>
 80011ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      BSP_LED_On(LED_ORANGE);
 80011b4:	bf4c      	ite	mi
 80011b6:	2001      	movmi	r0, #1
      BSP_LED_On(LED_GREEN);
 80011b8:	2000      	movpl	r0, #0
 80011ba:	f007 fc19 	bl	80089f0 <BSP_LED_On>
 80011be:	e786      	b.n	80010ce <APP_Postprocess+0x9a>
      display_mode  = (display_mode + 1) % 4;
 80011c0:	4a43      	ldr	r2, [pc, #268]	; (80012d0 <APP_Postprocess+0x29c>)
        sprintf(msg, "Normal CAMERA mode");
 80011c2:	af02      	add	r7, sp, #8
      display_mode  = (display_mode + 1) % 4;
 80011c4:	6813      	ldr	r3, [r2, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	f003 0803 	and.w	r8, r3, #3
      switch (display_mode)
 80011cc:	f1b8 0f02 	cmp.w	r8, #2
      display_mode  = (display_mode + 1) % 4;
 80011d0:	f8c2 8000 	str.w	r8, [r2]
      switch (display_mode)
 80011d4:	d060      	beq.n	8001298 <APP_Postprocess+0x264>
 80011d6:	f1b8 0f03 	cmp.w	r8, #3
 80011da:	d048      	beq.n	800126e <APP_Postprocess+0x23a>
 80011dc:	f1b8 0f01 	cmp.w	r8, #1
 80011e0:	d050      	beq.n	8001284 <APP_Postprocess+0x250>
        mirror_flip = CAMERA_MIRRORFLIP_NONE;
 80011e2:	46b0      	mov	r8, r6
        sprintf(msg, "Normal CAMERA mode");
 80011e4:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 80012d4 <APP_Postprocess+0x2a0>
 80011e8:	463e      	mov	r6, r7
 80011ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011f0:	f8dc 3000 	ldr.w	r3, [ip]
 80011f4:	f826 3b02 	strh.w	r3, [r6], #2
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	7033      	strb	r3, [r6, #0]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80011fc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
      sprintf(msg, "Please release button");
 8001200:	463e      	mov	r6, r7
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001202:	f018 ff61 	bl	801a0c8 <UTIL_LCD_Clear>
      UTIL_LCD_DisplayStringAt(0, LINE(9), (uint8_t*)msg, CENTER_MODE);
 8001206:	f018 ff57 	bl	801a0b8 <UTIL_LCD_GetFont>
 800120a:	88c1      	ldrh	r1, [r0, #6]
 800120c:	2301      	movs	r3, #1
 800120e:	463a      	mov	r2, r7
 8001210:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001214:	2000      	movs	r0, #0
 8001216:	f019 f847 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      CAMERA_Set_MirrorFlip(App_Context_Ptr->Camera_ContextPtr, mirror_flip);
 800121a:	4641      	mov	r1, r8
 800121c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800121e:	f000 f98f 	bl	8001540 <CAMERA_Set_MirrorFlip>
      sprintf(msg, "Please release button");
 8001222:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80012d8 <APP_Postprocess+0x2a4>
 8001226:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800122a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800122c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001230:	f846 0b04 	str.w	r0, [r6], #4
 8001234:	8031      	strh	r1, [r6, #0]
      UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t*)msg, CENTER_MODE);
 8001236:	f018 ff3f 	bl	801a0b8 <UTIL_LCD_GetFont>
 800123a:	88c3      	ldrh	r3, [r0, #6]
 800123c:	463a      	mov	r2, r7
 800123e:	2000      	movs	r0, #0
 8001240:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001244:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8001248:	2301      	movs	r3, #1
 800124a:	f019 f82d 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 800124e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001250:	f000 fb4a 	bl	80018e8 <DISPLAY_Refresh>
      while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET);
 8001254:	2000      	movs	r0, #0
 8001256:	f007 fc4f 	bl	8008af8 <BSP_PB_GetState>
 800125a:	2800      	cmp	r0, #0
 800125c:	d1fa      	bne.n	8001254 <APP_Postprocess+0x220>
      HAL_Delay(200);
 800125e:	20c8      	movs	r0, #200	; 0xc8
 8001260:	f009 fc72 	bl	800ab48 <HAL_Delay>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001264:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001268:	f018 ff2e 	bl	801a0c8 <UTIL_LCD_Clear>
 800126c:	e73b      	b.n	80010e6 <APP_Postprocess+0xb2>
        sprintf(msg, "Mirror and Flip CAMERA mode");
 800126e:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80012dc <APP_Postprocess+0x2a8>
 8001272:	463e      	mov	r6, r7
 8001274:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001278:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800127a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800127e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        break;
 8001282:	e7bb      	b.n	80011fc <APP_Postprocess+0x1c8>
        sprintf(msg, "Flip CAMERA mode");
 8001284:	f8df c058 	ldr.w	ip, [pc, #88]	; 80012e0 <APP_Postprocess+0x2ac>
 8001288:	463e      	mov	r6, r7
 800128a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800128e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001290:	f8dc 3000 	ldr.w	r3, [ip]
 8001294:	7033      	strb	r3, [r6, #0]
        break;
 8001296:	e7b1      	b.n	80011fc <APP_Postprocess+0x1c8>
        sprintf(msg, "Mirror CAMERA mode");
 8001298:	463e      	mov	r6, r7
 800129a:	f8df c048 	ldr.w	ip, [pc, #72]	; 80012e4 <APP_Postprocess+0x2b0>
 800129e:	e7a4      	b.n	80011ea <APP_Postprocess+0x1b6>
      BSP_LED_On(LED_RED);
 80012a0:	2002      	movs	r0, #2
 80012a2:	f007 fba5 	bl	80089f0 <BSP_LED_On>
 80012a6:	e712      	b.n	80010ce <APP_Postprocess+0x9a>
 80012a8:	2000009c 	.word	0x2000009c
 80012ac:	20000004 	.word	0x20000004
 80012b0:	20000000 	.word	0x20000000
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	08025884 	.word	0x08025884
 80012bc:	08025890 	.word	0x08025890
 80012c0:	447a0000 	.word	0x447a0000
 80012c4:	080258a4 	.word	0x080258a4
 80012c8:	3f0ccccd 	.word	0x3f0ccccd
 80012cc:	3f333333 	.word	0x3f333333
 80012d0:	20004c2c 	.word	0x20004c2c
 80012d4:	08025858 	.word	0x08025858
 80012d8:	0802586c 	.word	0x0802586c
 80012dc:	0802583c 	.word	0x0802583c
 80012e0:	08025814 	.word	0x08025814
 80012e4:	08025828 	.word	0x08025828

080012e8 <DCMI_MDMAError>:
  * @retval None
  */
static void DCMI_MDMAError(MDMA_HandleTypeDef *hmdma)
{
  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80012e8:	6802      	ldr	r2, [r0, #0]
 80012ea:	68d3      	ldr	r3, [r2, #12]
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	60d3      	str	r3, [r2, #12]

  Error_Handler();
 80012f2:	f003 bea5 	b.w	8005040 <Error_Handler>
 80012f6:	bf00      	nop

080012f8 <DCMI_DMAError>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80012fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80012fe:	2a02      	cmp	r2, #2
 8001300:	d006      	beq.n	8001310 <DCMI_DMAError+0x18>
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800130a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800130e:	64da      	str	r2, [r3, #76]	; 0x4c
  Error_Handler();
 8001310:	f003 be96 	b.w	8005040 <Error_Handler>

08001314 <DCMI_DMALineXferCplt>:
{
 8001314:	4603      	mov	r3, r0
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8001316:	490b      	ldr	r1, [pc, #44]	; (8001344 <DCMI_DMALineXferCplt+0x30>)
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <DCMI_DMALineXferCplt+0x34>)
{
 800131a:	b570      	push	{r4, r5, r6, lr}
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800131c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
{
 800131e:	b082      	sub	sp, #8
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8001320:	2601      	movs	r6, #1
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8001322:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 8001324:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001326:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8001328:	009b      	lsls	r3, r3, #2
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 800132a:	9600      	str	r6, [sp, #0]
 800132c:	fb03 2205 	mla	r2, r3, r5, r2
 8001330:	f00d f928 	bl	800e584 <HAL_MDMA_Start_IT>
 8001334:	b908      	cbnz	r0, 800133a <DCMI_DMALineXferCplt+0x26>
}
 8001336:	b002      	add	sp, #8
 8001338:	bd70      	pop	{r4, r5, r6, pc}
 800133a:	b002      	add	sp, #8
 800133c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8001340:	f003 be7e 	b.w	8005040 <Error_Handler>
 8001344:	30000000 	.word	0x30000000
 8001348:	20004c60 	.word	0x20004c60

0800134c <DCMI_MDMAFrameXferCplt>:
  __HAL_MDMA_DISABLE(hmdma);
 800134c:	6801      	ldr	r1, [r0, #0]
  hdcmi->XferCount++;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <DCMI_MDMAFrameXferCplt+0x3c>)
  __HAL_MDMA_DISABLE(hmdma);
 8001350:	68ca      	ldr	r2, [r1, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001352:	6c18      	ldr	r0, [r3, #64]	; 0x40
  __HAL_MDMA_DISABLE(hmdma);
 8001354:	f022 0201 	bic.w	r2, r2, #1
 8001358:	60ca      	str	r2, [r1, #12]
  hdcmi->XferCount++;
 800135a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800135c:	3201      	adds	r2, #1
 800135e:	639a      	str	r2, [r3, #56]	; 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001362:	4282      	cmp	r2, r0
 8001364:	d000      	beq.n	8001368 <DCMI_MDMAFrameXferCplt+0x1c>
}
 8001366:	4770      	bx	lr
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68d1      	ldr	r1, [r2, #12]
 800136c:	f041 0101 	orr.w	r1, r1, #1
 8001370:	60d1      	str	r1, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	f012 0202 	ands.w	r2, r2, #2
 8001378:	d003      	beq.n	8001382 <DCMI_MDMAFrameXferCplt+0x36>
      hdcmi->State = HAL_DCMI_STATE_READY;
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001380:	4770      	bx	lr
      hdcmi->XferCount = 0;
 8001382:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20006f10 	.word	0x20006f10

0800138c <CAMERA_Init>:
{
 800138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Camera_Context_Ptr->new_frame_ready=0;
 8001390:	2300      	movs	r3, #0
{
 8001392:	4605      	mov	r5, r0
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001394:	4a5e      	ldr	r2, [pc, #376]	; (8001510 <CAMERA_Init+0x184>)
{
 8001396:	b082      	sub	sp, #8
  Camera_Context_Ptr->vsync_it=0;
 8001398:	60ab      	str	r3, [r5, #8]
  Camera_Context_Ptr->new_frame_ready=0;
 800139a:	752b      	strb	r3, [r5, #20]
  hmdma.Instance = MDMA_Channel0;
 800139c:	4c5d      	ldr	r4, [pc, #372]	; (8001514 <CAMERA_Init+0x188>)
 800139e:	485e      	ldr	r0, [pc, #376]	; (8001518 <CAMERA_Init+0x18c>)
  Camera_Context_Ptr->Tvsync_evt=0;
 80013a0:	e9c5 3303 	strd	r3, r3, [r5, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 80013a4:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80013a8:	6123      	str	r3, [r4, #16]
  __HAL_RCC_MDMA_CLK_ENABLE();
 80013aa:	f041 0101 	orr.w	r1, r1, #1
  hmdma.Init.SourceBurst              = MDMA_DEST_BURST_SINGLE;
 80013ae:	62e3      	str	r3, [r4, #44]	; 0x2c
  hmdma.Init.DestBlockAddressOffset   = 0;
 80013b0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  __HAL_RCC_MDMA_CLK_ENABLE();
 80013b4:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80013b8:	2380      	movs	r3, #128	; 0x80
  __HAL_RCC_MDMA_CLK_ENABLE();
 80013ba:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 80013be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80013c2:	60e3      	str	r3, [r4, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 80013c4:	f002 0201 	and.w	r2, r2, #1
  hmdma.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80013c8:	6223      	str	r3, [r4, #32]
  hmdma.Init.BufferTransferLength     = 128;
 80013ca:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80013cc:	2320      	movs	r3, #32
  __HAL_RCC_MDMA_CLK_ENABLE();
 80013ce:	9201      	str	r2, [sp, #4]
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 80013d0:	f240 2202 	movw	r2, #514	; 0x202
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 80013d4:	6061      	str	r1, [r4, #4]
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80013d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 80013da:	6162      	str	r2, [r4, #20]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80013dc:	f640 0208 	movw	r2, #2056	; 0x808
  hmdma.Instance = MDMA_Channel0;
 80013e0:	6020      	str	r0, [r4, #0]
  __HAL_RCC_MDMA_CLK_ENABLE();
 80013e2:	9801      	ldr	r0, [sp, #4]
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 80013e4:	4620      	mov	r0, r4
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80013e6:	60a1      	str	r1, [r4, #8]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80013e8:	e9c4 2306 	strd	r2, r3, [r4, #24]
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80013ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 80013f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80013f4:	6262      	str	r2, [r4, #36]	; 0x24
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 80013f6:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 80013f8:	f00d f84a 	bl	800e490 <HAL_MDMA_Init>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d17f      	bne.n	8001500 <CAMERA_Init+0x174>
  HAL_NVIC_SetPriority(MDMA_IRQn, 15U, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	210f      	movs	r1, #15
 8001404:	207a      	movs	r0, #122	; 0x7a
 8001406:	f009 fbd1 	bl	800abac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800140a:	207a      	movs	r0, #122	; 0x7a
 800140c:	f009 fc0c 	bl	800ac28 <HAL_NVIC_EnableIRQ>
  BSP_CAMERA_PwrDown(0);
 8001410:	2000      	movs	r0, #0
 8001412:	f008 fc0d 	bl	8009c30 <BSP_CAMERA_PwrDown>
  HAL_Delay(200);
 8001416:	20c8      	movs	r0, #200	; 0xc8
 8001418:	f009 fb96 	bl	800ab48 <HAL_Delay>
  if (BSP_CAMERA_Init(0, CAMERA_RESOLUTION, CAMERA_PF_RGB565) != BSP_ERROR_NONE) 
 800141c:	2200      	movs	r2, #0
 800141e:	2101      	movs	r1, #1
 8001420:	4610      	mov	r0, r2
 8001422:	f008 f94d 	bl	80096c0 <BSP_CAMERA_Init>
 8001426:	2800      	cmp	r0, #0
 8001428:	d167      	bne.n	80014fa <CAMERA_Init+0x16e>
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 800142a:	4a3c      	ldr	r2, [pc, #240]	; (800151c <CAMERA_Init+0x190>)
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 800142c:	f245 6140 	movw	r1, #22080	; 0x5640
 8001430:	483b      	ldr	r0, [pc, #236]	; (8001520 <CAMERA_Init+0x194>)
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 8001432:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001434:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001438:	6593      	str	r3, [r2, #88]	; 0x58
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_MBURST, DMA_MBURST_INC4);
 800143a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800143c:	f023 73c0 	bic.w	r3, r3, #25165824	; 0x1800000
 8001440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001444:	6593      	str	r3, [r2, #88]	; 0x58
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 8001446:	6803      	ldr	r3, [r0, #0]
 8001448:	428b      	cmp	r3, r1
 800144a:	d046      	beq.n	80014da <CAMERA_Init+0x14e>
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 800144c:	69e9      	ldr	r1, [r5, #28]
 800144e:	2000      	movs	r0, #0
 8001450:	f008 fbc8 	bl	8009be4 <BSP_CAMERA_SetMirrorFlip>
 8001454:	4607      	mov	r7, r0
 8001456:	2800      	cmp	r0, #0
 8001458:	d13e      	bne.n	80014d8 <CAMERA_Init+0x14c>
  __HAL_LOCK(hdcmi);
 800145a:	4e32      	ldr	r6, [pc, #200]	; (8001524 <CAMERA_Init+0x198>)
  HAL_Delay(100);
 800145c:	2064      	movs	r0, #100	; 0x64
 800145e:	f009 fb73 	bl	800ab48 <HAL_Delay>
  __HAL_LOCK(hdcmi);
 8001462:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8001466:	2b01      	cmp	r3, #1
 8001468:	d051      	beq.n	800150e <CAMERA_Init+0x182>
  __HAL_DCMI_ENABLE(hdcmi);
 800146a:	6831      	ldr	r1, [r6, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800146c:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 800146e:	f04f 0801 	mov.w	r8, #1
  if (HAL_DCMIEx_Start_DMA_MDMA(&hcamera_dcmi, CAMERA_MODE_CONTINUOUS,
 8001472:	682a      	ldr	r2, [r5, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001474:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 8001478:	f886 8034 	strb.w	r8, [r6, #52]	; 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 800147c:	680b      	ldr	r3, [r1, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 800147e:	6cb0      	ldr	r0, [r6, #72]	; 0x48
  __HAL_DCMI_ENABLE(hdcmi);
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	600b      	str	r3, [r1, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001486:	680b      	ldr	r3, [r1, #0]
 8001488:	f023 0302 	bic.w	r3, r3, #2
 800148c:	600b      	str	r3, [r1, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800148e:	680b      	ldr	r3, [r1, #0]
 8001490:	f841 3b28 	str.w	r3, [r1], #40
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <CAMERA_Init+0x19c>)
  hdcmi->XferCount = 0;
 8001496:	63b7      	str	r7, [r6, #56]	; 0x38
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8001498:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdcmi->XferSize = line_size / 4U;
 800149a:	23a0      	movs	r3, #160	; 0xa0
  hdcmi->pBuffPtr = (uint32_t) pData;
 800149c:	6472      	str	r2, [r6, #68]	; 0x44
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 800149e:	4a23      	ldr	r2, [pc, #140]	; (800152c <CAMERA_Init+0x1a0>)
  hdcmi->XferSize = line_size / 4U;
 80014a0:	63f3      	str	r3, [r6, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 80014a2:	6462      	str	r2, [r4, #68]	; 0x44
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <CAMERA_Init+0x1a4>)
  hmdma.XferErrorCallback = DCMI_MDMAError;
 80014a6:	4a23      	ldr	r2, [pc, #140]	; (8001534 <CAMERA_Init+0x1a8>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80014a8:	64c3      	str	r3, [r0, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80014aa:	6507      	str	r7, [r0, #80]	; 0x50
  hmdma.XferErrorCallback = DCMI_MDMAError;
 80014ac:	6562      	str	r2, [r4, #84]	; 0x54
  hdcmi->XferTransferNumber = num_lines;
 80014ae:	22f0      	movs	r2, #240	; 0xf0
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 80014b0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  hdcmi->XferTransferNumber = num_lines;
 80014b2:	6432      	str	r2, [r6, #64]	; 0x40
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 80014b4:	4a20      	ldr	r2, [pc, #128]	; (8001538 <CAMERA_Init+0x1ac>)
 80014b6:	f00a fa57 	bl	800b968 <HAL_DMA_Start_IT>
 80014ba:	4603      	mov	r3, r0
 80014bc:	bb18      	cbnz	r0, 8001506 <CAMERA_Init+0x17a>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80014be:	6831      	ldr	r1, [r6, #0]
  HAL_Delay(200);
 80014c0:	20c8      	movs	r0, #200	; 0xc8
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80014c2:	680a      	ldr	r2, [r1, #0]
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	600a      	str	r2, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 80014ca:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 80014ce:	b002      	add	sp, #8
 80014d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Delay(200);
 80014d4:	f009 bb38 	b.w	800ab48 <HAL_Delay>
    while(1);
 80014d8:	e7fe      	b.n	80014d8 <CAMERA_Init+0x14c>
    OV5640_Object_t *pObj = Camera_CompObj;
 80014da:	4918      	ldr	r1, [pc, #96]	; (800153c <CAMERA_Init+0x1b0>)
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 80014dc:	22c0      	movs	r2, #192	; 0xc0
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 80014de:	2301      	movs	r3, #1
    OV5640_Object_t *pObj = Camera_CompObj;
 80014e0:	6808      	ldr	r0, [r1, #0]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 80014e2:	f243 0136 	movw	r1, #12342	; 0x3036
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 80014e6:	f88d 2003 	strb.w	r2, [sp, #3]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 80014ea:	f10d 0203 	add.w	r2, sp, #3
 80014ee:	3018      	adds	r0, #24
 80014f0:	f006 fd8a 	bl	8008008 <ov5640_write_reg>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	d0a9      	beq.n	800144c <CAMERA_Init+0xc0>
      while(1);
 80014f8:	e7fe      	b.n	80014f8 <CAMERA_Init+0x16c>
    Error_Handler();
 80014fa:	f003 fda1 	bl	8005040 <Error_Handler>
 80014fe:	e794      	b.n	800142a <CAMERA_Init+0x9e>
    Error_Handler();
 8001500:	f003 fd9e 	bl	8005040 <Error_Handler>
 8001504:	e77c      	b.n	8001400 <CAMERA_Init+0x74>
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001506:	2340      	movs	r3, #64	; 0x40
 8001508:	64f3      	str	r3, [r6, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_READY;
 800150a:	f886 8035 	strb.w	r8, [r6, #53]	; 0x35
    while(1);
 800150e:	e7fe      	b.n	800150e <CAMERA_Init+0x182>
 8001510:	58024400 	.word	0x58024400
 8001514:	20004c60 	.word	0x20004c60
 8001518:	52000040 	.word	0x52000040
 800151c:	40020400 	.word	0x40020400
 8001520:	20006e84 	.word	0x20006e84
 8001524:	20006f10 	.word	0x20006f10
 8001528:	08001315 	.word	0x08001315
 800152c:	0800134d 	.word	0x0800134d
 8001530:	080012f9 	.word	0x080012f9
 8001534:	080012e9 	.word	0x080012e9
 8001538:	30000000 	.word	0x30000000
 800153c:	20006e80 	.word	0x20006e80

08001540 <CAMERA_Set_MirrorFlip>:
{
 8001540:	b508      	push	{r3, lr}
 8001542:	4603      	mov	r3, r0
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 8001544:	2000      	movs	r0, #0
  Camera_Context_Ptr->mirror_flip = MirrorFlip;
 8001546:	61d9      	str	r1, [r3, #28]
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 8001548:	f008 fb4c 	bl	8009be4 <BSP_CAMERA_SetMirrorFlip>
 800154c:	b900      	cbnz	r0, 8001550 <CAMERA_Set_MirrorFlip+0x10>
}
 800154e:	bd08      	pop	{r3, pc}
    while(1);
 8001550:	e7fe      	b.n	8001550 <CAMERA_Set_MirrorFlip+0x10>
 8001552:	bf00      	nop

08001554 <CAMERA_Enable_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 8001554:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <CAMERA_Enable_TestBar_Mode+0x5c>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <CAMERA_Enable_TestBar_Mode+0x60>)
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	4413      	add	r3, r2
 800155c:	2b01      	cmp	r3, #1
{ 
 800155e:	b510      	push	{r4, lr}
 8001560:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 8001562:	d906      	bls.n	8001572 <CAMERA_Enable_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <CAMERA_Enable_TestBar_Mode+0x64>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_ENABLE) != OV5640_OK)
 8001566:	2101      	movs	r1, #1
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	f006 fd01 	bl	8007f70 <OV5640_ColorbarModeConfig>
 800156e:	b1b8      	cbz	r0, 80015a0 <CAMERA_Enable_TestBar_Mode+0x4c>
      while(1);
 8001570:	e7fe      	b.n	8001570 <CAMERA_Enable_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 8001572:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <CAMERA_Enable_TestBar_Mode+0x64>)
    ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001574:	2301      	movs	r3, #1
 8001576:	218d      	movs	r1, #141	; 0x8d
 8001578:	6814      	ldr	r4, [r2, #0]
 800157a:	f10d 0207 	add.w	r2, sp, #7
 800157e:	3418      	adds	r4, #24
 8001580:	4620      	mov	r0, r4
 8001582:	f007 f9f7 	bl	8008974 <ov9655_read_reg>
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8001586:	f89d c007 	ldrb.w	ip, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800158a:	2301      	movs	r3, #1
 800158c:	f10d 0207 	add.w	r2, sp, #7
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8001590:	f04c 0c10 	orr.w	ip, ip, #16
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001594:	218d      	movs	r1, #141	; 0x8d
 8001596:	4620      	mov	r0, r4
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8001598:	f88d c007 	strb.w	ip, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800159c:	f007 f9f2 	bl	8008984 <ov9655_write_reg>
  HAL_Delay(500);
 80015a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80015a4:	b002      	add	sp, #8
 80015a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(500);
 80015aa:	f009 bacd 	b.w	800ab48 <HAL_Delay>
 80015ae:	bf00      	nop
 80015b0:	20006e84 	.word	0x20006e84
 80015b4:	ffff69aa 	.word	0xffff69aa
 80015b8:	20006e80 	.word	0x20006e80

080015bc <CAMERA_Disable_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 80015bc:	4a18      	ldr	r2, [pc, #96]	; (8001620 <CAMERA_Disable_TestBar_Mode+0x64>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <CAMERA_Disable_TestBar_Mode+0x68>)
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	2b01      	cmp	r3, #1
{ 
 80015c6:	b510      	push	{r4, lr}
 80015c8:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80015ca:	d906      	bls.n	80015da <CAMERA_Disable_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <CAMERA_Disable_TestBar_Mode+0x6c>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_DISABLE) != OV5640_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	f006 fccd 	bl	8007f70 <OV5640_ColorbarModeConfig>
 80015d6:	b1e0      	cbz	r0, 8001612 <CAMERA_Disable_TestBar_Mode+0x56>
      while(1);
 80015d8:	e7fe      	b.n	80015d8 <CAMERA_Disable_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <CAMERA_Disable_TestBar_Mode+0x6c>)
    tmp=0x00;
 80015dc:	2100      	movs	r1, #0
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80015de:	2301      	movs	r3, #1
    OV9655_Object_t *pObj = Camera_CompObj;
 80015e0:	6814      	ldr	r4, [r2, #0]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80015e2:	f10d 0207 	add.w	r2, sp, #7
    tmp=0x00;
 80015e6:	f88d 1007 	strb.w	r1, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80015ea:	218d      	movs	r1, #141	; 0x8d
 80015ec:	3418      	adds	r4, #24
 80015ee:	4620      	mov	r0, r4
 80015f0:	f007 f9c8 	bl	8008984 <ov9655_write_reg>
    HAL_Delay(300);
 80015f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015f8:	f009 faa6 	bl	800ab48 <HAL_Delay>
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL3, &tmp, 1);
 80015fc:	2301      	movs	r3, #1
 80015fe:	f10d 0207 	add.w	r2, sp, #7
 8001602:	210c      	movs	r1, #12
 8001604:	4620      	mov	r0, r4
 8001606:	f007 f9bd 	bl	8008984 <ov9655_write_reg>
    HAL_Delay(300);
 800160a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800160e:	f009 fa9b 	bl	800ab48 <HAL_Delay>
  HAL_Delay(500);
 8001612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8001616:	b002      	add	sp, #8
 8001618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(500);
 800161c:	f009 ba94 	b.w	800ab48 <HAL_Delay>
 8001620:	20006e84 	.word	0x20006e84
 8001624:	ffff69aa 	.word	0xffff69aa
 8001628:	20006e80 	.word	0x20006e80

0800162c <BSP_CAMERA_FrameEventCallback>:
{
 800162c:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 800162e:	4c0c      	ldr	r4, [pc, #48]	; (8001660 <BSP_CAMERA_FrameEventCallback+0x34>)
 8001630:	69a3      	ldr	r3, [r4, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001632:	b672      	cpsid	i
  CameraContext.new_frame_ready = 1;
 8001634:	2501      	movs	r5, #1
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 8001636:	6b1e      	ldr	r6, [r3, #48]	; 0x30
  CameraContext.new_frame_ready = 1;
 8001638:	7525      	strb	r5, [r4, #20]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 800163a:	f009 fa7f 	bl	800ab3c <HAL_GetTick>
 800163e:	6270      	str	r0, [r6, #36]	; 0x24
  CameraContext.new_frame_ready = 1;
 8001640:	7525      	strb	r5, [r4, #20]
  CameraContext.Tframe_evt=HAL_GetTick();
 8001642:	f009 fa7b 	bl	800ab3c <HAL_GetTick>
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 8001646:	6923      	ldr	r3, [r4, #16]
  CameraContext.Tframe_evt=HAL_GetTick();
 8001648:	60e0      	str	r0, [r4, #12]
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 800164a:	1ac3      	subs	r3, r0, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d801      	bhi.n	8001654 <BSP_CAMERA_FrameEventCallback+0x28>
    CameraContext.vsync_it =2;
 8001650:	2302      	movs	r3, #2
 8001652:	60a3      	str	r3, [r4, #8]
  BSP_CAMERA_Suspend(0);
 8001654:	2000      	movs	r0, #0
 8001656:	f008 fa5d 	bl	8009b14 <BSP_CAMERA_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 800165a:	b662      	cpsie	i
}
 800165c:	bd70      	pop	{r4, r5, r6, pc}
 800165e:	bf00      	nop
 8001660:	20004c40 	.word	0x20004c40

08001664 <BSP_CAMERA_VsyncEventCallback>:
{ 
 8001664:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 8001666:	4c19      	ldr	r4, [pc, #100]	; (80016cc <BSP_CAMERA_VsyncEventCallback+0x68>)
 8001668:	69a5      	ldr	r5, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800166a:	b672      	cpsid	i
  CameraContext.Tvsync_evt=HAL_GetTick();
 800166c:	f009 fa66 	bl	800ab3c <HAL_GetTick>
  if(CameraContext.vsync_it==0)
 8001670:	68a3      	ldr	r3, [r4, #8]
  CameraContext.Tvsync_evt=HAL_GetTick();
 8001672:	6120      	str	r0, [r4, #16]
  if(CameraContext.vsync_it==0)
 8001674:	b19b      	cbz	r3, 800169e <BSP_CAMERA_VsyncEventCallback+0x3a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001676:	2b01      	cmp	r3, #1
 8001678:	d007      	beq.n	800168a <BSP_CAMERA_VsyncEventCallback+0x26>
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 800167a:	68e3      	ldr	r3, [r4, #12]
 800167c:	1ac0      	subs	r0, r0, r3
 800167e:	2802      	cmp	r0, #2
 8001680:	d801      	bhi.n	8001686 <BSP_CAMERA_VsyncEventCallback+0x22>
    CameraContext.vsync_it =2;
 8001682:	2302      	movs	r3, #2
 8001684:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001686:	b662      	cpsie	i
}
 8001688:	bd70      	pop	{r4, r5, r6, pc}
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 800168a:	7d23      	ldrb	r3, [r4, #20]
 800168c:	b9a3      	cbnz	r3, 80016b8 <BSP_CAMERA_VsyncEventCallback+0x54>
 800168e:	68e3      	ldr	r3, [r4, #12]
 8001690:	1ac0      	subs	r0, r0, r3
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001692:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    CameraContext.vsync_it ++;
 8001694:	2102      	movs	r1, #2
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001696:	69da      	ldr	r2, [r3, #28]
    CameraContext.vsync_it ++;
 8001698:	60a1      	str	r1, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 800169a:	621a      	str	r2, [r3, #32]
    CameraContext.vsync_it ++;
 800169c:	e7ef      	b.n	800167e <BSP_CAMERA_VsyncEventCallback+0x1a>
    CameraContext.vsync_it ++;
 800169e:	2301      	movs	r3, #1
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 80016a0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    CameraContext.vsync_it ++;
 80016a2:	60a3      	str	r3, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 80016a4:	f009 fa4a 	bl	800ab3c <HAL_GetTick>
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 80016a8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 80016aa:	6923      	ldr	r3, [r4, #16]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 80016ac:	6991      	ldr	r1, [r2, #24]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 80016ae:	61f0      	str	r0, [r6, #28]
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 80016b0:	68e0      	ldr	r0, [r4, #12]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 80016b2:	6211      	str	r1, [r2, #32]
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 80016b4:	1a18      	subs	r0, r3, r0
 80016b6:	e7e2      	b.n	800167e <BSP_CAMERA_VsyncEventCallback+0x1a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 80016b8:	7d23      	ldrb	r3, [r4, #20]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	68e3      	ldr	r3, [r4, #12]
 80016be:	eba0 0003 	sub.w	r0, r0, r3
 80016c2:	d1dc      	bne.n	800167e <BSP_CAMERA_VsyncEventCallback+0x1a>
 80016c4:	2802      	cmp	r0, #2
 80016c6:	d8de      	bhi.n	8001686 <BSP_CAMERA_VsyncEventCallback+0x22>
 80016c8:	e7e3      	b.n	8001692 <BSP_CAMERA_VsyncEventCallback+0x2e>
 80016ca:	bf00      	nop
 80016cc:	20004c40 	.word	0x20004c40

080016d0 <BSP_CAMERA_ErrorCallback>:
  Error_Handler();
 80016d0:	f003 bcb6 	b.w	8005040 <Error_Handler>

080016d4 <DISPLAY_Init>:
 * @param Display_Context_Ptr pointer to display context
 * @retval None
 */
static void Display_Context_Init(DisplayContext_TypeDef* Display_Context_Ptr)
{
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 80016d4:	4921      	ldr	r1, [pc, #132]	; (800175c <DISPLAY_Init+0x88>)
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <DISPLAY_Init+0x8c>)

  /*
   * Disable FMC Bank1 to prevent CPU speculative read accesses
   * AN4861: 4.6.1 Disable FMC bank1 if not used.
   */
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80016d8:	4a22      	ldr	r2, [pc, #136]	; (8001764 <DISPLAY_Init+0x90>)
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 80016da:	6809      	ldr	r1, [r1, #0]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 80016dc:	681b      	ldr	r3, [r3, #0]
{
 80016de:	b530      	push	{r4, r5, lr}
  Display_Context_Ptr->lcd_sync=0;
 80016e0:	2500      	movs	r5, #0
{
 80016e2:	b087      	sub	sp, #28
 80016e4:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync=0;
 80016e6:	6085      	str	r5, [r0, #8]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 80016e8:	e9c0 1300 	strd	r1, r3, [r0]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80016ec:	6813      	ldr	r3, [r2, #0]

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 80016ee:	2101      	movs	r1, #1
 80016f0:	4628      	mov	r0, r5
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 80016f8:	f009 f872 	bl	800a7e0 <BSP_LCD_Init>

  config.X0          = 0;
 80016fc:	2000      	movs	r0, #0
 80016fe:	f44f 7148 	mov.w	r1, #800	; 0x320
  config.X1          = LCD_DEFAULT_WIDTH;
  config.Y0          = 0;
  config.Y1          = LCD_DEFAULT_HEIGHT;
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8001702:	6823      	ldr	r3, [r4, #0]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8001704:	466a      	mov	r2, sp
  config.X0          = 0;
 8001706:	e9cd 0100 	strd	r0, r1, [sp]
 800170a:	2000      	movs	r0, #0
 800170c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001710:	e9cd 0102 	strd	r0, r1, [sp, #8]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8001714:	4629      	mov	r1, r5
 8001716:	4628      	mov	r0, r5
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8001718:	e9cd 5304 	strd	r5, r3, [sp, #16]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 800171c:	f009 f86c 	bl	800a7f8 <BSP_LCD_ConfigLayer>
  
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8001720:	4811      	ldr	r0, [pc, #68]	; (8001768 <DISPLAY_Init+0x94>)
 8001722:	f018 fc71 	bl	801a008 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8001726:	4628      	mov	r0, r5
 8001728:	f018 fc9e 	bl	801a068 <UTIL_LCD_SetLayer>
  
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 800172c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001730:	f018 fcb2 	bl	801a098 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f018 fca6 	bl	801a088 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <DISPLAY_Init+0x98>)
 800173e:	f018 fcb3 	bl	801a0a8 <UTIL_LCD_SetFont>
  
  /*Use lcd_frame_write_buff buffer for display composition*/
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <DISPLAY_Init+0x9c>)
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <DISPLAY_Init+0xa0>)
 8001746:	2534      	movs	r5, #52	; 0x34
 8001748:	689b      	ldr	r3, [r3, #8]
  
  /*LCD sync: set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 800174a:	2102      	movs	r1, #2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 800174c:	6862      	ldr	r2, [r4, #4]
 800174e:	fb05 0303 	mla	r3, r5, r3, r0
 8001752:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001754:	f00c fe80 	bl	800e458 <HAL_LTDC_Reload>
}
 8001758:	b007      	add	sp, #28
 800175a:	bd30      	pop	{r4, r5, pc}
 800175c:	20000014 	.word	0x20000014
 8001760:	20000018 	.word	0x20000018
 8001764:	52004000 	.word	0x52004000
 8001768:	08060418 	.word	0x08060418
 800176c:	2000481c 	.word	0x2000481c
 8001770:	20006fdc 	.word	0x20006fdc
 8001774:	200070a0 	.word	0x200070a0

08001778 <DISPLAY_WelcomeScreen>:
 *
 * @param Display_Context_Ptr pointer to display context
 * @return int boolean value, 1 if WakeUp button has been pressed, 0 otherwise
 */
int DISPLAY_WelcomeScreen(DisplayContext_TypeDef* Display_Context_Ptr)
{
 8001778:	b530      	push	{r4, r5, lr}
 800177a:	4604      	mov	r4, r0
 800177c:	b089      	sub	sp, #36	; 0x24
  int magic_menu = 0;
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800177e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001782:	f018 fca1 	bl	801a0c8 <UTIL_LCD_Clear>

  /* Draw logos.*/
  BSP_LCD_DrawBitmap(0, 50, 77, (uint8_t *)stlogo);
 8001786:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <DISPLAY_WelcomeScreen+0x144>)
 8001788:	224d      	movs	r2, #77	; 0x4d
 800178a:	2132      	movs	r1, #50	; 0x32
 800178c:	2000      	movs	r0, #0
 800178e:	f008 fb4f 	bl	8009e30 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 620, 85, (uint8_t *)stm32h7logo);
 8001792:	4b4b      	ldr	r3, [pc, #300]	; (80018c0 <DISPLAY_WelcomeScreen+0x148>)
 8001794:	2255      	movs	r2, #85	; 0x55
 8001796:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800179a:	2000      	movs	r0, #0
 800179c:	f008 fb48 	bl	8009e30 <BSP_LCD_DrawBitmap>

  /*Display welcome message*/
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"VISION1 Function Pack", CENTER_MODE);
 80017a0:	f018 fc8a 	bl	801a0b8 <UTIL_LCD_GetFont>
 80017a4:	4601      	mov	r1, r0
 80017a6:	2301      	movs	r3, #1
 80017a8:	4a46      	ldr	r2, [pc, #280]	; (80018c4 <DISPLAY_WelcomeScreen+0x14c>)
 80017aa:	88c9      	ldrh	r1, [r1, #6]
 80017ac:	2000      	movs	r0, #0
 80017ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80017b2:	4099      	lsls	r1, r3
 80017b4:	f018 fd78 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"V3.1.0", CENTER_MODE);
 80017b8:	f018 fc7e 	bl	801a0b8 <UTIL_LCD_GetFont>
 80017bc:	4601      	mov	r1, r0
 80017be:	2301      	movs	r3, #1
 80017c0:	4a41      	ldr	r2, [pc, #260]	; (80018c8 <DISPLAY_WelcomeScreen+0x150>)
 80017c2:	88c9      	ldrh	r1, [r1, #6]
 80017c4:	2000      	movs	r0, #0
 80017c6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80017ca:	f018 fd6d 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)WELCOME_MSG_0, CENTER_MODE);
 80017ce:	f018 fc73 	bl	801a0b8 <UTIL_LCD_GetFont>
 80017d2:	4601      	mov	r1, r0
 80017d4:	2301      	movs	r3, #1
 80017d6:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <DISPLAY_WelcomeScreen+0x154>)
 80017d8:	88c9      	ldrh	r1, [r1, #6]
 80017da:	2000      	movs	r0, #0
 80017dc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80017e0:	4099      	lsls	r1, r3
 80017e2:	f018 fd61 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)WELCOME_MSG_2, CENTER_MODE);
 80017e6:	f018 fc67 	bl	801a0b8 <UTIL_LCD_GetFont>
 80017ea:	88c1      	ldrh	r1, [r0, #6]
 80017ec:	2301      	movs	r3, #1
 80017ee:	4a38      	ldr	r2, [pc, #224]	; (80018d0 <DISPLAY_WelcomeScreen+0x158>)
 80017f0:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80017f4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80017f8:	2000      	movs	r0, #0
 80017fa:	f018 fd55 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)WELCOME_MSG_1, CENTER_MODE);
 80017fe:	f018 fc5b 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001802:	4601      	mov	r1, r0
 8001804:	2301      	movs	r3, #1
 8001806:	4a33      	ldr	r2, [pc, #204]	; (80018d4 <DISPLAY_WelcomeScreen+0x15c>)
 8001808:	88c9      	ldrh	r1, [r1, #6]
 800180a:	2000      	movs	r0, #0
 800180c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001810:	0089      	lsls	r1, r1, #2
 8001812:	f018 fd49 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *)WELCOME_MSG_4, CENTER_MODE);
 8001816:	f018 fc4f 	bl	801a0b8 <UTIL_LCD_GetFont>
 800181a:	88c1      	ldrh	r1, [r0, #6]
 800181c:	2301      	movs	r3, #1
 800181e:	4a2e      	ldr	r2, [pc, #184]	; (80018d8 <DISPLAY_WelcomeScreen+0x160>)
 8001820:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001824:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8001828:	2000      	movs	r0, #0
 800182a:	f018 fd3d 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)WELCOME_MSG_5, CENTER_MODE);
 800182e:	f018 fc43 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001832:	4601      	mov	r1, r0
 8001834:	2301      	movs	r3, #1
 8001836:	4a29      	ldr	r2, [pc, #164]	; (80018dc <DISPLAY_WelcomeScreen+0x164>)
 8001838:	88c9      	ldrh	r1, [r1, #6]
 800183a:	2000      	movs	r0, #0
 800183c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001840:	4099      	lsls	r1, r3
 8001842:	f018 fd31 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)WELCOME_MSG_3, CENTER_MODE);
 8001846:	f018 fc37 	bl	801a0b8 <UTIL_LCD_GetFont>
 800184a:	4601      	mov	r1, r0
 800184c:	2301      	movs	r3, #1
 800184e:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <DISPLAY_WelcomeScreen+0x168>)
 8001850:	88c9      	ldrh	r1, [r1, #6]
 8001852:	2000      	movs	r0, #0
 8001854:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001858:	f018 fd26 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
 */
void DISPLAY_Refresh(DisplayContext_TypeDef* Display_Context_Ptr)
{
  /*LCD sync: wait for next VSYNC event before refreshing, i.e. before updating the content of the buffer that will be read by the LTDC for display. 
  The refresh occurs during the blanking period => this sync mecanism should enable to avoid tearing effect*/
  Display_Context_Ptr->lcd_sync =0;
 800185c:	2300      	movs	r3, #0
 800185e:	60a3      	str	r3, [r4, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 8001860:	68a3      	ldr	r3, [r4, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0fc      	beq.n	8001860 <DISPLAY_WelcomeScreen+0xe8>
  
  /*Coherency purpose: clean the lcd_frame_write_buff area in L1 D-Cache before DMA2D reading*/
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001866:	6860      	ldr	r0, [r4, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	491e      	ldr	r1, [pc, #120]	; (80018e4 <DISPLAY_WelcomeScreen+0x16c>)
 800186c:	f003 fb78 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
  
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001870:	2300      	movs	r3, #0
 8001872:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001876:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  int magic_menu = 0;
 800187a:	461d      	mov	r5, r3
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 800187c:	9200      	str	r2, [sp, #0]
 800187e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001882:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001886:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800188a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800188e:	2405      	movs	r4, #5
 8001890:	461a      	mov	r2, r3
 8001892:	f003 fab9 	bl	8004e08 <UTILS_Dma2d_Memcpy>
    HAL_Delay(500);
 8001896:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800189a:	f009 f955 	bl	800ab48 <HAL_Delay>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 800189e:	2000      	movs	r0, #0
 80018a0:	f007 f92a 	bl	8008af8 <BSP_PB_GetState>
      magic_menu = 1;
 80018a4:	2800      	cmp	r0, #0
 80018a6:	bf18      	it	ne
 80018a8:	2501      	movne	r5, #1
  for (int i = 0; i < 5; i++)
 80018aa:	3c01      	subs	r4, #1
 80018ac:	d1f3      	bne.n	8001896 <DISPLAY_WelcomeScreen+0x11e>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80018ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018b2:	f018 fc09 	bl	801a0c8 <UTIL_LCD_Clear>
}
 80018b6:	4628      	mov	r0, r5
 80018b8:	b009      	add	sp, #36	; 0x24
 80018ba:	bd30      	pop	{r4, r5, pc}
 80018bc:	081000a8 	.word	0x081000a8
 80018c0:	081082f0 	.word	0x081082f0
 80018c4:	08100008 	.word	0x08100008
 80018c8:	08100020 	.word	0x08100020
 80018cc:	08100028 	.word	0x08100028
 80018d0:	0810003c 	.word	0x0810003c
 80018d4:	08100054 	.word	0x08100054
 80018d8:	0810006c 	.word	0x0810006c
 80018dc:	08100080 	.word	0x08100080
 80018e0:	081000a0 	.word	0x081000a0
 80018e4:	00177000 	.word	0x00177000

080018e8 <DISPLAY_Refresh>:
{
 80018e8:	b510      	push	{r4, lr}
  Display_Context_Ptr->lcd_sync =0;
 80018ea:	2300      	movs	r3, #0
{
 80018ec:	b088      	sub	sp, #32
 80018ee:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync =0;
 80018f0:	6083      	str	r3, [r0, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 80018f2:	68a3      	ldr	r3, [r4, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0fc      	beq.n	80018f2 <DISPLAY_Refresh+0xa>
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 80018f8:	6860      	ldr	r0, [r4, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	490a      	ldr	r1, [pc, #40]	; (8001928 <DISPLAY_Refresh+0x40>)
 80018fe:	f003 fb2f 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001902:	2300      	movs	r3, #0
 8001904:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001908:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800190c:	461a      	mov	r2, r3
 800190e:	9100      	str	r1, [sp, #0]
 8001910:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001914:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001918:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800191c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001920:	f003 fa72 	bl	8004e08 <UTILS_Dma2d_Memcpy>
                     LCD_RES_HEIGHT, LCD_RES_WIDTH, DMA2D_INPUT_ARGB8888, DMA2D_OUTPUT_ARGB8888, 0, 0);
}
 8001924:	b008      	add	sp, #32
 8001926:	bd10      	pop	{r4, pc}
 8001928:	00177000 	.word	0x00177000

0800192c <DISPLAY_Copy2LCDWriteBuffer>:
 * @param input_color_format input color format (e.g DMA2D_INPUT_RGB888)
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 is no swap, 1 is swap
 */
void DISPLAY_Copy2LCDWriteBuffer(DisplayContext_TypeDef* Display_Context_Ptr, uint32_t *pSrc, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                              uint32_t input_color_format, int red_blue_swap)
{
 800192c:	b510      	push	{r4, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	4684      	mov	ip, r0
 8001932:	4608      	mov	r0, r1
 8001934:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001938:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800193c:	f04f 0c01 	mov.w	ip, #1
 8001940:	9400      	str	r4, [sp, #0]
{
 8001942:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001946:	9401      	str	r4, [sp, #4]
{
 8001948:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 800194a:	9403      	str	r4, [sp, #12]
 800194c:	f44f 7448 	mov.w	r4, #800	; 0x320
 8001950:	9402      	str	r4, [sp, #8]
{
 8001952:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001954:	9406      	str	r4, [sp, #24]
 8001956:	2400      	movs	r4, #0
 8001958:	e9cd 4c04 	strd	r4, ip, [sp, #16]
 800195c:	f003 fa54 	bl	8004e08 <UTILS_Dma2d_Memcpy>
                input_color_format, DMA2D_OUTPUT_ARGB8888, 1, red_blue_swap);
}
 8001960:	b008      	add	sp, #32
 8001962:	bd10      	pop	{r4, pc}

08001964 <HAL_LTDC_ReloadEventCallback>:

}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
  Display_Context.lcd_sync=1;
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <HAL_LTDC_ReloadEventCallback+0xc>)
 8001966:	2201      	movs	r2, #1
  
  /*Set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001968:	2102      	movs	r1, #2
  Display_Context.lcd_sync=1;
 800196a:	609a      	str	r2, [r3, #8]
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 800196c:	f00c bd74 	b.w	800e458 <HAL_LTDC_Reload>
 8001970:	20004ccc 	.word	0x20004ccc

08001974 <PREPROC_ImageResize>:
/**
 * @brief Performs image (or selected Region Of Interest) resizing
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_ImageResize(PreprocContext_TypeDef* Preproc_Context_Ptr)
{
 8001974:	b510      	push	{r4, lr}
  image_t *src_img = &Preproc_Context_Ptr->Resize_Src_Img;
 8001976:	f100 042c 	add.w	r4, r0, #44	; 0x2c
{
 800197a:	b082      	sub	sp, #8
  image_t *dst_img = &Preproc_Context_Ptr->Resize_Dst_Img;
 800197c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
  bool reverse = Image_CheckResizeMemoryLayout(src_img, dst_img);
 8001980:	4620      	mov	r0, r4
 8001982:	9101      	str	r1, [sp, #4]
 8001984:	f016 fa6a 	bl	8017e5c <Image_CheckResizeMemoryLayout>

  if (STM32Ipl_Downscale(src_img, dst_img, reverse) != stm32ipl_err_Ok)
 8001988:	9901      	ldr	r1, [sp, #4]
  bool reverse = Image_CheckResizeMemoryLayout(src_img, dst_img);
 800198a:	4602      	mov	r2, r0
  if (STM32Ipl_Downscale(src_img, dst_img, reverse) != stm32ipl_err_Ok)
 800198c:	4620      	mov	r0, r4
 800198e:	f018 f84f 	bl	8019a30 <STM32Ipl_Downscale>
 8001992:	b908      	cbnz	r0, 8001998 <PREPROC_ImageResize+0x24>
  {
    while (1);
  }
}
 8001994:	b002      	add	sp, #8
 8001996:	bd10      	pop	{r4, pc}
    while (1);
 8001998:	e7fe      	b.n	8001998 <PREPROC_ImageResize+0x24>
 800199a:	bf00      	nop

0800199c <PREPROC_PixelFormatConversion>:
  image_t *src_img = &Preproc_Context_Ptr->Pfc_Src_Img;
  image_t *dst_img = &Preproc_Context_Ptr->Pfc_Dst_Img;
  uint32_t rb_swap = Preproc_Context_Ptr->red_blue_swap;

#if PIXEL_FMT_CONV == HW_PFC
  if((src_img->bpp == IMAGE_BPP_RGB565) && (dst_img->bpp == IMAGE_BPP_RGB888))
 800199c:	6943      	ldr	r3, [r0, #20]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d000      	beq.n	80019a4 <PREPROC_PixelFormatConversion+0x8>
                       1,
                       rb_swap);
  }
  else
  {
    while (1);
 80019a2:	e7fe      	b.n	80019a2 <PREPROC_PixelFormatConversion+0x6>
  if((src_img->bpp == IMAGE_BPP_RGB565) && (dst_img->bpp == IMAGE_BPP_RGB888))
 80019a4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80019a6:	2a04      	cmp	r2, #4
 80019a8:	d1fb      	bne.n	80019a2 <PREPROC_PixelFormatConversion+0x6>
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 80019aa:	6881      	ldr	r1, [r0, #8]
 80019ac:	2201      	movs	r2, #1
{
 80019ae:	b530      	push	{r4, r5, lr}
 80019b0:	b089      	sub	sp, #36	; 0x24
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 80019b2:	69c5      	ldr	r5, [r0, #28]
 80019b4:	9303      	str	r3, [sp, #12]
 80019b6:	2300      	movs	r3, #0
 80019b8:	9106      	str	r1, [sp, #24]
 80019ba:	8a04      	ldrh	r4, [r0, #16]
 80019bc:	8981      	ldrh	r1, [r0, #12]
 80019be:	9502      	str	r5, [sp, #8]
 80019c0:	e9cd 2204 	strd	r2, r2, [sp, #16]
 80019c4:	e9cd 1400 	strd	r1, r4, [sp]
 80019c8:	461a      	mov	r2, r3
 80019ca:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80019cc:	6980      	ldr	r0, [r0, #24]
 80019ce:	f003 fa1b 	bl	8004e08 <UTILS_Dma2d_Memcpy>
    while (1);
  }
#else
 #error PFC method not valid!
#endif
}
 80019d2:	b009      	add	sp, #36	; 0x24
 80019d4:	bd30      	pop	{r4, r5, pc}
 80019d6:	bf00      	nop

080019d8 <PREPROC_Pixel_RB_Swap>:
  uint8_t tmp_r;
  
  struct rgb_Src *pivot = (struct rgb_Src *) pSrc;
  struct rgb_Dst *dest = (struct rgb_Dst *) pDst;
  
  for (int i = pixels-1; i >= 0; i--)
 80019d8:	1e53      	subs	r3, r2, #1
 80019da:	d412      	bmi.n	8001a02 <PREPROC_Pixel_RB_Swap+0x2a>
 80019dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019e0:	4410      	add	r0, r2
 80019e2:	4411      	add	r1, r2
  {
    tmp_r=pivot[i].r;
 80019e4:	f810 2c03 	ldrb.w	r2, [r0, #-3]
  for (int i = pixels-1; i >= 0; i--)
 80019e8:	3803      	subs	r0, #3
    
    dest[i].r = pivot[i].b;
 80019ea:	f890 c002 	ldrb.w	ip, [r0, #2]
  for (int i = pixels-1; i >= 0; i--)
 80019ee:	3b01      	subs	r3, #1
    dest[i].b = tmp_r;
 80019f0:	f801 2c01 	strb.w	r2, [r1, #-1]
  for (int i = pixels-1; i >= 0; i--)
 80019f4:	3903      	subs	r1, #3
    dest[i].r = pivot[i].b;
 80019f6:	f881 c000 	strb.w	ip, [r1]
    dest[i].g = pivot[i].g;
 80019fa:	7842      	ldrb	r2, [r0, #1]
 80019fc:	704a      	strb	r2, [r1, #1]
  for (int i = pixels-1; i >= 0; i--)
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	d1f0      	bne.n	80019e4 <PREPROC_Pixel_RB_Swap+0xc>
  }
}
 8001a02:	4770      	bx	lr

08001a04 <UartCmd_Run_Validation>:
  /***Resume the camera capture in NOMINAL mode****/
  BSP_CAMERA_Resume(0);
}

static void UartCmd_Run_Validation(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a04:	b410      	push	{r4}
  ************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001a06:	f04f 0c02 	mov.w	ip, #2
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a0a:	2401      	movs	r4, #1
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 8001a0c:	4906      	ldr	r1, [pc, #24]	; (8001a28 <UartCmd_Run_Validation+0x24>)

#ifdef OBJECTDETECT  
  Test_Context_Ptr->ValidationContext.acc_num_object_detected=0;
#endif
  
  App_Cxt_Ptr->run_loop = 0;
 8001a0e:	2200      	movs	r2, #0
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001a10:	f8d0 35d0 	ldr.w	r3, [r0, #1488]	; 0x5d0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a14:	f8c0 44f0 	str.w	r4, [r0, #1264]	; 0x4f0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001a18:	f880 c4f4 	strb.w	ip, [r0, #1268]	; 0x4f4
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 8001a1c:	f8c0 14e8 	str.w	r1, [r0, #1256]	; 0x4e8
}
 8001a20:	f85d 4b04 	ldr.w	r4, [sp], #4
  App_Cxt_Ptr->run_loop = 0;
 8001a24:	605a      	str	r2, [r3, #4]
}
 8001a26:	4770      	bx	lr
 8001a28:	d0cb0920 	.word	0xd0cb0920

08001a2c <UartCmd_Launch_Dump>:
  *This command has two parameters:
  *Dump sub-mode (1 byte): CAMERA_LIVE= 0x01, CAMERA_COLORBAR= 0x02, SDCARD_FILE= 0x03
  *Dump memory location (1 byte): SDCARD (0x00) or SDRAM (0x01)
  ***********************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001a2c:	f8d0 35d0 	ldr.w	r3, [r0, #1488]	; 0x5d0
  
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a30:	f04f 0c03 	mov.w	ip, #3
  App_Cxt_Ptr->run_loop = 0;
 8001a34:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a36:	f880 c4f4 	strb.w	ip, [r0, #1268]	; 0x4f4
{
 8001a3a:	b410      	push	{r4}
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a3c:	2401      	movs	r4, #1
 8001a3e:	f8c0 44f0 	str.w	r4, [r0, #1264]	; 0x4f0
  App_Cxt_Ptr->run_loop = 0;
 8001a42:	605a      	str	r2, [r3, #4]
  
  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=(MemDumpFrameSource_TypeDef)(*(uint8_t*)(data_buffer));
 8001a44:	780b      	ldrb	r3, [r1, #0]
 8001a46:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001a4a:	784b      	ldrb	r3, [r1, #1]
  
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001a4c:	42a3      	cmp	r3, r4
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001a4e:	f880 34f6 	strb.w	r3, [r0, #1270]	; 0x4f6
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001a52:	d101      	bne.n	8001a58 <UartCmd_Launch_Dump+0x2c>
    Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <UartCmd_Launch_Dump+0x34>)
 8001a56:	6003      	str	r3, [r0, #0]
}
 8001a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	d0cb0b40 	.word	0xd0cb0b40

08001a64 <UartCmd_Launch_Capture>:
    Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
  }
}

static void UartCmd_Launch_Capture(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a64:	b410      	push	{r4}

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
  App_Cxt_Ptr->run_loop = 0;
 8001a66:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a68:	2401      	movs	r4, #1
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001a6a:	f8d0 35d0 	ldr.w	r3, [r0, #1488]	; 0x5d0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001a6e:	f04f 0c04 	mov.w	ip, #4
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a72:	f8c0 44f0 	str.w	r4, [r0, #1264]	; 0x4f0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001a76:	f880 c4f4 	strb.w	ip, [r0, #1268]	; 0x4f4
  App_Cxt_Ptr->run_loop = 0;
 8001a7a:	605a      	str	r2, [r3, #4]

  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001a7c:	780b      	ldrb	r3, [r1, #0]
  else
  {
    /*Automatic mode => Program TIM for periodic capture*/
    ;
  }
}
 8001a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001a82:	f880 34fc 	strb.w	r3, [r0, #1276]	; 0x4fc
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001a86:	f8b1 2001 	ldrh.w	r2, [r1, #1]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001a8a:	f8b1 3003 	ldrh.w	r3, [r1, #3]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001a8e:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001a92:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
}
 8001a96:	4770      	bx	lr

08001a98 <UartCmd_Set_Camera_Mode>:
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
}

static void UartCmd_Set_Camera_Mode(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a98:	b510      	push	{r4, lr}
  /******************************SET_CAMERA_MODE_CMD**********************
  *Configure the camera in test bar or normal mode.
  *This command has one parameter:
  *Camera mode: 0x00=Normal, 0x01= Test bar
  ***********************************************************************************/
  if(*(data_buffer) == 0x00)
 8001a9a:	780b      	ldrb	r3, [r1, #0]
{
 8001a9c:	4604      	mov	r4, r0
  if(*(data_buffer) == 0x00)
 8001a9e:	b14b      	cbz	r3, 8001ab4 <UartCmd_Set_Camera_Mode+0x1c>
  {
    CAMERA_Disable_TestBar_Mode(NULL);
  }
  else if(*(data_buffer) == 0x01)
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d00f      	beq.n	8001ac4 <UartCmd_Set_Camera_Mode+0x2c>
 * @param RxDataSize Data size in bytes expected to RX
 */
static void Uart_Rx(TestContext_TypeDef *Test_Context_Ptr, uint8_t *RxDataBufPtr, uint32_t RxDataSize)
{
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001aa4:	220a      	movs	r2, #10
 8001aa6:	4909      	ldr	r1, [pc, #36]	; (8001acc <UartCmd_Set_Camera_Mode+0x34>)
 8001aa8:	f204 500c 	addw	r0, r4, #1292	; 0x50c
 8001aac:	f010 f8a6 	bl	8011bfc <HAL_UART_Receive_DMA>
 8001ab0:	b920      	cbnz	r0, 8001abc <UartCmd_Set_Camera_Mode+0x24>
}
 8001ab2:	bd10      	pop	{r4, pc}
    CAMERA_Disable_TestBar_Mode(NULL);
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fd81 	bl	80015bc <CAMERA_Disable_TestBar_Mode>
 8001aba:	e7f3      	b.n	8001aa4 <UartCmd_Set_Camera_Mode+0xc>
}
 8001abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    /* Transfer error in reception process */
    Error_Handler();
 8001ac0:	f003 babe 	b.w	8005040 <Error_Handler>
    CAMERA_Enable_TestBar_Mode(NULL);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fd45 	bl	8001554 <CAMERA_Enable_TestBar_Mode>
 8001aca:	e7eb      	b.n	8001aa4 <UartCmd_Set_Camera_Mode+0xc>
 8001acc:	300002e0 	.word	0x300002e0

08001ad0 <UartCmd_Write_Camera_Register>:
  OV9655_Object_t *pObj=Camera_CompObj;
 8001ad0:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <UartCmd_Write_Camera_Register+0x44>)
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001ad2:	2301      	movs	r3, #1
{
 8001ad4:	b530      	push	{r4, r5, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 8001ad6:	6815      	ldr	r5, [r2, #0]
{
 8001ad8:	b083      	sub	sp, #12
 8001ada:	4604      	mov	r4, r0
  uint8_t tmp=*(data_buffer+1);
 8001adc:	7848      	ldrb	r0, [r1, #1]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001ade:	f10d 0207 	add.w	r2, sp, #7
 8001ae2:	7809      	ldrb	r1, [r1, #0]
  uint8_t tmp=*(data_buffer+1);
 8001ae4:	f88d 0007 	strb.w	r0, [sp, #7]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001ae8:	f105 0018 	add.w	r0, r5, #24
 8001aec:	f006 ff4a 	bl	8008984 <ov9655_write_reg>
  HAL_Delay(300);
 8001af0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001af4:	f009 f828 	bl	800ab48 <HAL_Delay>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001af8:	220a      	movs	r2, #10
 8001afa:	4907      	ldr	r1, [pc, #28]	; (8001b18 <UartCmd_Write_Camera_Register+0x48>)
 8001afc:	f204 500c 	addw	r0, r4, #1292	; 0x50c
 8001b00:	f010 f87c 	bl	8011bfc <HAL_UART_Receive_DMA>
 8001b04:	b908      	cbnz	r0, 8001b0a <UartCmd_Write_Camera_Register+0x3a>
}
 8001b06:	b003      	add	sp, #12
 8001b08:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001b0a:	f003 fa99 	bl	8005040 <Error_Handler>
}
 8001b0e:	b003      	add	sp, #12
 8001b10:	bd30      	pop	{r4, r5, pc}
 8001b12:	bf00      	nop
 8001b14:	20006e80 	.word	0x20006e80
 8001b18:	300002e0 	.word	0x300002e0

08001b1c <UartCmd_Run_NonRegression>:
{
 8001b1c:	b570      	push	{r4, r5, r6, lr}
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001b1e:	2401      	movs	r4, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001b20:	f240 2503 	movw	r5, #515	; 0x203
{
 8001b24:	4603      	mov	r3, r0
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <UartCmd_Run_NonRegression+0x6c>)
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001b28:	f8c0 44f0 	str.w	r4, [r0, #1264]	; 0x4f0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001b2c:	f8a0 54f4 	strh.w	r5, [r0, #1268]	; 0x4f4
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;
 8001b30:	f880 44f6 	strb.w	r4, [r0, #1270]	; 0x4f6
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001b34:	6808      	ldr	r0, [r1, #0]
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8001b36:	2102      	movs	r1, #2
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001b38:	601a      	str	r2, [r3, #0]
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001b3a:	2280      	movs	r2, #128	; 0x80
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001b3c:	f8c3 04f8 	str.w	r0, [r3, #1272]	; 0x4f8
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=1;
 8001b40:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
  Test_Context_Ptr->NonReg_FirstRun=1;
 8001b44:	f8c3 45d4 	str.w	r4, [r3, #1492]	; 0x5d4
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8001b48:	7119      	strb	r1, [r3, #4]
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001b4a:	2100      	movs	r1, #0
  Test_Context_Ptr->DumpContext.dump_state = 1;
 8001b4c:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001b50:	480e      	ldr	r0, [pc, #56]	; (8001b8c <UartCmd_Run_NonRegression+0x70>)
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001b52:	f8d3 45d0 	ldr.w	r4, [r3, #1488]	; 0x5d0
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001b56:	f020 fbc1 	bl	80222dc <memset>
  App_Cxt_Ptr->Operating_Mode=DUMP;
 8001b5a:	2303      	movs	r3, #3
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8001b5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
  App_Cxt_Ptr->Operating_Mode=DUMP;
 8001b5e:	7023      	strb	r3, [r4, #0]
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8001b60:	f7ff fcf8 	bl	8001554 <CAMERA_Enable_TestBar_Mode>
  while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001b64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b66:	7d13      	ldrb	r3, [r2, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0fc      	beq.n	8001b66 <UartCmd_Run_NonRegression+0x4a>
  App_Cxt_Ptr->Camera_ContextPtr->vsync_it=0;
 8001b6c:	2500      	movs	r5, #0
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001b6e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  App_Cxt_Ptr->Camera_ContextPtr->vsync_it=0;
 8001b70:	6095      	str	r5, [r2, #8]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001b72:	f008 ffe3 	bl	800ab3c <HAL_GetTick>
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001b78:	4602      	mov	r2, r0
  BSP_CAMERA_Resume(0);
 8001b7a:	4628      	mov	r0, r5
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001b7c:	61b2      	str	r2, [r6, #24]
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001b7e:	751d      	strb	r5, [r3, #20]
}
 8001b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_CAMERA_Resume(0);
 8001b84:	f007 bfd6 	b.w	8009b34 <BSP_CAMERA_Resume>
 8001b88:	d0cb0b40 	.word	0xd0cb0b40
 8001b8c:	d0cb08a0 	.word	0xd0cb08a0

08001b90 <count_dir>:
{
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	4604      	mov	r4, r0
 8001b94:	b08e      	sub	sp, #56	; 0x38
 8001b96:	460e      	mov	r6, r1
  res = f_opendir(&dir, path);
 8001b98:	a801      	add	r0, sp, #4
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	f015 fa92 	bl	80170c4 <f_opendir>
  if (res != FR_OK)
 8001ba0:	b9c0      	cbnz	r0, 8001bd4 <count_dir+0x44>
 8001ba2:	4605      	mov	r5, r0
 8001ba4:	4c1a      	ldr	r4, [pc, #104]	; (8001c10 <count_dir+0x80>)
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	a801      	add	r0, sp, #4
 8001baa:	f015 fb25 	bl	80171f8 <f_readdir>
    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001bae:	b958      	cbnz	r0, 8001bc8 <count_dir+0x38>
 8001bb0:	7da3      	ldrb	r3, [r4, #22]
 8001bb2:	b14b      	cbz	r3, 8001bc8 <count_dir+0x38>
    if (fno.fattrib & AM_DIR) nbr_dir++;           /* Directory found */
 8001bb4:	7a23      	ldrb	r3, [r4, #8]
 8001bb6:	06db      	lsls	r3, r3, #27
 8001bb8:	d5f5      	bpl.n	8001ba6 <count_dir+0x16>
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001bba:	4621      	mov	r1, r4
 8001bbc:	a801      	add	r0, sp, #4
    if (fno.fattrib & AM_DIR) nbr_dir++;           /* Directory found */
 8001bbe:	3501      	adds	r5, #1
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001bc0:	f015 fb1a 	bl	80171f8 <f_readdir>
    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d0f3      	beq.n	8001bb0 <count_dir+0x20>
  f_closedir(&dir);
 8001bc8:	a801      	add	r0, sp, #4
 8001bca:	f015 fae1 	bl	8017190 <f_closedir>
}
 8001bce:	4628      	mov	r0, r5
 8001bd0:	b00e      	add	sp, #56	; 0x38
 8001bd2:	bd70      	pop	{r4, r5, r6, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not open directory", CENTER_MODE);
 8001bd4:	f018 fa70 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001bd8:	88c1      	ldrh	r1, [r0, #6]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <count_dir+0x84>)
 8001bde:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001be2:	2000      	movs	r0, #0
 8001be4:	4099      	lsls	r1, r3
 8001be6:	f018 fb5f 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8001bea:	f018 fa65 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001bee:	4601      	mov	r1, r0
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	88c9      	ldrh	r1, [r1, #6]
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001bfc:	f018 fb54 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001c00:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001c02:	f7ff fe71 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001c06:	2002      	movs	r0, #2
 8001c08:	f006 fef2 	bl	80089f0 <BSP_LED_On>
    while (1);
 8001c0c:	e7fe      	b.n	8001c0c <count_dir+0x7c>
 8001c0e:	bf00      	nop
 8001c10:	20005a9c 	.word	0x20005a9c
 8001c14:	08025938 	.word	0x08025938

08001c18 <write_txt>:
{
 8001c18:	b570      	push	{r4, r5, r6, lr}
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	460d      	mov	r5, r1
  if (f_open(&File, path, flags) != FR_OK)
 8001c20:	4601      	mov	r1, r0
 8001c22:	481c      	ldr	r0, [pc, #112]	; (8001c94 <write_txt+0x7c>)
{
 8001c24:	461e      	mov	r6, r3
  if (f_open(&File, path, flags) != FR_OK)
 8001c26:	f014 fb99 	bl	801635c <f_open>
 8001c2a:	b1e0      	cbz	r0, 8001c66 <write_txt+0x4e>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to create file", CENTER_MODE);
 8001c2c:	f018 fa44 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001c30:	88c1      	ldrh	r1, [r0, #6]
 8001c32:	2301      	movs	r3, #1
 8001c34:	4a18      	ldr	r2, [pc, #96]	; (8001c98 <write_txt+0x80>)
 8001c36:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	4099      	lsls	r1, r3
 8001c3e:	f018 fb33 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8001c42:	f018 fa39 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001c46:	4601      	mov	r1, r0
 8001c48:	2301      	movs	r3, #1
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	88c9      	ldrh	r1, [r1, #6]
 8001c4e:	2000      	movs	r0, #0
 8001c50:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001c54:	f018 fb28 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001c58:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001c5a:	f7ff fe45 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f006 fec6 	bl	80089f0 <BSP_LED_On>
    while (1);
 8001c64:	e7fe      	b.n	8001c64 <write_txt+0x4c>
  res = f_write(&File, (uint8_t *)content, strlen(content), (void *)&byteswritten);
 8001c66:	4628      	mov	r0, r5
 8001c68:	f7fe fb44 	bl	80002f4 <strlen>
 8001c6c:	ab01      	add	r3, sp, #4
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4629      	mov	r1, r5
 8001c72:	4808      	ldr	r0, [pc, #32]	; (8001c94 <write_txt+0x7c>)
 8001c74:	f014 fe76 	bl	8016964 <f_write>
  if (res != FR_OK)
 8001c78:	b100      	cbz	r0, 8001c7c <write_txt+0x64>
    while (1);
 8001c7a:	e7fe      	b.n	8001c7a <write_txt+0x62>
  if (byteswritten != strlen(content))
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	f7fe fb39 	bl	80002f4 <strlen>
 8001c82:	9b01      	ldr	r3, [sp, #4]
 8001c84:	4298      	cmp	r0, r3
 8001c86:	d000      	beq.n	8001c8a <write_txt+0x72>
    while (1);
 8001c88:	e7fe      	b.n	8001c88 <write_txt+0x70>
  f_close(&File);
 8001c8a:	4802      	ldr	r0, [pc, #8]	; (8001c94 <write_txt+0x7c>)
 8001c8c:	f014 ffc0 	bl	8016c10 <f_close>
}
 8001c90:	b002      	add	sp, #8
 8001c92:	bd70      	pop	{r4, r5, r6, pc}
 8001c94:	20005050 	.word	0x20005050
 8001c98:	08025958 	.word	0x08025958

08001c9c <write_raw>:
{
 8001c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ca0:	4616      	mov	r6, r2
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	460f      	mov	r7, r1
  res = f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8001ca8:	220a      	movs	r2, #10
 8001caa:	4601      	mov	r1, r0
 8001cac:	482a      	ldr	r0, [pc, #168]	; (8001d58 <write_raw+0xbc>)
{
 8001cae:	4698      	mov	r8, r3
  res = f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8001cb0:	f014 fb54 	bl	801635c <f_open>
  if (res != FR_OK)
 8001cb4:	b1f0      	cbz	r0, 8001cf4 <write_raw+0x58>
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot create file on uSD", CENTER_MODE);
 8001cb6:	f018 f9ff 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001cba:	88c1      	ldrh	r1, [r0, #6]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <write_raw+0xc0>)
 8001cc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	0089      	lsls	r1, r1, #2
 8001cc8:	f018 faee 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001ccc:	f018 f9f4 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001cd0:	88c1      	ldrh	r1, [r0, #6]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	4622      	mov	r2, r4
 8001cd6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001cda:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f018 fae2 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001ce4:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8001ce8:	f7ff fdfe 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001cec:	2002      	movs	r0, #2
 8001cee:	f006 fe7f 	bl	80089f0 <BSP_LED_On>
    while (1);
 8001cf2:	e7fe      	b.n	8001cf2 <write_raw+0x56>
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	b672      	cpsid	i
  f_write(&File, buffer, length, (void *)&byteswritten);
 8001cf8:	4817      	ldr	r0, [pc, #92]	; (8001d58 <write_raw+0xbc>)
 8001cfa:	4639      	mov	r1, r7
 8001cfc:	ab01      	add	r3, sp, #4
 8001cfe:	4632      	mov	r2, r6
 8001d00:	f014 fe30 	bl	8016964 <f_write>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d04:	b662      	cpsie	i
  f_close(&File);
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <write_raw+0xbc>)
 8001d08:	f014 ff82 	bl	8016c10 <f_close>
  if (byteswritten != length)
 8001d0c:	9b01      	ldr	r3, [sp, #4]
 8001d0e:	429e      	cmp	r6, r3
 8001d10:	d102      	bne.n	8001d18 <write_raw+0x7c>
}
 8001d12:	b002      	add	sp, #8
 8001d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot save to uSD", CENTER_MODE);
 8001d18:	f018 f9ce 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001d1c:	88c1      	ldrh	r1, [r0, #6]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	4a0f      	ldr	r2, [pc, #60]	; (8001d60 <write_raw+0xc4>)
 8001d22:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d26:	4628      	mov	r0, r5
 8001d28:	0089      	lsls	r1, r1, #2
 8001d2a:	f018 fabd 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001d2e:	f018 f9c3 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4622      	mov	r2, r4
 8001d36:	4628      	mov	r0, r5
 8001d38:	88db      	ldrh	r3, [r3, #6]
 8001d3a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001d3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001d42:	2301      	movs	r3, #1
 8001d44:	f018 fab0 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001d48:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8001d4c:	f7ff fdcc 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001d50:	2002      	movs	r0, #2
 8001d52:	f006 fe4d 	bl	80089f0 <BSP_LED_On>
    while (1);
 8001d56:	e7fe      	b.n	8001d56 <write_raw+0xba>
 8001d58:	20004e20 	.word	0x20004e20
 8001d5c:	08025978 	.word	0x08025978
 8001d60:	08025994 	.word	0x08025994

08001d64 <write_bmp>:
{
 8001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d66:	460e      	mov	r6, r1
 8001d68:	4604      	mov	r4, r0
 8001d6a:	4617      	mov	r7, r2
  if (strcmp(&path[strlen(path) - 4], ".bmp") != 0)
 8001d6c:	f7fe fac2 	bl	80002f4 <strlen>
 8001d70:	3804      	subs	r0, #4
 8001d72:	4916      	ldr	r1, [pc, #88]	; (8001dcc <write_bmp+0x68>)
 8001d74:	4420      	add	r0, r4
 8001d76:	f7fe fab3 	bl	80002e0 <strcmp>
 8001d7a:	b100      	cbz	r0, 8001d7e <write_bmp+0x1a>
    while (1); /* Format not supported */
 8001d7c:	e7fe      	b.n	8001d7c <write_bmp+0x18>
  if (STM32Ipl_WriteImage(img, path) != stm32ipl_err_Ok)
 8001d7e:	4605      	mov	r5, r0
 8001d80:	4621      	mov	r1, r4
 8001d82:	4630      	mov	r0, r6
 8001d84:	f017 fd8e 	bl	80198a4 <STM32Ipl_WriteImage>
 8001d88:	b900      	cbnz	r0, 8001d8c <write_bmp+0x28>
}
 8001d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot save to uSD", CENTER_MODE);
 8001d8c:	f018 f994 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001d90:	88c1      	ldrh	r1, [r0, #6]
 8001d92:	2301      	movs	r3, #1
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <write_bmp+0x6c>)
 8001d96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d9a:	4628      	mov	r0, r5
 8001d9c:	0089      	lsls	r1, r1, #2
 8001d9e:	f018 fa83 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001da2:	f018 f989 	bl	801a0b8 <UTIL_LCD_GetFont>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4622      	mov	r2, r4
 8001daa:	4628      	mov	r0, r5
 8001dac:	88db      	ldrh	r3, [r3, #6]
 8001dae:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001db2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001db6:	2301      	movs	r3, #1
 8001db8:	f018 fa76 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dbe:	f7ff fd93 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f006 fe14 	bl	80089f0 <BSP_LED_On>
    while (1);
 8001dc8:	e7fe      	b.n	8001dc8 <write_bmp+0x64>
 8001dca:	bf00      	nop
 8001dcc:	08025ee8 	.word	0x08025ee8
 8001dd0:	08025994 	.word	0x08025994

08001dd4 <UartCmd_Get_Validation_Final_Accuracy>:
{
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	4604      	mov	r4, r0
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001dd8:	4d12      	ldr	r5, [pc, #72]	; (8001e24 <UartCmd_Get_Validation_Final_Accuracy+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001dda:	2202      	movs	r2, #2
 8001ddc:	2160      	movs	r1, #96	; 0x60
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001dde:	f204 4344 	addw	r3, r4, #1092	; 0x444
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001de2:	f204 540c 	addw	r4, r4, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001de6:	4628      	mov	r0, r5
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001dec:	f003 f8b8 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001df0:	2204      	movs	r2, #4
 8001df2:	4629      	mov	r1, r5
 8001df4:	4620      	mov	r0, r4
 8001df6:	f00f feaf 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8001dfa:	b958      	cbnz	r0, 8001e14 <UartCmd_Get_Validation_Final_Accuracy+0x40>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f010 f8db 	bl	8011fb8 <HAL_UART_GetState>
 8001e02:	2820      	cmp	r0, #32
 8001e04:	d1fa      	bne.n	8001dfc <UartCmd_Get_Validation_Final_Accuracy+0x28>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001e06:	220a      	movs	r2, #10
 8001e08:	4907      	ldr	r1, [pc, #28]	; (8001e28 <UartCmd_Get_Validation_Final_Accuracy+0x54>)
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f00f fef6 	bl	8011bfc <HAL_UART_Receive_DMA>
 8001e10:	b918      	cbnz	r0, 8001e1a <UartCmd_Get_Validation_Final_Accuracy+0x46>
}
 8001e12:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001e14:	f003 f914 	bl	8005040 <Error_Handler>
 8001e18:	e7f0      	b.n	8001dfc <UartCmd_Get_Validation_Final_Accuracy+0x28>
}
 8001e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001e1e:	f003 b90f 	b.w	8005040 <Error_Handler>
 8001e22:	bf00      	nop
 8001e24:	30000280 	.word	0x30000280
 8001e28:	300002e0 	.word	0x300002e0

08001e2c <UartCmd_Get_Dump_Output_Data_Size>:
{
 8001e2c:	b538      	push	{r3, r4, r5, lr}
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8001e2e:	4d11      	ldr	r5, [pc, #68]	; (8001e74 <UartCmd_Get_Dump_Output_Data_Size+0x48>)
 8001e30:	2310      	movs	r3, #16
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e32:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e36:	2202      	movs	r2, #2
 8001e38:	2160      	movs	r1, #96	; 0x60
 8001e3a:	4628      	mov	r0, r5
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8001e3c:	802b      	strh	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e3e:	f003 f88f 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e42:	2202      	movs	r2, #2
 8001e44:	4629      	mov	r1, r5
 8001e46:	4620      	mov	r0, r4
 8001e48:	f00f fe86 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8001e4c:	b958      	cbnz	r0, 8001e66 <UartCmd_Get_Dump_Output_Data_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f010 f8b2 	bl	8011fb8 <HAL_UART_GetState>
 8001e54:	2820      	cmp	r0, #32
 8001e56:	d1fa      	bne.n	8001e4e <UartCmd_Get_Dump_Output_Data_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001e58:	220a      	movs	r2, #10
 8001e5a:	4907      	ldr	r1, [pc, #28]	; (8001e78 <UartCmd_Get_Dump_Output_Data_Size+0x4c>)
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f00f fecd 	bl	8011bfc <HAL_UART_Receive_DMA>
 8001e62:	b918      	cbnz	r0, 8001e6c <UartCmd_Get_Dump_Output_Data_Size+0x40>
}
 8001e64:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001e66:	f003 f8eb 	bl	8005040 <Error_Handler>
 8001e6a:	e7f0      	b.n	8001e4e <UartCmd_Get_Dump_Output_Data_Size+0x22>
}
 8001e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001e70:	f003 b8e6 	b.w	8005040 <Error_Handler>
 8001e74:	30000280 	.word	0x30000280
 8001e78:	300002e0 	.word	0x300002e0

08001e7c <UartCmd_Upload_Timing_Report>:
{
 8001e7c:	b510      	push	{r4, lr}
 8001e7e:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e80:	2202      	movs	r2, #2
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	480e      	ldr	r0, [pc, #56]	; (8001ec0 <UartCmd_Upload_Timing_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e86:	f204 540c 	addw	r4, r4, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e8a:	f003 f869 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e8e:	2214      	movs	r2, #20
 8001e90:	490b      	ldr	r1, [pc, #44]	; (8001ec0 <UartCmd_Upload_Timing_Report+0x44>)
 8001e92:	4620      	mov	r0, r4
 8001e94:	f00f fe60 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8001e98:	b958      	cbnz	r0, 8001eb2 <UartCmd_Upload_Timing_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f010 f88c 	bl	8011fb8 <HAL_UART_GetState>
 8001ea0:	2820      	cmp	r0, #32
 8001ea2:	d1fa      	bne.n	8001e9a <UartCmd_Upload_Timing_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001ea4:	220a      	movs	r2, #10
 8001ea6:	4907      	ldr	r1, [pc, #28]	; (8001ec4 <UartCmd_Upload_Timing_Report+0x48>)
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f00f fea7 	bl	8011bfc <HAL_UART_Receive_DMA>
 8001eae:	b918      	cbnz	r0, 8001eb8 <UartCmd_Upload_Timing_Report+0x3c>
}
 8001eb0:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001eb2:	f003 f8c5 	bl	8005040 <Error_Handler>
 8001eb6:	e7f0      	b.n	8001e9a <UartCmd_Upload_Timing_Report+0x1e>
}
 8001eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001ebc:	f003 b8c0 	b.w	8005040 <Error_Handler>
 8001ec0:	d0d3bcc0 	.word	0xd0d3bcc0
 8001ec4:	300002e0 	.word	0x300002e0

08001ec8 <UartCmd_Upload_Validation_Report>:
{
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001ed2:	480f      	ldr	r0, [pc, #60]	; (8001f10 <UartCmd_Upload_Validation_Report+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001ed4:	f204 540c 	addw	r4, r4, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001ed8:	f003 f842 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee0:	490b      	ldr	r1, [pc, #44]	; (8001f10 <UartCmd_Upload_Validation_Report+0x48>)
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f00f fe38 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8001ee8:	b958      	cbnz	r0, 8001f02 <UartCmd_Upload_Validation_Report+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001eea:	4620      	mov	r0, r4
 8001eec:	f010 f864 	bl	8011fb8 <HAL_UART_GetState>
 8001ef0:	2820      	cmp	r0, #32
 8001ef2:	d1fa      	bne.n	8001eea <UartCmd_Upload_Validation_Report+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001ef4:	220a      	movs	r2, #10
 8001ef6:	4907      	ldr	r1, [pc, #28]	; (8001f14 <UartCmd_Upload_Validation_Report+0x4c>)
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f00f fe7f 	bl	8011bfc <HAL_UART_Receive_DMA>
 8001efe:	b918      	cbnz	r0, 8001f08 <UartCmd_Upload_Validation_Report+0x40>
}
 8001f00:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001f02:	f003 f89d 	bl	8005040 <Error_Handler>
 8001f06:	e7f0      	b.n	8001eea <UartCmd_Upload_Validation_Report+0x22>
}
 8001f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001f0c:	f003 b898 	b.w	8005040 <Error_Handler>
 8001f10:	d0cb0920 	.word	0xd0cb0920
 8001f14:	300002e0 	.word	0x300002e0

08001f18 <UartCmd_Upload_NonRegression_Report>:
{
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	480e      	ldr	r0, [pc, #56]	; (8001f5c <UartCmd_Upload_NonRegression_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001f22:	f204 540c 	addw	r4, r4, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001f26:	f003 f81b 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	490b      	ldr	r1, [pc, #44]	; (8001f5c <UartCmd_Upload_NonRegression_Report+0x44>)
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f00f fe12 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8001f34:	b958      	cbnz	r0, 8001f4e <UartCmd_Upload_NonRegression_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001f36:	4620      	mov	r0, r4
 8001f38:	f010 f83e 	bl	8011fb8 <HAL_UART_GetState>
 8001f3c:	2820      	cmp	r0, #32
 8001f3e:	d1fa      	bne.n	8001f36 <UartCmd_Upload_NonRegression_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001f40:	220a      	movs	r2, #10
 8001f42:	4907      	ldr	r1, [pc, #28]	; (8001f60 <UartCmd_Upload_NonRegression_Report+0x48>)
 8001f44:	4620      	mov	r0, r4
 8001f46:	f00f fe59 	bl	8011bfc <HAL_UART_Receive_DMA>
 8001f4a:	b918      	cbnz	r0, 8001f54 <UartCmd_Upload_NonRegression_Report+0x3c>
}
 8001f4c:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001f4e:	f003 f877 	bl	8005040 <Error_Handler>
 8001f52:	e7f0      	b.n	8001f36 <UartCmd_Upload_NonRegression_Report+0x1e>
}
 8001f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001f58:	f003 b872 	b.w	8005040 <Error_Handler>
 8001f5c:	d0cb08a0 	.word	0xd0cb08a0
 8001f60:	300002e0 	.word	0x300002e0

08001f64 <UartCmd_Upload_Dump_Output_Data>:
 8001f64:	b510      	push	{r4, lr}
 8001f66:	4604      	mov	r4, r0
 8001f68:	2202      	movs	r2, #2
 8001f6a:	2180      	movs	r1, #128	; 0x80
 8001f6c:	480e      	ldr	r0, [pc, #56]	; (8001fa8 <UartCmd_Upload_Dump_Output_Data+0x44>)
 8001f6e:	f204 540c 	addw	r4, r4, #1292	; 0x50c
 8001f72:	f002 fff5 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
 8001f76:	2210      	movs	r2, #16
 8001f78:	490b      	ldr	r1, [pc, #44]	; (8001fa8 <UartCmd_Upload_Dump_Output_Data+0x44>)
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f00f fdec 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8001f80:	b958      	cbnz	r0, 8001f9a <UartCmd_Upload_Dump_Output_Data+0x36>
 8001f82:	4620      	mov	r0, r4
 8001f84:	f010 f818 	bl	8011fb8 <HAL_UART_GetState>
 8001f88:	2820      	cmp	r0, #32
 8001f8a:	d1fa      	bne.n	8001f82 <UartCmd_Upload_Dump_Output_Data+0x1e>
 8001f8c:	220a      	movs	r2, #10
 8001f8e:	4907      	ldr	r1, [pc, #28]	; (8001fac <UartCmd_Upload_Dump_Output_Data+0x48>)
 8001f90:	4620      	mov	r0, r4
 8001f92:	f00f fe33 	bl	8011bfc <HAL_UART_Receive_DMA>
 8001f96:	b918      	cbnz	r0, 8001fa0 <UartCmd_Upload_Dump_Output_Data+0x3c>
 8001f98:	bd10      	pop	{r4, pc}
 8001f9a:	f003 f851 	bl	8005040 <Error_Handler>
 8001f9e:	e7f0      	b.n	8001f82 <UartCmd_Upload_Dump_Output_Data+0x1e>
 8001fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fa4:	f003 b84c 	b.w	8005040 <Error_Handler>
 8001fa8:	d0cb08a0 	.word	0xd0cb08a0
 8001fac:	300002e0 	.word	0x300002e0

08001fb0 <UartCmd_Upload_Valid_Output>:
 8001fb0:	b510      	push	{r4, lr}
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001fba:	480f      	ldr	r0, [pc, #60]	; (8001ff8 <UartCmd_Upload_Valid_Output+0x48>)
 8001fbc:	f204 540c 	addw	r4, r4, #1292	; 0x50c
 8001fc0:	f002 ffce 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
 8001fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc8:	490b      	ldr	r1, [pc, #44]	; (8001ff8 <UartCmd_Upload_Valid_Output+0x48>)
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f00f fdc4 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8001fd0:	b958      	cbnz	r0, 8001fea <UartCmd_Upload_Valid_Output+0x3a>
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f00f fff0 	bl	8011fb8 <HAL_UART_GetState>
 8001fd8:	2820      	cmp	r0, #32
 8001fda:	d1fa      	bne.n	8001fd2 <UartCmd_Upload_Valid_Output+0x22>
 8001fdc:	220a      	movs	r2, #10
 8001fde:	4907      	ldr	r1, [pc, #28]	; (8001ffc <UartCmd_Upload_Valid_Output+0x4c>)
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f00f fe0b 	bl	8011bfc <HAL_UART_Receive_DMA>
 8001fe6:	b918      	cbnz	r0, 8001ff0 <UartCmd_Upload_Valid_Output+0x40>
 8001fe8:	bd10      	pop	{r4, pc}
 8001fea:	f003 f829 	bl	8005040 <Error_Handler>
 8001fee:	e7f0      	b.n	8001fd2 <UartCmd_Upload_Valid_Output+0x22>
 8001ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ff4:	f003 b824 	b.w	8005040 <Error_Handler>
 8001ff8:	d0cb0920 	.word	0xd0cb0920
 8001ffc:	300002e0 	.word	0x300002e0

08002000 <UartCmd_Get_Dump_Whole_Data_Size>:
{
 8002000:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002002:	4d11      	ldr	r5, [pc, #68]	; (8002048 <UartCmd_Get_Dump_Whole_Data_Size+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002004:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <UartCmd_Get_Dump_Whole_Data_Size+0x4c>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800200a:	2202      	movs	r2, #2
 800200c:	2160      	movs	r1, #96	; 0x60
 800200e:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002010:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002012:	f002 ffa5 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002016:	2204      	movs	r2, #4
 8002018:	4629      	mov	r1, r5
 800201a:	4620      	mov	r0, r4
 800201c:	f00f fd9c 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002020:	b958      	cbnz	r0, 800203a <UartCmd_Get_Dump_Whole_Data_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002022:	4620      	mov	r0, r4
 8002024:	f00f ffc8 	bl	8011fb8 <HAL_UART_GetState>
 8002028:	2820      	cmp	r0, #32
 800202a:	d1fa      	bne.n	8002022 <UartCmd_Get_Dump_Whole_Data_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800202c:	220a      	movs	r2, #10
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <UartCmd_Get_Dump_Whole_Data_Size+0x50>)
 8002030:	4620      	mov	r0, r4
 8002032:	f00f fde3 	bl	8011bfc <HAL_UART_Receive_DMA>
 8002036:	b918      	cbnz	r0, 8002040 <UartCmd_Get_Dump_Whole_Data_Size+0x40>
}
 8002038:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 800203a:	f003 f801 	bl	8005040 <Error_Handler>
 800203e:	e7f0      	b.n	8002022 <UartCmd_Get_Dump_Whole_Data_Size+0x22>
}
 8002040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002044:	f002 bffc 	b.w	8005040 <Error_Handler>
 8002048:	30000280 	.word	0x30000280
 800204c:	000458b0 	.word	0x000458b0
 8002050:	300002e0 	.word	0x300002e0

08002054 <UartCmd_Get_Timing_Report_Size>:
{
 8002054:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 8002056:	4d11      	ldr	r5, [pc, #68]	; (800209c <UartCmd_Get_Timing_Report_Size+0x48>)
 8002058:	2314      	movs	r3, #20
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800205a:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800205e:	2202      	movs	r2, #2
 8002060:	2160      	movs	r1, #96	; 0x60
 8002062:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 8002064:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002066:	f002 ff7b 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800206a:	2204      	movs	r2, #4
 800206c:	4629      	mov	r1, r5
 800206e:	4620      	mov	r0, r4
 8002070:	f00f fd72 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002074:	b958      	cbnz	r0, 800208e <UartCmd_Get_Timing_Report_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002076:	4620      	mov	r0, r4
 8002078:	f00f ff9e 	bl	8011fb8 <HAL_UART_GetState>
 800207c:	2820      	cmp	r0, #32
 800207e:	d1fa      	bne.n	8002076 <UartCmd_Get_Timing_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002080:	220a      	movs	r2, #10
 8002082:	4907      	ldr	r1, [pc, #28]	; (80020a0 <UartCmd_Get_Timing_Report_Size+0x4c>)
 8002084:	4620      	mov	r0, r4
 8002086:	f00f fdb9 	bl	8011bfc <HAL_UART_Receive_DMA>
 800208a:	b918      	cbnz	r0, 8002094 <UartCmd_Get_Timing_Report_Size+0x40>
}
 800208c:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 800208e:	f002 ffd7 	bl	8005040 <Error_Handler>
 8002092:	e7f0      	b.n	8002076 <UartCmd_Get_Timing_Report_Size+0x22>
}
 8002094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002098:	f002 bfd2 	b.w	8005040 <Error_Handler>
 800209c:	30000280 	.word	0x30000280
 80020a0:	300002e0 	.word	0x300002e0

080020a4 <UartCmd_Get_NonRegression_Debug_Report_Size>:
{
 80020a4:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80020a6:	4d11      	ldr	r5, [pc, #68]	; (80020ec <UartCmd_Get_NonRegression_Debug_Report_Size+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80020a8:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <UartCmd_Get_NonRegression_Debug_Report_Size+0x4c>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80020ae:	2202      	movs	r2, #2
 80020b0:	2160      	movs	r1, #96	; 0x60
 80020b2:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80020b4:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80020b6:	f002 ff53 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80020ba:	2204      	movs	r2, #4
 80020bc:	4629      	mov	r1, r5
 80020be:	4620      	mov	r0, r4
 80020c0:	f00f fd4a 	bl	8011b58 <HAL_UART_Transmit_DMA>
 80020c4:	b958      	cbnz	r0, 80020de <UartCmd_Get_NonRegression_Debug_Report_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80020c6:	4620      	mov	r0, r4
 80020c8:	f00f ff76 	bl	8011fb8 <HAL_UART_GetState>
 80020cc:	2820      	cmp	r0, #32
 80020ce:	d1fa      	bne.n	80020c6 <UartCmd_Get_NonRegression_Debug_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80020d0:	220a      	movs	r2, #10
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <UartCmd_Get_NonRegression_Debug_Report_Size+0x50>)
 80020d4:	4620      	mov	r0, r4
 80020d6:	f00f fd91 	bl	8011bfc <HAL_UART_Receive_DMA>
 80020da:	b918      	cbnz	r0, 80020e4 <UartCmd_Get_NonRegression_Debug_Report_Size+0x40>
}
 80020dc:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 80020de:	f002 ffaf 	bl	8005040 <Error_Handler>
 80020e2:	e7f0      	b.n	80020c6 <UartCmd_Get_NonRegression_Debug_Report_Size+0x22>
}
 80020e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80020e8:	f002 bfaa 	b.w	8005040 <Error_Handler>
 80020ec:	30000280 	.word	0x30000280
 80020f0:	0008b160 	.word	0x0008b160
 80020f4:	300002e0 	.word	0x300002e0

080020f8 <UartCmd_Get_NonRegression_Report_Size>:
{
 80020f8:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 80020fa:	4d11      	ldr	r5, [pc, #68]	; (8002140 <UartCmd_Get_NonRegression_Report_Size+0x48>)
 80020fc:	2310      	movs	r3, #16
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80020fe:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002102:	2202      	movs	r2, #2
 8002104:	2160      	movs	r1, #96	; 0x60
 8002106:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8002108:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800210a:	f002 ff29 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800210e:	2204      	movs	r2, #4
 8002110:	4629      	mov	r1, r5
 8002112:	4620      	mov	r0, r4
 8002114:	f00f fd20 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002118:	b958      	cbnz	r0, 8002132 <UartCmd_Get_NonRegression_Report_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800211a:	4620      	mov	r0, r4
 800211c:	f00f ff4c 	bl	8011fb8 <HAL_UART_GetState>
 8002120:	2820      	cmp	r0, #32
 8002122:	d1fa      	bne.n	800211a <UartCmd_Get_NonRegression_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002124:	220a      	movs	r2, #10
 8002126:	4907      	ldr	r1, [pc, #28]	; (8002144 <UartCmd_Get_NonRegression_Report_Size+0x4c>)
 8002128:	4620      	mov	r0, r4
 800212a:	f00f fd67 	bl	8011bfc <HAL_UART_Receive_DMA>
 800212e:	b918      	cbnz	r0, 8002138 <UartCmd_Get_NonRegression_Report_Size+0x40>
}
 8002130:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002132:	f002 ff85 	bl	8005040 <Error_Handler>
 8002136:	e7f0      	b.n	800211a <UartCmd_Get_NonRegression_Report_Size+0x22>
}
 8002138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800213c:	f002 bf80 	b.w	8005040 <Error_Handler>
 8002140:	30000280 	.word	0x30000280
 8002144:	300002e0 	.word	0x300002e0

08002148 <UartCmd_Get_Validation_Report_Size>:
{
 8002148:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4*ONBOARD_VALID_NUM_FILE_PER_DIR;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 800214a:	4d12      	ldr	r5, [pc, #72]	; (8002194 <UartCmd_Get_Validation_Report_Size+0x4c>)
 800214c:	f44f 7300 	mov.w	r3, #512	; 0x200
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002150:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002154:	2202      	movs	r2, #2
 8002156:	2160      	movs	r1, #96	; 0x60
 8002158:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4*ONBOARD_VALID_NUM_FILE_PER_DIR;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 800215a:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800215c:	f002 ff00 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002160:	2204      	movs	r2, #4
 8002162:	4629      	mov	r1, r5
 8002164:	4620      	mov	r0, r4
 8002166:	f00f fcf7 	bl	8011b58 <HAL_UART_Transmit_DMA>
 800216a:	b958      	cbnz	r0, 8002184 <UartCmd_Get_Validation_Report_Size+0x3c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800216c:	4620      	mov	r0, r4
 800216e:	f00f ff23 	bl	8011fb8 <HAL_UART_GetState>
 8002172:	2820      	cmp	r0, #32
 8002174:	d1fa      	bne.n	800216c <UartCmd_Get_Validation_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002176:	220a      	movs	r2, #10
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <UartCmd_Get_Validation_Report_Size+0x50>)
 800217a:	4620      	mov	r0, r4
 800217c:	f00f fd3e 	bl	8011bfc <HAL_UART_Receive_DMA>
 8002180:	b918      	cbnz	r0, 800218a <UartCmd_Get_Validation_Report_Size+0x42>
}
 8002182:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002184:	f002 ff5c 	bl	8005040 <Error_Handler>
 8002188:	e7f0      	b.n	800216c <UartCmd_Get_Validation_Report_Size+0x24>
}
 800218a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800218e:	f002 bf57 	b.w	8005040 <Error_Handler>
 8002192:	bf00      	nop
 8002194:	30000280 	.word	0x30000280
 8002198:	300002e0 	.word	0x300002e0

0800219c <UartCmd_Get_Valid_Output_Size>:
 800219c:	b538      	push	{r3, r4, r5, lr}
 800219e:	4d12      	ldr	r5, [pc, #72]	; (80021e8 <UartCmd_Get_Valid_Output_Size+0x4c>)
 80021a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a4:	f200 540c 	addw	r4, r0, #1292	; 0x50c
 80021a8:	2202      	movs	r2, #2
 80021aa:	2160      	movs	r1, #96	; 0x60
 80021ac:	4628      	mov	r0, r5
 80021ae:	602b      	str	r3, [r5, #0]
 80021b0:	f002 fed6 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
 80021b4:	2204      	movs	r2, #4
 80021b6:	4629      	mov	r1, r5
 80021b8:	4620      	mov	r0, r4
 80021ba:	f00f fccd 	bl	8011b58 <HAL_UART_Transmit_DMA>
 80021be:	b958      	cbnz	r0, 80021d8 <UartCmd_Get_Valid_Output_Size+0x3c>
 80021c0:	4620      	mov	r0, r4
 80021c2:	f00f fef9 	bl	8011fb8 <HAL_UART_GetState>
 80021c6:	2820      	cmp	r0, #32
 80021c8:	d1fa      	bne.n	80021c0 <UartCmd_Get_Valid_Output_Size+0x24>
 80021ca:	220a      	movs	r2, #10
 80021cc:	4907      	ldr	r1, [pc, #28]	; (80021ec <UartCmd_Get_Valid_Output_Size+0x50>)
 80021ce:	4620      	mov	r0, r4
 80021d0:	f00f fd14 	bl	8011bfc <HAL_UART_Receive_DMA>
 80021d4:	b918      	cbnz	r0, 80021de <UartCmd_Get_Valid_Output_Size+0x42>
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	f002 ff32 	bl	8005040 <Error_Handler>
 80021dc:	e7f0      	b.n	80021c0 <UartCmd_Get_Valid_Output_Size+0x24>
 80021de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021e2:	f002 bf2d 	b.w	8005040 <Error_Handler>
 80021e6:	bf00      	nop
 80021e8:	30000280 	.word	0x30000280
 80021ec:	300002e0 	.word	0x300002e0

080021f0 <UartCmd_Upload_NonRegression_Debug_Report>:
{
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	4d31      	ldr	r5, [pc, #196]	; (80022b8 <UartCmd_Upload_NonRegression_Debug_Report+0xc8>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 80021f4:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80021f8:	2202      	movs	r2, #2
 80021fa:	4930      	ldr	r1, [pc, #192]	; (80022bc <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
 80021fc:	4628      	mov	r0, r5
 80021fe:	4f30      	ldr	r7, [pc, #192]	; (80022c0 <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002200:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002204:	f002 feac 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800220c:	4629      	mov	r1, r5
 800220e:	4620      	mov	r0, r4
 8002210:	f00f fca2 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002214:	2800      	cmp	r0, #0
 8002216:	d142      	bne.n	800229e <UartCmd_Upload_NonRegression_Debug_Report+0xae>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002218:	4620      	mov	r0, r4
 800221a:	f00f fecd 	bl	8011fb8 <HAL_UART_GetState>
 800221e:	2820      	cmp	r0, #32
 8002220:	d1fa      	bne.n	8002218 <UartCmd_Upload_NonRegression_Debug_Report+0x28>
    for(i=0;i<dma_xfer_num;i++)
 8002222:	4435      	add	r5, r6
 8002224:	42af      	cmp	r7, r5
 8002226:	d1ef      	bne.n	8002208 <UartCmd_Upload_NonRegression_Debug_Report+0x18>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002228:	f645 02b4 	movw	r2, #22708	; 0x58b4
 800222c:	4924      	ldr	r1, [pc, #144]	; (80022c0 <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 800222e:	4620      	mov	r0, r4
 8002230:	f00f fc92 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002234:	2800      	cmp	r0, #0
 8002236:	d13c      	bne.n	80022b2 <UartCmd_Upload_NonRegression_Debug_Report+0xc2>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002238:	4620      	mov	r0, r4
 800223a:	f00f febd 	bl	8011fb8 <HAL_UART_GetState>
 800223e:	2820      	cmp	r0, #32
 8002240:	d1fa      	bne.n	8002238 <UartCmd_Upload_NonRegression_Debug_Report+0x48>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002242:	4d20      	ldr	r5, [pc, #128]	; (80022c4 <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
 8002244:	2202      	movs	r2, #2
 8002246:	491d      	ldr	r1, [pc, #116]	; (80022bc <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002248:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800224c:	4628      	mov	r0, r5
 800224e:	4f1e      	ldr	r7, [pc, #120]	; (80022c8 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
 8002250:	f002 fe86 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002258:	4629      	mov	r1, r5
 800225a:	4620      	mov	r0, r4
 800225c:	f00f fc7c 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002260:	b9d0      	cbnz	r0, 8002298 <UartCmd_Upload_NonRegression_Debug_Report+0xa8>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002262:	4620      	mov	r0, r4
 8002264:	f00f fea8 	bl	8011fb8 <HAL_UART_GetState>
 8002268:	2820      	cmp	r0, #32
 800226a:	d1fa      	bne.n	8002262 <UartCmd_Upload_NonRegression_Debug_Report+0x72>
    for(i=0;i<dma_xfer_num;i++)
 800226c:	4435      	add	r5, r6
 800226e:	42bd      	cmp	r5, r7
 8002270:	d1f0      	bne.n	8002254 <UartCmd_Upload_NonRegression_Debug_Report+0x64>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002272:	f645 02b4 	movw	r2, #22708	; 0x58b4
 8002276:	4914      	ldr	r1, [pc, #80]	; (80022c8 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
 8002278:	4620      	mov	r0, r4
 800227a:	f00f fc6d 	bl	8011b58 <HAL_UART_Transmit_DMA>
 800227e:	b9a8      	cbnz	r0, 80022ac <UartCmd_Upload_NonRegression_Debug_Report+0xbc>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002280:	4620      	mov	r0, r4
 8002282:	f00f fe99 	bl	8011fb8 <HAL_UART_GetState>
 8002286:	2820      	cmp	r0, #32
 8002288:	d1fa      	bne.n	8002280 <UartCmd_Upload_NonRegression_Debug_Report+0x90>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800228a:	220a      	movs	r2, #10
 800228c:	490f      	ldr	r1, [pc, #60]	; (80022cc <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
 800228e:	4620      	mov	r0, r4
 8002290:	f00f fcb4 	bl	8011bfc <HAL_UART_Receive_DMA>
 8002294:	b930      	cbnz	r0, 80022a4 <UartCmd_Upload_NonRegression_Debug_Report+0xb4>
}
 8002296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Error_Handler();
 8002298:	f002 fed2 	bl	8005040 <Error_Handler>
 800229c:	e7e1      	b.n	8002262 <UartCmd_Upload_NonRegression_Debug_Report+0x72>
 800229e:	f002 fecf 	bl	8005040 <Error_Handler>
 80022a2:	e7b9      	b.n	8002218 <UartCmd_Upload_NonRegression_Debug_Report+0x28>
}
 80022a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 80022a8:	f002 beca 	b.w	8005040 <Error_Handler>
        Error_Handler();
 80022ac:	f002 fec8 	bl	8005040 <Error_Handler>
 80022b0:	e7e6      	b.n	8002280 <UartCmd_Upload_NonRegression_Debug_Report+0x90>
 80022b2:	f002 fec5 	bl	8005040 <Error_Handler>
 80022b6:	e7bf      	b.n	8002238 <UartCmd_Upload_NonRegression_Debug_Report+0x48>
 80022b8:	d0cb0b40 	.word	0xd0cb0b40
 80022bc:	000458c0 	.word	0x000458c0
 80022c0:	d0cf0b3c 	.word	0xd0cf0b3c
 80022c4:	d0cf6400 	.word	0xd0cf6400
 80022c8:	d0d363fc 	.word	0xd0d363fc
 80022cc:	300002e0 	.word	0x300002e0

080022d0 <UartCmd_Read_Camera_Register>:
{
 80022d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022d4:	460e      	mov	r6, r1
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 80022d6:	7809      	ldrb	r1, [r1, #0]
{
 80022d8:	b083      	sub	sp, #12
 80022da:	4681      	mov	r9, r0
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 80022dc:	7875      	ldrb	r5, [r6, #1]
 80022de:	1a6d      	subs	r5, r5, r1
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 80022e0:	3501      	adds	r5, #1
 80022e2:	d017      	beq.n	8002314 <UartCmd_Read_Camera_Register+0x44>
 80022e4:	2400      	movs	r4, #0
 80022e6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8002364 <UartCmd_Read_Camera_Register+0x94>
 80022ea:	4f1c      	ldr	r7, [pc, #112]	; (800235c <UartCmd_Read_Camera_Register+0x8c>)
 80022ec:	e000      	b.n	80022f0 <UartCmd_Read_Camera_Register+0x20>
    ov9655_read_reg(&pObj->Ctx, *(data_buffer+i), &tmp, 1);
 80022ee:	5d31      	ldrb	r1, [r6, r4]
 80022f0:	f8d8 0000 	ldr.w	r0, [r8]
 80022f4:	2301      	movs	r3, #1
 80022f6:	f10d 0207 	add.w	r2, sp, #7
 80022fa:	3018      	adds	r0, #24
 80022fc:	f006 fb3a 	bl	8008974 <ov9655_read_reg>
    Cam_Reg_Table[i]=tmp;
 8002300:	f89d 2007 	ldrb.w	r2, [sp, #7]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002304:	1c63      	adds	r3, r4, #1
    Cam_Reg_Table[i]=tmp;
 8002306:	553a      	strb	r2, [r7, r4]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002308:	b2dc      	uxtb	r4, r3
 800230a:	42ac      	cmp	r4, r5
 800230c:	d3ef      	bcc.n	80022ee <UartCmd_Read_Camera_Register+0x1e>
  if(TxDataTransferSize > TxDataBufSize)
 800230e:	2de0      	cmp	r5, #224	; 0xe0
 8002310:	d900      	bls.n	8002314 <UartCmd_Read_Camera_Register+0x44>
    while(1);
 8002312:	e7fe      	b.n	8002312 <UartCmd_Read_Camera_Register+0x42>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002314:	f209 590c 	addw	r9, r9, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002318:	2202      	movs	r2, #2
 800231a:	21e0      	movs	r1, #224	; 0xe0
 800231c:	480f      	ldr	r0, [pc, #60]	; (800235c <UartCmd_Read_Camera_Register+0x8c>)
 800231e:	f002 fe1f 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002322:	490e      	ldr	r1, [pc, #56]	; (800235c <UartCmd_Read_Camera_Register+0x8c>)
 8002324:	b2aa      	uxth	r2, r5
 8002326:	4648      	mov	r0, r9
 8002328:	f00f fc16 	bl	8011b58 <HAL_UART_Transmit_DMA>
 800232c:	b990      	cbnz	r0, 8002354 <UartCmd_Read_Camera_Register+0x84>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800232e:	4648      	mov	r0, r9
 8002330:	f00f fe42 	bl	8011fb8 <HAL_UART_GetState>
 8002334:	2820      	cmp	r0, #32
 8002336:	d1fa      	bne.n	800232e <UartCmd_Read_Camera_Register+0x5e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002338:	220a      	movs	r2, #10
 800233a:	4909      	ldr	r1, [pc, #36]	; (8002360 <UartCmd_Read_Camera_Register+0x90>)
 800233c:	4648      	mov	r0, r9
 800233e:	f00f fc5d 	bl	8011bfc <HAL_UART_Receive_DMA>
 8002342:	b910      	cbnz	r0, 800234a <UartCmd_Read_Camera_Register+0x7a>
}
 8002344:	b003      	add	sp, #12
 8002346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800234a:	b003      	add	sp, #12
 800234c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    Error_Handler();
 8002350:	f002 be76 	b.w	8005040 <Error_Handler>
      Error_Handler();
 8002354:	f002 fe74 	bl	8005040 <Error_Handler>
 8002358:	e7e9      	b.n	800232e <UartCmd_Read_Camera_Register+0x5e>
 800235a:	bf00      	nop
 800235c:	20004d40 	.word	0x20004d40
 8002360:	300002e0 	.word	0x300002e0
 8002364:	20006e80 	.word	0x20006e80

08002368 <UartCmd_Trigger_Capture>:
{
 8002368:	b538      	push	{r3, r4, r5, lr}
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 800236a:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
{
 800236e:	4604      	mov	r4, r0
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 8002370:	2b04      	cmp	r3, #4
 8002372:	d108      	bne.n	8002386 <UartCmd_Trigger_Capture+0x1e>
 8002374:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 8002378:	b92b      	cbnz	r3, 8002386 <UartCmd_Trigger_Capture+0x1e>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	f8c0 34f0 	str.w	r3, [r0, #1264]	; 0x4f0
    Test_Context_Ptr->CaptureContext.capture_state = 1;
 8002380:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
}
 8002384:	bd38      	pop	{r3, r4, r5, pc}
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002386:	4d14      	ldr	r5, [pc, #80]	; (80023d8 <UartCmd_Trigger_Capture+0x70>)
 8002388:	2304      	movs	r3, #4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800238a:	f204 540c 	addw	r4, r4, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800238e:	2202      	movs	r2, #2
 8002390:	2160      	movs	r1, #96	; 0x60
 8002392:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002394:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002396:	f002 fde3 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800239a:	2201      	movs	r2, #1
 800239c:	4629      	mov	r1, r5
 800239e:	4620      	mov	r0, r4
 80023a0:	f00f fbda 	bl	8011b58 <HAL_UART_Transmit_DMA>
 80023a4:	b978      	cbnz	r0, 80023c6 <UartCmd_Trigger_Capture+0x5e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80023a6:	4620      	mov	r0, r4
 80023a8:	f00f fe06 	bl	8011fb8 <HAL_UART_GetState>
 80023ac:	2820      	cmp	r0, #32
 80023ae:	d1fa      	bne.n	80023a6 <UartCmd_Trigger_Capture+0x3e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80023b0:	220a      	movs	r2, #10
 80023b2:	490a      	ldr	r1, [pc, #40]	; (80023dc <UartCmd_Trigger_Capture+0x74>)
 80023b4:	4620      	mov	r0, r4
 80023b6:	f00f fc21 	bl	8011bfc <HAL_UART_Receive_DMA>
 80023ba:	2800      	cmp	r0, #0
 80023bc:	d0e2      	beq.n	8002384 <UartCmd_Trigger_Capture+0x1c>
}
 80023be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80023c2:	f002 be3d 	b.w	8005040 <Error_Handler>
      Error_Handler();
 80023c6:	f002 fe3b 	bl	8005040 <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80023ca:	4620      	mov	r0, r4
 80023cc:	f00f fdf4 	bl	8011fb8 <HAL_UART_GetState>
 80023d0:	2820      	cmp	r0, #32
 80023d2:	d1e8      	bne.n	80023a6 <UartCmd_Trigger_Capture+0x3e>
 80023d4:	e7ec      	b.n	80023b0 <UartCmd_Trigger_Capture+0x48>
 80023d6:	bf00      	nop
 80023d8:	30000280 	.word	0x30000280
 80023dc:	300002e0 	.word	0x300002e0

080023e0 <UartCmd_Trigger_Dump>:
{
 80023e0:	b538      	push	{r3, r4, r5, lr}
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 80023e2:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
{
 80023e6:	4604      	mov	r4, r0
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d027      	beq.n	800243c <UartCmd_Trigger_Dump+0x5c>
    *(aTxBuffer) = CMD_ERROR_EVT;
 80023ec:	4d1b      	ldr	r5, [pc, #108]	; (800245c <UartCmd_Trigger_Dump+0x7c>)
 80023ee:	2304      	movs	r3, #4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80023f0:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80023f4:	2202      	movs	r2, #2
 80023f6:	2160      	movs	r1, #96	; 0x60
 80023f8:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 80023fa:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80023fc:	f002 fdb0 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002400:	2201      	movs	r2, #1
 8002402:	4629      	mov	r1, r5
 8002404:	4620      	mov	r0, r4
 8002406:	f00f fba7 	bl	8011b58 <HAL_UART_Transmit_DMA>
 800240a:	b978      	cbnz	r0, 800242c <UartCmd_Trigger_Dump+0x4c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800240c:	4620      	mov	r0, r4
 800240e:	f00f fdd3 	bl	8011fb8 <HAL_UART_GetState>
 8002412:	2820      	cmp	r0, #32
 8002414:	d1fa      	bne.n	800240c <UartCmd_Trigger_Dump+0x2c>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002416:	220a      	movs	r2, #10
 8002418:	4911      	ldr	r1, [pc, #68]	; (8002460 <UartCmd_Trigger_Dump+0x80>)
 800241a:	4620      	mov	r0, r4
 800241c:	f00f fbee 	bl	8011bfc <HAL_UART_Receive_DMA>
 8002420:	b900      	cbnz	r0, 8002424 <UartCmd_Trigger_Dump+0x44>
}
 8002422:	bd38      	pop	{r3, r4, r5, pc}
 8002424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002428:	f002 be0a 	b.w	8005040 <Error_Handler>
      Error_Handler();
 800242c:	f002 fe08 	bl	8005040 <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002430:	4620      	mov	r0, r4
 8002432:	f00f fdc1 	bl	8011fb8 <HAL_UART_GetState>
 8002436:	2820      	cmp	r0, #32
 8002438:	d1e8      	bne.n	800240c <UartCmd_Trigger_Dump+0x2c>
 800243a:	e7ec      	b.n	8002416 <UartCmd_Trigger_Dump+0x36>
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 800243c:	8808      	ldrh	r0, [r1, #0]
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 800243e:	2301      	movs	r3, #1
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002440:	2280      	movs	r2, #128	; 0x80
 8002442:	2100      	movs	r1, #0
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 8002444:	f8c4 04f8 	str.w	r0, [r4, #1272]	; 0x4f8
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8002448:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
    Test_Context_Ptr->DumpContext.dump_state = 1;
 800244c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <UartCmd_Trigger_Dump+0x84>)
}
 8002452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002456:	f01f bf41 	b.w	80222dc <memset>
 800245a:	bf00      	nop
 800245c:	30000280 	.word	0x30000280
 8002460:	300002e0 	.word	0x300002e0
 8002464:	d0cb08a0 	.word	0xd0cb08a0

08002468 <MemoryDumpInit>:
{
 8002468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 800246c:	4dbd      	ldr	r5, [pc, #756]	; (8002764 <MemoryDumpInit+0x2fc>)
{
 800246e:	b094      	sub	sp, #80	; 0x50
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002470:	f8d0 75d0 	ldr.w	r7, [r0, #1488]	; 0x5d0
{
 8002474:	4604      	mov	r4, r0
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 8002476:	f10d 0c10 	add.w	ip, sp, #16
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800247a:	f04f 36ff 	mov.w	r6, #4294967295
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 800247e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002480:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002484:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002488:	222b      	movs	r2, #43	; 0x2b
 800248a:	f84c 0b04 	str.w	r0, [ip], #4
 800248e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8002492:	f88c 1000 	strb.w	r1, [ip]
 8002496:	2100      	movs	r1, #0
 8002498:	f01f ff20 	bl	80222dc <memset>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800249c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80024a0:	f017 fe12 	bl	801a0c8 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 80024a4:	2332      	movs	r3, #50	; 0x32
 80024a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024aa:	210a      	movs	r1, #10
 80024ac:	20c8      	movs	r0, #200	; 0xc8
 80024ae:	9600      	str	r6, [sp, #0]
 80024b0:	f017 ffdc 	bl	801a46c <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Memory dump sub-mode", CENTER_MODE);
 80024b4:	f017 fe00 	bl	801a0b8 <UTIL_LCD_GetFont>
 80024b8:	2301      	movs	r3, #1
 80024ba:	88c1      	ldrh	r1, [r0, #6]
 80024bc:	2000      	movs	r0, #0
 80024be:	4aaa      	ldr	r2, [pc, #680]	; (8002768 <MemoryDumpInit+0x300>)
 80024c0:	f017 fef2 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 80024c4:	f017 fdf8 	bl	801a0b8 <UTIL_LCD_GetFont>
 80024c8:	88c1      	ldrh	r1, [r0, #6]
 80024ca:	2301      	movs	r3, #1
 80024cc:	4aa7      	ldr	r2, [pc, #668]	; (800276c <MemoryDumpInit+0x304>)
 80024ce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80024d2:	2000      	movs	r0, #0
 80024d4:	f017 fee8 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the frame source", CENTER_MODE);
 80024d8:	f017 fdee 	bl	801a0b8 <UTIL_LCD_GetFont>
 80024dc:	88c1      	ldrh	r1, [r0, #6]
 80024de:	2301      	movs	r3, #1
 80024e0:	4aa3      	ldr	r2, [pc, #652]	; (8002770 <MemoryDumpInit+0x308>)
 80024e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80024e6:	2000      	movs	r0, #0
 80024e8:	0049      	lsls	r1, r1, #1
 80024ea:	f017 fedd 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 80024ee:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80024f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80024f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024fa:	4608      	mov	r0, r1
 80024fc:	9600      	str	r6, [sp, #0]
 80024fe:	f017 ff27 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002502:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002506:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800250a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800250e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002512:	9600      	str	r6, [sp, #0]
 8002514:	f017 ff1c 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8002518:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800251c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002520:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002524:	461a      	mov	r2, r3
 8002526:	9600      	str	r6, [sp, #0]
 8002528:	f017 ff12 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 800252c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002530:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002534:	9600      	str	r6, [sp, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	4608      	mov	r0, r1
 800253a:	f017 ff09 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 800253e:	f017 fdbb 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002542:	2301      	movs	r3, #1
 8002544:	88c1      	ldrh	r1, [r0, #6]
 8002546:	2000      	movs	r0, #0
 8002548:	4a8a      	ldr	r2, [pc, #552]	; (8002774 <MemoryDumpInit+0x30c>)
 800254a:	4099      	lsls	r1, r3
 800254c:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002550:	f017 feaa 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 8002554:	f017 fdb0 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002558:	88c1      	ldrh	r1, [r0, #6]
 800255a:	2303      	movs	r3, #3
 800255c:	4a86      	ldr	r2, [pc, #536]	; (8002778 <MemoryDumpInit+0x310>)
 800255e:	1049      	asrs	r1, r1, #1
 8002560:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8002564:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002568:	f017 fe9e 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(200, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[2], LEFT_MODE);//LEFT
 800256c:	f017 fda4 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002570:	88c1      	ldrh	r1, [r0, #6]
 8002572:	2303      	movs	r3, #3
 8002574:	4a81      	ldr	r2, [pc, #516]	; (800277c <MemoryDumpInit+0x314>)
 8002576:	1049      	asrs	r1, r1, #1
 8002578:	20c8      	movs	r0, #200	; 0xc8
 800257a:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 800257e:	f017 fe93 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002584:	f7ff f9b0 	bl	80018e8 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8002588:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d04c      	beq.n	800262a <MemoryDumpInit+0x1c2>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_dump_submode)
 8002590:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 8002594:	2b02      	cmp	r3, #2
 8002596:	f000 808c 	beq.w	80026b2 <MemoryDumpInit+0x24a>
 800259a:	2b03      	cmp	r3, #3
 800259c:	d03f      	beq.n	800261e <MemoryDumpInit+0x1b6>
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d03d      	beq.n	800261e <MemoryDumpInit+0x1b6>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 80025a2:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d021      	beq.n	80025ee <MemoryDumpInit+0x186>
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 80025aa:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80025ac:	220a      	movs	r2, #10
 80025ae:	4974      	ldr	r1, [pc, #464]	; (8002780 <MemoryDumpInit+0x318>)
 80025b0:	f204 500c 	addw	r0, r4, #1292	; 0x50c
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 80025b4:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80025b8:	f00f fb20 	bl	8011bfc <HAL_UART_Receive_DMA>
 80025bc:	2800      	cmp	r0, #0
 80025be:	f040 8085 	bne.w	80026cc <MemoryDumpInit+0x264>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 80025c2:	2000      	movs	r0, #0
 80025c4:	f008 f97a 	bl	800a8bc <BSP_SD_Init>
 80025c8:	b1f8      	cbz	r0, 800260a <MemoryDumpInit+0x1a2>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80025ca:	f017 fd75 	bl	801a0b8 <UTIL_LCD_GetFont>
 80025ce:	88c1      	ldrh	r1, [r0, #6]
 80025d0:	2301      	movs	r3, #1
 80025d2:	4a6c      	ldr	r2, [pc, #432]	; (8002784 <MemoryDumpInit+0x31c>)
 80025d4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80025d8:	2000      	movs	r0, #0
 80025da:	4099      	lsls	r1, r3
 80025dc:	f017 fe64 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80025e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025e2:	f7ff f981 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80025e6:	2002      	movs	r0, #2
 80025e8:	f006 fa02 	bl	80089f0 <BSP_LED_On>
    while (1);
 80025ec:	e7fe      	b.n	80025ec <MemoryDumpInit+0x184>
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 80025ee:	2100      	movs	r1, #0
      memset(dump_output_buff, 0, sizeof(dump_output_buff));
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	4865      	ldr	r0, [pc, #404]	; (8002788 <MemoryDumpInit+0x320>)
      Test_Context_Ptr->DumpContext.dump_state = 1;
 80025f4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 80025f8:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
      memset(dump_output_buff, 0, sizeof(dump_output_buff));
 80025fc:	f01f fe6e 	bl	80222dc <memset>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8002600:	2000      	movs	r0, #0
 8002602:	f008 f95b 	bl	800a8bc <BSP_SD_Init>
 8002606:	2800      	cmp	r0, #0
 8002608:	d1df      	bne.n	80025ca <MemoryDumpInit+0x162>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 800260a:	a903      	add	r1, sp, #12
 800260c:	485f      	ldr	r0, [pc, #380]	; (800278c <MemoryDumpInit+0x324>)
 800260e:	f015 fb09 	bl	8017c24 <FATFS_LinkDriver>
 8002612:	4602      	mov	r2, r0
 8002614:	b1e0      	cbz	r0, 8002650 <MemoryDumpInit+0x1e8>
    BSP_LED_On(LED_RED);
 8002616:	2002      	movs	r0, #2
 8002618:	f006 f9ea 	bl	80089f0 <BSP_LED_On>
    while (1);
 800261c:	e7fe      	b.n	800261c <MemoryDumpInit+0x1b4>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 800261e:	7123      	strb	r3, [r4, #4]
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002620:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
 8002624:	2b01      	cmp	r3, #1
 8002626:	d1c0      	bne.n	80025aa <MemoryDumpInit+0x142>
 8002628:	e7e1      	b.n	80025ee <MemoryDumpInit+0x186>
    HAL_Delay(200);
 800262a:	20c8      	movs	r0, #200	; 0xc8
 800262c:	f008 fa8c 	bl	800ab48 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002630:	2100      	movs	r1, #0
 8002632:	4608      	mov	r0, r1
 8002634:	f006 fb08 	bl	8008c48 <BSP_JOY_GetState>
 8002638:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_DOWN || joy_state == JOY_SEL)
 800263a:	2b02      	cmp	r3, #2
 800263c:	d9f8      	bls.n	8002630 <MemoryDumpInit+0x1c8>
    switch (joy_state)
 800263e:	2b08      	cmp	r3, #8
 8002640:	d04a      	beq.n	80026d8 <MemoryDumpInit+0x270>
 8002642:	2b10      	cmp	r3, #16
 8002644:	d045      	beq.n	80026d2 <MemoryDumpInit+0x26a>
 8002646:	2b04      	cmp	r3, #4
 8002648:	d1bb      	bne.n	80025c2 <MemoryDumpInit+0x15a>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 800264a:	2303      	movs	r3, #3
 800264c:	7123      	strb	r3, [r4, #4]
   break;
 800264e:	e7b8      	b.n	80025c2 <MemoryDumpInit+0x15a>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8002650:	a903      	add	r1, sp, #12
 8002652:	484f      	ldr	r0, [pc, #316]	; (8002790 <MemoryDumpInit+0x328>)
 8002654:	f013 fe1e 	bl	8016294 <f_mount>
 8002658:	4605      	mov	r5, r0
 800265a:	bb30      	cbnz	r0, 80026aa <MemoryDumpInit+0x242>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 800265c:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <MemoryDumpInit+0x32c>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 800265e:	f204 56bc 	addw	r6, r4, #1468	; 0x5bc
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 8002662:	f104 0822 	add.w	r8, r4, #34	; 0x22
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002666:	f8c4 35bc 	str.w	r3, [r4, #1468]	; 0x5bc
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 800266a:	4630      	mov	r0, r6
 800266c:	f00e f8c0 	bl	80107f0 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 8002670:	4630      	mov	r0, r6
 8002672:	f00e f881 	bl	8010778 <HAL_RNG_Init>
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 8002676:	4b48      	ldr	r3, [pc, #288]	; (8002798 <MemoryDumpInit+0x330>)
 8002678:	cb07      	ldmia	r3!, {r0, r1, r2}
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
  res = f_mkdir(path);
 8002680:	4640      	mov	r0, r8
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 8002682:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 8002686:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
 800268a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  res = f_mkdir(path);
 800268e:	f014 fe1f 	bl	80172d0 <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002692:	f010 06f7 	ands.w	r6, r0, #247	; 0xf7
 8002696:	d128      	bne.n	80026ea <MemoryDumpInit+0x282>
  if(Test_Context_Ptr->DumpContext.Dump_FrameSource==SDCARD_FILE)
 8002698:	7923      	ldrb	r3, [r4, #4]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d042      	beq.n	8002724 <MemoryDumpInit+0x2bc>
    BSP_SD_DeInit(0);
 800269e:	4630      	mov	r0, r6
 80026a0:	f008 f8ce 	bl	800a840 <BSP_SD_DeInit>
}
 80026a4:	b014      	add	sp, #80	; 0x50
 80026a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BSP_LED_On(LED_RED);
 80026aa:	2002      	movs	r0, #2
 80026ac:	f006 f9a0 	bl	80089f0 <BSP_LED_On>
    while (1);
 80026b0:	e7fe      	b.n	80026b0 <MemoryDumpInit+0x248>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 80026b2:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80026b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b6:	f7fe fe69 	bl	800138c <CAMERA_Init>
      CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80026ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026bc:	f7fe ff4a 	bl	8001554 <CAMERA_Enable_TestBar_Mode>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 80026c0:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	f47f af70 	bne.w	80025aa <MemoryDumpInit+0x142>
 80026ca:	e790      	b.n	80025ee <MemoryDumpInit+0x186>
    Error_Handler();
 80026cc:	f002 fcb8 	bl	8005040 <Error_Handler>
 80026d0:	e777      	b.n	80025c2 <MemoryDumpInit+0x15a>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 80026d2:	2301      	movs	r3, #1
 80026d4:	7123      	strb	r3, [r4, #4]
      break;
 80026d6:	e774      	b.n	80025c2 <MemoryDumpInit+0x15a>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 80026d8:	2302      	movs	r3, #2
 80026da:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80026dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026de:	f7fe fe55 	bl	800138c <CAMERA_Init>
      CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80026e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026e4:	f7fe ff36 	bl	8001554 <CAMERA_Enable_TestBar_Mode>
      break;
 80026e8:	e76b      	b.n	80025c2 <MemoryDumpInit+0x15a>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 80026ea:	f017 fce5 	bl	801a0b8 <UTIL_LCD_GetFont>
 80026ee:	88c1      	ldrh	r1, [r0, #6]
 80026f0:	2301      	movs	r3, #1
 80026f2:	4a2a      	ldr	r2, [pc, #168]	; (800279c <MemoryDumpInit+0x334>)
 80026f4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80026f8:	4628      	mov	r0, r5
 80026fa:	4099      	lsls	r1, r3
 80026fc:	f017 fdd4 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002700:	f017 fcda 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002704:	4601      	mov	r1, r0
 8002706:	2301      	movs	r3, #1
 8002708:	4642      	mov	r2, r8
 800270a:	88c9      	ldrh	r1, [r1, #6]
 800270c:	4628      	mov	r0, r5
 800270e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002712:	f017 fdc9 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002718:	f7ff f8e6 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800271c:	2002      	movs	r0, #2
 800271e:	f006 f967 	bl	80089f0 <BSP_LED_On>
    while (1);
 8002722:	e7fe      	b.n	8002722 <MemoryDumpInit+0x2ba>
  res = f_stat(path, &fno);
 8002724:	491e      	ldr	r1, [pc, #120]	; (80027a0 <MemoryDumpInit+0x338>)
 8002726:	a804      	add	r0, sp, #16
 8002728:	f014 fda2 	bl	8017270 <f_stat>
  if (res != FR_OK)
 800272c:	4604      	mov	r4, r0
 800272e:	2800      	cmp	r0, #0
 8002730:	d13a      	bne.n	80027a8 <MemoryDumpInit+0x340>
    nbr_dir = count_dir(dump_dir_path, App_Cxt_Ptr);
 8002732:	4639      	mov	r1, r7
 8002734:	a804      	add	r0, sp, #16
 8002736:	f7ff fa2b 	bl	8001b90 <count_dir>
    if (nbr_dir != 0)
 800273a:	2800      	cmp	r0, #0
 800273c:	d0b2      	beq.n	80026a4 <MemoryDumpInit+0x23c>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 800273e:	f017 fcbb 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002742:	88c1      	ldrh	r1, [r0, #6]
 8002744:	2301      	movs	r3, #1
 8002746:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <MemoryDumpInit+0x33c>)
 8002748:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800274c:	4620      	mov	r0, r4
 800274e:	4099      	lsls	r1, r3
 8002750:	f017 fdaa 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002756:	f7ff f8c7 	bl	80018e8 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 800275a:	2002      	movs	r0, #2
 800275c:	f006 f948 	bl	80089f0 <BSP_LED_On>
      while (1)
 8002760:	e7fe      	b.n	8002760 <MemoryDumpInit+0x2f8>
 8002762:	bf00      	nop
 8002764:	08025720 	.word	0x08025720
 8002768:	080259a8 	.word	0x080259a8
 800276c:	080259c0 	.word	0x080259c0
 8002770:	080259e8 	.word	0x080259e8
 8002774:	08025914 	.word	0x08025914
 8002778:	08025920 	.word	0x08025920
 800277c:	08025930 	.word	0x08025930
 8002780:	300002e0 	.word	0x300002e0
 8002784:	08025a04 	.word	0x08025a04
 8002788:	d0cb08a0 	.word	0xd0cb08a0
 800278c:	0805faa0 	.word	0x0805faa0
 8002790:	20005280 	.word	0x20005280
 8002794:	48021800 	.word	0x48021800
 8002798:	08025a20 	.word	0x08025a20
 800279c:	08025a30 	.word	0x08025a30
 80027a0:	20005bb4 	.word	0x20005bb4
 80027a4:	08025a74 	.word	0x08025a74
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not find directory", CENTER_MODE);
 80027a8:	f017 fc86 	bl	801a0b8 <UTIL_LCD_GetFont>
 80027ac:	88c1      	ldrh	r1, [r0, #6]
 80027ae:	2301      	movs	r3, #1
 80027b0:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <MemoryDumpInit+0x37c>)
 80027b2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80027b6:	4630      	mov	r0, r6
 80027b8:	4099      	lsls	r1, r3
 80027ba:	f017 fd75 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 80027be:	f017 fc7b 	bl	801a0b8 <UTIL_LCD_GetFont>
 80027c2:	4601      	mov	r1, r0
 80027c4:	2301      	movs	r3, #1
 80027c6:	aa04      	add	r2, sp, #16
 80027c8:	88c9      	ldrh	r1, [r1, #6]
 80027ca:	4630      	mov	r0, r6
 80027cc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80027d0:	f017 fd6a 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(app->Display_ContextPtr);
 80027d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027d6:	f7ff f887 	bl	80018e8 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 80027da:	2002      	movs	r0, #2
 80027dc:	f006 f908 	bl	80089f0 <BSP_LED_On>
      while (1);
 80027e0:	e7fe      	b.n	80027e0 <MemoryDumpInit+0x378>
 80027e2:	bf00      	nop
 80027e4:	08025a54 	.word	0x08025a54

080027e8 <FrameCaptureInit>:
{
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 80027ea:	f04f 35ff 	mov.w	r5, #4294967295
{
 80027ee:	b085      	sub	sp, #20
 80027f0:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80027f2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 80027f6:	f8d4 65d0 	ldr.w	r6, [r4, #1488]	; 0x5d0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80027fa:	f017 fc65 	bl	801a0c8 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 80027fe:	2332      	movs	r3, #50	; 0x32
 8002800:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002804:	210a      	movs	r1, #10
 8002806:	20c8      	movs	r0, #200	; 0xc8
 8002808:	9500      	str	r5, [sp, #0]
 800280a:	f017 fe2f 	bl	801a46c <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Capture file format", CENTER_MODE);
 800280e:	f017 fc53 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002812:	2301      	movs	r3, #1
 8002814:	88c1      	ldrh	r1, [r0, #6]
 8002816:	2000      	movs	r0, #0
 8002818:	4a92      	ldr	r2, [pc, #584]	; (8002a64 <FrameCaptureInit+0x27c>)
 800281a:	f017 fd45 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 800281e:	f017 fc4b 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002822:	88c1      	ldrh	r1, [r0, #6]
 8002824:	2301      	movs	r3, #1
 8002826:	4a90      	ldr	r2, [pc, #576]	; (8002a68 <FrameCaptureInit+0x280>)
 8002828:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800282c:	2000      	movs	r0, #0
 800282e:	f017 fd3b 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the format of the captured files", CENTER_MODE);
 8002832:	f017 fc41 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002836:	88c1      	ldrh	r1, [r0, #6]
 8002838:	2301      	movs	r3, #1
 800283a:	4a8c      	ldr	r2, [pc, #560]	; (8002a6c <FrameCaptureInit+0x284>)
 800283c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002840:	2000      	movs	r0, #0
 8002842:	4099      	lsls	r1, r3
 8002844:	f017 fd30 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8002848:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800284c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002850:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002854:	4608      	mov	r0, r1
 8002856:	9500      	str	r5, [sp, #0]
 8002858:	f017 fd7a 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 800285c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002860:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002864:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002868:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800286c:	9500      	str	r5, [sp, #0]
 800286e:	f017 fd6f 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8002872:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002876:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800287a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800287e:	461a      	mov	r2, r3
 8002880:	9500      	str	r5, [sp, #0]
 8002882:	f017 fd65 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002886:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800288a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800288e:	9500      	str	r5, [sp, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4608      	mov	r0, r1
 8002894:	f017 fd5c 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002898:	f017 fc0e 	bl	801a0b8 <UTIL_LCD_GetFont>
 800289c:	2301      	movs	r3, #1
 800289e:	88c1      	ldrh	r1, [r0, #6]
 80028a0:	2000      	movs	r0, #0
 80028a2:	4a73      	ldr	r2, [pc, #460]	; (8002a70 <FrameCaptureInit+0x288>)
 80028a4:	4099      	lsls	r1, r3
 80028a6:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 80028aa:	f017 fcfd 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[1], CENTER_MODE);//DOWN
 80028ae:	f017 fc03 	bl	801a0b8 <UTIL_LCD_GetFont>
 80028b2:	88c1      	ldrh	r1, [r0, #6]
 80028b4:	2301      	movs	r3, #1
 80028b6:	4a6f      	ldr	r2, [pc, #444]	; (8002a74 <FrameCaptureInit+0x28c>)
 80028b8:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 80028bc:	2000      	movs	r0, #0
 80028be:	f017 fcf3 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80028c2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80028c4:	f7ff f810 	bl	80018e8 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 80028c8:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d06c      	beq.n	80029aa <FrameCaptureInit+0x1c2>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_capture_format)
 80028d0:	f894 34fc 	ldrb.w	r3, [r4, #1276]	; 0x4fc
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d043      	beq.n	8002960 <FrameCaptureInit+0x178>
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d041      	beq.n	8002960 <FrameCaptureInit+0x178>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 80028dc:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80028de:	220a      	movs	r2, #10
 80028e0:	4965      	ldr	r1, [pc, #404]	; (8002a78 <FrameCaptureInit+0x290>)
 80028e2:	f204 500c 	addw	r0, r4, #1292	; 0x50c
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 80028e6:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80028ea:	f00f f987 	bl	8011bfc <HAL_UART_Receive_DMA>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d158      	bne.n	80029a4 <FrameCaptureInit+0x1bc>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 80028f2:	4b62      	ldr	r3, [pc, #392]	; (8002a7c <FrameCaptureInit+0x294>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 80028f4:	f204 55bc 	addw	r5, r4, #1468	; 0x5bc
  Test_Context_Ptr->RngHandle.Instance = RNG;
 80028f8:	f8c4 35bc 	str.w	r3, [r4, #1468]	; 0x5bc
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 80028fc:	4628      	mov	r0, r5
 80028fe:	f00d ff77 	bl	80107f0 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 8002902:	4628      	mov	r0, r5
 8002904:	f00d ff38 	bl	8010778 <HAL_RNG_Init>
  HAL_RNG_GenerateRandomNumber(&Test_Context_Ptr->RngHandle, &Test_Context_Ptr->CaptureContext.capture_session_id);
 8002908:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 800290c:	4628      	mov	r0, r5
 800290e:	f00d ff89 	bl	8010824 <HAL_RNG_GenerateRandomNumber>
  sprintf(Test_Context_Ptr->CaptureContext.capture_session_name, "Session %X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 8002912:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002916:	495a      	ldr	r1, [pc, #360]	; (8002a80 <FrameCaptureInit+0x298>)
 8002918:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800291c:	f020 fa4e 	bl	8022dbc <siprintf>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8002920:	2000      	movs	r0, #0
 8002922:	f007 ffcb 	bl	800a8bc <BSP_SD_Init>
 8002926:	b188      	cbz	r0, 800294c <FrameCaptureInit+0x164>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002928:	f017 fbc6 	bl	801a0b8 <UTIL_LCD_GetFont>
 800292c:	88c1      	ldrh	r1, [r0, #6]
 800292e:	2301      	movs	r3, #1
 8002930:	4a54      	ldr	r2, [pc, #336]	; (8002a84 <FrameCaptureInit+0x29c>)
 8002932:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002936:	2000      	movs	r0, #0
 8002938:	4099      	lsls	r1, r3
 800293a:	f017 fcb5 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800293e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002940:	f7fe ffd2 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002944:	2002      	movs	r0, #2
 8002946:	f006 f853 	bl	80089f0 <BSP_LED_On>
    while (1);
 800294a:	e7fe      	b.n	800294a <FrameCaptureInit+0x162>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 800294c:	484e      	ldr	r0, [pc, #312]	; (8002a88 <FrameCaptureInit+0x2a0>)
 800294e:	a903      	add	r1, sp, #12
 8002950:	f015 f968 	bl	8017c24 <FATFS_LinkDriver>
 8002954:	4602      	mov	r2, r0
 8002956:	b130      	cbz	r0, 8002966 <FrameCaptureInit+0x17e>
    BSP_LED_On(LED_RED);
 8002958:	2002      	movs	r0, #2
 800295a:	f006 f849 	bl	80089f0 <BSP_LED_On>
    while (1);
 800295e:	e7fe      	b.n	800295e <FrameCaptureInit+0x176>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_BMP;
 8002960:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 8002964:	e7ba      	b.n	80028dc <FrameCaptureInit+0xf4>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8002966:	a903      	add	r1, sp, #12
 8002968:	4848      	ldr	r0, [pc, #288]	; (8002a8c <FrameCaptureInit+0x2a4>)
 800296a:	f013 fc93 	bl	8016294 <f_mount>
 800296e:	4605      	mov	r5, r0
 8002970:	bbb0      	cbnz	r0, 80029e0 <FrameCaptureInit+0x1f8>
  char *capture_session_dir_path = Test_Context_Ptr->CaptureContext.capture_folder_name;
 8002972:	f104 07de 	add.w	r7, r4, #222	; 0xde
  sprintf(capture_session_dir_path, "/Camera_Capture/CAM_CAPTURE_SESS_%X", capture_session_id);
 8002976:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800297a:	4945      	ldr	r1, [pc, #276]	; (8002a90 <FrameCaptureInit+0x2a8>)
 800297c:	4638      	mov	r0, r7
 800297e:	f020 fa1d 	bl	8022dbc <siprintf>
  res = f_mkdir(path);
 8002982:	4844      	ldr	r0, [pc, #272]	; (8002a94 <FrameCaptureInit+0x2ac>)
 8002984:	f014 fca4 	bl	80172d0 <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002988:	f010 04f7 	ands.w	r4, r0, #247	; 0xf7
 800298c:	d130      	bne.n	80029f0 <FrameCaptureInit+0x208>
  res = f_mkdir(path);
 800298e:	4638      	mov	r0, r7
 8002990:	f014 fc9e 	bl	80172d0 <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002994:	f010 00f7 	ands.w	r0, r0, #247	; 0xf7
 8002998:	d147      	bne.n	8002a2a <FrameCaptureInit+0x242>
}
 800299a:	b005      	add	sp, #20
 800299c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  BSP_SD_DeInit(0);
 80029a0:	f007 bf4e 	b.w	800a840 <BSP_SD_DeInit>
    Error_Handler();
 80029a4:	f002 fb4c 	bl	8005040 <Error_Handler>
 80029a8:	e7a3      	b.n	80028f2 <FrameCaptureInit+0x10a>
    HAL_Delay(200);
 80029aa:	20c8      	movs	r0, #200	; 0xc8
 80029ac:	f008 f8cc 	bl	800ab48 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 80029b0:	2100      	movs	r1, #0
 80029b2:	4608      	mov	r0, r1
 80029b4:	f006 f948 	bl	8008c48 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 80029b8:	f010 0ff7 	tst.w	r0, #247	; 0xf7
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 80029bc:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 80029be:	d0f7      	beq.n	80029b0 <FrameCaptureInit+0x1c8>
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d0f5      	beq.n	80029b0 <FrameCaptureInit+0x1c8>
 80029c4:	f1a3 0201 	sub.w	r2, r3, #1
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	0952      	lsrs	r2, r2, #5
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d1ee      	bne.n	80029b0 <FrameCaptureInit+0x1c8>
    switch (joy_state)
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d008      	beq.n	80029e8 <FrameCaptureInit+0x200>
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d18b      	bne.n	80028f2 <FrameCaptureInit+0x10a>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_RAW;
 80029da:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
      break;
 80029de:	e788      	b.n	80028f2 <FrameCaptureInit+0x10a>
    BSP_LED_On(LED_RED);
 80029e0:	2002      	movs	r0, #2
 80029e2:	f006 f805 	bl	80089f0 <BSP_LED_On>
    while (1);
 80029e6:	e7fe      	b.n	80029e6 <FrameCaptureInit+0x1fe>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_BMP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 80029ee:	e780      	b.n	80028f2 <FrameCaptureInit+0x10a>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 80029f0:	f017 fb62 	bl	801a0b8 <UTIL_LCD_GetFont>
 80029f4:	88c1      	ldrh	r1, [r0, #6]
 80029f6:	2301      	movs	r3, #1
 80029f8:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <FrameCaptureInit+0x2b0>)
 80029fa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80029fe:	4628      	mov	r0, r5
 8002a00:	4099      	lsls	r1, r3
 8002a02:	f017 fc51 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002a06:	f017 fb57 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002a0a:	4601      	mov	r1, r0
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <FrameCaptureInit+0x2ac>)
 8002a10:	88c9      	ldrh	r1, [r1, #6]
 8002a12:	4628      	mov	r0, r5
 8002a14:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002a18:	f017 fc46 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002a1c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002a1e:	f7fe ff63 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002a22:	2002      	movs	r0, #2
 8002a24:	f005 ffe4 	bl	80089f0 <BSP_LED_On>
    while (1);
 8002a28:	e7fe      	b.n	8002a28 <FrameCaptureInit+0x240>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8002a2a:	f017 fb45 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002a2e:	88c1      	ldrh	r1, [r0, #6]
 8002a30:	2301      	movs	r3, #1
 8002a32:	4a19      	ldr	r2, [pc, #100]	; (8002a98 <FrameCaptureInit+0x2b0>)
 8002a34:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002a38:	4620      	mov	r0, r4
 8002a3a:	4099      	lsls	r1, r3
 8002a3c:	f017 fc34 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002a40:	f017 fb3a 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002a44:	4601      	mov	r1, r0
 8002a46:	2301      	movs	r3, #1
 8002a48:	463a      	mov	r2, r7
 8002a4a:	88c9      	ldrh	r1, [r1, #6]
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002a52:	f017 fc29 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002a56:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002a58:	f7fe ff46 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	f005 ffc7 	bl	80089f0 <BSP_LED_On>
    while (1);
 8002a62:	e7fe      	b.n	8002a62 <FrameCaptureInit+0x27a>
 8002a64:	08025aa4 	.word	0x08025aa4
 8002a68:	080259c0 	.word	0x080259c0
 8002a6c:	08025ab8 	.word	0x08025ab8
 8002a70:	0802590c 	.word	0x0802590c
 8002a74:	08025910 	.word	0x08025910
 8002a78:	300002e0 	.word	0x300002e0
 8002a7c:	48021800 	.word	0x48021800
 8002a80:	08025ae4 	.word	0x08025ae4
 8002a84:	08025a04 	.word	0x08025a04
 8002a88:	0805faa0 	.word	0x0805faa0
 8002a8c:	20005280 	.word	0x20005280
 8002a90:	08025af0 	.word	0x08025af0
 8002a94:	08025b14 	.word	0x08025b14
 8002a98:	08025a30 	.word	0x08025a30

08002a9c <OnBoardValidInit>:
{
 8002a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	b092      	sub	sp, #72	; 0x48
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002aa4:	f8d4 55d0 	ldr.w	r5, [r4, #1488]	; 0x5d0
  char msg[64];
  
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
  static const uint16_t margin = 15; /* margin for text in pixels*/
  
  sprintf(msg, "%s", App_Cxt_Ptr->Test_ContextPtr->ValidationContext.class_path);
 8002aa8:	a802      	add	r0, sp, #8
 8002aaa:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002aac:	f501 7170 	add.w	r1, r1, #960	; 0x3c0
 8002ab0:	f020 f9ad 	bl	8022e0e <strcpy>

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002ab4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002ab8:	f017 fb06 	bl	801a0c8 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac0:	2332      	movs	r3, #50	; 0x32
 8002ac2:	210a      	movs	r1, #10
 8002ac4:	9200      	str	r2, [sp, #0]
 8002ac6:	20c8      	movs	r0, #200	; 0xc8
 8002ac8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002acc:	f017 fcce 	bl	801a46c <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Onboard Validation", CENTER_MODE);
 8002ad0:	f017 faf2 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	88c1      	ldrh	r1, [r0, #6]
 8002ad8:	2000      	movs	r0, #0
 8002ada:	4aa1      	ldr	r2, [pc, #644]	; (8002d60 <OnBoardValidInit+0x2c4>)
 8002adc:	f017 fbe4 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(4), (uint8_t *)"Onboard validation will look for a directory", LEFT_MODE);
 8002ae0:	f017 faea 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002ae4:	88c1      	ldrh	r1, [r0, #6]
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	4a9e      	ldr	r2, [pc, #632]	; (8002d64 <OnBoardValidInit+0x2c8>)
 8002aea:	0089      	lsls	r1, r1, #2
 8002aec:	200f      	movs	r0, #15
 8002aee:	f017 fbdb 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(5), (uint8_t *)msg, LEFT_MODE);
 8002af2:	f017 fae1 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002af6:	88c1      	ldrh	r1, [r0, #6]
 8002af8:	aa02      	add	r2, sp, #8
 8002afa:	2303      	movs	r3, #3
 8002afc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002b00:	200f      	movs	r0, #15
 8002b02:	f017 fbd1 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(6), (uint8_t *)"at the root of the SDCard.", LEFT_MODE);
 8002b06:	f017 fad7 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002b0a:	88c1      	ldrh	r1, [r0, #6]
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	4a96      	ldr	r2, [pc, #600]	; (8002d68 <OnBoardValidInit+0x2cc>)
 8002b10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002b14:	200f      	movs	r0, #15
 8002b16:	0049      	lsls	r1, r1, #1
 8002b18:	f017 fbc6 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(7), (uint8_t *)"This directory should contain one directory", LEFT_MODE);
 8002b1c:	f017 facc 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002b20:	88c1      	ldrh	r1, [r0, #6]
 8002b22:	2303      	movs	r3, #3
 8002b24:	4a91      	ldr	r2, [pc, #580]	; (8002d6c <OnBoardValidInit+0x2d0>)
 8002b26:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002b2a:	200f      	movs	r0, #15
 8002b2c:	f017 fbbc 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(8), (uint8_t *)"per class containing images in BPM 16 bpp", LEFT_MODE);
 8002b30:	f017 fac2 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002b34:	2303      	movs	r3, #3
 8002b36:	88c1      	ldrh	r1, [r0, #6]
 8002b38:	200f      	movs	r0, #15
 8002b3a:	4a8d      	ldr	r2, [pc, #564]	; (8002d70 <OnBoardValidInit+0x2d4>)
 8002b3c:	4099      	lsls	r1, r3
 8002b3e:	f017 fbb3 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(9), (uint8_t *)"format.", LEFT_MODE);
 8002b42:	f017 fab9 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002b46:	88c1      	ldrh	r1, [r0, #6]
 8002b48:	2303      	movs	r3, #3
 8002b4a:	4a8a      	ldr	r2, [pc, #552]	; (8002d74 <OnBoardValidInit+0x2d8>)
 8002b4c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002b50:	200f      	movs	r0, #15
 8002b52:	f017 fba9 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(12), (uint8_t *)"Please insert the SDCard now,", LEFT_MODE);
 8002b56:	f017 faaf 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002b5a:	88c1      	ldrh	r1, [r0, #6]
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	4a86      	ldr	r2, [pc, #536]	; (8002d78 <OnBoardValidInit+0x2dc>)
 8002b60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002b64:	200f      	movs	r0, #15
 8002b66:	0089      	lsls	r1, r1, #2
 8002b68:	f017 fb9e 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(13), (uint8_t *)"then press the WAKE-UP button to get started", LEFT_MODE);
 8002b6c:	f017 faa4 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002b70:	88c3      	ldrh	r3, [r0, #6]
 8002b72:	4a82      	ldr	r2, [pc, #520]	; (8002d7c <OnBoardValidInit+0x2e0>)
 8002b74:	200f      	movs	r0, #15
 8002b76:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002b7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002b7e:	2303      	movs	r3, #3
 8002b80:	f017 fb92 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002b84:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002b86:	f7fe feaf 	bl	80018e8 <DISPLAY_Refresh>

  /* Wait for button input */
  while ((Test_Context_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 8002b8a:	e002      	b.n	8002b92 <OnBoardValidInit+0xf6>
 8002b8c:	f005 ffb4 	bl	8008af8 <BSP_PB_GetState>
 8002b90:	b918      	cbnz	r0, 8002b9a <OnBoardValidInit+0xfe>
 8002b92:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d0f8      	beq.n	8002b8c <OnBoardValidInit+0xf0>
  BSP_CAMERA_DeInit(0);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f006 fce8 	bl	8009570 <BSP_CAMERA_DeInit>
  sd_error = BSP_SD_Init(0);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f007 fe8b 	bl	800a8bc <BSP_SD_Init>
  if (sd_error != BSP_ERROR_NONE)
 8002ba6:	b2c0      	uxtb	r0, r0
 8002ba8:	b188      	cbz	r0, 8002bce <OnBoardValidInit+0x132>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002baa:	f017 fa85 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002bae:	88c1      	ldrh	r1, [r0, #6]
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	4a73      	ldr	r2, [pc, #460]	; (8002d80 <OnBoardValidInit+0x2e4>)
 8002bb4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002bb8:	2000      	movs	r0, #0
 8002bba:	4099      	lsls	r1, r3
 8002bbc:	f017 fb74 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002bc0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002bc2:	f7fe fe91 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002bc6:	2002      	movs	r0, #2
 8002bc8:	f005 ff12 	bl	80089f0 <BSP_LED_On>
    while (1)
 8002bcc:	e7fe      	b.n	8002bcc <OnBoardValidInit+0x130>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8002bce:	a902      	add	r1, sp, #8
 8002bd0:	486c      	ldr	r0, [pc, #432]	; (8002d84 <OnBoardValidInit+0x2e8>)
 8002bd2:	f015 f827 	bl	8017c24 <FATFS_LinkDriver>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	b118      	cbz	r0, 8002be2 <OnBoardValidInit+0x146>
    BSP_LED_On(LED_RED);
 8002bda:	2002      	movs	r0, #2
 8002bdc:	f005 ff08 	bl	80089f0 <BSP_LED_On>
    while (1);
 8002be0:	e7fe      	b.n	8002be0 <OnBoardValidInit+0x144>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8002be2:	a902      	add	r1, sp, #8
 8002be4:	4868      	ldr	r0, [pc, #416]	; (8002d88 <OnBoardValidInit+0x2ec>)
 8002be6:	f013 fb55 	bl	8016294 <f_mount>
 8002bea:	4606      	mov	r6, r0
 8002bec:	b9f0      	cbnz	r0, 8002c2c <OnBoardValidInit+0x190>
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 8002bee:	f504 7970 	add.w	r9, r4, #960	; 0x3c0
 8002bf2:	a802      	add	r0, sp, #8
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	f020 f90a 	bl	8022e0e <strcpy>
  nbr_dir = count_dir(valid_dir_path, App_Cxt_Ptr);
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	a802      	add	r0, sp, #8
 8002bfe:	f7fe ffc7 	bl	8001b90 <count_dir>
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 8002c02:	2804      	cmp	r0, #4
  nbr_dir = count_dir(valid_dir_path, App_Cxt_Ptr);
 8002c04:	4680      	mov	r8, r0
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 8002c06:	d015      	beq.n	8002c34 <OnBoardValidInit+0x198>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 8002c08:	f017 fa56 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002c0c:	88c1      	ldrh	r1, [r0, #6]
 8002c0e:	2301      	movs	r3, #1
 8002c10:	4a5e      	ldr	r2, [pc, #376]	; (8002d8c <OnBoardValidInit+0x2f0>)
 8002c12:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002c16:	4630      	mov	r0, r6
 8002c18:	4099      	lsls	r1, r3
 8002c1a:	f017 fb45 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002c1e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002c20:	f7fe fe62 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002c24:	2002      	movs	r0, #2
 8002c26:	f005 fee3 	bl	80089f0 <BSP_LED_On>
    while (1)
 8002c2a:	e7fe      	b.n	8002c2a <OnBoardValidInit+0x18e>
    BSP_LED_On(LED_RED);
 8002c2c:	2002      	movs	r0, #2
 8002c2e:	f005 fedf 	bl	80089f0 <BSP_LED_On>
    while (1);
 8002c32:	e7fe      	b.n	8002c32 <OnBoardValidInit+0x196>
  BSP_LED_On(LED_GREEN);
 8002c34:	4630      	mov	r0, r6
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002c36:	4f56      	ldr	r7, [pc, #344]	; (8002d90 <OnBoardValidInit+0x2f4>)
  BSP_LED_On(LED_GREEN);
 8002c38:	f005 feda 	bl	80089f0 <BSP_LED_On>
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002c3c:	f8df c164 	ldr.w	ip, [pc, #356]	; 8002da4 <OnBoardValidInit+0x308>
  DIR *dir = &Test_Context_Ptr->ValidationContext.dataset_dir;
 8002c40:	f504 7a92 	add.w	sl, r4, #292	; 0x124
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002c44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002c48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002c4a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8002c4e:	c707      	stmia	r7!, {r0, r1, r2}
 8002c50:	f827 3b02 	strh.w	r3, [r7], #2
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	4639      	mov	r1, r7
  write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8002c58:	220a      	movs	r2, #10
 8002c5a:	484e      	ldr	r0, [pc, #312]	; (8002d94 <OnBoardValidInit+0x2f8>)
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002c5c:	f801 391e 	strb.w	r3, [r1], #-30
  write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8002c60:	462b      	mov	r3, r5
 8002c62:	f7fe ffd9 	bl	8001c18 <write_txt>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002c66:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002c6a:	f017 fa2d 	bl	801a0c8 <UTIL_LCD_Clear>
  UTIL_LCD_SetFont(&Font20);
 8002c6e:	484a      	ldr	r0, [pc, #296]	; (8002d98 <OnBoardValidInit+0x2fc>)
 8002c70:	f017 fa1a 	bl	801a0a8 <UTIL_LCD_SetFont>
  sprintf(tmp_msg, "Found %d classes", (unsigned int)nbr_dir);
 8002c74:	4642      	mov	r2, r8
 8002c76:	4949      	ldr	r1, [pc, #292]	; (8002d9c <OnBoardValidInit+0x300>)
 8002c78:	f1a7 001e 	sub.w	r0, r7, #30
 8002c7c:	f020 f89e 	bl	8022dbc <siprintf>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8002c80:	f017 fa1a 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f1a7 021e 	sub.w	r2, r7, #30
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	88d9      	ldrh	r1, [r3, #6]
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f017 fb0a 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  f_opendir(dir, valid_dir_path);
 8002c94:	a902      	add	r1, sp, #8
 8002c96:	4650      	mov	r0, sl
 8002c98:	f014 fa14 	bl	80170c4 <f_opendir>
  res = f_readdir(dir, &Test_Context_Ptr->ValidationContext.fno);
 8002c9c:	4650      	mov	r0, sl
 8002c9e:	f504 71ac 	add.w	r1, r4, #344	; 0x158
 8002ca2:	f014 faa9 	bl	80171f8 <f_readdir>
  if (res != FR_OK)
 8002ca6:	4606      	mov	r6, r0
 8002ca8:	bbd0      	cbnz	r0, 8002d20 <OnBoardValidInit+0x284>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002caa:	f504 7ab7 	add.w	sl, r4, #366	; 0x16e
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 8002cae:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8002da8 <OnBoardValidInit+0x30c>
 8002cb2:	4650      	mov	r0, sl
 8002cb4:	f8d8 1000 	ldr.w	r1, [r8]
 8002cb8:	f7fd fb12 	bl	80002e0 <strcmp>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	b388      	cbz	r0, 8002d24 <OnBoardValidInit+0x288>
 8002cc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002cc4:	4650      	mov	r0, sl
 8002cc6:	f7fd fb0b 	bl	80002e0 <strcmp>
 8002cca:	b350      	cbz	r0, 8002d22 <OnBoardValidInit+0x286>
 8002ccc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8002cd0:	4650      	mov	r0, sl
 8002cd2:	f7fd fb05 	bl	80002e0 <strcmp>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d040      	beq.n	8002d5c <OnBoardValidInit+0x2c0>
 8002cda:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8002cde:	4650      	mov	r0, sl
 8002ce0:	f7fd fafe 	bl	80002e0 <strcmp>
 8002ce4:	b3c0      	cbz	r0, 8002d58 <OnBoardValidInit+0x2bc>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 8002cea:	4652      	mov	r2, sl
 8002cec:	492c      	ldr	r1, [pc, #176]	; (8002da0 <OnBoardValidInit+0x304>)
 8002cee:	f1a7 001e 	sub.w	r0, r7, #30
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002cf2:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 8002cf6:	f020 f861 	bl	8022dbc <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 8002cfa:	f017 f9dd 	bl	801a0b8 <UTIL_LCD_GetFont>
 8002cfe:	4601      	mov	r1, r0
 8002d00:	2301      	movs	r3, #1
 8002d02:	f1a7 021e 	sub.w	r2, r7, #30
 8002d06:	88c9      	ldrh	r1, [r1, #6]
 8002d08:	4630      	mov	r0, r6
 8002d0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002d0e:	f017 facb 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002d12:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002d14:	f7fe fde8 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002d18:	2002      	movs	r0, #2
 8002d1a:	f005 fe69 	bl	80089f0 <BSP_LED_On>
    while (1)
 8002d1e:	e7fe      	b.n	8002d1e <OnBoardValidInit+0x282>
    while (1);
 8002d20:	e7fe      	b.n	8002d20 <OnBoardValidInit+0x284>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8002d22:	2301      	movs	r3, #1
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, ""); //string "null"
 8002d24:	f504 6580 	add.w	r5, r4, #1024	; 0x400
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 8002d28:	4649      	mov	r1, r9
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002d2a:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f020 f864 	bl	8022dfc <stpcpy>
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, "/");
 8002d34:	232f      	movs	r3, #47	; 0x2f
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 8002d36:	4651      	mov	r1, sl
 8002d38:	3001      	adds	r0, #1
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, "/");
 8002d3a:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 8002d3e:	f020 f866 	bl	8022e0e <strcpy>
  res = f_opendir(&Test_Context_Ptr->ValidationContext.class_dir, Test_Context_Ptr->ValidationContext.tmp_class_path);
 8002d42:	4629      	mov	r1, r5
 8002d44:	f504 701c 	add.w	r0, r4, #624	; 0x270
 8002d48:	f014 f9bc 	bl	80170c4 <f_opendir>
  Test_Context_Ptr->ValidationContext.validation_completed = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8002d52:	b012      	add	sp, #72	; 0x48
 8002d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e7e3      	b.n	8002d24 <OnBoardValidInit+0x288>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e7e1      	b.n	8002d24 <OnBoardValidInit+0x288>
 8002d60:	08025b24 	.word	0x08025b24
 8002d64:	08025b38 	.word	0x08025b38
 8002d68:	08025b68 	.word	0x08025b68
 8002d6c:	08025b84 	.word	0x08025b84
 8002d70:	08025bb0 	.word	0x08025bb0
 8002d74:	08025bdc 	.word	0x08025bdc
 8002d78:	08025be4 	.word	0x08025be4
 8002d7c:	08025c04 	.word	0x08025c04
 8002d80:	08025a04 	.word	0x08025a04
 8002d84:	0805faa0 	.word	0x0805faa0
 8002d88:	20005280 	.word	0x20005280
 8002d8c:	08025a74 	.word	0x08025a74
 8002d90:	20005de4 	.word	0x20005de4
 8002d94:	08025c54 	.word	0x08025c54
 8002d98:	20004814 	.word	0x20004814
 8002d9c:	08025c68 	.word	0x08025c68
 8002da0:	08025c7c 	.word	0x08025c7c
 8002da4:	08025c34 	.word	0x08025c34
 8002da8:	20000004 	.word	0x20000004

08002dac <UartCmd_Upload_Dump_Whole_Data>:
{
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((*(uint8_t*)(data_buffer))== 0x00)
 8002dae:	780b      	ldrb	r3, [r1, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d04f      	beq.n	8002e54 <UartCmd_Upload_Dump_Whole_Data+0xa8>
  else if((*(uint8_t*)(data_buffer))== 0x01)
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d01d      	beq.n	8002df4 <UartCmd_Upload_Dump_Whole_Data+0x48>
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002db8:	4d45      	ldr	r5, [pc, #276]	; (8002ed0 <UartCmd_Upload_Dump_Whole_Data+0x124>)
 8002dba:	2304      	movs	r3, #4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002dbc:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	2160      	movs	r1, #96	; 0x60
 8002dc4:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002dc6:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002dc8:	f002 f8ca 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4629      	mov	r1, r5
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f00e fec1 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	d170      	bne.n	8002ebc <UartCmd_Upload_Dump_Whole_Data+0x110>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f00f f8ec 	bl	8011fb8 <HAL_UART_GetState>
 8002de0:	2820      	cmp	r0, #32
 8002de2:	d1fa      	bne.n	8002dda <UartCmd_Upload_Dump_Whole_Data+0x2e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002de4:	220a      	movs	r2, #10
 8002de6:	493b      	ldr	r1, [pc, #236]	; (8002ed4 <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002de8:	4620      	mov	r0, r4
 8002dea:	f00e ff07 	bl	8011bfc <HAL_UART_Receive_DMA>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d15d      	bne.n	8002eae <UartCmd_Upload_Dump_Whole_Data+0x102>
}
 8002df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002df4:	4d38      	ldr	r5, [pc, #224]	; (8002ed8 <UartCmd_Upload_Dump_Whole_Data+0x12c>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002df6:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	4937      	ldr	r1, [pc, #220]	; (8002edc <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002dfe:	4628      	mov	r0, r5
 8002e00:	4f37      	ldr	r7, [pc, #220]	; (8002ee0 <UartCmd_Upload_Dump_Whole_Data+0x134>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e02:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e06:	f002 f8ab 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e0e:	4629      	mov	r1, r5
 8002e10:	4620      	mov	r0, r4
 8002e12:	f00e fea1 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002e16:	b9d0      	cbnz	r0, 8002e4e <UartCmd_Upload_Dump_Whole_Data+0xa2>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f00f f8cd 	bl	8011fb8 <HAL_UART_GetState>
 8002e1e:	2820      	cmp	r0, #32
 8002e20:	d1fa      	bne.n	8002e18 <UartCmd_Upload_Dump_Whole_Data+0x6c>
    for(i=0;i<dma_xfer_num;i++)
 8002e22:	4435      	add	r5, r6
 8002e24:	42af      	cmp	r7, r5
 8002e26:	d1f0      	bne.n	8002e0a <UartCmd_Upload_Dump_Whole_Data+0x5e>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002e28:	f645 02b4 	movw	r2, #22708	; 0x58b4
 8002e2c:	492c      	ldr	r1, [pc, #176]	; (8002ee0 <UartCmd_Upload_Dump_Whole_Data+0x134>)
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f00e fe92 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d144      	bne.n	8002ec2 <UartCmd_Upload_Dump_Whole_Data+0x116>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f00f f8bd 	bl	8011fb8 <HAL_UART_GetState>
 8002e3e:	2820      	cmp	r0, #32
 8002e40:	d0d0      	beq.n	8002de4 <UartCmd_Upload_Dump_Whole_Data+0x38>
 8002e42:	4620      	mov	r0, r4
 8002e44:	f00f f8b8 	bl	8011fb8 <HAL_UART_GetState>
 8002e48:	2820      	cmp	r0, #32
 8002e4a:	d1f5      	bne.n	8002e38 <UartCmd_Upload_Dump_Whole_Data+0x8c>
 8002e4c:	e7ca      	b.n	8002de4 <UartCmd_Upload_Dump_Whole_Data+0x38>
        Error_Handler();
 8002e4e:	f002 f8f7 	bl	8005040 <Error_Handler>
 8002e52:	e7e1      	b.n	8002e18 <UartCmd_Upload_Dump_Whole_Data+0x6c>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e54:	4d23      	ldr	r5, [pc, #140]	; (8002ee4 <UartCmd_Upload_Dump_Whole_Data+0x138>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e56:	f200 540c 	addw	r4, r0, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	491f      	ldr	r1, [pc, #124]	; (8002edc <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002e5e:	4628      	mov	r0, r5
 8002e60:	4f21      	ldr	r7, [pc, #132]	; (8002ee8 <UartCmd_Upload_Dump_Whole_Data+0x13c>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e62:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e66:	f002 f87b 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e6e:	4629      	mov	r1, r5
 8002e70:	4620      	mov	r0, r4
 8002e72:	f00e fe71 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002e76:	b9f0      	cbnz	r0, 8002eb6 <UartCmd_Upload_Dump_Whole_Data+0x10a>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f00f f89d 	bl	8011fb8 <HAL_UART_GetState>
 8002e7e:	2820      	cmp	r0, #32
 8002e80:	d1fa      	bne.n	8002e78 <UartCmd_Upload_Dump_Whole_Data+0xcc>
    for(i=0;i<dma_xfer_num;i++)
 8002e82:	4435      	add	r5, r6
 8002e84:	42bd      	cmp	r5, r7
 8002e86:	d1f0      	bne.n	8002e6a <UartCmd_Upload_Dump_Whole_Data+0xbe>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002e88:	f645 02b4 	movw	r2, #22708	; 0x58b4
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <UartCmd_Upload_Dump_Whole_Data+0x13c>)
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f00e fe62 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002e94:	b9c0      	cbnz	r0, 8002ec8 <UartCmd_Upload_Dump_Whole_Data+0x11c>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e96:	4620      	mov	r0, r4
 8002e98:	f00f f88e 	bl	8011fb8 <HAL_UART_GetState>
 8002e9c:	2820      	cmp	r0, #32
 8002e9e:	d1fa      	bne.n	8002e96 <UartCmd_Upload_Dump_Whole_Data+0xea>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002ea0:	220a      	movs	r2, #10
 8002ea2:	490c      	ldr	r1, [pc, #48]	; (8002ed4 <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f00e fea9 	bl	8011bfc <HAL_UART_Receive_DMA>
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d0a1      	beq.n	8002df2 <UartCmd_Upload_Dump_Whole_Data+0x46>
}
 8002eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002eb2:	f002 b8c5 	b.w	8005040 <Error_Handler>
        Error_Handler();
 8002eb6:	f002 f8c3 	bl	8005040 <Error_Handler>
 8002eba:	e7dd      	b.n	8002e78 <UartCmd_Upload_Dump_Whole_Data+0xcc>
      Error_Handler();
 8002ebc:	f002 f8c0 	bl	8005040 <Error_Handler>
 8002ec0:	e78b      	b.n	8002dda <UartCmd_Upload_Dump_Whole_Data+0x2e>
        Error_Handler();
 8002ec2:	f002 f8bd 	bl	8005040 <Error_Handler>
 8002ec6:	e7b7      	b.n	8002e38 <UartCmd_Upload_Dump_Whole_Data+0x8c>
 8002ec8:	f002 f8ba 	bl	8005040 <Error_Handler>
 8002ecc:	e7e3      	b.n	8002e96 <UartCmd_Upload_Dump_Whole_Data+0xea>
 8002ece:	bf00      	nop
 8002ed0:	30000280 	.word	0x30000280
 8002ed4:	300002e0 	.word	0x300002e0
 8002ed8:	d0cf6400 	.word	0xd0cf6400
 8002edc:	000458c0 	.word	0x000458c0
 8002ee0:	d0d363fc 	.word	0xd0d363fc
 8002ee4:	d0cb0b40 	.word	0xd0cb0b40
 8002ee8:	d0cf0b3c 	.word	0xd0cf0b3c
 8002eec:	00000000 	.word	0x00000000

08002ef0 <TEST_Init>:
 * @param TestContext_Ptr pointer to test context
 */
static void Test_Context_Init(TestContext_TypeDef *Test_Context_Ptr)
{
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002ef0:	ed9f 7b61 	vldr	d7, [pc, #388]	; 8003078 <TEST_Init+0x188>
 * @brief Test Init
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_Init(TestContext_TypeDef *Test_Context_Ptr)
{
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002ef6:	2300      	movs	r3, #0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002ef8:	2201      	movs	r2, #1
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002efa:	f500 618a 	add.w	r1, r0, #1104	; 0x450
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002efe:	2700      	movs	r7, #0
 8002f00:	2600      	movs	r6, #0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002f02:	7102      	strb	r2, [r0, #4]
  Test_Context_Ptr->ValidationContext.nbr_tested = 1;
 8002f04:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
{
 8002f08:	4604      	mov	r4, r0
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002f0a:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
{
 8002f0e:	b091      	sub	sp, #68	; 0x44
  Test_Context_Ptr->CaptureContext.capture_file_format=DATA_FORMAT_RAW;
 8002f10:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
  Test_Context_Ptr->CaptureContext.capture_frame_count=0;
 8002f14:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  Test_Context_Ptr->ValidationContext.validation_completed=0;
 8002f18:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002f1c:	e9c0 6744 	strd	r6, r7, [r0, #272]	; 0x110
  Test_Context_Ptr->ValidationContext.avg_loss = 0.0;
 8002f20:	e9c0 6746 	strd	r6, r7, [r0, #280]	; 0x118
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002f24:	ed80 7b02 	vstr	d7, [r0, #8]
  Test_Context_Ptr->CaptureContext.capture_state=0;
 8002f28:	ed80 7b30 	vstr	d7, [r0, #192]	; 0xc0
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002f2c:	ed01 7b02 	vstr	d7, [r1, #-8]
 8002f30:	ed81 7b00 	vstr	d7, [r1]
 8002f34:	f500 618c 	add.w	r1, r0, #1120	; 0x460
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002f38:	f204 570c 	addw	r7, r4, #1292	; 0x50c
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002f3c:	ed01 7b02 	vstr	d7, [r1, #-8]
 8002f40:	ed81 7b00 	vstr	d7, [r1]
 8002f44:	f500 618e 	add.w	r1, r0, #1136	; 0x470
 8002f48:	ed01 7b02 	vstr	d7, [r1, #-8]
 8002f4c:	ed81 7b00 	vstr	d7, [r1]
 8002f50:	f500 6190 	add.w	r1, r0, #1152	; 0x480
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002f54:	484a      	ldr	r0, [pc, #296]	; (8003080 <TEST_Init+0x190>)
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002f56:	ed01 7b02 	vstr	d7, [r1, #-8]
 8002f5a:	ed81 7b00 	vstr	d7, [r1]
  Test_Context_Ptr->UartContext.uart_host_requested_mode = NOMINAL;
 8002f5e:	f884 24f4 	strb.w	r2, [r4, #1268]	; 0x4f4
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002f62:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  Test_Context_Ptr->UartContext.UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002f66:	220c      	movs	r2, #12
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002f68:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002f6c:	4638      	mov	r0, r7
  Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;
 8002f6e:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002f72:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
  Test_Context_Ptr->NonReg_FirstRun=0;
 8002f76:	f8c4 35d4 	str.w	r3, [r4, #1492]	; 0x5d4
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002f7a:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
  Test_Context_Ptr->UartContext.UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002f7e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
  Test_Context_Ptr->UartContext.UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002f82:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
  Test_Context_Ptr->UartContext.UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002f86:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
  Test_Context_Ptr->UartContext.UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002f8a:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
  Test_Context_Ptr->UartContext.UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002f8e:	f8c4 2520 	str.w	r2, [r4, #1312]	; 0x520
  Test_Context_Ptr->UartContext.UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f92:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
  Test_Context_Ptr->UartContext.UartHandle.Init.ClockPrescaler  = UART_PRESCALER_DIV1;
 8002f96:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
  Test_Context_Ptr->UartContext.UartHandle.Init.OneBitSampling  = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f9a:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002f9e:	f00f fb6b 	bl	8012678 <HAL_UART_Init>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d15f      	bne.n	8003066 <TEST_Init+0x176>
  char alive_msg[64]="Board ON & UART link OK \n";
 8002fa6:	4e37      	ldr	r6, [pc, #220]	; (8003084 <TEST_Init+0x194>)
 8002fa8:	46ec      	mov	ip, sp
  strcpy((char*)aTxBuffer, alive_msg);
 8002faa:	4d37      	ldr	r5, [pc, #220]	; (8003088 <TEST_Init+0x198>)
  char alive_msg[64]="Board ON & UART link OK \n";
 8002fac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002fb2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002fb6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8002fba:	2100      	movs	r1, #0
 8002fbc:	f8ac 2000 	strh.w	r2, [ip]
 8002fc0:	f10d 001a 	add.w	r0, sp, #26
 8002fc4:	2226      	movs	r2, #38	; 0x26
 8002fc6:	f01f f989 	bl	80222dc <memset>
  strcpy((char*)aTxBuffer, alive_msg);
 8002fca:	46ec      	mov	ip, sp
 8002fcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002fd6:	c503      	stmia	r5!, {r0, r1}
 8002fd8:	4628      	mov	r0, r5
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002fda:	2160      	movs	r1, #96	; 0x60
  strcpy((char*)aTxBuffer, alive_msg);
 8002fdc:	f820 2918 	strh.w	r2, [r0], #-24
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f001 ffbd 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002fe6:	2219      	movs	r2, #25
 8002fe8:	f1a5 0118 	sub.w	r1, r5, #24
 8002fec:	4638      	mov	r0, r7
 8002fee:	f00e fdb3 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d13d      	bne.n	8003072 <TEST_Init+0x182>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	f00e ffde 	bl	8011fb8 <HAL_UART_GetState>
 8002ffc:	2820      	cmp	r0, #32
 8002ffe:	d1fa      	bne.n	8002ff6 <TEST_Init+0x106>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8003000:	220a      	movs	r2, #10
 8003002:	4922      	ldr	r1, [pc, #136]	; (800308c <TEST_Init+0x19c>)
 8003004:	4638      	mov	r0, r7
 8003006:	f00e fdf9 	bl	8011bfc <HAL_UART_Receive_DMA>
 800300a:	bb78      	cbnz	r0, 800306c <TEST_Init+0x17c>
  Test_ComIf_Init(Test_Context_Ptr);
  
  /*Compute the total char size for the array Test_buffer_names[]*/
  for (int i=0; i<APP_BUFF_NUM; i++)
  {
    Test_Context_Ptr->Total_Char_Name_Size+=strlen(Test_buffer_names[i]);
 800300c:	4820      	ldr	r0, [pc, #128]	; (8003090 <TEST_Init+0x1a0>)
 800300e:	f7fd f971 	bl	80002f4 <strlen>
 8003012:	f8d4 55d8 	ldr.w	r5, [r4, #1496]	; 0x5d8
 8003016:	4607      	mov	r7, r0
 8003018:	481e      	ldr	r0, [pc, #120]	; (8003094 <TEST_Init+0x1a4>)
 800301a:	443d      	add	r5, r7
 800301c:	f8c4 55d8 	str.w	r5, [r4, #1496]	; 0x5d8
 8003020:	f7fd f968 	bl	80002f4 <strlen>
 8003024:	4607      	mov	r7, r0
 8003026:	481c      	ldr	r0, [pc, #112]	; (8003098 <TEST_Init+0x1a8>)
 8003028:	442f      	add	r7, r5
 800302a:	f8c4 75d8 	str.w	r7, [r4, #1496]	; 0x5d8
 800302e:	f7fd f961 	bl	80002f4 <strlen>
 8003032:	4605      	mov	r5, r0
 8003034:	4819      	ldr	r0, [pc, #100]	; (800309c <TEST_Init+0x1ac>)
 8003036:	442f      	add	r7, r5
 8003038:	f8c4 75d8 	str.w	r7, [r4, #1496]	; 0x5d8
 800303c:	f7fd f95a 	bl	80002f4 <strlen>
 8003040:	4605      	mov	r5, r0
 8003042:	4817      	ldr	r0, [pc, #92]	; (80030a0 <TEST_Init+0x1b0>)
 8003044:	443d      	add	r5, r7
 8003046:	f8c4 55d8 	str.w	r5, [r4, #1496]	; 0x5d8
 800304a:	f7fd f953 	bl	80002f4 <strlen>
 800304e:	4603      	mov	r3, r0
  }

  /* Init IPL heap memory for image read/write operations */
  STM32Ipl_InitLib((void *) &ipl_heap, IPL_MEMORY_SIZE);
 8003050:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003054:	4813      	ldr	r0, [pc, #76]	; (80030a4 <TEST_Init+0x1b4>)
    Test_Context_Ptr->Total_Char_Name_Size+=strlen(Test_buffer_names[i]);
 8003056:	441d      	add	r5, r3
 8003058:	f8c4 55d8 	str.w	r5, [r4, #1496]	; 0x5d8
}
 800305c:	b011      	add	sp, #68	; 0x44
 800305e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  STM32Ipl_InitLib((void *) &ipl_heap, IPL_MEMORY_SIZE);
 8003062:	f014 bf11 	b.w	8017e88 <STM32Ipl_InitLib>
    Error_Handler();
 8003066:	f001 ffeb 	bl	8005040 <Error_Handler>
 800306a:	e79c      	b.n	8002fa6 <TEST_Init+0xb6>
    Error_Handler();
 800306c:	f001 ffe8 	bl	8005040 <Error_Handler>
 8003070:	e7cc      	b.n	800300c <TEST_Init+0x11c>
      Error_Handler();
 8003072:	f001 ffe5 	bl	8005040 <Error_Handler>
 8003076:	e7be      	b.n	8002ff6 <TEST_Init+0x106>
	...
 8003080:	40011000 	.word	0x40011000
 8003084:	08025760 	.word	0x08025760
 8003088:	30000280 	.word	0x30000280
 800308c:	300002e0 	.word	0x300002e0
 8003090:	2000001c 	.word	0x2000001c
 8003094:	2000003c 	.word	0x2000003c
 8003098:	2000005c 	.word	0x2000005c
 800309c:	2000007c 	.word	0x2000007c
 80030a0:	2000009c 	.word	0x2000009c
 80030a4:	d0000000 	.word	0xd0000000

080030a8 <TEST_CmdIf_Check>:
 * @brief Check UART status for any received frame
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_CmdIf_Check(TestContext_TypeDef *Test_Context_Ptr)
{
 80030a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 80030ac:	f200 550c 	addw	r5, r0, #1292	; 0x50c
{
 80030b0:	4604      	mov	r4, r0
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 80030b2:	4628      	mov	r0, r5
 80030b4:	f00e ff80 	bl	8011fb8 <HAL_UART_GetState>
 80030b8:	2820      	cmp	r0, #32
 80030ba:	d001      	beq.n	80030c0 <TEST_CmdIf_Check+0x18>

      /**Configure the UART in reception mode for receiving subsequent command from Host**/
      Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
    }
  }
}
 80030bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 80030c0:	f8d4 64f0 	ldr.w	r6, [r4, #1264]	; 0x4f0
 80030c4:	2e00      	cmp	r6, #0
 80030c6:	d1f9      	bne.n	80030bc <TEST_CmdIf_Check+0x14>
    UTILS_DCache_Coherency_Maintenance((void *)aRxBuffer, RX_BUFFER_SIZE, INVALIDATE);
 80030c8:	4f26      	ldr	r7, [pc, #152]	; (8003164 <TEST_CmdIf_Check+0xbc>)
 80030ca:	4601      	mov	r1, r0
 80030cc:	2201      	movs	r2, #1
 80030ce:	4638      	mov	r0, r7
 80030d0:	f001 ff46 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(aRxBuffer[0]< UART_CMD_NUMBER)
 80030d4:	783b      	ldrb	r3, [r7, #0]
 80030d6:	2b18      	cmp	r3, #24
 80030d8:	d81f      	bhi.n	800311a <TEST_CmdIf_Check+0x72>
      *(aTxBuffer) = CMD_ACK_EVT;
 80030da:	4823      	ldr	r0, [pc, #140]	; (8003168 <TEST_CmdIf_Check+0xc0>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80030dc:	2202      	movs	r2, #2
 80030de:	2160      	movs	r1, #96	; 0x60
      *(aTxBuffer) = CMD_ACK_EVT;
 80030e0:	7006      	strb	r6, [r0, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80030e2:	f001 ff3d 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80030e6:	4820      	ldr	r0, [pc, #128]	; (8003168 <TEST_CmdIf_Check+0xc0>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	4601      	mov	r1, r0
 80030ec:	4628      	mov	r0, r5
 80030ee:	f00e fd33 	bl	8011b58 <HAL_UART_Transmit_DMA>
 80030f2:	bb98      	cbnz	r0, 800315c <TEST_CmdIf_Check+0xb4>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80030f4:	4628      	mov	r0, r5
 80030f6:	f00e ff5f 	bl	8011fb8 <HAL_UART_GetState>
 80030fa:	2820      	cmp	r0, #32
 80030fc:	d1fa      	bne.n	80030f4 <TEST_CmdIf_Check+0x4c>
      HAL_Delay(500);
 80030fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003102:	f007 fd21 	bl	800ab48 <HAL_Delay>
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8003106:	783d      	ldrb	r5, [r7, #0]
 8003108:	4b18      	ldr	r3, [pc, #96]	; (800316c <TEST_CmdIf_Check+0xc4>)
 800310a:	4620      	mov	r0, r4
 800310c:	2200      	movs	r2, #0
 800310e:	4918      	ldr	r1, [pc, #96]	; (8003170 <TEST_CmdIf_Check+0xc8>)
 8003110:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
 8003114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8003118:	4718      	bx	r3
      *(aTxBuffer) = CMD_NACK_EVT;
 800311a:	4c13      	ldr	r4, [pc, #76]	; (8003168 <TEST_CmdIf_Check+0xc0>)
 800311c:	2601      	movs	r6, #1
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800311e:	2202      	movs	r2, #2
 8003120:	2160      	movs	r1, #96	; 0x60
 8003122:	4620      	mov	r0, r4
      *(aTxBuffer) = CMD_NACK_EVT;
 8003124:	7026      	strb	r6, [r4, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003126:	f001 ff1b 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800312a:	4632      	mov	r2, r6
 800312c:	4621      	mov	r1, r4
 800312e:	4628      	mov	r0, r5
 8003130:	f00e fd12 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8003134:	b978      	cbnz	r0, 8003156 <TEST_CmdIf_Check+0xae>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003136:	4628      	mov	r0, r5
 8003138:	f00e ff3e 	bl	8011fb8 <HAL_UART_GetState>
 800313c:	2820      	cmp	r0, #32
 800313e:	d1fa      	bne.n	8003136 <TEST_CmdIf_Check+0x8e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8003140:	220a      	movs	r2, #10
 8003142:	4908      	ldr	r1, [pc, #32]	; (8003164 <TEST_CmdIf_Check+0xbc>)
 8003144:	4628      	mov	r0, r5
 8003146:	f00e fd59 	bl	8011bfc <HAL_UART_Receive_DMA>
 800314a:	2800      	cmp	r0, #0
 800314c:	d0b6      	beq.n	80030bc <TEST_CmdIf_Check+0x14>
}
 800314e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Error_Handler();
 8003152:	f001 bf75 	b.w	8005040 <Error_Handler>
      Error_Handler();
 8003156:	f001 ff73 	bl	8005040 <Error_Handler>
 800315a:	e7ec      	b.n	8003136 <TEST_CmdIf_Check+0x8e>
 800315c:	f001 ff70 	bl	8005040 <Error_Handler>
 8003160:	e7c8      	b.n	80030f4 <TEST_CmdIf_Check+0x4c>
 8003162:	bf00      	nop
 8003164:	300002e0 	.word	0x300002e0
 8003168:	30000280 	.word	0x30000280
 800316c:	08025f84 	.word	0x08025f84
 8003170:	300002e1 	.word	0x300002e1

08003174 <TEST_MainMenu>:
 *        - Camera Capture
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_MainMenu(TestContext_TypeDef *Test_Context_Ptr)
{
 8003174:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8003176:	f04f 35ff 	mov.w	r5, #4294967295
{
 800317a:	b082      	sub	sp, #8
 800317c:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800317e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8003182:	f8d4 65d0 	ldr.w	r6, [r4, #1488]	; 0x5d0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003186:	f016 ff9f 	bl	801a0c8 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800318a:	2332      	movs	r3, #50	; 0x32
 800318c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003190:	210a      	movs	r1, #10
 8003192:	20c8      	movs	r0, #200	; 0xc8
 8003194:	9500      	str	r5, [sp, #0]
 8003196:	f017 f969 	bl	801a46c <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Operating mode", CENTER_MODE);
 800319a:	f016 ff8d 	bl	801a0b8 <UTIL_LCD_GetFont>
 800319e:	2301      	movs	r3, #1
 80031a0:	88c1      	ldrh	r1, [r0, #6]
 80031a2:	2000      	movs	r0, #0
 80031a4:	4a6f      	ldr	r2, [pc, #444]	; (8003364 <TEST_MainMenu+0x1f0>)
 80031a6:	f017 f87f 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 80031aa:	f016 ff85 	bl	801a0b8 <UTIL_LCD_GetFont>
 80031ae:	88c1      	ldrh	r1, [r0, #6]
 80031b0:	2301      	movs	r3, #1
 80031b2:	4a6d      	ldr	r2, [pc, #436]	; (8003368 <TEST_MainMenu+0x1f4>)
 80031b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80031b8:	2000      	movs	r0, #0
 80031ba:	f017 f875 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select an operating mode", CENTER_MODE);
 80031be:	f016 ff7b 	bl	801a0b8 <UTIL_LCD_GetFont>
 80031c2:	88c1      	ldrh	r1, [r0, #6]
 80031c4:	2301      	movs	r3, #1
 80031c6:	4a69      	ldr	r2, [pc, #420]	; (800336c <TEST_MainMenu+0x1f8>)
 80031c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80031cc:	2000      	movs	r0, #0
 80031ce:	4099      	lsls	r1, r3
 80031d0:	f017 f86a 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    uint16_t y;
  };
  const struct point_t pt_center = {.x = 400, .y = 350}; /* x,y coordinates */
  const uint16_t pt_offset = 50;                         /* pixels offset from the center (wideness of the square) */

  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 80031d4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80031d8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80031dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80031e0:	4608      	mov	r0, r1
 80031e2:	9500      	str	r5, [sp, #0]
 80031e4:	f017 f8b4 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80031e8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80031ec:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80031f0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80031f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80031f8:	9500      	str	r5, [sp, #0]
 80031fa:	f017 f8a9 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 80031fe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003202:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003206:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800320a:	461a      	mov	r2, r3
 800320c:	9500      	str	r5, [sp, #0]
 800320e:	f017 f89f 	bl	801a350 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8003212:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003216:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800321a:	9500      	str	r5, [sp, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	4608      	mov	r0, r1
 8003220:	f017 f896 	bl	801a350 <UTIL_LCD_DrawLine>

  const char *appli_names[] = {"Nominal Run", "Frame Capture", "OnBoard Validation",
                                   "Memory Dump"};

  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8003224:	f016 ff48 	bl	801a0b8 <UTIL_LCD_GetFont>
 8003228:	2301      	movs	r3, #1
 800322a:	88c1      	ldrh	r1, [r0, #6]
 800322c:	2000      	movs	r0, #0
 800322e:	4a50      	ldr	r2, [pc, #320]	; (8003370 <TEST_MainMenu+0x1fc>)
 8003230:	4099      	lsls	r1, r3
 8003232:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8003236:	f017 f837 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 800323a:	f016 ff3d 	bl	801a0b8 <UTIL_LCD_GetFont>
 800323e:	88c1      	ldrh	r1, [r0, #6]
 8003240:	2303      	movs	r3, #3
 8003242:	4a4c      	ldr	r2, [pc, #304]	; (8003374 <TEST_MainMenu+0x200>)
 8003244:	1049      	asrs	r1, r1, #1
 8003246:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800324a:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 800324e:	f017 f82b 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[2], CENTER_MODE);//DOWN
 8003252:	f016 ff31 	bl	801a0b8 <UTIL_LCD_GetFont>
 8003256:	88c1      	ldrh	r1, [r0, #6]
 8003258:	2301      	movs	r3, #1
 800325a:	4a47      	ldr	r2, [pc, #284]	; (8003378 <TEST_MainMenu+0x204>)
 800325c:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8003260:	2000      	movs	r0, #0
 8003262:	f017 f821 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(150, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[3], LEFT_MODE);//LEFT
 8003266:	f016 ff27 	bl	801a0b8 <UTIL_LCD_GetFont>
 800326a:	88c1      	ldrh	r1, [r0, #6]
 800326c:	2303      	movs	r3, #3
 800326e:	4a43      	ldr	r2, [pc, #268]	; (800337c <TEST_MainMenu+0x208>)
 8003270:	1049      	asrs	r1, r1, #1
 8003272:	2096      	movs	r0, #150	; 0x96
 8003274:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8003278:	f017 f816 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800327c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800327e:	f7fe fb33 	bl	80018e8 <DISPLAY_Refresh>

  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8003282:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 8003286:	b143      	cbz	r3, 800329a <TEST_MainMenu+0x126>
  {
    switch (Test_Context_Ptr->UartContext.uart_host_requested_mode)
 8003288:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800328c:	442b      	add	r3, r5
 800328e:	2b03      	cmp	r3, #3
 8003290:	d827      	bhi.n	80032e2 <TEST_MainMenu+0x16e>
 8003292:	e8df f003 	tbb	[pc, r3]
 8003296:	2f21      	.short	0x2f21
 8003298:	2839      	.short	0x2839
  else
  {
    JOYPin_TypeDef joy_state = JOY_NONE;
    while (joy_state == JOY_NONE)
    {
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 800329a:	2100      	movs	r1, #0
 800329c:	4608      	mov	r0, r1
 800329e:	f005 fcd3 	bl	8008c48 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE)
 80032a2:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 80032a6:	d0f8      	beq.n	800329a <TEST_MainMenu+0x126>
    }

    switch (joy_state)
 80032a8:	3b02      	subs	r3, #2
 80032aa:	2b0e      	cmp	r3, #14
 80032ac:	d80e      	bhi.n	80032cc <TEST_MainMenu+0x158>
 80032ae:	e8df f003 	tbb	[pc, r3]
 80032b2:	0d43      	.short	0x0d43
 80032b4:	0d0d0d37 	.word	0x0d0d0d37
 80032b8:	0d0d0d08 	.word	0x0d0d0d08
 80032bc:	0d0d0d0d 	.word	0x0d0d0d0d
 80032c0:	51          	.byte	0x51
 80032c1:	00          	.byte	0x00
    {
    case JOY_RIGHT:
      FrameCaptureInit(Test_Context_Ptr);
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7ff fa90 	bl	80027e8 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 80032c8:	2304      	movs	r3, #4
 80032ca:	7033      	strb	r3, [r6, #0]
    default:
      break;
    };

    //Tempo joystick
    HAL_Delay(200);
 80032cc:	20c8      	movs	r0, #200	; 0xc8
  }
}
 80032ce:	b002      	add	sp, #8
 80032d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80032d4:	f007 bc38 	b.w	800ab48 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80032d8:	2201      	movs	r2, #1
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 80032da:	2300      	movs	r3, #0
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80032dc:	7032      	strb	r2, [r6, #0]
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 80032de:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
}
 80032e2:	b002      	add	sp, #8
 80032e4:	bd70      	pop	{r4, r5, r6, pc}
      FrameCaptureInit(Test_Context_Ptr);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff fa7e 	bl	80027e8 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 80032ec:	2304      	movs	r3, #4
 80032ee:	7033      	strb	r3, [r6, #0]
}
 80032f0:	b002      	add	sp, #8
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
      OnBoardValidInit(Test_Context_Ptr);
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7ff fbd1 	bl	8002a9c <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 80032fa:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80032fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80032fe:	2201      	movs	r2, #1
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003300:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003302:	751a      	strb	r2, [r3, #20]
}
 8003304:	b002      	add	sp, #8
 8003306:	bd70      	pop	{r4, r5, r6, pc}
      MemoryDumpInit(Test_Context_Ptr);
 8003308:	4620      	mov	r0, r4
 800330a:	f7ff f8ad 	bl	8002468 <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 800330e:	2303      	movs	r3, #3
 8003310:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8003312:	7923      	ldrb	r3, [r4, #4]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d1e4      	bne.n	80032e2 <TEST_MainMenu+0x16e>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003318:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800331a:	2201      	movs	r2, #1
 800331c:	751a      	strb	r2, [r3, #20]
 800331e:	e7e0      	b.n	80032e2 <TEST_MainMenu+0x16e>
      MemoryDumpInit(Test_Context_Ptr);
 8003320:	4620      	mov	r0, r4
 8003322:	f7ff f8a1 	bl	8002468 <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8003326:	2303      	movs	r3, #3
 8003328:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 800332a:	7923      	ldrb	r3, [r4, #4]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d1cd      	bne.n	80032cc <TEST_MainMenu+0x158>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003330:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003332:	2201      	movs	r2, #1
 8003334:	751a      	strb	r2, [r3, #20]
 8003336:	e7c9      	b.n	80032cc <TEST_MainMenu+0x158>
      OnBoardValidInit(Test_Context_Ptr);
 8003338:	4620      	mov	r0, r4
 800333a:	f7ff fbaf 	bl	8002a9c <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 800333e:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003340:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003342:	2201      	movs	r2, #1
    HAL_Delay(200);
 8003344:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003346:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003348:	751a      	strb	r2, [r3, #20]
}
 800334a:	b002      	add	sp, #8
 800334c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8003350:	f007 bbfa 	b.w	800ab48 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003354:	2301      	movs	r3, #1
    HAL_Delay(200);
 8003356:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003358:	7033      	strb	r3, [r6, #0]
}
 800335a:	b002      	add	sp, #8
 800335c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8003360:	f007 bbf2 	b.w	800ab48 <HAL_Delay>
 8003364:	08025c9c 	.word	0x08025c9c
 8003368:	080259c0 	.word	0x080259c0
 800336c:	08025cac 	.word	0x08025cac
 8003370:	080258d0 	.word	0x080258d0
 8003374:	080258dc 	.word	0x080258dc
 8003378:	080258ec 	.word	0x080258ec
 800337c:	08025900 	.word	0x08025900

08003380 <TEST_GetNextDumpInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextDumpInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8003380:	b5f0      	push	{r4, r5, r6, r7, lr}
  image_t tmp_img;
  image_t dum_img;
#if CAMERA_CAPTURE_RES == VGA_640_480_RES
  char  class_path[64]=  "/dump_src_image_vga";
#elif CAMERA_CAPTURE_RES == QVGA_320_240_RES
  char class_path[64]=  "/dump_src_image_qvga";
 8003382:	4c2b      	ldr	r4, [pc, #172]	; (8003430 <TEST_GetNextDumpInput+0xb0>)
{
 8003384:	b0a7      	sub	sp, #156	; 0x9c
 8003386:	4605      	mov	r5, r0
 8003388:	460e      	mov	r6, r1
  char class_path[64]=  "/dump_src_image_qvga";
 800338a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800338e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003390:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003394:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003398:	222b      	movs	r2, #43	; 0x2b
 800339a:	f84c 0b04 	str.w	r0, [ip], #4
 800339e:	f10d 006d 	add.w	r0, sp, #109	; 0x6d
 80033a2:	f88c 1000 	strb.w	r1, [ip]
 80033a6:	2100      	movs	r1, #0
 80033a8:	f01e ff98 	bl	80222dc <memset>
#endif
  FRESULT res;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;

  res = f_opendir(&class_dir, class_path);
 80033ac:	a916      	add	r1, sp, #88	; 0x58
 80033ae:	a809      	add	r0, sp, #36	; 0x24
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80033b0:	f8d5 45d0 	ldr.w	r4, [r5, #1488]	; 0x5d0
  res = f_opendir(&class_dir, class_path);
 80033b4:	f013 fe86 	bl	80170c4 <f_opendir>
  if (res != FR_OK)
 80033b8:	b100      	cbz	r0, 80033bc <TEST_GetNextDumpInput+0x3c>
  {
    while (1);
 80033ba:	e7fe      	b.n	80033ba <TEST_GetNextDumpInput+0x3a>
  }

  /* Find next image file in current class directory */
  res = f_readdir(&class_dir, &img_fno);
 80033bc:	4d1d      	ldr	r5, [pc, #116]	; (8003434 <TEST_GetNextDumpInput+0xb4>)
 80033be:	a809      	add	r0, sp, #36	; 0x24
 80033c0:	4629      	mov	r1, r5
 80033c2:	f013 ff19 	bl	80171f8 <f_readdir>
  if ((res != FR_OK) || (img_fno.fname[0] == 0) || (img_fno.fattrib & AM_DIR))
 80033c6:	7dab      	ldrb	r3, [r5, #22]
 80033c8:	b903      	cbnz	r3, 80033cc <TEST_GetNextDumpInput+0x4c>
  {
    while (1); /* error: end of dir or not a file */
 80033ca:	e7fe      	b.n	80033ca <TEST_GetNextDumpInput+0x4a>
  if ((res != FR_OK) || (img_fno.fname[0] == 0) || (img_fno.fattrib & AM_DIR))
 80033cc:	7a2b      	ldrb	r3, [r5, #8]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	4318      	orrs	r0, r3
 80033d4:	b2c0      	uxtb	r0, r0
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d1f7      	bne.n	80033ca <TEST_GetNextDumpInput+0x4a>
  }

  strcpy(tmp_msg, class_path);
 80033da:	4f17      	ldr	r7, [pc, #92]	; (8003438 <TEST_GetNextDumpInput+0xb8>)
 80033dc:	a916      	add	r1, sp, #88	; 0x58
 80033de:	4638      	mov	r0, r7
 80033e0:	f01f fd0c 	bl	8022dfc <stpcpy>
  strcat(tmp_msg, "/");
 80033e4:	232f      	movs	r3, #47	; 0x2f
  strcat(tmp_msg, img_fno.fname);
 80033e6:	f105 0116 	add.w	r1, r5, #22
 80033ea:	3001      	adds	r0, #1
  strcat(tmp_msg, "/");
 80033ec:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(tmp_msg, img_fno.fname);
 80033f0:	f01f fd0d 	bl	8022e0e <strcpy>

  /* Read the image to DestBuffPtr */
  if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 80033f4:	4639      	mov	r1, r7
 80033f6:	a801      	add	r0, sp, #4
 80033f8:	f015 f8e2 	bl	80185c0 <STM32Ipl_ReadImage>
 80033fc:	b100      	cbz	r0, 8003400 <TEST_GetNextDumpInput+0x80>
  {
    while(1);
 80033fe:	e7fe      	b.n	80033fe <TEST_GetNextDumpInput+0x7e>
  }
  dum_img.data = DestBuffPtr;
 8003400:	9b02      	ldr	r3, [sp, #8]
  dum_img.w = tmp_img.w;
  dum_img.h = tmp_img.h;
  dum_img.bpp = tmp_img.bpp;
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 8003402:	a905      	add	r1, sp, #20
 8003404:	a801      	add	r0, sp, #4
  dum_img.data = DestBuffPtr;
 8003406:	9608      	str	r6, [sp, #32]
  dum_img.w = tmp_img.w;
 8003408:	9306      	str	r3, [sp, #24]
 800340a:	9b03      	ldr	r3, [sp, #12]
 800340c:	9307      	str	r3, [sp, #28]
 800340e:	9b01      	ldr	r3, [sp, #4]
 8003410:	9305      	str	r3, [sp, #20]
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 8003412:	f014 fdab 	bl	8017f6c <STM32Ipl_CopyData>
 8003416:	b100      	cbz	r0, 800341a <TEST_GetNextDumpInput+0x9a>
  {
    while (1); // Invalid dim or format
 8003418:	e7fe      	b.n	8003418 <TEST_GetNextDumpInput+0x98>
  }
  STM32Ipl_ReleaseData(&tmp_img);
 800341a:	a801      	add	r0, sp, #4
 800341c:	f014 fd44 	bl	8017ea8 <STM32Ipl_ReleaseData>

  f_closedir(&class_dir);
 8003420:	a809      	add	r0, sp, #36	; 0x24
 8003422:	f013 feb5 	bl	8017190 <f_closedir>

  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 8003426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003428:	2201      	movs	r2, #1
 800342a:	751a      	strb	r2, [r3, #20]
}
 800342c:	b027      	add	sp, #156	; 0x9c
 800342e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003430:	08025720 	.word	0x08025720
 8003434:	20005ccc 	.word	0x20005ccc
 8003438:	20005de4 	.word	0x20005de4
 800343c:	00000000 	.word	0x00000000

08003440 <TEST_GetNextValidationInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextValidationInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8003440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
#endif /* OBJECTDETECT */

  /* Get next image in this directory (i.e class) */
  dir = &TestContext_Ptr->ValidationContext.class_dir;
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 8003444:	f500 7a29 	add.w	sl, r0, #676	; 0x2a4
  dir = &TestContext_Ptr->ValidationContext.class_dir;
 8003448:	f500 791c 	add.w	r9, r0, #624	; 0x270
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800344c:	f8d0 35d0 	ldr.w	r3, [r0, #1488]	; 0x5d0
{
 8003450:	4604      	mov	r4, r0
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 8003452:	4fca      	ldr	r7, [pc, #808]	; (800377c <TEST_GetNextValidationInput+0x33c>)
  res = f_readdir(dir, fno); /* Read a directory item */
 8003454:	4648      	mov	r0, r9
{
 8003456:	ed2d 8b10 	vpush	{d8-d15}
 800345a:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 800345e:	f8c7 a000 	str.w	sl, [r7]
{
 8003462:	9109      	str	r1, [sp, #36]	; 0x24
  res = f_readdir(dir, fno); /* Read a directory item */
 8003464:	4651      	mov	r1, sl
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003466:	9308      	str	r3, [sp, #32]
  res = f_readdir(dir, fno); /* Read a directory item */
 8003468:	f013 fec6 	bl	80171f8 <f_readdir>
  if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 800346c:	b920      	cbnz	r0, 8003478 <TEST_GetNextValidationInput+0x38>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	7d9a      	ldrb	r2, [r3, #22]
 8003472:	2a00      	cmp	r2, #0
 8003474:	f040 810d 	bne.w	8003692 <TEST_GetNextValidationInput+0x252>

      TestContext_Ptr->ValidationContext.validation_completed =1;
#else   
  FIND_NEXT_DIR:
    /* Get into next directory in "/onboard_valid_dataset" directory */
    dir = &TestContext_Ptr->ValidationContext.dataset_dir;
 8003478:	f504 7392 	add.w	r3, r4, #292	; 0x124
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 800347c:	4648      	mov	r0, r9
    fno = &TestContext_Ptr->ValidationContext.fno;
 800347e:	f504 7bac 	add.w	fp, r4, #344	; 0x158
 8003482:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8003794 <TEST_GetNextValidationInput+0x354>
    dir = &TestContext_Ptr->ValidationContext.dataset_dir;
 8003486:	ee08 3a10 	vmov	s16, r3
    res = f_readdir(dir, fno);
    if ((res == FR_OK) && (fno->fname[0] != 0) && (fno->fattrib & AM_DIR)) /* If directory */
    {
      /* Find corresponding class index */
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 800348a:	f504 75b7 	add.w	r5, r4, #366	; 0x16e
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 800348e:	f013 fe7f 	bl	8017190 <f_closedir>
    res = f_readdir(dir, fno);
 8003492:	4659      	mov	r1, fp
 8003494:	ee18 0a10 	vmov	r0, s16
    fno = &TestContext_Ptr->ValidationContext.fno;
 8003498:	f8c7 b000 	str.w	fp, [r7]
    res = f_readdir(dir, fno);
 800349c:	f013 feac 	bl	80171f8 <f_readdir>
    if ((res == FR_OK) && (fno->fname[0] != 0) && (fno->fattrib & AM_DIR)) /* If directory */
 80034a0:	4606      	mov	r6, r0
 80034a2:	2800      	cmp	r0, #0
 80034a4:	f040 8084 	bne.w	80035b0 <TEST_GetNextValidationInput+0x170>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	7d9a      	ldrb	r2, [r3, #22]
 80034ac:	2a00      	cmp	r2, #0
 80034ae:	d07f      	beq.n	80035b0 <TEST_GetNextValidationInput+0x170>
 80034b0:	7a1b      	ldrb	r3, [r3, #8]
 80034b2:	06da      	lsls	r2, r3, #27
 80034b4:	d57c      	bpl.n	80035b0 <TEST_GetNextValidationInput+0x170>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 80034b6:	f8d8 1000 	ldr.w	r1, [r8]
 80034ba:	4628      	mov	r0, r5
 80034bc:	f7fc ff10 	bl	80002e0 <strcmp>
 80034c0:	b390      	cbz	r0, 8003528 <TEST_GetNextValidationInput+0xe8>
 80034c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80034c6:	4628      	mov	r0, r5
 80034c8:	f7fc ff0a 	bl	80002e0 <strcmp>
 80034cc:	b358      	cbz	r0, 8003526 <TEST_GetNextValidationInput+0xe6>
 80034ce:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80034d2:	4628      	mov	r0, r5
 80034d4:	f7fc ff04 	bl	80002e0 <strcmp>
 80034d8:	2800      	cmp	r0, #0
 80034da:	f000 80fb 	beq.w	80036d4 <TEST_GetNextValidationInput+0x294>
 80034de:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80034e2:	4628      	mov	r0, r5
 80034e4:	f7fc fefc 	bl	80002e0 <strcmp>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	f000 80f5 	beq.w	80036d8 <TEST_GetNextValidationInput+0x298>
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295

      if(TestContext_Ptr->ValidationContext.class_index == -1)
      { /* Class index was not found */
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 80034f2:	462a      	mov	r2, r5
 80034f4:	49a2      	ldr	r1, [pc, #648]	; (8003780 <TEST_GetNextValidationInput+0x340>)
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 80034f6:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 80034fa:	48a2      	ldr	r0, [pc, #648]	; (8003784 <TEST_GetNextValidationInput+0x344>)
 80034fc:	f01f fc5e 	bl	8022dbc <siprintf>
        UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 8003500:	f016 fdda 	bl	801a0b8 <UTIL_LCD_GetFont>
 8003504:	4601      	mov	r1, r0
 8003506:	2301      	movs	r3, #1
 8003508:	4a9e      	ldr	r2, [pc, #632]	; (8003784 <TEST_GetNextValidationInput+0x344>)
 800350a:	88c9      	ldrh	r1, [r1, #6]
 800350c:	4630      	mov	r0, r6
 800350e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003512:	f016 fec9 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003516:	9b08      	ldr	r3, [sp, #32]
 8003518:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800351a:	f7fe f9e5 	bl	80018e8 <DISPLAY_Refresh>
        BSP_LED_On(LED_RED);
 800351e:	2002      	movs	r0, #2
 8003520:	f005 fa66 	bl	80089f0 <BSP_LED_On>
        while (1)
 8003524:	e7fe      	b.n	8003524 <TEST_GetNextValidationInput+0xe4>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8003526:	2001      	movs	r0, #1
          ;
      }

      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, ""); //chaine "nulle"
 8003528:	f504 6680 	add.w	r6, r4, #1024	; 0x400
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 800352c:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003530:	f8c4 03bc 	str.w	r0, [r4, #956]	; 0x3bc
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 8003534:	4630      	mov	r0, r6
 8003536:	f01f fc61 	bl	8022dfc <stpcpy>
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, "/");
 800353a:	f04f 032f 	mov.w	r3, #47	; 0x2f
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 800353e:	4629      	mov	r1, r5
 8003540:	3001      	adds	r0, #1
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, "/");
 8003542:	f800 3c01 	strb.w	r3, [r0, #-1]
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 8003546:	f01f fc62 	bl	8022e0e <strcpy>

      dir = &TestContext_Ptr->ValidationContext.class_dir;
      path = TestContext_Ptr->ValidationContext.tmp_class_path;
      res = f_opendir(dir, path);
 800354a:	4631      	mov	r1, r6
 800354c:	4648      	mov	r0, r9
 800354e:	f013 fdb9 	bl	80170c4 <f_opendir>
      if (res != FR_OK)
 8003552:	2800      	cmp	r0, #0
 8003554:	f040 8414 	bne.w	8003d80 <TEST_GetNextValidationInput+0x940>
      }

      /*Get first file immediately*/
      dir = &TestContext_Ptr->ValidationContext.class_dir;
      fno = &TestContext_Ptr->ValidationContext.img_fno;
      res = f_readdir(dir, fno);
 8003558:	4651      	mov	r1, sl
 800355a:	4648      	mov	r0, r9
      fno = &TestContext_Ptr->ValidationContext.img_fno;
 800355c:	f8c7 a000 	str.w	sl, [r7]
      res = f_readdir(dir, fno);
 8003560:	f013 fe4a 	bl	80171f8 <f_readdir>
      if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003564:	2800      	cmp	r0, #0
 8003566:	d194      	bne.n	8003492 <TEST_GetNextValidationInput+0x52>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	7d9a      	ldrb	r2, [r3, #22]
 800356c:	2a00      	cmp	r2, #0
 800356e:	d090      	beq.n	8003492 <TEST_GetNextValidationInput+0x52>
 8003570:	7a1b      	ldrb	r3, [r3, #8]
 8003572:	06db      	lsls	r3, r3, #27
 8003574:	d48d      	bmi.n	8003492 <TEST_GetNextValidationInput+0x52>
      {
        BSP_LED_Toggle(LED_BLUE);
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003576:	4d83      	ldr	r5, [pc, #524]	; (8003784 <TEST_GetNextValidationInput+0x344>)
        BSP_LED_Toggle(LED_BLUE);
 8003578:	2003      	movs	r0, #3
 800357a:	f005 fa5d 	bl	8008a38 <BSP_LED_Toggle>
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800357e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003582:	f016 fda1 	bl	801a0c8 <UTIL_LCD_Clear>
        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003586:	4631      	mov	r1, r6
 8003588:	4628      	mov	r0, r5
 800358a:	f01f fc37 	bl	8022dfc <stpcpy>
        strcat(tmp_msg, "/");
 800358e:	f04f 032f 	mov.w	r3, #47	; 0x2f
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8003592:	f204 21ba 	addw	r1, r4, #698	; 0x2ba
 8003596:	3001      	adds	r0, #1
        strcat(tmp_msg, "/");
 8003598:	f800 3c01 	strb.w	r3, [r0, #-1]
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 800359c:	f01f fc37 	bl	8022e0e <strcpy>

        /* Read the image to DestBuffPtr */
        if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 80035a0:	4629      	mov	r1, r5
 80035a2:	a81c      	add	r0, sp, #112	; 0x70
 80035a4:	f015 f80c 	bl	80185c0 <STM32Ipl_ReadImage>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	f000 83f8 	beq.w	8003d9e <TEST_GetNextValidationInput+0x95e>
        {
          while(1);
 80035ae:	e7fe      	b.n	80035ae <TEST_GetNextValidationInput+0x16e>
    }
    else
    {
      /* Program has Looped through all class dirs*/
      /*=>Close the onboard_valid_dataset directory*/
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 80035b0:	ee18 0a10 	vmov	r0, s16

      /******Moved here from the postprocess() to avoid going thru the main appli while(1) loop again after the validation is completed******/
      /* End of validation */

      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 80035b4:	f04f 35ff 	mov.w	r5, #4294967295
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 80035b8:	f013 fdea 	bl	8017190 <f_closedir>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 80035bc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80035c0:	f016 fd62 	bl	801a088 <UTIL_LCD_SetTextColor>
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 80035c4:	23e0      	movs	r3, #224	; 0xe0
 80035c6:	2282      	movs	r2, #130	; 0x82
 80035c8:	2132      	movs	r1, #50	; 0x32
 80035ca:	2000      	movs	r0, #0
 80035cc:	e9cd 3500 	strd	r3, r5, [sp]
 80035d0:	f006 fdda 	bl	800a188 <BSP_LCD_FillRect>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80035d4:	4628      	mov	r0, r5
 80035d6:	f016 fd57 	bl	801a088 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(40, LINE(10), (uint8_t*)"End of validation.", LEFT_MODE);
 80035da:	f016 fd6d 	bl	801a0b8 <UTIL_LCD_GetFont>
 80035de:	88c1      	ldrh	r1, [r0, #6]
 80035e0:	2303      	movs	r3, #3
 80035e2:	4a69      	ldr	r2, [pc, #420]	; (8003788 <TEST_GetNextValidationInput+0x348>)
 80035e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80035e8:	2028      	movs	r0, #40	; 0x28
 80035ea:	0049      	lsls	r1, r1, #1
 80035ec:	f016 fe5c 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(11), (uint8_t*)"Press wake-up", LEFT_MODE);
 80035f0:	f016 fd62 	bl	801a0b8 <UTIL_LCD_GetFont>
 80035f4:	88c1      	ldrh	r1, [r0, #6]
 80035f6:	2303      	movs	r3, #3
 80035f8:	4a64      	ldr	r2, [pc, #400]	; (800378c <TEST_GetNextValidationInput+0x34c>)
 80035fa:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80035fe:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8003602:	2028      	movs	r0, #40	; 0x28
 8003604:	f016 fe50 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(12), (uint8_t*)"button to see report", LEFT_MODE);
 8003608:	f016 fd56 	bl	801a0b8 <UTIL_LCD_GetFont>
 800360c:	88c1      	ldrh	r1, [r0, #6]
 800360e:	2303      	movs	r3, #3
 8003610:	4a5f      	ldr	r2, [pc, #380]	; (8003790 <TEST_GetNextValidationInput+0x350>)
 8003612:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003616:	2028      	movs	r0, #40	; 0x28
 8003618:	0089      	lsls	r1, r1, #2
 800361a:	f016 fe45 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800361e:	9b08      	ldr	r3, [sp, #32]
 8003620:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003622:	f7fe f961 	bl	80018e8 <DISPLAY_Refresh>

      /* Wait for button input */
      while((TestContext_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 8003626:	e003      	b.n	8003630 <TEST_GetNextValidationInput+0x1f0>
 8003628:	f005 fa66 	bl	8008af8 <BSP_PB_GetState>
 800362c:	2800      	cmp	r0, #0
 800362e:	d155      	bne.n	80036dc <TEST_GetNextValidationInput+0x29c>
 8003630:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
 8003634:	2800      	cmp	r0, #0
 8003636:	d0f7      	beq.n	8003628 <TEST_GetNextValidationInput+0x1e8>
        ;

      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
        HAL_Delay(1000);
 8003638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800363c:	f007 fa84 	bl	800ab48 <HAL_Delay>

      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003640:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003644:	f016 fd40 	bl	801a0c8 <UTIL_LCD_Clear>
        false_positives += conf_matrix[gtruth][target];
 8003648:	f8d4 7468 	ldr.w	r7, [r4, #1128]	; 0x468
 800364c:	f8d4 3478 	ldr.w	r3, [r4, #1144]	; 0x478
      support += conf_matrix[target][pred];
 8003650:	f8d4 244c 	ldr.w	r2, [r4, #1100]	; 0x44c
 8003654:	f8d4 e448 	ldr.w	lr, [r4, #1096]	; 0x448
        false_positives += conf_matrix[gtruth][target];
 8003658:	19d9      	adds	r1, r3, r7
 800365a:	f8d4 6458 	ldr.w	r6, [r4, #1112]	; 0x458
      support += conf_matrix[target][pred];
 800365e:	f8d4 c450 	ldr.w	ip, [r4, #1104]	; 0x450
 8003662:	eb0e 0002 	add.w	r0, lr, r2
        false_positives += conf_matrix[gtruth][target];
 8003666:	4431      	add	r1, r6
      support += conf_matrix[target][pred];
 8003668:	f8d4 5454 	ldr.w	r5, [r4, #1108]	; 0x454
 800366c:	4460      	add	r0, ip
        false_negatives += conf_matrix[target][pred];
 800366e:	eb02 080c 	add.w	r8, r2, ip
    if ((true_positives + false_positives) != 0)
 8003672:	eb11 010e 	adds.w	r1, r1, lr
      support += conf_matrix[target][pred];
 8003676:	4428      	add	r0, r5
        false_negatives += conf_matrix[target][pred];
 8003678:	44a8      	add	r8, r5
    if ((true_positives + false_positives) != 0)
 800367a:	d134      	bne.n	80036e6 <TEST_GetNextValidationInput+0x2a6>
    if ((true_positives + false_negatives) != 0)
 800367c:	eb1e 0808 	adds.w	r8, lr, r8
 8003680:	f040 8372 	bne.w	8003d68 <TEST_GetNextValidationInput+0x928>
    float recall = 0.0f;
 8003684:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8003798 <TEST_GetNextValidationInput+0x358>
    float precision = 0.0f;
 8003688:	eef0 0a41 	vmov.f32	s1, s2
    float f1_score = 0.0f;
 800368c:	eeb0 9a41 	vmov.f32	s18, s2
 8003690:	e04c      	b.n	800372c <TEST_GetNextValidationInput+0x2ec>
  if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003692:	7a1b      	ldrb	r3, [r3, #8]
 8003694:	06d9      	lsls	r1, r3, #27
 8003696:	f53f aeef 	bmi.w	8003478 <TEST_GetNextValidationInput+0x38>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 800369a:	4d3a      	ldr	r5, [pc, #232]	; (8003784 <TEST_GetNextValidationInput+0x344>)
    BSP_LED_Toggle(LED_BLUE);
 800369c:	2003      	movs	r0, #3
 800369e:	f005 f9cb 	bl	8008a38 <BSP_LED_Toggle>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80036a2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80036a6:	f016 fd0f 	bl	801a0c8 <UTIL_LCD_Clear>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80036aa:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 80036ae:	4628      	mov	r0, r5
 80036b0:	f01f fba4 	bl	8022dfc <stpcpy>
    strcat(tmp_msg, "/");
 80036b4:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80036b6:	f204 21ba 	addw	r1, r4, #698	; 0x2ba
 80036ba:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 80036bc:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80036c0:	f01f fba5 	bl	8022e0e <strcpy>
    if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 80036c4:	4629      	mov	r1, r5
 80036c6:	a81c      	add	r0, sp, #112	; 0x70
 80036c8:	f014 ff7a 	bl	80185c0 <STM32Ipl_ReadImage>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	f000 8358 	beq.w	8003d82 <TEST_GetNextValidationInput+0x942>
      while(1);
 80036d2:	e7fe      	b.n	80036d2 <TEST_GetNextValidationInput+0x292>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80036d4:	2002      	movs	r0, #2
 80036d6:	e727      	b.n	8003528 <TEST_GetNextValidationInput+0xe8>
 80036d8:	2003      	movs	r0, #3
 80036da:	e725      	b.n	8003528 <TEST_GetNextValidationInput+0xe8>
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 80036dc:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ad      	beq.n	8003640 <TEST_GetNextValidationInput+0x200>
 80036e4:	e7a8      	b.n	8003638 <TEST_GetNextValidationInput+0x1f8>
      precision = true_positives / (float)(true_positives + false_positives);
 80036e6:	ee07 1a90 	vmov	s15, r1
 80036ea:	ee07 ea10 	vmov	s14, lr
    if ((true_positives + false_negatives) != 0)
 80036ee:	eb1e 0808 	adds.w	r8, lr, r8
      precision = true_positives / (float)(true_positives + false_positives);
 80036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80036fa:	ee87 9a27 	vdiv.f32	s18, s14, s15
    if ((true_positives + false_negatives) != 0)
 80036fe:	f000 832e 	beq.w	8003d5e <TEST_GetNextValidationInput+0x91e>
      recall = true_positives / (float)(true_positives + false_negatives);
 8003702:	ee07 8a90 	vmov	s15, r8
 8003706:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if ((recall + precision) != 0.0f)
 800370a:	eef0 0a49 	vmov.f32	s1, s18
      recall = true_positives / (float)(true_positives + false_negatives);
 800370e:	ee87 1a27 	vdiv.f32	s2, s14, s15
    if ((recall + precision) != 0.0f)
 8003712:	ee39 9a01 	vadd.f32	s18, s18, s2
 8003716:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	d005      	beq.n	800372c <TEST_GetNextValidationInput+0x2ec>
      f1_score = 2 * (recall * precision) / (recall + precision);
 8003720:	ee61 7a20 	vmul.f32	s15, s2, s1
 8003724:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003728:	ee87 9a89 	vdiv.f32	s18, s15, s18
      support += conf_matrix[target][pred];
 800372c:	f8d4 145c 	ldr.w	r1, [r4, #1116]	; 0x45c
        false_positives += conf_matrix[gtruth][target];
 8003730:	f8d4 846c 	ldr.w	r8, [r4, #1132]	; 0x46c
      support += conf_matrix[target][pred];
 8003734:	eb06 0a01 	add.w	sl, r6, r1
 8003738:	f8d4 b464 	ldr.w	fp, [r4, #1124]	; 0x464
        false_positives += conf_matrix[gtruth][target];
 800373c:	eb02 0908 	add.w	r9, r2, r8
      support += conf_matrix[target][pred];
 8003740:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
    report.precisions[target] = precision;
 8003744:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
        false_negatives += conf_matrix[target][pred];
 8003748:	4416      	add	r6, r2
      support += conf_matrix[target][pred];
 800374a:	4452      	add	r2, sl
        false_positives += conf_matrix[gtruth][target];
 800374c:	f8d4 a47c 	ldr.w	sl, [r4, #1148]	; 0x47c
      support += conf_matrix[target][pred];
 8003750:	445a      	add	r2, fp
        false_negatives += conf_matrix[target][pred];
 8003752:	445e      	add	r6, fp
        false_positives += conf_matrix[gtruth][target];
 8003754:	44d1      	add	r9, sl
    report.recalls[target] = recall;
 8003756:	ed8d 1a38 	vstr	s2, [sp, #224]	; 0xe0
    report.f1_scores[target] = f1_score;
 800375a:	ed8d 9a3c 	vstr	s18, [sp, #240]	; 0xf0
    if ((true_positives + false_positives) != 0)
 800375e:	eb19 0901 	adds.w	r9, r9, r1
    report.supports[target] = support;
 8003762:	9040      	str	r0, [sp, #256]	; 0x100
    if ((true_positives + false_positives) != 0)
 8003764:	d11a      	bne.n	800379c <TEST_GetNextValidationInput+0x35c>
    if ((true_positives + false_negatives) != 0)
 8003766:	1876      	adds	r6, r6, r1
 8003768:	f040 82f2 	bne.w	8003d50 <TEST_GetNextValidationInput+0x910>
    float recall = 0.0f;
 800376c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003798 <TEST_GetNextValidationInput+0x358>
    float precision = 0.0f;
 8003770:	eeb0 6a66 	vmov.f32	s12, s13
    float f1_score = 0.0f;
 8003774:	eef0 7a66 	vmov.f32	s15, s13
 8003778:	e032      	b.n	80037e0 <TEST_GetNextValidationInput+0x3a0>
 800377a:	bf00      	nop
 800377c:	20005a98 	.word	0x20005a98
 8003780:	08025c7c 	.word	0x08025c7c
 8003784:	20005de4 	.word	0x20005de4
 8003788:	08025cc8 	.word	0x08025cc8
 800378c:	08025cdc 	.word	0x08025cdc
 8003790:	08025cec 	.word	0x08025cec
 8003794:	20000004 	.word	0x20000004
 8003798:	00000000 	.word	0x00000000
      precision = true_positives / (float)(true_positives + false_positives);
 800379c:	ee07 9a90 	vmov	s15, r9
    if ((true_positives + false_negatives) != 0)
 80037a0:	1876      	adds	r6, r6, r1
      precision = true_positives / (float)(true_positives + false_positives);
 80037a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037a6:	ee07 1a90 	vmov	s15, r1
 80037aa:	eef8 5a67 	vcvt.f32.u32	s11, s15
 80037ae:	eec5 7a87 	vdiv.f32	s15, s11, s14
    if ((true_positives + false_negatives) != 0)
 80037b2:	f000 829c 	beq.w	8003cee <TEST_GetNextValidationInput+0x8ae>
      recall = true_positives / (float)(true_positives + false_negatives);
 80037b6:	ee07 6a10 	vmov	s14, r6
 80037ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if ((recall + precision) != 0.0f)
 80037be:	eeb0 6a67 	vmov.f32	s12, s15
      recall = true_positives / (float)(true_positives + false_negatives);
 80037c2:	eec5 6a87 	vdiv.f32	s13, s11, s14
    if ((recall + precision) != 0.0f)
 80037c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d2:	d005      	beq.n	80037e0 <TEST_GetNextValidationInput+0x3a0>
      f1_score = 2 * (recall * precision) / (recall + precision);
 80037d4:	ee26 7a86 	vmul.f32	s14, s13, s12
 80037d8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80037dc:	eec7 7a27 	vdiv.f32	s15, s14, s15
        false_positives += conf_matrix[gtruth][target];
 80037e0:	f8d4 6460 	ldr.w	r6, [r4, #1120]	; 0x460
      support += conf_matrix[target][pred];
 80037e4:	4447      	add	r7, r8
        false_positives += conf_matrix[gtruth][target];
 80037e6:	f8d4 9480 	ldr.w	r9, [r4, #1152]	; 0x480
 80037ea:	4466      	add	r6, ip
      support += conf_matrix[target][pred];
 80037ec:	f8d4 8470 	ldr.w	r8, [r4, #1136]	; 0x470
 80037f0:	f8d4 c474 	ldr.w	ip, [r4, #1140]	; 0x474
        false_positives += conf_matrix[gtruth][target];
 80037f4:	444e      	add	r6, r9
      support += conf_matrix[target][pred];
 80037f6:	eb07 0b08 	add.w	fp, r7, r8
 80037fa:	4441      	add	r1, r8
        false_negatives += conf_matrix[target][pred];
 80037fc:	4467      	add	r7, ip
    if ((true_positives + false_positives) != 0)
 80037fe:	eb16 0608 	adds.w	r6, r6, r8
      support += conf_matrix[target][pred];
 8003802:	44dc      	add	ip, fp
    report.precisions[target] = precision;
 8003804:	ed8d 6a35 	vstr	s12, [sp, #212]	; 0xd4
    total_support += support;
 8003808:	eb00 0b02 	add.w	fp, r0, r2
    report.recalls[target] = recall;
 800380c:	edcd 6a39 	vstr	s13, [sp, #228]	; 0xe4
    report.f1_scores[target] = f1_score;
 8003810:	edcd 7a3d 	vstr	s15, [sp, #244]	; 0xf4
    report.supports[target] = support;
 8003814:	9241      	str	r2, [sp, #260]	; 0x104
    if ((true_positives + false_positives) != 0)
 8003816:	d10a      	bne.n	800382e <TEST_GetNextValidationInput+0x3ee>
    if ((true_positives + false_negatives) != 0)
 8003818:	eb17 0708 	adds.w	r7, r7, r8
 800381c:	f040 8260 	bne.w	8003ce0 <TEST_GetNextValidationInput+0x8a0>
    float recall = 0.0f;
 8003820:	ed5f 2a23 	vldr	s5, [pc, #-140]	; 8003798 <TEST_GetNextValidationInput+0x358>
    float precision = 0.0f;
 8003824:	eeb0 2a62 	vmov.f32	s4, s5
    float f1_score = 0.0f;
 8003828:	eeb0 3a62 	vmov.f32	s6, s5
 800382c:	e022      	b.n	8003874 <TEST_GetNextValidationInput+0x434>
      precision = true_positives / (float)(true_positives + false_positives);
 800382e:	ee07 6a10 	vmov	s14, r6
 8003832:	ee05 8a90 	vmov	s11, r8
    if ((true_positives + false_negatives) != 0)
 8003836:	eb17 0708 	adds.w	r7, r7, r8
      precision = true_positives / (float)(true_positives + false_positives);
 800383a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800383e:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8003842:	ee85 3a87 	vdiv.f32	s6, s11, s14
    if ((true_positives + false_negatives) != 0)
 8003846:	f000 8246 	beq.w	8003cd6 <TEST_GetNextValidationInput+0x896>
      recall = true_positives / (float)(true_positives + false_negatives);
 800384a:	ee07 7a10 	vmov	s14, r7
 800384e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if ((recall + precision) != 0.0f)
 8003852:	eeb0 2a43 	vmov.f32	s4, s6
      recall = true_positives / (float)(true_positives + false_negatives);
 8003856:	eec5 2a87 	vdiv.f32	s5, s11, s14
    if ((recall + precision) != 0.0f)
 800385a:	ee33 3a22 	vadd.f32	s6, s6, s5
 800385e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8003862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003866:	d005      	beq.n	8003874 <TEST_GetNextValidationInput+0x434>
      f1_score = 2 * (recall * precision) / (recall + precision);
 8003868:	ee22 7a82 	vmul.f32	s14, s5, s4
 800386c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8003870:	ee87 3a03 	vdiv.f32	s6, s14, s6
      support += conf_matrix[target][pred];
 8003874:	eb03 070a 	add.w	r7, r3, sl
        false_positives += conf_matrix[gtruth][target];
 8003878:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
    total_support += support;
 800387c:	44e3      	add	fp, ip
    report.precisions[target] = precision;
 800387e:	ed8d 2a36 	vstr	s4, [sp, #216]	; 0xd8
        false_positives += conf_matrix[gtruth][target];
 8003882:	441d      	add	r5, r3
 8003884:	f8d4 3474 	ldr.w	r3, [r4, #1140]	; 0x474
      support += conf_matrix[target][pred];
 8003888:	444f      	add	r7, r9
    report.recalls[target] = recall;
 800388a:	edcd 2a3a 	vstr	s5, [sp, #232]	; 0xe8
        false_positives += conf_matrix[gtruth][target];
 800388e:	442b      	add	r3, r5
      support += conf_matrix[target][pred];
 8003890:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
    report.f1_scores[target] = f1_score;
 8003894:	ed8d 3a3e 	vstr	s6, [sp, #248]	; 0xf8
    if ((true_positives + false_positives) != 0)
 8003898:	195b      	adds	r3, r3, r5
      support += conf_matrix[target][pred];
 800389a:	442f      	add	r7, r5
 800389c:	4429      	add	r1, r5
    report.supports[target] = support;
 800389e:	f8cd c108 	str.w	ip, [sp, #264]	; 0x108
    if ((true_positives + false_positives) != 0)
 80038a2:	f000 8200 	beq.w	8003ca6 <TEST_GetNextValidationInput+0x866>
      precision = true_positives / (float)(true_positives + false_positives);
 80038a6:	ee07 5a10 	vmov	s14, r5
 80038aa:	eef8 5a47 	vcvt.f32.u32	s11, s14
 80038ae:	ee07 3a10 	vmov	s14, r3
 80038b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80038b6:	ee85 5a87 	vdiv.f32	s10, s11, s14
    if ((true_positives + false_negatives) != 0)
 80038ba:	2f00      	cmp	r7, #0
 80038bc:	f000 8204 	beq.w	8003cc8 <TEST_GetNextValidationInput+0x888>
      recall = true_positives / (float)(true_positives + false_negatives);
 80038c0:	ee07 7a10 	vmov	s14, r7
 80038c4:	eef8 4a47 	vcvt.f32.u32	s9, s14
    if ((recall + precision) != 0.0f)
 80038c8:	eef0 3a45 	vmov.f32	s7, s10
      recall = true_positives / (float)(true_positives + false_negatives);
 80038cc:	ee85 4aa4 	vdiv.f32	s8, s11, s9
    if ((recall + precision) != 0.0f)
 80038d0:	ee34 5a05 	vadd.f32	s10, s8, s10
 80038d4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80038d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038dc:	d005      	beq.n	80038ea <TEST_GetNextValidationInput+0x4aa>
      f1_score = 2 * (recall * precision) / (recall + precision);
 80038de:	ee24 7a23 	vmul.f32	s14, s8, s7
 80038e2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80038e6:	ee87 5a05 	vdiv.f32	s10, s14, s10
    report.supports[target] = support;
 80038ea:	9743      	str	r7, [sp, #268]	; 0x10c
  if (total_support != 0)
 80038ec:	eb17 070b 	adds.w	r7, r7, fp
    diagonal_sum += true_positives;
 80038f0:	4471      	add	r1, lr
    report.precisions[target] = precision;
 80038f2:	edcd 3a37 	vstr	s7, [sp, #220]	; 0xdc
    report.recalls[target] = recall;
 80038f6:	ed8d 4a3b 	vstr	s8, [sp, #236]	; 0xec
    report.f1_scores[target] = f1_score;
 80038fa:	ed8d 5a3f 	vstr	s10, [sp, #252]	; 0xfc
  if (total_support != 0)
 80038fe:	f000 81cb 	beq.w	8003c98 <TEST_GetNextValidationInput+0x858>
    report.accuracy = diagonal_sum / (float)total_support;
 8003902:	ee07 1a10 	vmov	s14, r1
 8003906:	ee05 7a90 	vmov	s11, r7
 800390a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800390e:	eeb8 0a65 	vcvt.f32.u32	s0, s11
 8003912:	ee87 fa00 	vdiv.f32	s30, s14, s0
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003916:	eeb7 eacf 	vcvt.f64.f32	d14, s30
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800391a:	ee07 2a10 	vmov	s14, r2
 800391e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003922:	ee05 0a90 	vmov	s11, r0
    report.macro_avg_precision += (float)report.precisions[target];
 8003926:	ee30 ba86 	vadd.f32	s22, s1, s12
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800392a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800392e:	ad1c      	add	r5, sp, #112	; 0x70
 8003930:	eef8 1a65 	vcvt.f32.u32	s3, s11
  return report;
 8003934:	2260      	movs	r2, #96	; 0x60
 8003936:	eec8 5a00 	vdiv.f32	s11, s16, s0
 800393a:	a934      	add	r1, sp, #208	; 0xd0
 800393c:	4628      	mov	r0, r5
 800393e:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 8003942:	9745      	str	r7, [sp, #276]	; 0x114
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003944:	462e      	mov	r6, r5
 8003946:	f8df 93f8 	ldr.w	r9, [pc, #1016]	; 8003d40 <TEST_GetNextValidationInput+0x900>
 800394a:	f04f 0802 	mov.w	r8, #2
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 800394e:	f8df b3c0 	ldr.w	fp, [pc, #960]	; 8003d10 <TEST_GetNextValidationInput+0x8d0>
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003952:	ee27 8a27 	vmul.f32	s16, s14, s15
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003956:	46ca      	mov	sl, r9
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003958:	ee27 da06 	vmul.f32	s26, s14, s12
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 800395c:	ee27 ca26 	vmul.f32	s24, s14, s13
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003960:	eea1 8a89 	vfma.f32	s16, s3, s18
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003964:	eea1 daa0 	vfma.f32	s26, s3, s1
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003968:	eea1 ca81 	vfma.f32	s24, s3, s2
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 800396c:	ee39 9a27 	vadd.f32	s18, s18, s15
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003970:	ee07 ca90 	vmov	s15, ip
    report.macro_avg_recall += (float)report.recalls[target];
 8003974:	ee31 aa26 	vadd.f32	s20, s2, s13
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003978:	eef8 7a67 	vcvt.f32.u32	s15, s15
    report.macro_avg_precision += (float)report.precisions[target];
 800397c:	ee3b ba02 	vadd.f32	s22, s22, s4
    report.macro_avg_recall += (float)report.recalls[target];
 8003980:	ee3a aa22 	vadd.f32	s20, s20, s5
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003984:	eea7 da82 	vfma.f32	s26, s15, s4
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003988:	eea7 caa2 	vfma.f32	s24, s15, s5
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 800398c:	eea7 8a83 	vfma.f32	s16, s15, s6
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 8003990:	ee39 9a03 	vadd.f32	s18, s18, s6
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 8003994:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
    report.macro_avg_precision += (float)report.precisions[target];
 8003998:	ee3b ba23 	vadd.f32	s22, s22, s7
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800399c:	eea4 daa3 	vfma.f32	s26, s9, s7
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 80039a0:	eea4 ca84 	vfma.f32	s24, s9, s8
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 80039a4:	eea5 8a24 	vfma.f32	s16, s10, s9
    report.macro_avg_recall += (float)report.recalls[target];
 80039a8:	ee34 aa0a 	vadd.f32	s20, s8, s20
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 80039ac:	ee35 9a09 	vadd.f32	s18, s10, s18
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 80039b0:	ee2b ba27 	vmul.f32	s22, s22, s15
  report.macro_avg_recall /= (float)AI_NET_OUTPUT_SIZE;
 80039b4:	ee2a aa27 	vmul.f32	s20, s20, s15
  report.macro_avg_f1_score /= (float)AI_NET_OUTPUT_SIZE;
 80039b8:	ee29 9a27 	vmul.f32	s18, s18, s15
  report.weighted_avg_precision /= (float)report.total_support;
 80039bc:	ee2d da25 	vmul.f32	s26, s26, s11
  return report;
 80039c0:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
  report.weighted_avg_recall /= (float)report.total_support;
 80039c4:	ee2c ca25 	vmul.f32	s24, s24, s11
  return report;
 80039c8:	ed8d aa47 	vstr	s20, [sp, #284]	; 0x11c
  report.weighted_avg_f1_score /= (float)report.total_support;
 80039cc:	ee28 8a25 	vmul.f32	s16, s16, s11
  return report;
 80039d0:	ed8d 9a48 	vstr	s18, [sp, #288]	; 0x120
 80039d4:	ed8d da49 	vstr	s26, [sp, #292]	; 0x124
 80039d8:	ed8d ca4a 	vstr	s24, [sp, #296]	; 0x128
 80039dc:	ed8d 8a4b 	vstr	s16, [sp, #300]	; 0x12c
 80039e0:	f01e fc54 	bl	802228c <memcpy>
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80039e4:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 80039e8:	9308      	str	r3, [sp, #32]
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 80039ea:	f016 fb65 	bl	801a0b8 <UTIL_LCD_GetFont>
 80039ee:	2303      	movs	r3, #3
 80039f0:	4ac3      	ldr	r2, [pc, #780]	; (8003d00 <TEST_GetNextValidationInput+0x8c0>)
 80039f2:	2100      	movs	r1, #0
 80039f4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80039f8:	f016 fc56 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 80039fc:	ecb6 5a01 	vldmia	r6!, {s10}
 8003a00:	4659      	mov	r1, fp
 8003a02:	a834      	add	r0, sp, #208	; 0xd0
 8003a04:	ed96 6a07 	vldr	s12, [r6, #28]
 8003a08:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8003a0c:	ed96 7a03 	vldr	s14, [r6, #12]
 8003a10:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003a14:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003a18:	ed8d 5b00 	vstr	d5, [sp]
 8003a1c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8003a20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a24:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003a26:	9306      	str	r3, [sp, #24]
 8003a28:	f85a 2b04 	ldr.w	r2, [sl], #4
 8003a2c:	f01f f9c6 	bl	8022dbc <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(2 + target), (uint8_t *)line, LEFT_MODE);
 8003a30:	f016 fb42 	bl	801a0b8 <UTIL_LCD_GetFont>
 8003a34:	88c1      	ldrh	r1, [r0, #6]
 8003a36:	2303      	movs	r3, #3
 8003a38:	aa34      	add	r2, sp, #208	; 0xd0
 8003a3a:	fb08 f101 	mul.w	r1, r8, r1
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003a3e:	f108 0801 	add.w	r8, r8, #1
    UTIL_LCD_DisplayStringAt(40, LINE(2 + target), (uint8_t *)line, LEFT_MODE);
 8003a42:	2028      	movs	r0, #40	; 0x28
 8003a44:	f016 fc30 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003a48:	f1b8 0f06 	cmp.w	r8, #6
 8003a4c:	d1d6      	bne.n	80039fc <TEST_GetNextValidationInput+0x5bc>
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003a4e:	4aad      	ldr	r2, [pc, #692]	; (8003d04 <TEST_GetNextValidationInput+0x8c4>)
 8003a50:	a834      	add	r0, sp, #208	; 0xd0
 8003a52:	49ad      	ldr	r1, [pc, #692]	; (8003d08 <TEST_GetNextValidationInput+0x8c8>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003a54:	eeb7 bacb 	vcvt.f64.f32	d11, s22
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003a58:	9702      	str	r7, [sp, #8]
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003a5a:	eeb7 aaca 	vcvt.f64.f32	d10, s20
 8003a5e:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8003a62:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8003d44 <TEST_GetNextValidationInput+0x904>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003a66:	eeb7 dacd 	vcvt.f64.f32	d13, s26
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003a6a:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8003d28 <TEST_GetNextValidationInput+0x8e8>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003a6e:	eeb7 cacc 	vcvt.f64.f32	d12, s24
  f_printf(&File, "                       precision recall f1-score support\n");
 8003a72:	f1a8 0610 	sub.w	r6, r8, #16
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003a76:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003a7a:	ed8d eb00 	vstr	d14, [sp]
 8003a7e:	f01f f99d 	bl	8022dbc <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(3 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003a82:	f016 fb19 	bl	801a0b8 <UTIL_LCD_GetFont>
 8003a86:	88c1      	ldrh	r1, [r0, #6]
 8003a88:	2303      	movs	r3, #3
 8003a8a:	aa34      	add	r2, sp, #208	; 0xd0
 8003a8c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003a90:	2028      	movs	r0, #40	; 0x28
 8003a92:	f016 fc09 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003a96:	4a9d      	ldr	r2, [pc, #628]	; (8003d0c <TEST_GetNextValidationInput+0x8cc>)
 8003a98:	499d      	ldr	r1, [pc, #628]	; (8003d10 <TEST_GetNextValidationInput+0x8d0>)
 8003a9a:	a834      	add	r0, sp, #208	; 0xd0
 8003a9c:	9706      	str	r7, [sp, #24]
 8003a9e:	ed8d 9b04 	vstr	d9, [sp, #16]
 8003aa2:	ed8d ab02 	vstr	d10, [sp, #8]
 8003aa6:	ed8d bb00 	vstr	d11, [sp]
 8003aaa:	f01f f987 	bl	8022dbc <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(4 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003aae:	f016 fb03 	bl	801a0b8 <UTIL_LCD_GetFont>
 8003ab2:	88c1      	ldrh	r1, [r0, #6]
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	aa34      	add	r2, sp, #208	; 0xd0
 8003ab8:	00c9      	lsls	r1, r1, #3
 8003aba:	2028      	movs	r0, #40	; 0x28
 8003abc:	f016 fbf4 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003ac0:	4a94      	ldr	r2, [pc, #592]	; (8003d14 <TEST_GetNextValidationInput+0x8d4>)
 8003ac2:	4993      	ldr	r1, [pc, #588]	; (8003d10 <TEST_GetNextValidationInput+0x8d0>)
 8003ac4:	a834      	add	r0, sp, #208	; 0xd0
 8003ac6:	9706      	str	r7, [sp, #24]
 8003ac8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003acc:	ed8d cb02 	vstr	d12, [sp, #8]
 8003ad0:	ed8d db00 	vstr	d13, [sp]
 8003ad4:	f01f f972 	bl	8022dbc <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(5 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003ad8:	f016 faee 	bl	801a0b8 <UTIL_LCD_GetFont>
 8003adc:	88c1      	ldrh	r1, [r0, #6]
 8003ade:	aa34      	add	r2, sp, #208	; 0xd0
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003ae6:	2028      	movs	r0, #40	; 0x28
 8003ae8:	f016 fbde 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003aec:	9b08      	ldr	r3, [sp, #32]
 8003aee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003af0:	f7fd fefa 	bl	80018e8 <DISPLAY_Refresh>
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003af4:	220a      	movs	r2, #10
 8003af6:	4988      	ldr	r1, [pc, #544]	; (8003d18 <TEST_GetNextValidationInput+0x8d8>)
 8003af8:	a834      	add	r0, sp, #208	; 0xd0
 8003afa:	f012 fc2f 	bl	801635c <f_open>
  f_close(&File);
 8003afe:	a834      	add	r0, sp, #208	; 0xd0
 8003b00:	f013 f886 	bl	8016c10 <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 8003b04:	4984      	ldr	r1, [pc, #528]	; (8003d18 <TEST_GetNextValidationInput+0x8d8>)
 8003b06:	2232      	movs	r2, #50	; 0x32
 8003b08:	a834      	add	r0, sp, #208	; 0xd0
 8003b0a:	f012 fc27 	bl	801635c <f_open>
  f_printf(&File, "                       precision recall f1-score support\n");
 8003b0e:	4983      	ldr	r1, [pc, #524]	; (8003d1c <TEST_GetNextValidationInput+0x8dc>)
 8003b10:	a834      	add	r0, sp, #208	; 0xd0
 8003b12:	f013 fdfd 	bl	8017710 <f_printf>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003b16:	ecb5 5a01 	vldmia	r5!, {s10}
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	a80c      	add	r0, sp, #48	; 0x30
 8003b1e:	ed95 6a07 	vldr	s12, [r5, #28]
 8003b22:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8003b26:	ed95 7a03 	vldr	s14, [r5, #12]
 8003b2a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003b2e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003b32:	ed8d 5b00 	vstr	d5, [sp]
 8003b36:	ed8d 6b04 	vstr	d6, [sp, #16]
 8003b3a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003b3e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b40:	9306      	str	r3, [sp, #24]
 8003b42:	f856 2b04 	ldr.w	r2, [r6], #4
 8003b46:	f01f f939 	bl	8022dbc <siprintf>
    f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003b4a:	a80c      	add	r0, sp, #48	; 0x30
 8003b4c:	f7fc fbd2 	bl	80002f4 <strlen>
 8003b50:	ab0b      	add	r3, sp, #44	; 0x2c
 8003b52:	4602      	mov	r2, r0
 8003b54:	a90c      	add	r1, sp, #48	; 0x30
 8003b56:	a834      	add	r0, sp, #208	; 0xd0
 8003b58:	f012 ff04 	bl	8016964 <f_write>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003b5c:	4546      	cmp	r6, r8
 8003b5e:	d1da      	bne.n	8003b16 <TEST_GetNextValidationInput+0x6d6>
  f_printf(&File, "\n");
 8003b60:	496f      	ldr	r1, [pc, #444]	; (8003d20 <TEST_GetNextValidationInput+0x8e0>)
 8003b62:	a834      	add	r0, sp, #208	; 0xd0
 8003b64:	f013 fdd4 	bl	8017710 <f_printf>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003b68:	4a66      	ldr	r2, [pc, #408]	; (8003d04 <TEST_GetNextValidationInput+0x8c4>)
 8003b6a:	496e      	ldr	r1, [pc, #440]	; (8003d24 <TEST_GetNextValidationInput+0x8e4>)
 8003b6c:	a80c      	add	r0, sp, #48	; 0x30
 8003b6e:	9702      	str	r7, [sp, #8]
 8003b70:	f204 4654 	addw	r6, r4, #1108	; 0x454
  f_printf(&File, ",Predicted\n");
 8003b74:	f04f 0801 	mov.w	r8, #1
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003b78:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8003d48 <TEST_GetNextValidationInput+0x908>
    f_printf(&File, "\n");
 8003b7c:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8003d20 <TEST_GetNextValidationInput+0x8e0>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003b80:	ed8d eb00 	vstr	d14, [sp]
 8003b84:	f01f f91a 	bl	8022dbc <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003b88:	a80c      	add	r0, sp, #48	; 0x30
 8003b8a:	f7fc fbb3 	bl	80002f4 <strlen>
 8003b8e:	ab0b      	add	r3, sp, #44	; 0x2c
 8003b90:	4602      	mov	r2, r0
 8003b92:	a90c      	add	r1, sp, #48	; 0x30
 8003b94:	a834      	add	r0, sp, #208	; 0xd0
 8003b96:	f012 fee5 	bl	8016964 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003b9a:	4a5c      	ldr	r2, [pc, #368]	; (8003d0c <TEST_GetNextValidationInput+0x8cc>)
 8003b9c:	4962      	ldr	r1, [pc, #392]	; (8003d28 <TEST_GetNextValidationInput+0x8e8>)
 8003b9e:	a80c      	add	r0, sp, #48	; 0x30
 8003ba0:	9706      	str	r7, [sp, #24]
 8003ba2:	ed8d 9b04 	vstr	d9, [sp, #16]
 8003ba6:	ed8d ab02 	vstr	d10, [sp, #8]
 8003baa:	ed8d bb00 	vstr	d11, [sp]
 8003bae:	f01f f905 	bl	8022dbc <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003bb2:	a80c      	add	r0, sp, #48	; 0x30
 8003bb4:	f7fc fb9e 	bl	80002f4 <strlen>
 8003bb8:	ab0b      	add	r3, sp, #44	; 0x2c
 8003bba:	4602      	mov	r2, r0
 8003bbc:	a90c      	add	r1, sp, #48	; 0x30
 8003bbe:	a834      	add	r0, sp, #208	; 0xd0
 8003bc0:	f012 fed0 	bl	8016964 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "weighted avg", report->weighted_avg_precision,
 8003bc4:	4a53      	ldr	r2, [pc, #332]	; (8003d14 <TEST_GetNextValidationInput+0x8d4>)
 8003bc6:	4958      	ldr	r1, [pc, #352]	; (8003d28 <TEST_GetNextValidationInput+0x8e8>)
 8003bc8:	a80c      	add	r0, sp, #48	; 0x30
 8003bca:	9706      	str	r7, [sp, #24]
      f_printf(&File, "%d,", value);
 8003bcc:	4f57      	ldr	r7, [pc, #348]	; (8003d2c <TEST_GetNextValidationInput+0x8ec>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "weighted avg", report->weighted_avg_precision,
 8003bce:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003bd2:	ed8d cb02 	vstr	d12, [sp, #8]
 8003bd6:	ed8d db00 	vstr	d13, [sp]
 8003bda:	f01f f8ef 	bl	8022dbc <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003bde:	a80c      	add	r0, sp, #48	; 0x30
 8003be0:	f7fc fb88 	bl	80002f4 <strlen>
 8003be4:	ab0b      	add	r3, sp, #44	; 0x2c
 8003be6:	4602      	mov	r2, r0
 8003be8:	a90c      	add	r1, sp, #48	; 0x30
 8003bea:	a834      	add	r0, sp, #208	; 0xd0
 8003bec:	f012 feba 	bl	8016964 <f_write>
  f_close(&File);
 8003bf0:	a834      	add	r0, sp, #208	; 0xd0
 8003bf2:	f013 f80d 	bl	8016c10 <f_close>

      DisplayClassificationReport(TestContext_Ptr, &report);

      WriteClassificationReport(&report, "classification_report.txt");

      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 8003bf6:	f204 4344 	addw	r3, r4, #1092	; 0x444
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003bfa:	220a      	movs	r2, #10
 8003bfc:	494c      	ldr	r1, [pc, #304]	; (8003d30 <TEST_GetNextValidationInput+0x8f0>)
      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 8003bfe:	ed83 fa00 	vstr	s30, [r3]
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003c02:	a834      	add	r0, sp, #208	; 0xd0
 8003c04:	f012 fbaa 	bl	801635c <f_open>
  f_close(&File);
 8003c08:	a834      	add	r0, sp, #208	; 0xd0
 8003c0a:	f013 f801 	bl	8016c10 <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 8003c0e:	2232      	movs	r2, #50	; 0x32
 8003c10:	4947      	ldr	r1, [pc, #284]	; (8003d30 <TEST_GetNextValidationInput+0x8f0>)
 8003c12:	a834      	add	r0, sp, #208	; 0xd0
 8003c14:	f012 fba2 	bl	801635c <f_open>
  f_printf(&File, ",Confusion Matrix\n\n");
 8003c18:	4946      	ldr	r1, [pc, #280]	; (8003d34 <TEST_GetNextValidationInput+0x8f4>)
 8003c1a:	a834      	add	r0, sp, #208	; 0xd0
 8003c1c:	f013 fd78 	bl	8017710 <f_printf>
  f_printf(&File, ",Predicted\n");
 8003c20:	4945      	ldr	r1, [pc, #276]	; (8003d38 <TEST_GetNextValidationInput+0x8f8>)
 8003c22:	a834      	add	r0, sp, #208	; 0xd0
 8003c24:	f013 fd74 	bl	8017710 <f_printf>
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003c28:	f859 2b04 	ldr.w	r2, [r9], #4
 8003c2c:	4651      	mov	r1, sl
 8003c2e:	a834      	add	r0, sp, #208	; 0xd0
 8003c30:	f1a6 0510 	sub.w	r5, r6, #16
 8003c34:	f013 fd6c 	bl	8017710 <f_printf>
      f_printf(&File, "%d,", value);
 8003c38:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8003c3c:	4639      	mov	r1, r7
 8003c3e:	a834      	add	r0, sp, #208	; 0xd0
 8003c40:	f013 fd66 	bl	8017710 <f_printf>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8003c44:	42b5      	cmp	r5, r6
 8003c46:	d1f7      	bne.n	8003c38 <TEST_GetNextValidationInput+0x7f8>
    if (row == NN_OUTPUT_CLASS_NUMBER / 2)
 8003c48:	f1b8 0f03 	cmp.w	r8, #3
 8003c4c:	d01b      	beq.n	8003c86 <TEST_GetNextValidationInput+0x846>
    f_printf(&File, "\n");
 8003c4e:	4659      	mov	r1, fp
 8003c50:	a834      	add	r0, sp, #208	; 0xd0
 8003c52:	f013 fd5d 	bl	8017710 <f_printf>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8003c56:	f1b8 0f04 	cmp.w	r8, #4
 8003c5a:	d003      	beq.n	8003c64 <TEST_GetNextValidationInput+0x824>
 8003c5c:	f108 0801 	add.w	r8, r8, #1
 8003c60:	3610      	adds	r6, #16
 8003c62:	e7e1      	b.n	8003c28 <TEST_GetNextValidationInput+0x7e8>
  f_close(&File);
 8003c64:	a834      	add	r0, sp, #208	; 0xd0
 8003c66:	f012 ffd3 	bl	8016c10 <f_close>

      WriteConfusionMatrix(TestContext_Ptr->ValidationContext.valid_conf_matrix, "confusion_matrix.csv");

      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003c6a:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 8081 	bne.w	8003d76 <TEST_GetNextValidationInput+0x936>
        HAL_Delay(1000);

      TestContext_Ptr->ValidationContext.validation_completed =1;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    }
#endif /* OBJECTDETECT */

  }
}
 8003c7a:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
 8003c7e:	ecbd 8b10 	vpop	{d8-d15}
 8003c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      f_printf(&File, " Ground truth");
 8003c86:	a834      	add	r0, sp, #208	; 0xd0
 8003c88:	492c      	ldr	r1, [pc, #176]	; (8003d3c <TEST_GetNextValidationInput+0x8fc>)
 8003c8a:	f013 fd41 	bl	8017710 <f_printf>
    f_printf(&File, "\n");
 8003c8e:	4659      	mov	r1, fp
 8003c90:	a834      	add	r0, sp, #208	; 0xd0
 8003c92:	f013 fd3d 	bl	8017710 <f_printf>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8003c96:	e7e1      	b.n	8003c5c <TEST_GetNextValidationInput+0x81c>
 8003c98:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003d4c <TEST_GetNextValidationInput+0x90c>
 8003c9c:	ed9f eb16 	vldr	d14, [pc, #88]	; 8003cf8 <TEST_GetNextValidationInput+0x8b8>
  report.accuracy = 0.0f;
 8003ca0:	eeb0 fa40 	vmov.f32	s30, s0
 8003ca4:	e639      	b.n	800391a <TEST_GetNextValidationInput+0x4da>
    if ((true_positives + false_negatives) != 0)
 8003ca6:	b947      	cbnz	r7, 8003cba <TEST_GetNextValidationInput+0x87a>
    float recall = 0.0f;
 8003ca8:	ed9f 4a28 	vldr	s8, [pc, #160]	; 8003d4c <TEST_GetNextValidationInput+0x90c>
    float precision = 0.0f;
 8003cac:	eef0 3a44 	vmov.f32	s7, s8
    float f1_score = 0.0f;
 8003cb0:	eeb0 5a44 	vmov.f32	s10, s8
 8003cb4:	eef0 4a44 	vmov.f32	s9, s8
 8003cb8:	e617      	b.n	80038ea <TEST_GetNextValidationInput+0x4aa>
      precision = true_positives / (float)(true_positives + false_positives);
 8003cba:	ee07 5a10 	vmov	s14, r5
    float precision = 0.0f;
 8003cbe:	ed9f 5a23 	vldr	s10, [pc, #140]	; 8003d4c <TEST_GetNextValidationInput+0x90c>
      precision = true_positives / (float)(true_positives + false_positives);
 8003cc2:	eef8 5a47 	vcvt.f32.u32	s11, s14
 8003cc6:	e5fb      	b.n	80038c0 <TEST_GetNextValidationInput+0x480>
    float recall = 0.0f;
 8003cc8:	ed9f 4a20 	vldr	s8, [pc, #128]	; 8003d4c <TEST_GetNextValidationInput+0x90c>
      precision = true_positives / (float)(true_positives + false_positives);
 8003ccc:	eef0 3a45 	vmov.f32	s7, s10
 8003cd0:	eef0 4a44 	vmov.f32	s9, s8
 8003cd4:	e5fe      	b.n	80038d4 <TEST_GetNextValidationInput+0x494>
 8003cd6:	eeb0 2a43 	vmov.f32	s4, s6
    float recall = 0.0f;
 8003cda:	eddf 2a1c 	vldr	s5, [pc, #112]	; 8003d4c <TEST_GetNextValidationInput+0x90c>
 8003cde:	e5be      	b.n	800385e <TEST_GetNextValidationInput+0x41e>
      precision = true_positives / (float)(true_positives + false_positives);
 8003ce0:	ee07 8a10 	vmov	s14, r8
    float precision = 0.0f;
 8003ce4:	ed9f 3a19 	vldr	s6, [pc, #100]	; 8003d4c <TEST_GetNextValidationInput+0x90c>
      precision = true_positives / (float)(true_positives + false_positives);
 8003ce8:	eef8 5a47 	vcvt.f32.u32	s11, s14
 8003cec:	e5ad      	b.n	800384a <TEST_GetNextValidationInput+0x40a>
 8003cee:	eeb0 6a67 	vmov.f32	s12, s15
    float recall = 0.0f;
 8003cf2:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003d4c <TEST_GetNextValidationInput+0x90c>
 8003cf6:	e568      	b.n	80037ca <TEST_GetNextValidationInput+0x38a>
	...
 8003d00:	08025d04 	.word	0x08025d04
 8003d04:	08025d44 	.word	0x08025d44
 8003d08:	08025d50 	.word	0x08025d50
 8003d0c:	08025d60 	.word	0x08025d60
 8003d10:	08025d28 	.word	0x08025d28
 8003d14:	08025d6c 	.word	0x08025d6c
 8003d18:	08025d7c 	.word	0x08025d7c
 8003d1c:	08025d98 	.word	0x08025d98
 8003d20:	08025eb4 	.word	0x08025eb4
 8003d24:	08025df0 	.word	0x08025df0
 8003d28:	08025dd4 	.word	0x08025dd4
 8003d2c:	08025e40 	.word	0x08025e40
 8003d30:	08025e04 	.word	0x08025e04
 8003d34:	08025e1c 	.word	0x08025e1c
 8003d38:	08025e30 	.word	0x08025e30
 8003d3c:	08025e44 	.word	0x08025e44
 8003d40:	20000004 	.word	0x20000004
 8003d44:	20000014 	.word	0x20000014
 8003d48:	08025e3c 	.word	0x08025e3c
 8003d4c:	00000000 	.word	0x00000000
      precision = true_positives / (float)(true_positives + false_positives);
 8003d50:	ee07 1a90 	vmov	s15, r1
 8003d54:	eef8 5a67 	vcvt.f32.u32	s11, s15
    float precision = 0.0f;
 8003d58:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 8003d4c <TEST_GetNextValidationInput+0x90c>
 8003d5c:	e52b      	b.n	80037b6 <TEST_GetNextValidationInput+0x376>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d5e:	eef0 0a49 	vmov.f32	s1, s18
    float recall = 0.0f;
 8003d62:	ed1f 1a06 	vldr	s2, [pc, #-24]	; 8003d4c <TEST_GetNextValidationInput+0x90c>
 8003d66:	e4d6      	b.n	8003716 <TEST_GetNextValidationInput+0x2d6>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d68:	ee07 ea90 	vmov	s15, lr
    float precision = 0.0f;
 8003d6c:	ed1f 9a09 	vldr	s18, [pc, #-36]	; 8003d4c <TEST_GetNextValidationInput+0x90c>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d74:	e4c5      	b.n	8003702 <TEST_GetNextValidationInput+0x2c2>
        HAL_Delay(1000);
 8003d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d7a:	f006 fee5 	bl	800ab48 <HAL_Delay>
 8003d7e:	e779      	b.n	8003c74 <TEST_GetNextValidationInput+0x834>
        while (1);
 8003d80:	e7fe      	b.n	8003d80 <TEST_GetNextValidationInput+0x940>
    val_img.data = DestBuffPtr;
 8003d82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003d84:	a934      	add	r1, sp, #208	; 0xd0
 8003d86:	a81c      	add	r0, sp, #112	; 0x70
    val_img.w = tmp_img.w;
 8003d88:	9335      	str	r3, [sp, #212]	; 0xd4
    val_img.data = DestBuffPtr;
 8003d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d8c:	9337      	str	r3, [sp, #220]	; 0xdc
    val_img.w = tmp_img.w;
 8003d8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d90:	9336      	str	r3, [sp, #216]	; 0xd8
 8003d92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003d94:	9334      	str	r3, [sp, #208]	; 0xd0
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003d96:	f014 f8e9 	bl	8017f6c <STM32Ipl_CopyData>
 8003d9a:	b170      	cbz	r0, 8003dba <TEST_GetNextValidationInput+0x97a>
      while (1); /* Invalid dimensions or format */
 8003d9c:	e7fe      	b.n	8003d9c <TEST_GetNextValidationInput+0x95c>
        val_img.data = DestBuffPtr;
 8003d9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003da0:	a934      	add	r1, sp, #208	; 0xd0
 8003da2:	a81c      	add	r0, sp, #112	; 0x70
        val_img.w = tmp_img.w;
 8003da4:	9335      	str	r3, [sp, #212]	; 0xd4
        val_img.data = DestBuffPtr;
 8003da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da8:	9337      	str	r3, [sp, #220]	; 0xdc
        val_img.w = tmp_img.w;
 8003daa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003dac:	9336      	str	r3, [sp, #216]	; 0xd8
 8003dae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003db0:	9334      	str	r3, [sp, #208]	; 0xd0
        if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003db2:	f014 f8db 	bl	8017f6c <STM32Ipl_CopyData>
 8003db6:	b100      	cbz	r0, 8003dba <TEST_GetNextValidationInput+0x97a>
          while (1); // Invalid dim or format
 8003db8:	e7fe      	b.n	8003db8 <TEST_GetNextValidationInput+0x978>
        STM32Ipl_ReleaseData(&tmp_img);
 8003dba:	a81c      	add	r0, sp, #112	; 0x70
 8003dbc:	f014 f874 	bl	8017ea8 <STM32Ipl_ReleaseData>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 8003dc0:	9b08      	ldr	r3, [sp, #32]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	751a      	strb	r2, [r3, #20]
      if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003dc8:	e757      	b.n	8003c7a <TEST_GetNextValidationInput+0x83a>
 8003dca:	bf00      	nop

08003dcc <TEST_Run>:
  char msg[70];
  uint8_t sd_error;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003dcc:	2903      	cmp	r1, #3
{
 8003dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	b0da      	sub	sp, #360	; 0x168
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003dd6:	f8d0 55d0 	ldr.w	r5, [r0, #1488]	; 0x5d0
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003dda:	d038      	beq.n	8003e4e <TEST_Run+0x82>
        }
      }
      break;
    }
  }
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003ddc:	2904      	cmp	r1, #4
 8003dde:	d002      	beq.n	8003de6 <TEST_Run+0x1a>

    default:
      break;
    }
  }
}
 8003de0:	b05a      	add	sp, #360	; 0x168
 8003de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003de6:	f8d0 35b0 	ldr.w	r3, [r0, #1456]	; 0x5b0
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d1f8      	bne.n	8003de0 <TEST_Run+0x14>
 8003dee:	f8d0 1598 	ldr.w	r1, [r0, #1432]	; 0x598
 8003df2:	2900      	cmp	r1, #0
 8003df4:	d0f4      	beq.n	8003de0 <TEST_Run+0x14>
    switch(TestContext_Ptr->CaptureContext.capture_state)
 8003df6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	f000 8141 	beq.w	8004082 <TEST_Run+0x2b6>
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d1ed      	bne.n	8003de0 <TEST_Run+0x14>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003e04:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003e06:	7d13      	ldrb	r3, [r2, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0fc      	beq.n	8003e06 <TEST_Run+0x3a>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003e0c:	f8d4 35b8 	ldr.w	r3, [r4, #1464]	; 0x5b8
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f000 829b 	beq.w	800434c <TEST_Run+0x580>
      if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_BMP)
 8003e16:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	f000 828a 	beq.w	8004334 <TEST_Run+0x568>
      else if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_RAW)
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f040 80c4 	bne.w	8003fae <TEST_Run+0x1e2>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003e26:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003e2a:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003e2e:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
 8003e32:	a834      	add	r0, sp, #208	; 0xd0
 8003e34:	9100      	str	r1, [sp, #0]
 8003e36:	49bd      	ldr	r1, [pc, #756]	; (800412c <TEST_Run+0x360>)
 8003e38:	f01e ffc0 	bl	8022dbc <siprintf>
        write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003e3c:	462b      	mov	r3, r5
 8003e3e:	f8d4 25ac 	ldr.w	r2, [r4, #1452]	; 0x5ac
 8003e42:	f8d4 1598 	ldr.w	r1, [r4, #1432]	; 0x598
 8003e46:	a834      	add	r0, sp, #208	; 0xd0
 8003e48:	f7fd ff28 	bl	8001c9c <write_raw>
}
 8003e4c:	e7c8      	b.n	8003de0 <TEST_Run+0x14>
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003e4e:	f8d0 3598 	ldr.w	r3, [r0, #1432]	; 0x598
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0c4      	beq.n	8003de0 <TEST_Run+0x14>
    switch(TestContext_Ptr->DumpContext.dump_state)
 8003e56:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
 8003e5a:	2e01      	cmp	r6, #1
 8003e5c:	d02f      	beq.n	8003ebe <TEST_Run+0xf2>
 8003e5e:	2e02      	cmp	r6, #2
 8003e60:	d1be      	bne.n	8003de0 <TEST_Run+0x14>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 8003e62:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003e64:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8003e68:	2a00      	cmp	r2, #0
 8003e6a:	f000 8095 	beq.w	8003f98 <TEST_Run+0x1cc>
 8003e6e:	f893 34f6 	ldrb.w	r3, [r3, #1270]	; 0x4f6
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	f040 8090 	bne.w	8003f98 <TEST_Run+0x1cc>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003e78:	2600      	movs	r6, #0
 8003e7a:	e006      	b.n	8003e8a <TEST_Run+0xbe>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003e7c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	1c59      	adds	r1, r3, #1
 8003e82:	6011      	str	r1, [r2, #0]
 8003e84:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003e86:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003e88:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003e8a:	f8d4 759c 	ldr.w	r7, [r4, #1436]	; 0x59c
 8003e8e:	4638      	mov	r0, r7
 8003e90:	f7fc fa30 	bl	80002f4 <strlen>
 8003e94:	42b0      	cmp	r0, r6
 8003e96:	d8f1      	bhi.n	8003e7c <TEST_Run+0xb0>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003e98:	f8d4 35ac 	ldr.w	r3, [r4, #1452]	; 0x5ac
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d09f      	beq.n	8003de0 <TEST_Run+0x14>
 8003ea0:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003ea2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003ea4:	f8d4 0598 	ldr.w	r0, [r4, #1432]	; 0x598
 8003ea8:	680a      	ldr	r2, [r1, #0]
 8003eaa:	1c56      	adds	r6, r2, #1
 8003eac:	600e      	str	r6, [r1, #0]
 8003eae:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003eb0:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003eb2:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003eb4:	f8d4 25ac 	ldr.w	r2, [r4, #1452]	; 0x5ac
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d8f2      	bhi.n	8003ea2 <TEST_Run+0xd6>
 8003ebc:	e790      	b.n	8003de0 <TEST_Run+0x14>
      BSP_LED_Off(LED_GREEN);
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	f004 fda8 	bl	8008a14 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8003ec4:	2002      	movs	r0, #2
 8003ec6:	f004 fd93 	bl	80089f0 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP BUSY ", RIGHT_MODE);
 8003eca:	f016 f8f5 	bl	801a0b8 <UTIL_LCD_GetFont>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	88c1      	ldrh	r1, [r0, #6]
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	4a96      	ldr	r2, [pc, #600]	; (8004130 <TEST_Run+0x364>)
 8003ed6:	f016 f9e7 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8003eda:	ed95 7a04 	vldr	s14, [r5, #16]
 8003ede:	eddf 7a95 	vldr	s15, [pc, #596]	; 8004134 <TEST_Run+0x368>
 8003ee2:	a802      	add	r0, sp, #8
 8003ee4:	68ea      	ldr	r2, [r5, #12]
 8003ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eea:	4993      	ldr	r1, [pc, #588]	; (8004138 <TEST_Run+0x36c>)
 8003eec:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003ef0:	ed8d 7b00 	vstr	d7, [sp]
 8003ef4:	f01e ff62 	bl	8022dbc <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8003ef8:	f016 f8de 	bl	801a0b8 <UTIL_LCD_GetFont>
 8003efc:	88c1      	ldrh	r1, [r0, #6]
 8003efe:	4633      	mov	r3, r6
 8003f00:	aa02      	add	r2, sp, #8
 8003f02:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8003f06:	2000      	movs	r0, #0
 8003f08:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8003f0c:	f016 f9cc 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8003f10:	68aa      	ldr	r2, [r5, #8]
 8003f12:	498a      	ldr	r1, [pc, #552]	; (800413c <TEST_Run+0x370>)
 8003f14:	a802      	add	r0, sp, #8
 8003f16:	f01e ff51 	bl	8022dbc <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8003f1a:	f016 f8cd 	bl	801a0b8 <UTIL_LCD_GetFont>
 8003f1e:	88c1      	ldrh	r1, [r0, #6]
 8003f20:	aa02      	add	r2, sp, #8
 8003f22:	4633      	mov	r3, r6
 8003f24:	0109      	lsls	r1, r1, #4
 8003f26:	2000      	movs	r0, #0
 8003f28:	f016 f9be 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003f2c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003f2e:	f7fd fcdb 	bl	80018e8 <DISPLAY_Refresh>
      HAL_Delay(200);
 8003f32:	20c8      	movs	r0, #200	; 0xc8
 8003f34:	f006 fe08 	bl	800ab48 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003f38:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003f3a:	7d13      	ldrb	r3, [r2, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0fc      	beq.n	8003f3a <TEST_Run+0x16e>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 8003f40:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003f42:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8003f46:	2a00      	cmp	r2, #0
 8003f48:	d036      	beq.n	8003fb8 <TEST_Run+0x1ec>
 8003f4a:	f893 24f6 	ldrb.w	r2, [r3, #1270]	; 0x4f6
 8003f4e:	2a01      	cmp	r2, #1
 8003f50:	d132      	bne.n	8003fb8 <TEST_Run+0x1ec>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003f52:	2600      	movs	r6, #0
 8003f54:	e006      	b.n	8003f64 <TEST_Run+0x198>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003f56:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003f58:	6813      	ldr	r3, [r2, #0]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003f60:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003f62:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003f64:	f8d4 759c 	ldr.w	r7, [r4, #1436]	; 0x59c
 8003f68:	4638      	mov	r0, r7
 8003f6a:	f7fc f9c3 	bl	80002f4 <strlen>
 8003f6e:	42b0      	cmp	r0, r6
 8003f70:	d8f1      	bhi.n	8003f56 <TEST_Run+0x18a>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003f72:	f8d4 35ac 	ldr.w	r3, [r4, #1452]	; 0x5ac
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d049      	beq.n	800400e <TEST_Run+0x242>
 8003f7a:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003f7c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003f7e:	f8d4 0598 	ldr.w	r0, [r4, #1432]	; 0x598
 8003f82:	680a      	ldr	r2, [r1, #0]
 8003f84:	1c56      	adds	r6, r2, #1
 8003f86:	600e      	str	r6, [r1, #0]
 8003f88:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003f8a:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003f8c:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003f8e:	f8d4 25ac 	ldr.w	r2, [r4, #1452]	; 0x5ac
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d8f2      	bhi.n	8003f7c <TEST_Run+0x1b0>
 8003f96:	e03a      	b.n	800400e <TEST_Run+0x242>
        if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_BMP)
 8003f98:	f894 35b4 	ldrb.w	r3, [r4, #1460]	; 0x5b4
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	f000 80db 	beq.w	8004158 <TEST_Run+0x38c>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_RAW)
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80b8 	beq.w	8004118 <TEST_Run+0x34c>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_TXT)
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	f000 80ef 	beq.w	800418c <TEST_Run+0x3c0>
}
 8003fae:	b05a      	add	sp, #360	; 0x168
 8003fb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          Error_Handler(); /* DumpFormat no supported */
 8003fb4:	f001 b844 	b.w	8005040 <Error_Handler>
        if(App_Cxt_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 8003fb8:	791b      	ldrb	r3, [r3, #4]
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d12b      	bne.n	8004016 <TEST_Run+0x24a>
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003fbe:	f104 0108 	add.w	r1, r4, #8
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003fc2:	f104 0754 	add.w	r7, r4, #84	; 0x54
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003fc6:	f204 50bc 	addw	r0, r4, #1468	; 0x5bc
 8003fca:	f00c fc2b 	bl	8010824 <HAL_RNG_GenerateRandomNumber>
        sprintf(TestContext_Ptr->DumpContext.dump_session_name, "Session %X", (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003fce:	68a2      	ldr	r2, [r4, #8]
 8003fd0:	495b      	ldr	r1, [pc, #364]	; (8004140 <TEST_Run+0x374>)
 8003fd2:	f104 0010 	add.w	r0, r4, #16
 8003fd6:	f01e fef1 	bl	8022dbc <siprintf>
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003fda:	68a3      	ldr	r3, [r4, #8]
 8003fdc:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8003fe0:	4958      	ldr	r1, [pc, #352]	; (8004144 <TEST_Run+0x378>)
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	f01e feea 	bl	8022dbc <siprintf>
  res = f_mkdir(path);
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f013 f971 	bl	80172d0 <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8003fee:	f010 06f7 	ands.w	r6, r0, #247	; 0xf7
 8003ff2:	d129      	bne.n	8004048 <TEST_Run+0x27c>
        if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_BMP)
 8003ff4:	f894 35b4 	ldrb.w	r3, [r4, #1460]	; 0x5b4
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	f000 810f 	beq.w	800421c <TEST_Run+0x450>
        else if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_RAW)
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80fc 	beq.w	80041fc <TEST_Run+0x430>
        else if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_TXT)
 8004004:	2b02      	cmp	r3, #2
 8004006:	f000 8122 	beq.w	800424e <TEST_Run+0x482>
          Error_Handler(); /* DumpFormat no supported */
 800400a:	f001 f819 	bl	8005040 <Error_Handler>
      TestContext_Ptr->DumpContext.dump_state = 2;
 800400e:	2302      	movs	r3, #2
 8004010:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      break;
 8004014:	e6e4      	b.n	8003de0 <TEST_Run+0x14>
          BSP_CAMERA_DeInit(0);
 8004016:	2000      	movs	r0, #0
 8004018:	f005 faaa 	bl	8009570 <BSP_CAMERA_DeInit>
          if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 800401c:	2000      	movs	r0, #0
 800401e:	f006 fc4d 	bl	800a8bc <BSP_SD_Init>
 8004022:	2800      	cmp	r0, #0
 8004024:	d0cb      	beq.n	8003fbe <TEST_Run+0x1f2>
            UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8004026:	f016 f847 	bl	801a0b8 <UTIL_LCD_GetFont>
 800402a:	88c1      	ldrh	r1, [r0, #6]
 800402c:	2301      	movs	r3, #1
 800402e:	4a46      	ldr	r2, [pc, #280]	; (8004148 <TEST_Run+0x37c>)
 8004030:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004034:	2000      	movs	r0, #0
 8004036:	0089      	lsls	r1, r1, #2
 8004038:	f016 f936 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
            DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800403c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800403e:	f7fd fc53 	bl	80018e8 <DISPLAY_Refresh>
            Error_Handler();
 8004042:	f000 fffd 	bl	8005040 <Error_Handler>
 8004046:	e7ba      	b.n	8003fbe <TEST_Run+0x1f2>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8004048:	f016 f836 	bl	801a0b8 <UTIL_LCD_GetFont>
 800404c:	88c1      	ldrh	r1, [r0, #6]
 800404e:	2301      	movs	r3, #1
 8004050:	4a3e      	ldr	r2, [pc, #248]	; (800414c <TEST_Run+0x380>)
 8004052:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004056:	2000      	movs	r0, #0
 8004058:	4099      	lsls	r1, r3
 800405a:	f016 f925 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 800405e:	f016 f82b 	bl	801a0b8 <UTIL_LCD_GetFont>
 8004062:	4601      	mov	r1, r0
 8004064:	2301      	movs	r3, #1
 8004066:	463a      	mov	r2, r7
 8004068:	88c9      	ldrh	r1, [r1, #6]
 800406a:	2000      	movs	r0, #0
 800406c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8004070:	f016 f91a 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8004074:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004076:	f7fd fc37 	bl	80018e8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800407a:	2002      	movs	r0, #2
 800407c:	f004 fcb8 	bl	80089f0 <BSP_LED_On>
    while (1);
 8004080:	e7fe      	b.n	8004080 <TEST_Run+0x2b4>
      BSP_LED_Off(LED_GREEN);
 8004082:	2000      	movs	r0, #0
 8004084:	f004 fcc6 	bl	8008a14 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8004088:	2002      	movs	r0, #2
 800408a:	f004 fcb1 	bl	80089f0 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE BUSY ", RIGHT_MODE);
 800408e:	f016 f813 	bl	801a0b8 <UTIL_LCD_GetFont>
 8004092:	4a2f      	ldr	r2, [pc, #188]	; (8004150 <TEST_Run+0x384>)
 8004094:	88c1      	ldrh	r1, [r0, #6]
 8004096:	2302      	movs	r3, #2
 8004098:	2000      	movs	r0, #0
 800409a:	f016 f905 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800409e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80040a0:	f7fd fc22 	bl	80018e8 <DISPLAY_Refresh>
      HAL_Delay(200);
 80040a4:	20c8      	movs	r0, #200	; 0xc8
 80040a6:	f006 fd4f 	bl	800ab48 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 80040aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80040ac:	7d13      	ldrb	r3, [r2, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0fc      	beq.n	80040ac <TEST_Run+0x2e0>
      BSP_CAMERA_DeInit(0);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f005 fa5c 	bl	8009570 <BSP_CAMERA_DeInit>
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 80040b8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 80040bc:	2000      	movs	r0, #0
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 80040be:	3301      	adds	r3, #1
 80040c0:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 80040c4:	f006 fbfa 	bl	800a8bc <BSP_SD_Init>
      if (sd_error != BSP_ERROR_NONE)
 80040c8:	b2c0      	uxtb	r0, r0
 80040ca:	2800      	cmp	r0, #0
 80040cc:	f040 80f8 	bne.w	80042c0 <TEST_Run+0x4f4>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 80040d0:	f8d4 35b8 	ldr.w	r3, [r4, #1464]	; 0x5b8
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	f000 8121 	beq.w	800431c <TEST_Run+0x550>
      if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_BMP)
 80040da:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80040de:	2b01      	cmp	r3, #1
 80040e0:	f000 80ff 	beq.w	80042e2 <TEST_Run+0x516>
      else if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_RAW)
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 80e8 	bne.w	80042ba <TEST_Run+0x4ee>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 80040ea:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80040ee:	f104 02de 	add.w	r2, r4, #222	; 0xde
 80040f2:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
 80040f6:	a834      	add	r0, sp, #208	; 0xd0
 80040f8:	9100      	str	r1, [sp, #0]
 80040fa:	490c      	ldr	r1, [pc, #48]	; (800412c <TEST_Run+0x360>)
 80040fc:	f01e fe5e 	bl	8022dbc <siprintf>
        write_raw(file_name, dst, size, App_Cxt_Ptr);
 8004100:	462b      	mov	r3, r5
 8004102:	f8d4 25ac 	ldr.w	r2, [r4, #1452]	; 0x5ac
 8004106:	a834      	add	r0, sp, #208	; 0xd0
 8004108:	f8d4 1598 	ldr.w	r1, [r4, #1432]	; 0x598
 800410c:	f7fd fdc6 	bl	8001c9c <write_raw>
      TestContext_Ptr->CaptureContext.capture_state = 2;
 8004110:	2302      	movs	r3, #2
 8004112:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
      break;
 8004116:	e663      	b.n	8003de0 <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004118:	f104 0254 	add.w	r2, r4, #84	; 0x54
 800411c:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
 8004120:	490c      	ldr	r1, [pc, #48]	; (8004154 <TEST_Run+0x388>)
 8004122:	a834      	add	r0, sp, #208	; 0xd0
 8004124:	f01e fe4a 	bl	8022dbc <siprintf>
          write_raw(file_name, dst, size, App_Cxt_Ptr);
 8004128:	e688      	b.n	8003e3c <TEST_Run+0x70>
 800412a:	bf00      	nop
 800412c:	08025ef0 	.word	0x08025ef0
 8004130:	08025e54 	.word	0x08025e54
 8004134:	42c80000 	.word	0x42c80000
 8004138:	08025884 	.word	0x08025884
 800413c:	08025890 	.word	0x08025890
 8004140:	08025ae4 	.word	0x08025ae4
 8004144:	08025e60 	.word	0x08025e60
 8004148:	08025a04 	.word	0x08025a04
 800414c:	08025a30 	.word	0x08025a30
 8004150:	08025ed0 	.word	0x08025ed0
 8004154:	08025e7c 	.word	0x08025e7c
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004158:	f104 0254 	add.w	r2, r4, #84	; 0x54
 800415c:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
 8004160:	497f      	ldr	r1, [pc, #508]	; (8004360 <TEST_Run+0x594>)
 8004162:	a834      	add	r0, sp, #208	; 0xd0
 8004164:	f01e fe2a 	bl	8022dbc <siprintf>
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8004168:	f8d4 15a4 	ldr.w	r1, [r4, #1444]	; 0x5a4
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800416c:	462a      	mov	r2, r5
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 800416e:	f8d4 35a8 	ldr.w	r3, [r4, #1448]	; 0x5a8
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8004172:	a834      	add	r0, sp, #208	; 0xd0
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8004174:	e9cd 1315 	strd	r1, r3, [sp, #84]	; 0x54
 8004178:	f8d4 15a0 	ldr.w	r1, [r4, #1440]	; 0x5a0
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 800417c:	f8d4 3598 	ldr.w	r3, [r4, #1432]	; 0x598
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8004180:	9114      	str	r1, [sp, #80]	; 0x50
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8004182:	a914      	add	r1, sp, #80	; 0x50
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8004184:	9317      	str	r3, [sp, #92]	; 0x5c
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8004186:	f7fd fded 	bl	8001d64 <write_bmp>
 800418a:	e629      	b.n	8003de0 <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 800418c:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 8004190:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8004194:	4973      	ldr	r1, [pc, #460]	; (8004364 <TEST_Run+0x598>)
 8004196:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
 800419a:	4640      	mov	r0, r8
 800419c:	f01e fe0e 	bl	8022dbc <siprintf>
          write_txt(file_name, "          Neural Network Output\n\n", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 80041a0:	462b      	mov	r3, r5
 80041a2:	220a      	movs	r2, #10
 80041a4:	4970      	ldr	r1, [pc, #448]	; (8004368 <TEST_Run+0x59c>)
 80041a6:	4640      	mov	r0, r8
 80041a8:	f7fd fd36 	bl	8001c18 <write_txt>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 80041ac:	f8d4 35ac 	ldr.w	r3, [r4, #1452]	; 0x5ac
 80041b0:	089b      	lsrs	r3, r3, #2
 80041b2:	f43f ae15 	beq.w	8003de0 <TEST_Run+0x14>
 80041b6:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800437c <TEST_Run+0x5b0>
 80041ba:	2600      	movs	r6, #0
 80041bc:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 80041be:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8004380 <TEST_Run+0x5b4>
 80041c2:	f8d4 3598 	ldr.w	r3, [r4, #1432]	; 0x598
 80041c6:	4651      	mov	r1, sl
 80041c8:	f859 2b04 	ldr.w	r2, [r9], #4
 80041cc:	4638      	mov	r0, r7
 80041ce:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 80041d2:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 80041d4:	ed93 7a00 	vldr	s14, [r3]
 80041d8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80041dc:	ed8d 7b00 	vstr	d7, [sp]
 80041e0:	f01e fdec 	bl	8022dbc <siprintf>
            write_txt(file_name, str, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 80041e4:	462b      	mov	r3, r5
 80041e6:	2232      	movs	r2, #50	; 0x32
 80041e8:	4639      	mov	r1, r7
 80041ea:	4640      	mov	r0, r8
 80041ec:	f7fd fd14 	bl	8001c18 <write_txt>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 80041f0:	f8d4 35ac 	ldr.w	r3, [r4, #1452]	; 0x5ac
 80041f4:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 80041f8:	d3e3      	bcc.n	80041c2 <TEST_Run+0x3f6>
 80041fa:	e5f1      	b.n	8003de0 <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80041fc:	463a      	mov	r2, r7
 80041fe:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
 8004202:	495a      	ldr	r1, [pc, #360]	; (800436c <TEST_Run+0x5a0>)
 8004204:	a834      	add	r0, sp, #208	; 0xd0
 8004206:	f01e fdd9 	bl	8022dbc <siprintf>
          write_raw(file_name, dst, size, App_Cxt_Ptr);
 800420a:	462b      	mov	r3, r5
 800420c:	f8d4 25ac 	ldr.w	r2, [r4, #1452]	; 0x5ac
 8004210:	a834      	add	r0, sp, #208	; 0xd0
 8004212:	f8d4 1598 	ldr.w	r1, [r4, #1432]	; 0x598
 8004216:	f7fd fd41 	bl	8001c9c <write_raw>
 800421a:	e6f8      	b.n	800400e <TEST_Run+0x242>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 800421c:	463a      	mov	r2, r7
 800421e:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
 8004222:	4953      	ldr	r1, [pc, #332]	; (8004370 <TEST_Run+0x5a4>)
 8004224:	a834      	add	r0, sp, #208	; 0xd0
 8004226:	f01e fdc9 	bl	8022dbc <siprintf>
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 800422a:	f8d4 15a4 	ldr.w	r1, [r4, #1444]	; 0x5a4
 800422e:	f8d4 35a8 	ldr.w	r3, [r4, #1448]	; 0x5a8
          write_bmp(file_name, &img, App_Cxt_Ptr);
 8004232:	462a      	mov	r2, r5
 8004234:	a834      	add	r0, sp, #208	; 0xd0
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8004236:	e9cd 1315 	strd	r1, r3, [sp, #84]	; 0x54
          img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 800423a:	f8d4 3598 	ldr.w	r3, [r4, #1432]	; 0x598
          write_bmp(file_name, &img, App_Cxt_Ptr);
 800423e:	a914      	add	r1, sp, #80	; 0x50
          img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8004240:	9317      	str	r3, [sp, #92]	; 0x5c
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8004242:	f8d4 35a0 	ldr.w	r3, [r4, #1440]	; 0x5a0
 8004246:	9314      	str	r3, [sp, #80]	; 0x50
          write_bmp(file_name, &img, App_Cxt_Ptr);
 8004248:	f7fd fd8c 	bl	8001d64 <write_bmp>
 800424c:	e6df      	b.n	800400e <TEST_Run+0x242>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 800424e:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 8004252:	463a      	mov	r2, r7
 8004254:	4943      	ldr	r1, [pc, #268]	; (8004364 <TEST_Run+0x598>)
 8004256:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
 800425a:	4640      	mov	r0, r8
 800425c:	f01e fdae 	bl	8022dbc <siprintf>
          write_txt(file_name, "          Neural Network Output\n\n", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8004260:	462b      	mov	r3, r5
 8004262:	220a      	movs	r2, #10
 8004264:	4940      	ldr	r1, [pc, #256]	; (8004368 <TEST_Run+0x59c>)
 8004266:	4640      	mov	r0, r8
 8004268:	f7fd fcd6 	bl	8001c18 <write_txt>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 800426c:	f8d4 35ac 	ldr.w	r3, [r4, #1452]	; 0x5ac
 8004270:	089b      	lsrs	r3, r3, #2
 8004272:	f43f aecc 	beq.w	800400e <TEST_Run+0x242>
 8004276:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800437c <TEST_Run+0x5b0>
 800427a:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 800427c:	f8df a100 	ldr.w	sl, [pc, #256]	; 8004380 <TEST_Run+0x5b4>
 8004280:	f8d4 3598 	ldr.w	r3, [r4, #1432]	; 0x598
 8004284:	4651      	mov	r1, sl
 8004286:	f859 2b04 	ldr.w	r2, [r9], #4
 800428a:	4638      	mov	r0, r7
 800428c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8004290:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8004292:	ed93 7a00 	vldr	s14, [r3]
 8004296:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800429a:	ed8d 7b00 	vstr	d7, [sp]
 800429e:	f01e fd8d 	bl	8022dbc <siprintf>
            write_txt(file_name, str, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 80042a2:	462b      	mov	r3, r5
 80042a4:	2232      	movs	r2, #50	; 0x32
 80042a6:	4639      	mov	r1, r7
 80042a8:	4640      	mov	r0, r8
 80042aa:	f7fd fcb5 	bl	8001c18 <write_txt>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 80042ae:	f8d4 35ac 	ldr.w	r3, [r4, #1452]	; 0x5ac
 80042b2:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 80042b6:	d3e3      	bcc.n	8004280 <TEST_Run+0x4b4>
 80042b8:	e6a9      	b.n	800400e <TEST_Run+0x242>
        Error_Handler(); /* Capture Format no supported */
 80042ba:	f000 fec1 	bl	8005040 <Error_Handler>
 80042be:	e727      	b.n	8004110 <TEST_Run+0x344>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80042c0:	f015 fefa 	bl	801a0b8 <UTIL_LCD_GetFont>
 80042c4:	88c1      	ldrh	r1, [r0, #6]
 80042c6:	2301      	movs	r3, #1
 80042c8:	4a2a      	ldr	r2, [pc, #168]	; (8004374 <TEST_Run+0x5a8>)
 80042ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80042ce:	2000      	movs	r0, #0
 80042d0:	0089      	lsls	r1, r1, #2
 80042d2:	f015 ffe9 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80042d6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80042d8:	f7fd fb06 	bl	80018e8 <DISPLAY_Refresh>
        Error_Handler();
 80042dc:	f000 feb0 	bl	8005040 <Error_Handler>
 80042e0:	e6f6      	b.n	80040d0 <TEST_Run+0x304>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 80042e2:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80042e6:	f104 02de 	add.w	r2, r4, #222	; 0xde
 80042ea:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
 80042ee:	a834      	add	r0, sp, #208	; 0xd0
 80042f0:	9100      	str	r1, [sp, #0]
 80042f2:	4921      	ldr	r1, [pc, #132]	; (8004378 <TEST_Run+0x5ac>)
 80042f4:	f01e fd62 	bl	8022dbc <siprintf>
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 80042f8:	f8d4 15a4 	ldr.w	r1, [r4, #1444]	; 0x5a4
 80042fc:	f8d4 35a8 	ldr.w	r3, [r4, #1448]	; 0x5a8
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8004300:	462a      	mov	r2, r5
 8004302:	a834      	add	r0, sp, #208	; 0xd0
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8004304:	e9cd 1315 	strd	r1, r3, [sp, #84]	; 0x54
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8004308:	f8d4 3598 	ldr.w	r3, [r4, #1432]	; 0x598
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800430c:	a914      	add	r1, sp, #80	; 0x50
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 800430e:	9317      	str	r3, [sp, #92]	; 0x5c
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8004310:	f8d4 35a0 	ldr.w	r3, [r4, #1440]	; 0x5a0
 8004314:	9314      	str	r3, [sp, #80]	; 0x50
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8004316:	f7fd fd25 	bl	8001d64 <write_bmp>
 800431a:	e6f9      	b.n	8004110 <TEST_Run+0x344>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 800431c:	f8d4 1598 	ldr.w	r1, [r4, #1432]	; 0x598
 8004320:	f8d4 35a0 	ldr.w	r3, [r4, #1440]	; 0x5a0
 8004324:	f8d4 25a4 	ldr.w	r2, [r4, #1444]	; 0x5a4
 8004328:	4608      	mov	r0, r1
 800432a:	fb03 f202 	mul.w	r2, r3, r2
 800432e:	f7fd fb53 	bl	80019d8 <PREPROC_Pixel_RB_Swap>
 8004332:	e6d2      	b.n	80040da <TEST_Run+0x30e>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8004334:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8004338:	f104 02de 	add.w	r2, r4, #222	; 0xde
 800433c:	f8d4 359c 	ldr.w	r3, [r4, #1436]	; 0x59c
 8004340:	a834      	add	r0, sp, #208	; 0xd0
 8004342:	9100      	str	r1, [sp, #0]
 8004344:	490c      	ldr	r1, [pc, #48]	; (8004378 <TEST_Run+0x5ac>)
 8004346:	f01e fd39 	bl	8022dbc <siprintf>
 800434a:	e70d      	b.n	8004168 <TEST_Run+0x39c>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 800434c:	f8d4 35a0 	ldr.w	r3, [r4, #1440]	; 0x5a0
 8004350:	4608      	mov	r0, r1
 8004352:	f8d4 25a4 	ldr.w	r2, [r4, #1444]	; 0x5a4
 8004356:	fb03 f202 	mul.w	r2, r3, r2
 800435a:	f7fd fb3d 	bl	80019d8 <PREPROC_Pixel_RB_Swap>
 800435e:	e55a      	b.n	8003e16 <TEST_Run+0x4a>
 8004360:	08025ec4 	.word	0x08025ec4
 8004364:	08025e88 	.word	0x08025e88
 8004368:	08025e94 	.word	0x08025e94
 800436c:	08025e7c 	.word	0x08025e7c
 8004370:	08025e70 	.word	0x08025e70
 8004374:	08025a04 	.word	0x08025a04
 8004378:	08025ee0 	.word	0x08025ee0
 800437c:	20000004 	.word	0x20000004
 8004380:	08025eb8 	.word	0x08025eb8

08004384 <TEST_PostProcess>:
 *
 * @param TestContext_Ptr pointer to test context
 */
void TEST_PostProcess(TestContext_TypeDef *TestContext_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8004384:	f8d0 35d0 	ldr.w	r3, [r0, #1488]	; 0x5d0
{
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	ed2d 8b02 	vpush	{d8}

  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 8004390:	781f      	ldrb	r7, [r3, #0]
{
 8004392:	b099      	sub	sp, #100	; 0x64
  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 8004394:	2f04      	cmp	r7, #4
 8004396:	d009      	beq.n	80043ac <TEST_PostProcess+0x28>
  {
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == DUMP)
 8004398:	2f03      	cmp	r7, #3
 800439a:	d04d      	beq.n	8004438 <TEST_PostProcess+0xb4>
  {
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == VALID)
 800439c:	2f02      	cmp	r7, #2
 800439e:	f000 80ac 	beq.w	80044fa <TEST_PostProcess+0x176>
  {
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
}
 80043a2:	b019      	add	sp, #100	; 0x64
 80043a4:	ecbd 8b02 	vpop	{d8}
 80043a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 80043ac:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 80043ae:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80043b2:	f8d4 65d0 	ldr.w	r6, [r4, #1488]	; 0x5d0
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 80043b6:	b315      	cbz	r5, 80043fe <TEST_PostProcess+0x7a>
  else if(TestContext_Ptr->CaptureContext.capture_state==2)
 80043b8:	2d02      	cmp	r5, #2
 80043ba:	d1f2      	bne.n	80043a2 <TEST_PostProcess+0x1e>
    TestContext_Ptr->CaptureContext.capture_state = 0;
 80043bc:	2000      	movs	r0, #0
 80043be:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    BSP_SD_DeInit(0);
 80043c2:	f006 fa3d 	bl	800a840 <BSP_SD_DeInit>
    CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80043c6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80043c8:	f7fc ffe0 	bl	800138c <CAMERA_Init>
    while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 80043cc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80043ce:	7d13      	ldrb	r3, [r2, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0fc      	beq.n	80043ce <TEST_PostProcess+0x4a>
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 80043d4:	2500      	movs	r5, #0
    BSP_CAMERA_Resume(0);
 80043d6:	4628      	mov	r0, r5
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 80043d8:	7515      	strb	r5, [r2, #20]
    BSP_CAMERA_Resume(0);
 80043da:	f005 fbab 	bl	8009b34 <BSP_CAMERA_Resume>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 80043de:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f040 8392 	bne.w	8004b0c <TEST_PostProcess+0x788>
    BSP_LED_On(LED_GREEN);
 80043e8:	2000      	movs	r0, #0
 80043ea:	f004 fb01 	bl	80089f0 <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 80043ee:	2002      	movs	r0, #2
}
 80043f0:	b019      	add	sp, #100	; 0x64
 80043f2:	ecbd 8b02 	vpop	{d8}
 80043f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    BSP_LED_Off(LED_RED);
 80043fa:	f004 bb0b 	b.w	8008a14 <BSP_LED_Off>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->CaptureContext.capture_session_name, LEFT_MODE);
 80043fe:	f015 fe5b 	bl	801a0b8 <UTIL_LCD_GetFont>
 8004402:	2303      	movs	r3, #3
 8004404:	88c1      	ldrh	r1, [r0, #6]
 8004406:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
 800440a:	4628      	mov	r0, r5
 800440c:	f015 ff4c 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE READY", RIGHT_MODE);
 8004410:	f015 fe52 	bl	801a0b8 <UTIL_LCD_GetFont>
 8004414:	2302      	movs	r3, #2
 8004416:	88c1      	ldrh	r1, [r0, #6]
 8004418:	4628      	mov	r0, r5
 800441a:	4a94      	ldr	r2, [pc, #592]	; (800466c <TEST_PostProcess+0x2e8>)
 800441c:	f015 ff44 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004420:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004422:	f7fd fa61 	bl	80018e8 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8004426:	4628      	mov	r0, r5
 8004428:	f004 fb66 	bl	8008af8 <BSP_PB_GetState>
 800442c:	2800      	cmp	r0, #0
 800442e:	d0b8      	beq.n	80043a2 <TEST_PostProcess+0x1e>
      TestContext_Ptr->CaptureContext.capture_state = 1;
 8004430:	2301      	movs	r3, #1
 8004432:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8004436:	e7b4      	b.n	80043a2 <TEST_PostProcess+0x1e>
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8004438:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if(TestContext_Ptr->DumpContext.dump_state==0)
 800443a:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800443e:	f8d4 55d0 	ldr.w	r5, [r4, #1488]	; 0x5d0
  if(TestContext_Ptr->DumpContext.dump_state==0)
 8004442:	2e00      	cmp	r6, #0
 8004444:	f000 80ca 	beq.w	80045dc <TEST_PostProcess+0x258>
  else if(TestContext_Ptr->DumpContext.dump_state == 2)
 8004448:	2e02      	cmp	r6, #2
 800444a:	d1aa      	bne.n	80043a2 <TEST_PostProcess+0x1e>
    if(TestContext_Ptr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 800444c:	7923      	ldrb	r3, [r4, #4]
 800444e:	2b03      	cmp	r3, #3
 8004450:	f000 8332 	beq.w	8004ab8 <TEST_PostProcess+0x734>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 8004454:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 831b 	beq.w	8004a94 <TEST_PostProcess+0x710>
 800445e:	2b01      	cmp	r3, #1
 8004460:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 8004464:	f000 8313 	beq.w	8004a8e <TEST_PostProcess+0x70a>
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004468:	2200      	movs	r2, #0
 800446a:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 800446e:	2b01      	cmp	r3, #1
 8004470:	f000 836f 	beq.w	8004b52 <TEST_PostProcess+0x7ce>
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8004474:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004478:	2702      	movs	r7, #2
 800447a:	4e7d      	ldr	r6, [pc, #500]	; (8004670 <TEST_PostProcess+0x2ec>)
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 83a3 	beq.w	8004bc8 <TEST_PostProcess+0x844>
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0xFFFF)
 8004482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004486:	4293      	cmp	r3, r2
 8004488:	f000 83e6 	beq.w	8004c58 <TEST_PostProcess+0x8d4>
          TestContext_Ptr->UartContext.uart_host_requested_dump_number --;
 800448c:	3b01      	subs	r3, #1
 800448e:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 8004492:	f015 fe11 	bl	801a0b8 <UTIL_LCD_GetFont>
 8004496:	2303      	movs	r3, #3
 8004498:	88c1      	ldrh	r1, [r0, #6]
 800449a:	f104 0210 	add.w	r2, r4, #16
 800449e:	2000      	movs	r0, #0
 80044a0:	f015 ff02 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 80044a4:	f015 fe08 	bl	801a0b8 <UTIL_LCD_GetFont>
 80044a8:	2302      	movs	r3, #2
 80044aa:	88c1      	ldrh	r1, [r0, #6]
 80044ac:	2000      	movs	r0, #0
 80044ae:	4a71      	ldr	r2, [pc, #452]	; (8004674 <TEST_PostProcess+0x2f0>)
 80044b0:	f015 fefa 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80044b4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80044b6:	f7fd fa17 	bl	80018e8 <DISPLAY_Refresh>
        TestContext_Ptr->DumpContext.dump_state = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 80044c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80044c2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 80044c4:	6819      	ldr	r1, [r3, #0]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80044c6:	6814      	ldr	r4, [r2, #0]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 80044c8:	6808      	ldr	r0, [r1, #0]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80044ca:	4b6b      	ldr	r3, [pc, #428]	; (8004678 <TEST_PostProcess+0x2f4>)
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 80044cc:	6030      	str	r0, [r6, #0]
 80044ce:	6848      	ldr	r0, [r1, #4]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80044d0:	601c      	str	r4, [r3, #0]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 80044d2:	6070      	str	r0, [r6, #4]
 80044d4:	688c      	ldr	r4, [r1, #8]
 80044d6:	68c8      	ldr	r0, [r1, #12]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80044d8:	6851      	ldr	r1, [r2, #4]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 80044da:	60f0      	str	r0, [r6, #12]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80044dc:	6059      	str	r1, [r3, #4]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 80044de:	60b4      	str	r4, [r6, #8]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80044e0:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 80044e4:	6912      	ldr	r2, [r2, #16]
 80044e6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80044ea:	611a      	str	r2, [r3, #16]
    BSP_LED_On(LED_GREEN);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f004 fa7f 	bl	80089f0 <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 80044f2:	2002      	movs	r0, #2
 80044f4:	f004 fa8e 	bl	8008a14 <BSP_LED_Off>
 80044f8:	e753      	b.n	80043a2 <TEST_PostProcess+0x1e>
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 80044fa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 80044fc:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8004500:	f8d4 95d0 	ldr.w	r9, [r4, #1488]	; 0x5d0
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80c3 	beq.w	8004690 <TEST_PostProcess+0x30c>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 800450a:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d057      	beq.n	80045c2 <TEST_PostProcess+0x23e>
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 8004512:	2200      	movs	r2, #0
 8004514:	2300      	movs	r3, #0
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8004516:	f504 6e8c 	add.w	lr, r4, #1120	; 0x460
 800451a:	f504 6c8e 	add.w	ip, r4, #1136	; 0x470
 800451e:	f504 6190 	add.w	r1, r4, #1152	; 0x480
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004522:	2601      	movs	r6, #1
      TestContext_Ptr->ValidationContext.validation_completed=0;
 8004524:	2000      	movs	r0, #0
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8004526:	f504 688a 	add.w	r8, r4, #1104	; 0x450
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 800452a:	4d54      	ldr	r5, [pc, #336]	; (800467c <TEST_PostProcess+0x2f8>)
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 800452c:	f884 64f4 	strb.w	r6, [r4, #1268]	; 0x4f4
      TestContext_Ptr->ValidationContext.validation_completed=0;
 8004530:	f8c4 0440 	str.w	r0, [r4, #1088]	; 0x440
      TestContext_Ptr->ValidationContext.nbr_tested = 1;
 8004534:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 8004538:	e9c4 2344 	strd	r2, r3, [r4, #272]	; 0x110
      TestContext_Ptr->ValidationContext.avg_loss = 0.0;
 800453c:	e9c4 2346 	strd	r2, r3, [r4, #280]	; 0x118
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8004540:	2200      	movs	r2, #0
 8004542:	2300      	movs	r3, #0
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004544:	f204 540c 	addw	r4, r4, #1292	; 0x50c
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8004548:	e948 2302 	strd	r2, r3, [r8, #-8]
 800454c:	e9c8 2300 	strd	r2, r3, [r8]
 8004550:	e94e 2302 	strd	r2, r3, [lr, #-8]
 8004554:	e9ce 2300 	strd	r2, r3, [lr]
 8004558:	e94c 2302 	strd	r2, r3, [ip, #-8]
 800455c:	e9cc 2300 	strd	r2, r3, [ip]
 8004560:	e941 2302 	strd	r2, r3, [r1, #-8]
 8004564:	e9c1 2300 	strd	r2, r3, [r1]
      App_Cxt_Ptr->run_loop = 0;
 8004568:	f8c9 0004 	str.w	r0, [r9, #4]
      BSP_SD_DeInit(0);
 800456c:	f006 f968 	bl	800a840 <BSP_SD_DeInit>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004570:	463a      	mov	r2, r7
 8004572:	2160      	movs	r1, #96	; 0x60
 8004574:	4628      	mov	r0, r5
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004576:	702f      	strb	r7, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004578:	f000 fcf2 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800457c:	4632      	mov	r2, r6
 800457e:	4629      	mov	r1, r5
 8004580:	4620      	mov	r0, r4
 8004582:	f00d fae9 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8004586:	2800      	cmp	r0, #0
 8004588:	f040 82ba 	bne.w	8004b00 <TEST_PostProcess+0x77c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800458c:	4620      	mov	r0, r4
 800458e:	f00d fd13 	bl	8011fb8 <HAL_UART_GetState>
 8004592:	2820      	cmp	r0, #32
 8004594:	d1fa      	bne.n	800458c <TEST_PostProcess+0x208>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004596:	220a      	movs	r2, #10
 8004598:	4939      	ldr	r1, [pc, #228]	; (8004680 <TEST_PostProcess+0x2fc>)
 800459a:	4620      	mov	r0, r4
 800459c:	f00d fb2e 	bl	8011bfc <HAL_UART_Receive_DMA>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	f040 82b0 	bne.w	8004b06 <TEST_PostProcess+0x782>
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80045a6:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 80045aa:	4b33      	ldr	r3, [pc, #204]	; (8004678 <TEST_PostProcess+0x2f4>)
 80045ac:	6890      	ldr	r0, [r2, #8]
 80045ae:	e9d2 4100 	ldrd	r4, r1, [r2]
 80045b2:	e9c3 4100 	strd	r4, r1, [r3]
 80045b6:	e9d2 1203 	ldrd	r1, r2, [r2, #12]
 80045ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80045be:	611a      	str	r2, [r3, #16]
      for(uint32_t i=0; i<APP_FRAMEOPERATION_NUM;i++)
 80045c0:	e6ef      	b.n	80043a2 <TEST_PostProcess+0x1e>
        HAL_Delay(100);
 80045c2:	2064      	movs	r0, #100	; 0x64
 80045c4:	f006 fac0 	bl	800ab48 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 80045c8:	2000      	movs	r0, #0
 80045ca:	f004 fa35 	bl	8008a38 <BSP_LED_Toggle>
        HAL_Delay(100);
 80045ce:	2064      	movs	r0, #100	; 0x64
 80045d0:	f006 faba 	bl	800ab48 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 80045d4:	2000      	movs	r0, #0
 80045d6:	f004 fa2f 	bl	8008a38 <BSP_LED_Toggle>
      while (1)
 80045da:	e7f2      	b.n	80045c2 <TEST_PostProcess+0x23e>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 80045dc:	f015 fd6c 	bl	801a0b8 <UTIL_LCD_GetFont>
 80045e0:	463b      	mov	r3, r7
 80045e2:	88c1      	ldrh	r1, [r0, #6]
 80045e4:	f104 0210 	add.w	r2, r4, #16
 80045e8:	4630      	mov	r0, r6
 80045ea:	f015 fe5d 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 80045ee:	f015 fd63 	bl	801a0b8 <UTIL_LCD_GetFont>
 80045f2:	2302      	movs	r3, #2
 80045f4:	88c1      	ldrh	r1, [r0, #6]
 80045f6:	4630      	mov	r0, r6
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <TEST_PostProcess+0x2f0>)
 80045fa:	f015 fe55 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 80045fe:	ed95 7a04 	vldr	s14, [r5, #16]
 8004602:	eddf 7a20 	vldr	s15, [pc, #128]	; 8004684 <TEST_PostProcess+0x300>
 8004606:	a806      	add	r0, sp, #24
 8004608:	68ea      	ldr	r2, [r5, #12]
 800460a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800460e:	491e      	ldr	r1, [pc, #120]	; (8004688 <TEST_PostProcess+0x304>)
 8004610:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004614:	ed8d 7b00 	vstr	d7, [sp]
 8004618:	f01e fbd0 	bl	8022dbc <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 800461c:	f015 fd4c 	bl	801a0b8 <UTIL_LCD_GetFont>
 8004620:	88c1      	ldrh	r1, [r0, #6]
 8004622:	2301      	movs	r3, #1
 8004624:	aa06      	add	r2, sp, #24
 8004626:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 800462a:	4630      	mov	r0, r6
 800462c:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8004630:	f015 fe3a 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8004634:	68aa      	ldr	r2, [r5, #8]
 8004636:	4915      	ldr	r1, [pc, #84]	; (800468c <TEST_PostProcess+0x308>)
 8004638:	a806      	add	r0, sp, #24
 800463a:	f01e fbbf 	bl	8022dbc <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 800463e:	f015 fd3b 	bl	801a0b8 <UTIL_LCD_GetFont>
 8004642:	88c1      	ldrh	r1, [r0, #6]
 8004644:	aa06      	add	r2, sp, #24
 8004646:	2301      	movs	r3, #1
 8004648:	0109      	lsls	r1, r1, #4
 800464a:	4630      	mov	r0, r6
 800464c:	f015 fe2c 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004650:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004652:	f7fd f949 	bl	80018e8 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8004656:	4630      	mov	r0, r6
 8004658:	f004 fa4e 	bl	8008af8 <BSP_PB_GetState>
 800465c:	2800      	cmp	r0, #0
 800465e:	f43f aea0 	beq.w	80043a2 <TEST_PostProcess+0x1e>
      TestContext_Ptr->DumpContext.dump_state = 1;
 8004662:	2301      	movs	r3, #1
 8004664:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8004668:	e69b      	b.n	80043a2 <TEST_PostProcess+0x1e>
 800466a:	bf00      	nop
 800466c:	08025f00 	.word	0x08025f00
 8004670:	d0cb08a0 	.word	0xd0cb08a0
 8004674:	08025f10 	.word	0x08025f10
 8004678:	d0d3bcc0 	.word	0xd0d3bcc0
 800467c:	30000280 	.word	0x30000280
 8004680:	300002e0 	.word	0x300002e0
 8004684:	42c80000 	.word	0x42c80000
 8004688:	08025884 	.word	0x08025884
 800468c:	08025890 	.word	0x08025890
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8004690:	f504 6880 	add.w	r8, r4, #1024	; 0x400
 8004694:	4ea2      	ldr	r6, [pc, #648]	; (8004920 <TEST_PostProcess+0x59c>)
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8004696:	f204 27ba 	addw	r7, r4, #698	; 0x2ba
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 800469a:	4641      	mov	r1, r8
 800469c:	4630      	mov	r0, r6
 800469e:	f01e fbad 	bl	8022dfc <stpcpy>
    strcat(tmp_msg, "/");
 80046a2:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80046a4:	3001      	adds	r0, #1
 80046a6:	4639      	mov	r1, r7
    strcat(tmp_msg, "/");
 80046a8:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80046ac:	f01e fbaf 	bl	8022e0e <strcpy>
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 80046b0:	f8d9 3014 	ldr.w	r3, [r9, #20]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 80046b4:	f8d4 53bc 	ldr.w	r5, [r4, #956]	; 0x3bc
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 80046b8:	9302      	str	r3, [sp, #8]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 80046ba:	42ab      	cmp	r3, r5
 80046bc:	f040 8207 	bne.w	8004ace <TEST_PostProcess+0x74a>
 80046c0:	4b98      	ldr	r3, [pc, #608]	; (8004924 <TEST_PostProcess+0x5a0>)
 80046c2:	9303      	str	r3, [sp, #12]
    float confidence = App_Cxt_Ptr->nn_top1_output_class_proba;
 80046c4:	edd9 8a04 	vldr	s17, [r9, #16]
    TestContext_Ptr->ValidationContext.nbr_tested++;
 80046c8:	f8d4 6120 	ldr.w	r6, [r4, #288]	; 0x120
    if (confidence > 0)
 80046cc:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    TestContext_Ptr->ValidationContext.nbr_tested++;
 80046d0:	3601      	adds	r6, #1
    if (confidence > 0)
 80046d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    TestContext_Ptr->ValidationContext.nbr_tested++;
 80046d6:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
    if (confidence > 0)
 80046da:	f340 820e 	ble.w	8004afa <TEST_PostProcess+0x776>
      categorical_crossentropy = -log((double)confidence);
 80046de:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 80046e2:	f020 fc55 	bl	8024f90 <log>
 80046e6:	eeb1 0b40 	vneg.f64	d0, d0
    TestContext_Ptr->ValidationContext.overall_loss += categorical_crossentropy;
 80046ea:	ed94 6b44 	vldr	d6, [r4, #272]	; 0x110
 80046ee:	ee30 6b06 	vadd.f64	d6, d0, d6
 80046f2:	ed84 6b44 	vstr	d6, [r4, #272]	; 0x110
    if (TestContext_Ptr->ValidationContext.nbr_tested > 0)
 80046f6:	b13e      	cbz	r6, 8004708 <TEST_PostProcess+0x384>
      TestContext_Ptr->ValidationContext.avg_loss = TestContext_Ptr->ValidationContext.overall_loss / (double)TestContext_Ptr->ValidationContext.nbr_tested;
 80046f8:	ee07 6a90 	vmov	s15, r6
 80046fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004700:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004704:	ed84 5b46 	vstr	d5, [r4, #280]	; 0x118
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 8004708:	9b02      	ldr	r3, [sp, #8]
 800470a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800470e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004712:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8004716:	3201      	adds	r2, #1
 8004718:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
      if (conf_matrix[row][col] > conf_max)
 800471c:	f8d4 2448 	ldr.w	r2, [r4, #1096]	; 0x448
 8004720:	f8d4 144c 	ldr.w	r1, [r4, #1100]	; 0x44c
 8004724:	2a00      	cmp	r2, #0
 8004726:	4613      	mov	r3, r2
 8004728:	bf38      	it	cc
 800472a:	2300      	movcc	r3, #0
 800472c:	428a      	cmp	r2, r1
 800472e:	d201      	bcs.n	8004734 <TEST_PostProcess+0x3b0>
        conf_max = conf_matrix[row][col];
 8004730:	460b      	mov	r3, r1
 8004732:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004734:	f8d4 1450 	ldr.w	r1, [r4, #1104]	; 0x450
 8004738:	428a      	cmp	r2, r1
 800473a:	d201      	bcs.n	8004740 <TEST_PostProcess+0x3bc>
        conf_max = conf_matrix[row][col];
 800473c:	460b      	mov	r3, r1
 800473e:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004740:	f8d4 1454 	ldr.w	r1, [r4, #1108]	; 0x454
        conf_max = conf_matrix[row][col];
 8004744:	428a      	cmp	r2, r1
 8004746:	bf38      	it	cc
 8004748:	460b      	movcc	r3, r1
      if (conf_matrix[row][col] > conf_max)
 800474a:	f8d4 1458 	ldr.w	r1, [r4, #1112]	; 0x458
 800474e:	4299      	cmp	r1, r3
 8004750:	461a      	mov	r2, r3
 8004752:	d901      	bls.n	8004758 <TEST_PostProcess+0x3d4>
        conf_max = conf_matrix[row][col];
 8004754:	460b      	mov	r3, r1
 8004756:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004758:	f8d4 145c 	ldr.w	r1, [r4, #1116]	; 0x45c
 800475c:	428a      	cmp	r2, r1
 800475e:	d201      	bcs.n	8004764 <TEST_PostProcess+0x3e0>
        conf_max = conf_matrix[row][col];
 8004760:	460b      	mov	r3, r1
 8004762:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004764:	f8d4 1460 	ldr.w	r1, [r4, #1120]	; 0x460
 8004768:	428a      	cmp	r2, r1
 800476a:	d201      	bcs.n	8004770 <TEST_PostProcess+0x3ec>
        conf_max = conf_matrix[row][col];
 800476c:	460b      	mov	r3, r1
 800476e:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004770:	f8d4 1464 	ldr.w	r1, [r4, #1124]	; 0x464
        conf_max = conf_matrix[row][col];
 8004774:	428a      	cmp	r2, r1
 8004776:	bf38      	it	cc
 8004778:	460b      	movcc	r3, r1
      if (conf_matrix[row][col] > conf_max)
 800477a:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
 800477e:	4299      	cmp	r1, r3
 8004780:	461a      	mov	r2, r3
 8004782:	d901      	bls.n	8004788 <TEST_PostProcess+0x404>
        conf_max = conf_matrix[row][col];
 8004784:	460b      	mov	r3, r1
 8004786:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004788:	f8d4 146c 	ldr.w	r1, [r4, #1132]	; 0x46c
 800478c:	428a      	cmp	r2, r1
 800478e:	d201      	bcs.n	8004794 <TEST_PostProcess+0x410>
        conf_max = conf_matrix[row][col];
 8004790:	460b      	mov	r3, r1
 8004792:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004794:	f8d4 1470 	ldr.w	r1, [r4, #1136]	; 0x470
 8004798:	428a      	cmp	r2, r1
 800479a:	d201      	bcs.n	80047a0 <TEST_PostProcess+0x41c>
        conf_max = conf_matrix[row][col];
 800479c:	460b      	mov	r3, r1
 800479e:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80047a0:	f8d4 1474 	ldr.w	r1, [r4, #1140]	; 0x474
 80047a4:	f204 4a44 	addw	sl, r4, #1092	; 0x444
 80047a8:	f8d4 5478 	ldr.w	r5, [r4, #1144]	; 0x478
        float value_norm = value / (float)(conf_max + 1);
 80047ac:	f04f 083c 	mov.w	r8, #60	; 0x3c
        conf_max = conf_matrix[row][col];
 80047b0:	428a      	cmp	r2, r1
 80047b2:	bf38      	it	cc
 80047b4:	460b      	movcc	r3, r1
  UTIL_LCD_SetFont(&Font12);
 80047b6:	485c      	ldr	r0, [pc, #368]	; (8004928 <TEST_PostProcess+0x5a4>)
 80047b8:	af06      	add	r7, sp, #24
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 80047ba:	f8df b188 	ldr.w	fp, [pc, #392]	; 8004944 <TEST_PostProcess+0x5c0>
 80047be:	429d      	cmp	r5, r3
 80047c0:	bf38      	it	cc
 80047c2:	461d      	movcc	r5, r3
 80047c4:	f8d4 347c 	ldr.w	r3, [r4, #1148]	; 0x47c
 80047c8:	429d      	cmp	r5, r3
 80047ca:	bf38      	it	cc
 80047cc:	461d      	movcc	r5, r3
 80047ce:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
 80047d2:	429d      	cmp	r5, r3
 80047d4:	bf38      	it	cc
 80047d6:	461d      	movcc	r5, r3
 80047d8:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 80047dc:	429d      	cmp	r5, r3
 80047de:	bf38      	it	cc
 80047e0:	461d      	movcc	r5, r3
  UTIL_LCD_SetFont(&Font12);
 80047e2:	f015 fc61 	bl	801a0a8 <UTIL_LCD_SetFont>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 80047e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        float value_norm = value / (float)(conf_max + 1);
 80047ea:	3501      	adds	r5, #1
 80047ec:	ee07 5a90 	vmov	s15, r5
 80047f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f4:	e9cd 4904 	strd	r4, r9, [sp, #16]
 80047f8:	ee87 8a27 	vdiv.f32	s16, s14, s15
        conf_max = conf_matrix[row][col];
 80047fc:	4655      	mov	r5, sl
 80047fe:	f240 1481 	movw	r4, #385	; 0x181
        sprintf(conf_value, ".");
 8004802:	262e      	movs	r6, #46	; 0x2e
      uint32_t value = conf_matrix[row][col];
 8004804:	f855 3f04 	ldr.w	r3, [r5, #4]!
        float value_norm = value / (float)(conf_max + 1);
 8004808:	ee07 3a90 	vmov	s15, r3
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 800480c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
        float value_norm = value / (float)(conf_max + 1);
 8004810:	eef8 7a67 	vcvt.f32.u32	s15, s15
      if (value > 0)
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8138 	beq.w	8004a8a <TEST_PostProcess+0x706>
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 800481a:	ee67 7a87 	vmul.f32	s15, s15, s14
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 800481e:	4b43      	ldr	r3, [pc, #268]	; (800492c <TEST_PostProcess+0x5a8>)
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004820:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004824:	fefb 7a67 	vrintm.f32	s15, s15
 8004828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800482c:	ee17 9a90 	vmov	r9, s15
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 8004830:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8004834:	f015 fc30 	bl	801a098 <UTIL_LCD_SetBackColor>
        uint32_t text_color = heat_map_idx > 5 ? UTIL_LCD_COLOR_BLACK : UTIL_LCD_COLOR_WHITE;
 8004838:	f1b9 0f05 	cmp.w	r9, #5
        UTIL_LCD_SetTextColor(text_color);
 800483c:	bfcc      	ite	gt
 800483e:	f04f 407f 	movgt.w	r0, #4278190080	; 0xff000000
 8004842:	f04f 30ff 	movle.w	r0, #4294967295
 8004846:	f015 fc1f 	bl	801a088 <UTIL_LCD_SetTextColor>
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 800484a:	682a      	ldr	r2, [r5, #0]
 800484c:	4659      	mov	r1, fp
 800484e:	4638      	mov	r0, r7
 8004850:	f01e fab4 	bl	8022dbc <siprintf>
      UTIL_LCD_DisplayStringAt(x_off + col * 20, y_off + row * 20, (uint8_t *)conf_value, LEFT_MODE);
 8004854:	2303      	movs	r3, #3
 8004856:	463a      	mov	r2, r7
 8004858:	4641      	mov	r1, r8
 800485a:	4620      	mov	r0, r4
 800485c:	f015 fd24 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8004860:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004864:	f015 fc18 	bl	801a098 <UTIL_LCD_SetBackColor>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	f015 fc0c 	bl	801a088 <UTIL_LCD_SetTextColor>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8004870:	3414      	adds	r4, #20
 8004872:	f240 13d1 	movw	r3, #465	; 0x1d1
 8004876:	429c      	cmp	r4, r3
 8004878:	d1c4      	bne.n	8004804 <TEST_PostProcess+0x480>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 800487a:	f108 0814 	add.w	r8, r8, #20
 800487e:	f10a 0a10 	add.w	sl, sl, #16
 8004882:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 8004886:	d1b9      	bne.n	80047fc <TEST_PostProcess+0x478>
  UTIL_LCD_SetFont(&Font20);
 8004888:	4829      	ldr	r0, [pc, #164]	; (8004930 <TEST_PostProcess+0x5ac>)
 800488a:	e9dd 4904 	ldrd	r4, r9, [sp, #16]
 800488e:	f015 fc0b 	bl	801a0a8 <UTIL_LCD_SetFont>
    sprintf(tmp_msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[predicted_class], confidence * 100);
 8004892:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004934 <TEST_PostProcess+0x5b0>
 8004896:	4928      	ldr	r1, [pc, #160]	; (8004938 <TEST_PostProcess+0x5b4>)
 8004898:	ee28 7a87 	vmul.f32	s14, s17, s14
 800489c:	4820      	ldr	r0, [pc, #128]	; (8004920 <TEST_PostProcess+0x59c>)
 800489e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048a2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80048a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048aa:	ed8d 7b00 	vstr	d7, [sp]
 80048ae:	f01e fa85 	bl	8022dbc <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(21), (uint8_t *)tmp_msg, LEFT_MODE);
 80048b2:	f015 fc01 	bl	801a0b8 <UTIL_LCD_GetFont>
 80048b6:	88c1      	ldrh	r1, [r0, #6]
 80048b8:	2303      	movs	r3, #3
 80048ba:	4a19      	ldr	r2, [pc, #100]	; (8004920 <TEST_PostProcess+0x59c>)
 80048bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80048c0:	2028      	movs	r0, #40	; 0x28
 80048c2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80048c6:	f015 fcef 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Average loss (categorical cross-entropy) %.4f ", TestContext_Ptr->ValidationContext.avg_loss);
 80048ca:	491c      	ldr	r1, [pc, #112]	; (800493c <TEST_PostProcess+0x5b8>)
 80048cc:	4814      	ldr	r0, [pc, #80]	; (8004920 <TEST_PostProcess+0x59c>)
 80048ce:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	; 0x118
 80048d2:	f01e fa73 	bl	8022dbc <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 80048d6:	f015 fbef 	bl	801a0b8 <UTIL_LCD_GetFont>
 80048da:	2116      	movs	r1, #22
 80048dc:	88c2      	ldrh	r2, [r0, #6]
 80048de:	2303      	movs	r3, #3
 80048e0:	2028      	movs	r0, #40	; 0x28
 80048e2:	fb02 f101 	mul.w	r1, r2, r1
 80048e6:	4a0e      	ldr	r2, [pc, #56]	; (8004920 <TEST_PostProcess+0x59c>)
 80048e8:	f015 fcde 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Class: %s, id %d", TestContext_Ptr->ValidationContext.fno.fname, TestContext_Ptr->ValidationContext.class_index);
 80048ec:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80048f0:	f504 72b7 	add.w	r2, r4, #366	; 0x16e
 80048f4:	4912      	ldr	r1, [pc, #72]	; (8004940 <TEST_PostProcess+0x5bc>)
 80048f6:	480a      	ldr	r0, [pc, #40]	; (8004920 <TEST_PostProcess+0x59c>)
 80048f8:	f01e fa60 	bl	8022dbc <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 80048fc:	f015 fbdc 	bl	801a0b8 <UTIL_LCD_GetFont>
 8004900:	2301      	movs	r3, #1
 8004902:	88c1      	ldrh	r1, [r0, #6]
 8004904:	2000      	movs	r0, #0
 8004906:	4a06      	ldr	r2, [pc, #24]	; (8004920 <TEST_PostProcess+0x59c>)
 8004908:	f015 fcce 	bl	801a2a8 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800490c:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8004910:	f7fc ffea 	bl	80018e8 <DISPLAY_Refresh>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004914:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 8004918:	2b00      	cmp	r3, #0
 800491a:	f43f ad42 	beq.w	80043a2 <TEST_PostProcess+0x1e>
 800491e:	e013      	b.n	8004948 <TEST_PostProcess+0x5c4>
 8004920:	20005de4 	.word	0x20005de4
 8004924:	20000004 	.word	0x20000004
 8004928:	2000480c 	.word	0x2000480c
 800492c:	08025fe8 	.word	0x08025fe8
 8004930:	20004814 	.word	0x20004814
 8004934:	42c80000 	.word	0x42c80000
 8004938:	08025884 	.word	0x08025884
 800493c:	08025f40 	.word	0x08025f40
 8004940:	08025f70 	.word	0x08025f70
 8004944:	08025f3c 	.word	0x08025f3c
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 8004948:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 800494c:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8004950:	1c59      	adds	r1, r3, #1
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8004960:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8004964:	1c59      	adds	r1, r3, #1
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 800496c:	7852      	ldrb	r2, [r2, #1]
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8004974:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 8004980:	7892      	ldrb	r2, [r2, #2]
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8004988:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 800498c:	1c59      	adds	r1, r3, #1
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 8004994:	78d2      	ldrb	r2, [r2, #3]
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 800499c:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 80049a0:	1c59      	adds	r1, r3, #1
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 80049a8:	7912      	ldrb	r2, [r2, #4]
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 80049bc:	7952      	ldrb	r2, [r2, #5]
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 80049c4:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 80049c8:	1c59      	adds	r1, r3, #1
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 80049d0:	7992      	ldrb	r2, [r2, #6]
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 80049d8:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 80049dc:	1c59      	adds	r1, r3, #1
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 80049e4:	79d2      	ldrb	r2, [r2, #7]
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 80049ec:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 80049f0:	1c59      	adds	r1, r3, #1
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 80049f8:	7a12      	ldrb	r2, [r2, #8]
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8004a00:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8004a04:	1c59      	adds	r1, r3, #1
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 8004a0c:	7a52      	ldrb	r2, [r2, #9]
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8004a14:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8004a18:	1c59      	adds	r1, r3, #1
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 8004a20:	7a92      	ldrb	r2, [r2, #10]
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8004a28:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8004a2c:	1c59      	adds	r1, r3, #1
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 8004a34:	7ad2      	ldrb	r2, [r2, #11]
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8004a3c:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8004a40:	1c59      	adds	r1, r3, #1
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 8004a48:	7b12      	ldrb	r2, [r2, #12]
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8004a50:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8004a54:	1c59      	adds	r1, r3, #1
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 8004a5c:	7b52      	ldrb	r2, [r2, #13]
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8004a64:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8004a68:	1c59      	adds	r1, r3, #1
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 8004a70:	7b92      	ldrb	r2, [r2, #14]
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8004a78:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	1c59      	adds	r1, r3, #1
 8004a80:	f8c4 14e8 	str.w	r1, [r4, #1256]	; 0x4e8
 8004a84:	7bd2      	ldrb	r2, [r2, #15]
 8004a86:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004a88:	e48b      	b.n	80043a2 <TEST_PostProcess+0x1e>
        sprintf(conf_value, ".");
 8004a8a:	803e      	strh	r6, [r7, #0]
 8004a8c:	e6e2      	b.n	8004854 <TEST_PostProcess+0x4d0>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f47f acea 	bne.w	8004468 <TEST_PostProcess+0xe4>
        BSP_SD_DeInit(0);
 8004a94:	2000      	movs	r0, #0
 8004a96:	f005 fed3 	bl	800a840 <BSP_SD_DeInit>
        CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8004a9a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004a9c:	f7fc fc76 	bl	800138c <CAMERA_Init>
        if(TestContext_Ptr->DumpContext.Dump_FrameSource == CAMERA_COLORBAR)
 8004aa0:	7923      	ldrb	r3, [r4, #4]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	f000 8149 	beq.w	8004d3a <TEST_PostProcess+0x9b6>
        while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004aa8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004aaa:	7d13      	ldrb	r3, [r2, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0fc      	beq.n	8004aaa <TEST_PostProcess+0x726>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	7510      	strb	r0, [r2, #20]
        BSP_CAMERA_Resume(0);
 8004ab4:	f005 f83e 	bl	8009b34 <BSP_CAMERA_Resume>
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004ab8:	2300      	movs	r3, #0
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004aba:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004abe:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004ac2:	2a00      	cmp	r2, #0
 8004ac4:	f43f ad12 	beq.w	80044ec <TEST_PostProcess+0x168>
 8004ac8:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 8004acc:	e4cf      	b.n	800446e <TEST_PostProcess+0xea>
      const char *predicted_class_name = NN_OUTPUT_CLASS_LIST[predicted_class];
 8004ace:	49ae      	ldr	r1, [pc, #696]	; (8004d88 <TEST_PostProcess+0xa04>)
      sprintf(tmp_msg, "%s/%s was missclassified as %s\n", class_path, image_name, predicted_class_name);
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	9f02      	ldr	r7, [sp, #8]
 8004ad4:	4642      	mov	r2, r8
      const char *predicted_class_name = NN_OUTPUT_CLASS_LIST[predicted_class];
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	9103      	str	r1, [sp, #12]
      sprintf(tmp_msg, "%s/%s was missclassified as %s\n", class_path, image_name, predicted_class_name);
 8004ada:	4630      	mov	r0, r6
 8004adc:	49ab      	ldr	r1, [pc, #684]	; (8004d8c <TEST_PostProcess+0xa08>)
 8004ade:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8004ae2:	9500      	str	r5, [sp, #0]
 8004ae4:	f01e f96a 	bl	8022dbc <siprintf>
      write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 8004ae8:	464b      	mov	r3, r9
 8004aea:	4631      	mov	r1, r6
 8004aec:	2232      	movs	r2, #50	; 0x32
 8004aee:	48a8      	ldr	r0, [pc, #672]	; (8004d90 <TEST_PostProcess+0xa0c>)
 8004af0:	f7fd f892 	bl	8001c18 <write_txt>
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 8004af4:	f8d4 53bc 	ldr.w	r5, [r4, #956]	; 0x3bc
 8004af8:	e5e4      	b.n	80046c4 <TEST_PostProcess+0x340>
    double categorical_crossentropy = 10.0;
 8004afa:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004afe:	e5f4      	b.n	80046ea <TEST_PostProcess+0x366>
      Error_Handler();
 8004b00:	f000 fa9e 	bl	8005040 <Error_Handler>
 8004b04:	e542      	b.n	800458c <TEST_PostProcess+0x208>
    Error_Handler();
 8004b06:	f000 fa9b 	bl	8005040 <Error_Handler>
 8004b0a:	e54c      	b.n	80045a6 <TEST_PostProcess+0x222>
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004b0c:	4ea1      	ldr	r6, [pc, #644]	; (8004d94 <TEST_PostProcess+0xa10>)
 8004b0e:	2202      	movs	r2, #2
      TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//terminates the UART command processing
 8004b10:	f8c4 54f0 	str.w	r5, [r4, #1264]	; 0x4f0
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004b14:	f204 540c 	addw	r4, r4, #1292	; 0x50c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004b18:	2160      	movs	r1, #96	; 0x60
 8004b1a:	4630      	mov	r0, r6
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004b1c:	7032      	strb	r2, [r6, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004b1e:	f000 fa1f 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004b22:	2201      	movs	r2, #1
 8004b24:	4631      	mov	r1, r6
 8004b26:	4620      	mov	r0, r4
 8004b28:	f00d f816 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	f040 8090 	bne.w	8004c52 <TEST_PostProcess+0x8ce>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004b32:	4620      	mov	r0, r4
 8004b34:	f00d fa40 	bl	8011fb8 <HAL_UART_GetState>
 8004b38:	2820      	cmp	r0, #32
 8004b3a:	d1fa      	bne.n	8004b32 <TEST_PostProcess+0x7ae>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004b3c:	220a      	movs	r2, #10
 8004b3e:	4996      	ldr	r1, [pc, #600]	; (8004d98 <TEST_PostProcess+0xa14>)
 8004b40:	4620      	mov	r0, r4
 8004b42:	f00d f85b 	bl	8011bfc <HAL_UART_Receive_DMA>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	f43f ac4e 	beq.w	80043e8 <TEST_PostProcess+0x64>
    Error_Handler();
 8004b4c:	f000 fa78 	bl	8005040 <Error_Handler>
 8004b50:	e44a      	b.n	80043e8 <TEST_PostProcess+0x64>
        if(TestContext_Ptr->NonReg_FirstRun == 0)
 8004b52:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d170      	bne.n	8004c3c <TEST_PostProcess+0x8b8>
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004b5a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004b5c:	4e8f      	ldr	r6, [pc, #572]	; (8004d9c <TEST_PostProcess+0xa18>)
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	edd6 5a00 	vldr	s11, [r6]
 8004b64:	ed92 5a00 	vldr	s10, [r2]
 8004b68:	ed92 6a01 	vldr	s12, [r2, #4]
 8004b6c:	eeb4 5a65 	vcmp.f32	s10, s11
 8004b70:	edd6 6a01 	vldr	s13, [r6, #4]
 8004b74:	ed92 7a02 	vldr	s14, [r2, #8]
 8004b78:	edd6 7a02 	vldr	s15, [r6, #8]
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              issue_ocurence =1;
 8004b80:	eeb4 6a66 	vcmp.f32	s12, s13
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004b84:	bf14      	ite	ne
 8004b86:	2101      	movne	r1, #1
 8004b88:	2100      	moveq	r1, #0
              issue_ocurence =1;
 8004b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004b8e:	eeb4 7a67 	vcmp.f32	s14, s15
              issue_ocurence =1;
 8004b92:	bf18      	it	ne
 8004b94:	2101      	movne	r1, #1
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9a:	f000 80d5 	beq.w	8004d48 <TEST_PostProcess+0x9c4>
            TestContext_Ptr->UartContext.uart_host_requested_dump_number = 0;//so to subsequently terminates the UART command processing
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f8c4 24f8 	str.w	r2, [r4, #1272]	; 0x4f8
        if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_ping_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE - (BUFF_NAME_STRING_TOTAL_SIZE-TestContext_Ptr->Total_Char_Name_Size)))
 8004ba4:	f8d4 15d8 	ldr.w	r1, [r4, #1496]	; 0x5d8
 8004ba8:	4a7d      	ldr	r2, [pc, #500]	; (8004da0 <TEST_PostProcess+0xa1c>)
 8004baa:	6820      	ldr	r0, [r4, #0]
 8004bac:	440a      	add	r2, r1
 8004bae:	497d      	ldr	r1, [pc, #500]	; (8004da4 <TEST_PostProcess+0xa20>)
 8004bb0:	eb02 0c01 	add.w	ip, r2, r1
 8004bb4:	4560      	cmp	r0, ip
 8004bb6:	f000 80d8 	beq.w	8004d6a <TEST_PostProcess+0x9e6>
        else if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_pong_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE - (BUFF_NAME_STRING_TOTAL_SIZE-TestContext_Ptr->Total_Char_Name_Size)))
 8004bba:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8004db4 <TEST_PostProcess+0xa30>
 8004bbe:	4462      	add	r2, ip
 8004bc0:	4290      	cmp	r0, r2
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8004bc2:	bf08      	it	eq
 8004bc4:	6021      	streq	r1, [r4, #0]
 8004bc6:	e459      	b.n	800447c <TEST_PostProcess+0xf8>
        *(aTxBuffer) = cmd_status;
 8004bc8:	4872      	ldr	r0, [pc, #456]	; (8004d94 <TEST_PostProcess+0xa10>)
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004bca:	f04f 0801 	mov.w	r8, #1
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004bce:	2202      	movs	r2, #2
 8004bd0:	2160      	movs	r1, #96	; 0x60
        *(aTxBuffer) = cmd_status;
 8004bd2:	7007      	strb	r7, [r0, #0]
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004bd4:	f204 570c 	addw	r7, r4, #1292	; 0x50c
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004bd8:	f884 84f4 	strb.w	r8, [r4, #1268]	; 0x4f4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004bdc:	f000 f9c0 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004be0:	486c      	ldr	r0, [pc, #432]	; (8004d94 <TEST_PostProcess+0xa10>)
 8004be2:	4642      	mov	r2, r8
 8004be4:	4601      	mov	r1, r0
 8004be6:	4638      	mov	r0, r7
 8004be8:	f00c ffb6 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	f040 80a1 	bne.w	8004d34 <TEST_PostProcess+0x9b0>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	f00d f9e0 	bl	8011fb8 <HAL_UART_GetState>
 8004bf8:	2820      	cmp	r0, #32
 8004bfa:	d1fa      	bne.n	8004bf2 <TEST_PostProcess+0x86e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004bfc:	220a      	movs	r2, #10
 8004bfe:	4638      	mov	r0, r7
 8004c00:	4965      	ldr	r1, [pc, #404]	; (8004d98 <TEST_PostProcess+0xa14>)
 8004c02:	f00c fffb 	bl	8011bfc <HAL_UART_Receive_DMA>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f040 809b 	bne.w	8004d42 <TEST_PostProcess+0x9be>
        CAMERA_Disable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8004c0c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c0e:	f7fc fcd5 	bl	80015bc <CAMERA_Disable_TestBar_Mode>
        App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8004c12:	2201      	movs	r2, #1
        TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing  
 8004c14:	2300      	movs	r3, #0
        App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8004c16:	702a      	strb	r2, [r5, #0]
        if(TestContext_Ptr->UartContext.uart_host_nonreg_run==1)
 8004c18:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
        TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing  
 8004c1c:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
        if(TestContext_Ptr->UartContext.uart_host_nonreg_run==1)
 8004c20:	2a01      	cmp	r2, #1
          App_Cxt_Ptr->run_loop = 0;
 8004c22:	bf18      	it	ne
 8004c24:	606b      	strne	r3, [r5, #4]
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD)
 8004c26:	f894 04f6 	ldrb.w	r0, [r4, #1270]	; 0x4f6
          TestContext_Ptr->UartContext.uart_host_nonreg_run=0;
 8004c2a:	bf08      	it	eq
 8004c2c:	f8c4 3508 	streq.w	r3, [r4, #1288]	; 0x508
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD)
 8004c30:	2800      	cmp	r0, #0
 8004c32:	f47f ac45 	bne.w	80044c0 <TEST_PostProcess+0x13c>
          BSP_SD_DeInit(0);/*Required in order to avoid subsequent call to Camera_Init() fct to fail*/
 8004c36:	f005 fe03 	bl	800a840 <BSP_SD_DeInit>
 8004c3a:	e441      	b.n	80044c0 <TEST_PostProcess+0x13c>
        if(TestContext_Ptr->NonReg_FirstRun==1)
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 8098 	bne.w	8004d72 <TEST_PostProcess+0x9ee>
          TestContext_Ptr->NonReg_FirstRun=0;
 8004c42:	2200      	movs	r2, #0
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8004c44:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004c48:	2702      	movs	r7, #2
 8004c4a:	4e54      	ldr	r6, [pc, #336]	; (8004d9c <TEST_PostProcess+0xa18>)
          TestContext_Ptr->NonReg_FirstRun=0;
 8004c4c:	f8c4 25d4 	str.w	r2, [r4, #1492]	; 0x5d4
 8004c50:	e7a8      	b.n	8004ba4 <TEST_PostProcess+0x820>
      Error_Handler();
 8004c52:	f000 f9f5 	bl	8005040 <Error_Handler>
 8004c56:	e76c      	b.n	8004b32 <TEST_PostProcess+0x7ae>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004c58:	ed95 7a04 	vldr	s14, [r5, #16]
 8004c5c:	af06      	add	r7, sp, #24
 8004c5e:	eddf 7a52 	vldr	s15, [pc, #328]	; 8004da8 <TEST_PostProcess+0xa24>
          for(int i=0;i<strlen(msg);i++)
 8004c62:	f04f 0a00 	mov.w	sl, #0
 8004c66:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004d94 <TEST_PostProcess+0xa10>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c70:	68ea      	ldr	r2, [r5, #12]
 8004c72:	494e      	ldr	r1, [pc, #312]	; (8004dac <TEST_PostProcess+0xa28>)
          for(int i=0;i<strlen(msg);i++)
 8004c74:	46d9      	mov	r9, fp
 8004c76:	46b8      	mov	r8, r7
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004c78:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004c7c:	ed8d 7b00 	vstr	d7, [sp]
 8004c80:	f01e f89c 	bl	8022dbc <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8004c84:	9702      	str	r7, [sp, #8]
 8004c86:	e003      	b.n	8004c90 <TEST_PostProcess+0x90c>
            *(aTxBuffer + i) = msg[i];
 8004c88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004c8c:	f809 3b01 	strb.w	r3, [r9], #1
          for(int i=0;i<strlen(msg);i++)
 8004c90:	4638      	mov	r0, r7
 8004c92:	f7fb fb2f 	bl	80002f4 <strlen>
 8004c96:	4550      	cmp	r0, sl
 8004c98:	f10a 0a01 	add.w	sl, sl, #1
 8004c9c:	d8f4      	bhi.n	8004c88 <TEST_PostProcess+0x904>
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	493c      	ldr	r1, [pc, #240]	; (8004d94 <TEST_PostProcess+0xa10>)
 8004ca2:	9003      	str	r0, [sp, #12]
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004ca4:	f204 580c 	addw	r8, r4, #1292	; 0x50c
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004ca8:	540a      	strb	r2, [r1, r0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004caa:	2202      	movs	r2, #2
 8004cac:	2160      	movs	r1, #96	; 0x60
 8004cae:	4839      	ldr	r0, [pc, #228]	; (8004d94 <TEST_PostProcess+0xa10>)
 8004cb0:	f000 f956 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8004cb4:	9b03      	ldr	r3, [sp, #12]
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004cb6:	4937      	ldr	r1, [pc, #220]	; (8004d94 <TEST_PostProcess+0xa10>)
 8004cb8:	4640      	mov	r0, r8
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8004cba:	3301      	adds	r3, #1
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	f00c ff4b 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d15d      	bne.n	8004d82 <TEST_PostProcess+0x9fe>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f00d f976 	bl	8011fb8 <HAL_UART_GetState>
 8004ccc:	2820      	cmp	r0, #32
 8004cce:	d1fa      	bne.n	8004cc6 <TEST_PostProcess+0x942>
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8004cd0:	68aa      	ldr	r2, [r5, #8]
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	4936      	ldr	r1, [pc, #216]	; (8004db0 <TEST_PostProcess+0xa2c>)
 8004cd6:	f01e f871 	bl	8022dbc <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8004cda:	2300      	movs	r3, #0
 8004cdc:	469a      	mov	sl, r3
 8004cde:	e005      	b.n	8004cec <TEST_PostProcess+0x968>
            *(aTxBuffer + i) = msg[i];
 8004ce0:	9a02      	ldr	r2, [sp, #8]
 8004ce2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004ce6:	9202      	str	r2, [sp, #8]
 8004ce8:	f80b 3b01 	strb.w	r3, [fp], #1
          for(int i=0;i<strlen(msg);i++)
 8004cec:	4638      	mov	r0, r7
 8004cee:	f7fb fb01 	bl	80002f4 <strlen>
 8004cf2:	4550      	cmp	r0, sl
 8004cf4:	4681      	mov	r9, r0
 8004cf6:	f10a 0a01 	add.w	sl, sl, #1
 8004cfa:	d8f1      	bhi.n	8004ce0 <TEST_PostProcess+0x95c>
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <TEST_PostProcess+0xa10>)
 8004cfe:	230d      	movs	r3, #13
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004d00:	2160      	movs	r1, #96	; 0x60
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8004d02:	5413      	strb	r3, [r2, r0]
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8004d04:	eb02 0a00 	add.w	sl, r2, r0
 8004d08:	230a      	movs	r3, #10
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	4821      	ldr	r0, [pc, #132]	; (8004d94 <TEST_PostProcess+0xa10>)
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8004d0e:	f88a 3001 	strb.w	r3, [sl, #1]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004d12:	f000 f925 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 8004d16:	f109 0202 	add.w	r2, r9, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004d1a:	491e      	ldr	r1, [pc, #120]	; (8004d94 <TEST_PostProcess+0xa10>)
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	b292      	uxth	r2, r2
 8004d20:	f00c ff1a 	bl	8011b58 <HAL_UART_Transmit_DMA>
 8004d24:	bb50      	cbnz	r0, 8004d7c <TEST_PostProcess+0x9f8>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004d26:	4640      	mov	r0, r8
 8004d28:	f00d f946 	bl	8011fb8 <HAL_UART_GetState>
 8004d2c:	2820      	cmp	r0, #32
 8004d2e:	d1fa      	bne.n	8004d26 <TEST_PostProcess+0x9a2>
 8004d30:	f7ff bbaf 	b.w	8004492 <TEST_PostProcess+0x10e>
      Error_Handler();
 8004d34:	f000 f984 	bl	8005040 <Error_Handler>
 8004d38:	e75b      	b.n	8004bf2 <TEST_PostProcess+0x86e>
          CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8004d3a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004d3c:	f7fc fc0a 	bl	8001554 <CAMERA_Enable_TestBar_Mode>
 8004d40:	e6b2      	b.n	8004aa8 <TEST_PostProcess+0x724>
    Error_Handler();
 8004d42:	f000 f97d 	bl	8005040 <Error_Handler>
 8004d46:	e761      	b.n	8004c0c <TEST_PostProcess+0x888>
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004d48:	ed92 7a03 	vldr	s14, [r2, #12]
 8004d4c:	edd6 7a03 	vldr	s15, [r6, #12]
 8004d50:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d58:	f47f af21 	bne.w	8004b9e <TEST_PostProcess+0x81a>
          if(issue_ocurence == 1)
 8004d5c:	2900      	cmp	r1, #0
 8004d5e:	f47f af1e 	bne.w	8004b9e <TEST_PostProcess+0x81a>
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8004d62:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004d66:	2702      	movs	r7, #2
 8004d68:	e71c      	b.n	8004ba4 <TEST_PostProcess+0x820>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_pong_buff;
 8004d6a:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <TEST_PostProcess+0xa30>)
 8004d6c:	6022      	str	r2, [r4, #0]
 8004d6e:	f7ff bb85 	b.w	800447c <TEST_PostProcess+0xf8>
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8004d72:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004d76:	2702      	movs	r7, #2
 8004d78:	4e08      	ldr	r6, [pc, #32]	; (8004d9c <TEST_PostProcess+0xa18>)
 8004d7a:	e713      	b.n	8004ba4 <TEST_PostProcess+0x820>
      Error_Handler();
 8004d7c:	f000 f960 	bl	8005040 <Error_Handler>
 8004d80:	e7d1      	b.n	8004d26 <TEST_PostProcess+0x9a2>
 8004d82:	f000 f95d 	bl	8005040 <Error_Handler>
 8004d86:	e79e      	b.n	8004cc6 <TEST_PostProcess+0x942>
 8004d88:	20000004 	.word	0x20000004
 8004d8c:	08025f1c 	.word	0x08025f1c
 8004d90:	08025c54 	.word	0x08025c54
 8004d94:	30000280 	.word	0x30000280
 8004d98:	300002e0 	.word	0x300002e0
 8004d9c:	d0cb08a0 	.word	0xd0cb08a0
 8004da0:	00045810 	.word	0x00045810
 8004da4:	d0cb0b40 	.word	0xd0cb0b40
 8004da8:	42c80000 	.word	0x42c80000
 8004dac:	08025884 	.word	0x08025884
 8004db0:	08025890 	.word	0x08025890
 8004db4:	d0cf6400 	.word	0xd0cf6400

08004db8 <HAL_UART_ErrorCallback>:
 *
 * @param huart pointer to UART handle
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  while(1);
 8004db8:	e7fe      	b.n	8004db8 <HAL_UART_ErrorCallback>
 8004dba:	bf00      	nop

08004dbc <UTILS_Init>:
* @brief  UTILS Initialization
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval None
*/
void UTILS_Init(UtilsContext_TypeDef *Utils_Context_Ptr)
{
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	4603      	mov	r3, r0
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004dc0:	2400      	movs	r4, #0
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004dc2:	2232      	movs	r2, #50	; 0x32
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004dc4:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
  Utils_Context_Init(Utils_Context_Ptr);
  
  /*LEDs Init*/
  BSP_LED_Init(LED_GREEN);
 8004dc8:	4620      	mov	r0, r4
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004dca:	635a      	str	r2, [r3, #52]	; 0x34
  Utils_Context_Ptr->JoystickContext.camBrightness=0;/* Mid-level camera brightness. */
 8004dcc:	e9c3 440b 	strd	r4, r4, [r3, #44]	; 0x2c
  Utils_Context_Ptr->ExecTimingContext.tcapturestart2= 0;
 8004dd0:	e9c3 4406 	strd	r4, r4, [r3, #24]
  Utils_Context_Ptr->ExecTimingContext.tcapturestop=0; 
 8004dd4:	e9c3 4408 	strd	r4, r4, [r3, #32]
  BSP_LED_Init(LED_GREEN);
 8004dd8:	f003 fddc 	bl	8008994 <BSP_LED_Init>
  BSP_LED_Init(LED_ORANGE);
 8004ddc:	2001      	movs	r0, #1
 8004dde:	f003 fdd9 	bl	8008994 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004de2:	2002      	movs	r0, #2
 8004de4:	f003 fdd6 	bl	8008994 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8004de8:	2003      	movs	r0, #3
 8004dea:	f003 fdd3 	bl	8008994 <BSP_LED_Init>
  
  /* Activate joystick. */
  BSP_JOY_Init(JOY1, JOY_MODE_GPIO,JOY_ALL);
 8004dee:	4621      	mov	r1, r4
 8004df0:	4620      	mov	r0, r4
 8004df2:	221f      	movs	r2, #31
 8004df4:	f003 fe94 	bl	8008b20 <BSP_JOY_Init>
  
  /* Configure the Wakeup push-button in GPIO Mode */
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4620      	mov	r0, r4
}
 8004dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8004e00:	f003 be2a 	b.w	8008a58 <BSP_PB_Init>

08004e04 <UTILS_GetTimeStamp>:
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval Time stamp
*/
uint32_t UTILS_GetTimeStamp(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  return HAL_GetTick();
 8004e04:	f005 be9a 	b.w	800ab3c <HAL_GetTick>

08004e08 <UTILS_Dma2d_Memcpy>:
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 if no swap, else 1
*/
void UTILS_Dma2d_Memcpy(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                        uint32_t rowStride, uint32_t input_color_format, uint32_t output_color_format, int pfc,
                        int red_blue_swap)
{
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8004e12:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8004e16:	f1bb 0f04 	cmp.w	fp, #4
 8004e1a:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8004e1e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8004e22:	e9dd 6a13 	ldrd	r6, sl, [sp, #76]	; 0x4c
 8004e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e2a:	d829      	bhi.n	8004e80 <UTILS_Dma2d_Memcpy+0x78>
  uint32_t bytepp = GetBytesPerPixel(output_color_format);

  uint32_t destination = (uint32_t)pDst + (y * rowStride + x) * bytepp;
 8004e2c:	fb04 2203 	mla	r2, r4, r3, r2
 8004e30:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <UTILS_Dma2d_Memcpy+0xac>)
 8004e32:	f853 502b 	ldr.w	r5, [r3, fp, lsl #2]
 8004e36:	fb02 f505 	mul.w	r5, r2, r5
  uint32_t source = (uint32_t)pSrc;

  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8004e3a:	481f      	ldr	r0, [pc, #124]	; (8004eb8 <UTILS_Dma2d_Memcpy+0xb0>)
 8004e3c:	f007 fd02 	bl	800c844 <HAL_DMA2D_DeInit>
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
  hlcd_dma2d.Init.ColorMode = output_color_format;

  /* Output offset in pixels == nb of pixels to be added at end of line to come to the  */
  /* first pixel of the next line : on the output side of the DMA2D computation         */
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004e40:	eba4 0308 	sub.w	r3, r4, r8
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	4c1c      	ldr	r4, [pc, #112]	; (8004eb8 <UTILS_Dma2d_Memcpy+0xb0>)
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004e48:	e9c4 b302 	strd	fp, r3, [r4, #8]
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004e4c:	bf14      	ite	ne
 8004e4e:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8004e52:	2300      	moveq	r3, #0
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004e54:	4620      	mov	r0, r4
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
 8004e56:	64a7      	str	r7, [r4, #72]	; 0x48
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004e58:	6063      	str	r3, [r4, #4]
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004e5a:	f1ba 0300 	subs.w	r3, sl, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004e5e:	f04f 0a01 	mov.w	sl, #1
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004e62:	bf18      	it	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	65a3      	str	r3, [r4, #88]	; 0x58
  hlcd_dma2d.XferCpltCallback = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	6223      	str	r3, [r4, #32]
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004e6c:	6463      	str	r3, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004e6e:	23ff      	movs	r3, #255	; 0xff
 8004e70:	e9c4 a313 	strd	sl, r3, [r4, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004e74:	f007 fca4 	bl	800c7c0 <HAL_DMA2D_Init>
 8004e78:	b120      	cbz	r0, 8004e84 <UTILS_Dma2d_Memcpy+0x7c>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
      }
    }
  }
}
 8004e7a:	b005      	add	sp, #20
 8004e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
 8004e80:	2500      	movs	r5, #0
 8004e82:	e7da      	b.n	8004e3a <UTILS_Dma2d_Memcpy+0x32>
    if (HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004e84:	4651      	mov	r1, sl
 8004e86:	4620      	mov	r0, r4
 8004e88:	f007 feec 	bl	800cc64 <HAL_DMA2D_ConfigLayer>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d1f4      	bne.n	8004e7a <UTILS_Dma2d_Memcpy+0x72>
      if (HAL_DMA2D_Start(&hlcd_dma2d, source, destination, xsize, ysize) == HAL_OK)
 8004e90:	9a03      	ldr	r2, [sp, #12]
 8004e92:	4643      	mov	r3, r8
 8004e94:	9902      	ldr	r1, [sp, #8]
 8004e96:	4620      	mov	r0, r4
 8004e98:	442a      	add	r2, r5
 8004e9a:	f8cd 9000 	str.w	r9, [sp]
 8004e9e:	f007 fd57 	bl	800c950 <HAL_DMA2D_Start>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d1e9      	bne.n	8004e7a <UTILS_Dma2d_Memcpy+0x72>
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004ea6:	211e      	movs	r1, #30
 8004ea8:	4620      	mov	r0, r4
}
 8004eaa:	b005      	add	sp, #20
 8004eac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004eb0:	f007 bdaa 	b.w	800ca08 <HAL_DMA2D_PollForTransfer>
 8004eb4:	08026010 	.word	0x08026010
 8004eb8:	2000701c 	.word	0x2000701c

08004ebc <UTILS_Joystick_Check>:
void UTILS_Joystick_Check(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  JoystickContext_TypeDef* Joystick_Ctx_Ptr=&Utils_Context_Ptr->JoystickContext;
  
  /* Get the joystick state. */
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004ebc:	2100      	movs	r1, #0
{
 8004ebe:	b538      	push	{r3, r4, r5, lr}
 8004ec0:	4604      	mov	r4, r0
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	f003 fec0 	bl	8008c48 <BSP_JOY_GetState>
 8004ec8:	b2c0      	uxtb	r0, r0

  switch (Joystick_Ctx_Ptr->joyState)
 8004eca:	1e83      	subs	r3, r0, #2
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004ecc:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  switch (Joystick_Ctx_Ptr->joyState)
 8004ed0:	2b0e      	cmp	r3, #14
 8004ed2:	d809      	bhi.n	8004ee8 <UTILS_Joystick_Check+0x2c>
 8004ed4:	e8df f003 	tbb	[pc, r3]
 8004ed8:	081c082f 	.word	0x081c082f
 8004edc:	08290808 	.word	0x08290808
 8004ee0:	08080808 	.word	0x08080808
 8004ee4:	0808      	.short	0x0808
 8004ee6:	23          	.byte	0x23
 8004ee7:	00          	.byte	0x00

    default:
      break;
  }

  if ((Joystick_Ctx_Ptr->joyState == JOY_UP) || (Joystick_Ctx_Ptr->joyState == JOY_DOWN) || (Joystick_Ctx_Ptr->joyState == JOY_LEFT) || (Joystick_Ctx_Ptr->joyState == JOY_RIGHT))
 8004ee8:	2810      	cmp	r0, #16
 8004eea:	d817      	bhi.n	8004f1c <UTILS_Joystick_Check+0x60>
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <UTILS_Joystick_Check+0xa0>)
 8004eee:	40c3      	lsrs	r3, r0
 8004ef0:	07db      	lsls	r3, r3, #31
 8004ef2:	d529      	bpl.n	8004f48 <UTILS_Joystick_Check+0x8c>
  {
    /* Execute the change. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004ef4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f004 fe2c 	bl	8009b54 <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8004efc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004efe:	2000      	movs	r0, #0
 8004f00:	f004 fe4c 	bl	8009b9c <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f06:	2000      	movs	r0, #0
    /* Restore the default values. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
  }
}
 8004f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004f0c:	f005 bc84 	b.w	800a818 <BSP_LCD_SetBrightness>
      if (Joystick_Ctx_Ptr->camContrast > CAMERA_CONTRAST_MIN)
 8004f10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f12:	1cda      	adds	r2, r3, #3
 8004f14:	da15      	bge.n	8004f42 <UTILS_Joystick_Check+0x86>
        Joystick_Ctx_Ptr->joyState = JOY_NONE; /* Cancel LCD brightness change. */
 8004f16:	2300      	movs	r3, #0
 8004f18:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8004f1c:	bd38      	pop	{r3, r4, r5, pc}
      if (Joystick_Ctx_Ptr->lcdBrightness < LCD_BRIGHTNESS_MAX)
 8004f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f20:	2b63      	cmp	r3, #99	; 0x63
 8004f22:	dcf8      	bgt.n	8004f16 <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness += LCD_BRIGHTNESS_STEP;
 8004f24:	330a      	adds	r3, #10
 8004f26:	6363      	str	r3, [r4, #52]	; 0x34
 8004f28:	e7e4      	b.n	8004ef4 <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->camContrast < CAMERA_CONTRAST_MAX)
 8004f2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	dcf2      	bgt.n	8004f16 <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->camContrast++;
 8004f30:	3301      	adds	r3, #1
 8004f32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f34:	e7de      	b.n	8004ef4 <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->lcdBrightness > LCD_BRIGHTNESS_MIN)
 8004f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	ddec      	ble.n	8004f16 <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness -= LCD_BRIGHTNESS_STEP;
 8004f3c:	3b0a      	subs	r3, #10
 8004f3e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f40:	e7d8      	b.n	8004ef4 <UTILS_Joystick_Check+0x38>
        Joystick_Ctx_Ptr->camContrast--;
 8004f42:	3b01      	subs	r3, #1
 8004f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f46:	e7d5      	b.n	8004ef4 <UTILS_Joystick_Check+0x38>
  else if (Joystick_Ctx_Ptr->joyState == JOY_SEL)
 8004f48:	2801      	cmp	r0, #1
 8004f4a:	d1e7      	bne.n	8004f1c <UTILS_Joystick_Check+0x60>
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8004f4c:	2500      	movs	r5, #0
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8004f4e:	2332      	movs	r3, #50	; 0x32
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004f50:	4629      	mov	r1, r5
 8004f52:	4628      	mov	r0, r5
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8004f54:	6363      	str	r3, [r4, #52]	; 0x34
    Joystick_Ctx_Ptr->camBrightness = 0; /* Mid-level camera brightness. */
 8004f56:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004f5a:	e7cd      	b.n	8004ef8 <UTILS_Joystick_Check+0x3c>
 8004f5c:	00010114 	.word	0x00010114

08004f60 <UTILS_DCache_Coherency_Maintenance>:
 * @retval None
 */
void UTILS_DCache_Coherency_Maintenance(uint32_t *mem_addr, int32_t mem_size, DCache_Coherency_TypeDef Maintenance_operation)
{
  /*Check alignement on 32-bytes for the memory adress and check that the memory size is multiple of 32-bytes*/
  if(((uint32_t)mem_addr%32 != 0) || (mem_size%32 != 0))
 8004f60:	ea40 0301 	orr.w	r3, r0, r1
 8004f64:	06db      	lsls	r3, r3, #27
 8004f66:	d104      	bne.n	8004f72 <UTILS_DCache_Coherency_Maintenance+0x12>
    while(1);
  
  if(Maintenance_operation == INVALIDATE)
 8004f68:	2a01      	cmp	r2, #1
 8004f6a:	d003      	beq.n	8004f74 <UTILS_DCache_Coherency_Maintenance+0x14>
  {
    SCB_InvalidateDCache_by_Addr((void*)mem_addr, mem_size);
  }
  else if(Maintenance_operation == CLEAN)
 8004f6c:	2a02      	cmp	r2, #2
 8004f6e:	d016      	beq.n	8004f9e <UTILS_DCache_Coherency_Maintenance+0x3e>
  {
    SCB_CleanDCache_by_Addr((void *)mem_addr, mem_size);
  }
}
 8004f70:	4770      	bx	lr
    while(1);
 8004f72:	e7fe      	b.n	8004f72 <UTILS_DCache_Coherency_Maintenance+0x12>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f74:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t)addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8004f78:	2900      	cmp	r1, #0
 8004f7a:	dd0b      	ble.n	8004f94 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004f7c:	1e4b      	subs	r3, r1, #1
 8004f7e:	f100 0120 	add.w	r1, r0, #32
      SCB->DCIMVAC = op_addr;
 8004f82:	4a0f      	ldr	r2, [pc, #60]	; (8004fc0 <UTILS_DCache_Coherency_Maintenance+0x60>)
 8004f84:	f023 031f 	bic.w	r3, r3, #31
 8004f88:	440b      	add	r3, r1
 8004f8a:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004f8e:	3020      	adds	r0, #32
    while (op_size > 0) {
 8004f90:	4283      	cmp	r3, r0
 8004f92:	d1fa      	bne.n	8004f8a <UTILS_DCache_Coherency_Maintenance+0x2a>
 8004f94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004f98:	f3bf 8f6f 	isb	sy
}
 8004f9c:	4770      	bx	lr
  __ASM volatile ("dsb 0xF":::"memory");
 8004f9e:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8004fa2:	2900      	cmp	r1, #0
 8004fa4:	ddf6      	ble.n	8004f94 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004fa6:	1e4b      	subs	r3, r1, #1
 8004fa8:	f100 0120 	add.w	r1, r0, #32
      SCB->DCCMVAC = op_addr;
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <UTILS_DCache_Coherency_Maintenance+0x60>)
 8004fae:	f023 031f 	bic.w	r3, r3, #31
 8004fb2:	440b      	add	r3, r1
 8004fb4:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8004fb8:	3020      	adds	r0, #32
    while (op_size > 0) {
 8004fba:	4298      	cmp	r0, r3
 8004fbc:	d1fa      	bne.n	8004fb4 <UTILS_DCache_Coherency_Maintenance+0x54>
 8004fbe:	e7e9      	b.n	8004f94 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004fc0:	e000ed00 	.word	0xe000ed00

08004fc4 <UTILS_Bubblesort>:
void UTILS_Bubblesort(float *prob, int *classes, int size)
{
  float p;
  int c;

  for (int i = 0; i < size; i++)
 8004fc4:	2a00      	cmp	r2, #0
 8004fc6:	dd25      	ble.n	8005014 <UTILS_Bubblesort+0x50>
{
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	f1a0 0e04 	sub.w	lr, r0, #4
 8004fce:	1e56      	subs	r6, r2, #1
  {
    for (int ii = 0; ii < size - i - 1; ii++)
 8004fd0:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 8004fd4:	b1ee      	cbz	r6, 8005012 <UTILS_Bubblesort+0x4e>
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	f100 0c04 	add.w	ip, r0, #4
 8004fdc:	4602      	mov	r2, r0
    {
      if (prob[ii] < prob[ii + 1])
 8004fde:	ecf2 7a01 	vldmia	r2!, {s15}
 8004fe2:	ecbc 7a01 	vldmia	ip!, {s14}
 8004fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fee:	d507      	bpl.n	8005000 <UTILS_Bubblesort+0x3c>
      {
        p = prob[ii];
        prob[ii] = prob[ii + 1];
        prob[ii + 1] = p;
        c = classes[ii];
        classes[ii] = classes[ii + 1];
 8004ff0:	e9d3 4500 	ldrd	r4, r5, [r3]
        prob[ii] = prob[ii + 1];
 8004ff4:	ed02 7a01 	vstr	s14, [r2, #-4]
        prob[ii + 1] = p;
 8004ff8:	ed4c 7a01 	vstr	s15, [ip, #-4]
        classes[ii] = classes[ii + 1];
 8004ffc:	e9c3 5400 	strd	r5, r4, [r3]
    for (int ii = 0; ii < size - i - 1; ii++)
 8005000:	4572      	cmp	r2, lr
 8005002:	f103 0304 	add.w	r3, r3, #4
 8005006:	d1ea      	bne.n	8004fde <UTILS_Bubblesort+0x1a>
  for (int i = 0; i < size; i++)
 8005008:	3e01      	subs	r6, #1
 800500a:	f1ae 0e04 	sub.w	lr, lr, #4
    for (int ii = 0; ii < size - i - 1; ii++)
 800500e:	2e00      	cmp	r6, #0
 8005010:	d1e1      	bne.n	8004fd6 <UTILS_Bubblesort+0x12>
        classes[ii + 1] = c;
      }
    }
  }
}
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop

08005018 <UTILS_Compute_ExecutionTiming>:
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
  
#if MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT  
  UtilsContext_Ptr->ExecTimingContext.Tfps =UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT 
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8005018:	6901      	ldr	r1, [r0, #16]
 800501a:	6882      	ldr	r2, [r0, #8]
{
 800501c:	b430      	push	{r4, r5}
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 800501e:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8005022:	440a      	add	r2, r1
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8005024:	1b1b      	subs	r3, r3, r4
  AppContext_TypeDef *App_Cxt_Ptr=UtilsContext_Ptr->AppCtxPtr;
 8005026:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8005028:	4293      	cmp	r3, r2
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 800502a:	6003      	str	r3, [r0, #0]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 800502c:	d203      	bcs.n	8005036 <UTILS_Compute_ExecutionTiming+0x1e>
    UtilsContext_Ptr->ExecTimingContext.Tfps = UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 800502e:	68c3      	ldr	r3, [r0, #12]
 8005030:	6845      	ldr	r5, [r0, #4]
 8005032:	442b      	add	r3, r5
 8005034:	4413      	add	r3, r2
 8005036:	6143      	str	r3, [r0, #20]
  else
    UtilsContext_Ptr->ExecTimingContext.Tfps =  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#endif
  
  App_Cxt_Ptr->nn_inference_time=UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8005038:	60a1      	str	r1, [r4, #8]
}
 800503a:	bc30      	pop	{r4, r5}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop

08005040 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8005040:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN);
 8005042:	2000      	movs	r0, #0
 8005044:	f003 fce6 	bl	8008a14 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 8005048:	2001      	movs	r0, #1
 800504a:	f003 fce3 	bl	8008a14 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 800504e:	2002      	movs	r0, #2
 8005050:	f003 fce0 	bl	8008a14 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8005054:	2003      	movs	r0, #3
 8005056:	f003 fcdd 	bl	8008a14 <BSP_LED_Off>

  /* Turn LED RED on */
  BSP_LED_On(LED_RED);
 800505a:	2002      	movs	r0, #2
 800505c:	f003 fcc8 	bl	80089f0 <BSP_LED_On>
  while (1)
 8005060:	e7fe      	b.n	8005060 <Error_Handler+0x20>
 8005062:	bf00      	nop

08005064 <main>:
{
 8005064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005066:	b09f      	sub	sp, #124	; 0x7c
  HAL_MPU_Disable();
 8005068:	f005 fe16 	bl	800ac98 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0xD0000000;
 800506c:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005070:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8005072:	4a87      	ldr	r2, [pc, #540]	; (8005290 <main+0x22c>)
 8005074:	4b87      	ldr	r3, [pc, #540]	; (8005294 <main+0x230>)
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8005076:	900b      	str	r0, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005078:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800507a:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800507e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005082:	f005 fe27 	bl	800acd4 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005086:	2004      	movs	r0, #4
 8005088:	f005 fe14 	bl	800acb4 <HAL_MPU_Enable>
 800508c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005090:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005094:	4880      	ldr	r0, [pc, #512]	; (8005298 <main+0x234>)
 8005096:	2200      	movs	r2, #0
 8005098:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800509c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80050a0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80050a4:	6943      	ldr	r3, [r0, #20]
 80050a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050aa:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80050ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80050b0:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80050b4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80050b8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80050bc:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80050c0:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80050c4:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80050c8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80050cc:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80050ce:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80050d2:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80050d4:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 80050d8:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80050da:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	d1f8      	bne.n	80050d4 <main+0x70>
    } while(sets-- != 0U);
 80050e2:	3c20      	subs	r4, #32
 80050e4:	f114 0f20 	cmn.w	r4, #32
 80050e8:	d1f1      	bne.n	80050ce <main+0x6a>
 80050ea:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80050ee:	6943      	ldr	r3, [r0, #20]
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f4:	6143      	str	r3, [r0, #20]
 80050f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80050fa:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80050fe:	f005 fce1 	bl	800aac4 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8005102:	2004      	movs	r0, #4
 8005104:	f009 fb78 	bl	800e7f8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005108:	4b64      	ldr	r3, [pc, #400]	; (800529c <main+0x238>)
 800510a:	2100      	movs	r1, #0
 800510c:	4a64      	ldr	r2, [pc, #400]	; (80052a0 <main+0x23c>)
 800510e:	9100      	str	r1, [sp, #0]
 8005110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005112:	f021 0101 	bic.w	r1, r1, #1
 8005116:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	6993      	ldr	r3, [r2, #24]
 8005122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005126:	6193      	str	r3, [r2, #24]
 8005128:	6993      	ldr	r3, [r2, #24]
 800512a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	9b00      	ldr	r3, [sp, #0]
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8005132:	6993      	ldr	r3, [r2, #24]
 8005134:	049b      	lsls	r3, r3, #18
 8005136:	d5fc      	bpl.n	8005132 <main+0xce>
  RCC_OscInitStruct.PLL.PLLM = 5;
 8005138:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 800513a:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800513c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800513e:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005140:	2601      	movs	r6, #1
 8005142:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005146:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8005148:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800514a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800514c:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = 2;
 800514e:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8005150:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005154:	2104      	movs	r1, #4
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005156:	2208      	movs	r2, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005158:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800515c:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005160:	e9cd 1418 	strd	r1, r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005164:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005168:	f009 fc08 	bl	800e97c <HAL_RCC_OscConfig>
  if (ret != HAL_OK)
 800516c:	2800      	cmp	r0, #0
 800516e:	f040 808d 	bne.w	800528c <main+0x228>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8005172:	2200      	movs	r2, #0
 8005174:	2308      	movs	r3, #8
 8005176:	263f      	movs	r6, #63	; 0x3f
 8005178:	2703      	movs	r7, #3
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800517a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 800517c:	2540      	movs	r5, #64	; 0x40
 800517e:	2440      	movs	r4, #64	; 0x40
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8005180:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8005182:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800518a:	2340      	movs	r3, #64	; 0x40
 800518c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005190:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005194:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8005198:	f009 ff7a 	bl	800f090 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK)
 800519c:	2800      	cmp	r0, #0
 800519e:	d175      	bne.n	800528c <main+0x228>
  __HAL_RCC_CSI_ENABLE();
 80051a0:	4d40      	ldr	r5, [pc, #256]	; (80052a4 <main+0x240>)
    App_Context.run_loop = 1;
 80051a2:	2701      	movs	r7, #1
  APP_Init(&App_Context);
 80051a4:	4c40      	ldr	r4, [pc, #256]	; (80052a8 <main+0x244>)
  __HAL_RCC_CSI_ENABLE();
 80051a6:	682b      	ldr	r3, [r5, #0]
    UTIL_LCD_SetFont(&Font24);
 80051a8:	4e40      	ldr	r6, [pc, #256]	; (80052ac <main+0x248>)
  __HAL_RCC_CSI_ENABLE();
 80051aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ae:	602b      	str	r3, [r5, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051b0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80051b4:	f043 0302 	orr.w	r3, r3, #2
 80051b8:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 80051bc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	9b01      	ldr	r3, [sp, #4]
  HAL_EnableCompensationCell();
 80051c8:	f005 fcd6 	bl	800ab78 <HAL_EnableCompensationCell>
  __HAL_RCC_CRC_CLK_ENABLE();
 80051cc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  APP_Init(&App_Context);
 80051d0:	4620      	mov	r0, r4
  __HAL_RCC_CRC_CLK_ENABLE();
 80051d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051d6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80051da:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80051de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e2:	930a      	str	r3, [sp, #40]	; 0x28
 80051e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  APP_Init(&App_Context);
 80051e6:	f7fb fdbd 	bl	8000d64 <APP_Init>
  TEST_Init(App_Context.Test_ContextPtr);
 80051ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80051ec:	f7fd fe80 	bl	8002ef0 <TEST_Init>
  UTILS_Init(App_Context.Utils_ContextPtr);
 80051f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80051f2:	f7ff fde3 	bl	8004dbc <UTILS_Init>
  DISPLAY_Init(App_Context.Display_ContextPtr);
 80051f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80051f8:	f7fc fa6c 	bl	80016d4 <DISPLAY_Init>
  AI_Init(App_Context.Ai_ContextPtr);
 80051fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80051fe:	f7fb fbf3 	bl	80009e8 <AI_Init>
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 8005202:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005204:	f7fc fab8 	bl	8001778 <DISPLAY_WelcomeScreen>
 8005208:	4605      	mov	r5, r0
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 800520a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800520c:	bb6d      	cbnz	r5, 800526a <main+0x206>
 800520e:	f8d0 34f0 	ldr.w	r3, [r0, #1264]	; 0x4f0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d029      	beq.n	800526a <main+0x206>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8005216:	7823      	ldrb	r3, [r4, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d02b      	beq.n	8005274 <main+0x210>
 800521c:	2b04      	cmp	r3, #4
 800521e:	d029      	beq.n	8005274 <main+0x210>
 8005220:	2b03      	cmp	r3, #3
 8005222:	d02b      	beq.n	800527c <main+0x218>
  while(App_Context.run_loop)
 8005224:	6863      	ldr	r3, [r4, #4]
 8005226:	b1bb      	cbz	r3, 8005258 <main+0x1f4>
    UTILS_Joystick_Check(App_Context.Utils_ContextPtr);
 8005228:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800522a:	f7ff fe47 	bl	8004ebc <UTILS_Joystick_Check>
    TEST_CmdIf_Check(App_Context.Test_ContextPtr);          
 800522e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005230:	f7fd ff3a 	bl	80030a8 <TEST_CmdIf_Check>
    APP_GetNextReadyFrame(&App_Context);
 8005234:	4620      	mov	r0, r4
 8005236:	f7fb fdf5 	bl	8000e24 <APP_GetNextReadyFrame>
    APP_StartNewFrameAcquisition(&App_Context);
 800523a:	4620      	mov	r0, r4
 800523c:	f7fb fea8 	bl	8000f90 <APP_StartNewFrameAcquisition>
    APP_FramePreprocess(&App_Context);
 8005240:	4620      	mov	r0, r4
 8005242:	f7fb fec3 	bl	8000fcc <APP_FramePreprocess>
    APP_NetworkInference(&App_Context);
 8005246:	4620      	mov	r0, r4
 8005248:	f7fb fec2 	bl	8000fd0 <APP_NetworkInference>
    APP_Postprocess(&App_Context);  
 800524c:	4620      	mov	r0, r4
 800524e:	f7fb fef1 	bl	8001034 <APP_Postprocess>
  while(App_Context.run_loop)
 8005252:	6863      	ldr	r3, [r4, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e7      	bne.n	8005228 <main+0x1c4>
    AI_Deinit();
 8005258:	f7fb fd82 	bl	8000d60 <AI_Deinit>
    UTIL_LCD_SetFont(&Font24);
 800525c:	4630      	mov	r0, r6
    App_Context.run_loop = 1;
 800525e:	6067      	str	r7, [r4, #4]
    UTIL_LCD_SetFont(&Font24);
 8005260:	f014 ff22 	bl	801a0a8 <UTIL_LCD_SetFont>
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 8005264:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005266:	2d00      	cmp	r5, #0
 8005268:	d0d1      	beq.n	800520e <main+0x1aa>
    TEST_MainMenu(App_Context.Test_ContextPtr);
 800526a:	f7fd ff83 	bl	8003174 <TEST_MainMenu>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 800526e:	7823      	ldrb	r3, [r4, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d1d3      	bne.n	800521c <main+0x1b8>
    CAMERA_Init(App_Context.Camera_ContextPtr); 
 8005274:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005276:	f7fc f889 	bl	800138c <CAMERA_Init>
 800527a:	e7d3      	b.n	8005224 <main+0x1c0>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 800527c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800527e:	791b      	ldrb	r3, [r3, #4]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d1cf      	bne.n	8005224 <main+0x1c0>
    CAMERA_Init(App_Context.Camera_ContextPtr); 
 8005284:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005286:	f7fc f881 	bl	800138c <CAMERA_Init>
 800528a:	e7cb      	b.n	8005224 <main+0x1c0>
    Error_Handler();
 800528c:	f7ff fed8 	bl	8005040 <Error_Handler>
 8005290:	03010018 	.word	0x03010018
 8005294:	01010000 	.word	0x01010000
 8005298:	e000ed00 	.word	0xe000ed00
 800529c:	58000400 	.word	0x58000400
 80052a0:	58024800 	.word	0x58024800
 80052a4:	58024400 	.word	0x58024400
 80052a8:	20004bf0 	.word	0x20004bf0
 80052ac:	2000481c 	.word	0x2000481c

080052b0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80052b0:	b570      	push	{r4, r5, r6, lr}
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80052b2:	4ebf      	ldr	r6, [pc, #764]	; (80055b0 <network_configure_weights+0x300>)
{
 80052b4:	460a      	mov	r2, r1
 80052b6:	4605      	mov	r5, r0
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80052b8:	2101      	movs	r1, #1
 80052ba:	4630      	mov	r0, r6
 80052bc:	f015 f99c 	bl	801a5f8 <ai_platform_get_weights_map>
 80052c0:	4604      	mov	r4, r0
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f000 8264 	beq.w	8005790 <network_configure_weights+0x4e0>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80052c8:	49ba      	ldr	r1, [pc, #744]	; (80055b4 <network_configure_weights+0x304>)
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80052ca:	4abb      	ldr	r2, [pc, #748]	; (80055b8 <network_configure_weights+0x308>)
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80052cc:	6808      	ldr	r0, [r1, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80052ce:	6833      	ldr	r3, [r6, #0]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80052d0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 544);
    conv2d_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 544);
    
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 688);
 80052d4:	f503 752c 	add.w	r5, r3, #688	; 0x2b0
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80052d8:	6008      	str	r0, [r1, #0]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80052da:	6810      	ldr	r0, [r2, #0]
 80052dc:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80052e0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80052e4:	6010      	str	r0, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 216);
 80052e6:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80052ea:	49b4      	ldr	r1, [pc, #720]	; (80055bc <network_configure_weights+0x30c>)
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 216);
 80052ec:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80052f0:	6808      	ldr	r0, [r1, #0]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80052f2:	4ab3      	ldr	r2, [pc, #716]	; (80055c0 <network_configure_weights+0x310>)
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80052f4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80052f8:	6008      	str	r0, [r1, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 248);
 80052fa:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 248);
 80052fe:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005302:	6810      	ldr	r0, [r2, #0]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005304:	49af      	ldr	r1, [pc, #700]	; (80055c4 <network_configure_weights+0x314>)
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005306:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800530a:	6010      	str	r0, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 320);
 800530c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 320);
 8005310:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005314:	6808      	ldr	r0, [r1, #0]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005316:	4aac      	ldr	r2, [pc, #688]	; (80055c8 <network_configure_weights+0x318>)
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005318:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800531c:	6008      	str	r0, [r1, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 352);
 800531e:	f503 70b0 	add.w	r0, r3, #352	; 0x160
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 352);
 8005322:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005326:	6810      	ldr	r0, [r2, #0]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005328:	49a8      	ldr	r1, [pc, #672]	; (80055cc <network_configure_weights+0x31c>)
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800532a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800532e:	6010      	str	r0, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 480);
 8005330:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 480);
 8005334:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005338:	6808      	ldr	r0, [r1, #0]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800533a:	4aa5      	ldr	r2, [pc, #660]	; (80055d0 <network_configure_weights+0x320>)
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800533c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 688);
 8005340:	6095      	str	r5, [r2, #8]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005342:	6008      	str	r0, [r1, #0]
    conv2d_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 544);
 8005344:	f503 7008 	add.w	r0, r3, #544	; 0x220
    conv2d_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 544);
 8005348:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800534c:	6810      	ldr	r0, [r2, #0]
    conv2d_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 688);
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800534e:	49a1      	ldr	r1, [pc, #644]	; (80055d4 <network_configure_weights+0x324>)
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005350:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005354:	6010      	str	r0, [r2, #0]
    conv2d_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 688);
 8005356:	60d5      	str	r5, [r2, #12]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_10_weights_array.data = AI_PTR(g_network_weights_map[0] + 2960);
    conv2d_10_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2960);
    
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_10_bias_array.data = AI_PTR(g_network_weights_map[0] + 3248);
 8005358:	f503 654b 	add.w	r5, r3, #3248	; 0xcb0
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800535c:	6808      	ldr	r0, [r1, #0]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800535e:	4a9e      	ldr	r2, [pc, #632]	; (80055d8 <network_configure_weights+0x328>)
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005360:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005364:	6008      	str	r0, [r1, #0]
    conv2d_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 752);
 8005366:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
    conv2d_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 752);
 800536a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800536e:	6810      	ldr	r0, [r2, #0]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005370:	499a      	ldr	r1, [pc, #616]	; (80055dc <network_configure_weights+0x32c>)
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005372:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005376:	6010      	str	r0, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 1264);
 8005378:	f503 609e 	add.w	r0, r3, #1264	; 0x4f0
    conv2d_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1264);
 800537c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005380:	6808      	ldr	r0, [r1, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005382:	4a97      	ldr	r2, [pc, #604]	; (80055e0 <network_configure_weights+0x330>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005384:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005388:	6008      	str	r0, [r1, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 1392);
 800538a:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
    conv2d_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1392);
 800538e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005392:	6810      	ldr	r0, [r2, #0]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005394:	4993      	ldr	r1, [pc, #588]	; (80055e4 <network_configure_weights+0x334>)
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005396:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800539a:	6010      	str	r0, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 1680);
 800539c:	f503 60d2 	add.w	r0, r3, #1680	; 0x690
    conv2d_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1680);
 80053a0:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80053a4:	6808      	ldr	r0, [r1, #0]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80053a6:	4a90      	ldr	r2, [pc, #576]	; (80055e8 <network_configure_weights+0x338>)
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80053a8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80053ac:	6008      	str	r0, [r1, #0]
    conv2d_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 1808);
 80053ae:	f503 60e2 	add.w	r0, r3, #1808	; 0x710
    conv2d_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1808);
 80053b2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80053b6:	6810      	ldr	r0, [r2, #0]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80053b8:	498c      	ldr	r1, [pc, #560]	; (80055ec <network_configure_weights+0x33c>)
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80053ba:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80053be:	6010      	str	r0, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 2832);
 80053c0:	f503 6031 	add.w	r0, r3, #2832	; 0xb10
    conv2d_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2832);
 80053c4:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80053c8:	6808      	ldr	r0, [r1, #0]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80053ca:	4a89      	ldr	r2, [pc, #548]	; (80055f0 <network_configure_weights+0x340>)
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80053cc:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80053d0:	6008      	str	r0, [r1, #0]
    conv2d_10_weights_array.data = AI_PTR(g_network_weights_map[0] + 2960);
 80053d2:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
    conv2d_10_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2960);
 80053d6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80053da:	6810      	ldr	r0, [r2, #0]
    conv2d_10_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3248);
    
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 80053dc:	4985      	ldr	r1, [pc, #532]	; (80055f4 <network_configure_weights+0x344>)
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80053de:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_10_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3248);
 80053e2:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80053e6:	6010      	str	r0, [r2, #0]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 80053e8:	6808      	ldr	r0, [r1, #0]
    conv2d_11_weights_array.data = AI_PTR(g_network_weights_map[0] + 3376);
    conv2d_11_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3376);
    
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 80053ea:	4a83      	ldr	r2, [pc, #524]	; (80055f8 <network_configure_weights+0x348>)
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 80053ec:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80053f0:	6008      	str	r0, [r1, #0]
    conv2d_11_weights_array.data = AI_PTR(g_network_weights_map[0] + 3376);
 80053f2:	f503 6053 	add.w	r0, r3, #3376	; 0xd30
    conv2d_11_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3376);
 80053f6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 80053fa:	6810      	ldr	r0, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_network_weights_map[0] + 5424);
    conv2d_11_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 5424);
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 80053fc:	497f      	ldr	r1, [pc, #508]	; (80055fc <network_configure_weights+0x34c>)
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 80053fe:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005402:	6010      	str	r0, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_network_weights_map[0] + 5424);
 8005404:	f241 5030 	movw	r0, #5424	; 0x1530
 8005408:	4418      	add	r0, r3
    conv2d_11_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 5424);
 800540a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 800540e:	6808      	ldr	r0, [r1, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 5680);
    conv2d_12_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 5680);
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8005410:	4a7b      	ldr	r2, [pc, #492]	; (8005600 <network_configure_weights+0x350>)
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005412:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005416:	6008      	str	r0, [r1, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 5680);
 8005418:	f241 6030 	movw	r0, #5680	; 0x1630
 800541c:	4418      	add	r0, r3
    conv2d_12_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 5680);
 800541e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8005422:	6810      	ldr	r0, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 6256);
    conv2d_12_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 6256);
    
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8005424:	4977      	ldr	r1, [pc, #476]	; (8005604 <network_configure_weights+0x354>)
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8005426:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800542a:	6010      	str	r0, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 6256);
 800542c:	f641 0070 	movw	r0, #6256	; 0x1870
 8005430:	4418      	add	r0, r3
    conv2d_12_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 6256);
 8005432:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8005436:	6808      	ldr	r0, [r1, #0]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 6512);
    conv2d_13_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 6512);
    
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8005438:	4a73      	ldr	r2, [pc, #460]	; (8005608 <network_configure_weights+0x358>)
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800543a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800543e:	6008      	str	r0, [r1, #0]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 6512);
 8005440:	f641 1070 	movw	r0, #6512	; 0x1970
 8005444:	4418      	add	r0, r3
    conv2d_13_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 6512);
 8005446:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 800544a:	6810      	ldr	r0, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 10608);
    conv2d_13_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 10608);
    
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800544c:	496f      	ldr	r1, [pc, #444]	; (800560c <network_configure_weights+0x35c>)
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 800544e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005452:	6010      	str	r0, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 10608);
 8005454:	f642 1070 	movw	r0, #10608	; 0x2970
 8005458:	4418      	add	r0, r3
    conv2d_13_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 10608);
 800545a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800545e:	6808      	ldr	r0, [r1, #0]
    conv2d_15_weights_array.data = AI_PTR(g_network_weights_map[0] + 10864);
    conv2d_15_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 10864);
    
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005460:	4a6b      	ldr	r2, [pc, #428]	; (8005610 <network_configure_weights+0x360>)
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8005462:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005466:	6008      	str	r0, [r1, #0]
    conv2d_15_weights_array.data = AI_PTR(g_network_weights_map[0] + 10864);
 8005468:	f642 2070 	movw	r0, #10864	; 0x2a70
 800546c:	4418      	add	r0, r3
    conv2d_15_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 10864);
 800546e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005472:	6810      	ldr	r0, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(g_network_weights_map[0] + 11440);
 8005474:	f642 41b0 	movw	r1, #11440	; 0x2cb0
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005478:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_15_bias_array.data = AI_PTR(g_network_weights_map[0] + 11440);
 800547c:	4419      	add	r1, r3
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 800547e:	6010      	str	r0, [r2, #0]
    conv2d_15_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 11440);
    
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_16_weights_array.data = AI_PTR(g_network_weights_map[0] + 11696);
 8005480:	f642 50b0 	movw	r0, #11696	; 0x2db0
    conv2d_15_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 11440);
 8005484:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_16_weights_array.data = AI_PTR(g_network_weights_map[0] + 11696);
 8005488:	4418      	add	r0, r3
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800548a:	4962      	ldr	r1, [pc, #392]	; (8005614 <network_configure_weights+0x364>)
    conv2d_16_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 11696);
    
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800548c:	4a62      	ldr	r2, [pc, #392]	; (8005618 <network_configure_weights+0x368>)
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800548e:	680d      	ldr	r5, [r1, #0]
    conv2d_16_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 11696);
 8005490:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005494:	6810      	ldr	r0, [r2, #0]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8005496:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800549a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800549e:	600d      	str	r5, [r1, #0]
    conv2d_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 19888);
    conv2d_16_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 19888);
    
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80054a0:	495e      	ldr	r1, [pc, #376]	; (800561c <network_configure_weights+0x36c>)
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80054a2:	6010      	str	r0, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 19888);
 80054a4:	f644 50b0 	movw	r0, #19888	; 0x4db0
 80054a8:	4418      	add	r0, r3
    conv2d_16_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 19888);
 80054aa:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80054ae:	6808      	ldr	r0, [r1, #0]
    conv2d_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 20400);
    conv2d_17_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 20400);
    
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80054b0:	4a5b      	ldr	r2, [pc, #364]	; (8005620 <network_configure_weights+0x370>)
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80054b2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80054b6:	6008      	str	r0, [r1, #0]
    conv2d_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 20400);
 80054b8:	f644 70b0 	movw	r0, #20400	; 0x4fb0
 80054bc:	4418      	add	r0, r3
    conv2d_17_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 20400);
 80054be:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80054c2:	6810      	ldr	r0, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 21552);
    conv2d_17_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 21552);
    
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 80054c4:	4957      	ldr	r1, [pc, #348]	; (8005624 <network_configure_weights+0x374>)
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80054c6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80054ca:	6010      	str	r0, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 21552);
 80054cc:	f245 4030 	movw	r0, #21552	; 0x5430
 80054d0:	4418      	add	r0, r3
    conv2d_17_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 21552);
 80054d2:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 80054d6:	6808      	ldr	r0, [r1, #0]
    conv2d_18_weights_array.data = AI_PTR(g_network_weights_map[0] + 22064);
    conv2d_18_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 22064);
    
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 80054d8:	4a53      	ldr	r2, [pc, #332]	; (8005628 <network_configure_weights+0x378>)
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 80054da:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80054de:	6008      	str	r0, [r1, #0]
    conv2d_18_weights_array.data = AI_PTR(g_network_weights_map[0] + 22064);
 80054e0:	f245 6030 	movw	r0, #22064	; 0x5630
 80054e4:	4418      	add	r0, r3
    conv2d_18_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 22064);
 80054e6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ea:	6810      	ldr	r0, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_network_weights_map[0] + 38448);
    conv2d_18_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 38448);
    
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 80054ec:	494f      	ldr	r1, [pc, #316]	; (800562c <network_configure_weights+0x37c>)
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ee:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80054f2:	6010      	str	r0, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_network_weights_map[0] + 38448);
 80054f4:	f249 6030 	movw	r0, #38448	; 0x9630
 80054f8:	4418      	add	r0, r3
    conv2d_18_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 38448);
 80054fa:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 80054fe:	6808      	ldr	r0, [r1, #0]
    conv2d_19_weights_array.data = AI_PTR(g_network_weights_map[0] + 38960);
    conv2d_19_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 38960);
    
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8005500:	4a4b      	ldr	r2, [pc, #300]	; (8005630 <network_configure_weights+0x380>)
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8005502:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005506:	6008      	str	r0, [r1, #0]
    conv2d_19_weights_array.data = AI_PTR(g_network_weights_map[0] + 38960);
 8005508:	f649 0030 	movw	r0, #38960	; 0x9830
 800550c:	4418      	add	r0, r3
    conv2d_19_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 38960);
 800550e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8005512:	6810      	ldr	r0, [r2, #0]
    conv2d_19_bias_array.data = AI_PTR(g_network_weights_map[0] + 40112);
 8005514:	f649 41b0 	movw	r1, #40112	; 0x9cb0
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8005518:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_19_bias_array.data = AI_PTR(g_network_weights_map[0] + 40112);
 800551c:	4419      	add	r1, r3
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800551e:	6010      	str	r0, [r2, #0]
    conv2d_19_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 40112);
    
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_20_weights_array.data = AI_PTR(g_network_weights_map[0] + 40624);
 8005520:	f649 60b0 	movw	r0, #40624	; 0x9eb0
    conv2d_19_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 40112);
 8005524:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_20_weights_array.data = AI_PTR(g_network_weights_map[0] + 40624);
 8005528:	4418      	add	r0, r3
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800552a:	4942      	ldr	r1, [pc, #264]	; (8005634 <network_configure_weights+0x384>)
    conv2d_20_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 40624);
    
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800552c:	4a42      	ldr	r2, [pc, #264]	; (8005638 <network_configure_weights+0x388>)
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800552e:	680d      	ldr	r5, [r1, #0]
    conv2d_20_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 40624);
 8005530:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8005534:	6810      	ldr	r0, [r2, #0]
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8005536:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800553a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800553e:	600d      	str	r5, [r1, #0]
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 57008);
    conv2d_20_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 57008);
    
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8005540:	493e      	ldr	r1, [pc, #248]	; (800563c <network_configure_weights+0x38c>)
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8005542:	6010      	str	r0, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 57008);
 8005544:	f64d 60b0 	movw	r0, #57008	; 0xdeb0
 8005548:	4418      	add	r0, r3
    conv2d_20_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 57008);
 800554a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 800554e:	6808      	ldr	r0, [r1, #0]
    conv2d_21_weights_array.data = AI_PTR(g_network_weights_map[0] + 57520);
    conv2d_21_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 57520);
    
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8005550:	4a3b      	ldr	r2, [pc, #236]	; (8005640 <network_configure_weights+0x390>)
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8005552:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005556:	6008      	str	r0, [r1, #0]
    conv2d_21_weights_array.data = AI_PTR(g_network_weights_map[0] + 57520);
 8005558:	f24e 00b0 	movw	r0, #57520	; 0xe0b0
 800555c:	4418      	add	r0, r3
    conv2d_21_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 57520);
 800555e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8005562:	6810      	ldr	r0, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_network_weights_map[0] + 58672);
    conv2d_21_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 58672);
    
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8005564:	4937      	ldr	r1, [pc, #220]	; (8005644 <network_configure_weights+0x394>)
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8005566:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800556a:	6010      	str	r0, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_network_weights_map[0] + 58672);
 800556c:	f24e 5030 	movw	r0, #58672	; 0xe530
 8005570:	4418      	add	r0, r3
    conv2d_21_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 58672);
 8005572:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8005576:	6808      	ldr	r0, [r1, #0]
    conv2d_22_weights_array.data = AI_PTR(g_network_weights_map[0] + 59184);
    conv2d_22_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 59184);
    
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8005578:	4a33      	ldr	r2, [pc, #204]	; (8005648 <network_configure_weights+0x398>)
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 800557a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800557e:	6008      	str	r0, [r1, #0]
    conv2d_22_weights_array.data = AI_PTR(g_network_weights_map[0] + 59184);
 8005580:	f24e 7030 	movw	r0, #59184	; 0xe730
 8005584:	4418      	add	r0, r3
    conv2d_22_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 59184);
 8005586:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 800558a:	6810      	ldr	r0, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 75568);
    conv2d_22_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 75568);
    
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 800558c:	492f      	ldr	r1, [pc, #188]	; (800564c <network_configure_weights+0x39c>)
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 800558e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005592:	6010      	str	r0, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 75568);
 8005594:	482e      	ldr	r0, [pc, #184]	; (8005650 <network_configure_weights+0x3a0>)
 8005596:	4418      	add	r0, r3
    conv2d_22_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 75568);
 8005598:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 800559c:	6808      	ldr	r0, [r1, #0]
    conv2d_23_weights_array.data = AI_PTR(g_network_weights_map[0] + 76080);
    conv2d_23_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 76080);
    
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 800559e:	4a2d      	ldr	r2, [pc, #180]	; (8005654 <network_configure_weights+0x3a4>)
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 80055a0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80055a4:	6008      	str	r0, [r1, #0]
    conv2d_23_weights_array.data = AI_PTR(g_network_weights_map[0] + 76080);
 80055a6:	482c      	ldr	r0, [pc, #176]	; (8005658 <network_configure_weights+0x3a8>)
 80055a8:	4418      	add	r0, r3
    conv2d_23_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 76080);
 80055aa:	e9c1 0002 	strd	r0, r0, [r1, #8]
 80055ae:	e055      	b.n	800565c <network_configure_weights+0x3ac>
 80055b0:	200062cc 	.word	0x200062cc
 80055b4:	20002ec0 	.word	0x20002ec0
 80055b8:	20002dd0 	.word	0x20002dd0
 80055bc:	20003b90 	.word	0x20003b90
 80055c0:	20003a48 	.word	0x20003a48
 80055c4:	20003f10 	.word	0x20003f10
 80055c8:	20003e4c 	.word	0x20003e4c
 80055cc:	20004084 	.word	0x20004084
 80055d0:	20003f3c 	.word	0x20003f3c
 80055d4:	200041a0 	.word	0x200041a0
 80055d8:	200040b0 	.word	0x200040b0
 80055dc:	20004314 	.word	0x20004314
 80055e0:	200041cc 	.word	0x200041cc
 80055e4:	20004430 	.word	0x20004430
 80055e8:	20004340 	.word	0x20004340
 80055ec:	20002364 	.word	0x20002364
 80055f0:	2000221c 	.word	0x2000221c
 80055f4:	20002480 	.word	0x20002480
 80055f8:	20002390 	.word	0x20002390
 80055fc:	200025f4 	.word	0x200025f4
 8005600:	200024ac 	.word	0x200024ac
 8005604:	20002710 	.word	0x20002710
 8005608:	20002620 	.word	0x20002620
 800560c:	20002884 	.word	0x20002884
 8005610:	2000273c 	.word	0x2000273c
 8005614:	200029a0 	.word	0x200029a0
 8005618:	200028b0 	.word	0x200028b0
 800561c:	20002b14 	.word	0x20002b14
 8005620:	200029cc 	.word	0x200029cc
 8005624:	20002c30 	.word	0x20002c30
 8005628:	20002b40 	.word	0x20002b40
 800562c:	20002da4 	.word	0x20002da4
 8005630:	20002c5c 	.word	0x20002c5c
 8005634:	20002fdc 	.word	0x20002fdc
 8005638:	20002eec 	.word	0x20002eec
 800563c:	20003150 	.word	0x20003150
 8005640:	20003008 	.word	0x20003008
 8005644:	2000326c 	.word	0x2000326c
 8005648:	2000317c 	.word	0x2000317c
 800564c:	200033e0 	.word	0x200033e0
 8005650:	00012730 	.word	0x00012730
 8005654:	20003298 	.word	0x20003298
 8005658:	00012930 	.word	0x00012930
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 800565c:	6810      	ldr	r0, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(g_network_weights_map[0] + 77232);
 800565e:	4950      	ldr	r1, [pc, #320]	; (80057a0 <network_configure_weights+0x4f0>)
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 8005660:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_23_bias_array.data = AI_PTR(g_network_weights_map[0] + 77232);
 8005664:	4419      	add	r1, r3
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 8005666:	6010      	str	r0, [r2, #0]
    conv2d_23_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 77232);
    
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_24_weights_array.data = AI_PTR(g_network_weights_map[0] + 77744);
 8005668:	484e      	ldr	r0, [pc, #312]	; (80057a4 <network_configure_weights+0x4f4>)
    conv2d_23_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 77232);
 800566a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_24_weights_array.data = AI_PTR(g_network_weights_map[0] + 77744);
 800566e:	4418      	add	r0, r3
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 8005670:	494d      	ldr	r1, [pc, #308]	; (80057a8 <network_configure_weights+0x4f8>)
    conv2d_24_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 77744);
    
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8005672:	4a4e      	ldr	r2, [pc, #312]	; (80057ac <network_configure_weights+0x4fc>)
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 8005674:	680d      	ldr	r5, [r1, #0]
    conv2d_24_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 77744);
 8005676:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 800567a:	6810      	ldr	r0, [r2, #0]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 800567c:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8005680:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 8005684:	600d      	str	r5, [r1, #0]
    conv2d_24_bias_array.data = AI_PTR(g_network_weights_map[0] + 94128);
    conv2d_24_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 94128);
    
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8005686:	494a      	ldr	r1, [pc, #296]	; (80057b0 <network_configure_weights+0x500>)
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8005688:	6010      	str	r0, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(g_network_weights_map[0] + 94128);
 800568a:	484a      	ldr	r0, [pc, #296]	; (80057b4 <network_configure_weights+0x504>)
 800568c:	4418      	add	r0, r3
    conv2d_24_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 94128);
 800568e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8005692:	6808      	ldr	r0, [r1, #0]
    conv2d_25_weights_array.data = AI_PTR(g_network_weights_map[0] + 94640);
    conv2d_25_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 94640);
    
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 8005694:	4a48      	ldr	r2, [pc, #288]	; (80057b8 <network_configure_weights+0x508>)
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8005696:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800569a:	6008      	str	r0, [r1, #0]
    conv2d_25_weights_array.data = AI_PTR(g_network_weights_map[0] + 94640);
 800569c:	4847      	ldr	r0, [pc, #284]	; (80057bc <network_configure_weights+0x50c>)
 800569e:	4418      	add	r0, r3
    conv2d_25_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 94640);
 80056a0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 80056a4:	6810      	ldr	r0, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(g_network_weights_map[0] + 95792);
    conv2d_25_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 95792);
    
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80056a6:	4946      	ldr	r1, [pc, #280]	; (80057c0 <network_configure_weights+0x510>)
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 80056a8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80056ac:	6010      	str	r0, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(g_network_weights_map[0] + 95792);
 80056ae:	4845      	ldr	r0, [pc, #276]	; (80057c4 <network_configure_weights+0x514>)
 80056b0:	4418      	add	r0, r3
    conv2d_25_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 95792);
 80056b2:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80056b6:	6808      	ldr	r0, [r1, #0]
    conv2d_26_weights_array.data = AI_PTR(g_network_weights_map[0] + 96304);
    conv2d_26_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 96304);
    
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 80056b8:	4a43      	ldr	r2, [pc, #268]	; (80057c8 <network_configure_weights+0x518>)
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80056ba:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80056be:	6008      	str	r0, [r1, #0]
    conv2d_26_weights_array.data = AI_PTR(g_network_weights_map[0] + 96304);
 80056c0:	4842      	ldr	r0, [pc, #264]	; (80057cc <network_configure_weights+0x51c>)
 80056c2:	4418      	add	r0, r3
    conv2d_26_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 96304);
 80056c4:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 80056c8:	6810      	ldr	r0, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(g_network_weights_map[0] + 112688);
    conv2d_26_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 112688);
    
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 80056ca:	4941      	ldr	r1, [pc, #260]	; (80057d0 <network_configure_weights+0x520>)
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 80056cc:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80056d0:	6010      	str	r0, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(g_network_weights_map[0] + 112688);
 80056d2:	4840      	ldr	r0, [pc, #256]	; (80057d4 <network_configure_weights+0x524>)
 80056d4:	4418      	add	r0, r3
    conv2d_26_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 112688);
 80056d6:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 80056da:	6808      	ldr	r0, [r1, #0]
    conv2d_28_weights_array.data = AI_PTR(g_network_weights_map[0] + 113200);
    conv2d_28_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 113200);
    
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 80056dc:	4a3e      	ldr	r2, [pc, #248]	; (80057d8 <network_configure_weights+0x528>)
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 80056de:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80056e2:	6008      	str	r0, [r1, #0]
    conv2d_28_weights_array.data = AI_PTR(g_network_weights_map[0] + 113200);
 80056e4:	483d      	ldr	r0, [pc, #244]	; (80057dc <network_configure_weights+0x52c>)
 80056e6:	4418      	add	r0, r3
    conv2d_28_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 113200);
 80056e8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 80056ec:	6810      	ldr	r0, [r2, #0]
    conv2d_28_bias_array.data = AI_PTR(g_network_weights_map[0] + 114352);
 80056ee:	493c      	ldr	r1, [pc, #240]	; (80057e0 <network_configure_weights+0x530>)
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 80056f0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_28_bias_array.data = AI_PTR(g_network_weights_map[0] + 114352);
 80056f4:	4419      	add	r1, r3
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 80056f6:	6010      	str	r0, [r2, #0]
    conv2d_28_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 114352);
    
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_29_weights_array.data = AI_PTR(g_network_weights_map[0] + 114864);
 80056f8:	483a      	ldr	r0, [pc, #232]	; (80057e4 <network_configure_weights+0x534>)
    conv2d_28_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 114352);
 80056fa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_weights_array.data = AI_PTR(g_network_weights_map[0] + 114864);
 80056fe:	4418      	add	r0, r3
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005700:	4939      	ldr	r1, [pc, #228]	; (80057e8 <network_configure_weights+0x538>)
    conv2d_29_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 114864);
    
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005702:	4a3a      	ldr	r2, [pc, #232]	; (80057ec <network_configure_weights+0x53c>)
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005704:	680d      	ldr	r5, [r1, #0]
    conv2d_29_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 114864);
 8005706:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 800570a:	6810      	ldr	r0, [r2, #0]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800570c:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005710:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005714:	600d      	str	r5, [r1, #0]
    conv2d_29_bias_array.data = AI_PTR(g_network_weights_map[0] + 147632);
    conv2d_29_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 147632);
    
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8005716:	4936      	ldr	r1, [pc, #216]	; (80057f0 <network_configure_weights+0x540>)
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005718:	6010      	str	r0, [r2, #0]
    conv2d_29_bias_array.data = AI_PTR(g_network_weights_map[0] + 147632);
 800571a:	4836      	ldr	r0, [pc, #216]	; (80057f4 <network_configure_weights+0x544>)
 800571c:	4418      	add	r0, r3
    conv2d_29_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 147632);
 800571e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8005722:	6808      	ldr	r0, [r1, #0]
    conv2d_30_weights_array.data = AI_PTR(g_network_weights_map[0] + 148656);
    conv2d_30_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 148656);
    
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8005724:	4a34      	ldr	r2, [pc, #208]	; (80057f8 <network_configure_weights+0x548>)
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8005726:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800572a:	6008      	str	r0, [r1, #0]
    conv2d_30_weights_array.data = AI_PTR(g_network_weights_map[0] + 148656);
 800572c:	4833      	ldr	r0, [pc, #204]	; (80057fc <network_configure_weights+0x54c>)
 800572e:	4418      	add	r0, r3
    conv2d_30_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 148656);
 8005730:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8005734:	6810      	ldr	r0, [r2, #0]
    conv2d_30_bias_array.data = AI_PTR(g_network_weights_map[0] + 150960);
    conv2d_30_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 150960);
    
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 8005736:	4932      	ldr	r1, [pc, #200]	; (8005800 <network_configure_weights+0x550>)
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8005738:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800573c:	6010      	str	r0, [r2, #0]
    conv2d_30_bias_array.data = AI_PTR(g_network_weights_map[0] + 150960);
 800573e:	4831      	ldr	r0, [pc, #196]	; (8005804 <network_configure_weights+0x554>)
 8005740:	4418      	add	r0, r3
    conv2d_30_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 150960);
 8005742:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 8005746:	6808      	ldr	r0, [r1, #0]
    conv2d_31_weights_array.data = AI_PTR(g_network_weights_map[0] + 151984);
    conv2d_31_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 151984);
    
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 8005748:	4a2f      	ldr	r2, [pc, #188]	; (8005808 <network_configure_weights+0x558>)
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 800574a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800574e:	6008      	str	r0, [r1, #0]
    conv2d_31_weights_array.data = AI_PTR(g_network_weights_map[0] + 151984);
 8005750:	482e      	ldr	r0, [pc, #184]	; (800580c <network_configure_weights+0x55c>)
 8005752:	4418      	add	r0, r3
    conv2d_31_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 151984);
 8005754:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 8005758:	6810      	ldr	r0, [r2, #0]
    conv2d_31_bias_array.data = AI_PTR(g_network_weights_map[0] + 217520);
    conv2d_31_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 217520);
    
    dense_33_weights_array.format |= AI_FMT_FLAG_CONST;
 800575a:	492d      	ldr	r1, [pc, #180]	; (8005810 <network_configure_weights+0x560>)
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 800575c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005760:	6010      	str	r0, [r2, #0]
    conv2d_31_bias_array.data = AI_PTR(g_network_weights_map[0] + 217520);
 8005762:	482c      	ldr	r0, [pc, #176]	; (8005814 <network_configure_weights+0x564>)
 8005764:	4418      	add	r0, r3
    conv2d_31_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 217520);
 8005766:	e9c2 0002 	strd	r0, r0, [r2, #8]
    dense_33_weights_array.format |= AI_FMT_FLAG_CONST;
 800576a:	6808      	ldr	r0, [r1, #0]
    dense_33_weights_array.data = AI_PTR(g_network_weights_map[0] + 218544);
    dense_33_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 218544);
    
    dense_33_bias_array.format |= AI_FMT_FLAG_CONST;
 800576c:	4a2a      	ldr	r2, [pc, #168]	; (8005818 <network_configure_weights+0x568>)
    dense_33_weights_array.format |= AI_FMT_FLAG_CONST;
 800576e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005772:	6008      	str	r0, [r1, #0]
    dense_33_weights_array.data = AI_PTR(g_network_weights_map[0] + 218544);
 8005774:	4829      	ldr	r0, [pc, #164]	; (800581c <network_configure_weights+0x56c>)
 8005776:	4418      	add	r0, r3
    dense_33_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 218544);
 8005778:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_33_bias_array.format |= AI_FMT_FLAG_CONST;
 800577c:	6810      	ldr	r0, [r2, #0]
    dense_33_bias_array.data = AI_PTR(g_network_weights_map[0] + 219568);
 800577e:	4928      	ldr	r1, [pc, #160]	; (8005820 <network_configure_weights+0x570>)
    dense_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8005780:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    dense_33_bias_array.data = AI_PTR(g_network_weights_map[0] + 219568);
 8005784:	4419      	add	r1, r3
    dense_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8005786:	6010      	str	r0, [r2, #0]
    
    return true;
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
  return false;
}
 8005788:	4620      	mov	r0, r4
    dense_33_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 219568);
 800578a:	e9c2 1102 	strd	r1, r1, [r2, #8]
}
 800578e:	bd70      	pop	{r4, r5, r6, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005790:	2212      	movs	r2, #18
 8005792:	2130      	movs	r1, #48	; 0x30
 8005794:	4628      	mov	r0, r5
 8005796:	f015 fab7 	bl	801ad08 <ai_platform_network_set_error>
}
 800579a:	4620      	mov	r0, r4
 800579c:	bd70      	pop	{r4, r5, r6, pc}
 800579e:	bf00      	nop
 80057a0:	00012db0 	.word	0x00012db0
 80057a4:	00012fb0 	.word	0x00012fb0
 80057a8:	200034fc 	.word	0x200034fc
 80057ac:	2000340c 	.word	0x2000340c
 80057b0:	20003670 	.word	0x20003670
 80057b4:	00016fb0 	.word	0x00016fb0
 80057b8:	20003528 	.word	0x20003528
 80057bc:	000171b0 	.word	0x000171b0
 80057c0:	2000378c 	.word	0x2000378c
 80057c4:	00017630 	.word	0x00017630
 80057c8:	2000369c 	.word	0x2000369c
 80057cc:	00017830 	.word	0x00017830
 80057d0:	20003900 	.word	0x20003900
 80057d4:	0001b830 	.word	0x0001b830
 80057d8:	200037b8 	.word	0x200037b8
 80057dc:	0001ba30 	.word	0x0001ba30
 80057e0:	0001beb0 	.word	0x0001beb0
 80057e4:	0001c0b0 	.word	0x0001c0b0
 80057e8:	20003a1c 	.word	0x20003a1c
 80057ec:	2000392c 	.word	0x2000392c
 80057f0:	20003d04 	.word	0x20003d04
 80057f4:	000240b0 	.word	0x000240b0
 80057f8:	20003bbc 	.word	0x20003bbc
 80057fc:	000244b0 	.word	0x000244b0
 8005800:	20003e20 	.word	0x20003e20
 8005804:	00024db0 	.word	0x00024db0
 8005808:	20003d30 	.word	0x20003d30
 800580c:	000251b0 	.word	0x000251b0
 8005810:	20004594 	.word	0x20004594
 8005814:	000351b0 	.word	0x000351b0
 8005818:	200044f4 	.word	0x200044f4
 800581c:	000355b0 	.word	0x000355b0
 8005820:	000359b0 	.word	0x000359b0

08005824 <network_configure_activations>:
{
 8005824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8005828:	4dc7      	ldr	r5, [pc, #796]	; (8005b48 <network_configure_activations+0x324>)
{
 800582a:	460a      	mov	r2, r1
 800582c:	b091      	sub	sp, #68	; 0x44
 800582e:	4604      	mov	r4, r0
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8005830:	2101      	movs	r1, #1
 8005832:	4628      	mov	r0, r5
 8005834:	f014 ff38 	bl	801a6a8 <ai_platform_get_activations_map>
 8005838:	4683      	mov	fp, r0
 800583a:	2800      	cmp	r0, #0
 800583c:	f000 8271 	beq.w	8005d22 <network_configure_activations+0x4fe>
    serving_default_input_20_output_array.data = AI_PTR(g_network_activations_map[0] + 4120);
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	f241 0218 	movw	r2, #4120	; 0x1018
    conversion_0_output_array.data = AI_PTR(g_network_activations_map[0] + 4120);
 8005846:	49c1      	ldr	r1, [pc, #772]	; (8005b4c <network_configure_activations+0x328>)
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 35140);
 8005848:	f648 1444 	movw	r4, #35140	; 0x8944
    serving_default_input_20_output_array.data = AI_PTR(g_network_activations_map[0] + 4120);
 800584c:	441a      	add	r2, r3
 800584e:	48c0      	ldr	r0, [pc, #768]	; (8005b50 <network_configure_activations+0x32c>)
    conv2d_7_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 11520);
 8005850:	f503 5a34 	add.w	sl, r3, #11520	; 0x2d00
    conv2d_8_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 10496);
 8005854:	f503 5724 	add.w	r7, r3, #10496	; 0x2900
    conv2d_15_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18496);
 8005858:	f644 0540 	movw	r5, #18496	; 0x4840
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 35140);
 800585c:	191c      	adds	r4, r3, r4
    conv2d_7_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 11520);
 800585e:	f8cd a00c 	str.w	sl, [sp, #12]
    conv2d_11_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 768);
 8005862:	f503 7a40 	add.w	sl, r3, #768	; 0x300
    conv2d_15_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18496);
 8005866:	195d      	adds	r5, r3, r5
    conv2d_8_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 10496);
 8005868:	9704      	str	r7, [sp, #16]
    conv2d_11_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 768);
 800586a:	f8cd a004 	str.w	sl, [sp, #4]
    conv2d_12_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 2372);
 800586e:	f603 1a44 	addw	sl, r3, #2372	; 0x944
    conv2d_30_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 18692);
 8005872:	f644 1c04 	movw	ip, #18692	; 0x4904
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1220);
 8005876:	f203 49c4 	addw	r9, r3, #1220	; 0x4c4
    conv2d_12_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 2372);
 800587a:	f8cd a018 	str.w	sl, [sp, #24]
    conv2d_2_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36368);
 800587e:	f648 6610 	movw	r6, #36368	; 0x8e10
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 1520);
 8005882:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 8005c90 <network_configure_activations+0x46c>
    conv2d_6_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 16768);
 8005886:	f503 4e83 	add.w	lr, r3, #16768	; 0x4180
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 35140);
 800588a:	9408      	str	r4, [sp, #32]
    conv2d_29_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 8836);
 800588c:	f242 2484 	movw	r4, #8836	; 0x2284
    conv2d_15_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18496);
 8005890:	9509      	str	r5, [sp, #36]	; 0x24
    conv2d_29_output_array.data = AI_PTR(g_network_activations_map[0] + 12932);
 8005892:	f243 2584 	movw	r5, #12932	; 0x3284
    conv2d_2_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36368);
 8005896:	441e      	add	r6, r3
    conv2d_29_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 8836);
 8005898:	191c      	adds	r4, r3, r4
    conv2d_29_output_array.data = AI_PTR(g_network_activations_map[0] + 12932);
 800589a:	195d      	adds	r5, r3, r5
    conv2d_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 68540);
 800589c:	f8df 83f4 	ldr.w	r8, [pc, #1012]	; 8005c94 <network_configure_activations+0x470>
    conv2d_29_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 8836);
 80058a0:	940d      	str	r4, [sp, #52]	; 0x34
    conv2d_18_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 1792);
 80058a2:	f503 64e0 	add.w	r4, r3, #1792	; 0x700
    conv2d_29_output_array.data = AI_PTR(g_network_activations_map[0] + 12932);
 80058a6:	950e      	str	r5, [sp, #56]	; 0x38
    conv2d_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 68540);
 80058a8:	4498      	add	r8, r3
    conv2d_19_output_array.data = AI_PTR(g_network_activations_map[0] + 30976);
 80058aa:	f503 45f2 	add.w	r5, r3, #30976	; 0x7900
    conversion_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4120);
 80058ae:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 53276);
 80058b2:	f24d 011c 	movw	r1, #53276	; 0xd01c
    serving_default_input_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4120);
 80058b6:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 53276);
 80058ba:	4419      	add	r1, r3
 80058bc:	48a5      	ldr	r0, [pc, #660]	; (8005b54 <network_configure_activations+0x330>)
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 3600);
 80058be:	f503 6261 	add.w	r2, r3, #3600	; 0xe10
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 53276);
 80058c2:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3600);
 80058c6:	49a4      	ldr	r1, [pc, #656]	; (8005b58 <network_configure_activations+0x334>)
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 3600);
 80058c8:	48a4      	ldr	r0, [pc, #656]	; (8005b5c <network_configure_activations+0x338>)
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3600);
 80058ca:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_10_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 8416);
 80058ce:	f242 01e0 	movw	r1, #8416	; 0x20e0
 80058d2:	1859      	adds	r1, r3, r1
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 3600);
 80058d4:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 1520);
 80058d8:	f503 62be 	add.w	r2, r3, #1520	; 0x5f0
    conv2d_10_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 8416);
 80058dc:	9105      	str	r1, [sp, #20]
    conv2d_13_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 18756);
 80058de:	f644 1044 	movw	r0, #18756	; 0x4944
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[0] + 24964);
 80058e2:	f246 1184 	movw	r1, #24964	; 0x6184
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 1520);
 80058e6:	9202      	str	r2, [sp, #8]
    conv2d_15_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 20868);
 80058e8:	f245 1284 	movw	r2, #20868	; 0x5184
    conv2d_2_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 1520);
 80058ec:	9f02      	ldr	r7, [sp, #8]
    conv2d_13_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 18756);
 80058ee:	1818      	adds	r0, r3, r0
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[0] + 24964);
 80058f0:	1859      	adds	r1, r3, r1
    conv2d_15_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 20868);
 80058f2:	189a      	adds	r2, r3, r2
    conv2d_13_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 18756);
 80058f4:	9007      	str	r0, [sp, #28]
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[0] + 6788);
 80058f6:	f641 2084 	movw	r0, #6788	; 0x1a84
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[0] + 24964);
 80058fa:	910b      	str	r1, [sp, #44]	; 0x2c
    conv2d_30_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 18692);
 80058fc:	4661      	mov	r1, ip
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[0] + 6788);
 80058fe:	1818      	adds	r0, r3, r0
    conv2d_15_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 20868);
 8005900:	920a      	str	r2, [sp, #40]	; 0x28
    conv2d_30_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 18692);
 8005902:	1859      	adds	r1, r3, r1
    conv2d_17_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 4740);
 8005904:	f241 2284 	movw	r2, #4740	; 0x1284
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[0] + 6788);
 8005908:	900c      	str	r0, [sp, #48]	; 0x30
    conv2d_18_output_array.data = AI_PTR(g_network_activations_map[0] + 9984);
 800590a:	f503 501c 	add.w	r0, r3, #9984	; 0x2700
    conv2d_30_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 18692);
 800590e:	910f      	str	r1, [sp, #60]	; 0x3c
    conv2d_17_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 4740);
 8005910:	441a      	add	r2, r3
    conv2d_19_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 18176);
 8005912:	f503 418e 	add.w	r1, r3, #18176	; 0x4700
    conv2d_30_output_array.data = AI_PTR(g_network_activations_map[0] + 22788);
 8005916:	f645 1c04 	movw	ip, #22788	; 0x5904
    conv2d_2_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1520);
 800591a:	e9ca 7702 	strd	r7, r7, [sl, #8]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1220);
 800591e:	f8df a378 	ldr.w	sl, [pc, #888]	; 8005c98 <network_configure_activations+0x474>
    conv2d_30_output_array.data = AI_PTR(g_network_activations_map[0] + 22788);
 8005922:	449c      	add	ip, r3
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1220);
 8005924:	e9ca 9902 	strd	r9, r9, [sl, #8]
    conv2d_2_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36368);
 8005928:	f8df a370 	ldr.w	sl, [pc, #880]	; 8005c9c <network_configure_activations+0x478>
    conv2d_2_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36368);
 800592c:	e9ca 6602 	strd	r6, r6, [sl, #8]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 36368);
 8005930:	f8df a36c 	ldr.w	sl, [pc, #876]	; 8005ca0 <network_configure_activations+0x47c>
    conv2d_7_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 11520);
 8005934:	9f03      	ldr	r7, [sp, #12]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 36368);
 8005936:	e9ca 6602 	strd	r6, r6, [sl, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1220);
 800593a:	4e89      	ldr	r6, [pc, #548]	; (8005b60 <network_configure_activations+0x33c>)
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1220);
 800593c:	e9c6 9902 	strd	r9, r9, [r6, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 2576);
 8005940:	f503 6921 	add.w	r9, r3, #2576	; 0xa10
 8005944:	4e87      	ldr	r6, [pc, #540]	; (8005b64 <network_configure_activations+0x340>)
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2576);
 8005946:	e9c6 9902 	strd	r9, r9, [r6, #8]
    conv2d_5_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 800594a:	f503 7900 	add.w	r9, r3, #512	; 0x200
 800594e:	4e86      	ldr	r6, [pc, #536]	; (8005b68 <network_configure_activations+0x344>)
    conv2d_5_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8005950:	e9c6 9902 	strd	r9, r9, [r6, #8]
    conv2d_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 68540);
 8005954:	4e85      	ldr	r6, [pc, #532]	; (8005b6c <network_configure_activations+0x348>)
    conv2d_5_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 68540);
 8005956:	e9c6 8802 	strd	r8, r8, [r6, #8]
    conv2d_5_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800595a:	4e85      	ldr	r6, [pc, #532]	; (8005b70 <network_configure_activations+0x34c>)
    conv2d_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 16384);
 800595c:	f503 4880 	add.w	r8, r3, #16384	; 0x4000
    conv2d_5_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005960:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005964:	4e83      	ldr	r6, [pc, #524]	; (8005b74 <network_configure_activations+0x350>)
    conv2d_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005966:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 16384);
 800596a:	4e83      	ldr	r6, [pc, #524]	; (8005b78 <network_configure_activations+0x354>)
    conv2d_6_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 16384);
 800596c:	e9c6 8802 	strd	r8, r8, [r6, #8]
    conv2d_6_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 16768);
 8005970:	4e82      	ldr	r6, [pc, #520]	; (8005b7c <network_configure_activations+0x358>)
    conv2d_6_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 16768);
 8005972:	e9c6 ee02 	strd	lr, lr, [r6, #8]
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[0] + 16768);
 8005976:	4e82      	ldr	r6, [pc, #520]	; (8005b80 <network_configure_activations+0x35c>)
    conv2d_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 16768);
 8005978:	e9c6 ee02 	strd	lr, lr, [r6, #8]
    conv2d_7_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 12544);
 800597c:	f503 5e44 	add.w	lr, r3, #12544	; 0x3100
 8005980:	4e80      	ldr	r6, [pc, #512]	; (8005b84 <network_configure_activations+0x360>)
    conv2d_7_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12544);
 8005982:	e9c6 ee02 	strd	lr, lr, [r6, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005986:	4e80      	ldr	r6, [pc, #512]	; (8005b88 <network_configure_activations+0x364>)
    conv2d_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005988:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_7_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 11520);
 800598c:	4e7f      	ldr	r6, [pc, #508]	; (8005b8c <network_configure_activations+0x368>)
    conv2d_7_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 11520);
 800598e:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 11520);
 8005992:	4e7f      	ldr	r6, [pc, #508]	; (8005b90 <network_configure_activations+0x36c>)
    conv2d_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 11520);
 8005994:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005998:	4e7e      	ldr	r6, [pc, #504]	; (8005b94 <network_configure_activations+0x370>)
    conv2d_8_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 10496);
 800599a:	9f04      	ldr	r7, [sp, #16]
    conv2d_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800599c:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_8_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 10496);
 80059a0:	4e7d      	ldr	r6, [pc, #500]	; (8005b98 <network_configure_activations+0x374>)
    conv2d_8_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 10496);
 80059a2:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[0] + 10496);
 80059a6:	4e7d      	ldr	r6, [pc, #500]	; (8005b9c <network_configure_activations+0x378>)
    conv2d_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 10496);
 80059a8:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_10_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 8416);
 80059ac:	9f05      	ldr	r7, [sp, #20]
 80059ae:	4e7c      	ldr	r6, [pc, #496]	; (8005ba0 <network_configure_activations+0x37c>)
    conv2d_10_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8416);
 80059b0:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_10_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80059b4:	4e7b      	ldr	r6, [pc, #492]	; (8005ba4 <network_configure_activations+0x380>)
    conv2d_10_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 43264);
 80059b6:	f503 4729 	add.w	r7, r3, #43264	; 0xa900
    conv2d_10_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80059ba:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_10_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 43264);
 80059be:	4e7a      	ldr	r6, [pc, #488]	; (8005ba8 <network_configure_activations+0x384>)
    conv2d_10_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 43264);
 80059c0:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[0] + 51456);
 80059c4:	f503 4749 	add.w	r7, r3, #51456	; 0xc900
 80059c8:	4e78      	ldr	r6, [pc, #480]	; (8005bac <network_configure_activations+0x388>)
    conv2d_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 51456);
 80059ca:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_11_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80059ce:	4e78      	ldr	r6, [pc, #480]	; (8005bb0 <network_configure_activations+0x38c>)
    conv2d_11_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 768);
 80059d0:	9f01      	ldr	r7, [sp, #4]
    conv2d_11_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80059d2:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_11_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 768);
 80059d6:	4e77      	ldr	r6, [pc, #476]	; (8005bb4 <network_configure_activations+0x390>)
    conv2d_11_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 768);
 80059d8:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_11_output_array.data = AI_PTR(g_network_activations_map[0] + 17152);
 80059dc:	f503 4786 	add.w	r7, r3, #17152	; 0x4300
 80059e0:	4e75      	ldr	r6, [pc, #468]	; (8005bb8 <network_configure_activations+0x394>)
    conv2d_11_output_array.data_start = AI_PTR(g_network_activations_map[0] + 17152);
 80059e2:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_12_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 33536);
 80059e6:	f503 4703 	add.w	r7, r3, #33536	; 0x8300
 80059ea:	4e74      	ldr	r6, [pc, #464]	; (8005bbc <network_configure_activations+0x398>)
    conv2d_12_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 33536);
 80059ec:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80059f0:	4e73      	ldr	r6, [pc, #460]	; (8005bc0 <network_configure_activations+0x39c>)
    conv2d_12_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 2372);
 80059f2:	9f06      	ldr	r7, [sp, #24]
    conv2d_12_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80059f4:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_12_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 2372);
 80059f8:	4e72      	ldr	r6, [pc, #456]	; (8005bc4 <network_configure_activations+0x3a0>)
    conv2d_12_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 2372);
 80059fa:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[0] + 2372);
 80059fe:	4e72      	ldr	r6, [pc, #456]	; (8005bc8 <network_configure_activations+0x3a4>)
    conv2d_12_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2372);
 8005a00:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_13_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a04:	4e71      	ldr	r6, [pc, #452]	; (8005bcc <network_configure_activations+0x3a8>)
    conv2d_13_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 18756);
 8005a06:	9f07      	ldr	r7, [sp, #28]
    conv2d_13_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a08:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_13_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 18756);
 8005a0c:	4e70      	ldr	r6, [pc, #448]	; (8005bd0 <network_configure_activations+0x3ac>)
    conv2d_13_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 18756);
 8005a0e:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 35140);
 8005a12:	9f08      	ldr	r7, [sp, #32]
 8005a14:	4e6f      	ldr	r6, [pc, #444]	; (8005bd4 <network_configure_activations+0x3b0>)
    conv2d_13_output_array.data_start = AI_PTR(g_network_activations_map[0] + 35140);
 8005a16:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_15_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a1a:	4e6f      	ldr	r6, [pc, #444]	; (8005bd8 <network_configure_activations+0x3b4>)
    conv2d_15_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18496);
 8005a1c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    conv2d_15_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a1e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_15_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18496);
 8005a22:	4e6e      	ldr	r6, [pc, #440]	; (8005bdc <network_configure_activations+0x3b8>)
    conv2d_15_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 18496);
 8005a24:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_15_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 20868);
 8005a28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005a2a:	4e6d      	ldr	r6, [pc, #436]	; (8005be0 <network_configure_activations+0x3bc>)
    conv2d_15_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 20868);
 8005a2c:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[0] + 24964);
 8005a30:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005a32:	4e6c      	ldr	r6, [pc, #432]	; (8005be4 <network_configure_activations+0x3c0>)
    conv2d_15_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24964);
 8005a34:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_16_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a38:	4e6b      	ldr	r6, [pc, #428]	; (8005be8 <network_configure_activations+0x3c4>)
    conv2d_16_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 1536);
 8005a3a:	f503 67c0 	add.w	r7, r3, #1536	; 0x600
    conv2d_16_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a3e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_16_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 1536);
 8005a42:	4e6a      	ldr	r6, [pc, #424]	; (8005bec <network_configure_activations+0x3c8>)
    conv2d_16_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 1536);
 8005a44:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_16_output_array.data = AI_PTR(g_network_activations_map[0] + 9728);
 8005a48:	f503 5718 	add.w	r7, r3, #9728	; 0x2600
 8005a4c:	4e68      	ldr	r6, [pc, #416]	; (8005bf0 <network_configure_activations+0x3cc>)
    conv2d_16_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9728);
 8005a4e:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_17_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 17920);
 8005a52:	f503 478c 	add.w	r7, r3, #17920	; 0x4600
 8005a56:	4e67      	ldr	r6, [pc, #412]	; (8005bf4 <network_configure_activations+0x3d0>)
    conv2d_17_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 17920);
 8005a58:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_17_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a5c:	4e66      	ldr	r6, [pc, #408]	; (8005bf8 <network_configure_activations+0x3d4>)
    conv2d_17_output_array.data = AI_PTR(g_network_activations_map[0] + 30720);
 8005a5e:	f503 47f0 	add.w	r7, r3, #30720	; 0x7800
    conv2d_17_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a62:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_17_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 4740);
 8005a66:	4e65      	ldr	r6, [pc, #404]	; (8005bfc <network_configure_activations+0x3d8>)
    conv2d_17_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 4740);
 8005a68:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_17_output_array.data = AI_PTR(g_network_activations_map[0] + 30720);
 8005a6c:	4e64      	ldr	r6, [pc, #400]	; (8005c00 <network_configure_activations+0x3dc>)
    conv2d_17_output_array.data_start = AI_PTR(g_network_activations_map[0] + 30720);
 8005a6e:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_18_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a72:	4e64      	ldr	r6, [pc, #400]	; (8005c04 <network_configure_activations+0x3e0>)
    conv2d_18_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a74:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_18_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 1792);
 8005a78:	4e63      	ldr	r6, [pc, #396]	; (8005c08 <network_configure_activations+0x3e4>)
    conv2d_18_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 1792);
 8005a7a:	e9c6 4402 	strd	r4, r4, [r6, #8]
    conv2d_18_output_array.data = AI_PTR(g_network_activations_map[0] + 9984);
 8005a7e:	4e63      	ldr	r6, [pc, #396]	; (8005c0c <network_configure_activations+0x3e8>)
    conv2d_18_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9984);
 8005a80:	e9c6 0002 	strd	r0, r0, [r6, #8]
    conv2d_19_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 18176);
 8005a84:	4e62      	ldr	r6, [pc, #392]	; (8005c10 <network_configure_activations+0x3ec>)
    conv2d_19_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18176);
 8005a86:	e9c6 1102 	strd	r1, r1, [r6, #8]
    conv2d_19_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a8a:	4e62      	ldr	r6, [pc, #392]	; (8005c14 <network_configure_activations+0x3f0>)
    conv2d_19_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a8c:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_19_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 4740);
 8005a90:	4e61      	ldr	r6, [pc, #388]	; (8005c18 <network_configure_activations+0x3f4>)
    conv2d_19_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 4740);
 8005a92:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_19_output_array.data = AI_PTR(g_network_activations_map[0] + 30976);
 8005a96:	4e61      	ldr	r6, [pc, #388]	; (8005c1c <network_configure_activations+0x3f8>)
    conv2d_19_output_array.data_start = AI_PTR(g_network_activations_map[0] + 30976);
 8005a98:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_20_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005a9c:	4e60      	ldr	r6, [pc, #384]	; (8005c20 <network_configure_activations+0x3fc>)
    conv2d_20_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005a9e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_20_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 1792);
 8005aa2:	4e60      	ldr	r6, [pc, #384]	; (8005c24 <network_configure_activations+0x400>)
    conv2d_20_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 1792);
 8005aa4:	e9c6 4402 	strd	r4, r4, [r6, #8]
    conv2d_20_output_array.data = AI_PTR(g_network_activations_map[0] + 9984);
 8005aa8:	4e5f      	ldr	r6, [pc, #380]	; (8005c28 <network_configure_activations+0x404>)
    conv2d_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9984);
 8005aaa:	e9c6 0002 	strd	r0, r0, [r6, #8]
    conv2d_21_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 18176);
 8005aae:	4e5f      	ldr	r6, [pc, #380]	; (8005c2c <network_configure_activations+0x408>)
    conv2d_21_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18176);
 8005ab0:	e9c6 1102 	strd	r1, r1, [r6, #8]
    conv2d_21_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005ab4:	4e5e      	ldr	r6, [pc, #376]	; (8005c30 <network_configure_activations+0x40c>)
    conv2d_21_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005ab6:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_21_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 4740);
 8005aba:	4e5e      	ldr	r6, [pc, #376]	; (8005c34 <network_configure_activations+0x410>)
    conv2d_21_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 4740);
 8005abc:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_21_output_array.data = AI_PTR(g_network_activations_map[0] + 30976);
 8005ac0:	4e5d      	ldr	r6, [pc, #372]	; (8005c38 <network_configure_activations+0x414>)
    conv2d_21_output_array.data_start = AI_PTR(g_network_activations_map[0] + 30976);
 8005ac2:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_22_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005ac6:	4e5d      	ldr	r6, [pc, #372]	; (8005c3c <network_configure_activations+0x418>)
    conv2d_22_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005ac8:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_22_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 1792);
 8005acc:	4e5c      	ldr	r6, [pc, #368]	; (8005c40 <network_configure_activations+0x41c>)
    conv2d_22_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 1792);
 8005ace:	e9c6 4402 	strd	r4, r4, [r6, #8]
    conv2d_22_output_array.data = AI_PTR(g_network_activations_map[0] + 9984);
 8005ad2:	4e5c      	ldr	r6, [pc, #368]	; (8005c44 <network_configure_activations+0x420>)
    conv2d_22_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9984);
 8005ad4:	e9c6 0002 	strd	r0, r0, [r6, #8]
    conv2d_23_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 18176);
 8005ad8:	4e5b      	ldr	r6, [pc, #364]	; (8005c48 <network_configure_activations+0x424>)
    conv2d_23_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18176);
 8005ada:	e9c6 1102 	strd	r1, r1, [r6, #8]
    conv2d_23_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005ade:	4e5b      	ldr	r6, [pc, #364]	; (8005c4c <network_configure_activations+0x428>)
    conv2d_23_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005ae0:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_23_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 4740);
 8005ae4:	4e5a      	ldr	r6, [pc, #360]	; (8005c50 <network_configure_activations+0x42c>)
    conv2d_23_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 4740);
 8005ae6:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_23_output_array.data = AI_PTR(g_network_activations_map[0] + 30976);
 8005aea:	4e5a      	ldr	r6, [pc, #360]	; (8005c54 <network_configure_activations+0x430>)
    conv2d_23_output_array.data_start = AI_PTR(g_network_activations_map[0] + 30976);
 8005aec:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_24_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005af0:	4e59      	ldr	r6, [pc, #356]	; (8005c58 <network_configure_activations+0x434>)
    conv2d_24_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005af2:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_24_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 1792);
 8005af6:	4e59      	ldr	r6, [pc, #356]	; (8005c5c <network_configure_activations+0x438>)
    conv2d_24_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 1792);
 8005af8:	e9c6 4402 	strd	r4, r4, [r6, #8]
    conv2d_24_output_array.data = AI_PTR(g_network_activations_map[0] + 9984);
 8005afc:	4e58      	ldr	r6, [pc, #352]	; (8005c60 <network_configure_activations+0x43c>)
    conv2d_24_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9984);
 8005afe:	e9c6 0002 	strd	r0, r0, [r6, #8]
    conv2d_25_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 18176);
 8005b02:	4e58      	ldr	r6, [pc, #352]	; (8005c64 <network_configure_activations+0x440>)
    conv2d_25_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18176);
 8005b04:	e9c6 1102 	strd	r1, r1, [r6, #8]
    conv2d_25_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005b08:	4e57      	ldr	r6, [pc, #348]	; (8005c68 <network_configure_activations+0x444>)
    conv2d_25_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005b0a:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_25_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 4740);
 8005b0e:	4e57      	ldr	r6, [pc, #348]	; (8005c6c <network_configure_activations+0x448>)
    conv2d_25_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 4740);
 8005b10:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_25_output_array.data = AI_PTR(g_network_activations_map[0] + 30976);
 8005b14:	4e56      	ldr	r6, [pc, #344]	; (8005c70 <network_configure_activations+0x44c>)
    conv2d_25_output_array.data_start = AI_PTR(g_network_activations_map[0] + 30976);
 8005b16:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_26_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005b1a:	4d56      	ldr	r5, [pc, #344]	; (8005c74 <network_configure_activations+0x450>)
    conv2d_26_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005b1c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_26_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 1792);
 8005b20:	4d55      	ldr	r5, [pc, #340]	; (8005c78 <network_configure_activations+0x454>)
    conv2d_26_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 1792);
 8005b22:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv2d_26_output_array.data = AI_PTR(g_network_activations_map[0] + 9984);
 8005b26:	4c55      	ldr	r4, [pc, #340]	; (8005c7c <network_configure_activations+0x458>)
    conv2d_26_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9984);
 8005b28:	e9c4 0002 	strd	r0, r0, [r4, #8]
    conv2d_28_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 18176);
 8005b2c:	4854      	ldr	r0, [pc, #336]	; (8005c80 <network_configure_activations+0x45c>)
    conv2d_28_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18176);
 8005b2e:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_28_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005b32:	4954      	ldr	r1, [pc, #336]	; (8005c84 <network_configure_activations+0x460>)
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[0] + 6788);
 8005b34:	980c      	ldr	r0, [sp, #48]	; 0x30
    conv2d_28_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005b36:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_28_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 4740);
 8005b3a:	4953      	ldr	r1, [pc, #332]	; (8005c88 <network_configure_activations+0x464>)
    conv2d_28_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 4740);
 8005b3c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_28_output_array.data = AI_PTR(g_network_activations_map[0] + 6788);
 8005b40:	4a52      	ldr	r2, [pc, #328]	; (8005c8c <network_configure_activations+0x468>)
    conv2d_30_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 9216);
 8005b42:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
 8005b46:	e0ad      	b.n	8005ca4 <network_configure_activations+0x480>
 8005b48:	200062c8 	.word	0x200062c8
 8005b4c:	2000447c 	.word	0x2000447c
 8005b50:	20004708 	.word	0x20004708
 8005b54:	20002e68 	.word	0x20002e68
 8005b58:	20002e3c 	.word	0x20002e3c
 8005b5c:	20002e94 	.word	0x20002e94
 8005b60:	20003ee4 	.word	0x20003ee4
 8005b64:	20003eb8 	.word	0x20003eb8
 8005b68:	20004000 	.word	0x20004000
 8005b6c:	2000402c 	.word	0x2000402c
 8005b70:	20004058 	.word	0x20004058
 8005b74:	20003fa8 	.word	0x20003fa8
 8005b78:	20004148 	.word	0x20004148
 8005b7c:	20004174 	.word	0x20004174
 8005b80:	2000411c 	.word	0x2000411c
 8005b84:	20004290 	.word	0x20004290
 8005b88:	200042bc 	.word	0x200042bc
 8005b8c:	200042e8 	.word	0x200042e8
 8005b90:	20004238 	.word	0x20004238
 8005b94:	200043d8 	.word	0x200043d8
 8005b98:	20004404 	.word	0x20004404
 8005b9c:	200043ac 	.word	0x200043ac
 8005ba0:	200022e0 	.word	0x200022e0
 8005ba4:	2000230c 	.word	0x2000230c
 8005ba8:	20002338 	.word	0x20002338
 8005bac:	20002288 	.word	0x20002288
 8005bb0:	20002428 	.word	0x20002428
 8005bb4:	20002454 	.word	0x20002454
 8005bb8:	200023fc 	.word	0x200023fc
 8005bbc:	20002570 	.word	0x20002570
 8005bc0:	2000259c 	.word	0x2000259c
 8005bc4:	200025c8 	.word	0x200025c8
 8005bc8:	20002518 	.word	0x20002518
 8005bcc:	200026b8 	.word	0x200026b8
 8005bd0:	200026e4 	.word	0x200026e4
 8005bd4:	2000268c 	.word	0x2000268c
 8005bd8:	20002800 	.word	0x20002800
 8005bdc:	2000282c 	.word	0x2000282c
 8005be0:	20002858 	.word	0x20002858
 8005be4:	200027a8 	.word	0x200027a8
 8005be8:	20002948 	.word	0x20002948
 8005bec:	20002974 	.word	0x20002974
 8005bf0:	2000291c 	.word	0x2000291c
 8005bf4:	20002a90 	.word	0x20002a90
 8005bf8:	20002abc 	.word	0x20002abc
 8005bfc:	20002ae8 	.word	0x20002ae8
 8005c00:	20002a38 	.word	0x20002a38
 8005c04:	20002bd8 	.word	0x20002bd8
 8005c08:	20002c04 	.word	0x20002c04
 8005c0c:	20002bac 	.word	0x20002bac
 8005c10:	20002d20 	.word	0x20002d20
 8005c14:	20002d4c 	.word	0x20002d4c
 8005c18:	20002d78 	.word	0x20002d78
 8005c1c:	20002cc8 	.word	0x20002cc8
 8005c20:	20002f84 	.word	0x20002f84
 8005c24:	20002fb0 	.word	0x20002fb0
 8005c28:	20002f58 	.word	0x20002f58
 8005c2c:	200030cc 	.word	0x200030cc
 8005c30:	200030f8 	.word	0x200030f8
 8005c34:	20003124 	.word	0x20003124
 8005c38:	20003074 	.word	0x20003074
 8005c3c:	20003214 	.word	0x20003214
 8005c40:	20003240 	.word	0x20003240
 8005c44:	200031e8 	.word	0x200031e8
 8005c48:	2000335c 	.word	0x2000335c
 8005c4c:	20003388 	.word	0x20003388
 8005c50:	200033b4 	.word	0x200033b4
 8005c54:	20003304 	.word	0x20003304
 8005c58:	200034a4 	.word	0x200034a4
 8005c5c:	200034d0 	.word	0x200034d0
 8005c60:	20003478 	.word	0x20003478
 8005c64:	200035ec 	.word	0x200035ec
 8005c68:	20003618 	.word	0x20003618
 8005c6c:	20003644 	.word	0x20003644
 8005c70:	20003594 	.word	0x20003594
 8005c74:	20003734 	.word	0x20003734
 8005c78:	20003760 	.word	0x20003760
 8005c7c:	20003708 	.word	0x20003708
 8005c80:	2000387c 	.word	0x2000387c
 8005c84:	200038a8 	.word	0x200038a8
 8005c88:	200038d4 	.word	0x200038d4
 8005c8c:	20003824 	.word	0x20003824
 8005c90:	20003b0c 	.word	0x20003b0c
 8005c94:	00010bbc 	.word	0x00010bbc
 8005c98:	20003b38 	.word	0x20003b38
 8005c9c:	20003b64 	.word	0x20003b64
 8005ca0:	20003ab4 	.word	0x20003ab4
    conv2d_28_output_array.data_start = AI_PTR(g_network_activations_map[0] + 6788);
 8005ca4:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_29_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005ca8:	4a22      	ldr	r2, [pc, #136]	; (8005d34 <network_configure_activations+0x510>)
    conv2d_29_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 8836);
 8005caa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    conv2d_29_output_array.data = AI_PTR(g_network_activations_map[0] + 12932);
 8005cac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    dense_33_output_array.data = AI_PTR(g_network_activations_map[0] + 768);
 8005cae:	9f01      	ldr	r7, [sp, #4]
    dense_33_0_conversion_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005cb0:	4821      	ldr	r0, [pc, #132]	; (8005d38 <network_configure_activations+0x514>)
    conv2d_29_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005cb2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_29_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 8836);
 8005cb6:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <network_configure_activations+0x518>)
    conv2d_29_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 8836);
 8005cb8:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_29_output_array.data = AI_PTR(g_network_activations_map[0] + 12932);
 8005cbc:	4a20      	ldr	r2, [pc, #128]	; (8005d40 <network_configure_activations+0x51c>)
    conv2d_29_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12932);
 8005cbe:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_30_pad_before_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005cc2:	4a20      	ldr	r2, [pc, #128]	; (8005d44 <network_configure_activations+0x520>)
    conv2d_30_pad_before_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005cc4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_30_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 9216);
 8005cc8:	4a1f      	ldr	r2, [pc, #124]	; (8005d48 <network_configure_activations+0x524>)
    conv2d_30_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 9216);
 8005cca:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_30_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 18692);
 8005cce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cd0:	4a1e      	ldr	r2, [pc, #120]	; (8005d4c <network_configure_activations+0x528>)
    conv2d_30_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 18692);
 8005cd2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_30_output_array.data = AI_PTR(g_network_activations_map[0] + 22788);
 8005cd6:	4a1e      	ldr	r2, [pc, #120]	; (8005d50 <network_configure_activations+0x52c>)
    conv2d_31_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 3584);
 8005cd8:	f503 6160 	add.w	r1, r3, #3584	; 0xe00
    conv2d_30_output_array.data_start = AI_PTR(g_network_activations_map[0] + 22788);
 8005cdc:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_31_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005ce0:	4a1c      	ldr	r2, [pc, #112]	; (8005d54 <network_configure_activations+0x530>)
    conv2d_31_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005ce2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_31_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 3584);
 8005ce6:	4a1c      	ldr	r2, [pc, #112]	; (8005d58 <network_configure_activations+0x534>)
    conv2d_31_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 3584);
 8005ce8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_31_output_array.data = AI_PTR(g_network_activations_map[0] + 7680);
 8005cec:	f503 51f0 	add.w	r1, r3, #7680	; 0x1e00
 8005cf0:	4a1a      	ldr	r2, [pc, #104]	; (8005d5c <network_configure_activations+0x538>)
    conv2d_31_output_array.data_start = AI_PTR(g_network_activations_map[0] + 7680);
 8005cf2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    pool_32_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005cf6:	4a1a      	ldr	r2, [pc, #104]	; (8005d60 <network_configure_activations+0x53c>)
    dense_33_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8005cf8:	f503 7180 	add.w	r1, r3, #256	; 0x100
    pool_32_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005cfc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_33_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8005d00:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <network_configure_activations+0x540>)
    dense_33_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8005d02:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_33_output_array.data = AI_PTR(g_network_activations_map[0] + 768);
 8005d06:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <network_configure_activations+0x544>)
    nl_34_output_array.data = AI_PTR(g_network_activations_map[0] + 16);
 8005d08:	f103 0110 	add.w	r1, r3, #16
    dense_33_output_array.data_start = AI_PTR(g_network_activations_map[0] + 768);
 8005d0c:	e9c2 7702 	strd	r7, r7, [r2, #8]
    dense_33_0_conversion_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005d10:	e9c0 3302 	strd	r3, r3, [r0, #8]
    nl_34_output_array.data = AI_PTR(g_network_activations_map[0] + 16);
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <network_configure_activations+0x548>)
}
 8005d16:	4658      	mov	r0, fp
    nl_34_output_array.data_start = AI_PTR(g_network_activations_map[0] + 16);
 8005d18:	e9c2 1102 	strd	r1, r1, [r2, #8]
}
 8005d1c:	b011      	add	sp, #68	; 0x44
 8005d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005d22:	2213      	movs	r2, #19
 8005d24:	2130      	movs	r1, #48	; 0x30
 8005d26:	4620      	mov	r0, r4
 8005d28:	f014 ffee 	bl	801ad08 <ai_platform_network_set_error>
}
 8005d2c:	4658      	mov	r0, fp
 8005d2e:	b011      	add	sp, #68	; 0x44
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d34:	200039c4 	.word	0x200039c4
 8005d38:	200044c8 	.word	0x200044c8
 8005d3c:	200039f0 	.word	0x200039f0
 8005d40:	20003998 	.word	0x20003998
 8005d44:	20003c80 	.word	0x20003c80
 8005d48:	20003cac 	.word	0x20003cac
 8005d4c:	20003cd8 	.word	0x20003cd8
 8005d50:	20003c28 	.word	0x20003c28
 8005d54:	20003dc8 	.word	0x20003dc8
 8005d58:	20003df4 	.word	0x20003df4
 8005d5c:	20003d9c 	.word	0x20003d9c
 8005d60:	200046dc 	.word	0x200046dc
 8005d64:	20004568 	.word	0x20004568
 8005d68:	2000453c 	.word	0x2000453c
 8005d6c:	20004678 	.word	0x20004678

08005d70 <ai_network_get_info>:

AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	460d      	mov	r5, r1
 8005d74:	b0a0      	sub	sp, #128	; 0x80
 8005d76:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005d78:	f014 ff3a 	bl	801abf0 <ai_platform_context_acquire>

  if (report && net_ctx)
 8005d7c:	2d00      	cmp	r5, #0
 8005d7e:	bf18      	it	ne
 8005d80:	2800      	cmpne	r0, #0
 8005d82:	bf14      	ite	ne
 8005d84:	2401      	movne	r4, #1
 8005d86:	2400      	moveq	r4, #0
 8005d88:	d102      	bne.n	8005d90 <ai_network_get_info+0x20>

    *report = r;
    return true;
  }
  return false;
}
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	b020      	add	sp, #128	; 0x80
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
    ai_network_report r = {
 8005d90:	226c      	movs	r2, #108	; 0x6c
 8005d92:	2100      	movs	r1, #0
 8005d94:	a805      	add	r0, sp, #20
 8005d96:	f01c faa1 	bl	80222dc <memset>
 8005d9a:	4916      	ldr	r1, [pc, #88]	; (8005df4 <ai_network_get_info+0x84>)
 8005d9c:	4b16      	ldr	r3, [pc, #88]	; (8005df8 <ai_network_get_info+0x88>)
 8005d9e:	4a17      	ldr	r2, [pc, #92]	; (8005dfc <ai_network_get_info+0x8c>)
 8005da0:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8005da4:	4b16      	ldr	r3, [pc, #88]	; (8005e00 <ai_network_get_info+0x90>)
 8005da6:	e9cd 2303 	strd	r2, r3, [sp, #12]
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005daa:	f014 fcd5 	bl	801a758 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8005dae:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8005db0:	f014 fd56 	bl	801a860 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8005db4:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <ai_network_get_info+0x94>)
 8005db6:	e9cd 0306 	strd	r0, r3, [sp, #24]
 8005dba:	f240 3307 	movw	r3, #775	; 0x307
 8005dbe:	f8ad 3020 	strh.w	r3, [sp, #32]
      .api_version            = ai_platform_api_get_version(),
 8005dc2:	f014 fde5 	bl	801a990 <ai_platform_api_get_version>
 8005dc6:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005dc8:	f014 fe7a 	bl	801aac0 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8005dcc:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <ai_network_get_info+0x98>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005dce:	4602      	mov	r2, r0
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005dd0:	a901      	add	r1, sp, #4
 8005dd2:	4630      	mov	r0, r6
    ai_network_report r = {
 8005dd4:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005dd8:	f014 ff9c 	bl	801ad14 <ai_platform_api_get_network_report>
 8005ddc:	4604      	mov	r4, r0
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d0d3      	beq.n	8005d8a <ai_network_get_info+0x1a>
    *report = r;
 8005de2:	227c      	movs	r2, #124	; 0x7c
 8005de4:	a901      	add	r1, sp, #4
 8005de6:	4628      	mov	r0, r5
 8005de8:	f01c fa50 	bl	802228c <memcpy>
}
 8005dec:	4620      	mov	r0, r4
 8005dee:	b020      	add	sp, #128	; 0x80
 8005df0:	bd70      	pop	{r4, r5, r6, pc}
 8005df2:	bf00      	nop
 8005df4:	08026024 	.word	0x08026024
 8005df8:	0802602c 	.word	0x0802602c
 8005dfc:	08026050 	.word	0x08026050
 8005e00:	0802606c 	.word	0x0802606c
 8005e04:	08025e00 	.word	0x08025e00
 8005e08:	00ccc700 	.word	0x00ccc700

08005e0c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005e0c:	b510      	push	{r4, lr}
  return ai_platform_network_create(
 8005e0e:	2205      	movs	r2, #5
{
 8005e10:	b082      	sub	sp, #8
  return ai_platform_network_create(
 8005e12:	2400      	movs	r4, #0
 8005e14:	2301      	movs	r3, #1
 8005e16:	e9cd 2400 	strd	r2, r4, [sp]
 8005e1a:	4a02      	ldr	r2, [pc, #8]	; (8005e24 <ai_network_create+0x18>)
 8005e1c:	f015 fbaa 	bl	801b574 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005e20:	b002      	add	sp, #8
 8005e22:	bd10      	pop	{r4, pc}
 8005e24:	200045a4 	.word	0x200045a4

08005e28 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8005e28:	f015 bd7e 	b.w	801b928 <ai_platform_network_destroy>

08005e2c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	4606      	mov	r6, r0
 8005e30:	460d      	mov	r5, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005e32:	f015 fe81 	bl	801bb38 <ai_platform_network_init>
  if (!net_ctx) return false;
 8005e36:	4604      	mov	r4, r0
 8005e38:	b178      	cbz	r0, 8005e5a <ai_network_init+0x2e>

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	f7ff fa38 	bl	80052b0 <network_configure_weights>
 8005e40:	4603      	mov	r3, r0
  ok &= network_configure_activations(net_ctx, params);
 8005e42:	4629      	mov	r1, r5
 8005e44:	4620      	mov	r0, r4
  ok &= network_configure_weights(net_ctx, params);
 8005e46:	461c      	mov	r4, r3
  ok &= network_configure_activations(net_ctx, params);
 8005e48:	f7ff fcec 	bl	8005824 <network_configure_activations>
 8005e4c:	4603      	mov	r3, r0

  ok &= ai_platform_network_post_init(network);
 8005e4e:	4630      	mov	r0, r6
 8005e50:	401c      	ands	r4, r3
 8005e52:	f016 f80d 	bl	801be70 <ai_platform_network_post_init>
 8005e56:	b2e4      	uxtb	r4, r4
 8005e58:	4020      	ands	r0, r4

  return ok;
}
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}

08005e5c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005e5c:	f016 b932 	b.w	801c0c4 <ai_platform_network_process>

08005e60 <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 8005e60:	b410      	push	{r4}
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8005e62:	2200      	movs	r2, #0
 8005e64:	4c08      	ldr	r4, [pc, #32]	; (8005e88 <ai_network_data_activations_buffer_get+0x28>)
{
 8005e66:	b085      	sub	sp, #20
  return buf;
 8005e68:	6004      	str	r4, [r0, #0]
 8005e6a:	60c2      	str	r2, [r0, #12]
 8005e6c:	4c07      	ldr	r4, [pc, #28]	; (8005e8c <ai_network_data_activations_buffer_get+0x2c>)
 8005e6e:	f8c0 d018 	str.w	sp, [r0, #24]
 8005e72:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8005e76:	f240 4201 	movw	r2, #1025	; 0x401
 8005e7a:	e9c0 4204 	strd	r4, r2, [r0, #16]
}
 8005e7e:	b005      	add	sp, #20
 8005e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	00040440 	.word	0x00040440
 8005e8c:	00010e10 	.word	0x00010e10

08005e90 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 8005e90:	b410      	push	{r4}
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8005e92:	2200      	movs	r2, #0
 8005e94:	4c08      	ldr	r4, [pc, #32]	; (8005eb8 <ai_network_data_weights_buffer_get+0x28>)
{
 8005e96:	b085      	sub	sp, #20
  return buf;
 8005e98:	6004      	str	r4, [r0, #0]
 8005e9a:	60c2      	str	r2, [r0, #12]
 8005e9c:	4c07      	ldr	r4, [pc, #28]	; (8005ebc <ai_network_data_weights_buffer_get+0x2c>)
 8005e9e:	f8c0 d018 	str.w	sp, [r0, #24]
 8005ea2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8005ea6:	f240 4201 	movw	r2, #1025	; 0x401
 8005eaa:	e9c0 4204 	strd	r4, r2, [r0, #16]
}
 8005eae:	b005      	add	sp, #20
 8005eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40040440 	.word	0x40040440
 8005ebc:	000359c0 	.word	0x000359c0

08005ec0 <ai_network_data_weights_get>:
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
  return AI_HANDLE_PTR(g_network_weights_table);

}
 8005ec0:	4800      	ldr	r0, [pc, #0]	; (8005ec4 <ai_network_data_weights_get+0x4>)
 8005ec2:	4770      	bx	lr
 8005ec4:	20004718 	.word	0x20004718

08005ec8 <SD_initialize>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 8005ec8:	2301      	movs	r3, #1
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8005eca:	2000      	movs	r0, #0
{
 8005ecc:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005ece:	4c07      	ldr	r4, [pc, #28]	; (8005eec <SD_initialize+0x24>)
 8005ed0:	7023      	strb	r3, [r4, #0]
  Stat = STA_NOINIT;
 8005ed2:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8005ed4:	f004 fdb2 	bl	800aa3c <BSP_SD_GetCardState>
 8005ed8:	b918      	cbnz	r0, 8005ee2 <SD_initialize+0x1a>
    Stat &= ~STA_NOINIT;
 8005eda:	7823      	ldrb	r3, [r4, #0]
 8005edc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005ee0:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005ee2:	7823      	ldrb	r3, [r4, #0]
 8005ee4:	b2db      	uxtb	r3, r3
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8005ee6:	7023      	strb	r3, [r4, #0]
#endif
  return Stat;
 8005ee8:	7820      	ldrb	r0, [r4, #0]
}
 8005eea:	bd10      	pop	{r4, pc}
 8005eec:	20004724 	.word	0x20004724

08005ef0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005ef0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4c05      	ldr	r4, [pc, #20]	; (8005f0c <SD_status+0x1c>)
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8005ef6:	2000      	movs	r0, #0
  Stat = STA_NOINIT;
 8005ef8:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8005efa:	f004 fd9f 	bl	800aa3c <BSP_SD_GetCardState>
 8005efe:	b918      	cbnz	r0, 8005f08 <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 8005f00:	7823      	ldrb	r3, [r4, #0]
 8005f02:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005f06:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005f08:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8005f0a:	bd10      	pop	{r4, pc}
 8005f0c:	20004724 	.word	0x20004724

08005f10 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005f10:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks(0, (uint32_t*)buff,
 8005f12:	2000      	movs	r0, #0
 8005f14:	f004 fd66 	bl	800a9e4 <BSP_SD_ReadBlocks>
 8005f18:	b108      	cbz	r0, 8005f1e <SD_read+0xe>
  DRESULT res = RES_ERROR;
 8005f1a:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 8005f1c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 8005f1e:	2000      	movs	r0, #0
 8005f20:	f004 fd8c 	bl	800aa3c <BSP_SD_GetCardState>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d0f9      	beq.n	8005f1c <SD_read+0xc>
 8005f28:	2000      	movs	r0, #0
 8005f2a:	f004 fd87 	bl	800aa3c <BSP_SD_GetCardState>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d1f5      	bne.n	8005f1e <SD_read+0xe>
 8005f32:	e7f3      	b.n	8005f1c <SD_read+0xc>

08005f34 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f34:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <SD_ioctl+0x68>)
{
 8005f36:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f38:	7818      	ldrb	r0, [r3, #0]
{
 8005f3a:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f3c:	f010 0401 	ands.w	r4, r0, #1
 8005f40:	d106      	bne.n	8005f50 <SD_ioctl+0x1c>
 8005f42:	4615      	mov	r5, r2

  switch (cmd)
 8005f44:	2903      	cmp	r1, #3
 8005f46:	d827      	bhi.n	8005f98 <SD_ioctl+0x64>
 8005f48:	e8df f001 	tbb	[pc, r1]
 8005f4c:	1c130a06 	.word	0x1c130a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005f50:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8005f52:	4620      	mov	r0, r4
 8005f54:	b00b      	add	sp, #44	; 0x2c
 8005f56:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 8005f58:	460c      	mov	r4, r1
}
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	b00b      	add	sp, #44	; 0x2c
 8005f5e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8005f60:	a901      	add	r1, sp, #4
 8005f62:	2000      	movs	r0, #0
 8005f64:	f004 fd76 	bl	800aa54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005f68:	9b07      	ldr	r3, [sp, #28]
}
 8005f6a:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005f6c:	602b      	str	r3, [r5, #0]
}
 8005f6e:	b00b      	add	sp, #44	; 0x2c
 8005f70:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8005f72:	a901      	add	r1, sp, #4
 8005f74:	2000      	movs	r0, #0
 8005f76:	f004 fd6d 	bl	800aa54 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005f7a:	9b08      	ldr	r3, [sp, #32]
}
 8005f7c:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005f7e:	802b      	strh	r3, [r5, #0]
}
 8005f80:	b00b      	add	sp, #44	; 0x2c
 8005f82:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8005f84:	a901      	add	r1, sp, #4
 8005f86:	2000      	movs	r0, #0
 8005f88:	f004 fd64 	bl	800aa54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005f8c:	9b08      	ldr	r3, [sp, #32]
}
 8005f8e:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005f90:	0a5b      	lsrs	r3, r3, #9
 8005f92:	602b      	str	r3, [r5, #0]
}
 8005f94:	b00b      	add	sp, #44	; 0x2c
 8005f96:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 8005f98:	2404      	movs	r4, #4
 8005f9a:	e7da      	b.n	8005f52 <SD_ioctl+0x1e>
 8005f9c:	20004724 	.word	0x20004724

08005fa0 <SD_write>:
{
 8005fa0:	b508      	push	{r3, lr}
  if(BSP_SD_WriteBlocks(0, (uint32_t*)buff,
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	f004 fd34 	bl	800aa10 <BSP_SD_WriteBlocks>
 8005fa8:	b108      	cbz	r0, 8005fae <SD_write+0xe>
  DRESULT res = RES_ERROR;
 8005faa:	2001      	movs	r0, #1
}
 8005fac:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 8005fae:	2000      	movs	r0, #0
 8005fb0:	f004 fd44 	bl	800aa3c <BSP_SD_GetCardState>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d0f9      	beq.n	8005fac <SD_write+0xc>
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f004 fd3f 	bl	800aa3c <BSP_SD_GetCardState>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d1f5      	bne.n	8005fae <SD_write+0xe>
 8005fc2:	e7f3      	b.n	8005fac <SD_write+0xc>

08005fc4 <HAL_MspInit>:
/**
 * @brief  Initializes the Global MSP.
 * @param  None
 * @retval None
 */
void HAL_MspInit(void) {}
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop

08005fc8 <HAL_RNG_MspInit>:
 *           - Peripheral's clock enable
 * @param hrng: RNG handle pointer
 * @retval None
 */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8005fc8:	b500      	push	{lr}
 8005fca:	b0b3      	sub	sp, #204	; 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /*Select PLL output as RNG clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8005fcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8005fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005fd4:	a802      	add	r0, sp, #8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8005fd6:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8005fd8:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005fda:	f009 fb45 	bl	800f668 <HAL_RCCEx_PeriphCLKConfig>

  /* RNG Peripheral clock enable */
  __HAL_RCC_RNG_CLK_ENABLE();
 8005fde:	4b08      	ldr	r3, [pc, #32]	; (8006000 <HAL_RNG_MspInit+0x38>)
 8005fe0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8005fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8005fec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	9b01      	ldr	r3, [sp, #4]
}
 8005ff8:	b033      	add	sp, #204	; 0xcc
 8005ffa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ffe:	bf00      	nop
 8006000:	58024400 	.word	0x58024400

08006004 <HAL_RNG_MspDeInit>:
 * @retval None
 */
void HAL_RNG_MspDeInit(RNG_HandleTypeDef *hrng)
{
  /* Enable RNG reset state */
  __HAL_RCC_RNG_FORCE_RESET();
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <HAL_RNG_MspDeInit+0x1c>)
 8006006:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800600a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800600e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Release RNG from reset state */
  __HAL_RCC_RNG_RELEASE_RESET();
 8006012:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800601a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800601e:	4770      	bx	lr
 8006020:	58024400 	.word	0x58024400

08006024 <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8006028:	4d52      	ldr	r5, [pc, #328]	; (8006174 <HAL_UART_MspInit+0x150>)
  USARTx_RX_GPIO_CLK_ENABLE();

  /* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 800602a:	f04f 0801 	mov.w	r8, #1
{
 800602e:	b0bb      	sub	sp, #236	; 0xec
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006030:	2400      	movs	r4, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 8006032:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
{
 8006036:	4607      	mov	r7, r0
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8006038:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800603a:	f44f 6980 	mov.w	r9, #1024	; 0x400
  USARTx_TX_GPIO_CLK_ENABLE();
 800603e:	ea43 0308 	orr.w	r3, r3, r8

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);

  /*##-3- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8006042:	4e4d      	ldr	r6, [pc, #308]	; (8006178 <HAL_UART_MspInit+0x154>)
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8006044:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006048:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
  USARTx_TX_GPIO_CLK_ENABLE();
 800604c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8006050:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006054:	ea03 0308 	and.w	r3, r3, r8
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	9b00      	ldr	r3, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 800605c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006060:	ea43 0308 	orr.w	r3, r3, r8
 8006064:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8006068:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 800606c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  USARTx_RX_GPIO_CLK_ENABLE();
 8006070:	ea03 0308 	and.w	r3, r3, r8
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006074:	9429      	str	r4, [sp, #164]	; 0xa4
  USARTx_RX_GPIO_CLK_ENABLE();
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	9b01      	ldr	r3, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 800607a:	f009 faf5 	bl	800f668 <HAL_RCCEx_PeriphCLKConfig>
  USARTx_CLK_ENABLE();
 800607e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006082:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006086:	483d      	ldr	r0, [pc, #244]	; (800617c <HAL_UART_MspInit+0x158>)
  USARTx_CLK_ENABLE();
 8006088:	f043 0310 	orr.w	r3, r3, #16
 800608c:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8006090:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	9302      	str	r3, [sp, #8]
 800609a:	9b02      	ldr	r3, [sp, #8]
  DMAx_CLK_ENABLE();
 800609c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 80060a0:	ea43 0308 	orr.w	r3, r3, r8
 80060a4:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 80060a8:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80060ac:	2507      	movs	r5, #7
  DMAx_CLK_ENABLE();
 80060ae:	ea03 0308 	and.w	r3, r3, r8
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80060b2:	9508      	str	r5, [sp, #32]
  DMAx_CLK_ENABLE();
 80060b4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80060b6:	2302      	movs	r3, #2
  DMAx_CLK_ENABLE();
 80060b8:	9903      	ldr	r1, [sp, #12]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80060ba:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80060bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060c0:	2201      	movs	r2, #1
 80060c2:	2303      	movs	r3, #3
 80060c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80060c8:	f007 fa02 	bl	800d4d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80060cc:	a904      	add	r1, sp, #16
 80060ce:	482b      	ldr	r0, [pc, #172]	; (800617c <HAL_UART_MspInit+0x158>)
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80060d0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80060d2:	f8cd 9010 	str.w	r9, [sp, #16]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80060d6:	f007 f9fb 	bl	800d4d0 <HAL_GPIO_Init>
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 80060da:	2303      	movs	r3, #3
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 80060dc:	222a      	movs	r2, #42	; 0x2a

  HAL_DMA_Init(&hdma_tx);
 80060de:	4630      	mov	r0, r6

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 80060e0:	4d27      	ldr	r5, [pc, #156]	; (8006180 <HAL_UART_MspInit+0x15c>)
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80060e2:	6274      	str	r4, [r6, #36]	; 0x24
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80060e4:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 80060e8:	e9c6 3b0a 	strd	r3, fp, [r6, #40]	; 0x28
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 80060ec:	4b25      	ldr	r3, [pc, #148]	; (8006184 <HAL_UART_MspInit+0x160>)
 80060ee:	e9c6 3200 	strd	r3, r2, [r6]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80060f2:	2240      	movs	r2, #64	; 0x40
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80060f4:	e9c6 4903 	strd	r4, r9, [r6, #12]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80060f8:	60b2      	str	r2, [r6, #8]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80060fa:	e9c6 4405 	strd	r4, r4, [r6, #20]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80060fe:	e9c6 4407 	strd	r4, r4, [r6, #28]
  HAL_DMA_Init(&hdma_tx);
 8006102:	f005 f8ab 	bl	800b25c <HAL_DMA_Init>
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006106:	2303      	movs	r3, #3
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;

  HAL_DMA_Init(&hdma_rx);
 8006108:	4628      	mov	r0, r5
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800610a:	677e      	str	r6, [r7, #116]	; 0x74
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800610c:	f8c5 9010 	str.w	r9, [r5, #16]
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006110:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8006114:	63b7      	str	r7, [r6, #56]	; 0x38
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8006116:	61ec      	str	r4, [r5, #28]
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8006118:	e9c5 3b0a 	strd	r3, fp, [r5, #40]	; 0x28
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 800611c:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <HAL_UART_MspInit+0x164>)
 800611e:	602b      	str	r3, [r5, #0]
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 8006120:	2329      	movs	r3, #41	; 0x29
 8006122:	606b      	str	r3, [r5, #4]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006128:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800612c:	e9c5 3408 	strd	r3, r4, [r5, #32]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006130:	e9c5 4405 	strd	r4, r4, [r5, #20]
  HAL_DMA_Init(&hdma_rx);
 8006134:	f005 f892 	bl	800b25c <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8006138:	4642      	mov	r2, r8
 800613a:	4621      	mov	r1, r4
 800613c:	202f      	movs	r0, #47	; 0x2f
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 800613e:	67bd      	str	r5, [r7, #120]	; 0x78
 8006140:	63af      	str	r7, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8006142:	f004 fd33 	bl	800abac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8006146:	202f      	movs	r0, #47	; 0x2f
 8006148:	f004 fd6e 	bl	800ac28 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 800614c:	4622      	mov	r2, r4
 800614e:	4621      	mov	r1, r4
 8006150:	2010      	movs	r0, #16
 8006152:	f004 fd2b 	bl	800abac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 8006156:	2010      	movs	r0, #16
 8006158:	f004 fd66 	bl	800ac28 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 800615c:	4642      	mov	r2, r8
 800615e:	4621      	mov	r1, r4
 8006160:	2025      	movs	r0, #37	; 0x25
 8006162:	f004 fd23 	bl	800abac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8006166:	2025      	movs	r0, #37	; 0x25
 8006168:	f004 fd5e 	bl	800ac28 <HAL_NVIC_EnableIRQ>
}
 800616c:	b03b      	add	sp, #236	; 0xec
 800616e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006172:	bf00      	nop
 8006174:	58024400 	.word	0x58024400
 8006178:	20006348 	.word	0x20006348
 800617c:	58020000 	.word	0x58020000
 8006180:	200062d0 	.word	0x200062d0
 8006184:	400200b8 	.word	0x400200b8
 8006188:	40020088 	.word	0x40020088

0800618c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop

08006190 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006190:	e7fe      	b.n	8006190 <HardFault_Handler>
 8006192:	bf00      	nop

08006194 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006194:	e7fe      	b.n	8006194 <MemManage_Handler>
 8006196:	bf00      	nop

08006198 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006198:	e7fe      	b.n	8006198 <BusFault_Handler>
 800619a:	bf00      	nop

0800619c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800619c:	e7fe      	b.n	800619c <UsageFault_Handler>
 800619e:	bf00      	nop

080061a0 <SVC_Handler>:
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop

080061a4 <DebugMon_Handler>:
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop

080061a8 <PendSV_Handler>:
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop

080061ac <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80061ac:	f004 bcba 	b.w	800ab24 <HAL_IncTick>

080061b0 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler(0);
 80061b0:	2000      	movs	r0, #0
 80061b2:	f003 bd7b 	b.w	8009cac <BSP_CAMERA_DMA_IRQHandler>
 80061b6:	bf00      	nop

080061b8 <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
   BSP_CAMERA_IRQHandler(0);
 80061b8:	2000      	movs	r0, #0
 80061ba:	f003 bd71 	b.w	8009ca0 <BSP_CAMERA_IRQHandler>
 80061be:	bf00      	nop

080061c0 <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */
void MDMA_IRQHandler(void)
{
  HAL_MDMA_IRQHandler(&hmdma);
 80061c0:	4801      	ldr	r0, [pc, #4]	; (80061c8 <MDMA_IRQHandler+0x8>)
 80061c2:	f008 ba5b 	b.w	800e67c <HAL_MDMA_IRQHandler>
 80061c6:	bf00      	nop
 80061c8:	20004c60 	.word	0x20004c60

080061cc <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 80061cc:	4801      	ldr	r0, [pc, #4]	; (80061d4 <DSI_IRQHandler+0x8>)
 80061ce:	f006 be7b 	b.w	800cec8 <HAL_DSI_IRQHandler>
 80061d2:	bf00      	nop
 80061d4:	20007084 	.word	0x20007084

080061d8 <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hlcd_dma2d);
 80061d8:	4801      	ldr	r0, [pc, #4]	; (80061e0 <DMA2D_IRQHandler+0x8>)
 80061da:	f006 bcaf 	b.w	800cb3c <HAL_DMA2D_IRQHandler>
 80061de:	bf00      	nop
 80061e0:	2000701c 	.word	0x2000701c

080061e4 <DMA1_Stream5_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmarx);
 80061e4:	4b02      	ldr	r3, [pc, #8]	; (80061f0 <DMA1_Stream5_IRQHandler+0xc>)
 80061e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e8:	f8d3 0584 	ldr.w	r0, [r3, #1412]	; 0x584
 80061ec:	f005 bf96 	b.w	800c11c <HAL_DMA_IRQHandler>
 80061f0:	20004bf0 	.word	0x20004bf0

080061f4 <DMA1_Stream7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmatx);
 80061f4:	4b02      	ldr	r3, [pc, #8]	; (8006200 <DMA1_Stream7_IRQHandler+0xc>)
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
 80061fc:	f005 bf8e 	b.w	800c11c <HAL_DMA_IRQHandler>
 8006200:	20004bf0 	.word	0x20004bf0

08006204 <USART1_IRQHandler>:
  * @note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&App_Context.Test_ContextPtr->UartContext.UartHandle);
 8006204:	4b02      	ldr	r3, [pc, #8]	; (8006210 <USART1_IRQHandler+0xc>)
 8006206:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006208:	f200 500c 	addw	r0, r0, #1292	; 0x50c
 800620c:	f00b bdce 	b.w	8011dac <HAL_UART_IRQHandler>
 8006210:	20004bf0 	.word	0x20004bf0

08006214 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8006214:	4801      	ldr	r0, [pc, #4]	; (800621c <LTDC_IRQHandler+0x8>)
 8006216:	f007 bfe9 	b.w	800e1ec <HAL_LTDC_IRQHandler>
 800621a:	bf00      	nop
 800621c:	200070a0 	.word	0x200070a0

08006220 <SystemInit>:
 */
void SystemInit(void)
{
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006220:	498d      	ldr	r1, [pc, #564]	; (8006458 <SystemInit+0x238>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006222:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8006224:	4b8d      	ldr	r3, [pc, #564]	; (800645c <SystemInit+0x23c>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006226:	488e      	ldr	r0, [pc, #568]	; (8006460 <SystemInit+0x240>)
{
 8006228:	b4f0      	push	{r4, r5, r6, r7}
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800622a:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
{
 800622e:	b082      	sub	sp, #8

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006230:	4d8c      	ldr	r5, [pc, #560]	; (8006464 <SystemInit+0x244>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006232:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8006236:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 800623a:	690c      	ldr	r4, [r1, #16]
 800623c:	f044 0404 	orr.w	r4, r4, #4
 8006240:	610c      	str	r4, [r1, #16]
  EXTI_D2->EMR3 |= 0x4000UL;
 8006242:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  RCC->CR |= RCC_CR_HSION;
 8006246:	6819      	ldr	r1, [r3, #0]
 8006248:	f041 0101 	orr.w	r1, r1, #1
 800624c:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800624e:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006250:	6819      	ldr	r1, [r3, #0]
 8006252:	4008      	ands	r0, r1
 8006254:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8006256:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006258:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800625a:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 800625c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 800625e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8006262:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8006264:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8006266:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800626a:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800626c:	6819      	ldr	r1, [r3, #0]
 800626e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006272:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8006274:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8006276:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800627a:	4b7b      	ldr	r3, [pc, #492]	; (8006468 <SystemInit+0x248>)
  EXTI_D2->EMR3 |= 0x4000UL;
 800627c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006280:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006284:	682a      	ldr	r2, [r5, #0]
 8006286:	4013      	ands	r3, r2
 8006288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800628c:	d203      	bcs.n	8006296 <SystemInit+0x76>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 800628e:	4b77      	ldr	r3, [pc, #476]	; (800646c <SystemInit+0x24c>)
 8006290:	2201      	movs	r2, #1
 8006292:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * @param  None
 * @retval None
 */
void SystemInit_ExtMemCtl(void)
{
  __IO uint32_t tmp = 0;
 8006296:	2300      	movs	r3, #0
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 8006298:	4d70      	ldr	r5, [pc, #448]	; (800645c <SystemInit+0x23c>)

  /* Delay after an RCC peripheral clock enabling */
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);

  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0] = 0x000000CC;
 800629a:	4975      	ldr	r1, [pc, #468]	; (8006470 <SystemInit+0x250>)
  /* Configure PDx pins in Pull-up */
  GPIOD->PUPDR = 0x50150005;

  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0] = 0xC00000CC;
  GPIOE->AFR[1] = 0xCCCCCCCC;
 800629c:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
  __IO uint32_t tmp = 0;
 80062a0:	9300      	str	r3, [sp, #0]
  RCC->AHB4ENR |= 0x000001F8;
 80062a2:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
  GPIOE->AFR[0] = 0xC00000CC;
 80062a6:	4a73      	ldr	r2, [pc, #460]	; (8006474 <SystemInit+0x254>)
  RCC->AHB4ENR |= 0x000001F8;
 80062a8:	f440 70fc 	orr.w	r0, r0, #504	; 0x1f8
  GPIOE->OTYPER = 0x00000000;
  /* Configure PEx pins in Pull-up */
  GPIOE->PUPDR = 0x55554005;

  /* Connect PFx pins to FMC Alternate function */
  GPIOF->AFR[0] = 0x00CCCCCC;
 80062ac:	4c72      	ldr	r4, [pc, #456]	; (8006478 <SystemInit+0x258>)
 80062ae:	4f73      	ldr	r7, [pc, #460]	; (800647c <SystemInit+0x25c>)
  RCC->AHB4ENR |= 0x000001F8;
 80062b0:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 80062b4:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
  GPIOF->AFR[1] = 0xCCCCC000;
 80062b8:	f8df c224 	ldr.w	ip, [pc, #548]	; 80064e0 <SystemInit+0x2c0>
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 80062bc:	f000 0010 	and.w	r0, r0, #16
 80062c0:	9000      	str	r0, [sp, #0]
  GPIOD->AFR[0] = 0x000000CC;
 80062c2:	20cc      	movs	r0, #204	; 0xcc
 80062c4:	6208      	str	r0, [r1, #32]
  GPIOD->AFR[1] = 0xCC000CCC;
 80062c6:	486e      	ldr	r0, [pc, #440]	; (8006480 <SystemInit+0x260>)
 80062c8:	6248      	str	r0, [r1, #36]	; 0x24
  GPIOD->MODER = 0xAFEAFFFA;
 80062ca:	486e      	ldr	r0, [pc, #440]	; (8006484 <SystemInit+0x264>)
 80062cc:	6008      	str	r0, [r1, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 80062ce:	486e      	ldr	r0, [pc, #440]	; (8006488 <SystemInit+0x268>)
 80062d0:	6088      	str	r0, [r1, #8]
  GPIOD->PUPDR = 0x50150005;
 80062d2:	486e      	ldr	r0, [pc, #440]	; (800648c <SystemInit+0x26c>)
  GPIOD->OTYPER = 0x00000000;
 80062d4:	604b      	str	r3, [r1, #4]
  GPIOD->PUPDR = 0x50150005;
 80062d6:	60c8      	str	r0, [r1, #12]
  GPIOE->AFR[0] = 0xC00000CC;
 80062d8:	496d      	ldr	r1, [pc, #436]	; (8006490 <SystemInit+0x270>)
  GPIOF->OTYPER = 0x00000000;
  /* Configure PFx pins in Pull-up */
  GPIOF->PUPDR = 0x55400555;

  /* Connect PGx pins to FMC Alternate function */
  GPIOG->AFR[0] = 0x00CCCCCC;
 80062da:	486e      	ldr	r0, [pc, #440]	; (8006494 <SystemInit+0x274>)
  GPIOE->AFR[0] = 0xC00000CC;
 80062dc:	6211      	str	r1, [r2, #32]
  GPIOE->MODER = 0xAAAABFFA;
 80062de:	496e      	ldr	r1, [pc, #440]	; (8006498 <SystemInit+0x278>)
  GPIOE->AFR[1] = 0xCCCCCCCC;
 80062e0:	6256      	str	r6, [r2, #36]	; 0x24
  GPIOE->MODER = 0xAAAABFFA;
 80062e2:	6011      	str	r1, [r2, #0]
  GPIOE->OSPEEDR = 0xFFFFC00F;
 80062e4:	496d      	ldr	r1, [pc, #436]	; (800649c <SystemInit+0x27c>)
 80062e6:	6091      	str	r1, [r2, #8]
  GPIOE->PUPDR = 0x55554005;
 80062e8:	496d      	ldr	r1, [pc, #436]	; (80064a0 <SystemInit+0x280>)
  GPIOE->OTYPER = 0x00000000;
 80062ea:	6053      	str	r3, [r2, #4]
  GPIOE->PUPDR = 0x55554005;
 80062ec:	60d1      	str	r1, [r2, #12]
  GPIOH->OTYPER = 0x00000000;
  /* Configure PHx pins in Pull-up */
  GPIOH->PUPDR = 0x55555400;

  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0] = 0xCCCCCCCC;
 80062ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  GPIOF->AFR[0] = 0x00CCCCCC;
 80062f2:	6227      	str	r7, [r4, #32]
  GPIOF->AFR[1] = 0xCCCCC000;
 80062f4:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  GPIOF->MODER = 0xAABFFAAA;
 80062f8:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 80064e4 <SystemInit+0x2c4>
  GPIOH->AFR[0] = 0xCCC00000;
 80062fc:	4969      	ldr	r1, [pc, #420]	; (80064a4 <SystemInit+0x284>)
  GPIOF->MODER = 0xAABFFAAA;
 80062fe:	f8c4 c000 	str.w	ip, [r4]
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8006302:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 80064e8 <SystemInit+0x2c8>
 8006306:	f8c4 c008 	str.w	ip, [r4, #8]
  GPIOF->PUPDR = 0x55400555;
 800630a:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 80064ec <SystemInit+0x2cc>
  GPIOF->OTYPER = 0x00000000;
 800630e:	6063      	str	r3, [r4, #4]
  GPIOF->PUPDR = 0x55400555;
 8006310:	f8c4 c00c 	str.w	ip, [r4, #12]
  GPIOG->AFR[1] = 0xC000000C;
 8006314:	4c64      	ldr	r4, [pc, #400]	; (80064a8 <SystemInit+0x288>)
  GPIOG->AFR[0] = 0x00CCCCCC;
 8006316:	6207      	str	r7, [r0, #32]
  GPIOG->AFR[1] = 0xC000000C;
 8006318:	6244      	str	r4, [r0, #36]	; 0x24
  GPIOG->MODER = 0xBFFEFAAA;
 800631a:	f5a4 3482 	sub.w	r4, r4, #66560	; 0x10400
 800631e:	f5a4 74b1 	sub.w	r4, r4, #354	; 0x162
 8006322:	6004      	str	r4, [r0, #0]
  GPIOG->OSPEEDR = 0xC0030FFF;
 8006324:	f504 2482 	add.w	r4, r4, #266240	; 0x41000
 8006328:	f204 5455 	addw	r4, r4, #1365	; 0x555
 800632c:	6084      	str	r4, [r0, #8]
  GPIOG->PUPDR = 0x40010555;
 800632e:	4c5f      	ldr	r4, [pc, #380]	; (80064ac <SystemInit+0x28c>)
  GPIOG->OTYPER = 0x00000000;
 8006330:	6043      	str	r3, [r0, #4]
  GPIOG->PUPDR = 0x40010555;
 8006332:	60c4      	str	r4, [r0, #12]
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8006334:	f240 1465 	movw	r4, #357	; 0x165
  GPIOH->AFR[0] = 0xCCC00000;
 8006338:	485d      	ldr	r0, [pc, #372]	; (80064b0 <SystemInit+0x290>)
 800633a:	6208      	str	r0, [r1, #32]
  GPIOH->MODER = 0xAAAAABFF;
 800633c:	485d      	ldr	r0, [pc, #372]	; (80064b4 <SystemInit+0x294>)
  GPIOH->AFR[1] = 0xCCCCCCCC;
 800633e:	624e      	str	r6, [r1, #36]	; 0x24
  GPIOH->MODER = 0xAAAAABFF;
 8006340:	6008      	str	r0, [r1, #0]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8006342:	485d      	ldr	r0, [pc, #372]	; (80064b8 <SystemInit+0x298>)
 8006344:	6088      	str	r0, [r1, #8]
  GPIOH->PUPDR = 0x55555400;
 8006346:	485d      	ldr	r0, [pc, #372]	; (80064bc <SystemInit+0x29c>)
  GPIOH->OTYPER = 0x00000000;
 8006348:	604b      	str	r3, [r1, #4]
  GPIOH->PUPDR = 0x55555400;
 800634a:	60c8      	str	r0, [r1, #12]
  GPIOI->AFR[1] = 0x00000CC0;
 800634c:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
  GPIOI->MODER = 0xFFEBAAAA;
 8006350:	485b      	ldr	r0, [pc, #364]	; (80064c0 <SystemInit+0x2a0>)
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8006352:	6216      	str	r6, [r2, #32]
  GPIOI->AFR[1] = 0x00000CC0;
 8006354:	6251      	str	r1, [r2, #36]	; 0x24
  GPIOI->MODER = 0xFFEBAAAA;
 8006356:	6010      	str	r0, [r2, #0]
  GPIOI->OSPEEDR = 0x003CFFFF;
 8006358:	495a      	ldr	r1, [pc, #360]	; (80064c4 <SystemInit+0x2a4>)
  GPIOI->PUPDR = 0x00145555;
 800635a:	485b      	ldr	r0, [pc, #364]	; (80064c8 <SystemInit+0x2a8>)
  GPIOI->OSPEEDR = 0x003CFFFF;
 800635c:	6091      	str	r1, [r2, #8]
  GPIOI->OTYPER = 0x00000000;
 800635e:	6053      	str	r3, [r2, #4]
  GPIOI->PUPDR = 0x00145555;
 8006360:	60d0      	str	r0, [r2, #12]
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8006362:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8006366:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 800636a:	4958      	ldr	r1, [pc, #352]	; (80064cc <SystemInit+0x2ac>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 800636c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8006370:	4857      	ldr	r0, [pc, #348]	; (80064d0 <SystemInit+0x2b0>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8006372:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8006376:	2309      	movs	r3, #9
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8006378:	640a      	str	r2, [r1, #64]	; 0x40
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 800637a:	4a56      	ldr	r2, [pc, #344]	; (80064d4 <SystemInit+0x2b4>)
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 800637c:	644c      	str	r4, [r1, #68]	; 0x44
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 800637e:	6488      	str	r0, [r1, #72]	; 0x48
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8006380:	64ca      	str	r2, [r1, #76]	; 0x4c
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8006382:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006384:	6d8b      	ldr	r3, [r1, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8006386:	f013 0320 	ands.w	r3, r3, #32
 800638a:	d008      	beq.n	800639e <SystemInit+0x17e>
 800638c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006390:	e001      	b.n	8006396 <SystemInit+0x176>
 8006392:	3a01      	subs	r2, #1
 8006394:	d054      	beq.n	8006440 <SystemInit+0x220>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006396:	6d8b      	ldr	r3, [r1, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8006398:	f013 0320 	ands.w	r3, r3, #32
 800639c:	d1f9      	bne.n	8006392 <SystemInit+0x172>
  }

  /* Delay */
  for (index = 0; index < 1000; index++)
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	9b01      	ldr	r3, [sp, #4]
 80063a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063a6:	d253      	bcs.n	8006450 <SystemInit+0x230>
  while ((tmpreg != 0) && (timeout-- > 0))
 80063a8:	2300      	movs	r3, #0
  for (index = 0; index < 1000; index++)
 80063aa:	9a01      	ldr	r2, [sp, #4]
 80063ac:	3201      	adds	r2, #1
 80063ae:	9201      	str	r2, [sp, #4]
 80063b0:	9a01      	ldr	r2, [sp, #4]
 80063b2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80063b6:	d3f8      	bcc.n	80063aa <SystemInit+0x18a>
    ;

  /* PALL command */
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 80063b8:	4a44      	ldr	r2, [pc, #272]	; (80064cc <SystemInit+0x2ac>)
 80063ba:	210a      	movs	r1, #10
 80063bc:	6511      	str	r1, [r2, #80]	; 0x50
  timeout = 0xFFFF;
  while ((tmpreg != 0) && (timeout-- > 0))
 80063be:	b143      	cbz	r3, 80063d2 <SystemInit+0x1b2>
  while ((tmpreg != 0) && (timeout-- > 0))
 80063c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80063c4:	4841      	ldr	r0, [pc, #260]	; (80064cc <SystemInit+0x2ac>)
 80063c6:	e001      	b.n	80063cc <SystemInit+0x1ac>
  while ((tmpreg != 0) && (timeout-- > 0))
 80063c8:	3b01      	subs	r3, #1
 80063ca:	d01f      	beq.n	800640c <SystemInit+0x1ec>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80063cc:	6d82      	ldr	r2, [r0, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 80063ce:	0694      	lsls	r4, r2, #26
 80063d0:	d4fa      	bmi.n	80063c8 <SystemInit+0x1a8>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80063d2:	4b3e      	ldr	r3, [pc, #248]	; (80064cc <SystemInit+0x2ac>)
 80063d4:	22eb      	movs	r2, #235	; 0xeb
 80063d6:	651a      	str	r2, [r3, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 80063d8:	4b3c      	ldr	r3, [pc, #240]	; (80064cc <SystemInit+0x2ac>)
 80063da:	4a3f      	ldr	r2, [pc, #252]	; (80064d8 <SystemInit+0x2b8>)
 80063dc:	651a      	str	r2, [r3, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 80063de:	4b3b      	ldr	r3, [pc, #236]	; (80064cc <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 80063e0:	f640 4206 	movw	r2, #3078	; 0xc06
  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);

  /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 80063e4:	493d      	ldr	r1, [pc, #244]	; (80064dc <SystemInit+0x2bc>)
  tmpreg = FMC_Bank5_6_R->SDRTR;
 80063e6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80063e8:	481b      	ldr	r0, [pc, #108]	; (8006458 <SystemInit+0x238>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 80063ea:	4322      	orrs	r2, r4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80063ec:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 80063f0:	655a      	str	r2, [r3, #84]	; 0x54
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 80063f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 80063f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80063f8:	645a      	str	r2, [r3, #68]	; 0x44
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 80063fa:	680b      	ldr	r3, [r1, #0]
 80063fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006400:	600b      	str	r3, [r1, #0]

  (void)(tmp);
 8006402:	9b00      	ldr	r3, [sp, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006404:	6084      	str	r4, [r0, #8]
}
 8006406:	b002      	add	sp, #8
 8006408:	bcf0      	pop	{r4, r5, r6, r7}
 800640a:	4770      	bx	lr
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 800640c:	22eb      	movs	r2, #235	; 0xeb
 800640e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006412:	492e      	ldr	r1, [pc, #184]	; (80064cc <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8006414:	6502      	str	r2, [r0, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8006416:	e001      	b.n	800641c <SystemInit+0x1fc>
 8006418:	3b01      	subs	r3, #1
 800641a:	d005      	beq.n	8006428 <SystemInit+0x208>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 800641c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 800641e:	0690      	lsls	r0, r2, #26
 8006420:	d4fa      	bmi.n	8006418 <SystemInit+0x1f8>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006422:	4b2d      	ldr	r3, [pc, #180]	; (80064d8 <SystemInit+0x2b8>)
 8006424:	650b      	str	r3, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8006426:	e7da      	b.n	80063de <SystemInit+0x1be>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006428:	4a2b      	ldr	r2, [pc, #172]	; (80064d8 <SystemInit+0x2b8>)
 800642a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 800642e:	4827      	ldr	r0, [pc, #156]	; (80064cc <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006430:	650a      	str	r2, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8006432:	e001      	b.n	8006438 <SystemInit+0x218>
 8006434:	3b01      	subs	r3, #1
 8006436:	d0d2      	beq.n	80063de <SystemInit+0x1be>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006438:	6d82      	ldr	r2, [r0, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 800643a:	0692      	lsls	r2, r2, #26
 800643c:	d5cf      	bpl.n	80063de <SystemInit+0x1be>
 800643e:	e7f9      	b.n	8006434 <SystemInit+0x214>
  for (index = 0; index < 1000; index++)
 8006440:	9201      	str	r2, [sp, #4]
 8006442:	9a01      	ldr	r2, [sp, #4]
 8006444:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8006448:	d3af      	bcc.n	80063aa <SystemInit+0x18a>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 800644a:	230a      	movs	r3, #10
 800644c:	650b      	str	r3, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 800644e:	e7b7      	b.n	80063c0 <SystemInit+0x1a0>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8006450:	230a      	movs	r3, #10
 8006452:	650b      	str	r3, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8006454:	e7bd      	b.n	80063d2 <SystemInit+0x1b2>
 8006456:	bf00      	nop
 8006458:	e000ed00 	.word	0xe000ed00
 800645c:	58024400 	.word	0x58024400
 8006460:	eaf6ed7f 	.word	0xeaf6ed7f
 8006464:	5c001000 	.word	0x5c001000
 8006468:	ffff0000 	.word	0xffff0000
 800646c:	51008000 	.word	0x51008000
 8006470:	58020c00 	.word	0x58020c00
 8006474:	58021000 	.word	0x58021000
 8006478:	58021400 	.word	0x58021400
 800647c:	00cccccc 	.word	0x00cccccc
 8006480:	cc000ccc 	.word	0xcc000ccc
 8006484:	afeafffa 	.word	0xafeafffa
 8006488:	f03f000f 	.word	0xf03f000f
 800648c:	50150005 	.word	0x50150005
 8006490:	c00000cc 	.word	0xc00000cc
 8006494:	58021800 	.word	0x58021800
 8006498:	aaaabffa 	.word	0xaaaabffa
 800649c:	ffffc00f 	.word	0xffffc00f
 80064a0:	55554005 	.word	0x55554005
 80064a4:	58021c00 	.word	0x58021c00
 80064a8:	c000000c 	.word	0xc000000c
 80064ac:	40010555 	.word	0x40010555
 80064b0:	ccc00000 	.word	0xccc00000
 80064b4:	aaaaabff 	.word	0xaaaaabff
 80064b8:	fffffc00 	.word	0xfffffc00
 80064bc:	55555400 	.word	0x55555400
 80064c0:	ffebaaaa 	.word	0xffebaaaa
 80064c4:	003cffff 	.word	0x003cffff
 80064c8:	00145555 	.word	0x00145555
 80064cc:	52004100 	.word	0x52004100
 80064d0:	00105000 	.word	0x00105000
 80064d4:	01010351 	.word	0x01010351
 80064d8:	0004400c 	.word	0x0004400c
 80064dc:	52004000 	.word	0x52004000
 80064e0:	ccccc000 	.word	0xccccc000
 80064e4:	aabffaaa 	.word	0xaabffaaa
 80064e8:	ffc00fff 	.word	0xffc00fff
 80064ec:	55400555 	.word	0x55400555

080064f0 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop

080064f8 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 80064f8:	4b02      	ldr	r3, [pc, #8]	; (8006504 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 80064fa:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	600b      	str	r3, [r1, #0]
}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	200063c0 	.word	0x200063c0

08006508 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8006508:	4b02      	ldr	r3, [pc, #8]	; (8006514 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 800650a:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	600b      	str	r3, [r1, #0]
}
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	200063c0 	.word	0x200063c0

08006518 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <OTM8009A_GetXSize+0x1c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	b123      	cbz	r3, 8006528 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 800651e:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8006522:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8006524:	600b      	str	r3, [r1, #0]
}
 8006526:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8006528:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 800652c:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 800652e:	600b      	str	r3, [r1, #0]
}
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	200063c0 	.word	0x200063c0

08006538 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8006538:	4b06      	ldr	r3, [pc, #24]	; (8006554 <OTM8009A_GetYSize+0x1c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	b123      	cbz	r3, 8006548 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 800653e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8006542:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8006544:	600b      	str	r3, [r1, #0]
}
 8006546:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8006548:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 800654c:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 800654e:	600b      	str	r3, [r1, #0]
}
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	200063c0 	.word	0x200063c0

08006558 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop

08006560 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop

08006568 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop

08006578 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop

08006580 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop

08006588 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8006588:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800658a:	6884      	ldr	r4, [r0, #8]
 800658c:	8800      	ldrh	r0, [r0, #0]
 800658e:	46a4      	mov	ip, r4
}
 8006590:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006594:	4760      	bx	ip
 8006596:	bf00      	nop

08006598 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006598:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800659a:	6844      	ldr	r4, [r0, #4]
 800659c:	8800      	ldrh	r0, [r0, #0]
 800659e:	46a4      	mov	ip, r4
}
 80065a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80065a4:	4760      	bx	ip
 80065a6:	bf00      	nop

080065a8 <OTM8009A_Init>:
{
 80065a8:	e92d 47b0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065ac:	2300      	movs	r3, #0
 80065ae:	f100 0710 	add.w	r7, r0, #16
{
 80065b2:	b083      	sub	sp, #12
 80065b4:	4680      	mov	r8, r0
 80065b6:	4689      	mov	r9, r1
 80065b8:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065ba:	4619      	mov	r1, r3
 80065bc:	4adb      	ldr	r2, [pc, #876]	; (800692c <OTM8009A_Init+0x384>)
 80065be:	4638      	mov	r0, r7
 80065c0:	f000 fc78 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80065c4:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065c6:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80065c8:	4ad9      	ldr	r2, [pc, #868]	; (8006930 <OTM8009A_Init+0x388>)
 80065ca:	21ff      	movs	r1, #255	; 0xff
 80065cc:	4638      	mov	r0, r7
 80065ce:	f000 fc71 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80065d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80065d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80065d6:	4ad7      	ldr	r2, [pc, #860]	; (8006934 <OTM8009A_Init+0x38c>)
 80065d8:	4619      	mov	r1, r3
 80065da:	4638      	mov	r0, r7
 80065dc:	f000 fc6a 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80065e0:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80065e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80065e4:	4ad4      	ldr	r2, [pc, #848]	; (8006938 <OTM8009A_Init+0x390>)
 80065e6:	21ff      	movs	r1, #255	; 0xff
 80065e8:	4638      	mov	r0, r7
 80065ea:	f000 fc63 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80065ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80065f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80065f2:	4ad0      	ldr	r2, [pc, #832]	; (8006934 <OTM8009A_Init+0x38c>)
 80065f4:	4619      	mov	r1, r3
 80065f6:	4638      	mov	r0, r7
 80065f8:	f000 fc5c 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80065fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80065fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8006600:	4ace      	ldr	r2, [pc, #824]	; (800693c <OTM8009A_Init+0x394>)
 8006602:	21c4      	movs	r1, #196	; 0xc4
 8006604:	4638      	mov	r0, r7
 8006606:	f000 fc55 	bl	8006eb4 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800660a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800660e:	1825      	adds	r5, r4, r0
  tickstart = pObj->IO.GetTick();
 8006610:	4798      	blx	r3
 8006612:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006614:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006618:	4798      	blx	r3
 800661a:	1b00      	subs	r0, r0, r4
 800661c:	2809      	cmp	r0, #9
 800661e:	d9f9      	bls.n	8006614 <OTM8009A_Init+0x6c>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8006620:	2300      	movs	r3, #0
 8006622:	4ac7      	ldr	r2, [pc, #796]	; (8006940 <OTM8009A_Init+0x398>)
 8006624:	4638      	mov	r0, r7
 8006626:	4619      	mov	r1, r3
 8006628:	f000 fc44 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800662c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800662e:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8006630:	4ac4      	ldr	r2, [pc, #784]	; (8006944 <OTM8009A_Init+0x39c>)
 8006632:	21c4      	movs	r1, #196	; 0xc4
 8006634:	4638      	mov	r0, r7
 8006636:	f000 fc3d 	bl	8006eb4 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 800663a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800663e:	182c      	adds	r4, r5, r0
  tickstart = pObj->IO.GetTick();
 8006640:	4798      	blx	r3
 8006642:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006644:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006648:	4798      	blx	r3
 800664a:	1b40      	subs	r0, r0, r5
 800664c:	2809      	cmp	r0, #9
 800664e:	d9f9      	bls.n	8006644 <OTM8009A_Init+0x9c>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8006650:	2300      	movs	r3, #0
 8006652:	4abd      	ldr	r2, [pc, #756]	; (8006948 <OTM8009A_Init+0x3a0>)
 8006654:	4638      	mov	r0, r7
 8006656:	4619      	mov	r1, r3
 8006658:	f000 fc2c 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800665c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800665e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8006660:	4aba      	ldr	r2, [pc, #744]	; (800694c <OTM8009A_Init+0x3a4>)
 8006662:	21c5      	movs	r1, #197	; 0xc5
 8006664:	4638      	mov	r0, r7
 8006666:	f000 fc25 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800666a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800666c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800666e:	4ab8      	ldr	r2, [pc, #736]	; (8006950 <OTM8009A_Init+0x3a8>)
 8006670:	4619      	mov	r1, r3
 8006672:	4638      	mov	r0, r7
 8006674:	f000 fc1e 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006678:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800667a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800667c:	4ab5      	ldr	r2, [pc, #724]	; (8006954 <OTM8009A_Init+0x3ac>)
 800667e:	21c5      	movs	r1, #197	; 0xc5
 8006680:	4638      	mov	r0, r7
 8006682:	f000 fc17 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006686:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006688:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800668a:	4ab3      	ldr	r2, [pc, #716]	; (8006958 <OTM8009A_Init+0x3b0>)
 800668c:	4619      	mov	r1, r3
 800668e:	4638      	mov	r0, r7
 8006690:	f000 fc10 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006694:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006696:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006698:	4ab0      	ldr	r2, [pc, #704]	; (800695c <OTM8009A_Init+0x3b4>)
 800669a:	21c0      	movs	r1, #192	; 0xc0
 800669c:	4638      	mov	r0, r7
 800669e:	f000 fc09 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80066a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80066a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80066a6:	4aa1      	ldr	r2, [pc, #644]	; (800692c <OTM8009A_Init+0x384>)
 80066a8:	4619      	mov	r1, r3
 80066aa:	4638      	mov	r0, r7
 80066ac:	f000 fc02 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80066b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80066b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80066b4:	4aaa      	ldr	r2, [pc, #680]	; (8006960 <OTM8009A_Init+0x3b8>)
 80066b6:	21d9      	movs	r1, #217	; 0xd9
 80066b8:	4638      	mov	r0, r7
 80066ba:	f000 fbfb 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80066be:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80066c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80066c2:	4aa8      	ldr	r2, [pc, #672]	; (8006964 <OTM8009A_Init+0x3bc>)
 80066c4:	4619      	mov	r1, r3
 80066c6:	4638      	mov	r0, r7
 80066c8:	f000 fbf4 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80066cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80066ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80066d0:	4aa5      	ldr	r2, [pc, #660]	; (8006968 <OTM8009A_Init+0x3c0>)
 80066d2:	21c1      	movs	r1, #193	; 0xc1
 80066d4:	4638      	mov	r0, r7
 80066d6:	f000 fbed 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80066da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80066dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80066de:	4aa3      	ldr	r2, [pc, #652]	; (800696c <OTM8009A_Init+0x3c4>)
 80066e0:	4619      	mov	r1, r3
 80066e2:	4638      	mov	r0, r7
 80066e4:	f000 fbe6 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80066e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80066ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80066ec:	4aa0      	ldr	r2, [pc, #640]	; (8006970 <OTM8009A_Init+0x3c8>)
 80066ee:	21c1      	movs	r1, #193	; 0xc1
 80066f0:	4638      	mov	r0, r7
 80066f2:	f000 fbdf 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80066f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80066f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80066fa:	4a9e      	ldr	r2, [pc, #632]	; (8006974 <OTM8009A_Init+0x3cc>)
 80066fc:	4619      	mov	r1, r3
 80066fe:	4638      	mov	r0, r7
 8006700:	f000 fbd8 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006704:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006706:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006708:	4a9b      	ldr	r2, [pc, #620]	; (8006978 <OTM8009A_Init+0x3d0>)
 800670a:	21c5      	movs	r1, #197	; 0xc5
 800670c:	4638      	mov	r0, r7
 800670e:	f000 fbd1 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006712:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006714:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006716:	4a99      	ldr	r2, [pc, #612]	; (800697c <OTM8009A_Init+0x3d4>)
 8006718:	4619      	mov	r1, r3
 800671a:	4638      	mov	r0, r7
 800671c:	f000 fbca 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006720:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006722:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006724:	4a8b      	ldr	r2, [pc, #556]	; (8006954 <OTM8009A_Init+0x3ac>)
 8006726:	21c5      	movs	r1, #197	; 0xc5
 8006728:	4638      	mov	r0, r7
 800672a:	f000 fbc3 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800672e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006730:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006732:	4a7e      	ldr	r2, [pc, #504]	; (800692c <OTM8009A_Init+0x384>)
 8006734:	4619      	mov	r1, r3
 8006736:	4638      	mov	r0, r7
 8006738:	f000 fbbc 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800673c:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800673e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8006740:	4a8f      	ldr	r2, [pc, #572]	; (8006980 <OTM8009A_Init+0x3d8>)
 8006742:	21d8      	movs	r1, #216	; 0xd8
 8006744:	4638      	mov	r0, r7
 8006746:	f000 fbb5 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800674a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800674c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800674e:	4a8d      	ldr	r2, [pc, #564]	; (8006984 <OTM8009A_Init+0x3dc>)
 8006750:	4619      	mov	r1, r3
 8006752:	4638      	mov	r0, r7
 8006754:	f000 fbae 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8006758:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800675a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800675c:	4a8a      	ldr	r2, [pc, #552]	; (8006988 <OTM8009A_Init+0x3e0>)
 800675e:	21c5      	movs	r1, #197	; 0xc5
 8006760:	4638      	mov	r0, r7
 8006762:	f000 fba7 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006766:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8006768:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800676a:	4a88      	ldr	r2, [pc, #544]	; (800698c <OTM8009A_Init+0x3e4>)
 800676c:	4619      	mov	r1, r3
 800676e:	4638      	mov	r0, r7
 8006770:	f000 fba0 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006774:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006776:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006778:	4a85      	ldr	r2, [pc, #532]	; (8006990 <OTM8009A_Init+0x3e8>)
 800677a:	21c0      	movs	r1, #192	; 0xc0
 800677c:	4638      	mov	r0, r7
 800677e:	f000 fb99 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006782:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006784:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006786:	4a83      	ldr	r2, [pc, #524]	; (8006994 <OTM8009A_Init+0x3ec>)
 8006788:	4619      	mov	r1, r3
 800678a:	4638      	mov	r0, r7
 800678c:	f000 fb92 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006790:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006792:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006794:	4a80      	ldr	r2, [pc, #512]	; (8006998 <OTM8009A_Init+0x3f0>)
 8006796:	21c5      	movs	r1, #197	; 0xc5
 8006798:	4638      	mov	r0, r7
 800679a:	f000 fb8b 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800679e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80067a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80067a2:	4a70      	ldr	r2, [pc, #448]	; (8006964 <OTM8009A_Init+0x3bc>)
 80067a4:	4619      	mov	r1, r3
 80067a6:	4638      	mov	r0, r7
 80067a8:	f000 fb84 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80067ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80067ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80067b0:	4a7a      	ldr	r2, [pc, #488]	; (800699c <OTM8009A_Init+0x3f4>)
 80067b2:	21c4      	movs	r1, #196	; 0xc4
 80067b4:	4638      	mov	r0, r7
 80067b6:	f000 fb7d 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80067ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80067bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80067be:	4a6b      	ldr	r2, [pc, #428]	; (800696c <OTM8009A_Init+0x3c4>)
 80067c0:	4619      	mov	r1, r3
 80067c2:	4638      	mov	r0, r7
 80067c4:	f000 fb76 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80067c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80067ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80067cc:	4a74      	ldr	r2, [pc, #464]	; (80069a0 <OTM8009A_Init+0x3f8>)
 80067ce:	21c1      	movs	r1, #193	; 0xc1
 80067d0:	4638      	mov	r0, r7
 80067d2:	f000 fb6f 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80067d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80067d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80067da:	4a72      	ldr	r2, [pc, #456]	; (80069a4 <OTM8009A_Init+0x3fc>)
 80067dc:	4619      	mov	r1, r3
 80067de:	4638      	mov	r0, r7
 80067e0:	f000 fb68 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80067e4:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80067e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80067e8:	4a6f      	ldr	r2, [pc, #444]	; (80069a8 <OTM8009A_Init+0x400>)
 80067ea:	21b3      	movs	r1, #179	; 0xb3
 80067ec:	4638      	mov	r0, r7
 80067ee:	f000 fb61 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80067f2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80067f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80067f6:	4a4f      	ldr	r2, [pc, #316]	; (8006934 <OTM8009A_Init+0x38c>)
 80067f8:	4619      	mov	r1, r3
 80067fa:	4638      	mov	r0, r7
 80067fc:	f000 fb5a 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006800:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006802:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006804:	4a69      	ldr	r2, [pc, #420]	; (80069ac <OTM8009A_Init+0x404>)
 8006806:	21ce      	movs	r1, #206	; 0xce
 8006808:	4638      	mov	r0, r7
 800680a:	f000 fb53 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800680e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006810:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006812:	4a67      	ldr	r2, [pc, #412]	; (80069b0 <OTM8009A_Init+0x408>)
 8006814:	4619      	mov	r1, r3
 8006816:	4638      	mov	r0, r7
 8006818:	f000 fb4c 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800681c:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800681e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006820:	4a64      	ldr	r2, [pc, #400]	; (80069b4 <OTM8009A_Init+0x40c>)
 8006822:	21ce      	movs	r1, #206	; 0xce
 8006824:	4638      	mov	r0, r7
 8006826:	f000 fb45 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800682a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800682c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800682e:	4a62      	ldr	r2, [pc, #392]	; (80069b8 <OTM8009A_Init+0x410>)
 8006830:	4619      	mov	r1, r3
 8006832:	4638      	mov	r0, r7
 8006834:	f000 fb3e 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8006838:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800683a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800683c:	4a5f      	ldr	r2, [pc, #380]	; (80069bc <OTM8009A_Init+0x414>)
 800683e:	21ce      	movs	r1, #206	; 0xce
 8006840:	4638      	mov	r0, r7
 8006842:	f000 fb37 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006846:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8006848:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800684a:	4a5d      	ldr	r2, [pc, #372]	; (80069c0 <OTM8009A_Init+0x418>)
 800684c:	4619      	mov	r1, r3
 800684e:	4638      	mov	r0, r7
 8006850:	f000 fb30 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006854:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006856:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006858:	4a5a      	ldr	r2, [pc, #360]	; (80069c4 <OTM8009A_Init+0x41c>)
 800685a:	21cf      	movs	r1, #207	; 0xcf
 800685c:	4638      	mov	r0, r7
 800685e:	f000 fb29 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006862:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006864:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006866:	4a58      	ldr	r2, [pc, #352]	; (80069c8 <OTM8009A_Init+0x420>)
 8006868:	4619      	mov	r1, r3
 800686a:	4638      	mov	r0, r7
 800686c:	f000 fb22 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006870:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006872:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006874:	4a55      	ldr	r2, [pc, #340]	; (80069cc <OTM8009A_Init+0x424>)
 8006876:	21cf      	movs	r1, #207	; 0xcf
 8006878:	4638      	mov	r0, r7
 800687a:	f000 fb1b 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800687e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006880:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006882:	4a2c      	ldr	r2, [pc, #176]	; (8006934 <OTM8009A_Init+0x38c>)
 8006884:	4619      	mov	r1, r3
 8006886:	4638      	mov	r0, r7
 8006888:	f000 fb14 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800688c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800688e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006890:	4a4f      	ldr	r2, [pc, #316]	; (80069d0 <OTM8009A_Init+0x428>)
 8006892:	21cb      	movs	r1, #203	; 0xcb
 8006894:	4638      	mov	r0, r7
 8006896:	f000 fb0d 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800689a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800689c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800689e:	4a4d      	ldr	r2, [pc, #308]	; (80069d4 <OTM8009A_Init+0x42c>)
 80068a0:	4619      	mov	r1, r3
 80068a2:	4638      	mov	r0, r7
 80068a4:	f000 fb06 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80068a8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80068aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80068ac:	4a4a      	ldr	r2, [pc, #296]	; (80069d8 <OTM8009A_Init+0x430>)
 80068ae:	21cb      	movs	r1, #203	; 0xcb
 80068b0:	4638      	mov	r0, r7
 80068b2:	f000 faff 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80068b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80068b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80068ba:	4a3d      	ldr	r2, [pc, #244]	; (80069b0 <OTM8009A_Init+0x408>)
 80068bc:	4619      	mov	r1, r3
 80068be:	4638      	mov	r0, r7
 80068c0:	f000 faf8 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80068c4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80068c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80068c8:	4a44      	ldr	r2, [pc, #272]	; (80069dc <OTM8009A_Init+0x434>)
 80068ca:	21cb      	movs	r1, #203	; 0xcb
 80068cc:	4638      	mov	r0, r7
 80068ce:	f000 faf1 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80068d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80068d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80068d6:	4a38      	ldr	r2, [pc, #224]	; (80069b8 <OTM8009A_Init+0x410>)
 80068d8:	4619      	mov	r1, r3
 80068da:	4638      	mov	r0, r7
 80068dc:	f000 faea 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80068e0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80068e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80068e4:	4a3e      	ldr	r2, [pc, #248]	; (80069e0 <OTM8009A_Init+0x438>)
 80068e6:	21cb      	movs	r1, #203	; 0xcb
 80068e8:	4638      	mov	r0, r7
 80068ea:	f000 fae3 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80068ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80068f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80068f2:	4a33      	ldr	r2, [pc, #204]	; (80069c0 <OTM8009A_Init+0x418>)
 80068f4:	4619      	mov	r1, r3
 80068f6:	4638      	mov	r0, r7
 80068f8:	f000 fadc 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80068fc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80068fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006900:	4a38      	ldr	r2, [pc, #224]	; (80069e4 <OTM8009A_Init+0x43c>)
 8006902:	21cb      	movs	r1, #203	; 0xcb
 8006904:	4638      	mov	r0, r7
 8006906:	f000 fad5 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800690a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800690c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800690e:	4a2e      	ldr	r2, [pc, #184]	; (80069c8 <OTM8009A_Init+0x420>)
 8006910:	4619      	mov	r1, r3
 8006912:	4638      	mov	r0, r7
 8006914:	f000 face 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8006918:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800691a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800691c:	4a32      	ldr	r2, [pc, #200]	; (80069e8 <OTM8009A_Init+0x440>)
 800691e:	21cb      	movs	r1, #203	; 0xcb
 8006920:	4638      	mov	r0, r7
 8006922:	f000 fac7 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006926:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8006928:	4404      	add	r4, r0
 800692a:	e05f      	b.n	80069ec <OTM8009A_Init+0x444>
 800692c:	0805fbfd 	.word	0x0805fbfd
 8006930:	0805facc 	.word	0x0805facc
 8006934:	0805fbfe 	.word	0x0805fbfe
 8006938:	0805fb58 	.word	0x0805fb58
 800693c:	0805fbff 	.word	0x0805fbff
 8006940:	0805fc00 	.word	0x0805fc00
 8006944:	0805fc01 	.word	0x0805fc01
 8006948:	0805fc02 	.word	0x0805fc02
 800694c:	0805fc03 	.word	0x0805fc03
 8006950:	0805fc04 	.word	0x0805fc04
 8006954:	0805fc05 	.word	0x0805fc05
 8006958:	0805fc06 	.word	0x0805fc06
 800695c:	0805fc07 	.word	0x0805fc07
 8006960:	0805fc08 	.word	0x0805fc08
 8006964:	0805fc09 	.word	0x0805fc09
 8006968:	0805fc0a 	.word	0x0805fc0a
 800696c:	0805fc0b 	.word	0x0805fc0b
 8006970:	0805fc0c 	.word	0x0805fc0c
 8006974:	0805fc0d 	.word	0x0805fc0d
 8006978:	0805fc0e 	.word	0x0805fc0e
 800697c:	0805fc0f 	.word	0x0805fc0f
 8006980:	0805fbcc 	.word	0x0805fbcc
 8006984:	0805fc10 	.word	0x0805fc10
 8006988:	0805fc11 	.word	0x0805fc11
 800698c:	0805fc12 	.word	0x0805fc12
 8006990:	0805fc13 	.word	0x0805fc13
 8006994:	0805fc14 	.word	0x0805fc14
 8006998:	0805fc15 	.word	0x0805fc15
 800699c:	0805fc16 	.word	0x0805fc16
 80069a0:	0805fc17 	.word	0x0805fc17
 80069a4:	0805fc18 	.word	0x0805fc18
 80069a8:	0805fbd0 	.word	0x0805fbd0
 80069ac:	0805fbd4 	.word	0x0805fbd4
 80069b0:	0805fc19 	.word	0x0805fc19
 80069b4:	0805fbdc 	.word	0x0805fbdc
 80069b8:	0805fc1a 	.word	0x0805fc1a
 80069bc:	0805fbec 	.word	0x0805fbec
 80069c0:	0805fc1b 	.word	0x0805fc1b
 80069c4:	0805fad0 	.word	0x0805fad0
 80069c8:	0805fc1c 	.word	0x0805fc1c
 80069cc:	0805fc29 	.word	0x0805fc29
 80069d0:	0805fadc 	.word	0x0805fadc
 80069d4:	0805fc1d 	.word	0x0805fc1d
 80069d8:	0805fae8 	.word	0x0805fae8
 80069dc:	0805faf8 	.word	0x0805faf8
 80069e0:	0805fb08 	.word	0x0805fb08
 80069e4:	0805fb14 	.word	0x0805fb14
 80069e8:	0805fb24 	.word	0x0805fb24
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80069ec:	4aa7      	ldr	r2, [pc, #668]	; (8006c8c <OTM8009A_Init+0x6e4>)
 80069ee:	4619      	mov	r1, r3
 80069f0:	4638      	mov	r0, r7
 80069f2:	f000 fa5f 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80069f6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80069f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80069fa:	4aa5      	ldr	r2, [pc, #660]	; (8006c90 <OTM8009A_Init+0x6e8>)
 80069fc:	21cb      	movs	r1, #203	; 0xcb
 80069fe:	4638      	mov	r0, r7
 8006a00:	f000 fa58 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006a04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8006a06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006a08:	4aa2      	ldr	r2, [pc, #648]	; (8006c94 <OTM8009A_Init+0x6ec>)
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f000 fa51 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006a12:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006a14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006a16:	4aa0      	ldr	r2, [pc, #640]	; (8006c98 <OTM8009A_Init+0x6f0>)
 8006a18:	21cb      	movs	r1, #203	; 0xcb
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	f000 fa4a 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006a20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006a22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006a24:	4a9d      	ldr	r2, [pc, #628]	; (8006c9c <OTM8009A_Init+0x6f4>)
 8006a26:	4619      	mov	r1, r3
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f000 fa43 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006a2e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006a30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006a32:	4a9b      	ldr	r2, [pc, #620]	; (8006ca0 <OTM8009A_Init+0x6f8>)
 8006a34:	21cc      	movs	r1, #204	; 0xcc
 8006a36:	4638      	mov	r0, r7
 8006a38:	f000 fa3c 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006a3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006a3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006a40:	4a98      	ldr	r2, [pc, #608]	; (8006ca4 <OTM8009A_Init+0x6fc>)
 8006a42:	4619      	mov	r1, r3
 8006a44:	4638      	mov	r0, r7
 8006a46:	f000 fa35 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006a4a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006a4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006a4e:	4a96      	ldr	r2, [pc, #600]	; (8006ca8 <OTM8009A_Init+0x700>)
 8006a50:	21cc      	movs	r1, #204	; 0xcc
 8006a52:	4638      	mov	r0, r7
 8006a54:	f000 fa2e 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006a58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006a5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006a5c:	4a93      	ldr	r2, [pc, #588]	; (8006cac <OTM8009A_Init+0x704>)
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4638      	mov	r0, r7
 8006a62:	f000 fa27 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006a66:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006a68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006a6a:	4a91      	ldr	r2, [pc, #580]	; (8006cb0 <OTM8009A_Init+0x708>)
 8006a6c:	21cc      	movs	r1, #204	; 0xcc
 8006a6e:	4638      	mov	r0, r7
 8006a70:	f000 fa20 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006a74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006a76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006a78:	4a8e      	ldr	r2, [pc, #568]	; (8006cb4 <OTM8009A_Init+0x70c>)
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f000 fa19 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006a82:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006a84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006a86:	4a8c      	ldr	r2, [pc, #560]	; (8006cb8 <OTM8009A_Init+0x710>)
 8006a88:	21cc      	movs	r1, #204	; 0xcc
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	f000 fa12 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006a90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006a92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006a94:	4a89      	ldr	r2, [pc, #548]	; (8006cbc <OTM8009A_Init+0x714>)
 8006a96:	4619      	mov	r1, r3
 8006a98:	4638      	mov	r0, r7
 8006a9a:	f000 fa0b 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006a9e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006aa0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006aa2:	4a87      	ldr	r2, [pc, #540]	; (8006cc0 <OTM8009A_Init+0x718>)
 8006aa4:	21cc      	movs	r1, #204	; 0xcc
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	f000 fa04 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006aac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006aae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006ab0:	4a84      	ldr	r2, [pc, #528]	; (8006cc4 <OTM8009A_Init+0x71c>)
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f000 f9fd 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006aba:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006abc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006abe:	4a82      	ldr	r2, [pc, #520]	; (8006cc8 <OTM8009A_Init+0x720>)
 8006ac0:	21cc      	movs	r1, #204	; 0xcc
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	f000 f9f6 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006ac8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006aca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006acc:	4a7f      	ldr	r2, [pc, #508]	; (8006ccc <OTM8009A_Init+0x724>)
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	f000 f9ef 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006ad6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006ad8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006ada:	4a7d      	ldr	r2, [pc, #500]	; (8006cd0 <OTM8009A_Init+0x728>)
 8006adc:	21c5      	movs	r1, #197	; 0xc5
 8006ade:	4638      	mov	r0, r7
 8006ae0:	f000 f9e8 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006ae4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006ae6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006ae8:	4a7a      	ldr	r2, [pc, #488]	; (8006cd4 <OTM8009A_Init+0x72c>)
 8006aea:	4619      	mov	r1, r3
 8006aec:	4638      	mov	r0, r7
 8006aee:	f000 f9e1 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006af2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006af4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006af6:	4a78      	ldr	r2, [pc, #480]	; (8006cd8 <OTM8009A_Init+0x730>)
 8006af8:	21f5      	movs	r1, #245	; 0xf5
 8006afa:	4638      	mov	r0, r7
 8006afc:	f000 f9da 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006b00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006b02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006b04:	4a75      	ldr	r2, [pc, #468]	; (8006cdc <OTM8009A_Init+0x734>)
 8006b06:	4619      	mov	r1, r3
 8006b08:	4638      	mov	r0, r7
 8006b0a:	f000 f9d3 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006b0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006b10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006b12:	4a73      	ldr	r2, [pc, #460]	; (8006ce0 <OTM8009A_Init+0x738>)
 8006b14:	21c6      	movs	r1, #198	; 0xc6
 8006b16:	4638      	mov	r0, r7
 8006b18:	f000 f9cc 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006b1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b20:	4a70      	ldr	r2, [pc, #448]	; (8006ce4 <OTM8009A_Init+0x73c>)
 8006b22:	4619      	mov	r1, r3
 8006b24:	4638      	mov	r0, r7
 8006b26:	f000 f9c5 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006b2a:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006b2e:	4a6e      	ldr	r2, [pc, #440]	; (8006ce8 <OTM8009A_Init+0x740>)
 8006b30:	21ff      	movs	r1, #255	; 0xff
 8006b32:	4638      	mov	r0, r7
 8006b34:	f000 f9be 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006b3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b3c:	4a69      	ldr	r2, [pc, #420]	; (8006ce4 <OTM8009A_Init+0x73c>)
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4638      	mov	r0, r7
 8006b42:	f000 f9b7 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b4a:	4a66      	ldr	r2, [pc, #408]	; (8006ce4 <OTM8009A_Init+0x73c>)
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4638      	mov	r0, r7
 8006b50:	f000 f9b0 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006b54:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006b58:	4a64      	ldr	r2, [pc, #400]	; (8006cec <OTM8009A_Init+0x744>)
 8006b5a:	21e1      	movs	r1, #225	; 0xe1
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f000 f9a9 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006b64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006b66:	4a5f      	ldr	r2, [pc, #380]	; (8006ce4 <OTM8009A_Init+0x73c>)
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	f000 f9a2 	bl	8006eb4 <otm8009a_write_reg>
 8006b70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8006b72:	2310      	movs	r3, #16
 8006b74:	4a5e      	ldr	r2, [pc, #376]	; (8006cf0 <OTM8009A_Init+0x748>)
 8006b76:	21e2      	movs	r1, #226	; 0xe2
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f000 f99b 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8006b7e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8006b80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8006b82:	4a5c      	ldr	r2, [pc, #368]	; (8006cf4 <OTM8009A_Init+0x74c>)
 8006b84:	2111      	movs	r1, #17
 8006b86:	4638      	mov	r0, r7
 8006b88:	f000 f994 	bl	8006eb4 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8006b8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8006b90:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8006b92:	4798      	blx	r3
 8006b94:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006b96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006b9a:	4798      	blx	r3
 8006b9c:	1b40      	subs	r0, r0, r5
 8006b9e:	2877      	cmp	r0, #119	; 0x77
 8006ba0:	d9f9      	bls.n	8006b96 <OTM8009A_Init+0x5ee>
  switch(ColorCoding)
 8006ba2:	f1b9 0f00 	cmp.w	r9, #0
 8006ba6:	d06d      	beq.n	8006c84 <OTM8009A_Init+0x6dc>
 8006ba8:	f1b9 0f02 	cmp.w	r9, #2
 8006bac:	d14a      	bne.n	8006c44 <OTM8009A_Init+0x69c>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8006bae:	2300      	movs	r3, #0
 8006bb0:	4a51      	ldr	r2, [pc, #324]	; (8006cf8 <OTM8009A_Init+0x750>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006bb2:	213a      	movs	r1, #58	; 0x3a
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	f000 f97d 	bl	8006eb4 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8006bba:	4d50      	ldr	r5, [pc, #320]	; (8006cfc <OTM8009A_Init+0x754>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8006bbc:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006bc0:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8006bc2:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8006bc6:	d041      	beq.n	8006c4c <OTM8009A_Init+0x6a4>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4a4c      	ldr	r2, [pc, #304]	; (8006d00 <OTM8009A_Init+0x758>)
 8006bd0:	2151      	movs	r1, #81	; 0x51
 8006bd2:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8006bd4:	4699      	mov	r9, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8006bd6:	f000 f96d 	bl	8006eb4 <otm8009a_write_reg>
 8006bda:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006bdc:	4a49      	ldr	r2, [pc, #292]	; (8006d04 <OTM8009A_Init+0x75c>)
 8006bde:	464b      	mov	r3, r9
 8006be0:	2153      	movs	r1, #83	; 0x53
 8006be2:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8006be4:	f8c5 9008 	str.w	r9, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006be8:	f000 f964 	bl	8006eb4 <otm8009a_write_reg>
 8006bec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8006bee:	464b      	mov	r3, r9
 8006bf0:	4a45      	ldr	r2, [pc, #276]	; (8006d08 <OTM8009A_Init+0x760>)
 8006bf2:	2155      	movs	r1, #85	; 0x55
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f000 f95d 	bl	8006eb4 <otm8009a_write_reg>
 8006bfa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	4a43      	ldr	r2, [pc, #268]	; (8006d0c <OTM8009A_Init+0x764>)
 8006c00:	215e      	movs	r1, #94	; 0x5e
 8006c02:	4638      	mov	r0, r7
 8006c04:	f000 f956 	bl	8006eb4 <otm8009a_write_reg>
 8006c08:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	4a40      	ldr	r2, [pc, #256]	; (8006d10 <OTM8009A_Init+0x768>)
 8006c0e:	2129      	movs	r1, #41	; 0x29
 8006c10:	4638      	mov	r0, r7
 8006c12:	f000 f94f 	bl	8006eb4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006c16:	464b      	mov	r3, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006c18:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	4a31      	ldr	r2, [pc, #196]	; (8006ce4 <OTM8009A_Init+0x73c>)
 8006c1e:	4638      	mov	r0, r7
 8006c20:	f000 f948 	bl	8006eb4 <otm8009a_write_reg>
 8006c24:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8006c26:	464b      	mov	r3, r9
 8006c28:	4a3a      	ldr	r2, [pc, #232]	; (8006d14 <OTM8009A_Init+0x76c>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006c2a:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	212c      	movs	r1, #44	; 0x2c
 8006c30:	f000 f940 	bl	8006eb4 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8006c34:	42c4      	cmn	r4, r0
}
 8006c36:	bf14      	ite	ne
 8006c38:	f04f 30ff 	movne.w	r0, #4294967295
 8006c3c:	4648      	moveq	r0, r9
 8006c3e:	b003      	add	sp, #12
 8006c40:	e8bd 87b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8006c44:	f1ba 0f01 	cmp.w	sl, #1
 8006c48:	4d2c      	ldr	r5, [pc, #176]	; (8006cfc <OTM8009A_Init+0x754>)
 8006c4a:	d1bd      	bne.n	8006bc8 <OTM8009A_Init+0x620>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006c4c:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006c4e:	f10d 0207 	add.w	r2, sp, #7
 8006c52:	2136      	movs	r1, #54	; 0x36
 8006c54:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006c56:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f000 f92a 	bl	8006eb4 <otm8009a_write_reg>
 8006c60:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006c62:	2304      	movs	r3, #4
 8006c64:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <OTM8009A_Init+0x770>)
 8006c66:	212a      	movs	r1, #42	; 0x2a
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f000 f923 	bl	8006eb4 <otm8009a_write_reg>
 8006c6e:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006c70:	2304      	movs	r3, #4
 8006c72:	4a2a      	ldr	r2, [pc, #168]	; (8006d1c <OTM8009A_Init+0x774>)
 8006c74:	212b      	movs	r1, #43	; 0x2b
 8006c76:	4638      	mov	r0, r7
 8006c78:	f000 f91c 	bl	8006eb4 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006c7c:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006c80:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006c82:	e7a3      	b.n	8006bcc <OTM8009A_Init+0x624>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006c84:	464b      	mov	r3, r9
 8006c86:	4a26      	ldr	r2, [pc, #152]	; (8006d20 <OTM8009A_Init+0x778>)
 8006c88:	e793      	b.n	8006bb2 <OTM8009A_Init+0x60a>
 8006c8a:	bf00      	nop
 8006c8c:	0805fc1e 	.word	0x0805fc1e
 8006c90:	0805fb34 	.word	0x0805fb34
 8006c94:	0805fc1f 	.word	0x0805fc1f
 8006c98:	0805fb40 	.word	0x0805fb40
 8006c9c:	0805fbfe 	.word	0x0805fbfe
 8006ca0:	0805fb4c 	.word	0x0805fb4c
 8006ca4:	0805fc1d 	.word	0x0805fc1d
 8006ca8:	0805fb5c 	.word	0x0805fb5c
 8006cac:	0805fc19 	.word	0x0805fc19
 8006cb0:	0805fb6c 	.word	0x0805fb6c
 8006cb4:	0805fc1a 	.word	0x0805fc1a
 8006cb8:	0805fb7c 	.word	0x0805fb7c
 8006cbc:	0805fc1b 	.word	0x0805fc1b
 8006cc0:	0805fb88 	.word	0x0805fb88
 8006cc4:	0805fc1c 	.word	0x0805fc1c
 8006cc8:	0805fb98 	.word	0x0805fb98
 8006ccc:	0805fc09 	.word	0x0805fc09
 8006cd0:	0805fc2a 	.word	0x0805fc2a
 8006cd4:	0805fc2b 	.word	0x0805fc2b
 8006cd8:	0805fc2c 	.word	0x0805fc2c
 8006cdc:	0805fc2d 	.word	0x0805fc2d
 8006ce0:	0805fc2e 	.word	0x0805fc2e
 8006ce4:	0805fbfd 	.word	0x0805fbfd
 8006ce8:	0805fba8 	.word	0x0805fba8
 8006cec:	0805fbac 	.word	0x0805fbac
 8006cf0:	0805fbbc 	.word	0x0805fbbc
 8006cf4:	0805fc20 	.word	0x0805fc20
 8006cf8:	0805fc21 	.word	0x0805fc21
 8006cfc:	200063c0 	.word	0x200063c0
 8006d00:	0805fc23 	.word	0x0805fc23
 8006d04:	0805fc24 	.word	0x0805fc24
 8006d08:	0805fc25 	.word	0x0805fc25
 8006d0c:	0805fc26 	.word	0x0805fc26
 8006d10:	0805fc27 	.word	0x0805fc27
 8006d14:	0805fc28 	.word	0x0805fc28
 8006d18:	0805fac4 	.word	0x0805fac4
 8006d1c:	0805fac8 	.word	0x0805fac8
 8006d20:	0805fc22 	.word	0x0805fc22

08006d24 <OTM8009A_SetBrightness>:
{
 8006d24:	b530      	push	{r4, r5, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8006d26:	ebc1 2c01 	rsb	ip, r1, r1, lsl #8
 8006d2a:	4d0c      	ldr	r5, [pc, #48]	; (8006d5c <OTM8009A_SetBrightness+0x38>)
{
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	b083      	sub	sp, #12
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8006d30:	fba5 1c0c 	umull	r1, ip, r5, ip
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8006d34:	2300      	movs	r3, #0
 8006d36:	f10d 0207 	add.w	r2, sp, #7
 8006d3a:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8006d3c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8006d40:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8006d42:	f88d c007 	strb.w	ip, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8006d46:	f000 f8b5 	bl	8006eb4 <otm8009a_write_reg>
 8006d4a:	b918      	cbnz	r0, 8006d54 <OTM8009A_SetBrightness+0x30>
    OTM8009ACtx.Brightness = Brightness;
 8006d4c:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <OTM8009A_SetBrightness+0x3c>)
 8006d4e:	609c      	str	r4, [r3, #8]
}
 8006d50:	b003      	add	sp, #12
 8006d52:	bd30      	pop	{r4, r5, pc}
    ret = OTM8009A_ERROR;
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8006d58:	e7fa      	b.n	8006d50 <OTM8009A_SetBrightness+0x2c>
 8006d5a:	bf00      	nop
 8006d5c:	51eb851f 	.word	0x51eb851f
 8006d60:	200063c0 	.word	0x200063c0

08006d64 <OTM8009A_DisplayOn>:
{
 8006d64:	b500      	push	{lr}
 8006d66:	b083      	sub	sp, #12
  uint8_t display = 0;
 8006d68:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8006d6a:	2129      	movs	r1, #41	; 0x29
 8006d6c:	3010      	adds	r0, #16
 8006d6e:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8006d72:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8006d76:	f000 f89d 	bl	8006eb4 <otm8009a_write_reg>
 8006d7a:	3800      	subs	r0, #0
 8006d7c:	bf18      	it	ne
 8006d7e:	2001      	movne	r0, #1
}
 8006d80:	4240      	negs	r0, r0
 8006d82:	b003      	add	sp, #12
 8006d84:	f85d fb04 	ldr.w	pc, [sp], #4

08006d88 <OTM8009A_DisplayOff>:
{
 8006d88:	b500      	push	{lr}
 8006d8a:	b083      	sub	sp, #12
  uint8_t display = 0;
 8006d8c:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8006d8e:	2128      	movs	r1, #40	; 0x28
 8006d90:	3010      	adds	r0, #16
 8006d92:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8006d96:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8006d9a:	f000 f88b 	bl	8006eb4 <otm8009a_write_reg>
 8006d9e:	3800      	subs	r0, #0
 8006da0:	bf18      	it	ne
 8006da2:	2001      	movne	r0, #1
}
 8006da4:	4240      	negs	r0, r0
 8006da6:	b003      	add	sp, #12
 8006da8:	f85d fb04 	ldr.w	pc, [sp], #4

08006dac <OTM8009A_SetOrientation>:
{
 8006dac:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006dae:	2360      	movs	r3, #96	; 0x60
{
 8006db0:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8006db2:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8006db4:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006db6:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8006dba:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8006dbe:	d83e      	bhi.n	8006e3e <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8006dc0:	d020      	beq.n	8006e04 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8006dc2:	f100 0510 	add.w	r5, r0, #16
 8006dc6:	4633      	mov	r3, r6
 8006dc8:	f10d 0207 	add.w	r2, sp, #7
 8006dcc:	2136      	movs	r1, #54	; 0x36
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f000 f870 	bl	8006eb4 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	4a1b      	ldr	r2, [pc, #108]	; (8006e44 <OTM8009A_SetOrientation+0x98>)
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8006dd8:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006dda:	212a      	movs	r1, #42	; 0x2a
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f000 f869 	bl	8006eb4 <otm8009a_write_reg>
 8006de2:	4602      	mov	r2, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006de4:	2304      	movs	r3, #4
 8006de6:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006de8:	4414      	add	r4, r2
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006dea:	212b      	movs	r1, #43	; 0x2b
 8006dec:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <OTM8009A_SetOrientation+0x9c>)
 8006dee:	f000 f861 	bl	8006eb4 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8006df2:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006df4:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8006df6:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8006df8:	3800      	subs	r0, #0
 8006dfa:	bf18      	it	ne
 8006dfc:	2001      	movne	r0, #1
 8006dfe:	4240      	negs	r0, r0
}
 8006e00:	b003      	add	sp, #12
 8006e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006e04:	f100 0510 	add.w	r5, r0, #16
 8006e08:	460f      	mov	r7, r1
 8006e0a:	4633      	mov	r3, r6
 8006e0c:	f10d 0206 	add.w	r2, sp, #6
 8006e10:	2136      	movs	r1, #54	; 0x36
 8006e12:	4628      	mov	r0, r5
 8006e14:	f000 f84e 	bl	8006eb4 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006e18:	2304      	movs	r3, #4
 8006e1a:	4a0a      	ldr	r2, [pc, #40]	; (8006e44 <OTM8009A_SetOrientation+0x98>)
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006e1c:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006e1e:	212a      	movs	r1, #42	; 0x2a
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 f847 	bl	8006eb4 <otm8009a_write_reg>
 8006e26:	4602      	mov	r2, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006e28:	2304      	movs	r3, #4
 8006e2a:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006e2c:	4414      	add	r4, r2
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006e2e:	212b      	movs	r1, #43	; 0x2b
 8006e30:	4a05      	ldr	r2, [pc, #20]	; (8006e48 <OTM8009A_SetOrientation+0x9c>)
 8006e32:	f000 f83f 	bl	8006eb4 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006e38:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006e3a:	601f      	str	r7, [r3, #0]
 8006e3c:	e7dc      	b.n	8006df8 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8006e42:	e7dd      	b.n	8006e00 <OTM8009A_SetOrientation+0x54>
 8006e44:	0805fac4 	.word	0x0805fac4
 8006e48:	0805fac8 	.word	0x0805fac8
 8006e4c:	200063c0 	.word	0x200063c0

08006e50 <OTM8009A_ReadID>:
{ 
 8006e50:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8006e52:	3010      	adds	r0, #16
 8006e54:	21da      	movs	r1, #218	; 0xda
{ 
 8006e56:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f000 f823 	bl	8006ea4 <otm8009a_read_reg>
 8006e5e:	3800      	subs	r0, #0
 8006e60:	bf18      	it	ne
 8006e62:	2001      	movne	r0, #1
}  
 8006e64:	4240      	negs	r0, r0
 8006e66:	bd08      	pop	{r3, pc}

08006e68 <OTM8009A_DrawVLine>:
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop

08006e70 <OTM8009A_GetPixel>:
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop

08006e78 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8006e78:	4603      	mov	r3, r0
 8006e7a:	b160      	cbz	r0, 8006e96 <OTM8009A_RegisterBusIO+0x1e>
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006e7c:	e9d1 0201 	ldrd	r0, r2, [r1, #4]
    pObj->IO.GetTick   = pIO->GetTick;
 8006e80:	68c9      	ldr	r1, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8006e82:	619b      	str	r3, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8006e84:	60d9      	str	r1, [r3, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8006e86:	4905      	ldr	r1, [pc, #20]	; (8006e9c <OTM8009A_RegisterBusIO+0x24>)
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006e88:	e9c3 0201 	strd	r0, r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8006e8c:	4a04      	ldr	r2, [pc, #16]	; (8006ea0 <OTM8009A_RegisterBusIO+0x28>)
  int32_t ret = OTM8009A_OK;
 8006e8e:	2000      	movs	r0, #0
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8006e90:	e9c3 2104 	strd	r2, r1, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8006e94:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8006e96:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006e9a:	4770      	bx	lr
 8006e9c:	08006589 	.word	0x08006589
 8006ea0:	08006599 	.word	0x08006599

08006ea4 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8006ea4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006ea6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006eaa:	46a4      	mov	ip, r4
}
 8006eac:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006eb0:	4760      	bx	ip
 8006eb2:	bf00      	nop

08006eb4 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8006eb4:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006eb6:	6804      	ldr	r4, [r0, #0]
 8006eb8:	6880      	ldr	r0, [r0, #8]
 8006eba:	46a4      	mov	ip, r4
}
 8006ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006ec0:	4760      	bx	ip
 8006ec2:	bf00      	nop

08006ec4 <OV5640_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
  if (pObj->IsInitialized == 1U)
 8006ec4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d102      	bne.n	8006ed2 <OV5640_DeInit+0xe>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV5640_OK;
}
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop

08006ed8 <OV5640_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
}
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop

08006ee0 <OV5640_GetCapabilities>:
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
  int32_t ret;

  if (pObj == NULL)
 8006ee0:	b160      	cbz	r0, 8006efc <OV5640_GetCapabilities+0x1c>
  {
    ret = OV5640_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8006ee2:	2301      	movs	r3, #1
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 1;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 1;

    ret = OV5640_OK;
 8006ee4:	2000      	movs	r0, #0
    Capabilities->Config_Brightness    = 1;
 8006ee6:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_LightMode     = 1;
 8006ee8:	604b      	str	r3, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8006eea:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 8006eec:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8006eee:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 1;
 8006ef0:	610b      	str	r3, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8006ef2:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 1;
 8006ef4:	620b      	str	r3, [r1, #32]
    Capabilities->Config_HueDegree     = 1;
 8006ef6:	e9c1 3305 	strd	r3, r3, [r1, #20]
    ret = OV5640_OK;
 8006efa:	4770      	bx	lr
    ret = OV5640_ERROR;
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop

08006f04 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006f04:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006f06:	6904      	ldr	r4, [r0, #16]
 8006f08:	8900      	ldrh	r0, [r0, #8]
 8006f0a:	46a4      	mov	ip, r4
}
 8006f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006f10:	4760      	bx	ip
 8006f12:	bf00      	nop

08006f14 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006f14:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006f16:	68c4      	ldr	r4, [r0, #12]
 8006f18:	8900      	ldrh	r0, [r0, #8]
 8006f1a:	46a4      	mov	ip, r4
}
 8006f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006f20:	4760      	bx	ip
 8006f22:	bf00      	nop

08006f24 <OV5640_SetResolution>:
  if (Resolution > OV5640_R800x480)
 8006f24:	2904      	cmp	r1, #4
 8006f26:	d865      	bhi.n	8006ff4 <OV5640_SetResolution+0xd0>
    switch (Resolution)
 8006f28:	3901      	subs	r1, #1
{
 8006f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8006f2c:	f100 0418 	add.w	r4, r0, #24
{
 8006f30:	b083      	sub	sp, #12
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8006f32:	2600      	movs	r6, #0
    switch (Resolution)
 8006f34:	2903      	cmp	r1, #3
 8006f36:	d860      	bhi.n	8006ffa <OV5640_SetResolution+0xd6>
 8006f38:	e8df f001 	tbb	[pc, r1]
 8006f3c:	02182d42 	.word	0x02182d42
          if (ret != OV5640_ERROR)
 8006f40:	f10d 0507 	add.w	r5, sp, #7
 8006f44:	4f37      	ldr	r7, [pc, #220]	; (8007024 <OV5640_SetResolution+0x100>)
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8006f46:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8006f50:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8006f52:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8006f54:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8006f56:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8006f5a:	462a      	mov	r2, r5
 8006f5c:	f001 f854 	bl	8008008 <ov5640_write_reg>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d044      	beq.n	8006fee <OV5640_SetResolution+0xca>
    ret = OV5640_ERROR;
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006f68:	b003      	add	sp, #12
 8006f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (ret != OV5640_ERROR)
 8006f6c:	f10d 0507 	add.w	r5, sp, #7
 8006f70:	4f2d      	ldr	r7, [pc, #180]	; (8007028 <OV5640_SetResolution+0x104>)
            tmp = (uint8_t)OV5640_VGA[index][1];
 8006f72:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8006f76:	2301      	movs	r3, #1
 8006f78:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8006f7c:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_VGA[index][1];
 8006f7e:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8006f80:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_VGA[index][1];
 8006f82:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8006f86:	462a      	mov	r2, r5
 8006f88:	f001 f83e 	bl	8008008 <ov5640_write_reg>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d1e9      	bne.n	8006f64 <OV5640_SetResolution+0x40>
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8006f90:	2e04      	cmp	r6, #4
 8006f92:	d1ee      	bne.n	8006f72 <OV5640_SetResolution+0x4e>
 8006f94:	e028      	b.n	8006fe8 <OV5640_SetResolution+0xc4>
          if (ret != OV5640_ERROR)
 8006f96:	f10d 0507 	add.w	r5, sp, #7
 8006f9a:	4f24      	ldr	r7, [pc, #144]	; (800702c <OV5640_SetResolution+0x108>)
            tmp = (uint8_t)OV5640_480x272[index][1];
 8006f9c:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8006fa6:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_480x272[index][1];
 8006fa8:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8006faa:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_480x272[index][1];
 8006fac:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8006fb0:	462a      	mov	r2, r5
 8006fb2:	f001 f829 	bl	8008008 <ov5640_write_reg>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d1d4      	bne.n	8006f64 <OV5640_SetResolution+0x40>
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8006fba:	2e04      	cmp	r6, #4
 8006fbc:	d1ee      	bne.n	8006f9c <OV5640_SetResolution+0x78>
 8006fbe:	e013      	b.n	8006fe8 <OV5640_SetResolution+0xc4>
          if (ret != OV5640_ERROR)
 8006fc0:	f10d 0507 	add.w	r5, sp, #7
 8006fc4:	4f1a      	ldr	r7, [pc, #104]	; (8007030 <OV5640_SetResolution+0x10c>)
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8006fc6:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8006fd0:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8006fd2:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8006fd4:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8006fd6:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8006fda:	462a      	mov	r2, r5
 8006fdc:	f001 f814 	bl	8008008 <ov5640_write_reg>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d1bf      	bne.n	8006f64 <OV5640_SetResolution+0x40>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8006fe4:	2e04      	cmp	r6, #4
 8006fe6:	d1ee      	bne.n	8006fc6 <OV5640_SetResolution+0xa2>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8006fe8:	2000      	movs	r0, #0
}
 8006fea:	b003      	add	sp, #12
 8006fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8006fee:	2e04      	cmp	r6, #4
 8006ff0:	d1a9      	bne.n	8006f46 <OV5640_SetResolution+0x22>
 8006ff2:	e7f9      	b.n	8006fe8 <OV5640_SetResolution+0xc4>
    ret = OV5640_ERROR;
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ff8:	4770      	bx	lr
          if (ret != OV5640_ERROR)
 8006ffa:	4f0e      	ldr	r7, [pc, #56]	; (8007034 <OV5640_SetResolution+0x110>)
 8006ffc:	f10d 0507 	add.w	r5, sp, #7
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8007000:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007004:	2301      	movs	r3, #1
 8007006:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 800700a:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 800700c:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 800700e:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8007010:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007014:	462a      	mov	r2, r5
 8007016:	f000 fff7 	bl	8008008 <ov5640_write_reg>
 800701a:	2800      	cmp	r0, #0
 800701c:	d1a2      	bne.n	8006f64 <OV5640_SetResolution+0x40>
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 800701e:	2e04      	cmp	r6, #4
 8007020:	d1ee      	bne.n	8007000 <OV5640_SetResolution+0xdc>
 8007022:	e7e1      	b.n	8006fe8 <OV5640_SetResolution+0xc4>
 8007024:	08060110 	.word	0x08060110
 8007028:	08060100 	.word	0x08060100
 800702c:	0805fc4c 	.word	0x0805fc4c
 8007030:	080600f0 	.word	0x080600f0
 8007034:	080600e0 	.word	0x080600e0

08007038 <OV5640_SetLightMode>:
{
 8007038:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = 0x00;
 800703a:	2200      	movs	r2, #0
{
 800703c:	b083      	sub	sp, #12
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800703e:	f100 0518 	add.w	r5, r0, #24
 8007042:	2301      	movs	r3, #1
  tmp = 0x00;
 8007044:	f88d 2007 	strb.w	r2, [sp, #7]
{
 8007048:	460e      	mov	r6, r1
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800704a:	f10d 0207 	add.w	r2, sp, #7
 800704e:	f243 4106 	movw	r1, #13318	; 0x3406
 8007052:	4628      	mov	r0, r5
 8007054:	f000 ffd8 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007058:	4604      	mov	r4, r0
 800705a:	b110      	cbz	r0, 8007062 <OV5640_SetLightMode+0x2a>
}
 800705c:	4620      	mov	r0, r4
 800705e:	b003      	add	sp, #12
 8007060:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0x46;
 8007062:	2246      	movs	r2, #70	; 0x46
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8007064:	2301      	movs	r3, #1
 8007066:	f245 1190 	movw	r1, #20880	; 0x5190
 800706a:	4628      	mov	r0, r5
    tmp = 0x46;
 800706c:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8007070:	f10d 0207 	add.w	r2, sp, #7
 8007074:	f000 ffc8 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007078:	4604      	mov	r4, r0
 800707a:	2800      	cmp	r0, #0
 800707c:	d1ee      	bne.n	800705c <OV5640_SetLightMode+0x24>
    tmp = 0xF8;
 800707e:	22f8      	movs	r2, #248	; 0xf8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8007080:	2301      	movs	r3, #1
 8007082:	f245 1191 	movw	r1, #20881	; 0x5191
 8007086:	4628      	mov	r0, r5
    tmp = 0xF8;
 8007088:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800708c:	f10d 0207 	add.w	r2, sp, #7
 8007090:	f000 ffba 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007094:	4604      	mov	r4, r0
 8007096:	2800      	cmp	r0, #0
 8007098:	d1e0      	bne.n	800705c <OV5640_SetLightMode+0x24>
    tmp = 0x04;
 800709a:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 800709c:	2301      	movs	r3, #1
 800709e:	f245 1192 	movw	r1, #20882	; 0x5192
 80070a2:	4628      	mov	r0, r5
    tmp = 0x04;
 80070a4:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 80070a8:	f10d 0207 	add.w	r2, sp, #7
 80070ac:	f000 ffac 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80070b0:	4604      	mov	r4, r0
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d1d2      	bne.n	800705c <OV5640_SetLightMode+0x24>
    switch (LightMode)
 80070b6:	1e71      	subs	r1, r6, #1
 80070b8:	2600      	movs	r6, #0
 80070ba:	2907      	cmp	r1, #7
 80070bc:	d805      	bhi.n	80070ca <OV5640_SetLightMode+0x92>
 80070be:	e8df f001 	tbb	[pc, r1]
 80070c2:	2c54      	.short	0x2c54
 80070c4:	04044004 	.word	0x04044004
 80070c8:	1804      	.short	0x1804
 80070ca:	4f54      	ldr	r7, [pc, #336]	; (800721c <OV5640_SetLightMode+0x1e4>)
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80070cc:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80070d0:	2301      	movs	r3, #1
 80070d2:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 80070d6:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80070d8:	8852      	ldrh	r2, [r2, #2]
 80070da:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80070de:	f10d 0207 	add.w	r2, sp, #7
 80070e2:	f000 ff91 	bl	8008008 <ov5640_write_reg>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d163      	bne.n	80071b2 <OV5640_SetLightMode+0x17a>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80070ea:	3601      	adds	r6, #1
 80070ec:	2e07      	cmp	r6, #7
 80070ee:	d1ed      	bne.n	80070cc <OV5640_SetLightMode+0x94>
 80070f0:	e7b4      	b.n	800705c <OV5640_SetLightMode+0x24>
 80070f2:	4f4b      	ldr	r7, [pc, #300]	; (8007220 <OV5640_SetLightMode+0x1e8>)
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80070f4:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 80070f8:	2301      	movs	r3, #1
 80070fa:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 80070fe:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8007100:	8852      	ldrh	r2, [r2, #2]
 8007102:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8007106:	f10d 0207 	add.w	r2, sp, #7
 800710a:	f000 ff7d 	bl	8008008 <ov5640_write_reg>
 800710e:	2800      	cmp	r0, #0
 8007110:	d169      	bne.n	80071e6 <OV5640_SetLightMode+0x1ae>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8007112:	3601      	adds	r6, #1
 8007114:	2e07      	cmp	r6, #7
 8007116:	d1ed      	bne.n	80070f4 <OV5640_SetLightMode+0xbc>
 8007118:	e7a0      	b.n	800705c <OV5640_SetLightMode+0x24>
 800711a:	4f42      	ldr	r7, [pc, #264]	; (8007224 <OV5640_SetLightMode+0x1ec>)
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 800711c:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8007120:	2301      	movs	r3, #1
 8007122:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007126:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8007128:	8852      	ldrh	r2, [r2, #2]
 800712a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 800712e:	f10d 0207 	add.w	r2, sp, #7
 8007132:	f000 ff69 	bl	8008008 <ov5640_write_reg>
 8007136:	2800      	cmp	r0, #0
 8007138:	d148      	bne.n	80071cc <OV5640_SetLightMode+0x194>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800713a:	3601      	adds	r6, #1
 800713c:	2e07      	cmp	r6, #7
 800713e:	d1ed      	bne.n	800711c <OV5640_SetLightMode+0xe4>
 8007140:	e78c      	b.n	800705c <OV5640_SetLightMode+0x24>
 8007142:	4f39      	ldr	r7, [pc, #228]	; (8007228 <OV5640_SetLightMode+0x1f0>)
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8007144:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8007148:	2301      	movs	r3, #1
 800714a:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 800714e:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8007150:	8852      	ldrh	r2, [r2, #2]
 8007152:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8007156:	f10d 0207 	add.w	r2, sp, #7
 800715a:	f000 ff55 	bl	8008008 <ov5640_write_reg>
 800715e:	2800      	cmp	r0, #0
 8007160:	d14e      	bne.n	8007200 <OV5640_SetLightMode+0x1c8>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8007162:	3601      	adds	r6, #1
 8007164:	2e07      	cmp	r6, #7
 8007166:	d1ed      	bne.n	8007144 <OV5640_SetLightMode+0x10c>
 8007168:	e778      	b.n	800705c <OV5640_SetLightMode+0x24>
 800716a:	4f30      	ldr	r7, [pc, #192]	; (800722c <OV5640_SetLightMode+0x1f4>)
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800716c:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8007170:	2301      	movs	r3, #1
 8007172:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007176:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8007178:	8852      	ldrh	r2, [r2, #2]
 800717a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 800717e:	f10d 0207 	add.w	r2, sp, #7
 8007182:	f000 ff41 	bl	8008008 <ov5640_write_reg>
 8007186:	b180      	cbz	r0, 80071aa <OV5640_SetLightMode+0x172>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8007188:	2e06      	cmp	r6, #6
 800718a:	d009      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 800718c:	2e05      	cmp	r6, #5
 800718e:	f106 0302 	add.w	r3, r6, #2
 8007192:	d005      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 8007194:	2b06      	cmp	r3, #6
 8007196:	f103 0302 	add.w	r3, r3, #2
 800719a:	d001      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 800719c:	2b07      	cmp	r3, #7
 800719e:	d1f9      	bne.n	8007194 <OV5640_SetLightMode+0x15c>
    switch (LightMode)
 80071a0:	f04f 34ff 	mov.w	r4, #4294967295
}
 80071a4:	4620      	mov	r0, r4
 80071a6:	b003      	add	sp, #12
 80071a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80071aa:	3601      	adds	r6, #1
 80071ac:	2e07      	cmp	r6, #7
 80071ae:	d1dd      	bne.n	800716c <OV5640_SetLightMode+0x134>
 80071b0:	e754      	b.n	800705c <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80071b2:	2e06      	cmp	r6, #6
 80071b4:	d0f4      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 80071b6:	2e05      	cmp	r6, #5
 80071b8:	f106 0302 	add.w	r3, r6, #2
 80071bc:	d0f0      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 80071be:	2b06      	cmp	r3, #6
 80071c0:	f103 0302 	add.w	r3, r3, #2
 80071c4:	d0ec      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 80071c6:	2b07      	cmp	r3, #7
 80071c8:	d1f9      	bne.n	80071be <OV5640_SetLightMode+0x186>
 80071ca:	e7e9      	b.n	80071a0 <OV5640_SetLightMode+0x168>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80071cc:	2e06      	cmp	r6, #6
 80071ce:	d0e7      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 80071d0:	2e05      	cmp	r6, #5
 80071d2:	f106 0302 	add.w	r3, r6, #2
 80071d6:	d0e3      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 80071d8:	2b06      	cmp	r3, #6
 80071da:	f103 0302 	add.w	r3, r3, #2
 80071de:	d0df      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 80071e0:	2b07      	cmp	r3, #7
 80071e2:	d1f9      	bne.n	80071d8 <OV5640_SetLightMode+0x1a0>
 80071e4:	e7dc      	b.n	80071a0 <OV5640_SetLightMode+0x168>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80071e6:	2e06      	cmp	r6, #6
 80071e8:	d0da      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 80071ea:	2e05      	cmp	r6, #5
 80071ec:	f106 0302 	add.w	r3, r6, #2
 80071f0:	d0d6      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 80071f2:	2b06      	cmp	r3, #6
 80071f4:	f103 0302 	add.w	r3, r3, #2
 80071f8:	d0d2      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 80071fa:	2b07      	cmp	r3, #7
 80071fc:	d1f9      	bne.n	80071f2 <OV5640_SetLightMode+0x1ba>
 80071fe:	e7cf      	b.n	80071a0 <OV5640_SetLightMode+0x168>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8007200:	2e06      	cmp	r6, #6
 8007202:	d0cd      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 8007204:	2e05      	cmp	r6, #5
 8007206:	f106 0302 	add.w	r3, r6, #2
 800720a:	d0c9      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 800720c:	2b06      	cmp	r3, #6
 800720e:	f103 0302 	add.w	r3, r3, #2
 8007212:	d0c5      	beq.n	80071a0 <OV5640_SetLightMode+0x168>
 8007214:	2b07      	cmp	r3, #7
 8007216:	d1f9      	bne.n	800720c <OV5640_SetLightMode+0x1d4>
 8007218:	e7c2      	b.n	80071a0 <OV5640_SetLightMode+0x168>
 800721a:	bf00      	nop
 800721c:	08060054 	.word	0x08060054
 8007220:	08060070 	.word	0x08060070
 8007224:	080600a8 	.word	0x080600a8
 8007228:	0806008c 	.word	0x0806008c
 800722c:	080600c4 	.word	0x080600c4

08007230 <OV5640_SetColorEffect>:
  switch (Effect)
 8007230:	3901      	subs	r1, #1
{
 8007232:	b530      	push	{r4, r5, lr}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007234:	f100 0418 	add.w	r4, r0, #24
{
 8007238:	b083      	sub	sp, #12
  switch (Effect)
 800723a:	291f      	cmp	r1, #31
 800723c:	d821      	bhi.n	8007282 <OV5640_SetColorEffect+0x52>
 800723e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007242:	0033      	.short	0x0033
 8007244:	00200062 	.word	0x00200062
 8007248:	00200091 	.word	0x00200091
 800724c:	00200020 	.word	0x00200020
 8007250:	002000ad 	.word	0x002000ad
 8007254:	00200020 	.word	0x00200020
 8007258:	00200020 	.word	0x00200020
 800725c:	00200020 	.word	0x00200020
 8007260:	002000e7 	.word	0x002000e7
 8007264:	00200020 	.word	0x00200020
 8007268:	00200020 	.word	0x00200020
 800726c:	00200020 	.word	0x00200020
 8007270:	00200020 	.word	0x00200020
 8007274:	00200020 	.word	0x00200020
 8007278:	00200020 	.word	0x00200020
 800727c:	00200020 	.word	0x00200020
 8007280:	0119      	.short	0x0119
      tmp = 0x7F;
 8007282:	217f      	movs	r1, #127	; 0x7f
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007284:	2301      	movs	r3, #1
 8007286:	f10d 0207 	add.w	r2, sp, #7
 800728a:	4620      	mov	r0, r4
      tmp = 0x7F;
 800728c:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007290:	f245 0101 	movw	r1, #20481	; 0x5001
 8007294:	f000 feb8 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007298:	4684      	mov	ip, r0
 800729a:	2800      	cmp	r0, #0
 800729c:	f000 80fa 	beq.w	8007494 <OV5640_SetColorEffect+0x264>
        ret = OV5640_ERROR;
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80072a4:	b003      	add	sp, #12
 80072a6:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 80072a8:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80072aa:	2301      	movs	r3, #1
 80072ac:	f10d 0207 	add.w	r2, sp, #7
 80072b0:	4620      	mov	r0, r4
      tmp = 0xFF;
 80072b2:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80072b6:	f245 0101 	movw	r1, #20481	; 0x5001
 80072ba:	f000 fea5 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80072be:	2800      	cmp	r0, #0
 80072c0:	d1ee      	bne.n	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80072c2:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80072c4:	2301      	movs	r3, #1
 80072c6:	f10d 0207 	add.w	r2, sp, #7
 80072ca:	4620      	mov	r0, r4
        tmp = 0x18;
 80072cc:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80072d0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80072d4:	f000 fe98 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80072d8:	2800      	cmp	r0, #0
 80072da:	d1e1      	bne.n	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 80072dc:	21a0      	movs	r1, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80072de:	2301      	movs	r3, #1
 80072e0:	f10d 0207 	add.w	r2, sp, #7
 80072e4:	4620      	mov	r0, r4
        tmp = 0xA0;
 80072e6:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80072ea:	f245 5183 	movw	r1, #21891	; 0x5583
 80072ee:	f000 fe8b 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d1d4      	bne.n	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 80072f6:	f04f 0c40 	mov.w	ip, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80072fa:	2301      	movs	r3, #1
 80072fc:	f10d 0207 	add.w	r2, sp, #7
 8007300:	f245 5184 	movw	r1, #21892	; 0x5584
 8007304:	e0cb      	b.n	800749e <OV5640_SetColorEffect+0x26e>
      tmp = 0xFF;
 8007306:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007308:	2301      	movs	r3, #1
 800730a:	f10d 0207 	add.w	r2, sp, #7
 800730e:	4620      	mov	r0, r4
      tmp = 0xFF;
 8007310:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007314:	f245 0101 	movw	r1, #20481	; 0x5001
 8007318:	f000 fe76 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800731c:	2800      	cmp	r0, #0
 800731e:	d1bf      	bne.n	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8007320:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007322:	2301      	movs	r3, #1
 8007324:	f10d 0207 	add.w	r2, sp, #7
 8007328:	4620      	mov	r0, r4
        tmp = 0x18;
 800732a:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800732e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007332:	f000 fe69 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007336:	2800      	cmp	r0, #0
 8007338:	d1b2      	bne.n	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 800733a:	2180      	movs	r1, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800733c:	2301      	movs	r3, #1
 800733e:	f10d 0207 	add.w	r2, sp, #7
 8007342:	4620      	mov	r0, r4
        tmp = 0x80;
 8007344:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007348:	f245 5183 	movw	r1, #21891	; 0x5583
 800734c:	f000 fe5c 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007350:	2800      	cmp	r0, #0
 8007352:	d1a5      	bne.n	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0xC0;
 8007354:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007358:	2301      	movs	r3, #1
 800735a:	f10d 0207 	add.w	r2, sp, #7
 800735e:	f245 5184 	movw	r1, #21892	; 0x5584
 8007362:	e09c      	b.n	800749e <OV5640_SetColorEffect+0x26e>
      tmp = 0xFF;
 8007364:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007366:	2301      	movs	r3, #1
 8007368:	f10d 0207 	add.w	r2, sp, #7
 800736c:	4620      	mov	r0, r4
      tmp = 0xFF;
 800736e:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007372:	f245 0101 	movw	r1, #20481	; 0x5001
 8007376:	f000 fe47 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800737a:	2800      	cmp	r0, #0
 800737c:	d190      	bne.n	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 800737e:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007380:	2301      	movs	r3, #1
 8007382:	f10d 0207 	add.w	r2, sp, #7
 8007386:	4620      	mov	r0, r4
        tmp = 0x18;
 8007388:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800738c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007390:	f000 fe3a 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007394:	2800      	cmp	r0, #0
 8007396:	d183      	bne.n	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x60;
 8007398:	2560      	movs	r5, #96	; 0x60
 800739a:	e01c      	b.n	80073d6 <OV5640_SetColorEffect+0x1a6>
      tmp = 0xFF;
 800739c:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800739e:	2301      	movs	r3, #1
 80073a0:	f10d 0207 	add.w	r2, sp, #7
 80073a4:	4620      	mov	r0, r4
      tmp = 0xFF;
 80073a6:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80073aa:	f245 0101 	movw	r1, #20481	; 0x5001
 80073ae:	f000 fe2b 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80073b2:	2800      	cmp	r0, #0
 80073b4:	f47f af74 	bne.w	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80073b8:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80073ba:	2301      	movs	r3, #1
 80073bc:	f10d 0207 	add.w	r2, sp, #7
 80073c0:	4620      	mov	r0, r4
        tmp = 0x18;
 80073c2:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80073c6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80073ca:	f000 fe1d 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80073ce:	2800      	cmp	r0, #0
 80073d0:	f47f af66 	bne.w	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 80073d4:	2580      	movs	r5, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80073d6:	2301      	movs	r3, #1
 80073d8:	f10d 0207 	add.w	r2, sp, #7
 80073dc:	f245 5183 	movw	r1, #21891	; 0x5583
 80073e0:	4620      	mov	r0, r4
        tmp = 0x80;
 80073e2:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80073e6:	f000 fe0f 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80073ea:	2800      	cmp	r0, #0
 80073ec:	f47f af58 	bne.w	80072a0 <OV5640_SetColorEffect+0x70>
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80073f0:	2301      	movs	r3, #1
 80073f2:	f10d 0207 	add.w	r2, sp, #7
 80073f6:	f245 5184 	movw	r1, #21892	; 0x5584
 80073fa:	4620      	mov	r0, r4
        tmp = 0x80;
 80073fc:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007400:	f000 fe02 	bl	8008008 <ov5640_write_reg>
      if (ret != OV5640_OK)
 8007404:	3800      	subs	r0, #0
 8007406:	bf18      	it	ne
 8007408:	2001      	movne	r0, #1
 800740a:	4240      	negs	r0, r0
}
 800740c:	b003      	add	sp, #12
 800740e:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 8007410:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007412:	2301      	movs	r3, #1
 8007414:	f10d 0207 	add.w	r2, sp, #7
 8007418:	4620      	mov	r0, r4
      tmp = 0xFF;
 800741a:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800741e:	f245 0101 	movw	r1, #20481	; 0x5001
 8007422:	f000 fdf1 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007426:	2800      	cmp	r0, #0
 8007428:	f47f af3a 	bne.w	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 800742c:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800742e:	2301      	movs	r3, #1
 8007430:	f10d 0207 	add.w	r2, sp, #7
 8007434:	4620      	mov	r0, r4
        tmp = 0x18;
 8007436:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800743a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800743e:	f000 fde3 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007442:	2800      	cmp	r0, #0
 8007444:	f47f af2c 	bne.w	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8007448:	2140      	movs	r1, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800744a:	2301      	movs	r3, #1
 800744c:	f10d 0207 	add.w	r2, sp, #7
 8007450:	4620      	mov	r0, r4
        tmp = 0x40;
 8007452:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007456:	f245 5183 	movw	r1, #21891	; 0x5583
 800745a:	f000 fdd5 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800745e:	2800      	cmp	r0, #0
 8007460:	f47f af1e 	bne.w	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 8007464:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007468:	2301      	movs	r3, #1
 800746a:	f10d 0207 	add.w	r2, sp, #7
 800746e:	f245 5184 	movw	r1, #21892	; 0x5584
 8007472:	e014      	b.n	800749e <OV5640_SetColorEffect+0x26e>
      tmp = 0xFF;
 8007474:	20ff      	movs	r0, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007476:	2301      	movs	r3, #1
 8007478:	f10d 0207 	add.w	r2, sp, #7
 800747c:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8007480:	f88d 0007 	strb.w	r0, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007484:	4620      	mov	r0, r4
 8007486:	f000 fdbf 	bl	8008008 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800748a:	2800      	cmp	r0, #0
 800748c:	f47f af08 	bne.w	80072a0 <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8007490:	f04f 0c40 	mov.w	ip, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007494:	2301      	movs	r3, #1
 8007496:	f10d 0207 	add.w	r2, sp, #7
 800749a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800749e:	4620      	mov	r0, r4
        tmp = 0x00;
 80074a0:	f88d c007 	strb.w	ip, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80074a4:	f000 fdb0 	bl	8008008 <ov5640_write_reg>
      if (ret != OV5640_OK)
 80074a8:	3800      	subs	r0, #0
 80074aa:	bf18      	it	ne
 80074ac:	2001      	movne	r0, #1
 80074ae:	4240      	negs	r0, r0
}
 80074b0:	b003      	add	sp, #12
 80074b2:	bd30      	pop	{r4, r5, pc}

080074b4 <OV5640_SetBrightness>:
{
 80074b4:	b530      	push	{r4, r5, lr}
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80074b6:	4a2c      	ldr	r2, [pc, #176]	; (8007568 <OV5640_SetBrightness+0xb4>)
{
 80074b8:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80074ba:	f100 0418 	add.w	r4, r0, #24
{
 80074be:	460d      	mov	r5, r1
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80074c0:	ab01      	add	r3, sp, #4
 80074c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80074c4:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 80074c6:	21ff      	movs	r1, #255	; 0xff
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80074c8:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80074ca:	4620      	mov	r0, r4
 80074cc:	2301      	movs	r3, #1
  tmp = 0xFF;
 80074ce:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80074d2:	f10d 0203 	add.w	r2, sp, #3
 80074d6:	f245 0101 	movw	r1, #20481	; 0x5001
 80074da:	f000 fd95 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80074de:	b108      	cbz	r0, 80074e4 <OV5640_SetBrightness+0x30>
}
 80074e0:	b005      	add	sp, #20
 80074e2:	bd30      	pop	{r4, r5, pc}
    tmp = brightness_level[Level + 4];
 80074e4:	f105 0210 	add.w	r2, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 80074e8:	2301      	movs	r3, #1
 80074ea:	f245 5187 	movw	r1, #21895	; 0x5587
 80074ee:	4620      	mov	r0, r4
    tmp = brightness_level[Level + 4];
 80074f0:	446a      	add	r2, sp
 80074f2:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80074f6:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 80074fa:	f10d 0203 	add.w	r2, sp, #3
 80074fe:	f000 fd83 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007502:	2800      	cmp	r0, #0
 8007504:	d1ec      	bne.n	80074e0 <OV5640_SetBrightness+0x2c>
    tmp = 0x04;
 8007506:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007508:	2301      	movs	r3, #1
 800750a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800750e:	4620      	mov	r0, r4
    tmp = 0x04;
 8007510:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007514:	f10d 0203 	add.w	r2, sp, #3
 8007518:	f000 fd76 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800751c:	2800      	cmp	r0, #0
 800751e:	d1df      	bne.n	80074e0 <OV5640_SetBrightness+0x2c>
    if (Level < 0)
 8007520:	2d00      	cmp	r5, #0
 8007522:	db10      	blt.n	8007546 <OV5640_SetBrightness+0x92>
      tmp = 0x09;
 8007524:	2509      	movs	r5, #9
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8007526:	2301      	movs	r3, #1
 8007528:	f10d 0203 	add.w	r2, sp, #3
 800752c:	f245 5188 	movw	r1, #21896	; 0x5588
 8007530:	4620      	mov	r0, r4
      tmp = 0x09;
 8007532:	f88d 5003 	strb.w	r5, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8007536:	f000 fd67 	bl	8008008 <ov5640_write_reg>
 800753a:	3800      	subs	r0, #0
 800753c:	bf18      	it	ne
 800753e:	2001      	movne	r0, #1
 8007540:	4240      	negs	r0, r0
}
 8007542:	b005      	add	sp, #20
 8007544:	bd30      	pop	{r4, r5, pc}
      tmp = 0x01;
 8007546:	2301      	movs	r3, #1
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8007548:	f10d 0203 	add.w	r2, sp, #3
 800754c:	f245 5188 	movw	r1, #21896	; 0x5588
 8007550:	4620      	mov	r0, r4
      tmp = 0x01;
 8007552:	f88d 3003 	strb.w	r3, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8007556:	f000 fd57 	bl	8008008 <ov5640_write_reg>
 800755a:	3800      	subs	r0, #0
 800755c:	bf18      	it	ne
 800755e:	2001      	movne	r0, #1
 8007560:	4240      	negs	r0, r0
}
 8007562:	b005      	add	sp, #20
 8007564:	bd30      	pop	{r4, r5, pc}
 8007566:	bf00      	nop
 8007568:	080257a0 	.word	0x080257a0

0800756c <OV5640_SetSaturation>:
{
 800756c:	b530      	push	{r4, r5, lr}
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 800756e:	4a29      	ldr	r2, [pc, #164]	; (8007614 <OV5640_SetSaturation+0xa8>)
{
 8007570:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007572:	f100 0418 	add.w	r4, r0, #24
{
 8007576:	460d      	mov	r5, r1
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8007578:	ab01      	add	r3, sp, #4
 800757a:	ca07      	ldmia	r2, {r0, r1, r2}
 800757c:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 800757e:	21ff      	movs	r1, #255	; 0xff
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8007580:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007582:	4620      	mov	r0, r4
 8007584:	2301      	movs	r3, #1
  tmp = 0xFF;
 8007586:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800758a:	f10d 0203 	add.w	r2, sp, #3
 800758e:	f245 0101 	movw	r1, #20481	; 0x5001
 8007592:	f000 fd39 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007596:	b118      	cbz	r0, 80075a0 <OV5640_SetSaturation+0x34>
    ret = OV5640_ERROR;
 8007598:	f04f 30ff 	mov.w	r0, #4294967295
}
 800759c:	b005      	add	sp, #20
 800759e:	bd30      	pop	{r4, r5, pc}
    tmp = saturation_level[Level + 4];
 80075a0:	f105 0310 	add.w	r3, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80075a4:	f10d 0203 	add.w	r2, sp, #3
 80075a8:	4620      	mov	r0, r4
    tmp = saturation_level[Level + 4];
 80075aa:	eb0d 0103 	add.w	r1, sp, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80075ae:	2301      	movs	r3, #1
    tmp = saturation_level[Level + 4];
 80075b0:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 80075b4:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80075b8:	f245 5183 	movw	r1, #21891	; 0x5583
 80075bc:	f000 fd24 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d1e9      	bne.n	8007598 <OV5640_SetSaturation+0x2c>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80075c4:	2301      	movs	r3, #1
 80075c6:	f10d 0203 	add.w	r2, sp, #3
 80075ca:	f245 5184 	movw	r1, #21892	; 0x5584
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 fd1a 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d1df      	bne.n	8007598 <OV5640_SetSaturation+0x2c>
    tmp = 0x02;
 80075d8:	2102      	movs	r1, #2
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80075da:	2301      	movs	r3, #1
 80075dc:	f10d 0203 	add.w	r2, sp, #3
 80075e0:	4620      	mov	r0, r4
    tmp = 0x02;
 80075e2:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80075e6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80075ea:	f000 fd0d 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d1d2      	bne.n	8007598 <OV5640_SetSaturation+0x2c>
    tmp = 0x41;
 80075f2:	2541      	movs	r5, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80075f4:	2301      	movs	r3, #1
 80075f6:	f10d 0203 	add.w	r2, sp, #3
 80075fa:	f245 5188 	movw	r1, #21896	; 0x5588
 80075fe:	4620      	mov	r0, r4
    tmp = 0x41;
 8007600:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007604:	f000 fd00 	bl	8008008 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8007608:	3800      	subs	r0, #0
 800760a:	bf18      	it	ne
 800760c:	2001      	movne	r0, #1
 800760e:	4240      	negs	r0, r0
}
 8007610:	b005      	add	sp, #20
 8007612:	bd30      	pop	{r4, r5, pc}
 8007614:	080257ac 	.word	0x080257ac

08007618 <OV5640_SetContrast>:
{
 8007618:	b530      	push	{r4, r5, lr}
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800761a:	4a29      	ldr	r2, [pc, #164]	; (80076c0 <OV5640_SetContrast+0xa8>)
{
 800761c:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800761e:	f100 0418 	add.w	r4, r0, #24
{
 8007622:	460d      	mov	r5, r1
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8007624:	ab01      	add	r3, sp, #4
 8007626:	ca07      	ldmia	r2, {r0, r1, r2}
 8007628:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 800762a:	21ff      	movs	r1, #255	; 0xff
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800762c:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800762e:	4620      	mov	r0, r4
 8007630:	2301      	movs	r3, #1
  tmp = 0xFF;
 8007632:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007636:	f10d 0203 	add.w	r2, sp, #3
 800763a:	f245 0101 	movw	r1, #20481	; 0x5001
 800763e:	f000 fce3 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007642:	b118      	cbz	r0, 800764c <OV5640_SetContrast+0x34>
    ret = OV5640_ERROR;
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007648:	b005      	add	sp, #20
 800764a:	bd30      	pop	{r4, r5, pc}
    tmp = 0x04;
 800764c:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800764e:	2301      	movs	r3, #1
 8007650:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007654:	4620      	mov	r0, r4
    tmp = 0x04;
 8007656:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800765a:	f10d 0203 	add.w	r2, sp, #3
 800765e:	f000 fcd3 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007662:	2800      	cmp	r0, #0
 8007664:	d1ee      	bne.n	8007644 <OV5640_SetContrast+0x2c>
    tmp = contrast_level[Level + 4];
 8007666:	f105 0310 	add.w	r3, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 800766a:	f10d 0203 	add.w	r2, sp, #3
 800766e:	4620      	mov	r0, r4
    tmp = contrast_level[Level + 4];
 8007670:	eb0d 0103 	add.w	r1, sp, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8007674:	2301      	movs	r3, #1
    tmp = contrast_level[Level + 4];
 8007676:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800767a:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 800767e:	f245 5186 	movw	r1, #21894	; 0x5586
 8007682:	f000 fcc1 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007686:	2800      	cmp	r0, #0
 8007688:	d1dc      	bne.n	8007644 <OV5640_SetContrast+0x2c>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 800768a:	2301      	movs	r3, #1
 800768c:	f10d 0203 	add.w	r2, sp, #3
 8007690:	f245 5185 	movw	r1, #21893	; 0x5585
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fcb7 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800769a:	2800      	cmp	r0, #0
 800769c:	d1d2      	bne.n	8007644 <OV5640_SetContrast+0x2c>
    tmp = 0x41;
 800769e:	2541      	movs	r5, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80076a0:	2301      	movs	r3, #1
 80076a2:	f10d 0203 	add.w	r2, sp, #3
 80076a6:	f245 5188 	movw	r1, #21896	; 0x5588
 80076aa:	4620      	mov	r0, r4
    tmp = 0x41;
 80076ac:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80076b0:	f000 fcaa 	bl	8008008 <ov5640_write_reg>
  if (ret != OV5640_OK)
 80076b4:	3800      	subs	r0, #0
 80076b6:	bf18      	it	ne
 80076b8:	2001      	movne	r0, #1
 80076ba:	4240      	negs	r0, r0
}
 80076bc:	b005      	add	sp, #20
 80076be:	bd30      	pop	{r4, r5, pc}
 80076c0:	0805fc30 	.word	0x0805fc30

080076c4 <OV5640_SetHueDegree>:
{
 80076c4:	b570      	push	{r4, r5, r6, lr}
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80076c6:	4b33      	ldr	r3, [pc, #204]	; (8007794 <OV5640_SetHueDegree+0xd0>)
{
 80076c8:	b08a      	sub	sp, #40	; 0x28
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80076ca:	f100 0418 	add.w	r4, r0, #24
{
 80076ce:	460d      	mov	r5, r1
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80076d0:	f103 0c0c 	add.w	ip, r3, #12
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80076d4:	f10d 0e04 	add.w	lr, sp, #4
 80076d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80076dc:	ab04      	add	r3, sp, #16
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80076de:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80076e2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80076e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 80076ea:	4b2b      	ldr	r3, [pc, #172]	; (8007798 <OV5640_SetHueDegree+0xd4>)
 80076ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076f0:	ab0a      	add	r3, sp, #40	; 0x28
 80076f2:	e903 0007 	stmdb	r3, {r0, r1, r2}
  tmp = 0xFF;
 80076f6:	22ff      	movs	r2, #255	; 0xff
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80076f8:	2301      	movs	r3, #1
 80076fa:	f245 0101 	movw	r1, #20481	; 0x5001
 80076fe:	4620      	mov	r0, r4
  tmp = 0xFF;
 8007700:	f88d 2003 	strb.w	r2, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007704:	f10d 0203 	add.w	r2, sp, #3
 8007708:	f000 fc7e 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800770c:	b118      	cbz	r0, 8007716 <OV5640_SetHueDegree+0x52>
    ret = OV5640_ERROR;
 800770e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007712:	b00a      	add	sp, #40	; 0x28
 8007714:	bd70      	pop	{r4, r5, r6, pc}
    tmp = 0x01;
 8007716:	2601      	movs	r6, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007718:	f10d 0203 	add.w	r2, sp, #3
 800771c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007720:	4620      	mov	r0, r4
 8007722:	4633      	mov	r3, r6
    tmp = 0x01;
 8007724:	f88d 6003 	strb.w	r6, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007728:	f000 fc6e 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800772c:	2800      	cmp	r0, #0
 800772e:	d1ee      	bne.n	800770e <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl1[Degree + 6];
 8007730:	f105 032e 	add.w	r3, r5, #46	; 0x2e
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8007734:	f10d 0203 	add.w	r2, sp, #3
 8007738:	f245 5181 	movw	r1, #21889	; 0x5581
 800773c:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl1[Degree + 6];
 800773e:	eb0d 0503 	add.w	r5, sp, r3
 8007742:	f815 3c24 	ldrb.w	r3, [r5, #-36]
 8007746:	f88d 3003 	strb.w	r3, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 800774a:	4633      	mov	r3, r6
 800774c:	f000 fc5c 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007750:	2800      	cmp	r0, #0
 8007752:	d1dc      	bne.n	800770e <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl2[Degree + 6];
 8007754:	f815 3c18 	ldrb.w	r3, [r5, #-24]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8007758:	f10d 0203 	add.w	r2, sp, #3
 800775c:	f245 5182 	movw	r1, #21890	; 0x5582
 8007760:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl2[Degree + 6];
 8007762:	f88d 3003 	strb.w	r3, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8007766:	4633      	mov	r3, r6
 8007768:	f000 fc4e 	bl	8008008 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800776c:	2800      	cmp	r0, #0
 800776e:	d1ce      	bne.n	800770e <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl8[Degree + 6];
 8007770:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007774:	4633      	mov	r3, r6
 8007776:	f10d 0203 	add.w	r2, sp, #3
 800777a:	f245 5188 	movw	r1, #21896	; 0x5588
 800777e:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl8[Degree + 6];
 8007780:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007784:	f000 fc40 	bl	8008008 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8007788:	3800      	subs	r0, #0
 800778a:	bf18      	it	ne
 800778c:	2001      	movne	r0, #1
 800778e:	4240      	negs	r0, r0
}
 8007790:	b00a      	add	sp, #40	; 0x28
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	080257b8 	.word	0x080257b8
 8007798:	0805fc3c 	.word	0x0805fc3c

0800779c <OV5640_SetPixelFormat>:
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800779c:	2902      	cmp	r1, #2
{
 800779e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a2:	4604      	mov	r4, r0
 80077a4:	b082      	sub	sp, #8
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80077a6:	d902      	bls.n	80077ae <OV5640_SetPixelFormat+0x12>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80077a8:	1fcb      	subs	r3, r1, #7
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d82a      	bhi.n	8007804 <OV5640_SetPixelFormat+0x68>
    switch (PixelFormat)
 80077ae:	3901      	subs	r1, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80077b0:	f104 0718 	add.w	r7, r4, #24
 80077b4:	f10d 0507 	add.w	r5, sp, #7
    switch (PixelFormat)
 80077b8:	2907      	cmp	r1, #7
 80077ba:	d829      	bhi.n	8007810 <OV5640_SetPixelFormat+0x74>
 80077bc:	e8df f001 	tbb	[pc, r1]
 80077c0:	28287904 	.word	0x28287904
 80077c4:	a0522828 	.word	0xa0522828
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80077c8:	2223      	movs	r2, #35	; 0x23
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80077ca:	2301      	movs	r3, #1
 80077cc:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 80077d0:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80077d2:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80077d6:	462a      	mov	r2, r5
 80077d8:	f000 fc16 	bl	8008008 <ov5640_write_reg>
 80077dc:	b990      	cbnz	r0, 8007804 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 80077de:	6963      	ldr	r3, [r4, #20]
 80077e0:	4798      	blx	r3
 80077e2:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80077e4:	6963      	ldr	r3, [r4, #20]
 80077e6:	4798      	blx	r3
 80077e8:	4286      	cmp	r6, r0
 80077ea:	d0fb      	beq.n	80077e4 <OV5640_SetPixelFormat+0x48>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80077ec:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80077ee:	462a      	mov	r2, r5
 80077f0:	4638      	mov	r0, r7
 80077f2:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80077f6:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80077fa:	f000 fc05 	bl	8008008 <ov5640_write_reg>
 80077fe:	2800      	cmp	r0, #0
 8007800:	f000 80fa 	beq.w	80079f8 <OV5640_SetPixelFormat+0x25c>
    ret = OV5640_ERROR;
 8007804:	f04f 36ff 	mov.w	r6, #4294967295
}
 8007808:	4630      	mov	r0, r6
 800780a:	b002      	add	sp, #8
 800780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8007810:	226f      	movs	r2, #111	; 0x6f
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007812:	2301      	movs	r3, #1
 8007814:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8007818:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800781a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 800781e:	462a      	mov	r2, r5
 8007820:	f000 fbf2 	bl	8008008 <ov5640_write_reg>
 8007824:	2800      	cmp	r0, #0
 8007826:	d1ed      	bne.n	8007804 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 8007828:	6963      	ldr	r3, [r4, #20]
 800782a:	4798      	blx	r3
 800782c:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800782e:	6963      	ldr	r3, [r4, #20]
 8007830:	4798      	blx	r3
 8007832:	42b0      	cmp	r0, r6
 8007834:	d0fb      	beq.n	800782e <OV5640_SetPixelFormat+0x92>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8007836:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007838:	462a      	mov	r2, r5
 800783a:	4638      	mov	r0, r7
 800783c:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8007840:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007844:	f000 fbe0 	bl	8008008 <ov5640_write_reg>
 8007848:	2800      	cmp	r0, #0
 800784a:	d1db      	bne.n	8007804 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 800784c:	6963      	ldr	r3, [r4, #20]
 800784e:	4798      	blx	r3
 8007850:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007852:	6963      	ldr	r3, [r4, #20]
 8007854:	4798      	blx	r3
 8007856:	4285      	cmp	r5, r0
 8007858:	d0fb      	beq.n	8007852 <OV5640_SetPixelFormat+0xb6>
{
 800785a:	2600      	movs	r6, #0
}
 800785c:	4630      	mov	r0, r6
 800785e:	b002      	add	sp, #8
 8007860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8007864:	2210      	movs	r2, #16
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8007866:	2301      	movs	r3, #1
 8007868:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 800786c:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800786e:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8007872:	462a      	mov	r2, r5
 8007874:	f000 fbc8 	bl	8008008 <ov5640_write_reg>
 8007878:	2800      	cmp	r0, #0
 800787a:	d1c3      	bne.n	8007804 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 800787c:	6963      	ldr	r3, [r4, #20]
 800787e:	4798      	blx	r3
 8007880:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007882:	6963      	ldr	r3, [r4, #20]
 8007884:	4798      	blx	r3
 8007886:	42b0      	cmp	r0, r6
 8007888:	d0fb      	beq.n	8007882 <OV5640_SetPixelFormat+0xe6>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800788a:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800788c:	2301      	movs	r3, #1
 800788e:	462a      	mov	r2, r5
 8007890:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8007892:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8007896:	f245 011f 	movw	r1, #20511	; 0x501f
 800789a:	f000 fbb5 	bl	8008008 <ov5640_write_reg>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d1b0      	bne.n	8007804 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 80078a2:	6963      	ldr	r3, [r4, #20]
 80078a4:	4798      	blx	r3
 80078a6:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80078a8:	6963      	ldr	r3, [r4, #20]
 80078aa:	4798      	blx	r3
 80078ac:	4285      	cmp	r5, r0
 80078ae:	d0fb      	beq.n	80078a8 <OV5640_SetPixelFormat+0x10c>
 80078b0:	e7d3      	b.n	800785a <OV5640_SetPixelFormat+0xbe>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80078b2:	2230      	movs	r2, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80078b4:	2301      	movs	r3, #1
 80078b6:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 80078ba:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80078bc:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80078c0:	462a      	mov	r2, r5
 80078c2:	f000 fba1 	bl	8008008 <ov5640_write_reg>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d19c      	bne.n	8007804 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 80078ca:	6963      	ldr	r3, [r4, #20]
 80078cc:	4798      	blx	r3
 80078ce:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80078d0:	6963      	ldr	r3, [r4, #20]
 80078d2:	4798      	blx	r3
 80078d4:	42b0      	cmp	r0, r6
 80078d6:	d0fb      	beq.n	80078d0 <OV5640_SetPixelFormat+0x134>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80078d8:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80078da:	2301      	movs	r3, #1
 80078dc:	462a      	mov	r2, r5
 80078de:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80078e0:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80078e4:	f245 011f 	movw	r1, #20511	; 0x501f
 80078e8:	f000 fb8e 	bl	8008008 <ov5640_write_reg>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d189      	bne.n	8007804 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 80078f0:	6963      	ldr	r3, [r4, #20]
 80078f2:	4798      	blx	r3
 80078f4:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80078f6:	6963      	ldr	r3, [r4, #20]
 80078f8:	4798      	blx	r3
 80078fa:	4285      	cmp	r5, r0
 80078fc:	d0fb      	beq.n	80078f6 <OV5640_SetPixelFormat+0x15a>
 80078fe:	e7ac      	b.n	800785a <OV5640_SetPixelFormat+0xbe>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8007900:	2230      	movs	r2, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8007902:	2301      	movs	r3, #1
 8007904:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8007908:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800790a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 800790e:	462a      	mov	r2, r5
 8007910:	f000 fb7a 	bl	8008008 <ov5640_write_reg>
 8007914:	2800      	cmp	r0, #0
 8007916:	d053      	beq.n	80079c0 <OV5640_SetPixelFormat+0x224>
              ret = OV5640_ERROR;
 8007918:	f04f 36ff 	mov.w	r6, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800791c:	2301      	movs	r3, #1
 800791e:	462a      	mov	r2, r5
 8007920:	f643 0121 	movw	r1, #14369	; 0x3821
 8007924:	4638      	mov	r0, r7
 8007926:	f000 fb67 	bl	8007ff8 <ov5640_read_reg>
 800792a:	2800      	cmp	r0, #0
 800792c:	f47f af6a 	bne.w	8007804 <OV5640_SetPixelFormat+0x68>
        tmp |= (1 << 5);
 8007930:	f89d 2007 	ldrb.w	r2, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8007934:	2301      	movs	r3, #1
 8007936:	f643 0121 	movw	r1, #14369	; 0x3821
 800793a:	4638      	mov	r0, r7
        tmp |= (1 << 5);
 800793c:	f042 0220 	orr.w	r2, r2, #32
 8007940:	f88d 2007 	strb.w	r2, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8007944:	462a      	mov	r2, r5
 8007946:	f000 fb5f 	bl	8008008 <ov5640_write_reg>
 800794a:	2800      	cmp	r0, #0
 800794c:	f47f af5a 	bne.w	8007804 <OV5640_SetPixelFormat+0x68>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8007950:	2301      	movs	r3, #1
 8007952:	462a      	mov	r2, r5
 8007954:	f243 0102 	movw	r1, #12290	; 0x3002
 8007958:	4638      	mov	r0, r7
 800795a:	f000 fb4d 	bl	8007ff8 <ov5640_read_reg>
 800795e:	2800      	cmp	r0, #0
 8007960:	f47f af50 	bne.w	8007804 <OV5640_SetPixelFormat+0x68>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8007964:	f89d 2007 	ldrb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8007968:	2301      	movs	r3, #1
 800796a:	f243 0102 	movw	r1, #12290	; 0x3002
 800796e:	4638      	mov	r0, r7
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8007970:	f022 021c 	bic.w	r2, r2, #28
 8007974:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8007978:	462a      	mov	r2, r5
 800797a:	f000 fb45 	bl	8008008 <ov5640_write_reg>
 800797e:	2800      	cmp	r0, #0
 8007980:	f47f af40 	bne.w	8007804 <OV5640_SetPixelFormat+0x68>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8007984:	2301      	movs	r3, #1
 8007986:	462a      	mov	r2, r5
 8007988:	f243 0106 	movw	r1, #12294	; 0x3006
 800798c:	4638      	mov	r0, r7
 800798e:	f000 fb33 	bl	8007ff8 <ov5640_read_reg>
 8007992:	2800      	cmp	r0, #0
 8007994:	f47f af36 	bne.w	8007804 <OV5640_SetPixelFormat+0x68>
                tmp |= ((1 << 5) | (1 << 3));
 8007998:	f89d 1007 	ldrb.w	r1, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800799c:	2301      	movs	r3, #1
 800799e:	462a      	mov	r2, r5
 80079a0:	4638      	mov	r0, r7
                tmp |= ((1 << 5) | (1 << 3));
 80079a2:	f041 0128 	orr.w	r1, r1, #40	; 0x28
 80079a6:	f88d 1007 	strb.w	r1, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 80079aa:	f243 0106 	movw	r1, #12294	; 0x3006
 80079ae:	f000 fb2b 	bl	8008008 <ov5640_write_reg>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	f47f af26 	bne.w	8007804 <OV5640_SetPixelFormat+0x68>
}
 80079b8:	4630      	mov	r0, r6
 80079ba:	b002      	add	sp, #8
 80079bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tickstart = pObj->IO.GetTick();
 80079c0:	6963      	ldr	r3, [r4, #20]
 80079c2:	4798      	blx	r3
 80079c4:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80079c6:	6963      	ldr	r3, [r4, #20]
 80079c8:	4798      	blx	r3
 80079ca:	42b0      	cmp	r0, r6
 80079cc:	d0fb      	beq.n	80079c6 <OV5640_SetPixelFormat+0x22a>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80079ce:	2200      	movs	r2, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80079d0:	2301      	movs	r3, #1
 80079d2:	f245 011f 	movw	r1, #20511	; 0x501f
 80079d6:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80079d8:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80079dc:	462a      	mov	r2, r5
 80079de:	f000 fb13 	bl	8008008 <ov5640_write_reg>
 80079e2:	4606      	mov	r6, r0
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d197      	bne.n	8007918 <OV5640_SetPixelFormat+0x17c>
  tickstart = pObj->IO.GetTick();
 80079e8:	6963      	ldr	r3, [r4, #20]
 80079ea:	4798      	blx	r3
 80079ec:	4680      	mov	r8, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80079ee:	6963      	ldr	r3, [r4, #20]
 80079f0:	4798      	blx	r3
 80079f2:	4580      	cmp	r8, r0
 80079f4:	d0fb      	beq.n	80079ee <OV5640_SetPixelFormat+0x252>
 80079f6:	e791      	b.n	800791c <OV5640_SetPixelFormat+0x180>
  tickstart = pObj->IO.GetTick();
 80079f8:	6963      	ldr	r3, [r4, #20]
 80079fa:	4798      	blx	r3
 80079fc:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80079fe:	6963      	ldr	r3, [r4, #20]
 8007a00:	4798      	blx	r3
 8007a02:	4285      	cmp	r5, r0
 8007a04:	d0fb      	beq.n	80079fe <OV5640_SetPixelFormat+0x262>
 8007a06:	e728      	b.n	800785a <OV5640_SetPixelFormat+0xbe>

08007a08 <OV5640_GetResolution>:
{
 8007a08:	b570      	push	{r4, r5, r6, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8007a0a:	f100 0418 	add.w	r4, r0, #24
{
 8007a0e:	b082      	sub	sp, #8
 8007a10:	460e      	mov	r6, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8007a12:	2301      	movs	r3, #1
 8007a14:	f10d 0207 	add.w	r2, sp, #7
 8007a18:	f643 0108 	movw	r1, #14344	; 0x3808
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 faeb 	bl	8007ff8 <ov5640_read_reg>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d150      	bne.n	8007ac8 <OV5640_GetResolution+0xc0>
    x_size = (uint16_t)tmp << 8U;
 8007a26:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f10d 0207 	add.w	r2, sp, #7
 8007a30:	f643 0109 	movw	r1, #14345	; 0x3809
 8007a34:	4620      	mov	r0, r4
    x_size = (uint16_t)tmp << 8U;
 8007a36:	022d      	lsls	r5, r5, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8007a38:	f000 fade 	bl	8007ff8 <ov5640_read_reg>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d143      	bne.n	8007ac8 <OV5640_GetResolution+0xc0>
      x_size |= tmp;
 8007a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8007a44:	f10d 0207 	add.w	r2, sp, #7
 8007a48:	f643 010a 	movw	r1, #14346	; 0x380a
 8007a4c:	4620      	mov	r0, r4
      x_size |= tmp;
 8007a4e:	431d      	orrs	r5, r3
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8007a50:	2301      	movs	r3, #1
 8007a52:	f000 fad1 	bl	8007ff8 <ov5640_read_reg>
 8007a56:	bbb8      	cbnz	r0, 8007ac8 <OV5640_GetResolution+0xc0>
        y_size = (uint16_t)tmp << 8U;
 8007a58:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f10d 0207 	add.w	r2, sp, #7
 8007a62:	f643 010b 	movw	r1, #14347	; 0x380b
        y_size = (uint16_t)tmp << 8U;
 8007a66:	021c      	lsls	r4, r3, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8007a68:	2301      	movs	r3, #1
 8007a6a:	f000 fac5 	bl	8007ff8 <ov5640_read_reg>
 8007a6e:	bb58      	cbnz	r0, 8007ac8 <OV5640_GetResolution+0xc0>
          y_size |= tmp;
 8007a70:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 8007a74:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
          y_size |= tmp;
 8007a78:	ea43 0304 	orr.w	r3, r3, r4
          if ((x_size == 800U) && (y_size == 480U))
 8007a7c:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8007a80:	fab2 f282 	clz	r2, r2
 8007a84:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8007a88:	d104      	bne.n	8007a94 <OV5640_GetResolution+0x8c>
 8007a8a:	b11a      	cbz	r2, 8007a94 <OV5640_GetResolution+0x8c>
            *Resolution = OV5640_R800x480;
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	6033      	str	r3, [r6, #0]
}
 8007a90:	b002      	add	sp, #8
 8007a92:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 8007a94:	f5b5 7f20 	cmp.w	r5, #640	; 0x280
 8007a98:	d104      	bne.n	8007aa4 <OV5640_GetResolution+0x9c>
 8007a9a:	b11a      	cbz	r2, 8007aa4 <OV5640_GetResolution+0x9c>
            *Resolution = OV5640_R640x480;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	6033      	str	r3, [r6, #0]
}
 8007aa0:	b002      	add	sp, #8
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 8007aa4:	f5b5 7ff0 	cmp.w	r5, #480	; 0x1e0
 8007aa8:	d106      	bne.n	8007ab8 <OV5640_GetResolution+0xb0>
 8007aaa:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8007aae:	d103      	bne.n	8007ab8 <OV5640_GetResolution+0xb0>
            *Resolution = OV5640_R480x272;
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	6033      	str	r3, [r6, #0]
}
 8007ab4:	b002      	add	sp, #8
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 320U) && (y_size == 240U))
 8007ab8:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 8007abc:	d108      	bne.n	8007ad0 <OV5640_GetResolution+0xc8>
 8007abe:	2bf0      	cmp	r3, #240	; 0xf0
 8007ac0:	d106      	bne.n	8007ad0 <OV5640_GetResolution+0xc8>
            *Resolution = OV5640_R320x240;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	6033      	str	r3, [r6, #0]
            ret = OV5640_OK;
 8007ac6:	e7e3      	b.n	8007a90 <OV5640_GetResolution+0x88>
    ret = OV5640_ERROR;
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007acc:	b002      	add	sp, #8
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 160U) && (y_size == 120U))
 8007ad0:	2da0      	cmp	r5, #160	; 0xa0
 8007ad2:	d1f9      	bne.n	8007ac8 <OV5640_GetResolution+0xc0>
 8007ad4:	2b78      	cmp	r3, #120	; 0x78
 8007ad6:	d1f7      	bne.n	8007ac8 <OV5640_GetResolution+0xc0>
            *Resolution = OV5640_R160x120;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6033      	str	r3, [r6, #0]
  return ret;
 8007adc:	e7d8      	b.n	8007a90 <OV5640_GetResolution+0x88>
 8007ade:	bf00      	nop

08007ae0 <OV5640_ReadID>:
{
 8007ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pObj->IO.Init();
 8007ae2:	4606      	mov	r6, r0
{
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	460f      	mov	r7, r1
 8007ae8:	4604      	mov	r4, r0
  pObj->IO.Init();
 8007aea:	f856 3b18 	ldr.w	r3, [r6], #24
 8007aee:	4798      	blx	r3
  tmp = 0x80;
 8007af0:	2380      	movs	r3, #128	; 0x80
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8007af2:	f10d 0207 	add.w	r2, sp, #7
 8007af6:	f243 0108 	movw	r1, #12296	; 0x3008
  tmp = 0x80;
 8007afa:	f88d 3007 	strb.w	r3, [sp, #7]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8007afe:	4630      	mov	r0, r6
 8007b00:	2301      	movs	r3, #1
 8007b02:	f000 fa81 	bl	8008008 <ov5640_write_reg>
 8007b06:	bb28      	cbnz	r0, 8007b54 <OV5640_ReadID+0x74>
  tickstart = pObj->IO.GetTick();
 8007b08:	6963      	ldr	r3, [r4, #20]
 8007b0a:	4798      	blx	r3
 8007b0c:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007b0e:	6963      	ldr	r3, [r4, #20]
 8007b10:	4798      	blx	r3
 8007b12:	1b43      	subs	r3, r0, r5
 8007b14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007b18:	d3f9      	bcc.n	8007b0e <OV5640_ReadID+0x2e>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	f10d 0207 	add.w	r2, sp, #7
 8007b20:	f243 010a 	movw	r1, #12298	; 0x300a
 8007b24:	4630      	mov	r0, r6
 8007b26:	f000 fa67 	bl	8007ff8 <ov5640_read_reg>
 8007b2a:	b998      	cbnz	r0, 8007b54 <OV5640_ReadID+0x74>
      *Id = (uint32_t)tmp << 8U;
 8007b2c:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8007b30:	2301      	movs	r3, #1
 8007b32:	f10d 0207 	add.w	r2, sp, #7
 8007b36:	4630      	mov	r0, r6
      *Id = (uint32_t)tmp << 8U;
 8007b38:	0209      	lsls	r1, r1, #8
 8007b3a:	6039      	str	r1, [r7, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8007b3c:	f243 010b 	movw	r1, #12299	; 0x300b
 8007b40:	f000 fa5a 	bl	8007ff8 <ov5640_read_reg>
 8007b44:	b930      	cbnz	r0, 8007b54 <OV5640_ReadID+0x74>
        *Id |= tmp;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	603b      	str	r3, [r7, #0]
}
 8007b50:	b003      	add	sp, #12
 8007b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = OV5640_ERROR;
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	e7fa      	b.n	8007b50 <OV5640_ReadID+0x70>
 8007b5a:	bf00      	nop

08007b5c <OV5640_MirrorFlipConfig>:
{
 8007b5c:	b530      	push	{r4, r5, lr}
  uint8_t tmp3820 = 0;
 8007b5e:	2200      	movs	r2, #0
{
 8007b60:	b083      	sub	sp, #12
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007b62:	f100 0418 	add.w	r4, r0, #24
{
 8007b66:	460d      	mov	r5, r1
  uint8_t tmp3820 = 0;
 8007b68:	f88d 2006 	strb.w	r2, [sp, #6]
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f10d 0206 	add.w	r2, sp, #6
 8007b72:	f643 0120 	movw	r1, #14368	; 0x3820
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 fa3e 	bl	8007ff8 <ov5640_read_reg>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d160      	bne.n	8007c42 <OV5640_MirrorFlipConfig+0xe6>
    tmp3820 &= 0xF9U;
 8007b80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007b84:	f10d 0207 	add.w	r2, sp, #7
 8007b88:	f643 0121 	movw	r1, #14369	; 0x3821
 8007b8c:	4620      	mov	r0, r4
    tmp3820 &= 0xF9U;
 8007b8e:	f023 0306 	bic.w	r3, r3, #6
 8007b92:	f88d 3006 	strb.w	r3, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007b96:	2301      	movs	r3, #1
 8007b98:	f000 fa2e 	bl	8007ff8 <ov5640_read_reg>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d150      	bne.n	8007c42 <OV5640_MirrorFlipConfig+0xe6>
      tmp3821 &= 0xF9U;
 8007ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
      switch (Config)
 8007ba4:	2d02      	cmp	r5, #2
      tmp3821 &= 0xF9U;
 8007ba6:	f023 0306 	bic.w	r3, r3, #6
 8007baa:	f88d 3007 	strb.w	r3, [sp, #7]
      switch (Config)
 8007bae:	d01b      	beq.n	8007be8 <OV5640_MirrorFlipConfig+0x8c>
 8007bb0:	2d03      	cmp	r5, #3
 8007bb2:	d049      	beq.n	8007c48 <OV5640_MirrorFlipConfig+0xec>
 8007bb4:	2d01      	cmp	r5, #1
 8007bb6:	d034      	beq.n	8007c22 <OV5640_MirrorFlipConfig+0xc6>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f10d 0206 	add.w	r2, sp, #6
 8007bbe:	f643 0120 	movw	r1, #14368	; 0x3820
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f000 fa20 	bl	8008008 <ov5640_write_reg>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d13a      	bne.n	8007c42 <OV5640_MirrorFlipConfig+0xe6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f10d 0207 	add.w	r2, sp, #7
 8007bd2:	f643 0121 	movw	r1, #14369	; 0x3821
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 fa16 	bl	8008008 <ov5640_write_reg>
 8007bdc:	3800      	subs	r0, #0
 8007bde:	bf18      	it	ne
 8007be0:	2001      	movne	r0, #1
 8007be2:	4240      	negs	r0, r0
}
 8007be4:	b003      	add	sp, #12
 8007be6:	bd30      	pop	{r4, r5, pc}
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007be8:	2301      	movs	r3, #1
 8007bea:	f10d 0206 	add.w	r2, sp, #6
 8007bee:	f643 0120 	movw	r1, #14368	; 0x3820
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f000 fa08 	bl	8008008 <ov5640_write_reg>
 8007bf8:	bb18      	cbnz	r0, 8007c42 <OV5640_MirrorFlipConfig+0xe6>
            tmp3821 |= 0x06U;
 8007bfa:	f89d 5007 	ldrb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f10d 0207 	add.w	r2, sp, #7
 8007c04:	f643 0121 	movw	r1, #14369	; 0x3821
            tmp3821 |= 0x06U;
 8007c08:	f045 0506 	orr.w	r5, r5, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007c0c:	4620      	mov	r0, r4
            tmp3821 |= 0x06U;
 8007c0e:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007c12:	f000 f9f9 	bl	8008008 <ov5640_write_reg>
 8007c16:	3800      	subs	r0, #0
 8007c18:	bf18      	it	ne
 8007c1a:	2001      	movne	r0, #1
 8007c1c:	4240      	negs	r0, r0
}
 8007c1e:	b003      	add	sp, #12
 8007c20:	bd30      	pop	{r4, r5, pc}
          tmp3820 |= 0x06U;
 8007c22:	f89d 3006 	ldrb.w	r3, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007c26:	f10d 0206 	add.w	r2, sp, #6
 8007c2a:	f643 0120 	movw	r1, #14368	; 0x3820
 8007c2e:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 8007c30:	f043 0306 	orr.w	r3, r3, #6
 8007c34:	f88d 3006 	strb.w	r3, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007c38:	462b      	mov	r3, r5
 8007c3a:	f000 f9e5 	bl	8008008 <ov5640_write_reg>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d0c4      	beq.n	8007bcc <OV5640_MirrorFlipConfig+0x70>
    ret = OV5640_ERROR;
 8007c42:	f04f 30ff 	mov.w	r0, #4294967295
 8007c46:	e7cd      	b.n	8007be4 <OV5640_MirrorFlipConfig+0x88>
          tmp3820 |= 0x06U;
 8007c48:	f89d 1006 	ldrb.w	r1, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f10d 0206 	add.w	r2, sp, #6
 8007c52:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 8007c54:	f041 0106 	orr.w	r1, r1, #6
 8007c58:	f88d 1006 	strb.w	r1, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007c5c:	f643 0120 	movw	r1, #14368	; 0x3820
 8007c60:	f000 f9d2 	bl	8008008 <ov5640_write_reg>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d0c8      	beq.n	8007bfa <OV5640_MirrorFlipConfig+0x9e>
 8007c68:	e7eb      	b.n	8007c42 <OV5640_MirrorFlipConfig+0xe6>
 8007c6a:	bf00      	nop

08007c6c <OV5640_NightModeConfig>:
{
 8007c6c:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = 0;
 8007c6e:	2300      	movs	r3, #0
{
 8007c70:	b082      	sub	sp, #8
  if (Cmd == NIGHT_MODE_ENABLE)
 8007c72:	2901      	cmp	r1, #1
  uint8_t tmp = 0;
 8007c74:	f88d 3007 	strb.w	r3, [sp, #7]
  if (Cmd == NIGHT_MODE_ENABLE)
 8007c78:	d01e      	beq.n	8007cb8 <OV5640_NightModeConfig+0x4c>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8007c7a:	f100 0418 	add.w	r4, r0, #24
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8007c84:	f10d 0207 	add.w	r2, sp, #7
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 f9b5 	bl	8007ff8 <ov5640_read_reg>
 8007c8e:	b9f8      	cbnz	r0, 8007cd0 <OV5640_NightModeConfig+0x64>
      tmp &= 0xFBU;
 8007c90:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8007c94:	2301      	movs	r3, #1
 8007c96:	f10d 0207 	add.w	r2, sp, #7
 8007c9a:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
      tmp &= 0xFBU;
 8007c9e:	f025 0504 	bic.w	r5, r5, #4
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8007ca2:	4620      	mov	r0, r4
      tmp &= 0xFBU;
 8007ca4:	f88d 5007 	strb.w	r5, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8007ca8:	f000 f9ae 	bl	8008008 <ov5640_write_reg>
 8007cac:	3800      	subs	r0, #0
 8007cae:	bf18      	it	ne
 8007cb0:	2001      	movne	r0, #1
 8007cb2:	4240      	negs	r0, r0
}
 8007cb4:	b002      	add	sp, #8
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8007cb8:	f100 0418 	add.w	r4, r0, #24
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	f10d 0207 	add.w	r2, sp, #7
 8007cc4:	f243 0138 	movw	r1, #12344	; 0x3038
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 f99d 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007cce:	b118      	cbz	r0, 8007cd8 <OV5640_NightModeConfig+0x6c>
      ret = OV5640_ERROR;
 8007cd0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007cd4:	b002      	add	sp, #8
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8007cd8:	462b      	mov	r3, r5
 8007cda:	f10d 0207 	add.w	r2, sp, #7
 8007cde:	f243 0139 	movw	r1, #12345	; 0x3039
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 f990 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d1f1      	bne.n	8007cd0 <OV5640_NightModeConfig+0x64>
      tmp = 0x7C;
 8007cec:	227c      	movs	r2, #124	; 0x7c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8007cee:	462b      	mov	r3, r5
 8007cf0:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8007cf4:	4620      	mov	r0, r4
      tmp = 0x7C;
 8007cf6:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8007cfa:	f10d 0207 	add.w	r2, sp, #7
 8007cfe:	f000 f983 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d1e4      	bne.n	8007cd0 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8007d06:	462b      	mov	r3, r5
 8007d08:	f10d 0207 	add.w	r2, sp, #7
 8007d0c:	f643 2108 	movw	r1, #14856	; 0x3a08
 8007d10:	4620      	mov	r0, r4
      tmp = 0x01;
 8007d12:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8007d16:	f000 f977 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d1d8      	bne.n	8007cd0 <OV5640_NightModeConfig+0x64>
      tmp = 0x27;
 8007d1e:	2227      	movs	r2, #39	; 0x27
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8007d20:	462b      	mov	r3, r5
 8007d22:	f643 2109 	movw	r1, #14857	; 0x3a09
 8007d26:	4620      	mov	r0, r4
      tmp = 0x27;
 8007d28:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8007d2c:	f10d 0207 	add.w	r2, sp, #7
 8007d30:	f000 f96a 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d1cb      	bne.n	8007cd0 <OV5640_NightModeConfig+0x64>
      tmp = 0x00;
 8007d38:	f88d 0007 	strb.w	r0, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8007d3c:	462b      	mov	r3, r5
 8007d3e:	f10d 0207 	add.w	r2, sp, #7
 8007d42:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8007d46:	4620      	mov	r0, r4
 8007d48:	f000 f95e 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d1bf      	bne.n	8007cd0 <OV5640_NightModeConfig+0x64>
      tmp = 0xF6;
 8007d50:	22f6      	movs	r2, #246	; 0xf6
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8007d52:	462b      	mov	r3, r5
 8007d54:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8007d58:	4620      	mov	r0, r4
      tmp = 0xF6;
 8007d5a:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8007d5e:	f10d 0207 	add.w	r2, sp, #7
 8007d62:	f000 f951 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d1b2      	bne.n	8007cd0 <OV5640_NightModeConfig+0x64>
      tmp = 0x04;
 8007d6a:	2204      	movs	r2, #4
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8007d72:	4620      	mov	r0, r4
      tmp = 0x04;
 8007d74:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8007d78:	f10d 0207 	add.w	r2, sp, #7
 8007d7c:	f000 f944 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d1a5      	bne.n	8007cd0 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8007d84:	462b      	mov	r3, r5
 8007d86:	f10d 0207 	add.w	r2, sp, #7
 8007d8a:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 f93a 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d19b      	bne.n	8007cd0 <OV5640_NightModeConfig+0x64>
      tmp = 0x0B;
 8007d98:	260b      	movs	r6, #11
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	f10d 0207 	add.w	r2, sp, #7
 8007da0:	f643 2102 	movw	r1, #14850	; 0x3a02
 8007da4:	4620      	mov	r0, r4
      tmp = 0x0B;
 8007da6:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8007daa:	f000 f92d 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d18e      	bne.n	8007cd0 <OV5640_NightModeConfig+0x64>
      tmp = 0x88;
 8007db2:	2588      	movs	r5, #136	; 0x88
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8007db4:	2301      	movs	r3, #1
 8007db6:	f10d 0207 	add.w	r2, sp, #7
 8007dba:	f643 2103 	movw	r1, #14851	; 0x3a03
 8007dbe:	4620      	mov	r0, r4
      tmp = 0x88;
 8007dc0:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8007dc4:	f000 f920 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d181      	bne.n	8007cd0 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f10d 0207 	add.w	r2, sp, #7
 8007dd2:	f643 2114 	movw	r1, #14868	; 0x3a14
 8007dd6:	4620      	mov	r0, r4
      tmp = 0x0B;
 8007dd8:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8007ddc:	f000 f914 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007de0:	2800      	cmp	r0, #0
 8007de2:	f47f af75 	bne.w	8007cd0 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8007de6:	2301      	movs	r3, #1
 8007de8:	f10d 0207 	add.w	r2, sp, #7
 8007dec:	f643 2115 	movw	r1, #14869	; 0x3a15
 8007df0:	e757      	b.n	8007ca2 <OV5640_NightModeConfig+0x36>
 8007df2:	bf00      	nop

08007df4 <OV5640_ZoomConfig>:
{
 8007df4:	b530      	push	{r4, r5, lr}
 8007df6:	b083      	sub	sp, #12
 8007df8:	460d      	mov	r5, r1
 8007dfa:	4604      	mov	r4, r0
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8007dfc:	a901      	add	r1, sp, #4
 8007dfe:	f7ff fe03 	bl	8007a08 <OV5640_GetResolution>
 8007e02:	bb88      	cbnz	r0, 8007e68 <OV5640_ZoomConfig+0x74>
    if (zoom == OV5640_ZOOM_x1)
 8007e04:	2d44      	cmp	r5, #68	; 0x44
 8007e06:	d026      	beq.n	8007e56 <OV5640_ZoomConfig+0x62>
      switch (res)
 8007e08:	9b01      	ldr	r3, [sp, #4]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d91f      	bls.n	8007e4e <OV5640_ZoomConfig+0x5a>
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d100      	bne.n	8007e14 <OV5640_ZoomConfig+0x20>
          zoom = zoom >> 2U;
 8007e12:	08ad      	lsrs	r5, r5, #2
      tmp = 0x00;
 8007e14:	2200      	movs	r2, #0
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8007e16:	3418      	adds	r4, #24
 8007e18:	2301      	movs	r3, #1
 8007e1a:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x00;
 8007e1e:	f88d 2003 	strb.w	r2, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8007e22:	4620      	mov	r0, r4
 8007e24:	f10d 0203 	add.w	r2, sp, #3
 8007e28:	f000 f8ee 	bl	8008008 <ov5640_write_reg>
 8007e2c:	b9e0      	cbnz	r0, 8007e68 <OV5640_ZoomConfig+0x74>
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f10d 0203 	add.w	r2, sp, #3
 8007e34:	f245 6101 	movw	r1, #22017	; 0x5601
 8007e38:	4620      	mov	r0, r4
        tmp = (uint8_t)zoom;
 8007e3a:	f88d 5003 	strb.w	r5, [sp, #3]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8007e3e:	f000 f8e3 	bl	8008008 <ov5640_write_reg>
 8007e42:	3800      	subs	r0, #0
 8007e44:	bf18      	it	ne
 8007e46:	2001      	movne	r0, #1
 8007e48:	4240      	negs	r0, r0
}
 8007e4a:	b003      	add	sp, #12
 8007e4c:	bd30      	pop	{r4, r5, pc}
      switch (res)
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0e0      	beq.n	8007e14 <OV5640_ZoomConfig+0x20>
          zoom = zoom >> 1U;
 8007e52:	086d      	lsrs	r5, r5, #1
          break;
 8007e54:	e7de      	b.n	8007e14 <OV5640_ZoomConfig+0x20>
      tmp = 0x10;
 8007e56:	2510      	movs	r5, #16
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8007e58:	2301      	movs	r3, #1
 8007e5a:	f10d 0203 	add.w	r2, sp, #3
 8007e5e:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8007e62:	f104 0018 	add.w	r0, r4, #24
 8007e66:	e7e8      	b.n	8007e3a <OV5640_ZoomConfig+0x46>
    ret = OV5640_ERROR;
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	e7ed      	b.n	8007e4a <OV5640_ZoomConfig+0x56>
 8007e6e:	bf00      	nop

08007e70 <OV5640_Init>:
  if (pObj->IsInitialized == 0U)
 8007e70:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007e74:	bb8b      	cbnz	r3, 8007eda <OV5640_Init+0x6a>
    if ((Resolution > OV5640_R800x480) ||
 8007e76:	2904      	cmp	r1, #4
{
 8007e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e7c:	4689      	mov	r9, r1
 8007e7e:	b083      	sub	sp, #12
    if ((Resolution > OV5640_R800x480) ||
 8007e80:	d826      	bhi.n	8007ed0 <OV5640_Init+0x60>
 8007e82:	2a02      	cmp	r2, #2
 8007e84:	4607      	mov	r7, r0
 8007e86:	4690      	mov	r8, r2
 8007e88:	d902      	bls.n	8007e90 <OV5640_Init+0x20>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8007e8a:	1fd3      	subs	r3, r2, #7
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d81f      	bhi.n	8007ed0 <OV5640_Init+0x60>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8007e90:	f107 0618 	add.w	r6, r7, #24
 8007e94:	2400      	movs	r4, #0
 8007e96:	4d23      	ldr	r5, [pc, #140]	; (8007f24 <OV5640_Init+0xb4>)
          tmp = (uint8_t)OV5640_Common[index][1];
 8007e98:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8007e9c:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f10d 0206 	add.w	r2, sp, #6
          tmp = (uint8_t)OV5640_Common[index][1];
 8007ea6:	f8bc c002 	ldrh.w	ip, [ip, #2]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8007eaa:	4630      	mov	r0, r6
          tmp = (uint8_t)OV5640_Common[index][1];
 8007eac:	f88d c006 	strb.w	ip, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8007eb0:	f000 f8aa 	bl	8008008 <ov5640_write_reg>
 8007eb4:	b198      	cbz	r0, 8007ede <OV5640_Init+0x6e>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8007eb6:	2cfd      	cmp	r4, #253	; 0xfd
 8007eb8:	d00a      	beq.n	8007ed0 <OV5640_Init+0x60>
 8007eba:	2cfc      	cmp	r4, #252	; 0xfc
 8007ebc:	f104 0302 	add.w	r3, r4, #2
 8007ec0:	d102      	bne.n	8007ec8 <OV5640_Init+0x58>
 8007ec2:	e005      	b.n	8007ed0 <OV5640_Init+0x60>
 8007ec4:	2bfe      	cmp	r3, #254	; 0xfe
 8007ec6:	d003      	beq.n	8007ed0 <OV5640_Init+0x60>
 8007ec8:	2bfd      	cmp	r3, #253	; 0xfd
 8007eca:	f103 0302 	add.w	r3, r3, #2
 8007ece:	d1f9      	bne.n	8007ec4 <OV5640_Init+0x54>
          ret = OV5640_ERROR;
 8007ed0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007ed4:	b003      	add	sp, #12
 8007ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  int32_t ret = OV5640_OK;
 8007eda:	2000      	movs	r0, #0
}
 8007edc:	4770      	bx	lr
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8007ede:	3401      	adds	r4, #1
 8007ee0:	2cfe      	cmp	r4, #254	; 0xfe
 8007ee2:	d1d9      	bne.n	8007e98 <OV5640_Init+0x28>
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	f7ff f81c 	bl	8006f24 <OV5640_SetResolution>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d1ef      	bne.n	8007ed0 <OV5640_Init+0x60>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7ff fc52 	bl	800779c <OV5640_SetPixelFormat>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d1e9      	bne.n	8007ed0 <OV5640_Init+0x60>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8007efc:	2122      	movs	r1, #34	; 0x22
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8007efe:	2301      	movs	r3, #1
 8007f00:	f10d 0207 	add.w	r2, sp, #7
 8007f04:	4630      	mov	r0, r6
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8007f06:	f88d 1007 	strb.w	r1, [sp, #7]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8007f0a:	f244 7140 	movw	r1, #18240	; 0x4740
 8007f0e:	f000 f87b 	bl	8008008 <ov5640_write_reg>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d1dc      	bne.n	8007ed0 <OV5640_Init+0x60>
          pObj->IsInitialized = 1U;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
}
 8007f1c:	b003      	add	sp, #12
 8007f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f22:	bf00      	nop
 8007f24:	0805fc5c 	.word	0x0805fc5c

08007f28 <OV5640_RegisterBusIO>:
  if (pObj == NULL)
 8007f28:	b1d0      	cbz	r0, 8007f60 <OV5640_RegisterBusIO+0x38>
    pObj->IO.Address   = pIO->Address;
 8007f2a:	890a      	ldrh	r2, [r1, #8]
{
 8007f2c:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8007f2e:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8007f32:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8007f34:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007f38:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
    pObj->IO.GetTick   = pIO->GetTick;
 8007f3c:	6949      	ldr	r1, [r1, #20]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007f3e:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8007f40:	6141      	str	r1, [r0, #20]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8007f42:	4a09      	ldr	r2, [pc, #36]	; (8007f68 <OV5640_RegisterBusIO+0x40>)
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8007f44:	4909      	ldr	r1, [pc, #36]	; (8007f6c <OV5640_RegisterBusIO+0x44>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007f46:	60c4      	str	r4, [r0, #12]
    pObj->Ctx.handle   = pObj;
 8007f48:	6200      	str	r0, [r0, #32]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8007f4a:	e9c0 2106 	strd	r2, r1, [r0, #24]
    if (pObj->IO.Init != NULL)
 8007f4e:	b113      	cbz	r3, 8007f56 <OV5640_RegisterBusIO+0x2e>
}
 8007f50:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8007f54:	4718      	bx	r3
}
 8007f56:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	08006f15 	.word	0x08006f15
 8007f6c:	08006f05 	.word	0x08006f05

08007f70 <OV5640_ColorbarModeConfig>:
  uint8_t tmp = 0x40;
 8007f70:	2340      	movs	r3, #64	; 0x40
{
 8007f72:	b530      	push	{r4, r5, lr}
 8007f74:	b083      	sub	sp, #12
  uint8_t tmp = 0x40;
 8007f76:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8007f7a:	1e4b      	subs	r3, r1, #1
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d922      	bls.n	8007fc6 <OV5640_ColorbarModeConfig+0x56>
    tmp = 0x10;
 8007f80:	2110      	movs	r1, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007f82:	f100 0418 	add.w	r4, r0, #24
 8007f86:	2301      	movs	r3, #1
 8007f88:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0x10;
 8007f8c:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007f90:	4620      	mov	r0, r4
 8007f92:	f245 5184 	movw	r1, #21892	; 0x5584
 8007f96:	f000 f837 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	b118      	cbz	r0, 8007fa6 <OV5640_ColorbarModeConfig+0x36>
      ret = OV5640_ERROR;
 8007f9e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007fa2:	b003      	add	sp, #12
 8007fa4:	bd30      	pop	{r4, r5, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f10d 0207 	add.w	r2, sp, #7
 8007fac:	f245 013d 	movw	r1, #20541	; 0x503d
 8007fb0:	4620      	mov	r0, r4
      tmp = 0x00;
 8007fb2:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8007fb6:	f000 f827 	bl	8008008 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8007fba:	3800      	subs	r0, #0
 8007fbc:	bf18      	it	ne
 8007fbe:	2001      	movne	r0, #1
 8007fc0:	4240      	negs	r0, r0
}
 8007fc2:	b003      	add	sp, #12
 8007fc4:	bd30      	pop	{r4, r5, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007fc6:	f100 0418 	add.w	r4, r0, #24
 8007fca:	460d      	mov	r5, r1
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f10d 0207 	add.w	r2, sp, #7
 8007fd2:	f245 5184 	movw	r1, #21892	; 0x5584
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 f816 	bl	8008008 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d1de      	bne.n	8007f9e <OV5640_ColorbarModeConfig+0x2e>
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8007fe0:	2d02      	cmp	r5, #2
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8007fe2:	f04f 0301 	mov.w	r3, #1
 8007fe6:	f10d 0207 	add.w	r2, sp, #7
 8007fea:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8007fee:	bf0c      	ite	eq
 8007ff0:	258c      	moveq	r5, #140	; 0x8c
 8007ff2:	2580      	movne	r5, #128	; 0x80
 8007ff4:	e7dc      	b.n	8007fb0 <OV5640_ColorbarModeConfig+0x40>
 8007ff6:	bf00      	nop

08007ff8 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8007ff8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007ffa:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8007ffe:	46a4      	mov	ip, r4
}
 8008000:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008004:	4760      	bx	ip
 8008006:	bf00      	nop

08008008 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8008008:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800800a:	6804      	ldr	r4, [r0, #0]
 800800c:	6880      	ldr	r0, [r0, #8]
 800800e:	46a4      	mov	ip, r4
}
 8008010:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008014:	4760      	bx	ip
 8008016:	bf00      	nop

08008018 <OV9655_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8008018:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800801c:	2b01      	cmp	r3, #1
 800801e:	d102      	bne.n	8008026 <OV9655_DeInit+0xe>
  {
    pObj->IsInitialized = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV9655_OK;
}
 8008026:	2000      	movs	r0, #0
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop

0800802c <OV9655_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
}
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop

08008034 <OV9655_GetCapabilities>:
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
  int32_t ret;

  if(pObj == NULL)
 8008034:	b168      	cbz	r0, 8008052 <OV9655_GetCapabilities+0x1e>
  {
    ret = OV9655_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8008036:	2301      	movs	r3, #1
    Capabilities->Config_Contrast      = 1;
    Capabilities->Config_HueDegree     = 0;
 8008038:	2200      	movs	r2, #0
    Capabilities->Config_Brightness    = 1;
 800803a:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 0;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 0;

    ret = OV9655_OK;
 800803c:	4610      	mov	r0, r2
    Capabilities->Config_LightMode     = 0;
 800803e:	604a      	str	r2, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8008040:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 8008042:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8008044:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 0;
 8008046:	610a      	str	r2, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8008048:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 0;
 800804a:	620a      	str	r2, [r1, #32]
    Capabilities->Config_HueDegree     = 0;
 800804c:	e9c1 3205 	strd	r3, r2, [r1, #20]
    ret = OV9655_OK;
 8008050:	4770      	bx	lr
    ret = OV9655_ERROR;
 8008052:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8008056:	4770      	bx	lr

08008058 <OV9655_SetLightMode>:
{
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
}
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop

08008060 <OV9655_SetSaturation>:
{
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
}
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop

08008068 <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008068:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800806a:	6904      	ldr	r4, [r0, #16]
 800806c:	8900      	ldrh	r0, [r0, #8]
 800806e:	46a4      	mov	ip, r4
}
 8008070:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008074:	4760      	bx	ip
 8008076:	bf00      	nop

08008078 <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008078:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800807a:	68c4      	ldr	r4, [r0, #12]
 800807c:	8900      	ldrh	r0, [r0, #8]
 800807e:	46a4      	mov	ip, r4
}
 8008080:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008084:	4760      	bx	ip
 8008086:	bf00      	nop

08008088 <OV9655_SetResolution>:
  if (Resolution > OV9655_R640x480)
 8008088:	2903      	cmp	r1, #3
{
 800808a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808e:	b083      	sub	sp, #12
  if (Resolution > OV9655_R640x480)
 8008090:	d831      	bhi.n	80080f6 <OV9655_SetResolution+0x6e>
    switch (Resolution)
 8008092:	2901      	cmp	r1, #1
 8008094:	4604      	mov	r4, r0
 8008096:	d034      	beq.n	8008102 <OV9655_SetResolution+0x7a>
 8008098:	3902      	subs	r1, #2
 800809a:	2600      	movs	r6, #0
 800809c:	2901      	cmp	r1, #1
 800809e:	d864      	bhi.n	800816a <OV9655_SetResolution+0xe2>
 80080a0:	f10d 0a07 	add.w	sl, sp, #7
 80080a4:	f100 0918 	add.w	r9, r0, #24
 80080a8:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8008254 <OV9655_SetResolution+0x1cc>
          tmp = OV9655_VGA[index][1];
 80080ac:	eb0b 0046 	add.w	r0, fp, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80080b0:	2301      	movs	r3, #1
 80080b2:	4652      	mov	r2, sl
 80080b4:	f81b 1016 	ldrb.w	r1, [fp, r6, lsl #1]
          tmp = OV9655_VGA[index][1];
 80080b8:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80080ba:	4648      	mov	r0, r9
          tmp = OV9655_VGA[index][1];
 80080bc:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80080c0:	f000 fc60 	bl	8008984 <ov9655_write_reg>
 80080c4:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 80080c6:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80080c8:	4680      	mov	r8, r0
 80080ca:	bf18      	it	ne
 80080cc:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 80080ce:	4798      	blx	r3
 80080d0:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80080d2:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80080d4:	6963      	ldr	r3, [r4, #20]
 80080d6:	4798      	blx	r3
 80080d8:	1b40      	subs	r0, r0, r5
 80080da:	2801      	cmp	r0, #1
 80080dc:	d9fa      	bls.n	80080d4 <OV9655_SetResolution+0x4c>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 80080de:	3601      	adds	r6, #1
 80080e0:	2e93      	cmp	r6, #147	; 0x93
 80080e2:	d00a      	beq.n	80080fa <OV9655_SetResolution+0x72>
        if(ret != OV9655_ERROR)
 80080e4:	f1b8 0f00 	cmp.w	r8, #0
 80080e8:	d0e0      	beq.n	80080ac <OV9655_SetResolution+0x24>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 80080ea:	2e92      	cmp	r6, #146	; 0x92
 80080ec:	f106 0602 	add.w	r6, r6, #2
 80080f0:	d001      	beq.n	80080f6 <OV9655_SetResolution+0x6e>
 80080f2:	2e93      	cmp	r6, #147	; 0x93
 80080f4:	d1f9      	bne.n	80080ea <OV9655_SetResolution+0x62>
    ret = OV9655_ERROR;
 80080f6:	f04f 37ff 	mov.w	r7, #4294967295
}
 80080fa:	4638      	mov	r0, r7
 80080fc:	b003      	add	sp, #12
 80080fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (Resolution)
 8008102:	2600      	movs	r6, #0
 8008104:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8008258 <OV9655_SetResolution+0x1d0>
 8008108:	f10d 0a07 	add.w	sl, sp, #7
 800810c:	f100 0918 	add.w	r9, r0, #24
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008110:	eb08 0046 	add.w	r0, r8, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008114:	2301      	movs	r3, #1
 8008116:	4652      	mov	r2, sl
 8008118:	f818 1016 	ldrb.w	r1, [r8, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 800811c:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800811e:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008120:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008124:	f000 fc2e 	bl	8008984 <ov9655_write_reg>
 8008128:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 800812a:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800812c:	4683      	mov	fp, r0
 800812e:	bf18      	it	ne
 8008130:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 8008132:	4798      	blx	r3
 8008134:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008136:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008138:	6963      	ldr	r3, [r4, #20]
 800813a:	4798      	blx	r3
 800813c:	1b40      	subs	r0, r0, r5
 800813e:	2801      	cmp	r0, #1
 8008140:	d9fa      	bls.n	8008138 <OV9655_SetResolution+0xb0>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8008142:	3601      	adds	r6, #1
 8008144:	2e91      	cmp	r6, #145	; 0x91
 8008146:	d043      	beq.n	80081d0 <OV9655_SetResolution+0x148>
        if(ret != OV9655_ERROR)
 8008148:	f1bb 0f00 	cmp.w	fp, #0
 800814c:	d0e0      	beq.n	8008110 <OV9655_SetResolution+0x88>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 800814e:	2e90      	cmp	r6, #144	; 0x90
 8008150:	f106 0602 	add.w	r6, r6, #2
 8008154:	d001      	beq.n	800815a <OV9655_SetResolution+0xd2>
 8008156:	2e91      	cmp	r6, #145	; 0x91
 8008158:	d1f9      	bne.n	800814e <OV9655_SetResolution+0xc6>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 800815a:	2500      	movs	r5, #0
 800815c:	2d04      	cmp	r5, #4
 800815e:	f105 0502 	add.w	r5, r5, #2
 8008162:	d0c8      	beq.n	80080f6 <OV9655_SetResolution+0x6e>
 8008164:	2d05      	cmp	r5, #5
 8008166:	d1f9      	bne.n	800815c <OV9655_SetResolution+0xd4>
 8008168:	e7c5      	b.n	80080f6 <OV9655_SetResolution+0x6e>
 800816a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8008258 <OV9655_SetResolution+0x1d0>
 800816e:	f10d 0a07 	add.w	sl, sp, #7
 8008172:	f100 0918 	add.w	r9, r0, #24
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008176:	eb08 0046 	add.w	r0, r8, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800817a:	2301      	movs	r3, #1
 800817c:	4652      	mov	r2, sl
 800817e:	f818 1016 	ldrb.w	r1, [r8, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008182:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008184:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008186:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800818a:	f000 fbfb 	bl	8008984 <ov9655_write_reg>
 800818e:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 8008190:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008192:	4683      	mov	fp, r0
 8008194:	bf18      	it	ne
 8008196:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 8008198:	4798      	blx	r3
 800819a:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800819c:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800819e:	6963      	ldr	r3, [r4, #20]
 80081a0:	4798      	blx	r3
 80081a2:	1b40      	subs	r0, r0, r5
 80081a4:	2801      	cmp	r0, #1
 80081a6:	d9fa      	bls.n	800819e <OV9655_SetResolution+0x116>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80081a8:	3601      	adds	r6, #1
 80081aa:	2e91      	cmp	r6, #145	; 0x91
 80081ac:	d031      	beq.n	8008212 <OV9655_SetResolution+0x18a>
        if(ret != OV9655_ERROR)
 80081ae:	f1bb 0f00 	cmp.w	fp, #0
 80081b2:	d0e0      	beq.n	8008176 <OV9655_SetResolution+0xee>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80081b4:	2e90      	cmp	r6, #144	; 0x90
 80081b6:	f106 0602 	add.w	r6, r6, #2
 80081ba:	d001      	beq.n	80081c0 <OV9655_SetResolution+0x138>
 80081bc:	2e91      	cmp	r6, #145	; 0x91
 80081be:	d1f9      	bne.n	80081b4 <OV9655_SetResolution+0x12c>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 80081c0:	2500      	movs	r5, #0
 80081c2:	2d04      	cmp	r5, #4
 80081c4:	f105 0502 	add.w	r5, r5, #2
 80081c8:	d095      	beq.n	80080f6 <OV9655_SetResolution+0x6e>
 80081ca:	2d05      	cmp	r5, #5
 80081cc:	d1f9      	bne.n	80081c2 <OV9655_SetResolution+0x13a>
 80081ce:	e792      	b.n	80080f6 <OV9655_SetResolution+0x6e>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 80081d0:	2500      	movs	r5, #0
          tmp = OV9655_QVGA[index][1];
 80081d2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800825c <OV9655_SetResolution+0x1d4>
        if(ret != OV9655_ERROR)
 80081d6:	2f00      	cmp	r7, #0
 80081d8:	d1c0      	bne.n	800815c <OV9655_SetResolution+0xd4>
          tmp = OV9655_QVGA[index][1];
 80081da:	eb08 0345 	add.w	r3, r8, r5, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80081de:	4652      	mov	r2, sl
 80081e0:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
 80081e4:	4648      	mov	r0, r9
          tmp = OV9655_QVGA[index][1];
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	f88d 3007 	strb.w	r3, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80081ec:	2301      	movs	r3, #1
 80081ee:	f000 fbc9 	bl	8008984 <ov9655_write_reg>
 80081f2:	3800      	subs	r0, #0
  tickstart = pObj->IO.GetTick();
 80081f4:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80081f6:	bf18      	it	ne
 80081f8:	2001      	movne	r0, #1
 80081fa:	4247      	negs	r7, r0
  tickstart = pObj->IO.GetTick();
 80081fc:	4798      	blx	r3
 80081fe:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008200:	6963      	ldr	r3, [r4, #20]
 8008202:	4798      	blx	r3
 8008204:	1b80      	subs	r0, r0, r6
 8008206:	2801      	cmp	r0, #1
 8008208:	d9fa      	bls.n	8008200 <OV9655_SetResolution+0x178>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 800820a:	3501      	adds	r5, #1
 800820c:	2d05      	cmp	r5, #5
 800820e:	d1e2      	bne.n	80081d6 <OV9655_SetResolution+0x14e>
 8008210:	e773      	b.n	80080fa <OV9655_SetResolution+0x72>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8008212:	2500      	movs	r5, #0
          tmp = OV9655_QQVGA[index][1];
 8008214:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8008260 <OV9655_SetResolution+0x1d8>
        if(ret != OV9655_ERROR)
 8008218:	2f00      	cmp	r7, #0
 800821a:	d1d2      	bne.n	80081c2 <OV9655_SetResolution+0x13a>
          tmp = OV9655_QQVGA[index][1];
 800821c:	eb08 0345 	add.w	r3, r8, r5, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008220:	4652      	mov	r2, sl
 8008222:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
 8008226:	4648      	mov	r0, r9
          tmp = OV9655_QQVGA[index][1];
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	f88d 3007 	strb.w	r3, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800822e:	2301      	movs	r3, #1
 8008230:	f000 fba8 	bl	8008984 <ov9655_write_reg>
 8008234:	3800      	subs	r0, #0
  tickstart = pObj->IO.GetTick();
 8008236:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008238:	bf18      	it	ne
 800823a:	2001      	movne	r0, #1
 800823c:	4247      	negs	r7, r0
  tickstart = pObj->IO.GetTick();
 800823e:	4798      	blx	r3
 8008240:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008242:	6963      	ldr	r3, [r4, #20]
 8008244:	4798      	blx	r3
 8008246:	1b80      	subs	r0, r0, r6
 8008248:	2801      	cmp	r0, #1
 800824a:	d9fa      	bls.n	8008242 <OV9655_SetResolution+0x1ba>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 800824c:	3501      	adds	r5, #1
 800824e:	2d05      	cmp	r5, #5
 8008250:	d1e2      	bne.n	8008218 <OV9655_SetResolution+0x190>
 8008252:	e752      	b.n	80080fa <OV9655_SetResolution+0x72>
 8008254:	08060268 	.word	0x08060268
 8008258:	08060144 	.word	0x08060144
 800825c:	08060138 	.word	0x08060138
 8008260:	0806012c 	.word	0x0806012c

08008264 <OV9655_SetColorEffect>:
{
 8008264:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
  switch(Effect)
 8008268:	3901      	subs	r1, #1
{
 800826a:	b085      	sub	sp, #20
 800826c:	9001      	str	r0, [sp, #4]
  switch(Effect)
 800826e:	291f      	cmp	r1, #31
 8008270:	d821      	bhi.n	80082b6 <OV9655_SetColorEffect+0x52>
 8008272:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008276:	006e      	.short	0x006e
 8008278:	002000b3 	.word	0x002000b3
 800827c:	002000f8 	.word	0x002000f8
 8008280:	00200020 	.word	0x00200020
 8008284:	0020013f 	.word	0x0020013f
 8008288:	00200020 	.word	0x00200020
 800828c:	00200020 	.word	0x00200020
 8008290:	00200020 	.word	0x00200020
 8008294:	00200159 	.word	0x00200159
 8008298:	00200020 	.word	0x00200020
 800829c:	00200020 	.word	0x00200020
 80082a0:	00200020 	.word	0x00200020
 80082a4:	00200020 	.word	0x00200020
 80082a8:	00200020 	.word	0x00200020
 80082ac:	00200020 	.word	0x00200020
 80082b0:	00200020 	.word	0x00200020
 80082b4:	0192      	.short	0x0192
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80082b6:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xCC;
 80082ba:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80082bc:	2301      	movs	r3, #1
 80082be:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 80082c2:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80082c6:	4638      	mov	r0, r7
 80082c8:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x80;
 80082ca:	f04f 0880 	mov.w	r8, #128	; 0x80
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80082ce:	f000 fb59 	bl	8008984 <ov9655_write_reg>
 80082d2:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80082d4:	2301      	movs	r3, #1
 80082d6:	f10d 020f 	add.w	r2, sp, #15
 80082da:	214f      	movs	r1, #79	; 0x4f
 80082dc:	4638      	mov	r0, r7
    tmp = 0x80;
 80082de:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80082e2:	f000 fb4f 	bl	8008984 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80082e6:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80082e8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80082ea:	f10d 020f 	add.w	r2, sp, #15
 80082ee:	2150      	movs	r1, #80	; 0x50
 80082f0:	4638      	mov	r0, r7
 80082f2:	f000 fb47 	bl	8008984 <ov9655_write_reg>
    tmp = 0x00;
 80082f6:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80082f8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80082fa:	f10d 020f 	add.w	r2, sp, #15
 80082fe:	2151      	movs	r1, #81	; 0x51
    tmp = 0x00;
 8008300:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008304:	4638      	mov	r0, r7
 8008306:	2301      	movs	r3, #1
 8008308:	f000 fb3c 	bl	8008984 <ov9655_write_reg>
 800830c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800830e:	2301      	movs	r3, #1
 8008310:	f10d 020f 	add.w	r2, sp, #15
 8008314:	2152      	movs	r1, #82	; 0x52
 8008316:	4638      	mov	r0, r7
 8008318:	f000 fb34 	bl	8008984 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800831c:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800831e:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008320:	f10d 020f 	add.w	r2, sp, #15
 8008324:	2153      	movs	r1, #83	; 0x53
 8008326:	4638      	mov	r0, r7
    tmp = 0x80;
 8008328:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800832c:	f000 fb2a 	bl	8008984 <ov9655_write_reg>
 8008330:	4601      	mov	r1, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8008332:	2301      	movs	r3, #1
 8008334:	f10d 020f 	add.w	r2, sp, #15
 8008338:	4638      	mov	r0, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800833a:	440c      	add	r4, r1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800833c:	2154      	movs	r1, #84	; 0x54
 800833e:	f000 fb21 	bl	8008984 <ov9655_write_reg>
 8008342:	4420      	add	r0, r4
  if(ret != OV9655_OK)
 8008344:	3800      	subs	r0, #0
 8008346:	bf18      	it	ne
 8008348:	2001      	movne	r0, #1
}
 800834a:	4240      	negs	r0, r0
 800834c:	b005      	add	sp, #20
 800834e:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008352:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xCC;
 8008356:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008358:	2301      	movs	r3, #1
 800835a:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 800835e:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008362:	4638      	mov	r0, r7
 8008364:	213a      	movs	r1, #58	; 0x3a
 8008366:	f000 fb0d 	bl	8008984 <ov9655_write_reg>
    tmp = 0x00;
 800836a:	2200      	movs	r2, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800836c:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800836e:	2301      	movs	r3, #1
 8008370:	214f      	movs	r1, #79	; 0x4f
    tmp = 0x00;
 8008372:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008376:	4638      	mov	r0, r7
 8008378:	f10d 020f 	add.w	r2, sp, #15
 800837c:	f000 fb02 	bl	8008984 <ov9655_write_reg>
 8008380:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008382:	2301      	movs	r3, #1
 8008384:	f10d 020f 	add.w	r2, sp, #15
 8008388:	2150      	movs	r1, #80	; 0x50
 800838a:	4638      	mov	r0, r7
 800838c:	f000 fafa 	bl	8008984 <ov9655_write_reg>
 8008390:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008392:	2301      	movs	r3, #1
 8008394:	f10d 020f 	add.w	r2, sp, #15
 8008398:	2151      	movs	r1, #81	; 0x51
 800839a:	4638      	mov	r0, r7
 800839c:	f000 faf2 	bl	8008984 <ov9655_write_reg>
 80083a0:	1825      	adds	r5, r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80083a2:	2301      	movs	r3, #1
 80083a4:	f10d 020f 	add.w	r2, sp, #15
 80083a8:	2152      	movs	r1, #82	; 0x52
 80083aa:	4638      	mov	r0, r7
 80083ac:	f000 faea 	bl	8008984 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80083b0:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80083b2:	4405      	add	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80083b4:	f10d 020f 	add.w	r2, sp, #15
 80083b8:	2153      	movs	r1, #83	; 0x53
 80083ba:	4638      	mov	r0, r7
 80083bc:	f000 fae2 	bl	8008984 <ov9655_write_reg>
 80083c0:	4604      	mov	r4, r0
    tmp = 0x60;
 80083c2:	2360      	movs	r3, #96	; 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80083c4:	f10d 020f 	add.w	r2, sp, #15
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80083c8:	442c      	add	r4, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80083ca:	4638      	mov	r0, r7
    tmp = 0x60;
 80083cc:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80083d0:	2154      	movs	r1, #84	; 0x54
 80083d2:	2301      	movs	r3, #1
 80083d4:	f000 fad6 	bl	8008984 <ov9655_write_reg>
 80083d8:	4420      	add	r0, r4
    break;
 80083da:	e7b3      	b.n	8008344 <OV9655_SetColorEffect+0xe0>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80083dc:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xCC;
 80083e0:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80083e2:	2301      	movs	r3, #1
 80083e4:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 80083e8:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80083ec:	4638      	mov	r0, r7
 80083ee:	213a      	movs	r1, #58	; 0x3a
 80083f0:	f000 fac8 	bl	8008984 <ov9655_write_reg>
    tmp = 0x60;
 80083f4:	2260      	movs	r2, #96	; 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80083f6:	2301      	movs	r3, #1
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80083f8:	4604      	mov	r4, r0
    tmp = 0x60;
 80083fa:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80083fe:	214f      	movs	r1, #79	; 0x4f
 8008400:	f10d 020f 	add.w	r2, sp, #15
 8008404:	4638      	mov	r0, r7
 8008406:	f000 fabd 	bl	8008984 <ov9655_write_reg>
    tmp = 0x00;
 800840a:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800840c:	4404      	add	r4, r0
    tmp = 0x00;
 800840e:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008412:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008414:	f10d 020f 	add.w	r2, sp, #15
 8008418:	2150      	movs	r1, #80	; 0x50
 800841a:	4638      	mov	r0, r7
 800841c:	f000 fab2 	bl	8008984 <ov9655_write_reg>
 8008420:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008422:	2301      	movs	r3, #1
 8008424:	f10d 020f 	add.w	r2, sp, #15
 8008428:	2151      	movs	r1, #81	; 0x51
 800842a:	4638      	mov	r0, r7
 800842c:	f000 faaa 	bl	8008984 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008430:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008432:	1825      	adds	r5, r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008434:	f10d 020f 	add.w	r2, sp, #15
 8008438:	2152      	movs	r1, #82	; 0x52
 800843a:	4638      	mov	r0, r7
 800843c:	f000 faa2 	bl	8008984 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008440:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008442:	4405      	add	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008444:	f10d 020f 	add.w	r2, sp, #15
 8008448:	2153      	movs	r1, #83	; 0x53
 800844a:	4638      	mov	r0, r7
 800844c:	f000 fa9a 	bl	8008984 <ov9655_write_reg>
 8008450:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8008452:	2301      	movs	r3, #1
 8008454:	f10d 020f 	add.w	r2, sp, #15
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008458:	442c      	add	r4, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800845a:	4638      	mov	r0, r7
 800845c:	2154      	movs	r1, #84	; 0x54
 800845e:	f000 fa91 	bl	8008984 <ov9655_write_reg>
 8008462:	4420      	add	r0, r4
    break;
 8008464:	e76e      	b.n	8008344 <OV9655_SetColorEffect+0xe0>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008466:	f100 0818 	add.w	r8, r0, #24
    tmp = 0xCC;
 800846a:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800846c:	2301      	movs	r3, #1
 800846e:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 8008472:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008476:	4640      	mov	r0, r8
 8008478:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x00;
 800847a:	2700      	movs	r7, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800847c:	f000 fa82 	bl	8008984 <ov9655_write_reg>
 8008480:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008482:	2301      	movs	r3, #1
 8008484:	f10d 020f 	add.w	r2, sp, #15
 8008488:	214f      	movs	r1, #79	; 0x4f
 800848a:	4640      	mov	r0, r8
    tmp = 0x00;
 800848c:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008490:	f000 fa78 	bl	8008984 <ov9655_write_reg>
 8008494:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008496:	2301      	movs	r3, #1
 8008498:	f10d 020f 	add.w	r2, sp, #15
 800849c:	2150      	movs	r1, #80	; 0x50
 800849e:	4640      	mov	r0, r8
 80084a0:	f000 fa70 	bl	8008984 <ov9655_write_reg>
 80084a4:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80084a6:	2301      	movs	r3, #1
 80084a8:	f10d 020f 	add.w	r2, sp, #15
 80084ac:	2151      	movs	r1, #81	; 0x51
 80084ae:	4640      	mov	r0, r8
 80084b0:	f000 fa68 	bl	8008984 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80084b4:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80084b6:	1825      	adds	r5, r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80084b8:	f10d 020f 	add.w	r2, sp, #15
 80084bc:	2152      	movs	r1, #82	; 0x52
 80084be:	4640      	mov	r0, r8
 80084c0:	f000 fa60 	bl	8008984 <ov9655_write_reg>
    tmp = 0x80;
 80084c4:	2380      	movs	r3, #128	; 0x80
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80084c6:	4405      	add	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80084c8:	f10d 020f 	add.w	r2, sp, #15
 80084cc:	2153      	movs	r1, #83	; 0x53
    tmp = 0x80;
 80084ce:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80084d2:	4640      	mov	r0, r8
 80084d4:	2301      	movs	r3, #1
 80084d6:	f000 fa55 	bl	8008984 <ov9655_write_reg>
 80084da:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80084dc:	f10d 020f 	add.w	r2, sp, #15
 80084e0:	4640      	mov	r0, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80084e2:	442c      	add	r4, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80084e4:	2301      	movs	r3, #1
 80084e6:	2154      	movs	r1, #84	; 0x54
    tmp = 0x00;
 80084e8:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80084ec:	f000 fa4a 	bl	8008984 <ov9655_write_reg>
 80084f0:	4420      	add	r0, r4
    break;
 80084f2:	e727      	b.n	8008344 <OV9655_SetColorEffect+0xe0>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80084f4:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xCC;
 80084f8:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80084fa:	2301      	movs	r3, #1
 80084fc:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 8008500:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008504:	4638      	mov	r0, r7
 8008506:	213a      	movs	r1, #58	; 0x3a
 8008508:	f000 fa3c 	bl	8008984 <ov9655_write_reg>
    tmp = 0x00;
 800850c:	2200      	movs	r2, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800850e:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008510:	2301      	movs	r3, #1
    tmp = 0x00;
 8008512:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008516:	214f      	movs	r1, #79	; 0x4f
 8008518:	f10d 020f 	add.w	r2, sp, #15
 800851c:	4638      	mov	r0, r7
 800851e:	f000 fa31 	bl	8008984 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008522:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008524:	4404      	add	r4, r0
 8008526:	e775      	b.n	8008414 <OV9655_SetColorEffect+0x1b0>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008528:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xCC;
 800852c:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800852e:	2301      	movs	r3, #1
 8008530:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 8008534:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008538:	4638      	mov	r0, r7
 800853a:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x00;
 800853c:	f04f 0800 	mov.w	r8, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008540:	f000 fa20 	bl	8008984 <ov9655_write_reg>
 8008544:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008546:	2301      	movs	r3, #1
 8008548:	f10d 020f 	add.w	r2, sp, #15
 800854c:	214f      	movs	r1, #79	; 0x4f
 800854e:	4638      	mov	r0, r7
    tmp = 0x00;
 8008550:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008554:	f000 fa16 	bl	8008984 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008558:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800855a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800855c:	f10d 020f 	add.w	r2, sp, #15
 8008560:	2150      	movs	r1, #80	; 0x50
 8008562:	4638      	mov	r0, r7
 8008564:	f000 fa0e 	bl	8008984 <ov9655_write_reg>
    tmp = 0x20;
 8008568:	2320      	movs	r3, #32
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800856a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800856c:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0x20;
 8008570:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008574:	2151      	movs	r1, #81	; 0x51
 8008576:	2301      	movs	r3, #1
 8008578:	4638      	mov	r0, r7
 800857a:	f000 fa03 	bl	8008984 <ov9655_write_reg>
    tmp = 0xF0;
 800857e:	23f0      	movs	r3, #240	; 0xf0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008580:	1825      	adds	r5, r4, r0
    tmp = 0xF0;
 8008582:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008586:	2301      	movs	r3, #1
 8008588:	f10d 020f 	add.w	r2, sp, #15
 800858c:	2152      	movs	r1, #82	; 0x52
 800858e:	4638      	mov	r0, r7
 8008590:	f000 f9f8 	bl	8008984 <ov9655_write_reg>
    tmp = 0x80;
 8008594:	f88d 800f 	strb.w	r8, [sp, #15]
 8008598:	e752      	b.n	8008440 <OV9655_SetColorEffect+0x1dc>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800859a:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xEC;
 800859e:	21ec      	movs	r1, #236	; 0xec
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80085a0:	2301      	movs	r3, #1
 80085a2:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xEC;
 80085a6:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80085aa:	4638      	mov	r0, r7
 80085ac:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x80;
 80085ae:	f04f 0880 	mov.w	r8, #128	; 0x80
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80085b2:	f000 f9e7 	bl	8008984 <ov9655_write_reg>
 80085b6:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80085b8:	2301      	movs	r3, #1
 80085ba:	f10d 020f 	add.w	r2, sp, #15
 80085be:	214f      	movs	r1, #79	; 0x4f
 80085c0:	4638      	mov	r0, r7
    tmp = 0x80;
 80085c2:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80085c6:	f000 f9dd 	bl	8008984 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80085ca:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80085cc:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80085ce:	f10d 020f 	add.w	r2, sp, #15
 80085d2:	2150      	movs	r1, #80	; 0x50
 80085d4:	4638      	mov	r0, r7
 80085d6:	f000 f9d5 	bl	8008984 <ov9655_write_reg>
    tmp = 0x00;
 80085da:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80085dc:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80085de:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0x00;
 80085e2:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80085e6:	2151      	movs	r1, #81	; 0x51
 80085e8:	2301      	movs	r3, #1
 80085ea:	4638      	mov	r0, r7
 80085ec:	f000 f9ca 	bl	8008984 <ov9655_write_reg>
 80085f0:	1825      	adds	r5, r4, r0
 80085f2:	e7c8      	b.n	8008586 <OV9655_SetColorEffect+0x322>

080085f4 <OV9655_SetBrightness>:
{
 80085f4:	b500      	push	{lr}
  tmp = brightness_level[Level + 4];
 80085f6:	3110      	adds	r1, #16
{
 80085f8:	b085      	sub	sp, #20
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 80085fa:	4a0d      	ldr	r2, [pc, #52]	; (8008630 <OV9655_SetBrightness+0x3c>)
{
 80085fc:	4686      	mov	lr, r0
  tmp = brightness_level[Level + 4];
 80085fe:	eb0d 0c01 	add.w	ip, sp, r1
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8008602:	ab01      	add	r3, sp, #4
 8008604:	ca07      	ldmia	r2, {r0, r1, r2}
 8008606:	c303      	stmia	r3!, {r0, r1}
 8008608:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 800860a:	2155      	movs	r1, #85	; 0x55
  tmp = brightness_level[Level + 4];
 800860c:	f81c cc08 	ldrb.w	ip, [ip, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8008610:	2301      	movs	r3, #1
 8008612:	f10d 0203 	add.w	r2, sp, #3
 8008616:	f10e 0018 	add.w	r0, lr, #24
  tmp = brightness_level[Level + 4];
 800861a:	f88d c003 	strb.w	ip, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 800861e:	f000 f9b1 	bl	8008984 <ov9655_write_reg>
 8008622:	3800      	subs	r0, #0
 8008624:	bf18      	it	ne
 8008626:	2001      	movne	r0, #1
}
 8008628:	4240      	negs	r0, r0
 800862a:	b005      	add	sp, #20
 800862c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008630:	080257d0 	.word	0x080257d0

08008634 <OV9655_SetContrast>:
{
 8008634:	b500      	push	{lr}
  tmp = contrast_level[Level + 4];
 8008636:	3110      	adds	r1, #16
{
 8008638:	b085      	sub	sp, #20
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 800863a:	4a0d      	ldr	r2, [pc, #52]	; (8008670 <OV9655_SetContrast+0x3c>)
{
 800863c:	4686      	mov	lr, r0
  tmp = contrast_level[Level + 4];
 800863e:	eb0d 0c01 	add.w	ip, sp, r1
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8008642:	ab01      	add	r3, sp, #4
 8008644:	ca07      	ldmia	r2, {r0, r1, r2}
 8008646:	c303      	stmia	r3!, {r0, r1}
 8008648:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 800864a:	2156      	movs	r1, #86	; 0x56
  tmp = contrast_level[Level + 4];
 800864c:	f81c cc08 	ldrb.w	ip, [ip, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8008650:	2301      	movs	r3, #1
 8008652:	f10d 0203 	add.w	r2, sp, #3
 8008656:	f10e 0018 	add.w	r0, lr, #24
  tmp = contrast_level[Level + 4];
 800865a:	f88d c003 	strb.w	ip, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 800865e:	f000 f991 	bl	8008984 <ov9655_write_reg>
 8008662:	3800      	subs	r0, #0
 8008664:	bf18      	it	ne
 8008666:	2001      	movne	r0, #1
}
 8008668:	4240      	negs	r0, r0
 800866a:	b005      	add	sp, #20
 800866c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008670:	08060120 	.word	0x08060120

08008674 <OV9655_SetPixelFormat>:
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8008674:	f031 0302 	bics.w	r3, r1, #2
{
 8008678:	b530      	push	{r4, r5, lr}
 800867a:	b083      	sub	sp, #12
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 800867c:	d177      	bne.n	800876e <OV9655_SetPixelFormat+0xfa>
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 800867e:	f100 0418 	add.w	r4, r0, #24
 8008682:	460d      	mov	r5, r1
 8008684:	2301      	movs	r3, #1
 8008686:	f10d 0207 	add.w	r2, sp, #7
 800868a:	2112      	movs	r1, #18
 800868c:	4620      	mov	r0, r4
 800868e:	f000 f971 	bl	8008974 <ov9655_read_reg>
 8008692:	2800      	cmp	r0, #0
 8008694:	d16b      	bne.n	800876e <OV9655_SetPixelFormat+0xfa>
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8008696:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch (PixelFormat)
 800869a:	2d02      	cmp	r5, #2
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 800869c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    switch (PixelFormat)
 80086a0:	d029      	beq.n	80086f6 <OV9655_SetPixelFormat+0x82>
      tmp |= 0x03U;
 80086a2:	f043 0103 	orr.w	r1, r3, #3
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80086a6:	f10d 0207 	add.w	r2, sp, #7
 80086aa:	2301      	movs	r3, #1
 80086ac:	4620      	mov	r0, r4
      tmp |= 0x03U;
 80086ae:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80086b2:	2112      	movs	r1, #18
 80086b4:	f000 f966 	bl	8008984 <ov9655_write_reg>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d158      	bne.n	800876e <OV9655_SetPixelFormat+0xfa>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80086bc:	2301      	movs	r3, #1
 80086be:	f10d 0207 	add.w	r2, sp, #7
 80086c2:	2140      	movs	r1, #64	; 0x40
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 f955 	bl	8008974 <ov9655_read_reg>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d14f      	bne.n	800876e <OV9655_SetPixelFormat+0xfa>
        tmp |= 0x10U;
 80086ce:	f89d 5007 	ldrb.w	r5, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80086d2:	2301      	movs	r3, #1
 80086d4:	f10d 0207 	add.w	r2, sp, #7
 80086d8:	2140      	movs	r1, #64	; 0x40
        tmp |= 0x10U;
 80086da:	f045 0510 	orr.w	r5, r5, #16
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80086de:	4620      	mov	r0, r4
        tmp |= 0x10U;
 80086e0:	f88d 5007 	strb.w	r5, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80086e4:	f000 f94e 	bl	8008984 <ov9655_write_reg>
 80086e8:	3800      	subs	r0, #0
 80086ea:	bf18      	it	ne
 80086ec:	2001      	movne	r0, #1
 80086ee:	4245      	negs	r5, r0
}
 80086f0:	4628      	mov	r0, r5
 80086f2:	b003      	add	sp, #12
 80086f4:	bd30      	pop	{r4, r5, pc}
      tmp |= 0x02U;
 80086f6:	f043 0102 	orr.w	r1, r3, #2
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80086fa:	f10d 0207 	add.w	r2, sp, #7
 80086fe:	2301      	movs	r3, #1
 8008700:	4620      	mov	r0, r4
      tmp |= 0x02U;
 8008702:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8008706:	2112      	movs	r1, #18
 8008708:	f000 f93c 	bl	8008984 <ov9655_write_reg>
 800870c:	bb78      	cbnz	r0, 800876e <OV9655_SetPixelFormat+0xfa>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 800870e:	2301      	movs	r3, #1
 8008710:	f10d 0207 	add.w	r2, sp, #7
 8008714:	213a      	movs	r1, #58	; 0x3a
 8008716:	4620      	mov	r0, r4
 8008718:	f000 f92c 	bl	8008974 <ov9655_read_reg>
 800871c:	bb38      	cbnz	r0, 800876e <OV9655_SetPixelFormat+0xfa>
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 800871e:	f89d 1007 	ldrb.w	r1, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8008722:	2301      	movs	r3, #1
 8008724:	f10d 0207 	add.w	r2, sp, #7
 8008728:	4620      	mov	r0, r4
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 800872a:	f021 012c 	bic.w	r1, r1, #44	; 0x2c
 800872e:	f88d 1007 	strb.w	r1, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8008732:	213a      	movs	r1, #58	; 0x3a
 8008734:	f000 f926 	bl	8008984 <ov9655_write_reg>
 8008738:	b9c8      	cbnz	r0, 800876e <OV9655_SetPixelFormat+0xfa>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 800873a:	2301      	movs	r3, #1
 800873c:	f10d 0207 	add.w	r2, sp, #7
 8008740:	2140      	movs	r1, #64	; 0x40
 8008742:	4620      	mov	r0, r4
 8008744:	f000 f916 	bl	8008974 <ov9655_read_reg>
 8008748:	4605      	mov	r5, r0
 800874a:	b9a8      	cbnz	r0, 8008778 <OV9655_SetPixelFormat+0x104>
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 800874c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008750:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008754:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008758:	f88d 3007 	strb.w	r3, [sp, #7]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 800875c:	2301      	movs	r3, #1
 800875e:	f10d 0207 	add.w	r2, sp, #7
 8008762:	2140      	movs	r1, #64	; 0x40
 8008764:	4620      	mov	r0, r4
 8008766:	f000 f90d 	bl	8008984 <ov9655_write_reg>
 800876a:	2800      	cmp	r0, #0
 800876c:	d0c0      	beq.n	80086f0 <OV9655_SetPixelFormat+0x7c>
              ret = OV9655_ERROR;
 800876e:	f04f 35ff 	mov.w	r5, #4294967295
}
 8008772:	4628      	mov	r0, r5
 8008774:	b003      	add	sp, #12
 8008776:	bd30      	pop	{r4, r5, pc}
              ret = OV9655_ERROR;
 8008778:	f04f 35ff 	mov.w	r5, #4294967295
 800877c:	e7ee      	b.n	800875c <OV9655_SetPixelFormat+0xe8>
 800877e:	bf00      	nop

08008780 <OV9655_GetResolution>:
{
 8008780:	b510      	push	{r4, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	460c      	mov	r4, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 8008786:	2301      	movs	r3, #1
 8008788:	2132      	movs	r1, #50	; 0x32
 800878a:	f10d 0207 	add.w	r2, sp, #7
 800878e:	3018      	adds	r0, #24
 8008790:	f000 f8f0 	bl	8008974 <ov9655_read_reg>
 8008794:	b938      	cbnz	r0, 80087a6 <OV9655_GetResolution+0x26>
    switch (tmp)
 8008796:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800879a:	2ba4      	cmp	r3, #164	; 0xa4
 800879c:	d007      	beq.n	80087ae <OV9655_GetResolution+0x2e>
 800879e:	2bff      	cmp	r3, #255	; 0xff
 80087a0:	d00c      	beq.n	80087bc <OV9655_GetResolution+0x3c>
 80087a2:	2b12      	cmp	r3, #18
 80087a4:	d006      	beq.n	80087b4 <OV9655_GetResolution+0x34>
    ret = OV9655_ERROR;
 80087a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80087aa:	b002      	add	sp, #8
 80087ac:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R160x120;
 80087ae:	6020      	str	r0, [r4, #0]
}
 80087b0:	b002      	add	sp, #8
 80087b2:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R320x240;
 80087b4:	2301      	movs	r3, #1
 80087b6:	6023      	str	r3, [r4, #0]
}
 80087b8:	b002      	add	sp, #8
 80087ba:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R640x480;
 80087bc:	2303      	movs	r3, #3
 80087be:	6023      	str	r3, [r4, #0]
}
 80087c0:	b002      	add	sp, #8
 80087c2:	bd10      	pop	{r4, pc}

080087c4 <OV9655_ReadID>:
{
 80087c4:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 80087c6:	4604      	mov	r4, r0
{
 80087c8:	b083      	sub	sp, #12
 80087ca:	460d      	mov	r5, r1
  pObj->IO.Init();
 80087cc:	f854 3b18 	ldr.w	r3, [r4], #24
 80087d0:	4798      	blx	r3
    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 80087d2:	2301      	movs	r3, #1
 80087d4:	f10d 0207 	add.w	r2, sp, #7
 80087d8:	210a      	movs	r1, #10
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 f8ca 	bl	8008974 <ov9655_read_reg>
 80087e0:	b990      	cbnz	r0, 8008808 <OV9655_ReadID+0x44>
      *Id = (uint32_t)tmp << 8U;
 80087e2:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 80087e6:	2301      	movs	r3, #1
 80087e8:	f10d 0207 	add.w	r2, sp, #7
 80087ec:	4620      	mov	r0, r4
      *Id = (uint32_t)tmp << 8U;
 80087ee:	0209      	lsls	r1, r1, #8
 80087f0:	6029      	str	r1, [r5, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 80087f2:	210b      	movs	r1, #11
 80087f4:	f000 f8be 	bl	8008974 <ov9655_read_reg>
 80087f8:	b930      	cbnz	r0, 8008808 <OV9655_ReadID+0x44>
        *Id |= tmp;
 80087fa:	682b      	ldr	r3, [r5, #0]
 80087fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008800:	4313      	orrs	r3, r2
 8008802:	602b      	str	r3, [r5, #0]
}
 8008804:	b003      	add	sp, #12
 8008806:	bd30      	pop	{r4, r5, pc}
      ret = OV9655_ERROR;
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	e7fa      	b.n	8008804 <OV9655_ReadID+0x40>
 800880e:	bf00      	nop

08008810 <OV9655_MirrorFlipConfig>:
  if(Config > OV9655_MIRROR_FLIP)
 8008810:	2903      	cmp	r1, #3
 8008812:	d824      	bhi.n	800885e <OV9655_MirrorFlipConfig+0x4e>
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008814:	2301      	movs	r3, #1
{
 8008816:	b530      	push	{r4, r5, lr}
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008818:	f100 0418 	add.w	r4, r0, #24
{
 800881c:	b083      	sub	sp, #12
 800881e:	460d      	mov	r5, r1
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008820:	211e      	movs	r1, #30
 8008822:	f10d 0207 	add.w	r2, sp, #7
 8008826:	4620      	mov	r0, r4
 8008828:	f000 f8a4 	bl	8008974 <ov9655_read_reg>
 800882c:	b9a0      	cbnz	r0, 8008858 <OV9655_MirrorFlipConfig+0x48>
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 800882e:	f89d c007 	ldrb.w	ip, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008832:	4620      	mov	r0, r4
 8008834:	2301      	movs	r3, #1
 8008836:	f10d 0207 	add.w	r2, sp, #7
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 800883a:	f02c 0430 	bic.w	r4, ip, #48	; 0x30
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 800883e:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 8008842:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008846:	211e      	movs	r1, #30
 8008848:	f000 f89c 	bl	8008984 <ov9655_write_reg>
 800884c:	3800      	subs	r0, #0
 800884e:	bf18      	it	ne
 8008850:	2001      	movne	r0, #1
 8008852:	4240      	negs	r0, r0
}
 8008854:	b003      	add	sp, #12
 8008856:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 8008858:	f04f 30ff 	mov.w	r0, #4294967295
 800885c:	e7fa      	b.n	8008854 <OV9655_MirrorFlipConfig+0x44>
 800885e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008862:	4770      	bx	lr

08008864 <OV9655_NightModeConfig>:
{
 8008864:	b530      	push	{r4, r5, lr}
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8008866:	f100 0418 	add.w	r4, r0, #24
{
 800886a:	b083      	sub	sp, #12
 800886c:	460d      	mov	r5, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 800886e:	2301      	movs	r3, #1
 8008870:	f10d 0207 	add.w	r2, sp, #7
 8008874:	213b      	movs	r1, #59	; 0x3b
 8008876:	4620      	mov	r0, r4
 8008878:	f000 f87c 	bl	8008974 <ov9655_read_reg>
 800887c:	b9b8      	cbnz	r0, 80088ae <OV9655_NightModeConfig+0x4a>
    if(Cmd == NIGHT_MODE_ENABLE)
 800887e:	2d01      	cmp	r5, #1
      tmp |= 0x80U;
 8008880:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8008884:	f04f 0301 	mov.w	r3, #1
 8008888:	f10d 0207 	add.w	r2, sp, #7
      tmp |= 0x80U;
 800888c:	bf0c      	ite	eq
 800888e:	f045 0580 	orreq.w	r5, r5, #128	; 0x80
      tmp &= 0x7FU;
 8008892:	f005 057f 	andne.w	r5, r5, #127	; 0x7f
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8008896:	213b      	movs	r1, #59	; 0x3b
 8008898:	4620      	mov	r0, r4
 800889a:	f88d 5007 	strb.w	r5, [sp, #7]
 800889e:	f000 f871 	bl	8008984 <ov9655_write_reg>
 80088a2:	3800      	subs	r0, #0
 80088a4:	bf18      	it	ne
 80088a6:	2001      	movne	r0, #1
 80088a8:	4240      	negs	r0, r0
}
 80088aa:	b003      	add	sp, #12
 80088ac:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 80088ae:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80088b2:	e7fa      	b.n	80088aa <OV9655_NightModeConfig+0x46>

080088b4 <OV9655_Init>:
  if(pObj->IsInitialized == 0U)
 80088b4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80088b8:	bb5b      	cbnz	r3, 8008912 <OV9655_Init+0x5e>
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 80088ba:	2903      	cmp	r1, #3
{
 80088bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088be:	460e      	mov	r6, r1
 80088c0:	b083      	sub	sp, #12
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 80088c2:	d828      	bhi.n	8008916 <OV9655_Init+0x62>
 80088c4:	f032 0302 	bics.w	r3, r2, #2
 80088c8:	4617      	mov	r7, r2
 80088ca:	d124      	bne.n	8008916 <OV9655_Init+0x62>
      tmp = 0x80U;
 80088cc:	2280      	movs	r2, #128	; 0x80
 80088ce:	4604      	mov	r4, r0
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80088d0:	2301      	movs	r3, #1
 80088d2:	2112      	movs	r1, #18
      tmp = 0x80U;
 80088d4:	f88d 2007 	strb.w	r2, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80088d8:	3018      	adds	r0, #24
 80088da:	f10d 0207 	add.w	r2, sp, #7
 80088de:	f000 f851 	bl	8008984 <ov9655_write_reg>
 80088e2:	b9c0      	cbnz	r0, 8008916 <OV9655_Init+0x62>
  tickstart = pObj->IO.GetTick();
 80088e4:	6963      	ldr	r3, [r4, #20]
 80088e6:	4798      	blx	r3
 80088e8:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80088ea:	6963      	ldr	r3, [r4, #20]
 80088ec:	4798      	blx	r3
 80088ee:	1b43      	subs	r3, r0, r5
 80088f0:	2bc7      	cmp	r3, #199	; 0xc7
 80088f2:	d9fa      	bls.n	80088ea <OV9655_Init+0x36>
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 80088f4:	4631      	mov	r1, r6
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7ff fbc6 	bl	8008088 <OV9655_SetResolution>
 80088fc:	b958      	cbnz	r0, 8008916 <OV9655_Init+0x62>
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 80088fe:	4639      	mov	r1, r7
 8008900:	4620      	mov	r0, r4
 8008902:	f7ff feb7 	bl	8008674 <OV9655_SetPixelFormat>
 8008906:	b930      	cbnz	r0, 8008916 <OV9655_Init+0x62>
          pObj->IsInitialized = 1U;
 8008908:	2301      	movs	r3, #1
 800890a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800890e:	b003      	add	sp, #12
 8008910:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t ret = OV9655_OK;
 8008912:	2000      	movs	r0, #0
}
 8008914:	4770      	bx	lr
      ret = OV9655_ERROR;
 8008916:	f04f 30ff 	mov.w	r0, #4294967295
 800891a:	e7f8      	b.n	800890e <OV9655_Init+0x5a>

0800891c <OV9655_SetHueDegree>:
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop

08008924 <OV9655_ZoomConfig>:
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop

0800892c <OV9655_RegisterBusIO>:
  if (pObj == NULL)
 800892c:	b1d0      	cbz	r0, 8008964 <OV9655_RegisterBusIO+0x38>
    pObj->IO.Address   = pIO->Address;
 800892e:	890a      	ldrh	r2, [r1, #8]
{
 8008930:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8008932:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8008936:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8008938:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800893c:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
    pObj->IO.GetTick   = pIO->GetTick;
 8008940:	6949      	ldr	r1, [r1, #20]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008942:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8008944:	6141      	str	r1, [r0, #20]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8008946:	4a09      	ldr	r2, [pc, #36]	; (800896c <OV9655_RegisterBusIO+0x40>)
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 8008948:	4909      	ldr	r1, [pc, #36]	; (8008970 <OV9655_RegisterBusIO+0x44>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800894a:	60c4      	str	r4, [r0, #12]
    pObj->Ctx.handle   = pObj;
 800894c:	6200      	str	r0, [r0, #32]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 800894e:	e9c0 2106 	strd	r2, r1, [r0, #24]
    if(pObj->IO.Init != NULL)
 8008952:	b113      	cbz	r3, 800895a <OV9655_RegisterBusIO+0x2e>
}
 8008954:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8008958:	4718      	bx	r3
}
 800895a:	f04f 30ff 	mov.w	r0, #4294967295
 800895e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	f04f 30ff 	mov.w	r0, #4294967295
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	08008079 	.word	0x08008079
 8008970:	08008069 	.word	0x08008069

08008974 <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8008974:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008976:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800897a:	46a4      	mov	ip, r4
}
 800897c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008980:	4760      	bx	ip
 8008982:	bf00      	nop

08008984 <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8008984:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008986:	6804      	ldr	r4, [r0, #0]
 8008988:	6880      	ldr	r0, [r0, #8]
 800898a:	46a4      	mov	ip, r4
}
 800898c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008990:	4760      	bx	ip
 8008992:	bf00      	nop

08008994 <BSP_LED_Init>:
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8008994:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <BSP_LED_Init+0x50>)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8008996:	4914      	ldr	r1, [pc, #80]	; (80089e8 <BSP_LED_Init+0x54>)
  LEDx_GPIO_CLK_ENABLE();
 8008998:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800899c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 80089a0:	b530      	push	{r4, r5, lr}
  LEDx_GPIO_CLK_ENABLE();
 80089a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 80089a6:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE();
 80089a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089ac:	2401      	movs	r4, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80089ae:	4a0f      	ldr	r2, [pc, #60]	; (80089ec <BSP_LED_Init+0x58>)
  LEDx_GPIO_CLK_ENABLE();
 80089b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80089b4:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80089b8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  LEDx_GPIO_CLK_ENABLE();
 80089bc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089be:	2303      	movs	r3, #3
  LEDx_GPIO_CLK_ENABLE();
 80089c0:	9902      	ldr	r1, [sp, #8]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80089c2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089c4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80089c6:	9001      	str	r0, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089ca:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80089ce:	f004 fd7f 	bl	800d4d0 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80089d2:	9801      	ldr	r0, [sp, #4]
 80089d4:	4622      	mov	r2, r4
 80089d6:	b2a9      	uxth	r1, r5
 80089d8:	f004 ff8e 	bl	800d8f8 <HAL_GPIO_WritePin>
 return ret;
}
 80089dc:	2000      	movs	r0, #0
 80089de:	b009      	add	sp, #36	; 0x24
 80089e0:	bd30      	pop	{r4, r5, pc}
 80089e2:	bf00      	nop
 80089e4:	58024400 	.word	0x58024400
 80089e8:	080603f8 	.word	0x080603f8
 80089ec:	08060408 	.word	0x08060408

080089f0 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 80089f0:	4603      	mov	r3, r0
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80089f2:	4906      	ldr	r1, [pc, #24]	; (8008a0c <BSP_LED_On+0x1c>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
{
 80089fa:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80089fc:	4c04      	ldr	r4, [pc, #16]	; (8008a10 <BSP_LED_On+0x20>)
 80089fe:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8008a02:	f004 ff79 	bl	800d8f8 <HAL_GPIO_WritePin>
  return ret;
}
 8008a06:	2000      	movs	r0, #0
 8008a08:	bd10      	pop	{r4, pc}
 8008a0a:	bf00      	nop
 8008a0c:	080603f8 	.word	0x080603f8
 8008a10:	08060408 	.word	0x08060408

08008a14 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 8008a14:	4603      	mov	r3, r0
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8008a16:	4906      	ldr	r1, [pc, #24]	; (8008a30 <BSP_LED_Off+0x1c>)
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
{
 8008a1e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8008a20:	4c04      	ldr	r4, [pc, #16]	; (8008a34 <BSP_LED_Off+0x20>)
 8008a22:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8008a26:	f004 ff67 	bl	800d8f8 <HAL_GPIO_WritePin>
  return ret;
}
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	bf00      	nop
 8008a30:	080603f8 	.word	0x080603f8
 8008a34:	08060408 	.word	0x08060408

08008a38 <BSP_LED_Toggle>:
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8008a38:	4a05      	ldr	r2, [pc, #20]	; (8008a50 <BSP_LED_Toggle+0x18>)
 8008a3a:	4906      	ldr	r1, [pc, #24]	; (8008a54 <BSP_LED_Toggle+0x1c>)
{
 8008a3c:	b508      	push	{r3, lr}
 8008a3e:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8008a40:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008a44:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8008a48:	f004 ff5a 	bl	800d900 <HAL_GPIO_TogglePin>
  return ret;
}
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	bd08      	pop	{r3, pc}
 8008a50:	080603f8 	.word	0x080603f8
 8008a54:	08060408 	.word	0x08060408

08008a58 <BSP_PB_Init>:
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8008a58:	4b21      	ldr	r3, [pc, #132]	; (8008ae0 <BSP_PB_Init+0x88>)
 8008a5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008a5e:	f042 0204 	orr.w	r2, r2, #4
{
 8008a62:	b530      	push	{r4, r5, lr}
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8008a64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8008a68:	b089      	sub	sp, #36	; 0x24
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8008a6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8008a6e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8008a72:	f002 0204 	and.w	r2, r2, #4
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8008a76:	9502      	str	r5, [sp, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8008a78:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8008ad8 <BSP_PB_Init+0x80>
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8008a7c:	9201      	str	r2, [sp, #4]
 8008a7e:	9a01      	ldr	r2, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8008a80:	ed8d 7b04 	vstr	d7, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;

  if(ButtonMode == BUTTON_MODE_GPIO)
 8008a84:	b941      	cbnz	r1, 8008a98 <BSP_PB_Init+0x40>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8008a86:	460b      	mov	r3, r1
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8008a88:	4816      	ldr	r0, [pc, #88]	; (8008ae4 <BSP_PB_Init+0x8c>)
 8008a8a:	a902      	add	r1, sp, #8
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8008a8c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8008a8e:	f004 fd1f 	bl	800d4d0 <HAL_GPIO_Init>
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }
  return BSP_ERROR_NONE;
}
 8008a92:	2000      	movs	r0, #0
 8008a94:	b009      	add	sp, #36	; 0x24
 8008a96:	bd30      	pop	{r4, r5, pc}
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8008a98:	4b13      	ldr	r3, [pc, #76]	; (8008ae8 <BSP_PB_Init+0x90>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008a9a:	a902      	add	r1, sp, #8
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	4811      	ldr	r0, [pc, #68]	; (8008ae4 <BSP_PB_Init+0x8c>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8008aa0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008aa2:	f004 fd15 	bl	800d4d0 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8008aa6:	4811      	ldr	r0, [pc, #68]	; (8008aec <BSP_PB_Init+0x94>)
 8008aa8:	4911      	ldr	r1, [pc, #68]	; (8008af0 <BSP_PB_Init+0x98>)
 8008aaa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f004 fd06 	bl	800d4c0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8008ab4:	4a0f      	ldr	r2, [pc, #60]	; (8008af4 <BSP_PB_Init+0x9c>)
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f004 fcf9 	bl	800d4b0 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008abe:	2200      	movs	r2, #0
 8008ac0:	210f      	movs	r1, #15
 8008ac2:	2028      	movs	r0, #40	; 0x28
 8008ac4:	f002 f872 	bl	800abac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8008ac8:	2028      	movs	r0, #40	; 0x28
 8008aca:	f002 f8ad 	bl	800ac28 <HAL_NVIC_EnableIRQ>
}
 8008ace:	2000      	movs	r0, #0
 8008ad0:	b009      	add	sp, #36	; 0x24
 8008ad2:	bd30      	pop	{r4, r5, pc}
 8008ad4:	f3af 8000 	nop.w
 8008ad8:	00000000 	.word	0x00000000
 8008adc:	00000002 	.word	0x00000002
 8008ae0:	58024400 	.word	0x58024400
 8008ae4:	58020800 	.word	0x58020800
 8008ae8:	11110000 	.word	0x11110000
 8008aec:	200063f8 	.word	0x200063f8
 8008af0:	1670000d 	.word	0x1670000d
 8008af4:	08008b11 	.word	0x08008b11

08008af8 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8008af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008afc:	4802      	ldr	r0, [pc, #8]	; (8008b08 <BSP_PB_GetState+0x10>)
{
 8008afe:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8008b00:	f004 fef4 	bl	800d8ec <HAL_GPIO_ReadPin>
}
 8008b04:	bd08      	pop	{r3, pc}
 8008b06:	bf00      	nop
 8008b08:	58020800 	.word	0x58020800

08008b0c <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop

08008b10 <BUTTON_WAKEUP_EXTI_Callback>:
  BSP_PB_Callback(BUTTON_WAKEUP);
 8008b10:	2000      	movs	r0, #0
{
 8008b12:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
 8008b14:	f7ff fffa 	bl	8008b0c <BSP_PB_Callback>
}
 8008b18:	bd08      	pop	{r3, pc}
 8008b1a:	bf00      	nop
 8008b1c:	0000      	movs	r0, r0
	...

08008b20 <BSP_JOY_Init>:
  *                                 with interrupt generation capability
  * @param  JoyPins joystick pins to be initialized
  * @retval BSP status
  */
int32_t BSP_JOY_Init(JOY_TypeDef JOY, JOYMode_TypeDef JoyMode, JOYPin_TypeDef JoyPins)
{
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 8008b24:	4c3e      	ldr	r4, [pc, #248]	; (8008c20 <BSP_JOY_Init+0x100>)
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & (uint32_t)JoyPins) == key_pressed)
    {
      if(JOY == JOY1)
 8008b26:	fab0 f780 	clz	r7, r0
{
 8008b2a:	4616      	mov	r6, r2
 8008b2c:	4688      	mov	r8, r1
  JoyPinsMask |= (uint32_t)JoyPins;
 8008b2e:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 8008b30:	097f      	lsrs	r7, r7, #5
 8008b32:	4d3c      	ldr	r5, [pc, #240]	; (8008c24 <BSP_JOY_Init+0x104>)
  JoyPinsMask |= (uint32_t)JoyPins;
 8008b34:	4313      	orrs	r3, r2
          {
            JOY1_UP_GPIO_CLK_ENABLE();
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8008b36:	f8df a108 	ldr.w	sl, [pc, #264]	; 8008c40 <BSP_JOY_Init+0x120>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8008b3a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008c44 <BSP_JOY_Init+0x124>
{
 8008b3e:	ed2d 8b02 	vpush	{d8}
        gpio_init_structure.Pull = GPIO_PULLUP;
 8008b42:	ed9f 8b35 	vldr	d8, [pc, #212]	; 8008c18 <BSP_JOY_Init+0xf8>
  JoyPinsMask |= (uint32_t)JoyPins;
 8008b46:	6023      	str	r3, [r4, #0]
{
 8008b48:	b08f      	sub	sp, #60	; 0x3c
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 8008b4a:	2400      	movs	r4, #0
    key_pressed = 1UL << joykey;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	40a3      	lsls	r3, r4
      if(JOY == JOY1)
 8008b50:	43b3      	bics	r3, r6
 8008b52:	d100      	bne.n	8008b56 <BSP_JOY_Init+0x36>
 8008b54:	b94f      	cbnz	r7, 8008b6a <BSP_JOY_Init+0x4a>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 8008b56:	3401      	adds	r4, #1
 8008b58:	3504      	adds	r5, #4
 8008b5a:	2c05      	cmp	r4, #5
 8008b5c:	d1f6      	bne.n	8008b4c <BSP_JOY_Init+0x2c>
      }
    }
  }

  return ret;
}
 8008b5e:	2000      	movs	r0, #0
 8008b60:	b00f      	add	sp, #60	; 0x3c
 8008b62:	ecbd 8b02 	vpop	{d8}
 8008b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          JOY1_SEL_GPIO_CLK_ENABLE();
 8008b6a:	4b2f      	ldr	r3, [pc, #188]	; (8008c28 <BSP_JOY_Init+0x108>)
 8008b6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        if(key_pressed == (uint32_t)JOY_SEL)
 8008b80:	2c00      	cmp	r4, #0
 8008b82:	d03a      	beq.n	8008bfa <BSP_JOY_Init+0xda>
        else if(key_pressed == (uint32_t)JOY_DOWN)
 8008b84:	2c01      	cmp	r4, #1
 8008b86:	d03b      	beq.n	8008c00 <BSP_JOY_Init+0xe0>
        else if(key_pressed == (uint32_t) JOY_LEFT)
 8008b88:	2c02      	cmp	r4, #2
 8008b8a:	d03c      	beq.n	8008c06 <BSP_JOY_Init+0xe6>
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 8008b8c:	2c03      	cmp	r4, #3
 8008b8e:	d03d      	beq.n	8008c0c <BSP_JOY_Init+0xec>
            JOY1_UP_GPIO_CLK_ENABLE();
 8008b90:	9307      	str	r3, [sp, #28]
 8008b92:	9b07      	ldr	r3, [sp, #28]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8008b94:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
        gpio_init_structure.Pull = GPIO_PULLUP;
 8008b98:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8008b9c:	9308      	str	r3, [sp, #32]
        if (JoyMode == JOY_MODE_GPIO)
 8008b9e:	f1b8 0f00 	cmp.w	r8, #0
 8008ba2:	d106      	bne.n	8008bb2 <BSP_JOY_Init+0x92>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8008ba4:	a908      	add	r1, sp, #32
 8008ba6:	6828      	ldr	r0, [r5, #0]
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8008ba8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8008bac:	f004 fc90 	bl	800d4d0 <HAL_GPIO_Init>
 8008bb0:	e7d1      	b.n	8008b56 <BSP_JOY_Init+0x36>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8008bb2:	a908      	add	r1, sp, #32
 8008bb4:	6828      	ldr	r0, [r5, #0]
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8008bb6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8008bba:	f004 fc89 	bl	800d4d0 <HAL_GPIO_Init>
         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 8008bbe:	4b1b      	ldr	r3, [pc, #108]	; (8008c2c <BSP_JOY_Init+0x10c>)
 8008bc0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008bc4:	4b1a      	ldr	r3, [pc, #104]	; (8008c30 <BSP_JOY_Init+0x110>)
 8008bc6:	4658      	mov	r0, fp
 8008bc8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8008bcc:	f004 fc78 	bl	800d4c0 <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 8008bd0:	4b18      	ldr	r3, [pc, #96]	; (8008c34 <BSP_JOY_Init+0x114>)
 8008bd2:	4658      	mov	r0, fp
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8008bda:	f004 fc69 	bl	800d4b0 <HAL_EXTI_RegisterCallback>
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 8008bde:	4b16      	ldr	r3, [pc, #88]	; (8008c38 <BSP_JOY_Init+0x118>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	f933 0014 	ldrsh.w	r0, [r3, r4, lsl #1]
 8008be6:	4b15      	ldr	r3, [pc, #84]	; (8008c3c <BSP_JOY_Init+0x11c>)
 8008be8:	9001      	str	r0, [sp, #4]
 8008bea:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8008bee:	f001 ffdd 	bl	800abac <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 8008bf2:	9801      	ldr	r0, [sp, #4]
 8008bf4:	f002 f818 	bl	800ac28 <HAL_NVIC_EnableIRQ>
 8008bf8:	e7ad      	b.n	8008b56 <BSP_JOY_Init+0x36>
          JOY1_SEL_GPIO_CLK_ENABLE();
 8008bfa:	9303      	str	r3, [sp, #12]
 8008bfc:	9b03      	ldr	r3, [sp, #12]
 8008bfe:	e7c9      	b.n	8008b94 <BSP_JOY_Init+0x74>
          JOY1_DOWN_GPIO_CLK_ENABLE();
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	9b04      	ldr	r3, [sp, #16]
 8008c04:	e7c6      	b.n	8008b94 <BSP_JOY_Init+0x74>
          JOY1_LEFT_GPIO_CLK_ENABLE();
 8008c06:	9305      	str	r3, [sp, #20]
 8008c08:	9b05      	ldr	r3, [sp, #20]
 8008c0a:	e7c3      	b.n	8008b94 <BSP_JOY_Init+0x74>
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 8008c0c:	9306      	str	r3, [sp, #24]
 8008c0e:	9b06      	ldr	r3, [sp, #24]
 8008c10:	e7c0      	b.n	8008b94 <BSP_JOY_Init+0x74>
 8008c12:	bf00      	nop
 8008c14:	f3af 8000 	nop.w
 8008c18:	00000001 	.word	0x00000001
 8008c1c:	00000003 	.word	0x00000003
 8008c20:	200063cc 	.word	0x200063cc
 8008c24:	080603bc 	.word	0x080603bc
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	200063d0 	.word	0x200063d0
 8008c30:	080603d0 	.word	0x080603d0
 8008c34:	080603e4 	.word	0x080603e4
 8008c38:	080603a4 	.word	0x080603a4
 8008c3c:	08060390 	.word	0x08060390
 8008c40:	080603b0 	.word	0x080603b0
 8008c44:	11310000 	.word	0x11310000

08008c48 <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
int32_t BSP_JOY_GetState(JOY_TypeDef JOY,uint32_t JoyPin)
{
 8008c48:	b538      	push	{r3, r4, r5, lr}

  uint32_t joykey, key_pressed;
  for (joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008c4a:	4d21      	ldr	r5, [pc, #132]	; (8008cd0 <BSP_JOY_GetState+0x88>)
    {
      if(JOY == JOY1)
 8008c4c:	fab0 f480 	clz	r4, r0
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008c50:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8008c52:	0964      	lsrs	r4, r4, #5
 8008c54:	07db      	lsls	r3, r3, #31
 8008c56:	d500      	bpl.n	8008c5a <BSP_JOY_GetState+0x12>
 8008c58:	b98c      	cbnz	r4, 8008c7e <BSP_JOY_GetState+0x36>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008c5a:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8008c5c:	0798      	lsls	r0, r3, #30
 8008c5e:	d500      	bpl.n	8008c62 <BSP_JOY_GetState+0x1a>
 8008c60:	b9ac      	cbnz	r4, 8008c8e <BSP_JOY_GetState+0x46>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008c62:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8008c64:	0759      	lsls	r1, r3, #29
 8008c66:	d500      	bpl.n	8008c6a <BSP_JOY_GetState+0x22>
 8008c68:	b9cc      	cbnz	r4, 8008c9e <BSP_JOY_GetState+0x56>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008c6a:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8008c6c:	071a      	lsls	r2, r3, #28
 8008c6e:	d500      	bpl.n	8008c72 <BSP_JOY_GetState+0x2a>
 8008c70:	b9ec      	cbnz	r4, 8008cae <BSP_JOY_GetState+0x66>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008c72:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8008c74:	06db      	lsls	r3, r3, #27
 8008c76:	d500      	bpl.n	8008c7a <BSP_JOY_GetState+0x32>
 8008c78:	bb0c      	cbnz	r4, 8008cbe <BSP_JOY_GetState+0x76>
        }
      }
    }
  }
  /* No Joystick key pressed */
  return (int32_t)JOY_NONE;
 8008c7a:	2000      	movs	r0, #0

}
 8008c7c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 8008c7e:	2104      	movs	r1, #4
 8008c80:	4814      	ldr	r0, [pc, #80]	; (8008cd4 <BSP_JOY_GetState+0x8c>)
 8008c82:	f004 fe33 	bl	800d8ec <HAL_GPIO_ReadPin>
 8008c86:	2801      	cmp	r0, #1
 8008c88:	d0e7      	beq.n	8008c5a <BSP_JOY_GetState+0x12>
    key_pressed = 1UL << joykey;
 8008c8a:	2001      	movs	r0, #1
}
 8008c8c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 8008c8e:	2108      	movs	r1, #8
 8008c90:	4810      	ldr	r0, [pc, #64]	; (8008cd4 <BSP_JOY_GetState+0x8c>)
 8008c92:	f004 fe2b 	bl	800d8ec <HAL_GPIO_ReadPin>
 8008c96:	2801      	cmp	r0, #1
 8008c98:	d0e3      	beq.n	8008c62 <BSP_JOY_GetState+0x1a>
    key_pressed = 1UL << joykey;
 8008c9a:	2002      	movs	r0, #2
}
 8008c9c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 8008c9e:	2110      	movs	r1, #16
 8008ca0:	480c      	ldr	r0, [pc, #48]	; (8008cd4 <BSP_JOY_GetState+0x8c>)
 8008ca2:	f004 fe23 	bl	800d8ec <HAL_GPIO_ReadPin>
 8008ca6:	2801      	cmp	r0, #1
 8008ca8:	d0df      	beq.n	8008c6a <BSP_JOY_GetState+0x22>
    key_pressed = 1UL << joykey;
 8008caa:	2004      	movs	r0, #4
}
 8008cac:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 8008cae:	2120      	movs	r1, #32
 8008cb0:	4808      	ldr	r0, [pc, #32]	; (8008cd4 <BSP_JOY_GetState+0x8c>)
 8008cb2:	f004 fe1b 	bl	800d8ec <HAL_GPIO_ReadPin>
 8008cb6:	2801      	cmp	r0, #1
 8008cb8:	d0db      	beq.n	8008c72 <BSP_JOY_GetState+0x2a>
    key_pressed = 1UL << joykey;
 8008cba:	2008      	movs	r0, #8
}
 8008cbc:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 8008cbe:	2140      	movs	r1, #64	; 0x40
 8008cc0:	4804      	ldr	r0, [pc, #16]	; (8008cd4 <BSP_JOY_GetState+0x8c>)
 8008cc2:	f004 fe13 	bl	800d8ec <HAL_GPIO_ReadPin>
 8008cc6:	2801      	cmp	r0, #1
 8008cc8:	d0d7      	beq.n	8008c7a <BSP_JOY_GetState+0x32>
    key_pressed = 1UL << joykey;
 8008cca:	2010      	movs	r0, #16
}
 8008ccc:	bd38      	pop	{r3, r4, r5, pc}
 8008cce:	bf00      	nop
 8008cd0:	200063cc 	.word	0x200063cc
 8008cd4:	58022800 	.word	0x58022800

08008cd8 <BSP_JOY_Callback>:
  UNUSED(JOY);
  UNUSED(JoyPin);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on JoyPin is triggered. */
}
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop

08008cdc <JOY1_UP_EXTI_Callback>:
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_UP);
 8008cdc:	2110      	movs	r1, #16
 8008cde:	2000      	movs	r0, #0
{
 8008ce0:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_UP);
 8008ce2:	f7ff fff9 	bl	8008cd8 <BSP_JOY_Callback>
}
 8008ce6:	bd08      	pop	{r3, pc}

08008ce8 <JOY1_RIGHT_EXTI_Callback>:
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 8008ce8:	2108      	movs	r1, #8
 8008cea:	2000      	movs	r0, #0
{
 8008cec:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 8008cee:	f7ff fff3 	bl	8008cd8 <BSP_JOY_Callback>
}
 8008cf2:	bd08      	pop	{r3, pc}

08008cf4 <JOY1_LEFT_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 8008cf4:	2104      	movs	r1, #4
 8008cf6:	2000      	movs	r0, #0
{
 8008cf8:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 8008cfa:	f7ff ffed 	bl	8008cd8 <BSP_JOY_Callback>
}
 8008cfe:	bd08      	pop	{r3, pc}

08008d00 <JOY1_DOWN_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 8008d00:	2102      	movs	r1, #2
 8008d02:	2000      	movs	r0, #0
{
 8008d04:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 8008d06:	f7ff ffe7 	bl	8008cd8 <BSP_JOY_Callback>
}
 8008d0a:	bd08      	pop	{r3, pc}

08008d0c <JOY1_SEL_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_SEL);
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	2000      	movs	r0, #0
{
 8008d10:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_SEL);
 8008d12:	f7ff ffe1 	bl	8008cd8 <BSP_JOY_Callback>
}
 8008d16:	bd08      	pop	{r3, pc}

08008d18 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8008d18:	4a10      	ldr	r2, [pc, #64]	; (8008d5c <BSP_I2C4_DeInit+0x44>)
{
 8008d1a:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8008d1c:	6813      	ldr	r3, [r2, #0]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8008d22:	b10b      	cbz	r3, 8008d28 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8008d24:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8008d26:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8008d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d2c:	480c      	ldr	r0, [pc, #48]	; (8008d60 <BSP_I2C4_DeInit+0x48>)
 8008d2e:	f004 fd15 	bl	800d75c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8008d32:	480b      	ldr	r0, [pc, #44]	; (8008d60 <BSP_I2C4_DeInit+0x48>)
 8008d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d38:	f004 fd10 	bl	800d75c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8008d3c:	4a09      	ldr	r2, [pc, #36]	; (8008d64 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8008d3e:	480a      	ldr	r0, [pc, #40]	; (8008d68 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8008d40:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8008d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8008d4c:	f004 feec 	bl	800db28 <HAL_I2C_DeInit>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d0e7      	beq.n	8008d24 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8008d54:	f06f 0007 	mvn.w	r0, #7
}
 8008d58:	bd08      	pop	{r3, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20006400 	.word	0x20006400
 8008d60:	58020c00 	.word	0x58020c00
 8008d64:	58024400 	.word	0x58024400
 8008d68:	20006e08 	.word	0x20006e08

08008d6c <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 8008d6c:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008d6e:	2201      	movs	r2, #1
{
 8008d70:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
 8008d72:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8008d76:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008d7a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8008d7e:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
 8008d82:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8008d84:	f004 fe78 	bl	800da78 <HAL_I2C_Init>
 8008d88:	b108      	cbz	r0, 8008d8e <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8008d8a:	2001      	movs	r0, #1
}
 8008d8c:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8008d8e:	4601      	mov	r1, r0
 8008d90:	4620      	mov	r0, r4
 8008d92:	f005 f961 	bl	800e058 <HAL_I2CEx_ConfigAnalogFilter>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d1f7      	bne.n	8008d8a <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f005 f985 	bl	800e0ac <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8008da2:	3800      	subs	r0, #0
 8008da4:	bf18      	it	ne
 8008da6:	2001      	movne	r0, #1
}
 8008da8:	bd10      	pop	{r4, pc}
 8008daa:	bf00      	nop

08008dac <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 8008dac:	4b91      	ldr	r3, [pc, #580]	; (8008ff4 <BSP_I2C4_Init+0x248>)
  hbus_i2c4.Instance = BUS_I2C4;
 8008dae:	4892      	ldr	r0, [pc, #584]	; (8008ff8 <BSP_I2C4_Init+0x24c>)
 8008db0:	4a92      	ldr	r2, [pc, #584]	; (8008ffc <BSP_I2C4_Init+0x250>)
  if (I2c4InitCounter == 0U)
 8008db2:	6819      	ldr	r1, [r3, #0]
{
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	b09d      	sub	sp, #116	; 0x74
  hbus_i2c4.Instance = BUS_I2C4;
 8008dba:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 8008dbc:	9103      	str	r1, [sp, #12]
 8008dbe:	b119      	cbz	r1, 8008dc8 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
 8008dc0:	2000      	movs	r0, #0
}
 8008dc2:	b01d      	add	sp, #116	; 0x74
 8008dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8008dc8:	2201      	movs	r2, #1
 8008dca:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8008dcc:	f005 f93e 	bl	800e04c <HAL_I2C_GetState>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d1f5      	bne.n	8008dc0 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8008dd4:	4c8a      	ldr	r4, [pc, #552]	; (8009000 <BSP_I2C4_Init+0x254>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8008dd6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008dda:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8008ddc:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8008dde:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8008de2:	2600      	movs	r6, #0
 8008de4:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8008de6:	f043 0308 	orr.w	r3, r3, #8
 8008dea:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008dee:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	9313      	str	r3, [sp, #76]	; 0x4c
 8008df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8008dfa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8008dfe:	f043 0308 	orr.w	r3, r3, #8
 8008e02:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008e06:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8008e0a:	951a      	str	r5, [sp, #104]	; 0x68
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8008e0c:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8008e10:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8008e14:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8008e16:	a916      	add	r1, sp, #88	; 0x58
 8008e18:	487a      	ldr	r0, [pc, #488]	; (8009004 <BSP_I2C4_Init+0x258>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8008e1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8008e1c:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8008e20:	f004 fb56 	bl	800d4d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8008e24:	2312      	movs	r3, #18
 8008e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8008e2a:	a916      	add	r1, sp, #88	; 0x58
 8008e2c:	4875      	ldr	r0, [pc, #468]	; (8009004 <BSP_I2C4_Init+0x258>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8008e2e:	951a      	str	r5, [sp, #104]	; 0x68
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8008e30:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008e34:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8008e38:	f004 fb4a 	bl	800d4d0 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8008e3c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8008e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e44:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8008e48:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8008e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e50:	9315      	str	r3, [sp, #84]	; 0x54
 8008e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_FORCE_RESET();
 8008e54:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e5c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8008e60:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e68:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8008e6c:	f006 fac0 	bl	800f3f0 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8008e70:	2800      	cmp	r0, #0
 8008e72:	f000 81af 	beq.w	80091d4 <BSP_I2C4_Init+0x428>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008e76:	4b64      	ldr	r3, [pc, #400]	; (8009008 <BSP_I2C4_Init+0x25c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8008e78:	f04f 0a10 	mov.w	sl, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8008e7c:	9d03      	ldr	r5, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008e7e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008e82:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8009010 <BSP_I2C4_Init+0x264>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008e86:	fbb3 f2f0 	udiv	r2, r3, r0
 8008e8a:	4610      	mov	r0, r2
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8008e8c:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008e90:	9202      	str	r2, [sp, #8]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8008e92:	f06f 021d 	mvn.w	r2, #29
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8008e96:	eb00 0140 	add.w	r1, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8008e9a:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8008e9e:	1a52      	subs	r2, r2, r1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8008ea0:	4601      	mov	r1, r0
 8008ea2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8008ea6:	0040      	lsls	r0, r0, #1
 8008ea8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8008eac:	ea22 76e2 	bic.w	r6, r2, r2, asr #31
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8008eb0:	460a      	mov	r2, r1
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8008eb2:	9011      	str	r0, [sp, #68]	; 0x44
 8008eb4:	0059      	lsls	r1, r3, #1
 8008eb6:	4b55      	ldr	r3, [pc, #340]	; (800900c <BSP_I2C4_Init+0x260>)
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008eb8:	4693      	mov	fp, r2
 8008eba:	681b      	ldr	r3, [r3, #0]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8008ebc:	4688      	mov	r8, r1
 8008ebe:	9110      	str	r1, [sp, #64]	; 0x40
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8008ec0:	ebb6 0f4b 	cmp.w	r6, fp, lsl #1
 8008ec4:	46dc      	mov	ip, fp
 8008ec6:	eb0b 024b 	add.w	r2, fp, fp, lsl #1
 8008eca:	bf94      	ite	ls
 8008ecc:	2001      	movls	r0, #1
 8008ece:	2000      	movhi	r0, #0
 8008ed0:	ebb4 0f4b 	cmp.w	r4, fp, lsl #1
 8008ed4:	f000 0001 	and.w	r0, r0, #1
 8008ed8:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
 8008edc:	bf38      	it	cc
 8008ede:	2000      	movcc	r0, #0
 8008ee0:	4296      	cmp	r6, r2
 8008ee2:	eb0b 0e41 	add.w	lr, fp, r1, lsl #1
 8008ee6:	9001      	str	r0, [sp, #4]
 8008ee8:	bf8c      	ite	hi
 8008eea:	2000      	movhi	r0, #0
 8008eec:	2001      	movls	r0, #1
 8008eee:	4294      	cmp	r4, r2
 8008ef0:	bf38      	it	cc
 8008ef2:	2000      	movcc	r0, #0
 8008ef4:	ebb6 0f8b 	cmp.w	r6, fp, lsl #2
 8008ef8:	9006      	str	r0, [sp, #24]
 8008efa:	eb0b 0082 	add.w	r0, fp, r2, lsl #2
 8008efe:	9005      	str	r0, [sp, #20]
 8008f00:	bf94      	ite	ls
 8008f02:	2001      	movls	r0, #1
 8008f04:	2000      	movhi	r0, #0
 8008f06:	ebb4 0f8b 	cmp.w	r4, fp, lsl #2
 8008f0a:	f000 0701 	and.w	r7, r0, #1
 8008f0e:	bf38      	it	cc
 8008f10:	2700      	movcc	r7, #0
 8008f12:	428e      	cmp	r6, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8008f14:	f04f 0000 	mov.w	r0, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8008f18:	9707      	str	r7, [sp, #28]
 8008f1a:	bf8c      	ite	hi
 8008f1c:	2700      	movhi	r7, #0
 8008f1e:	2701      	movls	r7, #1
 8008f20:	428c      	cmp	r4, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8008f22:	9004      	str	r0, [sp, #16]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8008f24:	bf38      	it	cc
 8008f26:	2700      	movcc	r7, #0
 8008f28:	ebb6 0f42 	cmp.w	r6, r2, lsl #1
 8008f2c:	bf98      	it	ls
 8008f2e:	2001      	movls	r0, #1
 8008f30:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
 8008f34:	9708      	str	r7, [sp, #32]
 8008f36:	f000 0001 	and.w	r0, r0, #1
 8008f3a:	bf38      	it	cc
 8008f3c:	2000      	movcc	r0, #0
 8008f3e:	9009      	str	r0, [sp, #36]	; 0x24
 8008f40:	ebcb 00cb 	rsb	r0, fp, fp, lsl #3
 8008f44:	4286      	cmp	r6, r0
 8008f46:	bf8c      	ite	hi
 8008f48:	2700      	movhi	r7, #0
 8008f4a:	2701      	movls	r7, #1
 8008f4c:	4284      	cmp	r4, r0
 8008f4e:	bf38      	it	cc
 8008f50:	2700      	movcc	r7, #0
 8008f52:	ebb6 0fcb 	cmp.w	r6, fp, lsl #3
 8008f56:	4638      	mov	r0, r7
 8008f58:	bf94      	ite	ls
 8008f5a:	2001      	movls	r0, #1
 8008f5c:	2000      	movhi	r0, #0
 8008f5e:	970a      	str	r7, [sp, #40]	; 0x28
 8008f60:	ebb4 0fcb 	cmp.w	r4, fp, lsl #3
 8008f64:	f000 0701 	and.w	r7, r0, #1
 8008f68:	eb0b 00cb 	add.w	r0, fp, fp, lsl #3
 8008f6c:	bf38      	it	cc
 8008f6e:	2700      	movcc	r7, #0
 8008f70:	4286      	cmp	r6, r0
 8008f72:	970b      	str	r7, [sp, #44]	; 0x2c
 8008f74:	bf8c      	ite	hi
 8008f76:	2700      	movhi	r7, #0
 8008f78:	2701      	movls	r7, #1
 8008f7a:	4284      	cmp	r4, r0
 8008f7c:	bf38      	it	cc
 8008f7e:	2700      	movcc	r7, #0
 8008f80:	ebb6 0f41 	cmp.w	r6, r1, lsl #1
 8008f84:	4638      	mov	r0, r7
 8008f86:	bf94      	ite	ls
 8008f88:	2001      	movls	r0, #1
 8008f8a:	2000      	movhi	r0, #0
 8008f8c:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
 8008f90:	970c      	str	r7, [sp, #48]	; 0x30
 8008f92:	f04f 0700 	mov.w	r7, #0
 8008f96:	f000 0101 	and.w	r1, r0, #1
 8008f9a:	bf38      	it	cc
 8008f9c:	2100      	movcc	r1, #0
 8008f9e:	4576      	cmp	r6, lr
 8008fa0:	9805      	ldr	r0, [sp, #20]
 8008fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8008fa4:	bf8c      	ite	hi
 8008fa6:	2100      	movhi	r1, #0
 8008fa8:	2101      	movls	r1, #1
 8008faa:	4574      	cmp	r4, lr
 8008fac:	bf38      	it	cc
 8008fae:	2100      	movcc	r1, #0
 8008fb0:	ebb6 0f82 	cmp.w	r6, r2, lsl #2
 8008fb4:	910e      	str	r1, [sp, #56]	; 0x38
 8008fb6:	bf94      	ite	ls
 8008fb8:	2101      	movls	r1, #1
 8008fba:	2100      	movhi	r1, #0
 8008fbc:	ebb4 0f82 	cmp.w	r4, r2, lsl #2
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	f001 0e01 	and.w	lr, r1, #1
 8008fc6:	bf38      	it	cc
 8008fc8:	f04f 0e00 	movcc.w	lr, #0
 8008fcc:	4286      	cmp	r6, r0
 8008fce:	bf8c      	ite	hi
 8008fd0:	2200      	movhi	r2, #0
 8008fd2:	2201      	movls	r2, #1
 8008fd4:	4284      	cmp	r4, r0
 8008fd6:	bf38      	it	cc
 8008fd8:	2200      	movcc	r2, #0
 8008fda:	920f      	str	r2, [sp, #60]	; 0x3c
 8008fdc:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
 8008fe0:	4296      	cmp	r6, r2
 8008fe2:	bf8c      	ite	hi
 8008fe4:	2100      	movhi	r1, #0
 8008fe6:	2101      	movls	r1, #1
 8008fe8:	4294      	cmp	r4, r2
 8008fea:	bf38      	it	cc
 8008fec:	2100      	movcc	r1, #0
 8008fee:	9105      	str	r1, [sp, #20]
 8008ff0:	e014      	b.n	800901c <BSP_I2C4_Init+0x270>
 8008ff2:	bf00      	nop
 8008ff4:	20006400 	.word	0x20006400
 8008ff8:	20006e08 	.word	0x20006e08
 8008ffc:	58001c00 	.word	0x58001c00
 8009000:	58024400 	.word	0x58024400
 8009004:	58020c00 	.word	0x58020c00
 8009008:	3b9aca00 	.word	0x3b9aca00
 800900c:	20006e04 	.word	0x20006e04
 8009010:	20006404 	.word	0x20006404
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009014:	2f10      	cmp	r7, #16
 8009016:	44dc      	add	ip, fp
 8009018:	f000 8217 	beq.w	800944a <BSP_I2C4_Init+0x69e>
      if (tscldel >= (uint32_t)tscldel_min)
 800901c:	f240 3179 	movw	r1, #889	; 0x379
 8009020:	463a      	mov	r2, r7
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8009022:	3701      	adds	r7, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8009024:	458c      	cmp	ip, r1
 8009026:	d9f5      	bls.n	8009014 <BSP_I2C4_Init+0x268>
            if(presc != prev_presc)
 8009028:	2e00      	cmp	r6, #0
 800902a:	f040 80dd 	bne.w	80091e8 <BSP_I2C4_Init+0x43c>
 800902e:	45aa      	cmp	sl, r5
 8009030:	f000 80da 	beq.w	80091e8 <BSP_I2C4_Init+0x43c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009034:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009038:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800903a:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800903c:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009040:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009042:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009046:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009048:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800904a:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800904c:	f200 817c 	bhi.w	8009348 <BSP_I2C4_Init+0x59c>
 8009050:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 8009052:	45aa      	cmp	sl, r5
 8009054:	d012      	beq.n	800907c <BSP_I2C4_Init+0x2d0>
 8009056:	9901      	ldr	r1, [sp, #4]
 8009058:	2900      	cmp	r1, #0
 800905a:	f000 80e1 	beq.w	8009220 <BSP_I2C4_Init+0x474>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800905e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009062:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009064:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009066:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800906a:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800906c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009070:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009072:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009074:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009076:	f200 8167 	bhi.w	8009348 <BSP_I2C4_Init+0x59c>
 800907a:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800907c:	4555      	cmp	r5, sl
 800907e:	d066      	beq.n	800914e <BSP_I2C4_Init+0x3a2>
 8009080:	9907      	ldr	r1, [sp, #28]
 8009082:	2900      	cmp	r1, #0
 8009084:	f000 80e1 	beq.w	800924a <BSP_I2C4_Init+0x49e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009088:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800908c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800908e:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009090:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009094:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009096:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800909a:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800909c:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800909e:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80090a0:	f200 8152 	bhi.w	8009348 <BSP_I2C4_Init+0x59c>
 80090a4:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80090a6:	4555      	cmp	r5, sl
 80090a8:	d051      	beq.n	800914e <BSP_I2C4_Init+0x3a2>
 80090aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090ac:	2900      	cmp	r1, #0
 80090ae:	f000 80e1 	beq.w	8009274 <BSP_I2C4_Init+0x4c8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80090b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80090b6:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80090b8:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80090ba:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80090be:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80090c0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80090c4:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80090c6:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80090c8:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80090ca:	f200 813d 	bhi.w	8009348 <BSP_I2C4_Init+0x59c>
 80090ce:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80090d0:	4555      	cmp	r5, sl
 80090d2:	d03c      	beq.n	800914e <BSP_I2C4_Init+0x3a2>
 80090d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090d6:	2900      	cmp	r1, #0
 80090d8:	f000 80e1 	beq.w	800929e <BSP_I2C4_Init+0x4f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80090dc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80090e0:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80090e2:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80090e4:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80090e8:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80090ea:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80090ee:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80090f0:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80090f2:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80090f4:	f200 8128 	bhi.w	8009348 <BSP_I2C4_Init+0x59c>
 80090f8:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80090fa:	4555      	cmp	r5, sl
 80090fc:	d027      	beq.n	800914e <BSP_I2C4_Init+0x3a2>
 80090fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009100:	2900      	cmp	r1, #0
 8009102:	f000 80e1 	beq.w	80092c8 <BSP_I2C4_Init+0x51c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009106:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800910a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800910c:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800910e:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009112:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009114:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009118:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800911a:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800911c:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800911e:	f200 8113 	bhi.w	8009348 <BSP_I2C4_Init+0x59c>
 8009122:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 8009124:	4555      	cmp	r5, sl
 8009126:	d012      	beq.n	800914e <BSP_I2C4_Init+0x3a2>
 8009128:	f1be 0f00 	cmp.w	lr, #0
 800912c:	f000 80e1 	beq.w	80092f2 <BSP_I2C4_Init+0x546>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009130:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009134:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009136:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009138:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800913c:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800913e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009142:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009144:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009146:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009148:	f200 80fe 	bhi.w	8009348 <BSP_I2C4_Init+0x59c>
 800914c:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800914e:	4546      	cmp	r6, r8
 8009150:	bf8c      	ite	hi
 8009152:	2100      	movhi	r1, #0
 8009154:	2101      	movls	r1, #1
 8009156:	4544      	cmp	r4, r8
 8009158:	bf38      	it	cc
 800915a:	2100      	movcc	r1, #0
 800915c:	2900      	cmp	r1, #0
 800915e:	f000 80dd 	beq.w	800931c <BSP_I2C4_Init+0x570>
 8009162:	4555      	cmp	r5, sl
 8009164:	f43f af56 	beq.w	8009014 <BSP_I2C4_Init+0x268>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009168:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800916c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800916e:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
 8009172:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009176:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009178:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800917a:	f04f 020e 	mov.w	r2, #14
 800917e:	608a      	str	r2, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009180:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009182:	f200 80e1 	bhi.w	8009348 <BSP_I2C4_Init+0x59c>
 8009186:	46aa      	mov	sl, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009188:	e744      	b.n	8009014 <BSP_I2C4_Init+0x268>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800918a:	9a07      	ldr	r2, [sp, #28]
 800918c:	9b08      	ldr	r3, [sp, #32]
 800918e:	3214      	adds	r2, #20
 8009190:	3301      	adds	r3, #1
 8009192:	9207      	str	r2, [sp, #28]
 8009194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009196:	9308      	str	r3, [sp, #32]
 8009198:	4293      	cmp	r3, r2
 800919a:	f040 80f4 	bne.w	8009386 <BSP_I2C4_Init+0x5da>
        if (idx < I2C_VALID_TIMING_NBR)
 800919e:	297f      	cmp	r1, #127	; 0x7f
 80091a0:	d818      	bhi.n	80091d4 <BSP_I2C4_Init+0x428>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80091a2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80091a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091a8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80091ac:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80091b0:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80091b2:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80091b4:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80091b6:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80091ba:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80091be:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80091c2:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80091c4:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80091c6:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80091c8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80091cc:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80091ce:	430b      	orrs	r3, r1
 80091d0:	4313      	orrs	r3, r2
 80091d2:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80091d4:	9903      	ldr	r1, [sp, #12]
 80091d6:	48a5      	ldr	r0, [pc, #660]	; (800946c <BSP_I2C4_Init+0x6c0>)
 80091d8:	f7ff fdc8 	bl	8008d6c <MX_I2C4_Init>
 80091dc:	2800      	cmp	r0, #0
 80091de:	f43f adef 	beq.w	8008dc0 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
 80091e2:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80091e6:	e5ec      	b.n	8008dc2 <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
 80091e8:	455c      	cmp	r4, fp
 80091ea:	bf34      	ite	cc
 80091ec:	2100      	movcc	r1, #0
 80091ee:	2101      	movcs	r1, #1
 80091f0:	455e      	cmp	r6, fp
 80091f2:	bf88      	it	hi
 80091f4:	2100      	movhi	r1, #0
 80091f6:	2900      	cmp	r1, #0
 80091f8:	f43f af2b 	beq.w	8009052 <BSP_I2C4_Init+0x2a6>
 80091fc:	45aa      	cmp	sl, r5
 80091fe:	f43f af3d 	beq.w	800907c <BSP_I2C4_Init+0x2d0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009202:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009206:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009208:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800920a:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800920e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009210:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009214:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009216:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009218:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800921a:	f200 8095 	bhi.w	8009348 <BSP_I2C4_Init+0x59c>
 800921e:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 8009220:	45aa      	cmp	sl, r5
 8009222:	f43f af2b 	beq.w	800907c <BSP_I2C4_Init+0x2d0>
 8009226:	9906      	ldr	r1, [sp, #24]
 8009228:	2900      	cmp	r1, #0
 800922a:	f43f af27 	beq.w	800907c <BSP_I2C4_Init+0x2d0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800922e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009232:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009234:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009236:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800923a:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800923c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009240:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009242:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009244:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009246:	d87f      	bhi.n	8009348 <BSP_I2C4_Init+0x59c>
 8009248:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800924a:	4555      	cmp	r5, sl
 800924c:	f43f af7f 	beq.w	800914e <BSP_I2C4_Init+0x3a2>
 8009250:	9908      	ldr	r1, [sp, #32]
 8009252:	2900      	cmp	r1, #0
 8009254:	f43f af27 	beq.w	80090a6 <BSP_I2C4_Init+0x2fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009258:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800925c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800925e:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009260:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009264:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009266:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800926a:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800926c:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800926e:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009270:	d86a      	bhi.n	8009348 <BSP_I2C4_Init+0x59c>
 8009272:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 8009274:	4555      	cmp	r5, sl
 8009276:	f43f af6a 	beq.w	800914e <BSP_I2C4_Init+0x3a2>
 800927a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800927c:	2900      	cmp	r1, #0
 800927e:	f43f af27 	beq.w	80090d0 <BSP_I2C4_Init+0x324>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009282:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009286:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009288:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800928a:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800928e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009290:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009294:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009296:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009298:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800929a:	d855      	bhi.n	8009348 <BSP_I2C4_Init+0x59c>
 800929c:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800929e:	4555      	cmp	r5, sl
 80092a0:	f43f af55 	beq.w	800914e <BSP_I2C4_Init+0x3a2>
 80092a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092a6:	2900      	cmp	r1, #0
 80092a8:	f43f af27 	beq.w	80090fa <BSP_I2C4_Init+0x34e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80092ac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80092b0:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80092b2:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80092b4:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80092b8:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80092ba:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80092be:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80092c0:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80092c2:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80092c4:	d840      	bhi.n	8009348 <BSP_I2C4_Init+0x59c>
 80092c6:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80092c8:	4555      	cmp	r5, sl
 80092ca:	f43f af40 	beq.w	800914e <BSP_I2C4_Init+0x3a2>
 80092ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80092d0:	2900      	cmp	r1, #0
 80092d2:	f43f af27 	beq.w	8009124 <BSP_I2C4_Init+0x378>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80092d6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80092da:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80092dc:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80092de:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80092e2:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80092e4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80092e8:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80092ea:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80092ec:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80092ee:	d82b      	bhi.n	8009348 <BSP_I2C4_Init+0x59c>
 80092f0:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 80092f2:	4555      	cmp	r5, sl
 80092f4:	f43f af2b 	beq.w	800914e <BSP_I2C4_Init+0x3a2>
 80092f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092fa:	2900      	cmp	r1, #0
 80092fc:	f43f af27 	beq.w	800914e <BSP_I2C4_Init+0x3a2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009300:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009304:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009306:	200d      	movs	r0, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009308:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800930c:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800930e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009312:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009314:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009316:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009318:	d816      	bhi.n	8009348 <BSP_I2C4_Init+0x59c>
 800931a:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800931c:	4555      	cmp	r5, sl
 800931e:	f43f ae79 	beq.w	8009014 <BSP_I2C4_Init+0x268>
 8009322:	9905      	ldr	r1, [sp, #20]
 8009324:	2900      	cmp	r1, #0
 8009326:	f43f ae75 	beq.w	8009014 <BSP_I2C4_Init+0x268>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800932a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800932e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009330:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
 8009334:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009338:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800933a:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800933c:	f04f 020f 	mov.w	r2, #15
 8009340:	608a      	str	r2, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009342:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009344:	f67f af1f 	bls.w	8009186 <BSP_I2C4_Init+0x3da>
 8009348:	4a49      	ldr	r2, [pc, #292]	; (8009470 <BSP_I2C4_Init+0x6c4>)
 800934a:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
 800934e:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009352:	f241 220c 	movw	r2, #4620	; 0x120c
 8009356:	f640 769f 	movw	r6, #3999	; 0xf9f
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800935a:	f242 7a10 	movw	sl, #10000	; 0x2710
 800935e:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009360:	f241 0b47 	movw	fp, #4167	; 0x1047
 8009364:	920c      	str	r2, [sp, #48]	; 0x30
 8009366:	9a02      	ldr	r2, [sp, #8]
 8009368:	4296      	cmp	r6, r2
 800936a:	bf38      	it	cc
 800936c:	4616      	movcc	r6, r2
 800936e:	4a41      	ldr	r2, [pc, #260]	; (8009474 <BSP_I2C4_Init+0x6c8>)
 8009370:	189a      	adds	r2, r3, r2
 8009372:	3332      	adds	r3, #50	; 0x32
 8009374:	930d      	str	r3, [sp, #52]	; 0x34
 8009376:	4b40      	ldr	r3, [pc, #256]	; (8009478 <BSP_I2C4_Init+0x6cc>)
 8009378:	920e      	str	r2, [sp, #56]	; 0x38
 800937a:	9307      	str	r3, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800937c:	2300      	movs	r3, #0
 800937e:	9308      	str	r3, [sp, #32]
 8009380:	f04f 33ff 	mov.w	r3, #4294967295
 8009384:	4619      	mov	r1, r3
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009386:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009388:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800938c:	6818      	ldr	r0, [r3, #0]
 800938e:	9b02      	ldr	r3, [sp, #8]
 8009390:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009396:	1a1b      	subs	r3, r3, r0
 8009398:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800939c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800939e:	eb03 0e00 	add.w	lr, r3, r0
 80093a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093a4:	4403      	add	r3, r0
 80093a6:	9309      	str	r3, [sp, #36]	; 0x24
 80093a8:	e006      	b.n	80093b8 <BSP_I2C4_Init+0x60c>
 80093aa:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 80093ae:	4486      	add	lr, r0
 80093b0:	eba9 0900 	sub.w	r9, r9, r0
 80093b4:	f43f aee9 	beq.w	800918a <BSP_I2C4_Init+0x3de>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80093b8:	f241 225c 	movw	r2, #4700	; 0x125c
 80093bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80093c0:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80093c4:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80093c8:	4596      	cmp	lr, r2
 80093ca:	d9ee      	bls.n	80093aa <BSP_I2C4_Init+0x5fe>
 80093cc:	9a02      	ldr	r2, [sp, #8]
 80093ce:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 80093d2:	d2ea      	bcs.n	80093aa <BSP_I2C4_Init+0x5fe>
 80093d4:	f242 4c4a 	movw	ip, #9290	; 0x244a
 80093d8:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80093da:	f8cd 8010 	str.w	r8, [sp, #16]
 80093de:	2200      	movs	r2, #0
 80093e0:	ebac 0c03 	sub.w	ip, ip, r3
 80093e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e6:	f8cd e014 	str.w	lr, [sp, #20]
 80093ea:	4473      	add	r3, lr
 80093ec:	f8cd 9018 	str.w	r9, [sp, #24]
 80093f0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80093f4:	468e      	mov	lr, r1
 80093f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093fa:	e005      	b.n	8009408 <BSP_I2C4_Init+0x65c>
 80093fc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009400:	eba4 0400 	sub.w	r4, r4, r0
 8009404:	4403      	add	r3, r0
 8009406:	d01a      	beq.n	800943e <BSP_I2C4_Init+0x692>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009408:	eb0c 0103 	add.w	r1, ip, r3
 800940c:	4617      	mov	r7, r2
 800940e:	f203 6583 	addw	r5, r3, #1667	; 0x683
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8009412:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009414:	428e      	cmp	r6, r1
 8009416:	d2f1      	bcs.n	80093fc <BSP_I2C4_Init+0x650>
 8009418:	455d      	cmp	r5, fp
 800941a:	d8ef      	bhi.n	80093fc <BSP_I2C4_Init+0x650>
            if (error < 0)
 800941c:	ea33 0123 	bics.w	r1, r3, r3, asr #32
 8009420:	bf28      	it	cs
 8009422:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
 8009424:	458a      	cmp	sl, r1
 8009426:	d9e9      	bls.n	80093fc <BSP_I2C4_Init+0x650>
              I2c_valid_timing[count].sclh = sclh;
 8009428:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800942a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
 800942e:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
 8009430:	46ce      	mov	lr, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009432:	eba4 0400 	sub.w	r4, r4, r0
 8009436:	4403      	add	r3, r0
              I2c_valid_timing[count].sclh = sclh;
 8009438:	e9c8 7103 	strd	r7, r1, [r8, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800943c:	d1e4      	bne.n	8009408 <BSP_I2C4_Init+0x65c>
 800943e:	4671      	mov	r1, lr
 8009440:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009444:	e9dd e905 	ldrd	lr, r9, [sp, #20]
 8009448:	e7af      	b.n	80093aa <BSP_I2C4_Init+0x5fe>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800944a:	9a02      	ldr	r2, [sp, #8]
 800944c:	3501      	adds	r5, #1
 800944e:	4493      	add	fp, r2
 8009450:	2d10      	cmp	r5, #16
 8009452:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009454:	4490      	add	r8, r2
 8009456:	f47f ad33 	bne.w	8008ec0 <BSP_I2C4_Init+0x114>
 800945a:	4a05      	ldr	r2, [pc, #20]	; (8009470 <BSP_I2C4_Init+0x6c4>)
 800945c:	930a      	str	r3, [sp, #40]	; 0x28
 800945e:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009460:	2b00      	cmp	r3, #0
 8009462:	f43f aeb7 	beq.w	80091d4 <BSP_I2C4_Init+0x428>
 8009466:	4b04      	ldr	r3, [pc, #16]	; (8009478 <BSP_I2C4_Init+0x6cc>)
 8009468:	930b      	str	r3, [sp, #44]	; 0x2c
 800946a:	e771      	b.n	8009350 <BSP_I2C4_Init+0x5a4>
 800946c:	20006e08 	.word	0x20006e08
 8009470:	20006e04 	.word	0x20006e04
 8009474:	ffffdbb6 	.word	0xffffdbb6
 8009478:	20006404 	.word	0x20006404

0800947c <BSP_I2C4_WriteReg>:
{
 800947c:	b530      	push	{r4, r5, lr}
 800947e:	4614      	mov	r4, r2
 8009480:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009482:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8009486:	460a      	mov	r2, r1
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	4601      	mov	r1, r0
 800948c:	2301      	movs	r3, #1
 800948e:	4809      	ldr	r0, [pc, #36]	; (80094b4 <BSP_I2C4_WriteReg+0x38>)
 8009490:	9502      	str	r5, [sp, #8]
 8009492:	9400      	str	r4, [sp, #0]
 8009494:	f004 fb62 	bl	800db5c <HAL_I2C_Mem_Write>
 8009498:	b908      	cbnz	r0, 800949e <BSP_I2C4_WriteReg+0x22>
}
 800949a:	b005      	add	sp, #20
 800949c:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800949e:	4805      	ldr	r0, [pc, #20]	; (80094b4 <BSP_I2C4_WriteReg+0x38>)
 80094a0:	f004 fdd8 	bl	800e054 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80094a4:	2804      	cmp	r0, #4
 80094a6:	bf0c      	ite	eq
 80094a8:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 80094ac:	f06f 0003 	mvnne.w	r0, #3
 80094b0:	e7f3      	b.n	800949a <BSP_I2C4_WriteReg+0x1e>
 80094b2:	bf00      	nop
 80094b4:	20006e08 	.word	0x20006e08

080094b8 <BSP_I2C4_ReadReg>:
{
 80094b8:	b530      	push	{r4, r5, lr}
 80094ba:	4614      	mov	r4, r2
 80094bc:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80094be:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80094c2:	460a      	mov	r2, r1
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	4601      	mov	r1, r0
 80094c8:	2301      	movs	r3, #1
 80094ca:	4809      	ldr	r0, [pc, #36]	; (80094f0 <BSP_I2C4_ReadReg+0x38>)
 80094cc:	9502      	str	r5, [sp, #8]
 80094ce:	9400      	str	r4, [sp, #0]
 80094d0:	f004 fc6e 	bl	800ddb0 <HAL_I2C_Mem_Read>
 80094d4:	b908      	cbnz	r0, 80094da <BSP_I2C4_ReadReg+0x22>
}
 80094d6:	b005      	add	sp, #20
 80094d8:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80094da:	4805      	ldr	r0, [pc, #20]	; (80094f0 <BSP_I2C4_ReadReg+0x38>)
 80094dc:	f004 fdba 	bl	800e054 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80094e0:	2804      	cmp	r0, #4
 80094e2:	bf0c      	ite	eq
 80094e4:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 80094e8:	f06f 0003 	mvnne.w	r0, #3
 80094ec:	e7f3      	b.n	80094d6 <BSP_I2C4_ReadReg+0x1e>
 80094ee:	bf00      	nop
 80094f0:	20006e08 	.word	0x20006e08

080094f4 <BSP_I2C4_WriteReg16>:
{
 80094f4:	b530      	push	{r4, r5, lr}
 80094f6:	4614      	mov	r4, r2
 80094f8:	b085      	sub	sp, #20
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80094fa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80094fe:	460a      	mov	r2, r1
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	4601      	mov	r1, r0
 8009504:	2302      	movs	r3, #2
 8009506:	4809      	ldr	r0, [pc, #36]	; (800952c <BSP_I2C4_WriteReg16+0x38>)
 8009508:	9502      	str	r5, [sp, #8]
 800950a:	9400      	str	r4, [sp, #0]
 800950c:	f004 fb26 	bl	800db5c <HAL_I2C_Mem_Write>
 8009510:	b908      	cbnz	r0, 8009516 <BSP_I2C4_WriteReg16+0x22>
}
 8009512:	b005      	add	sp, #20
 8009514:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009516:	4805      	ldr	r0, [pc, #20]	; (800952c <BSP_I2C4_WriteReg16+0x38>)
 8009518:	f004 fd9c 	bl	800e054 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800951c:	2804      	cmp	r0, #4
 800951e:	bf0c      	ite	eq
 8009520:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8009524:	f06f 0003 	mvnne.w	r0, #3
 8009528:	e7f3      	b.n	8009512 <BSP_I2C4_WriteReg16+0x1e>
 800952a:	bf00      	nop
 800952c:	20006e08 	.word	0x20006e08

08009530 <BSP_I2C4_ReadReg16>:
{
 8009530:	b530      	push	{r4, r5, lr}
 8009532:	4614      	mov	r4, r2
 8009534:	b085      	sub	sp, #20
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009536:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800953a:	460a      	mov	r2, r1
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	4601      	mov	r1, r0
 8009540:	2302      	movs	r3, #2
 8009542:	4809      	ldr	r0, [pc, #36]	; (8009568 <BSP_I2C4_ReadReg16+0x38>)
 8009544:	9502      	str	r5, [sp, #8]
 8009546:	9400      	str	r4, [sp, #0]
 8009548:	f004 fc32 	bl	800ddb0 <HAL_I2C_Mem_Read>
 800954c:	b908      	cbnz	r0, 8009552 <BSP_I2C4_ReadReg16+0x22>
}
 800954e:	b005      	add	sp, #20
 8009550:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009552:	4805      	ldr	r0, [pc, #20]	; (8009568 <BSP_I2C4_ReadReg16+0x38>)
 8009554:	f004 fd7e 	bl	800e054 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009558:	2804      	cmp	r0, #4
 800955a:	bf0c      	ite	eq
 800955c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8009560:	f06f 0003 	mvnne.w	r0, #3
 8009564:	e7f3      	b.n	800954e <BSP_I2C4_ReadReg16+0x1e>
 8009566:	bf00      	nop
 8009568:	20006e08 	.word	0x20006e08

0800956c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800956c:	f001 bae6 	b.w	800ab3c <HAL_GetTick>

08009570 <BSP_CAMERA_DeInit>:
  * @brief  DeInitializes the camera.
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DeInit(uint32_t Instance)
{
 8009570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009572:	b089      	sub	sp, #36	; 0x24
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8009574:	2800      	cmp	r0, #0
 8009576:	d171      	bne.n	800965c <BSP_CAMERA_DeInit+0xec>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if((Camera_CompObj == NULL)||(Camera_Drv == NULL))
 8009578:	4e3a      	ldr	r6, [pc, #232]	; (8009664 <BSP_CAMERA_DeInit+0xf4>)
 800957a:	6833      	ldr	r3, [r6, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d06a      	beq.n	8009656 <BSP_CAMERA_DeInit+0xe6>
 8009580:	4f39      	ldr	r7, [pc, #228]	; (8009668 <BSP_CAMERA_DeInit+0xf8>)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d066      	beq.n	8009656 <BSP_CAMERA_DeInit+0xe6>
    {
      ret = BSP_ERROR_NO_INIT;
    }
    else
    {
      hcamera_dcmi.Instance = DCMI;
 8009588:	4c38      	ldr	r4, [pc, #224]	; (800966c <BSP_CAMERA_DeInit+0xfc>)
 800958a:	4b39      	ldr	r3, [pc, #228]	; (8009670 <BSP_CAMERA_DeInit+0x100>)

  if(Instance >= CAMERA_INSTANCES_NBR)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 800958c:	4620      	mov	r0, r4
      hcamera_dcmi.Instance = DCMI;
 800958e:	6023      	str	r3, [r4, #0]
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 8009590:	f001 fc30 	bl	800adf4 <HAL_DCMI_Stop>
 8009594:	2800      	cmp	r0, #0
 8009596:	d158      	bne.n	800964a <BSP_CAMERA_DeInit+0xda>
      else if(HAL_DCMI_DisableCROP(&hcamera_dcmi)!= HAL_OK)
 8009598:	4620      	mov	r0, r4
 800959a:	f001 fd49 	bl	800b030 <HAL_DCMI_DisableCrop>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d153      	bne.n	800964a <BSP_CAMERA_DeInit+0xda>
      else if(HAL_DCMI_DeInit(&hcamera_dcmi) != HAL_OK)
 80095a2:	4620      	mov	r0, r4
 80095a4:	f001 fc1a 	bl	800addc <HAL_DCMI_DeInit>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d14e      	bne.n	800964a <BSP_CAMERA_DeInit+0xda>
static void DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
  GPIO_InitTypeDef gpio_init_structure;

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 80095ac:	204e      	movs	r0, #78	; 0x4e
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);



  /* Disable DCMI clock */
  __HAL_RCC_DCMI_CLK_DISABLE();
 80095ae:	4d31      	ldr	r5, [pc, #196]	; (8009674 <BSP_CAMERA_DeInit+0x104>)
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 80095b0:	f001 fb48 	bl	800ac44 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn);
 80095b4:	203b      	movs	r0, #59	; 0x3b
 80095b6:	f001 fb45 	bl	800ac44 <HAL_NVIC_DisableIRQ>
  (void)HAL_DMA_DeInit(hdcmi->DMA_Handle);
 80095ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80095bc:	f002 f8bc 	bl	800b738 <HAL_DMA_DeInit>
  HAL_GPIO_DeInit(GPIOA, gpio_init_structure.Pin);
 80095c0:	2150      	movs	r1, #80	; 0x50
 80095c2:	482d      	ldr	r0, [pc, #180]	; (8009678 <BSP_CAMERA_DeInit+0x108>)
 80095c4:	f004 f8ca 	bl	800d75c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 80095c8:	f44f 7160 	mov.w	r1, #896	; 0x380
 80095cc:	482b      	ldr	r0, [pc, #172]	; (800967c <BSP_CAMERA_DeInit+0x10c>)
 80095ce:	f004 f8c5 	bl	800d75c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 80095d2:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 80095d6:	482a      	ldr	r0, [pc, #168]	; (8009680 <BSP_CAMERA_DeInit+0x110>)
 80095d8:	f004 f8c0 	bl	800d75c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 80095dc:	2108      	movs	r1, #8
 80095de:	4829      	ldr	r0, [pc, #164]	; (8009684 <BSP_CAMERA_DeInit+0x114>)
 80095e0:	f004 f8bc 	bl	800d75c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 80095e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80095e8:	4827      	ldr	r0, [pc, #156]	; (8009688 <BSP_CAMERA_DeInit+0x118>)
 80095ea:	f004 f8b7 	bl	800d75c <HAL_GPIO_DeInit>
  __HAL_RCC_DCMI_CLK_DISABLE();
 80095ee:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 80095f2:	6830      	ldr	r0, [r6, #0]
  __HAL_RCC_DCMI_CLK_DISABLE();
 80095f4:	f023 0301 	bic.w	r3, r3, #1
 80095f8:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	4798      	blx	r3
 8009602:	4604      	mov	r4, r0
 8009604:	bb20      	cbnz	r0, 8009650 <BSP_CAMERA_DeInit+0xe0>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009606:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800960a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800960e:	2101      	movs	r1, #1
 8009610:	2600      	movs	r6, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009616:	2702      	movs	r7, #2
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009618:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800961c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8009620:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009624:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009628:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800962a:	a902      	add	r1, sp, #8
 800962c:	4817      	ldr	r0, [pc, #92]	; (800968c <BSP_CAMERA_DeInit+0x11c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800962e:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009630:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009634:	f003 ff4c 	bl	800d4d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8009638:	2201      	movs	r2, #1
 800963a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800963e:	4813      	ldr	r0, [pc, #76]	; (800968c <BSP_CAMERA_DeInit+0x11c>)
 8009640:	f004 f95a 	bl	800d8f8 <HAL_GPIO_WritePin>
}
 8009644:	4620      	mov	r0, r4
 8009646:	b009      	add	sp, #36	; 0x24
 8009648:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = BSP_ERROR_PERIPH_FAILURE;
 800964a:	f06f 0403 	mvn.w	r4, #3
 800964e:	e7f9      	b.n	8009644 <BSP_CAMERA_DeInit+0xd4>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009650:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8009654:	e7f6      	b.n	8009644 <BSP_CAMERA_DeInit+0xd4>
      ret = BSP_ERROR_NO_INIT;
 8009656:	f04f 34ff 	mov.w	r4, #4294967295
 800965a:	e7f3      	b.n	8009644 <BSP_CAMERA_DeInit+0xd4>
    ret = BSP_ERROR_WRONG_PARAM;
 800965c:	f06f 0401 	mvn.w	r4, #1
 8009660:	e7f0      	b.n	8009644 <BSP_CAMERA_DeInit+0xd4>
 8009662:	bf00      	nop
 8009664:	20006e80 	.word	0x20006e80
 8009668:	20006eb8 	.word	0x20006eb8
 800966c:	20006f10 	.word	0x20006f10
 8009670:	48020000 	.word	0x48020000
 8009674:	58024400 	.word	0x58024400
 8009678:	58020000 	.word	0x58020000
 800967c:	58020400 	.word	0x58020400
 8009680:	58020800 	.word	0x58020800
 8009684:	58020c00 	.word	0x58020c00
 8009688:	58021800 	.word	0x58021800
 800968c:	58022400 	.word	0x58022400

08009690 <MX_DCMI_Init>:
  hdcmi->Init.HSPolarity       = HSPolarity;
 8009690:	4909      	ldr	r1, [pc, #36]	; (80096b8 <MX_DCMI_Init+0x28>)
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8009692:	2200      	movs	r2, #0
{
 8009694:	b510      	push	{r4, lr}
  hdcmi->Init.HSPolarity       = HSPolarity;
 8009696:	6809      	ldr	r1, [r1, #0]
  hdcmi->Instance              = DCMI;
 8009698:	4c08      	ldr	r4, [pc, #32]	; (80096bc <MX_DCMI_Init+0x2c>)
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 800969a:	6042      	str	r2, [r0, #4]
  hdcmi->Instance              = DCMI;
 800969c:	6004      	str	r4, [r0, #0]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800969e:	2480      	movs	r4, #128	; 0x80
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80096a0:	6182      	str	r2, [r0, #24]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 80096a2:	60c4      	str	r4, [r0, #12]
  hdcmi->Init.HSPolarity       = HSPolarity;
 80096a4:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 80096a8:	2120      	movs	r1, #32
 80096aa:	6081      	str	r1, [r0, #8]
  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 80096ac:	f001 fb46 	bl	800ad3c <HAL_DCMI_Init>
}
 80096b0:	3800      	subs	r0, #0
 80096b2:	bf18      	it	ne
 80096b4:	2001      	movne	r0, #1
 80096b6:	bd10      	pop	{r4, pc}
 80096b8:	20006ebc 	.word	0x20006ebc
 80096bc:	48020000 	.word	0x48020000

080096c0 <BSP_CAMERA_Init>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 80096c0:	2800      	cmp	r0, #0
 80096c2:	f040 8210 	bne.w	8009ae6 <BSP_CAMERA_Init+0x426>
{
 80096c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_DCMI_CLK_ENABLE();
 80096ca:	4ccb      	ldr	r4, [pc, #812]	; (80099f8 <BSP_CAMERA_Init+0x338>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80096cc:	260d      	movs	r6, #13
 80096ce:	4691      	mov	r9, r2
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 80096d0:	2250      	movs	r2, #80	; 0x50
  __HAL_RCC_DCMI_CLK_ENABLE();
 80096d2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80096d6:	4605      	mov	r5, r0
 80096d8:	460f      	mov	r7, r1
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80096da:	48c8      	ldr	r0, [pc, #800]	; (80099fc <BSP_CAMERA_Init+0x33c>)
  __HAL_RCC_DCMI_CLK_ENABLE();
 80096dc:	f043 0301 	orr.w	r3, r3, #1
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 80096e0:	f8df 8364 	ldr.w	r8, [pc, #868]	; 8009a48 <BSP_CAMERA_Init+0x388>
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80096e4:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
{
 80096e8:	ed2d 8b02 	vpush	{d8}
  __HAL_RCC_DCMI_CLK_ENABLE();
 80096ec:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
{
 80096f0:	b093      	sub	sp, #76	; 0x4c
  __HAL_RCC_DCMI_CLK_ENABLE();
 80096f2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80096f6:	a90c      	add	r1, sp, #48	; 0x30
  __HAL_RCC_DCMI_CLK_ENABLE();
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	9303      	str	r3, [sp, #12]
 80096fe:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009700:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009704:	f043 0302 	orr.w	r3, r3, #2
 8009708:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800970c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009710:	f003 0302 	and.w	r3, r3, #2
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009718:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800971c:	f043 0301 	orr.w	r3, r3, #1
 8009720:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009724:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	9305      	str	r3, [sp, #20]
 800972e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009730:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009734:	f043 0302 	orr.w	r3, r3, #2
 8009738:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800973c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	9306      	str	r3, [sp, #24]
 8009746:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009748:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800974c:	f043 0304 	orr.w	r3, r3, #4
 8009750:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009754:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	9307      	str	r3, [sp, #28]
 800975e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009760:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009764:	f043 0308 	orr.w	r3, r3, #8
 8009768:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800976c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009770:	f003 0308 	and.w	r3, r3, #8
 8009774:	9308      	str	r3, [sp, #32]
 8009776:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009778:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800977c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009780:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009784:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8009788:	9610      	str	r6, [sp, #64]	; 0x40
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800978a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800978e:	ed9f 8b94 	vldr	d8, [pc, #592]	; 80099e0 <BSP_CAMERA_Init+0x320>
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009792:	9309      	str	r3, [sp, #36]	; 0x24
 8009794:	9b09      	ldr	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8009796:	2302      	movs	r3, #2
 8009798:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
 800979c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80097a0:	f003 fe96 	bl	800d4d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80097a4:	f44f 7260 	mov.w	r2, #896	; 0x380
 80097a8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 80097aa:	a90c      	add	r1, sp, #48	; 0x30
 80097ac:	4894      	ldr	r0, [pc, #592]	; (8009a00 <BSP_CAMERA_Init+0x340>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80097ae:	9610      	str	r6, [sp, #64]	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80097b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80097b4:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 80097b8:	f003 fe8a 	bl	800d4d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 80097bc:	f44f 622c 	mov.w	r2, #2752	; 0xac0
 80097c0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80097c2:	a90c      	add	r1, sp, #48	; 0x30
 80097c4:	488f      	ldr	r0, [pc, #572]	; (8009a04 <BSP_CAMERA_Init+0x344>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80097c6:	9610      	str	r6, [sp, #64]	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 80097c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80097cc:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80097d0:	f003 fe7e 	bl	800d4d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_3;
 80097d4:	2208      	movs	r2, #8
 80097d6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80097d8:	a90c      	add	r1, sp, #48	; 0x30
 80097da:	488b      	ldr	r0, [pc, #556]	; (8009a08 <BSP_CAMERA_Init+0x348>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80097dc:	9610      	str	r6, [sp, #64]	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_3;
 80097de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80097e2:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80097e6:	f003 fe73 	bl	800d4d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_10;
 80097ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097ee:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80097f0:	a90c      	add	r1, sp, #48	; 0x30
 80097f2:	4886      	ldr	r0, [pc, #536]	; (8009a0c <BSP_CAMERA_Init+0x34c>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 80097f4:	9610      	str	r6, [sp, #64]	; 0x40
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 80097f6:	f44f 7680 	mov.w	r6, #256	; 0x100
  gpio_init_structure.Pin       = GPIO_PIN_10;
 80097fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80097fe:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8009802:	f003 fe65 	bl	800d4d0 <HAL_GPIO_Init>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8009806:	4b82      	ldr	r3, [pc, #520]	; (8009a10 <BSP_CAMERA_Init+0x350>)
 8009808:	224b      	movs	r2, #75	; 0x4b
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800980a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800980e:	f04f 0c04 	mov.w	ip, #4
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8009812:	210f      	movs	r1, #15
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8009814:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800981a:	f8c3 a018 	str.w	sl, [r3, #24]
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 800981e:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8009822:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009826:	e9c3 0204 	strd	r0, r2, [r3, #16]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 800982a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800982e:	204e      	movs	r0, #78	; 0x4e
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8009830:	e9c3 6207 	strd	r6, r2, [r3, #28]
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009834:	2203      	movs	r2, #3
 8009836:	e9c3 c209 	strd	ip, r2, [r3, #36]	; 0x24
  hdma_handler.Instance                 = DMA2_Stream3;
 800983a:	4a76      	ldr	r2, [pc, #472]	; (8009a14 <BSP_CAMERA_Init+0x354>)
 800983c:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800983e:	462a      	mov	r2, r5
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8009840:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8009844:	e9c3 550b 	strd	r5, r5, [r3, #44]	; 0x2c
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8009848:	f001 f9b0 	bl	800abac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800984c:	204e      	movs	r0, #78	; 0x4e
 800984e:	f001 f9eb 	bl	800ac28 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8009852:	462a      	mov	r2, r5
 8009854:	210f      	movs	r1, #15
 8009856:	203b      	movs	r0, #59	; 0x3b
 8009858:	f001 f9a8 	bl	800abac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800985c:	203b      	movs	r0, #59	; 0x3b
 800985e:	f001 f9e3 	bl	800ac28 <HAL_NVIC_EnableIRQ>
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 8009862:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 8009866:	f001 fcf9 	bl	800b25c <HAL_DMA_Init>
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800986a:	4640      	mov	r0, r8
 800986c:	f7ff ff10 	bl	8009690 <MX_DCMI_Init>
 8009870:	4605      	mov	r5, r0
 8009872:	2800      	cmp	r0, #0
 8009874:	f040 80ad 	bne.w	80099d2 <BSP_CAMERA_Init+0x312>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009878:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800987c:	a90c      	add	r1, sp, #48	; 0x30
 800987e:	4866      	ldr	r0, [pc, #408]	; (8009a18 <BSP_CAMERA_Init+0x358>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8009884:	4e65      	ldr	r6, [pc, #404]	; (8009a1c <BSP_CAMERA_Init+0x35c>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8009886:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 8009a4c <BSP_CAMERA_Init+0x38c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800988a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800988e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  IOCtx.GetTick     = BSP_GetTick;
 8009892:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009a50 <BSP_CAMERA_Init+0x390>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009896:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800989a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 80099e8 <BSP_CAMERA_Init+0x328>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800989e:	930a      	str	r3, [sp, #40]	; 0x28
 80098a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    gpio_init_structure.Pin       = GPIO_PIN_14;
 80098a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80098a6:	ed9f 7b52 	vldr	d7, [pc, #328]	; 80099f0 <BSP_CAMERA_Init+0x330>
 80098aa:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80098ae:	f003 fe0f 	bl	800d4d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 80098b2:	2201      	movs	r2, #1
 80098b4:	4651      	mov	r1, sl
 80098b6:	4858      	ldr	r0, [pc, #352]	; (8009a18 <BSP_CAMERA_Init+0x358>)
 80098b8:	f004 f81e 	bl	800d8f8 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 80098bc:	2064      	movs	r0, #100	; 0x64
 80098be:	f001 f943 	bl	800ab48 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 80098c2:	462a      	mov	r2, r5
 80098c4:	4651      	mov	r1, sl
 80098c6:	4854      	ldr	r0, [pc, #336]	; (8009a18 <BSP_CAMERA_Init+0x358>)
 80098c8:	f004 f816 	bl	800d8f8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80098cc:	2014      	movs	r0, #20
 80098ce:	f001 f93b 	bl	800ab48 <HAL_Delay>
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 80098d2:	2260      	movs	r2, #96	; 0x60
  IOCtx.Init        = BSP_I2C4_Init;
 80098d4:	4b52      	ldr	r3, [pc, #328]	; (8009a20 <BSP_CAMERA_Init+0x360>)
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 80098d6:	a90c      	add	r1, sp, #48	; 0x30
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 80098d8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 80098dc:	4630      	mov	r0, r6
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80098de:	4a51      	ldr	r2, [pc, #324]	; (8009a24 <BSP_CAMERA_Init+0x364>)
  IOCtx.GetTick     = BSP_GetTick;
 80098e0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80098e4:	9210      	str	r2, [sp, #64]	; 0x40
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80098e6:	4a50      	ldr	r2, [pc, #320]	; (8009a28 <BSP_CAMERA_Init+0x368>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80098e8:	e9cd 3b0c 	strd	r3, fp, [sp, #48]	; 0x30
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80098ec:	920f      	str	r2, [sp, #60]	; 0x3c
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 80098ee:	f7ff f81d 	bl	800892c <OV9655_RegisterBusIO>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f040 80b0 	bne.w	8009a58 <BSP_CAMERA_Init+0x398>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 80098f8:	4c4c      	ldr	r4, [pc, #304]	; (8009a2c <BSP_CAMERA_Init+0x36c>)
 80098fa:	4630      	mov	r0, r6
 80098fc:	4621      	mov	r1, r4
 80098fe:	f7fe ff61 	bl	80087c4 <OV9655_ReadID>
 8009902:	2800      	cmp	r0, #0
 8009904:	f040 80a8 	bne.w	8009a58 <BSP_CAMERA_Init+0x398>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 8009908:	6821      	ldr	r1, [r4, #0]
 800990a:	4a49      	ldr	r2, [pc, #292]	; (8009a30 <BSP_CAMERA_Init+0x370>)
 800990c:	440a      	add	r2, r1
 800990e:	2a01      	cmp	r2, #1
 8009910:	f200 80a2 	bhi.w	8009a58 <BSP_CAMERA_Init+0x398>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 8009914:	4a47      	ldr	r2, [pc, #284]	; (8009a34 <BSP_CAMERA_Init+0x374>)
      Camera_CompObj = &OV9655Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8009916:	4630      	mov	r0, r6
      Camera_CompObj = &OV9655Obj;
 8009918:	4d47      	ldr	r5, [pc, #284]	; (8009a38 <BSP_CAMERA_Init+0x378>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800991a:	4639      	mov	r1, r7
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800991c:	f8df a134 	ldr.w	sl, [pc, #308]	; 8009a54 <BSP_CAMERA_Init+0x394>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8009920:	6813      	ldr	r3, [r2, #0]
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 8009922:	f8ca 2000 	str.w	r2, [sl]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8009926:	464a      	mov	r2, r9
      Camera_CompObj = &OV9655Obj;
 8009928:	602e      	str	r6, [r5, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800992a:	4798      	blx	r3
 800992c:	2800      	cmp	r0, #0
 800992e:	f040 8093 	bne.w	8009a58 <BSP_CAMERA_Init+0x398>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 8009932:	f8da 3000 	ldr.w	r3, [sl]
 8009936:	6828      	ldr	r0, [r5, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	4940      	ldr	r1, [pc, #256]	; (8009a3c <BSP_CAMERA_Init+0x37c>)
 800993c:	4798      	blx	r3
 800993e:	2800      	cmp	r0, #0
 8009940:	f040 808a 	bne.w	8009a58 <BSP_CAMERA_Init+0x398>
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 8009944:	6822      	ldr	r2, [r4, #0]
 8009946:	4b3a      	ldr	r3, [pc, #232]	; (8009a30 <BSP_CAMERA_Init+0x370>)
 8009948:	4413      	add	r3, r2
 800994a:	2b01      	cmp	r3, #1
 800994c:	d839      	bhi.n	80099c2 <BSP_CAMERA_Init+0x302>
          if(Resolution == CAMERA_R480x272)
 800994e:	2f02      	cmp	r7, #2
 8009950:	f000 80b5 	beq.w	8009abe <BSP_CAMERA_Init+0x3fe>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009954:	4b28      	ldr	r3, [pc, #160]	; (80099f8 <BSP_CAMERA_Init+0x338>)
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009956:	a90c      	add	r1, sp, #48	; 0x30
 8009958:	482f      	ldr	r0, [pc, #188]	; (8009a18 <BSP_CAMERA_Init+0x358>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800995a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800995e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009962:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800996a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800996e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009972:	930b      	str	r3, [sp, #44]	; 0x2c
 8009974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009976:	2301      	movs	r3, #1
 8009978:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800997c:	2302      	movs	r3, #2
 800997e:	2200      	movs	r2, #0
 8009980:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009984:	f003 fda4 	bl	800d4d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 8009988:	2201      	movs	r2, #1
 800998a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800998e:	4822      	ldr	r0, [pc, #136]	; (8009a18 <BSP_CAMERA_Init+0x358>)
 8009990:	f003 ffb2 	bl	800d8f8 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8009994:	2064      	movs	r0, #100	; 0x64
 8009996:	f001 f8d7 	bl	800ab48 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800999a:	2200      	movs	r2, #0
 800999c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80099a0:	481d      	ldr	r0, [pc, #116]	; (8009a18 <BSP_CAMERA_Init+0x358>)
 80099a2:	f003 ffa9 	bl	800d8f8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80099a6:	2014      	movs	r0, #20
 80099a8:	f001 f8ce 	bl	800ab48 <HAL_Delay>
          Camera_Ctx[Instance].CameraId  = CameraId;
 80099ac:	4b24      	ldr	r3, [pc, #144]	; (8009a40 <BSP_CAMERA_Init+0x380>)
 80099ae:	6822      	ldr	r2, [r4, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 80099b0:	2000      	movs	r0, #0
 80099b2:	e9c3 7901 	strd	r7, r9, [r3, #4]
          Camera_Ctx[Instance].CameraId  = CameraId;
 80099b6:	601a      	str	r2, [r3, #0]
}
 80099b8:	b013      	add	sp, #76	; 0x4c
 80099ba:	ecbd 8b02 	vpop	{d8}
 80099be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 80099c2:	4b20      	ldr	r3, [pc, #128]	; (8009a44 <BSP_CAMERA_Init+0x384>)
 80099c4:	2240      	movs	r2, #64	; 0x40
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 80099c6:	4820      	ldr	r0, [pc, #128]	; (8009a48 <BSP_CAMERA_Init+0x388>)
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 80099c8:	601a      	str	r2, [r3, #0]
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 80099ca:	f7ff fe61 	bl	8009690 <MX_DCMI_Init>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d0c0      	beq.n	8009954 <BSP_CAMERA_Init+0x294>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80099d2:	f06f 0003 	mvn.w	r0, #3
}
 80099d6:	b013      	add	sp, #76	; 0x4c
 80099d8:	ecbd 8b02 	vpop	{d8}
 80099dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e0:	00000001 	.word	0x00000001
 80099e4:	00000003 	.word	0x00000003
 80099e8:	00004000 	.word	0x00004000
 80099ec:	00000001 	.word	0x00000001
 80099f0:	00000000 	.word	0x00000000
 80099f4:	00000002 	.word	0x00000002
 80099f8:	58024400 	.word	0x58024400
 80099fc:	58020000 	.word	0x58020000
 8009a00:	58020400 	.word	0x58020400
 8009a04:	58020800 	.word	0x58020800
 8009a08:	58020c00 	.word	0x58020c00
 8009a0c:	58021800 	.word	0x58021800
 8009a10:	20006f60 	.word	0x20006f60
 8009a14:	40020458 	.word	0x40020458
 8009a18:	58022400 	.word	0x58022400
 8009a1c:	20006ee8 	.word	0x20006ee8
 8009a20:	08008dad 	.word	0x08008dad
 8009a24:	080094b9 	.word	0x080094b9
 8009a28:	0800947d 	.word	0x0800947d
 8009a2c:	20006e54 	.word	0x20006e54
 8009a30:	ffff69aa 	.word	0xffff69aa
 8009a34:	200047c0 	.word	0x200047c0
 8009a38:	20006e80 	.word	0x20006e80
 8009a3c:	20006e58 	.word	0x20006e58
 8009a40:	20006e84 	.word	0x20006e84
 8009a44:	20006ebc 	.word	0x20006ebc
 8009a48:	20006f10 	.word	0x20006f10
 8009a4c:	08008d19 	.word	0x08008d19
 8009a50:	0800956d 	.word	0x0800956d
 8009a54:	20006eb8 	.word	0x20006eb8
  OV5640_IO_t              IOCtx;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
  IOCtx.Init        = BSP_I2C4_Init;
 8009a58:	4b24      	ldr	r3, [pc, #144]	; (8009aec <BSP_CAMERA_Init+0x42c>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8009a5a:	a90c      	add	r1, sp, #48	; 0x30
 8009a5c:	4d24      	ldr	r5, [pc, #144]	; (8009af0 <BSP_CAMERA_Init+0x430>)
  IOCtx.GetTick     = BSP_GetTick;
 8009a5e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8009a62:	4628      	mov	r0, r5
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8009a64:	e9cd 3b0c 	strd	r3, fp, [sp, #48]	; 0x30
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8009a68:	4b22      	ldr	r3, [pc, #136]	; (8009af4 <BSP_CAMERA_Init+0x434>)
 8009a6a:	9310      	str	r3, [sp, #64]	; 0x40
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8009a6c:	4b22      	ldr	r3, [pc, #136]	; (8009af8 <BSP_CAMERA_Init+0x438>)
 8009a6e:	930f      	str	r3, [sp, #60]	; 0x3c
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8009a70:	2378      	movs	r3, #120	; 0x78
 8009a72:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8009a76:	f7fe fa57 	bl	8007f28 <OV5640_RegisterBusIO>
 8009a7a:	b9e8      	cbnz	r0, 8009ab8 <BSP_CAMERA_Init+0x3f8>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 8009a7c:	4c1f      	ldr	r4, [pc, #124]	; (8009afc <BSP_CAMERA_Init+0x43c>)
 8009a7e:	4628      	mov	r0, r5
 8009a80:	4621      	mov	r1, r4
 8009a82:	f7fe f82d 	bl	8007ae0 <OV5640_ReadID>
 8009a86:	b9b8      	cbnz	r0, 8009ab8 <BSP_CAMERA_Init+0x3f8>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if(CameraId != OV5640_ID)
 8009a88:	6822      	ldr	r2, [r4, #0]
 8009a8a:	f245 6340 	movw	r3, #22080	; 0x5640
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d112      	bne.n	8009ab8 <BSP_CAMERA_Init+0x3f8>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
      Camera_CompObj = &OV5640Obj;
 8009a92:	4e1b      	ldr	r6, [pc, #108]	; (8009b00 <BSP_CAMERA_Init+0x440>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8009a94:	4628      	mov	r0, r5
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8009a96:	4b1b      	ldr	r3, [pc, #108]	; (8009b04 <BSP_CAMERA_Init+0x444>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8009a98:	464a      	mov	r2, r9
      Camera_CompObj = &OV5640Obj;
 8009a9a:	6035      	str	r5, [r6, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8009a9c:	4639      	mov	r1, r7
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8009a9e:	4d1a      	ldr	r5, [pc, #104]	; (8009b08 <BSP_CAMERA_Init+0x448>)
 8009aa0:	602b      	str	r3, [r5, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4798      	blx	r3
 8009aa6:	b938      	cbnz	r0, 8009ab8 <BSP_CAMERA_Init+0x3f8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	6830      	ldr	r0, [r6, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	4917      	ldr	r1, [pc, #92]	; (8009b0c <BSP_CAMERA_Init+0x44c>)
 8009ab0:	4798      	blx	r3
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	f43f af46 	beq.w	8009944 <BSP_CAMERA_Init+0x284>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009ab8:	f06f 0006 	mvn.w	r0, #6
 8009abc:	e77c      	b.n	80099b8 <BSP_CAMERA_Init+0x2f8>
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 8009abe:	f240 130f 	movw	r3, #271	; 0x10f
 8009ac2:	2268      	movs	r2, #104	; 0x68
 8009ac4:	2150      	movs	r1, #80	; 0x50
 8009ac6:	4812      	ldr	r0, [pc, #72]	; (8009b10 <BSP_CAMERA_Init+0x450>)
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	f240 33bf 	movw	r3, #959	; 0x3bf
 8009ace:	f001 fa91 	bl	800aff4 <HAL_DCMI_ConfigCrop>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	f47f af7d 	bne.w	80099d2 <BSP_CAMERA_Init+0x312>
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 8009ad8:	480d      	ldr	r0, [pc, #52]	; (8009b10 <BSP_CAMERA_Init+0x450>)
 8009ada:	f001 fac1 	bl	800b060 <HAL_DCMI_EnableCrop>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f47f af77 	bne.w	80099d2 <BSP_CAMERA_Init+0x312>
 8009ae4:	e736      	b.n	8009954 <BSP_CAMERA_Init+0x294>
    ret = BSP_ERROR_WRONG_PARAM;
 8009ae6:	f06f 0001 	mvn.w	r0, #1
}
 8009aea:	4770      	bx	lr
 8009aec:	08008dad 	.word	0x08008dad
 8009af0:	20006ec0 	.word	0x20006ec0
 8009af4:	08009531 	.word	0x08009531
 8009af8:	080094f5 	.word	0x080094f5
 8009afc:	20006e54 	.word	0x20006e54
 8009b00:	20006e80 	.word	0x20006e80
 8009b04:	2000477c 	.word	0x2000477c
 8009b08:	20006eb8 	.word	0x20006eb8
 8009b0c:	20006e58 	.word	0x20006e58
 8009b10:	20006f10 	.word	0x20006f10

08009b14 <BSP_CAMERA_Suspend>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8009b14:	b948      	cbnz	r0, 8009b2a <BSP_CAMERA_Suspend+0x16>
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 8009b16:	4806      	ldr	r0, [pc, #24]	; (8009b30 <BSP_CAMERA_Suspend+0x1c>)
{
 8009b18:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 8009b1a:	f001 f9ad 	bl	800ae78 <HAL_DCMI_Suspend>
    return BSP_ERROR_PERIPH_FAILURE;
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	bf0c      	ite	eq
 8009b22:	2000      	moveq	r0, #0
 8009b24:	f06f 0003 	mvnne.w	r0, #3
}
 8009b28:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009b2a:	f06f 0001 	mvn.w	r0, #1
}
 8009b2e:	4770      	bx	lr
 8009b30:	20006f10 	.word	0x20006f10

08009b34 <BSP_CAMERA_Resume>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8009b34:	b948      	cbnz	r0, 8009b4a <BSP_CAMERA_Resume+0x16>
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 8009b36:	4806      	ldr	r0, [pc, #24]	; (8009b50 <BSP_CAMERA_Resume+0x1c>)
{
 8009b38:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 8009b3a:	f001 f9e1 	bl	800af00 <HAL_DCMI_Resume>
    ret = BSP_ERROR_NONE;
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	bf14      	ite	ne
 8009b42:	f06f 0003 	mvnne.w	r0, #3
 8009b46:	2000      	moveq	r0, #0
}
 8009b48:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009b4a:	f06f 0001 	mvn.w	r0, #1
}
 8009b4e:	4770      	bx	lr
 8009b50:	20006f10 	.word	0x20006f10

08009b54 <BSP_CAMERA_SetBrightness>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Brightness < CAMERA_BRIGHTNESS_MIN) && (Brightness > CAMERA_BRIGHTNESS_MAX)))
 8009b54:	b988      	cbnz	r0, 8009b7a <BSP_CAMERA_SetBrightness+0x26>
{
 8009b56:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Brightness == 0U)
 8009b58:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <BSP_CAMERA_SetBrightness+0x38>)
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	b183      	cbz	r3, 8009b80 <BSP_CAMERA_SetBrightness+0x2c>
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 8009b5e:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <BSP_CAMERA_SetBrightness+0x3c>)
 8009b60:	4604      	mov	r4, r0
 8009b62:	4a0c      	ldr	r2, [pc, #48]	; (8009b94 <BSP_CAMERA_SetBrightness+0x40>)
 8009b64:	460d      	mov	r5, r1
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6810      	ldr	r0, [r2, #0]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	4798      	blx	r3
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	db09      	blt.n	8009b86 <BSP_CAMERA_SetBrightness+0x32>
    Camera_Ctx[Instance].Brightness = Brightness;
 8009b72:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <BSP_CAMERA_SetBrightness+0x44>)
    ret = BSP_ERROR_NONE;
 8009b74:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Brightness = Brightness;
 8009b76:	615d      	str	r5, [r3, #20]
}
 8009b78:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009b7a:	f06f 0001 	mvn.w	r0, #1
}
 8009b7e:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8009b80:	f06f 000a 	mvn.w	r0, #10
}
 8009b84:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b86:	f06f 0004 	mvn.w	r0, #4
}
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	20006e58 	.word	0x20006e58
 8009b90:	20006eb8 	.word	0x20006eb8
 8009b94:	20006e80 	.word	0x20006e80
 8009b98:	20006e84 	.word	0x20006e84

08009b9c <BSP_CAMERA_SetContrast>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Contrast < CAMERA_CONTRAST_MIN) && (Contrast > CAMERA_CONTRAST_MAX)))
 8009b9c:	b988      	cbnz	r0, 8009bc2 <BSP_CAMERA_SetContrast+0x26>
{
 8009b9e:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Contrast == 0U)
 8009ba0:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <BSP_CAMERA_SetContrast+0x38>)
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	b183      	cbz	r3, 8009bc8 <BSP_CAMERA_SetContrast+0x2c>
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 8009ba6:	4b0c      	ldr	r3, [pc, #48]	; (8009bd8 <BSP_CAMERA_SetContrast+0x3c>)
 8009ba8:	4604      	mov	r4, r0
 8009baa:	4a0c      	ldr	r2, [pc, #48]	; (8009bdc <BSP_CAMERA_SetContrast+0x40>)
 8009bac:	460d      	mov	r5, r1
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6810      	ldr	r0, [r2, #0]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	4798      	blx	r3
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	db09      	blt.n	8009bce <BSP_CAMERA_SetContrast+0x32>
    Camera_Ctx[Instance].Contrast = Contrast;
 8009bba:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <BSP_CAMERA_SetContrast+0x44>)
    ret = BSP_ERROR_NONE;
 8009bbc:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Contrast = Contrast;
 8009bbe:	61dd      	str	r5, [r3, #28]
}
 8009bc0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009bc2:	f06f 0001 	mvn.w	r0, #1
}
 8009bc6:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8009bc8:	f06f 000a 	mvn.w	r0, #10
}
 8009bcc:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009bce:	f06f 0004 	mvn.w	r0, #4
}
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	20006e58 	.word	0x20006e58
 8009bd8:	20006eb8 	.word	0x20006eb8
 8009bdc:	20006e80 	.word	0x20006e80
 8009be0:	20006e84 	.word	0x20006e84

08009be4 <BSP_CAMERA_SetMirrorFlip>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8009be4:	b988      	cbnz	r0, 8009c0a <BSP_CAMERA_SetMirrorFlip+0x26>
{
 8009be6:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.MirrorFlip == 0U)
 8009be8:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <BSP_CAMERA_SetMirrorFlip+0x38>)
 8009bea:	69db      	ldr	r3, [r3, #28]
 8009bec:	b183      	cbz	r3, 8009c10 <BSP_CAMERA_SetMirrorFlip+0x2c>
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 8009bee:	4b0c      	ldr	r3, [pc, #48]	; (8009c20 <BSP_CAMERA_SetMirrorFlip+0x3c>)
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	4a0c      	ldr	r2, [pc, #48]	; (8009c24 <BSP_CAMERA_SetMirrorFlip+0x40>)
 8009bf4:	460d      	mov	r5, r1
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6810      	ldr	r0, [r2, #0]
 8009bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfc:	4798      	blx	r3
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	db09      	blt.n	8009c16 <BSP_CAMERA_SetMirrorFlip+0x32>
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 8009c02:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <BSP_CAMERA_SetMirrorFlip+0x44>)
    ret = BSP_ERROR_NONE;
 8009c04:	4620      	mov	r0, r4
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 8009c06:	625d      	str	r5, [r3, #36]	; 0x24
}
 8009c08:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009c0a:	f06f 0001 	mvn.w	r0, #1
}
 8009c0e:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8009c10:	f06f 000a 	mvn.w	r0, #10
}
 8009c14:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c16:	f06f 0004 	mvn.w	r0, #4
}
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	20006e58 	.word	0x20006e58
 8009c20:	20006eb8 	.word	0x20006eb8
 8009c24:	20006e80 	.word	0x20006e80
 8009c28:	20006e84 	.word	0x20006e84
 8009c2c:	00000000 	.word	0x00000000

08009c30 <BSP_CAMERA_PwrDown>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8009c30:	bb20      	cbnz	r0, 8009c7c <BSP_CAMERA_PwrDown+0x4c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009c32:	4b19      	ldr	r3, [pc, #100]	; (8009c98 <BSP_CAMERA_PwrDown+0x68>)
 8009c34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009c3c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8009c88 <BSP_CAMERA_PwrDown+0x58>
{
 8009c40:	b510      	push	{r4, lr}
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009c42:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8009c46:	b088      	sub	sp, #32
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c4c:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009c4e:	a902      	add	r1, sp, #8
 8009c50:	4812      	ldr	r0, [pc, #72]	; (8009c9c <BSP_CAMERA_PwrDown+0x6c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009c56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c5a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8009c90 <BSP_CAMERA_PwrDown+0x60>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009c62:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009c66:	f003 fc33 	bl	800d4d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009c70:	480a      	ldr	r0, [pc, #40]	; (8009c9c <BSP_CAMERA_PwrDown+0x6c>)
 8009c72:	f003 fe41 	bl	800d8f8 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8009c76:	4620      	mov	r0, r4
}
 8009c78:	b008      	add	sp, #32
 8009c7a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009c7c:	f06f 0001 	mvn.w	r0, #1
}
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	f3af 8000 	nop.w
 8009c88:	00004000 	.word	0x00004000
 8009c8c:	00000001 	.word	0x00000001
 8009c90:	00000000 	.word	0x00000000
 8009c94:	00000002 	.word	0x00000002
 8009c98:	58024400 	.word	0x58024400
 8009c9c:	58022400 	.word	0x58022400

08009ca0 <BSP_CAMERA_IRQHandler>:
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 8009ca0:	4801      	ldr	r0, [pc, #4]	; (8009ca8 <BSP_CAMERA_IRQHandler+0x8>)
 8009ca2:	f001 b959 	b.w	800af58 <HAL_DCMI_IRQHandler>
 8009ca6:	bf00      	nop
 8009ca8:	20006f10 	.word	0x20006f10

08009cac <BSP_CAMERA_DMA_IRQHandler>:
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 8009cac:	4b01      	ldr	r3, [pc, #4]	; (8009cb4 <BSP_CAMERA_DMA_IRQHandler+0x8>)
 8009cae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009cb0:	f002 ba34 	b.w	800c11c <HAL_DMA_IRQHandler>
 8009cb4:	20006f10 	.word	0x20006f10

08009cb8 <BSP_CAMERA_LineEventCallback>:
}
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop

08009cbc <HAL_DCMI_LineEventCallback>:
  BSP_CAMERA_LineEventCallback(0);
 8009cbc:	2000      	movs	r0, #0
{
 8009cbe:	b508      	push	{r3, lr}
  BSP_CAMERA_LineEventCallback(0);
 8009cc0:	f7ff fffa 	bl	8009cb8 <BSP_CAMERA_LineEventCallback>
}
 8009cc4:	bd08      	pop	{r3, pc}
 8009cc6:	bf00      	nop

08009cc8 <HAL_DCMI_FrameEventCallback>:
  BSP_CAMERA_FrameEventCallback(0);
 8009cc8:	2000      	movs	r0, #0
{
 8009cca:	b508      	push	{r3, lr}
  BSP_CAMERA_FrameEventCallback(0);
 8009ccc:	f7f7 fcae 	bl	800162c <BSP_CAMERA_FrameEventCallback>
}
 8009cd0:	bd08      	pop	{r3, pc}
 8009cd2:	bf00      	nop

08009cd4 <HAL_DCMI_VsyncEventCallback>:
  BSP_CAMERA_VsyncEventCallback(0);
 8009cd4:	2000      	movs	r0, #0
{
 8009cd6:	b508      	push	{r3, lr}
  BSP_CAMERA_VsyncEventCallback(0);
 8009cd8:	f7f7 fcc4 	bl	8001664 <BSP_CAMERA_VsyncEventCallback>
}
 8009cdc:	bd08      	pop	{r3, pc}
 8009cde:	bf00      	nop

08009ce0 <HAL_DCMI_ErrorCallback>:
  BSP_CAMERA_ErrorCallback(0);
 8009ce0:	2000      	movs	r0, #0
{
 8009ce2:	b508      	push	{r3, lr}
  BSP_CAMERA_ErrorCallback(0);
 8009ce4:	f7f7 fcf4 	bl	80016d0 <BSP_CAMERA_ErrorCallback>
}
 8009ce8:	bd08      	pop	{r3, pc}
 8009cea:	bf00      	nop

08009cec <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8009cec:	b910      	cbnz	r0, 8009cf4 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8009cee:	4b03      	ldr	r3, [pc, #12]	; (8009cfc <BSP_LCD_SetActiveLayer+0x10>)
 8009cf0:	6099      	str	r1, [r3, #8]
 8009cf2:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009cf4:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	20006fdc 	.word	0x20006fdc

08009d00 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8009d00:	b918      	cbnz	r0, 8009d0a <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8009d02:	4b03      	ldr	r3, [pc, #12]	; (8009d10 <BSP_LCD_GetPixelFormat+0x10>)
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	600b      	str	r3, [r1, #0]
 8009d08:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009d0a:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8009d0e:	4770      	bx	lr
 8009d10:	20006fdc 	.word	0x20006fdc

08009d14 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8009d14:	b948      	cbnz	r0, 8009d2a <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8009d16:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <BSP_LCD_GetXSize+0x1c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d1c:	b11b      	cbz	r3, 8009d26 <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8009d1e:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <BSP_LCD_GetXSize+0x20>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	600b      	str	r3, [r1, #0]
 8009d24:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8009d26:	4618      	mov	r0, r3
  }

  return ret;
}
 8009d28:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009d2a:	f06f 0001 	mvn.w	r0, #1
 8009d2e:	4770      	bx	lr
 8009d30:	20006ff8 	.word	0x20006ff8
 8009d34:	20006fdc 	.word	0x20006fdc

08009d38 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8009d38:	b948      	cbnz	r0, 8009d4e <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8009d3a:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <BSP_LCD_GetYSize+0x1c>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d40:	b11b      	cbz	r3, 8009d4a <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8009d42:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <BSP_LCD_GetYSize+0x20>)
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	600b      	str	r3, [r1, #0]
 8009d48:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8009d4a:	4618      	mov	r0, r3
  }

  return ret;
}
 8009d4c:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009d4e:	f06f 0001 	mvn.w	r0, #1
 8009d52:	4770      	bx	lr
 8009d54:	20006ff8 	.word	0x20006ff8
 8009d58:	20006fdc 	.word	0x20006fdc

08009d5c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8009d5c:	b470      	push	{r4, r5, r6}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009d5e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009d62:	4d12      	ldr	r5, [pc, #72]	; (8009dac <BSP_LCD_ReadPixel+0x50>)
 8009d64:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8009d68:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 8009d6c:	0080      	lsls	r0, r0, #2
 8009d6e:	68a6      	ldr	r6, [r4, #8]
 8009d70:	4c0f      	ldr	r4, [pc, #60]	; (8009db0 <BSP_LCD_ReadPixel+0x54>)
 8009d72:	fb0c 4c06 	mla	ip, ip, r6, r4
 8009d76:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 8009d7a:	b954      	cbnz	r4, 8009d92 <BSP_LCD_ReadPixel+0x36>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8009d7c:	5828      	ldr	r0, [r5, r0]
 8009d7e:	f8dc 405c 	ldr.w	r4, [ip, #92]	; 0x5c
 8009d82:	fb00 1102 	mla	r1, r0, r2, r1
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
  }

  return BSP_ERROR_NONE;
}
 8009d86:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8009d88:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
}
 8009d8c:	bc70      	pop	{r4, r5, r6}
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8009d92:	582c      	ldr	r4, [r5, r0]
 8009d94:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8009d98:	fb04 1102 	mla	r1, r4, r2, r1
 8009d9c:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
}
 8009da0:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8009da2:	b292      	uxth	r2, r2
}
 8009da4:	bc70      	pop	{r4, r5, r6}
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	20006fdc 	.word	0x20006fdc
 8009db0:	200070a0 	.word	0x200070a0

08009db4 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8009db4:	b470      	push	{r4, r5, r6}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009db6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009dba:	4d11      	ldr	r5, [pc, #68]	; (8009e00 <BSP_LCD_WritePixel+0x4c>)
 8009dbc:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8009dc0:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 8009dc4:	0080      	lsls	r0, r0, #2
 8009dc6:	68a6      	ldr	r6, [r4, #8]
 8009dc8:	4c0e      	ldr	r4, [pc, #56]	; (8009e04 <BSP_LCD_WritePixel+0x50>)
 8009dca:	fb0c 4c06 	mla	ip, ip, r6, r4
 8009dce:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 8009dd2:	b94c      	cbnz	r4, 8009de8 <BSP_LCD_WritePixel+0x34>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8009dd4:	5828      	ldr	r0, [r5, r0]
 8009dd6:	f8dc 405c 	ldr.w	r4, [ip, #92]	; 0x5c
 8009dda:	fb00 1102 	mla	r1, r0, r2, r1
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }

  return BSP_ERROR_NONE;
}
 8009dde:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8009de0:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
}
 8009de4:	bc70      	pop	{r4, r5, r6}
 8009de6:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8009de8:	582c      	ldr	r4, [r5, r0]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8009df0:	fb04 1102 	mla	r1, r4, r2, r1
}
 8009df4:	bc70      	pop	{r4, r5, r6}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8009df6:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	20006fdc 	.word	0x20006fdc
 8009e04:	200070a0 	.word	0x200070a0

08009e08 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	b084      	sub	sp, #16
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8009e0e:	4601      	mov	r1, r0
 8009e10:	2006      	movs	r0, #6
 8009e12:	9401      	str	r4, [sp, #4]
 8009e14:	9000      	str	r0, [sp, #0]
 8009e16:	9202      	str	r2, [sp, #8]
 8009e18:	4804      	ldr	r0, [pc, #16]	; (8009e2c <DSI_IO_Read+0x24>)
 8009e1a:	f003 faa9 	bl	800d370 <HAL_DSI_Read>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8009e1e:	2800      	cmp	r0, #0
  }

  return ret;
}
 8009e20:	bf14      	ite	ne
 8009e22:	f06f 0007 	mvnne.w	r0, #7
 8009e26:	2000      	moveq	r0, #0
 8009e28:	b004      	add	sp, #16
 8009e2a:	bd10      	pop	{r4, pc}
 8009e2c:	20007084 	.word	0x20007084

08009e30 <BSP_LCD_DrawBitmap>:
{
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009e34:	4e4c      	ldr	r6, [pc, #304]	; (8009f68 <BSP_LCD_DrawBitmap+0x138>)
 8009e36:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009e3a:	f893 a018 	ldrb.w	sl, [r3, #24]
{
 8009e3e:	b085      	sub	sp, #20
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009e40:	eb06 0c84 	add.w	ip, r6, r4, lsl #2
 8009e44:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009e48:	7b1d      	ldrb	r5, [r3, #12]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009e4a:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009e4e:	fb04 1102 	mla	r1, r4, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009e52:	7d1c      	ldrb	r4, [r3, #20]
 8009e54:	7cda      	ldrb	r2, [r3, #19]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009e56:	042d      	lsls	r5, r5, #16
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009e58:	0424      	lsls	r4, r4, #16
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009e5a:	7adf      	ldrb	r7, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8009e5c:	f893 901c 	ldrb.w	r9, [r3, #28]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009e60:	eb04 2402 	add.w	r4, r4, r2, lsl #8
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009e64:	7dda      	ldrb	r2, [r3, #23]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009e66:	eb05 2507 	add.w	r5, r5, r7, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009e6a:	f8dc 8010 	ldr.w	r8, [ip, #16]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009e6e:	eb0a 2a02 	add.w	sl, sl, r2, lsl #8
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8009e72:	7f5a      	ldrb	r2, [r3, #29]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009e74:	4f3d      	ldr	r7, [pc, #244]	; (8009f6c <BSP_LCD_DrawBitmap+0x13c>)
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8009e76:	eb09 2902 	add.w	r9, r9, r2, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009e7a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8009e7e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8009e82:	fb0c 7702 	mla	r7, ip, r2, r7
 8009e86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e88:	fb08 2801 	mla	r8, r8, r1, r2
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009e8c:	7a9a      	ldrb	r2, [r3, #10]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009e8e:	7d99      	ldrb	r1, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009e90:	4415      	add	r5, r2
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009e92:	7c9a      	ldrb	r2, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009e94:	448a      	add	sl, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009e96:	7b59      	ldrb	r1, [r3, #13]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009e98:	4422      	add	r2, r4
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009e9a:	eb05 6501 	add.w	r5, r5, r1, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009e9e:	7d59      	ldrb	r1, [r3, #21]
 8009ea0:	eb02 6201 	add.w	r2, r2, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8009ea4:	f1a9 0120 	sub.w	r1, r9, #32
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009ea8:	9203      	str	r2, [sp, #12]
  if ((bit_pixel/8U) == 4U)
 8009eaa:	2907      	cmp	r1, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009eac:	7e5a      	ldrb	r2, [r3, #25]
 8009eae:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009eb2:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8009eb6:	d954      	bls.n	8009f62 <BSP_LCD_DrawBitmap+0x132>
  else if ((bit_pixel/8U) == 2U)
 8009eb8:	f1a9 0110 	sub.w	r1, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8009ebc:	2908      	cmp	r1, #8
 8009ebe:	bf34      	ite	cc
 8009ec0:	f04f 0b02 	movcc.w	fp, #2
 8009ec4:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8009ec8:	9903      	ldr	r1, [sp, #12]
 8009eca:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8009ece:	fb01 f909 	mul.w	r9, r1, r9
 8009ed2:	f10a 31ff 	add.w	r1, sl, #4294967295
 8009ed6:	fb09 5501 	mla	r5, r9, r1, r5
 8009eda:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 8009edc:	f1ba 0f00 	cmp.w	sl, #0
 8009ee0:	d03b      	beq.n	8009f5a <BSP_LCD_DrawBitmap+0x12a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009ee2:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8009ee4:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 8009ee8:	2700      	movs	r7, #0
 8009eea:	4c21      	ldr	r4, [pc, #132]	; (8009f70 <BSP_LCD_DrawBitmap+0x140>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009eec:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8009ef0:	e006      	b.n	8009f00 <BSP_LCD_DrawBitmap+0xd0>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8009ef2:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8009ef4:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8009ef6:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 8009ef8:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8009efa:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8009efe:	d02c      	beq.n	8009f5a <BSP_LCD_DrawBitmap+0x12a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009f00:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8009f02:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8009f04:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8009f08:	21ff      	movs	r1, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8009f0a:	2b02      	cmp	r3, #2
  for(index=0; index < height; index++)
 8009f0c:	f107 0701 	add.w	r7, r7, #1
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8009f10:	6060      	str	r0, [r4, #4]
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8009f12:	bf18      	it	ne
 8009f14:	4613      	movne	r3, r2
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009f16:	4816      	ldr	r0, [pc, #88]	; (8009f70 <BSP_LCD_DrawBitmap+0x140>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8009f18:	60e2      	str	r2, [r4, #12]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8009f1a:	60a3      	str	r3, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 8009f1c:	4b15      	ldr	r3, [pc, #84]	; (8009f74 <BSP_LCD_DrawBitmap+0x144>)
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8009f1e:	e9c4 2113 	strd	r2, r1, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8009f22:	e9c4 2b11 	strd	r2, fp, [r4, #68]	; 0x44
  hlcd_dma2d.Instance = DMA2D;
 8009f26:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009f28:	f002 fc4a 	bl	800c7c0 <HAL_DMA2D_Init>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d1e0      	bne.n	8009ef2 <BSP_LCD_DrawBitmap+0xc2>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8009f30:	2101      	movs	r1, #1
 8009f32:	480f      	ldr	r0, [pc, #60]	; (8009f70 <BSP_LCD_DrawBitmap+0x140>)
 8009f34:	f002 fe96 	bl	800cc64 <HAL_DMA2D_ConfigLayer>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d1da      	bne.n	8009ef2 <BSP_LCD_DrawBitmap+0xc2>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	4642      	mov	r2, r8
 8009f40:	4629      	mov	r1, r5
 8009f42:	480b      	ldr	r0, [pc, #44]	; (8009f70 <BSP_LCD_DrawBitmap+0x140>)
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	9b03      	ldr	r3, [sp, #12]
 8009f48:	f002 fd02 	bl	800c950 <HAL_DMA2D_Start>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d1d0      	bne.n	8009ef2 <BSP_LCD_DrawBitmap+0xc2>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8009f50:	2132      	movs	r1, #50	; 0x32
 8009f52:	4807      	ldr	r0, [pc, #28]	; (8009f70 <BSP_LCD_DrawBitmap+0x140>)
 8009f54:	f002 fd58 	bl	800ca08 <HAL_DMA2D_PollForTransfer>
 8009f58:	e7cb      	b.n	8009ef2 <BSP_LCD_DrawBitmap+0xc2>
}
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	b005      	add	sp, #20
 8009f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8009f62:	f04f 0b00 	mov.w	fp, #0
 8009f66:	e7af      	b.n	8009ec8 <BSP_LCD_DrawBitmap+0x98>
 8009f68:	20006fdc 	.word	0x20006fdc
 8009f6c:	200070a0 	.word	0x200070a0
 8009f70:	2000701c 	.word	0x2000701c
 8009f74:	52001000 	.word	0x52001000

08009f78 <BSP_LCD_DrawVLine>:
{
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	4616      	mov	r6, r2
 8009f7e:	461d      	mov	r5, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009f80:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8009f84:	4b37      	ldr	r3, [pc, #220]	; (800a064 <BSP_LCD_DrawVLine+0xec>)
{
 8009f86:	b085      	sub	sp, #20
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009f88:	f04f 0a34 	mov.w	sl, #52	; 0x34
 8009f8c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8009f90:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
{
 8009f94:	9103      	str	r1, [sp, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009f96:	00c2      	lsls	r2, r0, #3
 8009f98:	4933      	ldr	r1, [pc, #204]	; (800a068 <BSP_LCD_DrawVLine+0xf0>)
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8009f9a:	eb06 0e05 	add.w	lr, r6, r5
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009f9e:	f8dc 7008 	ldr.w	r7, [ip, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009fa2:	1a10      	subs	r0, r2, r0
{
 8009fa4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009fa6:	fb0a 1107 	mla	r1, sl, r7, r1
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009faa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009fae:	f8dc a010 	ldr.w	sl, [ip, #16]
 8009fb2:	f8d1 905c 	ldr.w	r9, [r1, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8009fb6:	f8dc 1004 	ldr.w	r1, [ip, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009fba:	68da      	ldr	r2, [r3, #12]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8009fbc:	458e      	cmp	lr, r1
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8009fbe:	bf88      	it	hi
 8009fc0:	1b8d      	subhi	r5, r1, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009fc2:	2a02      	cmp	r2, #2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8009fc4:	f108 31ff 	add.w	r1, r8, #4294967295
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009fc8:	d011      	beq.n	8009fee <BSP_LCD_DrawVLine+0x76>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8009fca:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8009fcc:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800a070 <BSP_LCD_DrawVLine+0xf8>
  hlcd_dma2d.Instance = DMA2D;
 8009fd0:	4b26      	ldr	r3, [pc, #152]	; (800a06c <BSP_LCD_DrawVLine+0xf4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009fd2:	4658      	mov	r0, fp
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8009fd4:	e9cb 2102 	strd	r2, r1, [fp, #8]
  hlcd_dma2d.Instance = DMA2D;
 8009fd8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009fdc:	e9cb 3200 	strd	r3, r2, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009fe0:	f002 fbee 	bl	800c7c0 <HAL_DMA2D_Init>
 8009fe4:	b328      	cbz	r0, 800a032 <BSP_LCD_DrawVLine+0xba>
}
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	b005      	add	sp, #20
 8009fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8009fee:	f3c4 1345 	ubfx	r3, r4, #5, #6
 8009ff2:	f3c4 2cc4 	ubfx	ip, r4, #11, #5
 8009ff6:	f004 041f 	and.w	r4, r4, #31
 8009ffa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8009ffe:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800a002:	ebcc 1c4c 	rsb	ip, ip, ip, lsl #5
 800a006:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 800a00a:	f10c 0c17 	add.w	ip, ip, #23
 800a00e:	f104 0017 	add.w	r0, r4, #23
 800a012:	eb03 14c3 	add.w	r4, r3, r3, lsl #7
 800a016:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 800a01a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800a01e:	3421      	adds	r4, #33	; 0x21
 800a020:	09a4      	lsrs	r4, r4, #6
 800a022:	0224      	lsls	r4, r4, #8
 800a024:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800a028:	ea44 1490 	orr.w	r4, r4, r0, lsr #6
 800a02c:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
    break;
 800a030:	e7cc      	b.n	8009fcc <BSP_LCD_DrawVLine+0x54>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800a032:	2101      	movs	r1, #1
 800a034:	4658      	mov	r0, fp
 800a036:	f002 fe15 	bl	800cc64 <HAL_DMA2D_ConfigLayer>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d1d3      	bne.n	8009fe6 <BSP_LCD_DrawVLine+0x6e>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a03e:	9b03      	ldr	r3, [sp, #12]
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a040:	4621      	mov	r1, r4
 800a042:	4658      	mov	r0, fp
 800a044:	9500      	str	r5, [sp, #0]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a046:	fb06 3208 	mla	r2, r6, r8, r3
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a04a:	2301      	movs	r3, #1
 800a04c:	fb0a 9202 	mla	r2, sl, r2, r9
 800a050:	f002 fc7e 	bl	800c950 <HAL_DMA2D_Start>
 800a054:	2800      	cmp	r0, #0
 800a056:	d1c6      	bne.n	8009fe6 <BSP_LCD_DrawVLine+0x6e>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800a058:	2119      	movs	r1, #25
 800a05a:	4658      	mov	r0, fp
 800a05c:	f002 fcd4 	bl	800ca08 <HAL_DMA2D_PollForTransfer>
 800a060:	e7c1      	b.n	8009fe6 <BSP_LCD_DrawVLine+0x6e>
 800a062:	bf00      	nop
 800a064:	20006fdc 	.word	0x20006fdc
 800a068:	200070a0 	.word	0x200070a0
 800a06c:	52001000 	.word	0x52001000
 800a070:	2000701c 	.word	0x2000701c

0800a074 <DSI_IO_Write>:
  if(Size <= 1U)
 800a074:	2b01      	cmp	r3, #1
{
 800a076:	b530      	push	{r4, r5, lr}
 800a078:	460c      	mov	r4, r1
 800a07a:	b083      	sub	sp, #12
 800a07c:	4601      	mov	r1, r0
 800a07e:	4615      	mov	r5, r2
  if(Size <= 1U)
 800a080:	d909      	bls.n	800a096 <DSI_IO_Write+0x22>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 800a082:	2239      	movs	r2, #57	; 0x39
 800a084:	480a      	ldr	r0, [pc, #40]	; (800a0b0 <DSI_IO_Write+0x3c>)
 800a086:	e9cd 4500 	strd	r4, r5, [sp]
 800a08a:	f003 f903 	bl	800d294 <HAL_DSI_LongWrite>
 800a08e:	b958      	cbnz	r0, 800a0a8 <DSI_IO_Write+0x34>
  int32_t ret = BSP_ERROR_NONE;
 800a090:	2000      	movs	r0, #0
}
 800a092:	b003      	add	sp, #12
 800a094:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800a096:	5cd5      	ldrb	r5, [r2, r3]
 800a098:	4623      	mov	r3, r4
 800a09a:	2215      	movs	r2, #21
 800a09c:	4804      	ldr	r0, [pc, #16]	; (800a0b0 <DSI_IO_Write+0x3c>)
 800a09e:	9500      	str	r5, [sp, #0]
 800a0a0:	f003 f8cc 	bl	800d23c <HAL_DSI_ShortWrite>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d0f3      	beq.n	800a090 <DSI_IO_Write+0x1c>
      ret = BSP_ERROR_BUS_FAILURE;
 800a0a8:	f06f 0007 	mvn.w	r0, #7
 800a0ac:	e7f1      	b.n	800a092 <DSI_IO_Write+0x1e>
 800a0ae:	bf00      	nop
 800a0b0:	20007084 	.word	0x20007084

0800a0b4 <BSP_LCD_FillRGBRect>:
{
 800a0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b8:	e9dd 4609 	ldrd	r4, r6, [sp, #36]	; 0x24
  for(i = 0; i < Height; i++)
 800a0bc:	b376      	cbz	r6, 800a11c <BSP_LCD_FillRGBRect+0x68>
 800a0be:	b36c      	cbz	r4, 800a11c <BSP_LCD_FillRGBRect+0x68>
 800a0c0:	4d2f      	ldr	r5, [pc, #188]	; (800a180 <BSP_LCD_FillRGBRect+0xcc>)
 800a0c2:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a0c6:	f04f 0b1c 	mov.w	fp, #28
 800a0ca:	4416      	add	r6, r2
 800a0cc:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800a0d0:	f04f 0e34 	mov.w	lr, #52	; 0x34
 800a0d4:	fb0b 5b00 	mla	fp, fp, r0, r5
    for(j = 0; j < Width; j++)
 800a0d8:	f04f 0800 	mov.w	r8, #0
 800a0dc:	4637      	mov	r7, r6
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a0de:	f8dc 6008 	ldr.w	r6, [ip, #8]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 800a0e2:	eb01 0008 	add.w	r0, r1, r8
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a0e6:	4d27      	ldr	r5, [pc, #156]	; (800a184 <BSP_LCD_FillRGBRect+0xd0>)
 800a0e8:	f8d3 9000 	ldr.w	r9, [r3]
 800a0ec:	fb0e 5a06 	mla	sl, lr, r6, r5
 800a0f0:	f8da 6048 	ldr.w	r6, [sl, #72]	; 0x48
 800a0f4:	b9ae      	cbnz	r6, 800a122 <BSP_LCD_FillRGBRect+0x6e>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a0f6:	f8dc 5000 	ldr.w	r5, [ip]
    for(j = 0; j < Width; j++)
 800a0fa:	f108 0801 	add.w	r8, r8, #1
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a0fe:	f8da 605c 	ldr.w	r6, [sl, #92]	; 0x5c
 800a102:	fb05 0002 	mla	r0, r5, r2, r0
    for(j = 0; j < Width; j++)
 800a106:	4544      	cmp	r4, r8
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a108:	f846 9020 	str.w	r9, [r6, r0, lsl #2]
      pData += Lcd_Ctx[Instance].BppFactor;
 800a10c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800a110:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800a112:	d1e4      	bne.n	800a0de <BSP_LCD_FillRGBRect+0x2a>
 800a114:	463e      	mov	r6, r7
  for(i = 0; i < Height; i++)
 800a116:	3201      	adds	r2, #1
 800a118:	4296      	cmp	r6, r2
 800a11a:	d1dd      	bne.n	800a0d8 <BSP_LCD_FillRGBRect+0x24>
}
 800a11c:	2000      	movs	r0, #0
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a122:	f8dc 5000 	ldr.w	r5, [ip]
 800a126:	463e      	mov	r6, r7
 800a128:	fa1f f989 	uxth.w	r9, r9
 800a12c:	f8da 705c 	ldr.w	r7, [sl, #92]	; 0x5c
 800a130:	fb05 0002 	mla	r0, r5, r2, r0
    for(j = 0; j < Width; j++)
 800a134:	f108 0801 	add.w	r8, r8, #1
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a138:	f827 9010 	strh.w	r9, [r7, r0, lsl #1]
    for(j = 0; j < Width; j++)
 800a13c:	45a0      	cmp	r8, r4
      pData += Lcd_Ctx[Instance].BppFactor;
 800a13e:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800a142:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800a144:	d0e7      	beq.n	800a116 <BSP_LCD_FillRGBRect+0x62>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a146:	4d0f      	ldr	r5, [pc, #60]	; (800a184 <BSP_LCD_FillRGBRect+0xd0>)
 800a148:	f8db 0008 	ldr.w	r0, [fp, #8]
 800a14c:	fb0e 5000 	mla	r0, lr, r0, r5
 800a150:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800a154:	f8d0 a05c 	ldr.w	sl, [r0, #92]	; 0x5c
 800a158:	f8db 0000 	ldr.w	r0, [fp]
 800a15c:	fb02 f000 	mul.w	r0, r2, r0
 800a160:	f8d3 9000 	ldr.w	r9, [r3]
 800a164:	eb08 0701 	add.w	r7, r8, r1
    for(j = 0; j < Width; j++)
 800a168:	f108 0801 	add.w	r8, r8, #1
      pData += Lcd_Ctx[Instance].BppFactor;
 800a16c:	442b      	add	r3, r5
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a16e:	fa1f f989 	uxth.w	r9, r9
 800a172:	4407      	add	r7, r0
    for(j = 0; j < Width; j++)
 800a174:	4544      	cmp	r4, r8
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a176:	f82a 9017 	strh.w	r9, [sl, r7, lsl #1]
    for(j = 0; j < Width; j++)
 800a17a:	d8f1      	bhi.n	800a160 <BSP_LCD_FillRGBRect+0xac>
 800a17c:	e7cb      	b.n	800a116 <BSP_LCD_FillRGBRect+0x62>
 800a17e:	bf00      	nop
 800a180:	20006fdc 	.word	0x20006fdc
 800a184:	200070a0 	.word	0x200070a0

0800a188 <BSP_LCD_FillRect>:
{
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a18c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 800a190:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a192:	492f      	ldr	r1, [pc, #188]	; (800a250 <BSP_LCD_FillRect+0xc8>)
{
 800a194:	461e      	mov	r6, r3
 800a196:	4690      	mov	r8, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a198:	2434      	movs	r4, #52	; 0x34
 800a19a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800a19e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800a1a2:	4a2c      	ldr	r2, [pc, #176]	; (800a254 <BSP_LCD_FillRect+0xcc>)
{
 800a1a4:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a1a6:	6899      	ldr	r1, [r3, #8]
{
 800a1a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a1aa:	fb04 2201 	mla	r2, r4, r1, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800a1ae:	eba9 0106 	sub.w	r1, r9, r6
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a1b2:	f8d2 a05c 	ldr.w	sl, [r2, #92]	; 0x5c
 800a1b6:	e9d3 2b03 	ldrd	r2, fp, [r3, #12]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a1ba:	2a02      	cmp	r2, #2
 800a1bc:	d010      	beq.n	800a1e0 <BSP_LCD_FillRect+0x58>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800a1be:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800a1c0:	4c25      	ldr	r4, [pc, #148]	; (800a258 <BSP_LCD_FillRect+0xd0>)
  hlcd_dma2d.Instance = DMA2D;
 800a1c2:	4b26      	ldr	r3, [pc, #152]	; (800a25c <BSP_LCD_FillRect+0xd4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a1c4:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800a1c6:	e9c4 2102 	strd	r2, r1, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800a1ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a1ce:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a1d2:	f002 faf5 	bl	800c7c0 <HAL_DMA2D_Init>
 800a1d6:	b318      	cbz	r0, 800a220 <BSP_LCD_FillRect+0x98>
}
 800a1d8:	2000      	movs	r0, #0
 800a1da:	b003      	add	sp, #12
 800a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800a1e0:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800a1e4:	f3c5 24c4 	ubfx	r4, r5, #11, #5
 800a1e8:	f005 051f 	and.w	r5, r5, #31
 800a1ec:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800a1f0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800a1f4:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 800a1f8:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800a1fc:	3417      	adds	r4, #23
 800a1fe:	f105 0017 	add.w	r0, r5, #23
 800a202:	eb03 15c3 	add.w	r5, r3, r3, lsl #7
 800a206:	09a4      	lsrs	r4, r4, #6
 800a208:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800a20c:	3521      	adds	r5, #33	; 0x21
 800a20e:	09ad      	lsrs	r5, r5, #6
 800a210:	022d      	lsls	r5, r5, #8
 800a212:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800a216:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 800a21a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 800a21e:	e7cf      	b.n	800a1c0 <BSP_LCD_FillRect+0x38>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800a220:	2101      	movs	r1, #1
 800a222:	4620      	mov	r0, r4
 800a224:	f002 fd1e 	bl	800cc64 <HAL_DMA2D_ConfigLayer>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d1d5      	bne.n	800a1d8 <BSP_LCD_FillRect+0x50>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a22c:	fb08 7209 	mla	r2, r8, r9, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a230:	4629      	mov	r1, r5
 800a232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a234:	4633      	mov	r3, r6
 800a236:	fb0b a202 	mla	r2, fp, r2, sl
 800a23a:	4620      	mov	r0, r4
 800a23c:	9500      	str	r5, [sp, #0]
 800a23e:	f002 fb87 	bl	800c950 <HAL_DMA2D_Start>
 800a242:	2800      	cmp	r0, #0
 800a244:	d1c8      	bne.n	800a1d8 <BSP_LCD_FillRect+0x50>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800a246:	2119      	movs	r1, #25
 800a248:	4620      	mov	r0, r4
 800a24a:	f002 fbdd 	bl	800ca08 <HAL_DMA2D_PollForTransfer>
 800a24e:	e7c3      	b.n	800a1d8 <BSP_LCD_FillRect+0x50>
 800a250:	20006fdc 	.word	0x20006fdc
 800a254:	200070a0 	.word	0x200070a0
 800a258:	2000701c 	.word	0x2000701c
 800a25c:	52001000 	.word	0x52001000

0800a260 <BSP_LCD_DrawHLine>:
{
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	460e      	mov	r6, r1
 800a266:	469b      	mov	fp, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a268:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 800a26c:	4b34      	ldr	r3, [pc, #208]	; (800a340 <BSP_LCD_DrawHLine+0xe0>)
 800a26e:	00c4      	lsls	r4, r0, #3
 800a270:	f04f 0934 	mov.w	r9, #52	; 0x34
 800a274:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800a278:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
 800a27c:	4617      	mov	r7, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a27e:	1a20      	subs	r0, r4, r0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a280:	4a30      	ldr	r2, [pc, #192]	; (800a344 <BSP_LCD_DrawHLine+0xe4>)
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800a282:	eb06 0c0b 	add.w	ip, r6, fp
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a286:	f8de 1008 	ldr.w	r1, [lr, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a28a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800a28e:	45e0      	cmp	r8, ip
{
 800a290:	b083      	sub	sp, #12
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a292:	fb09 2201 	mla	r2, r9, r1, r2
 800a296:	f8de a010 	ldr.w	sl, [lr, #16]
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800a29a:	bf38      	it	cc
 800a29c:	eba8 0b06 	subcc.w	fp, r8, r6
{
 800a2a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a2a2:	f8d2 905c 	ldr.w	r9, [r2, #92]	; 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a2a6:	68da      	ldr	r2, [r3, #12]
 800a2a8:	2a02      	cmp	r2, #2
 800a2aa:	d011      	beq.n	800a2d0 <BSP_LCD_DrawHLine+0x70>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800a2ac:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800a2ae:	4c26      	ldr	r4, [pc, #152]	; (800a348 <BSP_LCD_DrawHLine+0xe8>)
 800a2b0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800a2b4:	6063      	str	r3, [r4, #4]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800a2b6:	2300      	movs	r3, #0
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a2b8:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800a2ba:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800a2bc:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 800a2be:	4b23      	ldr	r3, [pc, #140]	; (800a34c <BSP_LCD_DrawHLine+0xec>)
 800a2c0:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a2c2:	f002 fa7d 	bl	800c7c0 <HAL_DMA2D_Init>
 800a2c6:	b318      	cbz	r0, 800a310 <BSP_LCD_DrawHLine+0xb0>
}
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	b003      	add	sp, #12
 800a2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800a2d0:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800a2d4:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 800a2d8:	f005 051f 	and.w	r5, r5, #31
 800a2dc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800a2e0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800a2e4:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 800a2e8:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800a2ec:	3117      	adds	r1, #23
 800a2ee:	f105 0017 	add.w	r0, r5, #23
 800a2f2:	eb03 15c3 	add.w	r5, r3, r3, lsl #7
 800a2f6:	0989      	lsrs	r1, r1, #6
 800a2f8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800a2fc:	3521      	adds	r5, #33	; 0x21
 800a2fe:	09ad      	lsrs	r5, r5, #6
 800a300:	022d      	lsls	r5, r5, #8
 800a302:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800a306:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 800a30a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 800a30e:	e7ce      	b.n	800a2ae <BSP_LCD_DrawHLine+0x4e>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800a310:	2101      	movs	r1, #1
 800a312:	4620      	mov	r0, r4
 800a314:	f002 fca6 	bl	800cc64 <HAL_DMA2D_ConfigLayer>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d1d5      	bne.n	800a2c8 <BSP_LCD_DrawHLine+0x68>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a31c:	fb07 6208 	mla	r2, r7, r8, r6
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a320:	4629      	mov	r1, r5
 800a322:	2501      	movs	r5, #1
 800a324:	465b      	mov	r3, fp
 800a326:	fb0a 9202 	mla	r2, sl, r2, r9
 800a32a:	4620      	mov	r0, r4
 800a32c:	9500      	str	r5, [sp, #0]
 800a32e:	f002 fb0f 	bl	800c950 <HAL_DMA2D_Start>
 800a332:	2800      	cmp	r0, #0
 800a334:	d1c8      	bne.n	800a2c8 <BSP_LCD_DrawHLine+0x68>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800a336:	2119      	movs	r1, #25
 800a338:	4620      	mov	r0, r4
 800a33a:	f002 fb65 	bl	800ca08 <HAL_DMA2D_PollForTransfer>
 800a33e:	e7c3      	b.n	800a2c8 <BSP_LCD_DrawHLine+0x68>
 800a340:	20006fdc 	.word	0x20006fdc
 800a344:	200070a0 	.word	0x200070a0
 800a348:	2000701c 	.word	0x2000701c
 800a34c:	52001000 	.word	0x52001000

0800a350 <MX_DSIHOST_DSI_Init>:
{
 800a350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a354:	4699      	mov	r9, r3
 800a356:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800a358:	2300      	movs	r3, #0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800a35a:	f04f 0a04 	mov.w	sl, #4
 800a35e:	2601      	movs	r6, #1
{
 800a360:	4690      	mov	r8, r2
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800a362:	6043      	str	r3, [r0, #4]
  PLLInit.PLLNDIV = 100;
 800a364:	2264      	movs	r2, #100	; 0x64
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800a366:	9302      	str	r3, [sp, #8]
  hdsi->Instance = DSI;
 800a368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
{
 800a36c:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800a36e:	4669      	mov	r1, sp
  hdsi->Instance = DSI;
 800a370:	6003      	str	r3, [r0, #0]
  PLLInit.PLLNDIV = 100;
 800a372:	2305      	movs	r3, #5
{
 800a374:	4604      	mov	r4, r0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800a376:	e9c0 a602 	strd	sl, r6, [r0, #8]
  PLLInit.PLLNDIV = 100;
 800a37a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800a37e:	f002 fce3 	bl	800cd48 <HAL_DSI_Init>
 800a382:	b118      	cbz	r0, 800a38c <MX_DSIHOST_DSI_Init+0x3c>
    return HAL_ERROR;
 800a384:	4630      	mov	r0, r6
}
 800a386:	b01e      	add	sp, #120	; 0x78
 800a388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800a38c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800a390:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a394:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800a396:	4620      	mov	r0, r4
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800a398:	9314      	str	r3, [sp, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800a39a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800a39e:	2402      	movs	r4, #2
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800a3a0:	a903      	add	r1, sp, #12
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800a3a2:	9317      	str	r3, [sp, #92]	; 0x5c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800a3a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  VidCfg.ColorCoding = PixelFormat;
 800a3a8:	f8cd 9010 	str.w	r9, [sp, #16]
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 800a3ac:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.VerticalActive = Height;
 800a3ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.VirtualChannelID = 0;
 800a3b2:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800a3b4:	9505      	str	r5, [sp, #20]
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800a3b6:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800a3b8:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800a3ba:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800a3be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3c6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800a3ca:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800a3ce:	f24f 4224 	movw	r2, #62500	; 0xf424
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800a3d2:	931c      	str	r3, [sp, #112]	; 0x70
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800a3d4:	4b10      	ldr	r3, [pc, #64]	; (800a418 <MX_DSIHOST_DSI_Init+0xc8>)
  VidCfg.NumberOfChunks = 0;
 800a3d6:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800a3da:	fb02 3707 	mla	r7, r2, r7, r3
 800a3de:	4a0f      	ldr	r2, [pc, #60]	; (800a41c <MX_DSIHOST_DSI_Init+0xcc>)
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800a3e0:	230f      	movs	r3, #15
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800a3e2:	fba2 2707 	umull	r2, r7, r2, r7
  VidCfg.NullPacketSize = 0xFFFU;
 800a3e6:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800a3ea:	9311      	str	r3, [sp, #68]	; 0x44
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800a3ec:	2310      	movs	r3, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800a3ee:	0b7f      	lsrs	r7, r7, #13
  VidCfg.NullPacketSize = 0xFFFU;
 800a3f0:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800a3f2:	9312      	str	r3, [sp, #72]	; 0x48
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800a3f4:	234d      	movs	r3, #77	; 0x4d
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800a3f6:	970f      	str	r7, [sp, #60]	; 0x3c
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800a3f8:	930e      	str	r3, [sp, #56]	; 0x38
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800a3fa:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 800a3fe:	e9cd 5a0c 	strd	r5, sl, [sp, #48]	; 0x30
  VidCfg.LPVACTLargestPacketSize = 4;
 800a402:	e9cd aa15 	strd	sl, sl, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800a406:	f002 fdd5 	bl	800cfb4 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 800a40a:	3800      	subs	r0, #0
 800a40c:	bf18      	it	ne
 800a40e:	2001      	movne	r0, #1
}
 800a410:	b01e      	add	sp, #120	; 0x78
 800a412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a416:	bf00      	nop
 800a418:	0042c1d8 	.word	0x0042c1d8
 800a41c:	4c751ce3 	.word	0x4c751ce3

0800a420 <MX_LTDC_Init>:
{
 800a420:	b410      	push	{r4}
  hltdc->Instance = LTDC;
 800a422:	4c0e      	ldr	r4, [pc, #56]	; (800a45c <MX_LTDC_Init+0x3c>)
 800a424:	6004      	str	r4, [r0, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a426:	2400      	movs	r4, #0
  hltdc->Init.Backcolor.Blue  = 0x00;
 800a428:	8684      	strh	r4, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 800a42a:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 800a42e:	6184      	str	r4, [r0, #24]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800a430:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a434:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 800a438:	2401      	movs	r4, #1
 800a43a:	6144      	str	r4, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 800a43c:	2423      	movs	r4, #35	; 0x23
 800a43e:	61c4      	str	r4, [r0, #28]
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800a440:	190c      	adds	r4, r1, r4
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800a442:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800a444:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800a446:	240f      	movs	r4, #15
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800a448:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800a44a:	1911      	adds	r1, r2, r4
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800a44c:	321f      	adds	r2, #31
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800a44e:	6204      	str	r4, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800a450:	6281      	str	r1, [r0, #40]	; 0x28
}
 800a452:	f85d 4b04 	ldr.w	r4, [sp], #4
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800a456:	6302      	str	r2, [r0, #48]	; 0x30
  return HAL_LTDC_Init(hltdc);
 800a458:	f003 be56 	b.w	800e108 <HAL_LTDC_Init>
 800a45c:	50001000 	.word	0x50001000

0800a460 <MX_LTDC_ConfigLayer>:
{
 800a460:	4613      	mov	r3, r2
 800a462:	460a      	mov	r2, r1
 800a464:	b510      	push	{r4, lr}
  pLayerCfg.WindowX1 = Config->X1;
 800a466:	e9d3 1400 	ldrd	r1, r4, [r3]
{
 800a46a:	b08e      	sub	sp, #56	; 0x38
  pLayerCfg.WindowX0 = Config->X0;
 800a46c:	9101      	str	r1, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800a46e:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowX1 = Config->X1;
 800a470:	9402      	str	r4, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800a472:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 800a474:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
  pLayerCfg.WindowY0 = Config->Y0;
 800a478:	9103      	str	r1, [sp, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800a47a:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 800a47c:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800a47e:	910c      	str	r1, [sp, #48]	; 0x30
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800a480:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 800a482:	e9d3 4304 	ldrd	r4, r3, [r3, #16]
 800a486:	930a      	str	r3, [sp, #40]	; 0x28
  pLayerCfg.Alpha = 255;
 800a488:	2300      	movs	r3, #0
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800a48a:	9405      	str	r4, [sp, #20]
  pLayerCfg.Alpha = 255;
 800a48c:	24ff      	movs	r4, #255	; 0xff
  pLayerCfg.Backcolor.Blue = 0;
 800a48e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 800a492:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  pLayerCfg.Alpha = 255;
 800a496:	e9cd 4306 	strd	r4, r3, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800a49a:	2307      	movs	r3, #7
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800a49c:	f44f 64c0 	mov.w	r4, #1536	; 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800a4a0:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800a4a2:	9408      	str	r4, [sp, #32]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800a4a4:	f003 ff04 	bl	800e2b0 <HAL_LTDC_ConfigLayer>
}
 800a4a8:	b00e      	add	sp, #56	; 0x38
 800a4aa:	bd10      	pop	{r4, pc}

0800a4ac <MX_LTDC_ClockConfig>:
{
 800a4ac:	b510      	push	{r4, lr}
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800a4ae:	2105      	movs	r1, #5
{
 800a4b0:	b0b0      	sub	sp, #192	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800a4b2:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 800a4b6:	2084      	movs	r0, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800a4b8:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800a4ba:	2300      	movs	r3, #0
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800a4bc:	9400      	str	r4, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800a4be:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800a4c0:	9109      	str	r1, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800a4c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 800a4c6:	900a      	str	r0, [sp, #40]	; 0x28
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800a4c8:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800a4ca:	920b      	str	r2, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q      = 2U;
 800a4cc:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800a4ce:	e9cd 410d 	strd	r4, r1, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 800a4d2:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800a4d6:	f005 f8c7 	bl	800f668 <HAL_RCCEx_PeriphCLKConfig>
}
 800a4da:	b030      	add	sp, #192	; 0xc0
 800a4dc:	bd10      	pop	{r4, pc}
 800a4de:	bf00      	nop

0800a4e0 <BSP_LCD_InitEx>:
{
 800a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800a4e4:	2901      	cmp	r1, #1
{
 800a4e6:	b095      	sub	sp, #84	; 0x54
 800a4e8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800a4ea:	f200 8142 	bhi.w	800a772 <BSP_LCD_InitEx+0x292>
 800a4ee:	f1b0 0b00 	subs.w	fp, r0, #0
 800a4f2:	bf18      	it	ne
 800a4f4:	f04f 0b01 	movne.w	fp, #1
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	f040 813a 	bne.w	800a772 <BSP_LCD_InitEx+0x292>
 800a4fe:	4689      	mov	r9, r1
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 800a500:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800a502:	2901      	cmp	r1, #1
 800a504:	f200 8135 	bhi.w	800a772 <BSP_LCD_InitEx+0x292>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800a508:	2a02      	cmp	r2, #2
 800a50a:	461d      	mov	r5, r3
 800a50c:	f000 80ff 	beq.w	800a70e <BSP_LCD_InitEx+0x22e>
      Lcd_Ctx[Instance].BppFactor = 4U;
 800a510:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 800a512:	2305      	movs	r3, #5
  LCD_RESET_GPIO_CLK_ENABLE();
 800a514:	4ca2      	ldr	r4, [pc, #648]	; (800a7a0 <BSP_LCD_InitEx+0x2c0>)
 800a516:	4ea3      	ldr	r6, [pc, #652]	; (800a7a4 <BSP_LCD_InitEx+0x2c4>)
 800a518:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800a51a:	48a3      	ldr	r0, [pc, #652]	; (800a7a8 <BSP_LCD_InitEx+0x2c8>)
    hlcd_ltdc.Instance = LTDC;
 800a51c:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 800a7d8 <BSP_LCD_InitEx+0x2f8>
    hlcd_dsi.Instance = DSI;
 800a520:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800a7dc <BSP_LCD_InitEx+0x2fc>
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800a524:	e9c6 2103 	strd	r2, r1, [r6, #12]
    Lcd_Ctx[Instance].YSize  = Height;
 800a528:	e9c6 5700 	strd	r5, r7, [r6]
  LCD_RESET_GPIO_CLK_ENABLE();
 800a52c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800a530:	a90e      	add	r1, sp, #56	; 0x38
  LCD_RESET_GPIO_CLK_ENABLE();
 800a532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800a536:	ed9f 7b90 	vldr	d7, [pc, #576]	; 800a778 <BSP_LCD_InitEx+0x298>
  LCD_RESET_GPIO_CLK_ENABLE();
 800a53a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800a53e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800a542:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  LCD_RESET_GPIO_CLK_ENABLE();
 800a546:	f002 0240 	and.w	r2, r2, #64	; 0x40
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800a54a:	ed9f 7b8d 	vldr	d7, [pc, #564]	; 800a780 <BSP_LCD_InitEx+0x2a0>
  LCD_RESET_GPIO_CLK_ENABLE();
 800a54e:	9208      	str	r2, [sp, #32]
 800a550:	9a08      	ldr	r2, [sp, #32]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800a552:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800a556:	f002 ffbb 	bl	800d4d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800a55a:	2200      	movs	r2, #0
 800a55c:	2108      	movs	r1, #8
 800a55e:	4892      	ldr	r0, [pc, #584]	; (800a7a8 <BSP_LCD_InitEx+0x2c8>)
 800a560:	f003 f9ca 	bl	800d8f8 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800a564:	2014      	movs	r0, #20
 800a566:	f000 faef 	bl	800ab48 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 800a56a:	2201      	movs	r2, #1
 800a56c:	2108      	movs	r1, #8
 800a56e:	488e      	ldr	r0, [pc, #568]	; (800a7a8 <BSP_LCD_InitEx+0x2c8>)
 800a570:	f003 f9c2 	bl	800d8f8 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800a574:	200a      	movs	r0, #10
 800a576:	f000 fae7 	bl	800ab48 <HAL_Delay>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800a57a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800a57e:	a90e      	add	r1, sp, #56	; 0x38
 800a580:	488a      	ldr	r0, [pc, #552]	; (800a7ac <BSP_LCD_InitEx+0x2cc>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800a582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800a586:	ed9f 7b80 	vldr	d7, [pc, #512]	; 800a788 <BSP_LCD_InitEx+0x2a8>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800a58a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800a58e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800a592:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800a596:	f402 7200 	and.w	r2, r2, #512	; 0x200
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800a59a:	ed9f 7b7d 	vldr	d7, [pc, #500]	; 800a790 <BSP_LCD_InitEx+0x2b0>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800a59e:	9206      	str	r2, [sp, #24]
 800a5a0:	9a06      	ldr	r2, [sp, #24]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800a5a2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800a5a6:	f002 ff93 	bl	800d4d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a5b0:	487e      	ldr	r0, [pc, #504]	; (800a7ac <BSP_LCD_InitEx+0x2cc>)
 800a5b2:	f003 f9a1 	bl	800d8f8 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 800a5b6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800a5ba:	a90e      	add	r1, sp, #56	; 0x38
 800a5bc:	487b      	ldr	r0, [pc, #492]	; (800a7ac <BSP_LCD_InitEx+0x2cc>)
  LCD_TE_GPIO_CLK_ENABLE();
 800a5be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5c2:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800a5c6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800a5ca:	f402 7200 	and.w	r2, r2, #512	; 0x200
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800a5ce:	ed9f 7b72 	vldr	d7, [pc, #456]	; 800a798 <BSP_LCD_InitEx+0x2b8>
  LCD_TE_GPIO_CLK_ENABLE();
 800a5d2:	9207      	str	r2, [sp, #28]
 800a5d4:	9a07      	ldr	r2, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800a5d6:	2202      	movs	r2, #2
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800a5d8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800a5dc:	9211      	str	r2, [sp, #68]	; 0x44
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800a5de:	f002 ff77 	bl	800d4d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	2104      	movs	r1, #4
 800a5e6:	4871      	ldr	r0, [pc, #452]	; (800a7ac <BSP_LCD_InitEx+0x2cc>)
 800a5e8:	f003 f986 	bl	800d8f8 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	210f      	movs	r1, #15
 800a5f0:	2058      	movs	r0, #88	; 0x58
 800a5f2:	f000 fadb 	bl	800abac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800a5f6:	2058      	movs	r0, #88	; 0x58
 800a5f8:	f000 fb16 	bl	800ac28 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	210f      	movs	r1, #15
 800a600:	205a      	movs	r0, #90	; 0x5a
 800a602:	f000 fad3 	bl	800abac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800a606:	205a      	movs	r0, #90	; 0x5a
 800a608:	f000 fb0e 	bl	800ac28 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 800a60c:	2200      	movs	r2, #0
 800a60e:	210f      	movs	r1, #15
 800a610:	207b      	movs	r0, #123	; 0x7b
 800a612:	f000 facb 	bl	800abac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800a616:	207b      	movs	r0, #123	; 0x7b
 800a618:	f000 fb06 	bl	800ac28 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 800a61c:	4a64      	ldr	r2, [pc, #400]	; (800a7b0 <BSP_LCD_InitEx+0x2d0>)
    hlcd_dma2d.Instance = DMA2D;
 800a61e:	4965      	ldr	r1, [pc, #404]	; (800a7b4 <BSP_LCD_InitEx+0x2d4>)
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800a620:	4650      	mov	r0, sl
    hlcd_ltdc.Instance = LTDC;
 800a622:	f8c8 2000 	str.w	r2, [r8]
    hlcd_dma2d.Instance = DMA2D;
 800a626:	4a64      	ldr	r2, [pc, #400]	; (800a7b8 <BSP_LCD_InitEx+0x2d8>)
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800a628:	9b01      	ldr	r3, [sp, #4]
    hlcd_dma2d.Instance = DMA2D;
 800a62a:	6011      	str	r1, [r2, #0]
    hlcd_dsi.Instance = DSI;
 800a62c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800a630:	4629      	mov	r1, r5
    hlcd_dsi.Instance = DSI;
 800a632:	f8ca 2000 	str.w	r2, [sl]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a636:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800a63a:	f042 0208 	orr.w	r2, r2, #8
 800a63e:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
 800a642:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800a646:	f002 0208 	and.w	r2, r2, #8
 800a64a:	9205      	str	r2, [sp, #20]
 800a64c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_LTDC_FORCE_RESET();
 800a64e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a652:	f042 0208 	orr.w	r2, r2, #8
 800a656:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800a65a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a65e:	f022 0208 	bic.w	r2, r2, #8
 800a662:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a666:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800a66a:	f042 0210 	orr.w	r2, r2, #16
 800a66e:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
 800a672:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800a676:	f002 0210 	and.w	r2, r2, #16
 800a67a:	9204      	str	r2, [sp, #16]
 800a67c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800a67e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a680:	f042 0210 	orr.w	r2, r2, #16
 800a684:	67e2      	str	r2, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800a686:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a688:	f022 0210 	bic.w	r2, r2, #16
 800a68c:	67e2      	str	r2, [r4, #124]	; 0x7c
    __HAL_RCC_DSI_CLK_ENABLE();
 800a68e:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800a692:	f042 0210 	orr.w	r2, r2, #16
 800a696:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
 800a69a:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800a69e:	f002 0210 	and.w	r2, r2, #16
 800a6a2:	9203      	str	r2, [sp, #12]
 800a6a4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_DSI_FORCE_RESET();
 800a6a6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a6aa:	f042 0210 	orr.w	r2, r2, #16
 800a6ae:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 800a6b2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a6b6:	f022 0210 	bic.w	r2, r2, #16
 800a6ba:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800a6be:	463a      	mov	r2, r7
 800a6c0:	f7ff fe46 	bl	800a350 <MX_DSIHOST_DSI_Init>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d14f      	bne.n	800a768 <BSP_LCD_InitEx+0x288>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	f7ff feef 	bl	800a4ac <MX_LTDC_ClockConfig>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d14a      	bne.n	800a768 <BSP_LCD_InitEx+0x288>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	463a      	mov	r2, r7
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	f7ff fea2 	bl	800a420 <MX_LTDC_Init>
 800a6dc:	4601      	mov	r1, r0
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d142      	bne.n	800a768 <BSP_LCD_InitEx+0x288>
      config.Address     = LCD_LAYER_0_ADDRESS;
 800a6e2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800a6e6:	aa0e      	add	r2, sp, #56	; 0x38
 800a6e8:	4640      	mov	r0, r8
      config.X1          = Width;
 800a6ea:	950f      	str	r5, [sp, #60]	; 0x3c
      config.Y1          = Height;
 800a6ec:	9711      	str	r7, [sp, #68]	; 0x44
      config.X0          = 0;
 800a6ee:	910e      	str	r1, [sp, #56]	; 0x38
      config.Y0          = 0;
 800a6f0:	9110      	str	r1, [sp, #64]	; 0x40
      config.PixelFormat = ltdc_pixel_format;
 800a6f2:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
      config.Address     = LCD_LAYER_0_ADDRESS;
 800a6f6:	9313      	str	r3, [sp, #76]	; 0x4c
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800a6f8:	f7ff feb2 	bl	800a460 <MX_LTDC_ConfigLayer>
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	b150      	cbz	r0, 800a716 <BSP_LCD_InitEx+0x236>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800a700:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 800a704:	2301      	movs	r3, #1
 800a706:	61b3      	str	r3, [r6, #24]
}
 800a708:	b015      	add	sp, #84	; 0x54
 800a70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      dsi_pixel_format = DSI_RGB565;
 800a70e:	465b      	mov	r3, fp
      Lcd_Ctx[Instance].BppFactor = 2U;
 800a710:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800a712:	4693      	mov	fp, r2
 800a714:	e6fe      	b.n	800a514 <BSP_LCD_InitEx+0x34>
        (void)HAL_DSI_Start(&hlcd_dsi);
 800a716:	4650      	mov	r0, sl
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800a718:	4d28      	ldr	r5, [pc, #160]	; (800a7bc <BSP_LCD_InitEx+0x2dc>)
        (void)HAL_DSI_Start(&hlcd_dsi);
 800a71a:	f002 fd67 	bl	800d1ec <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800a71e:	2104      	movs	r1, #4
 800a720:	4650      	mov	r0, sl
 800a722:	f002 fd4f 	bl	800d1c4 <HAL_DSI_ConfigFlowControl>
  IOCtx.GetTick     = BSP_GetTick;
 800a726:	4b26      	ldr	r3, [pc, #152]	; (800a7c0 <BSP_LCD_InitEx+0x2e0>)
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800a728:	a90a      	add	r1, sp, #40	; 0x28
 800a72a:	4628      	mov	r0, r5
  IOCtx.GetTick     = BSP_GetTick;
 800a72c:	930d      	str	r3, [sp, #52]	; 0x34
  IOCtx.WriteReg    = DSI_IO_Write;
 800a72e:	4b25      	ldr	r3, [pc, #148]	; (800a7c4 <BSP_LCD_InitEx+0x2e4>)
  IOCtx.Address     = 0;
 800a730:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
  IOCtx.WriteReg    = DSI_IO_Write;
 800a734:	930b      	str	r3, [sp, #44]	; 0x2c
  IOCtx.ReadReg     = DSI_IO_Read;
 800a736:	4b24      	ldr	r3, [pc, #144]	; (800a7c8 <BSP_LCD_InitEx+0x2e8>)
 800a738:	930c      	str	r3, [sp, #48]	; 0x30
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800a73a:	f7fc fb9d 	bl	8006e78 <OTM8009A_RegisterBusIO>
 800a73e:	b980      	cbnz	r0, 800a762 <BSP_LCD_InitEx+0x282>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 800a740:	4c22      	ldr	r4, [pc, #136]	; (800a7cc <BSP_LCD_InitEx+0x2ec>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800a742:	4628      	mov	r0, r5
 800a744:	a909      	add	r1, sp, #36	; 0x24
    Lcd_CompObj = &OTM8009AObj;
 800a746:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800a748:	f7fc fb82 	bl	8006e50 <OTM8009A_ReadID>
 800a74c:	b948      	cbnz	r0, 800a762 <BSP_LCD_InitEx+0x282>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800a74e:	4b20      	ldr	r3, [pc, #128]	; (800a7d0 <BSP_LCD_InitEx+0x2f0>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800a750:	464a      	mov	r2, r9
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800a752:	4d20      	ldr	r5, [pc, #128]	; (800a7d4 <BSP_LCD_InitEx+0x2f4>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800a754:	4659      	mov	r1, fp
 800a756:	6820      	ldr	r0, [r4, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800a758:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4798      	blx	r3
 800a75e:	2800      	cmp	r0, #0
 800a760:	d0d0      	beq.n	800a704 <BSP_LCD_InitEx+0x224>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a762:	f06f 0006 	mvn.w	r0, #6
 800a766:	e7cd      	b.n	800a704 <BSP_LCD_InitEx+0x224>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a768:	f06f 0003 	mvn.w	r0, #3
}
 800a76c:	b015      	add	sp, #84	; 0x54
 800a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a772:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a776:	e7c7      	b.n	800a708 <BSP_LCD_InitEx+0x228>
 800a778:	00000008 	.word	0x00000008
 800a77c:	00000001 	.word	0x00000001
 800a780:	00000001 	.word	0x00000001
 800a784:	00000003 	.word	0x00000003
 800a788:	00001000 	.word	0x00001000
 800a78c:	00000001 	.word	0x00000001
 800a790:	00000000 	.word	0x00000000
 800a794:	00000002 	.word	0x00000002
 800a798:	00000004 	.word	0x00000004
 800a79c:	00000000 	.word	0x00000000
 800a7a0:	58024400 	.word	0x58024400
 800a7a4:	20006fdc 	.word	0x20006fdc
 800a7a8:	58021800 	.word	0x58021800
 800a7ac:	58022400 	.word	0x58022400
 800a7b0:	50001000 	.word	0x50001000
 800a7b4:	52001000 	.word	0x52001000
 800a7b8:	2000701c 	.word	0x2000701c
 800a7bc:	20006ffc 	.word	0x20006ffc
 800a7c0:	0800956d 	.word	0x0800956d
 800a7c4:	0800a075 	.word	0x0800a075
 800a7c8:	08009e09 	.word	0x08009e09
 800a7cc:	20006fd8 	.word	0x20006fd8
 800a7d0:	20004730 	.word	0x20004730
 800a7d4:	20006ff8 	.word	0x20006ff8
 800a7d8:	200070a0 	.word	0x200070a0
 800a7dc:	20007084 	.word	0x20007084

0800a7e0 <BSP_LCD_Init>:
{
 800a7e0:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800a7e2:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 800a7e6:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800a7e8:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	9400      	str	r4, [sp, #0]
 800a7f0:	f7ff fe76 	bl	800a4e0 <BSP_LCD_InitEx>
}
 800a7f4:	b002      	add	sp, #8
 800a7f6:	bd10      	pop	{r4, pc}

0800a7f8 <BSP_LCD_ConfigLayer>:
  if(Instance >= LCD_INSTANCES_NBR)
 800a7f8:	b948      	cbnz	r0, 800a80e <BSP_LCD_ConfigLayer+0x16>
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800a7fa:	4806      	ldr	r0, [pc, #24]	; (800a814 <BSP_LCD_ConfigLayer+0x1c>)
{
 800a7fc:	b508      	push	{r3, lr}
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800a7fe:	f7ff fe2f 	bl	800a460 <MX_LTDC_ConfigLayer>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a802:	2800      	cmp	r0, #0
 800a804:	bf0c      	ite	eq
 800a806:	2000      	moveq	r0, #0
 800a808:	f06f 0003 	mvnne.w	r0, #3
}
 800a80c:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a80e:	f06f 0001 	mvn.w	r0, #1
}
 800a812:	4770      	bx	lr
 800a814:	200070a0 	.word	0x200070a0

0800a818 <BSP_LCD_SetBrightness>:
  if(Instance >= LCD_INSTANCES_NBR)
 800a818:	b958      	cbnz	r0, 800a832 <BSP_LCD_SetBrightness+0x1a>
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800a81a:	4a07      	ldr	r2, [pc, #28]	; (800a838 <BSP_LCD_SetBrightness+0x20>)
{
 800a81c:	b508      	push	{r3, lr}
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800a81e:	4b07      	ldr	r3, [pc, #28]	; (800a83c <BSP_LCD_SetBrightness+0x24>)
 800a820:	6810      	ldr	r0, [r2, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	4798      	blx	r3
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a828:	2800      	cmp	r0, #0
 800a82a:	bf18      	it	ne
 800a82c:	f06f 0003 	mvnne.w	r0, #3
}
 800a830:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a832:	f06f 0001 	mvn.w	r0, #1
}
 800a836:	4770      	bx	lr
 800a838:	20006fd8 	.word	0x20006fd8
 800a83c:	20006ff8 	.word	0x20006ff8

0800a840 <BSP_SD_DeInit>:
  * @retval SD status
  */
int32_t BSP_SD_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  if(Instance >= SD_INSTANCES_NBR)
 800a840:	b9d0      	cbnz	r0, 800a878 <BSP_SD_DeInit+0x38>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800a842:	4810      	ldr	r0, [pc, #64]	; (800a884 <BSP_SD_DeInit+0x44>)
{
 800a844:	b510      	push	{r4, lr}
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800a846:	f006 fb33 	bl	8010eb0 <HAL_SD_DeInit>
 800a84a:	4604      	mov	r4, r0
 800a84c:	b9b8      	cbnz	r0, 800a87e <BSP_SD_DeInit+0x3e>
{
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
  {
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 800a84e:	2031      	movs	r0, #49	; 0x31
 800a850:	f000 f9f8 	bl	800ac44 <HAL_NVIC_DisableIRQ>

    /* DeInit GPIO pins can be done in the application
    (by surcharging this __weak function) */

    /* Disable SDMMC1 clock */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800a854:	4a0c      	ldr	r2, [pc, #48]	; (800a888 <BSP_SD_DeInit+0x48>)
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
#else
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800a856:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800a85a:	480c      	ldr	r0, [pc, #48]	; (800a88c <BSP_SD_DeInit+0x4c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800a85c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 800a860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a864:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800a868:	f002 ff78 	bl	800d75c <HAL_GPIO_DeInit>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
    HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800a86c:	2104      	movs	r1, #4
 800a86e:	4808      	ldr	r0, [pc, #32]	; (800a890 <BSP_SD_DeInit+0x50>)
 800a870:	f002 ff74 	bl	800d75c <HAL_GPIO_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 800a874:	4620      	mov	r0, r4
}
 800a876:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a878:	f06f 0001 	mvn.w	r0, #1
}
 800a87c:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a87e:	f06f 0003 	mvn.w	r0, #3
}
 800a882:	bd10      	pop	{r4, pc}
 800a884:	20007148 	.word	0x20007148
 800a888:	58024400 	.word	0x58024400
 800a88c:	58020800 	.word	0x58020800
 800a890:	58020c00 	.word	0x58020c00

0800a894 <MX_SDMMC1_SD_Init>:
{
 800a894:	b510      	push	{r4, lr}
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a896:	2200      	movs	r2, #0
  hsd->Instance                 = SDMMC1;
 800a898:	4c07      	ldr	r4, [pc, #28]	; (800a8b8 <MX_SDMMC1_SD_Init+0x24>)
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
 800a89a:	2102      	movs	r1, #2
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a89c:	6102      	str	r2, [r0, #16]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a89e:	e9c0 4200 	strd	r4, r2, [r0]
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a8a2:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800a8a6:	2204      	movs	r2, #4
 800a8a8:	e9c0 2105 	strd	r2, r1, [r0, #20]
  if(HAL_SD_Init(hsd) != HAL_OK)
 800a8ac:	f006 ff7c 	bl	80117a8 <HAL_SD_Init>
}
 800a8b0:	3800      	subs	r0, #0
 800a8b2:	bf18      	it	ne
 800a8b4:	2001      	movne	r0, #1
 800a8b6:	bd10      	pop	{r4, pc}
 800a8b8:	52007000 	.word	0x52007000

0800a8bc <BSP_SD_Init>:
  if(Instance >= SD_INSTANCES_NBR)
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	f040 8081 	bne.w	800a9c4 <BSP_SD_Init+0x108>
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800a8c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a8c6:	4842      	ldr	r0, [pc, #264]	; (800a9d0 <BSP_SD_Init+0x114>)
{
 800a8c8:	b530      	push	{r4, r5, lr}
 800a8ca:	b08d      	sub	sp, #52	; 0x34
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800a8cc:	f003 f80e 	bl	800d8ec <HAL_GPIO_ReadPin>
    if(ret != GPIO_PIN_RESET)
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d172      	bne.n	800a9bc <BSP_SD_Init+0x100>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a8d6:	4c3f      	ldr	r4, [pc, #252]	; (800a9d4 <BSP_SD_Init+0x118>)
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800a8d8:	220c      	movs	r2, #12
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a8da:	a906      	add	r1, sp, #24
 800a8dc:	483e      	ldr	r0, [pc, #248]	; (800a9d8 <BSP_SD_Init+0x11c>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a8de:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800a8e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8e6:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800a8ea:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800a8ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8f2:	9301      	str	r3, [sp, #4]
 800a8f4:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8f6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a8fa:	f043 0302 	orr.w	r3, r3, #2
 800a8fe:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a902:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a906:	f003 0302 	and.w	r3, r3, #2
 800a90a:	9302      	str	r3, [sp, #8]
 800a90c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a90e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a912:	f043 0304 	orr.w	r3, r3, #4
 800a916:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a91a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a91e:	f003 0304 	and.w	r3, r3, #4
 800a922:	9303      	str	r3, [sp, #12]
 800a924:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a926:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a92a:	f043 0308 	orr.w	r3, r3, #8
 800a92e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a932:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800a936:	920a      	str	r2, [sp, #40]	; 0x28
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800a938:	f44f 5288 	mov.w	r2, #4352	; 0x1100
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a93c:	f003 0308 	and.w	r3, r3, #8
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800a944:	2302      	movs	r3, #2
 800a946:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a94a:	2201      	movs	r2, #1
 800a94c:	2303      	movs	r3, #3
 800a94e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a952:	f002 fdbd 	bl	800d4d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = GPIO_PIN_2;
 800a956:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a958:	a906      	add	r1, sp, #24
 800a95a:	4820      	ldr	r0, [pc, #128]	; (800a9dc <BSP_SD_Init+0x120>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 800a95c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a95e:	f002 fdb7 	bl	800d4d0 <HAL_GPIO_Init>
  SD_DETECT_GPIO_CLK_ENABLE();
 800a962:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800a966:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800a96a:	a906      	add	r1, sp, #24
 800a96c:	4818      	ldr	r0, [pc, #96]	; (800a9d0 <BSP_SD_Init+0x114>)
  SD_DETECT_GPIO_CLK_ENABLE();
 800a96e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a972:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a976:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a97a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a97e:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800a980:	2300      	movs	r3, #0
  SD_DETECT_GPIO_CLK_ENABLE();
 800a982:	9c05      	ldr	r4, [sp, #20]
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800a984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a988:	2302      	movs	r3, #2
 800a98a:	2201      	movs	r2, #1
 800a98c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800a990:	f002 fd9e 	bl	800d4d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 800a994:	462a      	mov	r2, r5
 800a996:	210e      	movs	r1, #14
 800a998:	2031      	movs	r0, #49	; 0x31
 800a99a:	f000 f907 	bl	800abac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800a99e:	2031      	movs	r0, #49	; 0x31
 800a9a0:	f000 f942 	bl	800ac28 <HAL_NVIC_EnableIRQ>
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 800a9a4:	480e      	ldr	r0, [pc, #56]	; (800a9e0 <BSP_SD_Init+0x124>)
 800a9a6:	f7ff ff75 	bl	800a894 <MX_SDMMC1_SD_Init>
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	b968      	cbnz	r0, 800a9ca <BSP_SD_Init+0x10e>
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 800a9ae:	2102      	movs	r1, #2
 800a9b0:	480b      	ldr	r0, [pc, #44]	; (800a9e0 <BSP_SD_Init+0x124>)
 800a9b2:	f006 ff5f 	bl	8011874 <HAL_SD_ConfigSpeedBusOperation>
  int32_t ret = BSP_ERROR_NONE;
 800a9b6:	4620      	mov	r0, r4
}
 800a9b8:	b00d      	add	sp, #52	; 0x34
 800a9ba:	bd30      	pop	{r4, r5, pc}
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a9bc:	f06f 0006 	mvn.w	r0, #6
}
 800a9c0:	b00d      	add	sp, #52	; 0x34
 800a9c2:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a9c4:	f06f 0001 	mvn.w	r0, #1
}
 800a9c8:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a9ca:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a9ce:	e7f3      	b.n	800a9b8 <BSP_SD_Init+0xfc>
 800a9d0:	58022000 	.word	0x58022000
 800a9d4:	58024400 	.word	0x58024400
 800a9d8:	58020800 	.word	0x58020800
 800a9dc:	58020c00 	.word	0x58020c00
 800a9e0:	20007148 	.word	0x20007148

0800a9e4 <BSP_SD_ReadBlocks>:
{
 800a9e4:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800a9e6:	2464      	movs	r4, #100	; 0x64
{
 800a9e8:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800a9ea:	fb03 f404 	mul.w	r4, r3, r4
  if(Instance >= SD_INSTANCES_NBR)
 800a9ee:	b950      	cbnz	r0, 800aa06 <BSP_SD_ReadBlocks+0x22>
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800a9f0:	4806      	ldr	r0, [pc, #24]	; (800aa0c <BSP_SD_ReadBlocks+0x28>)
 800a9f2:	9400      	str	r4, [sp, #0]
 800a9f4:	f006 f84c 	bl	8010a90 <HAL_SD_ReadBlocks>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	bf0c      	ite	eq
 800a9fc:	2000      	moveq	r0, #0
 800a9fe:	f06f 0003 	mvnne.w	r0, #3
}
 800aa02:	b002      	add	sp, #8
 800aa04:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800aa06:	f06f 0001 	mvn.w	r0, #1
 800aa0a:	e7fa      	b.n	800aa02 <BSP_SD_ReadBlocks+0x1e>
 800aa0c:	20007148 	.word	0x20007148

0800aa10 <BSP_SD_WriteBlocks>:
{
 800aa10:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800aa12:	2464      	movs	r4, #100	; 0x64
{
 800aa14:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800aa16:	fb03 f404 	mul.w	r4, r3, r4
  if(Instance >= SD_INSTANCES_NBR)
 800aa1a:	b950      	cbnz	r0, 800aa32 <BSP_SD_WriteBlocks+0x22>
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800aa1c:	4806      	ldr	r0, [pc, #24]	; (800aa38 <BSP_SD_WriteBlocks+0x28>)
 800aa1e:	9400      	str	r4, [sp, #0]
 800aa20:	f006 f956 	bl	8010cd0 <HAL_SD_WriteBlocks>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800aa24:	2800      	cmp	r0, #0
 800aa26:	bf0c      	ite	eq
 800aa28:	2000      	moveq	r0, #0
 800aa2a:	f06f 0003 	mvnne.w	r0, #3
}
 800aa2e:	b002      	add	sp, #8
 800aa30:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800aa32:	f06f 0001 	mvn.w	r0, #1
 800aa36:	e7fa      	b.n	800aa2e <BSP_SD_WriteBlocks+0x1e>
 800aa38:	20007148 	.word	0x20007148

0800aa3c <BSP_SD_GetCardState>:
{
 800aa3c:	b508      	push	{r3, lr}
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800aa3e:	4b04      	ldr	r3, [pc, #16]	; (800aa50 <BSP_SD_GetCardState+0x14>)
 800aa40:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 800aa44:	f007 f874 	bl	8011b30 <HAL_SD_GetCardState>
}
 800aa48:	3804      	subs	r0, #4
 800aa4a:	bf18      	it	ne
 800aa4c:	2001      	movne	r0, #1
 800aa4e:	bd08      	pop	{r3, pc}
 800aa50:	20007148 	.word	0x20007148

0800aa54 <BSP_SD_GetCardInfo>:
  if(Instance >= SD_INSTANCES_NBR)
 800aa54:	b948      	cbnz	r0, 800aa6a <BSP_SD_GetCardInfo+0x16>
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800aa56:	4806      	ldr	r0, [pc, #24]	; (800aa70 <BSP_SD_GetCardInfo+0x1c>)
{
 800aa58:	b508      	push	{r3, lr}
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800aa5a:	f006 fdf1 	bl	8011640 <HAL_SD_GetCardInfo>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	bf0c      	ite	eq
 800aa62:	2000      	moveq	r0, #0
 800aa64:	f06f 0003 	mvnne.w	r0, #3
}
 800aa68:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800aa6a:	f06f 0001 	mvn.w	r0, #1
}
 800aa6e:	4770      	bx	lr
 800aa70:	20007148 	.word	0x20007148

0800aa74 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop

0800aa78 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800aa78:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <HAL_InitTick+0x40>)
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	b90b      	cbnz	r3, 800aa82 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800aa7e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800aa80:	4770      	bx	lr
{
 800aa82:	b510      	push	{r4, lr}
 800aa84:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800aa86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aa8a:	4a0c      	ldr	r2, [pc, #48]	; (800aabc <HAL_InitTick+0x44>)
 800aa8c:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa90:	6810      	ldr	r0, [r2, #0]
 800aa92:	fbb0 f0f3 	udiv	r0, r0, r3
 800aa96:	f000 f8e9 	bl	800ac6c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800aa9a:	2c0f      	cmp	r4, #15
 800aa9c:	d800      	bhi.n	800aaa0 <HAL_InitTick+0x28>
 800aa9e:	b108      	cbz	r0, 800aaa4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800aaa0:	2001      	movs	r0, #1
}
 800aaa2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaac:	f000 f87e 	bl	800abac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800aab0:	4b03      	ldr	r3, [pc, #12]	; (800aac0 <HAL_InitTick+0x48>)
 800aab2:	2000      	movs	r0, #0
 800aab4:	601c      	str	r4, [r3, #0]
}
 800aab6:	bd10      	pop	{r4, pc}
 800aab8:	20004804 	.word	0x20004804
 800aabc:	20004728 	.word	0x20004728
 800aac0:	20004808 	.word	0x20004808

0800aac4 <HAL_Init>:
{
 800aac4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aac6:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aac8:	4c12      	ldr	r4, [pc, #72]	; (800ab14 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aaca:	f000 f85d 	bl	800ab88 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aace:	f004 fa3f 	bl	800ef50 <HAL_RCC_GetSysClockFreq>
 800aad2:	4b11      	ldr	r3, [pc, #68]	; (800ab18 <HAL_Init+0x54>)
 800aad4:	4911      	ldr	r1, [pc, #68]	; (800ab1c <HAL_Init+0x58>)
 800aad6:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aad8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aada:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aade:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aae2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aae4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aae6:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800aaea:	490d      	ldr	r1, [pc, #52]	; (800ab20 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aaec:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aaf0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aaf2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800aaf6:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aaf8:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aafa:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aafc:	f7ff ffbc 	bl	800aa78 <HAL_InitTick>
 800ab00:	b110      	cbz	r0, 800ab08 <HAL_Init+0x44>
    return HAL_ERROR;
 800ab02:	2401      	movs	r4, #1
}
 800ab04:	4620      	mov	r0, r4
 800ab06:	bd10      	pop	{r4, pc}
 800ab08:	4604      	mov	r4, r0
  HAL_MspInit();
 800ab0a:	f7fb fa5b 	bl	8005fc4 <HAL_MspInit>
}
 800ab0e:	4620      	mov	r0, r4
 800ab10:	bd10      	pop	{r4, pc}
 800ab12:	bf00      	nop
 800ab14:	2000472c 	.word	0x2000472c
 800ab18:	58024400 	.word	0x58024400
 800ab1c:	0805fab4 	.word	0x0805fab4
 800ab20:	20004728 	.word	0x20004728

0800ab24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800ab24:	4a03      	ldr	r2, [pc, #12]	; (800ab34 <HAL_IncTick+0x10>)
 800ab26:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <HAL_IncTick+0x14>)
 800ab28:	6811      	ldr	r1, [r2, #0]
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	440b      	add	r3, r1
 800ab2e:	6013      	str	r3, [r2, #0]
}
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	200071c8 	.word	0x200071c8
 800ab38:	20004804 	.word	0x20004804

0800ab3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ab3c:	4b01      	ldr	r3, [pc, #4]	; (800ab44 <HAL_GetTick+0x8>)
 800ab3e:	6818      	ldr	r0, [r3, #0]
}
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	200071c8 	.word	0x200071c8

0800ab48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ab4c:	f7ff fff6 	bl	800ab3c <HAL_GetTick>
 800ab50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ab52:	1c63      	adds	r3, r4, #1
 800ab54:	d002      	beq.n	800ab5c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800ab56:	4b04      	ldr	r3, [pc, #16]	; (800ab68 <HAL_Delay+0x20>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ab5c:	f7ff ffee 	bl	800ab3c <HAL_GetTick>
 800ab60:	1b43      	subs	r3, r0, r5
 800ab62:	42a3      	cmp	r3, r4
 800ab64:	d3fa      	bcc.n	800ab5c <HAL_Delay+0x14>
  {
  }
}
 800ab66:	bd38      	pop	{r3, r4, r5, pc}
 800ab68:	20004804 	.word	0x20004804

0800ab6c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800ab6c:	4b01      	ldr	r3, [pc, #4]	; (800ab74 <HAL_GetREVID+0x8>)
 800ab6e:	6818      	ldr	r0, [r3, #0]
}
 800ab70:	0c00      	lsrs	r0, r0, #16
 800ab72:	4770      	bx	lr
 800ab74:	5c001000 	.word	0x5c001000

0800ab78 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800ab78:	4a02      	ldr	r2, [pc, #8]	; (800ab84 <HAL_EnableCompensationCell+0xc>)
 800ab7a:	6a13      	ldr	r3, [r2, #32]
 800ab7c:	f043 0301 	orr.w	r3, r3, #1
 800ab80:	6213      	str	r3, [r2, #32]
}
 800ab82:	4770      	bx	lr
 800ab84:	58000400 	.word	0x58000400

0800ab88 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab88:	4906      	ldr	r1, [pc, #24]	; (800aba4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab8a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab8e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800ab90:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab92:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab94:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab98:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab9c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800ab9e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800aba0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800aba2:	4770      	bx	lr
 800aba4:	e000ed00 	.word	0xe000ed00
 800aba8:	05fa0000 	.word	0x05fa0000

0800abac <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800abac:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <HAL_NVIC_SetPriority+0x70>)
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800abb4:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800abb6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800abba:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800abbe:	f1be 0f04 	cmp.w	lr, #4
 800abc2:	bf28      	it	cs
 800abc4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800abc8:	f1bc 0f06 	cmp.w	ip, #6
 800abcc:	d91a      	bls.n	800ac04 <HAL_NVIC_SetPriority+0x58>
 800abce:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800abd0:	f04f 3cff 	mov.w	ip, #4294967295
 800abd4:	fa0c fc03 	lsl.w	ip, ip, r3
 800abd8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800abdc:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800abe0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800abe2:	fa0c fc0e 	lsl.w	ip, ip, lr
 800abe6:	ea21 010c 	bic.w	r1, r1, ip
 800abea:	fa01 f103 	lsl.w	r1, r1, r3
 800abee:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800abf2:	db0a      	blt.n	800ac0a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abf4:	0109      	lsls	r1, r1, #4
 800abf6:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <HAL_NVIC_SetPriority+0x74>)
 800abf8:	b2c9      	uxtb	r1, r1
 800abfa:	4403      	add	r3, r0
 800abfc:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800ac00:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac04:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ac06:	4613      	mov	r3, r2
 800ac08:	e7e8      	b.n	800abdc <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac0a:	f000 000f 	and.w	r0, r0, #15
 800ac0e:	0109      	lsls	r1, r1, #4
 800ac10:	4b04      	ldr	r3, [pc, #16]	; (800ac24 <HAL_NVIC_SetPriority+0x78>)
 800ac12:	b2c9      	uxtb	r1, r1
 800ac14:	4403      	add	r3, r0
 800ac16:	7619      	strb	r1, [r3, #24]
 800ac18:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac1c:	e000ed00 	.word	0xe000ed00
 800ac20:	e000e100 	.word	0xe000e100
 800ac24:	e000ecfc 	.word	0xe000ecfc

0800ac28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	db07      	blt.n	800ac3c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac2c:	f000 011f 	and.w	r1, r0, #31
 800ac30:	2301      	movs	r3, #1
 800ac32:	0940      	lsrs	r0, r0, #5
 800ac34:	4a02      	ldr	r2, [pc, #8]	; (800ac40 <HAL_NVIC_EnableIRQ+0x18>)
 800ac36:	408b      	lsls	r3, r1
 800ac38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	e000e100 	.word	0xe000e100

0800ac44 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ac44:	2800      	cmp	r0, #0
 800ac46:	db0d      	blt.n	800ac64 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac48:	0943      	lsrs	r3, r0, #5
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f000 001f 	and.w	r0, r0, #31
 800ac50:	4905      	ldr	r1, [pc, #20]	; (800ac68 <HAL_NVIC_DisableIRQ+0x24>)
 800ac52:	3320      	adds	r3, #32
 800ac54:	fa02 f000 	lsl.w	r0, r2, r0
 800ac58:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ac5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ac60:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	e000e100 	.word	0xe000e100

0800ac6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ac6c:	1e43      	subs	r3, r0, #1
 800ac6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac72:	d20c      	bcs.n	800ac8e <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ac74:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ac78:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac7a:	4906      	ldr	r1, [pc, #24]	; (800ac94 <HAL_SYSTICK_Config+0x28>)
 800ac7c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ac80:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ac82:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac84:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ac88:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ac8a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ac8c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800ac8e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	e000ed00 	.word	0xe000ed00

0800ac98 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800ac98:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800ac9c:	4b04      	ldr	r3, [pc, #16]	; (800acb0 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800ac9e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800aca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aca2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aca6:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 800aca8:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	e000ed00 	.word	0xe000ed00

0800acb4 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800acb4:	4b06      	ldr	r3, [pc, #24]	; (800acd0 <HAL_MPU_Enable+0x1c>)
 800acb6:	f040 0001 	orr.w	r0, r0, #1
 800acba:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800acbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800acc4:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800acc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800acca:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800acce:	4770      	bx	lr
 800acd0:	e000ed00 	.word	0xe000ed00

0800acd4 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800acd4:	4a17      	ldr	r2, [pc, #92]	; (800ad34 <HAL_MPU_ConfigRegion+0x60>)
 800acd6:	7843      	ldrb	r3, [r0, #1]
 800acd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800acdc:	7801      	ldrb	r1, [r0, #0]
 800acde:	b321      	cbz	r1, 800ad2a <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800ace0:	6843      	ldr	r3, [r0, #4]
{
 800ace2:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 800ace4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ace8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800acea:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800acee:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800acf0:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800acf4:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800acf8:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800acfc:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800acfe:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ad00:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ad04:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ad08:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ad0c:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ad10:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800ad14:	7a01      	ldrb	r1, [r0, #8]
 800ad16:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800ad1a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800ad1e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ad22:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800ad26:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 800ad2a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800ad2e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800ad32:	4770      	bx	lr
 800ad34:	e000ed00 	.word	0xe000ed00

0800ad38 <HAL_DCMI_MspInit>:
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop

0800ad3c <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d047      	beq.n	800add0 <HAL_DCMI_Init+0x94>
{
 800ad40:	b570      	push	{r4, r5, r6, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800ad42:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800ad46:	4604      	mov	r4, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d03e      	beq.n	800adca <HAL_DCMI_Init+0x8e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ad4c:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800ad4e:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ad50:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d134      	bne.n	800adc2 <HAL_DCMI_Init+0x86>
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800ad58:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800ad5a:	6861      	ldr	r1, [r4, #4]
 800ad5c:	6966      	ldr	r6, [r4, #20]
 800ad5e:	430b      	orrs	r3, r1
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800ad60:	6822      	ldr	r2, [r4, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800ad62:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800ad64:	ea43 0306 	orr.w	r3, r3, r6
 800ad68:	68e6      	ldr	r6, [r4, #12]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800ad6a:	6815      	ldr	r5, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800ad6c:	ea43 0306 	orr.w	r3, r3, r6
 800ad70:	6926      	ldr	r6, [r4, #16]
 800ad72:	ea43 0306 	orr.w	r3, r3, r6
 800ad76:	68a6      	ldr	r6, [r4, #8]
 800ad78:	ea43 0306 	orr.w	r3, r3, r6
 800ad7c:	6a26      	ldr	r6, [r4, #32]
 800ad7e:	ea43 0306 	orr.w	r3, r3, r6
 800ad82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad84:	ea43 0306 	orr.w	r3, r3, r6
 800ad88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad8a:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800ad8e:	4e11      	ldr	r6, [pc, #68]	; (800add4 <HAL_DCMI_Init+0x98>)
 800ad90:	ea06 0605 	and.w	r6, r6, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800ad94:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800ad96:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800ad98:	ea43 0305 	orr.w	r3, r3, r5
 800ad9c:	6815      	ldr	r5, [r2, #0]
 800ad9e:	ea43 0305 	orr.w	r3, r3, r5
 800ada2:	ea43 0300 	orr.w	r3, r3, r0
 800ada6:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800ada8:	d101      	bne.n	800adae <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800adaa:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800adac:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800adae:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800adb0:	2000      	movs	r0, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800adb2:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800adb4:	f043 031e 	orr.w	r3, r3, #30
 800adb8:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800adba:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800adbc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800adc0:	bd70      	pop	{r4, r5, r6, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800adc2:	2200      	movs	r2, #0
 800adc4:	4610      	mov	r0, r2
 800adc6:	6262      	str	r2, [r4, #36]	; 0x24
 800adc8:	e7c7      	b.n	800ad5a <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 800adca:	f7ff ffb5 	bl	800ad38 <HAL_DCMI_MspInit>
 800adce:	e7bd      	b.n	800ad4c <HAL_DCMI_Init+0x10>
    return HAL_ERROR;
 800add0:	2001      	movs	r0, #1
}
 800add2:	4770      	bx	lr
 800add4:	ffe0f007 	.word	0xffe0f007

0800add8 <HAL_DCMI_MspDeInit>:
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop

0800addc <HAL_DCMI_DeInit>:
{
 800addc:	b510      	push	{r4, lr}
 800adde:	4604      	mov	r4, r0
  HAL_DCMI_MspDeInit(hdcmi);
 800ade0:	f7ff fffa 	bl	800add8 <HAL_DCMI_MspDeInit>
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800ade4:	2000      	movs	r0, #0
 800ade6:	64e0      	str	r0, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800ade8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_RESET;
 800adec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800adf0:	bd10      	pop	{r4, pc}
 800adf2:	bf00      	nop

0800adf4 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800adf4:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800adf6:	4b1e      	ldr	r3, [pc, #120]	; (800ae70 <HAL_DCMI_Stop+0x7c>)
 800adf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800adfc:	4a1d      	ldr	r2, [pc, #116]	; (800ae74 <HAL_DCMI_Stop+0x80>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	fba2 3203 	umull	r3, r2, r2, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800ae04:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800ae08:	0a52      	lsrs	r2, r2, #9
  __HAL_LOCK(hdcmi);
 800ae0a:	2b01      	cmp	r3, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800ae0c:	fb01 f202 	mul.w	r2, r1, r2
  __HAL_LOCK(hdcmi);
 800ae10:	d02a      	beq.n	800ae68 <HAL_DCMI_Stop+0x74>

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800ae12:	6801      	ldr	r1, [r0, #0]
 800ae14:	4605      	mov	r5, r0
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ae16:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 800ae18:	2001      	movs	r0, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ae1a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800ae1e:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800ae22:	680b      	ldr	r3, [r1, #0]
 800ae24:	f023 0301 	bic.w	r3, r3, #1
 800ae28:	600b      	str	r3, [r1, #0]
 800ae2a:	e003      	b.n	800ae34 <HAL_DCMI_Stop+0x40>

      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800ae2c:	680b      	ldr	r3, [r1, #0]
 800ae2e:	f013 0301 	ands.w	r3, r3, #1
 800ae32:	d017      	beq.n	800ae64 <HAL_DCMI_Stop+0x70>
    if (count == 0U)
 800ae34:	3a01      	subs	r2, #1
 800ae36:	d1f9      	bne.n	800ae2c <HAL_DCMI_Stop+0x38>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800ae38:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
      status = HAL_TIMEOUT;
 800ae3a:	2403      	movs	r4, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800ae3c:	f043 0320 	orr.w	r3, r3, #32
 800ae40:	64eb      	str	r3, [r5, #76]	; 0x4c

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800ae42:	680b      	ldr	r3, [r1, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800ae44:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 800ae46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae4a:	600b      	str	r3, [r1, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800ae4c:	f000 ff24 	bl	800bc98 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800ae50:	6ce9      	ldr	r1, [r5, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800ae52:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800ae54:	2200      	movs	r2, #0
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800ae56:	64e9      	str	r1, [r5, #76]	; 0x4c

  /* Return function status */
  return status;
}
 800ae58:	4620      	mov	r0, r4
  __HAL_UNLOCK(hdcmi);
 800ae5a:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_READY;
 800ae5e:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800ae64:	461c      	mov	r4, r3
 800ae66:	e7ec      	b.n	800ae42 <HAL_DCMI_Stop+0x4e>
  __HAL_LOCK(hdcmi);
 800ae68:	2402      	movs	r4, #2
}
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
 800ae6e:	bf00      	nop
 800ae70:	20004728 	.word	0x20004728
 800ae74:	10624dd3 	.word	0x10624dd3

0800ae78 <HAL_DCMI_Suspend>:
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800ae78:	4b1f      	ldr	r3, [pc, #124]	; (800aef8 <HAL_DCMI_Suspend+0x80>)
 800ae7a:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800ae7c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d037      	beq.n	800aef4 <HAL_DCMI_Suspend+0x7c>
 800ae84:	4601      	mov	r1, r0
 800ae86:	2001      	movs	r0, #1

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800ae88:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800ae8c:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d004      	beq.n	800ae9e <HAL_DCMI_Suspend+0x26>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800ae94:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ae96:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800ae98:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34

  /* Return function status */
  return status;
}
 800ae9c:	4770      	bx	lr
{
 800ae9e:	b500      	push	{lr}
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800aea0:	6808      	ldr	r0, [r1, #0]
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800aea2:	f04f 0e05 	mov.w	lr, #5
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800aea6:	4b15      	ldr	r3, [pc, #84]	; (800aefc <HAL_DCMI_Suspend+0x84>)
 800aea8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800aeac:	f881 e035 	strb.w	lr, [r1, #53]	; 0x35
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800aeb0:	fba3 2302 	umull	r2, r3, r3, r2
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800aeb4:	6802      	ldr	r2, [r0, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800aeb6:	0a5b      	lsrs	r3, r3, #9
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800aeb8:	f022 0201 	bic.w	r2, r2, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800aebc:	fb0c f303 	mul.w	r3, ip, r3
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800aec0:	6002      	str	r2, [r0, #0]
 800aec2:	e002      	b.n	800aeca <HAL_DCMI_Suspend+0x52>
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800aec4:	6802      	ldr	r2, [r0, #0]
 800aec6:	07d2      	lsls	r2, r2, #31
 800aec8:	d50e      	bpl.n	800aee8 <HAL_DCMI_Suspend+0x70>
      if (count == 0U)
 800aeca:	3b01      	subs	r3, #1
 800aecc:	d1fa      	bne.n	800aec4 <HAL_DCMI_Suspend+0x4c>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800aece:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 800aed0:	2201      	movs	r2, #1
        status = HAL_TIMEOUT;
 800aed2:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800aed4:	f043 0320 	orr.w	r3, r3, #32
 800aed8:	64cb      	str	r3, [r1, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800aeda:	2300      	movs	r3, #0
        hdcmi->State = HAL_DCMI_STATE_READY;
 800aedc:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800aee0:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
}
 800aee4:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_UNLOCK(hdcmi);
 800aee8:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800aeea:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800aeec:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
}
 800aef0:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hdcmi);
 800aef4:	2002      	movs	r0, #2
 800aef6:	4770      	bx	lr
 800aef8:	20004728 	.word	0x20004728
 800aefc:	10624dd3 	.word	0x10624dd3

0800af00 <HAL_DCMI_Resume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
  /* Process locked */
  __HAL_LOCK(hdcmi);
 800af00:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800af04:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800af06:	2a01      	cmp	r2, #1
 800af08:	d013      	beq.n	800af32 <HAL_DCMI_Resume+0x32>

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800af0a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800af0e:	2101      	movs	r1, #1
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800af10:	2a05      	cmp	r2, #5
  __HAL_LOCK(hdcmi);
 800af12:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800af16:	d107      	bne.n	800af28 <HAL_DCMI_Resume+0x28>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;

    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800af18:	6801      	ldr	r1, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800af1a:	2202      	movs	r2, #2
 800af1c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800af20:	680a      	ldr	r2, [r1, #0]
 800af22:	f042 0201 	orr.w	r2, r2, #1
 800af26:	600a      	str	r2, [r1, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800af28:	2200      	movs	r2, #0

  /* Return function status */
  return HAL_OK;
 800af2a:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdcmi);
 800af2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800af30:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800af32:	2002      	movs	r0, #2
}
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop

0800af38 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af38:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800af3a:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800af3c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800af3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af40:	2b02      	cmp	r3, #2
 800af42:	d006      	beq.n	800af52 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800af44:	2301      	movs	r3, #1
 800af46:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800af4a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800af4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af50:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800af52:	f7fe fec5 	bl	8009ce0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800af56:	bd08      	pop	{r3, pc}

0800af58 <HAL_DCMI_IRQHandler>:
{
 800af58:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800af5a:	6803      	ldr	r3, [r0, #0]
{
 800af5c:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800af5e:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800af60:	0769      	lsls	r1, r5, #29
 800af62:	d437      	bmi.n	800afd4 <HAL_DCMI_IRQHandler+0x7c>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800af64:	07aa      	lsls	r2, r5, #30
 800af66:	d425      	bmi.n	800afb4 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800af68:	06eb      	lsls	r3, r5, #27
 800af6a:	d41c      	bmi.n	800afa6 <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800af6c:	0728      	lsls	r0, r5, #28
 800af6e:	d413      	bmi.n	800af98 <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800af70:	07e9      	lsls	r1, r5, #31
 800af72:	d510      	bpl.n	800af96 <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	0792      	lsls	r2, r2, #30
 800af7a:	d503      	bpl.n	800af84 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	f022 021e 	bic.w	r2, r2, #30
 800af82:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800af84:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800af86:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 800af88:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800af8a:	f022 0201 	bic.w	r2, r2, #1
 800af8e:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800af90:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 800af92:	f7fe fe99 	bl	8009cc8 <HAL_DCMI_FrameEventCallback>
}
 800af96:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800af9c:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800af9e:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800afa0:	f7fe fe98 	bl	8009cd4 <HAL_DCMI_VsyncEventCallback>
 800afa4:	e7e4      	b.n	800af70 <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 800afaa:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800afac:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 800afae:	f7fe fe85 	bl	8009cbc <HAL_DCMI_LineEventCallback>
 800afb2:	e7db      	b.n	800af6c <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	2102      	movs	r1, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800afb8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800afba:	2204      	movs	r2, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800afbc:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800afbe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800afc0:	f043 0301 	orr.w	r3, r3, #1
 800afc4:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800afc6:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800afc8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800afcc:	6503      	str	r3, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800afce:	f000 ffdb 	bl	800bf88 <HAL_DMA_Abort_IT>
 800afd2:	e7c9      	b.n	800af68 <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800afd4:	2204      	movs	r2, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800afd6:	6c80      	ldr	r0, [r0, #72]	; 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800afd8:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800afda:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800afdc:	f043 0302 	orr.w	r3, r3, #2
 800afe0:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800afe2:	4b03      	ldr	r3, [pc, #12]	; (800aff0 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800afe4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800afe8:	6503      	str	r3, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800afea:	f000 ffcd 	bl	800bf88 <HAL_DMA_Abort_IT>
 800afee:	e7b9      	b.n	800af64 <HAL_DCMI_IRQHandler+0xc>
 800aff0:	0800af39 	.word	0x0800af39

0800aff4 <HAL_DCMI_ConfigCrop>:
{
 800aff4:	4684      	mov	ip, r0
  __HAL_LOCK(hdcmi);
 800aff6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800affa:	2801      	cmp	r0, #1
 800affc:	d015      	beq.n	800b02a <HAL_DCMI_ConfigCrop+0x36>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800affe:	2002      	movs	r0, #2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800b000:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  __HAL_UNLOCK(hdcmi);
 800b004:	2200      	movs	r2, #0
{
 800b006:	b510      	push	{r4, lr}
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800b008:	9c02      	ldr	r4, [sp, #8]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800b00a:	f04f 0e01 	mov.w	lr, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b00e:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800b012:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b016:	f8dc 0000 	ldr.w	r0, [ip]
 800b01a:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800b01c:	6201      	str	r1, [r0, #32]
  return HAL_OK;
 800b01e:	4610      	mov	r0, r2
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800b020:	f88c e035 	strb.w	lr, [ip, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800b024:	f88c 2034 	strb.w	r2, [ip, #52]	; 0x34
}
 800b028:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdcmi);
 800b02a:	2002      	movs	r0, #2
}
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop

0800b030 <HAL_DCMI_DisableCrop>:
  __HAL_LOCK(hdcmi);
 800b030:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800b034:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800b036:	2a01      	cmp	r2, #1
 800b038:	d010      	beq.n	800b05c <HAL_DCMI_DisableCrop+0x2c>
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800b03a:	6800      	ldr	r0, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b03c:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdcmi);
 800b03e:	2100      	movs	r1, #0
  hdcmi->State = HAL_DCMI_STATE_READY;
 800b040:	f04f 0c01 	mov.w	ip, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800b048:	6802      	ldr	r2, [r0, #0]
 800b04a:	f022 0204 	bic.w	r2, r2, #4
 800b04e:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 800b050:	4608      	mov	r0, r1
  hdcmi->State = HAL_DCMI_STATE_READY;
 800b052:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800b056:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
  return HAL_OK;
 800b05a:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800b05c:	2002      	movs	r0, #2
}
 800b05e:	4770      	bx	lr

0800b060 <HAL_DCMI_EnableCrop>:
  __HAL_LOCK(hdcmi);
 800b060:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800b064:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800b066:	2a01      	cmp	r2, #1
 800b068:	d010      	beq.n	800b08c <HAL_DCMI_EnableCrop+0x2c>
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800b06a:	6800      	ldr	r0, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b06c:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdcmi);
 800b06e:	2100      	movs	r1, #0
  hdcmi->State = HAL_DCMI_STATE_READY;
 800b070:	f04f 0c01 	mov.w	ip, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800b078:	6802      	ldr	r2, [r0, #0]
 800b07a:	f042 0204 	orr.w	r2, r2, #4
 800b07e:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 800b080:	4608      	mov	r0, r1
  hdcmi->State = HAL_DCMI_STATE_READY;
 800b082:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800b086:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
  return HAL_OK;
 800b08a:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800b08c:	2002      	movs	r0, #2
}
 800b08e:	4770      	bx	lr

0800b090 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b090:	6802      	ldr	r2, [r0, #0]
 800b092:	4b34      	ldr	r3, [pc, #208]	; (800b164 <DMA_CalcBaseAndBitshift+0xd4>)
 800b094:	4934      	ldr	r1, [pc, #208]	; (800b168 <DMA_CalcBaseAndBitshift+0xd8>)
{
 800b096:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b098:	4d34      	ldr	r5, [pc, #208]	; (800b16c <DMA_CalcBaseAndBitshift+0xdc>)
 800b09a:	4c35      	ldr	r4, [pc, #212]	; (800b170 <DMA_CalcBaseAndBitshift+0xe0>)
 800b09c:	42aa      	cmp	r2, r5
 800b09e:	bf18      	it	ne
 800b0a0:	429a      	cmpne	r2, r3
 800b0a2:	bf0c      	ite	eq
 800b0a4:	2301      	moveq	r3, #1
 800b0a6:	2300      	movne	r3, #0
 800b0a8:	428a      	cmp	r2, r1
 800b0aa:	bf08      	it	eq
 800b0ac:	f043 0301 	orreq.w	r3, r3, #1
 800b0b0:	3130      	adds	r1, #48	; 0x30
 800b0b2:	42a2      	cmp	r2, r4
 800b0b4:	bf08      	it	eq
 800b0b6:	f043 0301 	orreq.w	r3, r3, #1
 800b0ba:	3430      	adds	r4, #48	; 0x30
 800b0bc:	428a      	cmp	r2, r1
 800b0be:	bf08      	it	eq
 800b0c0:	f043 0301 	orreq.w	r3, r3, #1
 800b0c4:	3130      	adds	r1, #48	; 0x30
 800b0c6:	42a2      	cmp	r2, r4
 800b0c8:	bf08      	it	eq
 800b0ca:	f043 0301 	orreq.w	r3, r3, #1
 800b0ce:	3430      	adds	r4, #48	; 0x30
 800b0d0:	428a      	cmp	r2, r1
 800b0d2:	bf08      	it	eq
 800b0d4:	f043 0301 	orreq.w	r3, r3, #1
 800b0d8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800b0dc:	42a2      	cmp	r2, r4
 800b0de:	bf08      	it	eq
 800b0e0:	f043 0301 	orreq.w	r3, r3, #1
 800b0e4:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800b0e8:	428a      	cmp	r2, r1
 800b0ea:	bf08      	it	eq
 800b0ec:	f043 0301 	orreq.w	r3, r3, #1
 800b0f0:	3130      	adds	r1, #48	; 0x30
 800b0f2:	42a2      	cmp	r2, r4
 800b0f4:	bf08      	it	eq
 800b0f6:	f043 0301 	orreq.w	r3, r3, #1
 800b0fa:	3430      	adds	r4, #48	; 0x30
 800b0fc:	428a      	cmp	r2, r1
 800b0fe:	bf08      	it	eq
 800b100:	f043 0301 	orreq.w	r3, r3, #1
 800b104:	3130      	adds	r1, #48	; 0x30
 800b106:	42a2      	cmp	r2, r4
 800b108:	bf08      	it	eq
 800b10a:	f043 0301 	orreq.w	r3, r3, #1
 800b10e:	3430      	adds	r4, #48	; 0x30
 800b110:	428a      	cmp	r2, r1
 800b112:	bf08      	it	eq
 800b114:	f043 0301 	orreq.w	r3, r3, #1
 800b118:	3130      	adds	r1, #48	; 0x30
 800b11a:	42a2      	cmp	r2, r4
 800b11c:	bf08      	it	eq
 800b11e:	f043 0301 	orreq.w	r3, r3, #1
 800b122:	428a      	cmp	r2, r1
 800b124:	bf08      	it	eq
 800b126:	f043 0301 	orreq.w	r3, r3, #1
 800b12a:	b913      	cbnz	r3, 800b132 <DMA_CalcBaseAndBitshift+0xa2>
 800b12c:	4b11      	ldr	r3, [pc, #68]	; (800b174 <DMA_CalcBaseAndBitshift+0xe4>)
 800b12e:	429a      	cmp	r2, r3
 800b130:	d113      	bne.n	800b15a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b132:	b2d3      	uxtb	r3, r2
 800b134:	4910      	ldr	r1, [pc, #64]	; (800b178 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b136:	4c11      	ldr	r4, [pc, #68]	; (800b17c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b138:	3b10      	subs	r3, #16
 800b13a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800b13e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b140:	4b0f      	ldr	r3, [pc, #60]	; (800b180 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b142:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b146:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b14a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b14c:	bf88      	it	hi
 800b14e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b150:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b152:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800b154:	4618      	mov	r0, r3
 800b156:	bc30      	pop	{r4, r5}
 800b158:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b15a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800b15e:	6583      	str	r3, [r0, #88]	; 0x58
 800b160:	e7f8      	b.n	800b154 <DMA_CalcBaseAndBitshift+0xc4>
 800b162:	bf00      	nop
 800b164:	40020010 	.word	0x40020010
 800b168:	40020040 	.word	0x40020040
 800b16c:	40020028 	.word	0x40020028
 800b170:	40020058 	.word	0x40020058
 800b174:	400204b8 	.word	0x400204b8
 800b178:	aaaaaaab 	.word	0xaaaaaaab
 800b17c:	08060444 	.word	0x08060444
 800b180:	fffffc00 	.word	0xfffffc00

0800b184 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b184:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b186:	4a29      	ldr	r2, [pc, #164]	; (800b22c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800b188:	4929      	ldr	r1, [pc, #164]	; (800b230 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800b18a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b18c:	4d29      	ldr	r5, [pc, #164]	; (800b234 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800b18e:	4c2a      	ldr	r4, [pc, #168]	; (800b238 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800b190:	42ab      	cmp	r3, r5
 800b192:	bf18      	it	ne
 800b194:	4293      	cmpne	r3, r2
 800b196:	bf0c      	ite	eq
 800b198:	2201      	moveq	r2, #1
 800b19a:	2200      	movne	r2, #0
 800b19c:	428b      	cmp	r3, r1
 800b19e:	bf08      	it	eq
 800b1a0:	f042 0201 	orreq.w	r2, r2, #1
 800b1a4:	3128      	adds	r1, #40	; 0x28
 800b1a6:	42a3      	cmp	r3, r4
 800b1a8:	bf08      	it	eq
 800b1aa:	f042 0201 	orreq.w	r2, r2, #1
 800b1ae:	3428      	adds	r4, #40	; 0x28
 800b1b0:	428b      	cmp	r3, r1
 800b1b2:	bf08      	it	eq
 800b1b4:	f042 0201 	orreq.w	r2, r2, #1
 800b1b8:	3128      	adds	r1, #40	; 0x28
 800b1ba:	42a3      	cmp	r3, r4
 800b1bc:	bf08      	it	eq
 800b1be:	f042 0201 	orreq.w	r2, r2, #1
 800b1c2:	428b      	cmp	r3, r1
 800b1c4:	bf08      	it	eq
 800b1c6:	f042 0201 	orreq.w	r2, r2, #1
 800b1ca:	b912      	cbnz	r2, 800b1d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 800b1cc:	4a1b      	ldr	r2, [pc, #108]	; (800b23c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d113      	bne.n	800b1fa <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	4c1a      	ldr	r4, [pc, #104]	; (800b240 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b1d6:	4a1b      	ldr	r2, [pc, #108]	; (800b244 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b1d8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b1da:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b1dc:	4d1a      	ldr	r5, [pc, #104]	; (800b248 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b1de:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b1e2:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b1e4:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b1e8:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b1ec:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b1ee:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b1f2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b1f4:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b1f6:	bc30      	pop	{r4, r5}
 800b1f8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b1fa:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b1fc:	4913      	ldr	r1, [pc, #76]	; (800b24c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b1fe:	4c14      	ldr	r4, [pc, #80]	; (800b250 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b200:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b202:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b204:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b206:	fba4 2302 	umull	r2, r3, r4, r2
 800b20a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b20e:	d800      	bhi.n	800b212 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800b210:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b212:	4a10      	ldr	r2, [pc, #64]	; (800b254 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b214:	f003 051f 	and.w	r5, r3, #31
 800b218:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b21a:	4c0f      	ldr	r4, [pc, #60]	; (800b258 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b21c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b21e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b220:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b222:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b224:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b226:	6602      	str	r2, [r0, #96]	; 0x60
}
 800b228:	e7e5      	b.n	800b1f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 800b22a:	bf00      	nop
 800b22c:	58025408 	.word	0x58025408
 800b230:	58025430 	.word	0x58025430
 800b234:	5802541c 	.word	0x5802541c
 800b238:	58025444 	.word	0x58025444
 800b23c:	58025494 	.word	0x58025494
 800b240:	cccccccd 	.word	0xcccccccd
 800b244:	16009600 	.word	0x16009600
 800b248:	58025880 	.word	0x58025880
 800b24c:	bffdfbf0 	.word	0xbffdfbf0
 800b250:	aaaaaaab 	.word	0xaaaaaaab
 800b254:	10008200 	.word	0x10008200
 800b258:	40020880 	.word	0x40020880

0800b25c <HAL_DMA_Init>:
{
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b260:	f7ff fc6c 	bl	800ab3c <HAL_GetTick>
  if(hdma == NULL)
 800b264:	2c00      	cmp	r4, #0
 800b266:	f000 8177 	beq.w	800b558 <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	4605      	mov	r5, r0
 800b26e:	4a92      	ldr	r2, [pc, #584]	; (800b4b8 <HAL_DMA_Init+0x25c>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d048      	beq.n	800b306 <HAL_DMA_Init+0xaa>
 800b274:	3218      	adds	r2, #24
 800b276:	4293      	cmp	r3, r2
 800b278:	d045      	beq.n	800b306 <HAL_DMA_Init+0xaa>
 800b27a:	3230      	adds	r2, #48	; 0x30
 800b27c:	498f      	ldr	r1, [pc, #572]	; (800b4bc <HAL_DMA_Init+0x260>)
 800b27e:	428b      	cmp	r3, r1
 800b280:	bf18      	it	ne
 800b282:	4293      	cmpne	r3, r2
 800b284:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800b288:	bf0c      	ite	eq
 800b28a:	2201      	moveq	r2, #1
 800b28c:	2200      	movne	r2, #0
 800b28e:	428b      	cmp	r3, r1
 800b290:	bf08      	it	eq
 800b292:	f042 0201 	orreq.w	r2, r2, #1
 800b296:	3118      	adds	r1, #24
 800b298:	428b      	cmp	r3, r1
 800b29a:	bf08      	it	eq
 800b29c:	f042 0201 	orreq.w	r2, r2, #1
 800b2a0:	3118      	adds	r1, #24
 800b2a2:	428b      	cmp	r3, r1
 800b2a4:	bf08      	it	eq
 800b2a6:	f042 0201 	orreq.w	r2, r2, #1
 800b2aa:	3118      	adds	r1, #24
 800b2ac:	428b      	cmp	r3, r1
 800b2ae:	bf08      	it	eq
 800b2b0:	f042 0201 	orreq.w	r2, r2, #1
 800b2b4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800b2b8:	428b      	cmp	r3, r1
 800b2ba:	bf08      	it	eq
 800b2bc:	f042 0201 	orreq.w	r2, r2, #1
 800b2c0:	3118      	adds	r1, #24
 800b2c2:	428b      	cmp	r3, r1
 800b2c4:	bf08      	it	eq
 800b2c6:	f042 0201 	orreq.w	r2, r2, #1
 800b2ca:	3118      	adds	r1, #24
 800b2cc:	428b      	cmp	r3, r1
 800b2ce:	bf08      	it	eq
 800b2d0:	f042 0201 	orreq.w	r2, r2, #1
 800b2d4:	3118      	adds	r1, #24
 800b2d6:	428b      	cmp	r3, r1
 800b2d8:	bf08      	it	eq
 800b2da:	f042 0201 	orreq.w	r2, r2, #1
 800b2de:	3118      	adds	r1, #24
 800b2e0:	428b      	cmp	r3, r1
 800b2e2:	bf08      	it	eq
 800b2e4:	f042 0201 	orreq.w	r2, r2, #1
 800b2e8:	3118      	adds	r1, #24
 800b2ea:	428b      	cmp	r3, r1
 800b2ec:	bf08      	it	eq
 800b2ee:	f042 0201 	orreq.w	r2, r2, #1
 800b2f2:	3118      	adds	r1, #24
 800b2f4:	428b      	cmp	r3, r1
 800b2f6:	bf08      	it	eq
 800b2f8:	f042 0201 	orreq.w	r2, r2, #1
 800b2fc:	b91a      	cbnz	r2, 800b306 <HAL_DMA_Init+0xaa>
 800b2fe:	4a70      	ldr	r2, [pc, #448]	; (800b4c0 <HAL_DMA_Init+0x264>)
 800b300:	4293      	cmp	r3, r2
 800b302:	f040 8198 	bne.w	800b636 <HAL_DMA_Init+0x3da>
    hdma->State = HAL_DMA_STATE_BUSY;
 800b306:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800b308:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800b30a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800b30e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	f022 0201 	bic.w	r2, r2, #1
 800b318:	601a      	str	r2, [r3, #0]
 800b31a:	e006      	b.n	800b32a <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b31c:	f7ff fc0e 	bl	800ab3c <HAL_GetTick>
 800b320:	1b43      	subs	r3, r0, r5
 800b322:	2b05      	cmp	r3, #5
 800b324:	f200 80ff 	bhi.w	800b526 <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	07d6      	lsls	r6, r2, #31
 800b32e:	d4f5      	bmi.n	800b31c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 800b330:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b334:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800b336:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b338:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b33a:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b33c:	4302      	orrs	r2, r0
 800b33e:	6960      	ldr	r0, [r4, #20]
 800b340:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b342:	69e0      	ldr	r0, [r4, #28]
 800b344:	430a      	orrs	r2, r1
 800b346:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b348:	485e      	ldr	r0, [pc, #376]	; (800b4c4 <HAL_DMA_Init+0x268>)
 800b34a:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 800b34c:	6a25      	ldr	r5, [r4, #32]
 800b34e:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800b350:	4d5d      	ldr	r5, [pc, #372]	; (800b4c8 <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 800b352:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b354:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b356:	2804      	cmp	r0, #4
 800b358:	f000 8100 	beq.w	800b55c <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800b35c:	682e      	ldr	r6, [r5, #0]
 800b35e:	4d5b      	ldr	r5, [pc, #364]	; (800b4cc <HAL_DMA_Init+0x270>)
 800b360:	4035      	ands	r5, r6
 800b362:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800b366:	f080 80bb 	bcs.w	800b4e0 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b36a:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b36c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b36e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800b372:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800b374:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b376:	4620      	mov	r0, r4
 800b378:	f7ff fe8a 	bl	800b090 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b37c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b37e:	233f      	movs	r3, #63	; 0x3f
 800b380:	f002 021f 	and.w	r2, r2, #31
 800b384:	4093      	lsls	r3, r2
 800b386:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b388:	6822      	ldr	r2, [r4, #0]
 800b38a:	4b4b      	ldr	r3, [pc, #300]	; (800b4b8 <HAL_DMA_Init+0x25c>)
 800b38c:	4850      	ldr	r0, [pc, #320]	; (800b4d0 <HAL_DMA_Init+0x274>)
 800b38e:	494b      	ldr	r1, [pc, #300]	; (800b4bc <HAL_DMA_Init+0x260>)
 800b390:	4282      	cmp	r2, r0
 800b392:	bf18      	it	ne
 800b394:	429a      	cmpne	r2, r3
 800b396:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800b39a:	bf0c      	ite	eq
 800b39c:	2301      	moveq	r3, #1
 800b39e:	2300      	movne	r3, #0
 800b3a0:	428a      	cmp	r2, r1
 800b3a2:	bf08      	it	eq
 800b3a4:	f043 0301 	orreq.w	r3, r3, #1
 800b3a8:	3130      	adds	r1, #48	; 0x30
 800b3aa:	4282      	cmp	r2, r0
 800b3ac:	bf08      	it	eq
 800b3ae:	f043 0301 	orreq.w	r3, r3, #1
 800b3b2:	3030      	adds	r0, #48	; 0x30
 800b3b4:	428a      	cmp	r2, r1
 800b3b6:	bf08      	it	eq
 800b3b8:	f043 0301 	orreq.w	r3, r3, #1
 800b3bc:	3130      	adds	r1, #48	; 0x30
 800b3be:	4282      	cmp	r2, r0
 800b3c0:	bf08      	it	eq
 800b3c2:	f043 0301 	orreq.w	r3, r3, #1
 800b3c6:	3030      	adds	r0, #48	; 0x30
 800b3c8:	428a      	cmp	r2, r1
 800b3ca:	bf08      	it	eq
 800b3cc:	f043 0301 	orreq.w	r3, r3, #1
 800b3d0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800b3d4:	4282      	cmp	r2, r0
 800b3d6:	bf08      	it	eq
 800b3d8:	f043 0301 	orreq.w	r3, r3, #1
 800b3dc:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800b3e0:	428a      	cmp	r2, r1
 800b3e2:	bf08      	it	eq
 800b3e4:	f043 0301 	orreq.w	r3, r3, #1
 800b3e8:	3130      	adds	r1, #48	; 0x30
 800b3ea:	4282      	cmp	r2, r0
 800b3ec:	bf08      	it	eq
 800b3ee:	f043 0301 	orreq.w	r3, r3, #1
 800b3f2:	3030      	adds	r0, #48	; 0x30
 800b3f4:	428a      	cmp	r2, r1
 800b3f6:	bf08      	it	eq
 800b3f8:	f043 0301 	orreq.w	r3, r3, #1
 800b3fc:	3130      	adds	r1, #48	; 0x30
 800b3fe:	4282      	cmp	r2, r0
 800b400:	bf08      	it	eq
 800b402:	f043 0301 	orreq.w	r3, r3, #1
 800b406:	3030      	adds	r0, #48	; 0x30
 800b408:	428a      	cmp	r2, r1
 800b40a:	bf08      	it	eq
 800b40c:	f043 0301 	orreq.w	r3, r3, #1
 800b410:	3130      	adds	r1, #48	; 0x30
 800b412:	4282      	cmp	r2, r0
 800b414:	bf08      	it	eq
 800b416:	f043 0301 	orreq.w	r3, r3, #1
 800b41a:	3030      	adds	r0, #48	; 0x30
 800b41c:	428a      	cmp	r2, r1
 800b41e:	bf08      	it	eq
 800b420:	f043 0301 	orreq.w	r3, r3, #1
 800b424:	492b      	ldr	r1, [pc, #172]	; (800b4d4 <HAL_DMA_Init+0x278>)
 800b426:	4282      	cmp	r2, r0
 800b428:	bf08      	it	eq
 800b42a:	f043 0301 	orreq.w	r3, r3, #1
 800b42e:	482a      	ldr	r0, [pc, #168]	; (800b4d8 <HAL_DMA_Init+0x27c>)
 800b430:	428a      	cmp	r2, r1
 800b432:	bf08      	it	eq
 800b434:	f043 0301 	orreq.w	r3, r3, #1
 800b438:	3128      	adds	r1, #40	; 0x28
 800b43a:	4282      	cmp	r2, r0
 800b43c:	bf08      	it	eq
 800b43e:	f043 0301 	orreq.w	r3, r3, #1
 800b442:	3028      	adds	r0, #40	; 0x28
 800b444:	428a      	cmp	r2, r1
 800b446:	bf08      	it	eq
 800b448:	f043 0301 	orreq.w	r3, r3, #1
 800b44c:	3128      	adds	r1, #40	; 0x28
 800b44e:	4282      	cmp	r2, r0
 800b450:	bf08      	it	eq
 800b452:	f043 0301 	orreq.w	r3, r3, #1
 800b456:	3028      	adds	r0, #40	; 0x28
 800b458:	428a      	cmp	r2, r1
 800b45a:	bf08      	it	eq
 800b45c:	f043 0301 	orreq.w	r3, r3, #1
 800b460:	3128      	adds	r1, #40	; 0x28
 800b462:	4282      	cmp	r2, r0
 800b464:	bf08      	it	eq
 800b466:	f043 0301 	orreq.w	r3, r3, #1
 800b46a:	428a      	cmp	r2, r1
 800b46c:	bf08      	it	eq
 800b46e:	f043 0301 	orreq.w	r3, r3, #1
 800b472:	b913      	cbnz	r3, 800b47a <HAL_DMA_Init+0x21e>
 800b474:	4b19      	ldr	r3, [pc, #100]	; (800b4dc <HAL_DMA_Init+0x280>)
 800b476:	429a      	cmp	r2, r3
 800b478:	d118      	bne.n	800b4ac <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b47a:	4620      	mov	r0, r4
 800b47c:	f7ff fe82 	bl	800b184 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b480:	68a3      	ldr	r3, [r4, #8]
 800b482:	2b80      	cmp	r3, #128	; 0x80
 800b484:	d05c      	beq.n	800b540 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b486:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b488:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b48a:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b48c:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b48e:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b492:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b494:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b496:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b498:	d859      	bhi.n	800b54e <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b49a:	1e50      	subs	r0, r2, #1
 800b49c:	2807      	cmp	r0, #7
 800b49e:	d96e      	bls.n	800b57e <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b4a0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b4a2:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b4aa:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b4ac:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800b4ae:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b4b0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800b4b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4b8:	40020010 	.word	0x40020010
 800b4bc:	40020040 	.word	0x40020040
 800b4c0:	400204b8 	.word	0x400204b8
 800b4c4:	fe10803f 	.word	0xfe10803f
 800b4c8:	5c001000 	.word	0x5c001000
 800b4cc:	ffff0000 	.word	0xffff0000
 800b4d0:	40020028 	.word	0x40020028
 800b4d4:	58025408 	.word	0x58025408
 800b4d8:	5802541c 	.word	0x5802541c
 800b4dc:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b4e0:	6865      	ldr	r5, [r4, #4]
 800b4e2:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 800b4e6:	2e1f      	cmp	r6, #31
 800b4e8:	d924      	bls.n	800b534 <HAL_DMA_Init+0x2d8>
 800b4ea:	3d4f      	subs	r5, #79	; 0x4f
 800b4ec:	2d03      	cmp	r5, #3
 800b4ee:	d801      	bhi.n	800b4f4 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 800b4f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b4f4:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b4f6:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b4f8:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b4fa:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800b4fe:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b502:	f47f af37 	bne.w	800b374 <HAL_DMA_Init+0x118>
 800b506:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800b508:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b50a:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b50c:	2d00      	cmp	r5, #0
 800b50e:	f43f af31 	beq.w	800b374 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b512:	2900      	cmp	r1, #0
 800b514:	d169      	bne.n	800b5ea <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 800b516:	2801      	cmp	r0, #1
 800b518:	f000 8088 	beq.w	800b62c <HAL_DMA_Init+0x3d0>
 800b51c:	f030 0102 	bics.w	r1, r0, #2
 800b520:	f47f af28 	bne.w	800b374 <HAL_DMA_Init+0x118>
 800b524:	e069      	b.n	800b5fa <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b526:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800b528:	2303      	movs	r3, #3
        return HAL_ERROR;
 800b52a:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b52c:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800b52e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b534:	4d73      	ldr	r5, [pc, #460]	; (800b704 <HAL_DMA_Init+0x4a8>)
 800b536:	fa25 f606 	lsr.w	r6, r5, r6
 800b53a:	07f5      	lsls	r5, r6, #31
 800b53c:	d5da      	bpl.n	800b4f4 <HAL_DMA_Init+0x298>
 800b53e:	e7d7      	b.n	800b4f0 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b540:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b542:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800b544:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b548:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b54a:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b54c:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800b54e:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800b550:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800b554:	6763      	str	r3, [r4, #116]	; 0x74
 800b556:	e7a9      	b.n	800b4ac <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 800b558:	2001      	movs	r0, #1
}
 800b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800b55c:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b55e:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 800b562:	432e      	orrs	r6, r5
 800b564:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800b566:	4e68      	ldr	r6, [pc, #416]	; (800b708 <HAL_DMA_Init+0x4ac>)
 800b568:	403e      	ands	r6, r7
 800b56a:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 800b56e:	d2b7      	bcs.n	800b4e0 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b570:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b572:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b574:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800b578:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b57c:	e7c4      	b.n	800b508 <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b57e:	6821      	ldr	r1, [r4, #0]
 800b580:	4b62      	ldr	r3, [pc, #392]	; (800b70c <HAL_DMA_Init+0x4b0>)
 800b582:	4d63      	ldr	r5, [pc, #396]	; (800b710 <HAL_DMA_Init+0x4b4>)
 800b584:	42a9      	cmp	r1, r5
 800b586:	bf18      	it	ne
 800b588:	4299      	cmpne	r1, r3
 800b58a:	f105 0514 	add.w	r5, r5, #20
 800b58e:	bf0c      	ite	eq
 800b590:	2301      	moveq	r3, #1
 800b592:	2300      	movne	r3, #0
 800b594:	42a9      	cmp	r1, r5
 800b596:	bf08      	it	eq
 800b598:	f043 0301 	orreq.w	r3, r3, #1
 800b59c:	3514      	adds	r5, #20
 800b59e:	42a9      	cmp	r1, r5
 800b5a0:	bf08      	it	eq
 800b5a2:	f043 0301 	orreq.w	r3, r3, #1
 800b5a6:	3514      	adds	r5, #20
 800b5a8:	42a9      	cmp	r1, r5
 800b5aa:	bf08      	it	eq
 800b5ac:	f043 0301 	orreq.w	r3, r3, #1
 800b5b0:	3514      	adds	r5, #20
 800b5b2:	42a9      	cmp	r1, r5
 800b5b4:	bf08      	it	eq
 800b5b6:	f043 0301 	orreq.w	r3, r3, #1
 800b5ba:	3514      	adds	r5, #20
 800b5bc:	42a9      	cmp	r1, r5
 800b5be:	bf08      	it	eq
 800b5c0:	f043 0301 	orreq.w	r3, r3, #1
 800b5c4:	b93b      	cbnz	r3, 800b5d6 <HAL_DMA_Init+0x37a>
 800b5c6:	4b53      	ldr	r3, [pc, #332]	; (800b714 <HAL_DMA_Init+0x4b8>)
 800b5c8:	4299      	cmp	r1, r3
 800b5ca:	d004      	beq.n	800b5d6 <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b5cc:	4b52      	ldr	r3, [pc, #328]	; (800b718 <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b5ce:	4953      	ldr	r1, [pc, #332]	; (800b71c <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b5d0:	4413      	add	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b5d4:	e003      	b.n	800b5de <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b5d6:	4b52      	ldr	r3, [pc, #328]	; (800b720 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b5d8:	4952      	ldr	r1, [pc, #328]	; (800b724 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b5de:	2201      	movs	r2, #1
 800b5e0:	4082      	lsls	r2, r0
 800b5e2:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 800b5e6:	6762      	str	r2, [r4, #116]	; 0x74
 800b5e8:	e75d      	b.n	800b4a6 <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b5ea:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b5ee:	d00e      	beq.n	800b60e <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 800b5f0:	2802      	cmp	r0, #2
 800b5f2:	d905      	bls.n	800b600 <HAL_DMA_Init+0x3a4>
 800b5f4:	2803      	cmp	r0, #3
 800b5f6:	f47f aebd 	bne.w	800b374 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b5fa:	01e9      	lsls	r1, r5, #7
 800b5fc:	f57f aeba 	bpl.w	800b374 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 800b600:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b602:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800b604:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b606:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800b608:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 800b60e:	2803      	cmp	r0, #3
 800b610:	f63f aeb0 	bhi.w	800b374 <HAL_DMA_Init+0x118>
 800b614:	a101      	add	r1, pc, #4	; (adr r1, 800b61c <HAL_DMA_Init+0x3c0>)
 800b616:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800b61a:	bf00      	nop
 800b61c:	0800b601 	.word	0x0800b601
 800b620:	0800b5fb 	.word	0x0800b5fb
 800b624:	0800b601 	.word	0x0800b601
 800b628:	0800b62d 	.word	0x0800b62d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b62c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800b630:	f47f aea0 	bne.w	800b374 <HAL_DMA_Init+0x118>
 800b634:	e7e4      	b.n	800b600 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b636:	4a35      	ldr	r2, [pc, #212]	; (800b70c <HAL_DMA_Init+0x4b0>)
 800b638:	4835      	ldr	r0, [pc, #212]	; (800b710 <HAL_DMA_Init+0x4b4>)
 800b63a:	493b      	ldr	r1, [pc, #236]	; (800b728 <HAL_DMA_Init+0x4cc>)
 800b63c:	4283      	cmp	r3, r0
 800b63e:	bf18      	it	ne
 800b640:	4293      	cmpne	r3, r2
 800b642:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800b646:	bf0c      	ite	eq
 800b648:	2201      	moveq	r2, #1
 800b64a:	2200      	movne	r2, #0
 800b64c:	428b      	cmp	r3, r1
 800b64e:	bf08      	it	eq
 800b650:	f042 0201 	orreq.w	r2, r2, #1
 800b654:	3128      	adds	r1, #40	; 0x28
 800b656:	4283      	cmp	r3, r0
 800b658:	bf08      	it	eq
 800b65a:	f042 0201 	orreq.w	r2, r2, #1
 800b65e:	3028      	adds	r0, #40	; 0x28
 800b660:	428b      	cmp	r3, r1
 800b662:	bf08      	it	eq
 800b664:	f042 0201 	orreq.w	r2, r2, #1
 800b668:	3128      	adds	r1, #40	; 0x28
 800b66a:	4283      	cmp	r3, r0
 800b66c:	bf08      	it	eq
 800b66e:	f042 0201 	orreq.w	r2, r2, #1
 800b672:	428b      	cmp	r3, r1
 800b674:	bf08      	it	eq
 800b676:	f042 0201 	orreq.w	r2, r2, #1
 800b67a:	b912      	cbnz	r2, 800b682 <HAL_DMA_Init+0x426>
 800b67c:	4a25      	ldr	r2, [pc, #148]	; (800b714 <HAL_DMA_Init+0x4b8>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d138      	bne.n	800b6f4 <HAL_DMA_Init+0x498>
    hdma->State = HAL_DMA_STATE_BUSY;
 800b682:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800b684:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b686:	4d29      	ldr	r5, [pc, #164]	; (800b72c <HAL_DMA_Init+0x4d0>)
    __HAL_UNLOCK(hdma);
 800b688:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800b68c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b690:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b692:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b694:	68a2      	ldr	r2, [r4, #8]
 800b696:	2a40      	cmp	r2, #64	; 0x40
 800b698:	d02a      	beq.n	800b6f0 <HAL_DMA_Init+0x494>
 800b69a:	2a80      	cmp	r2, #128	; 0x80
 800b69c:	bf0c      	ite	eq
 800b69e:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 800b6a2:	4608      	movne	r0, r1
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800b6a4:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b6a6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800b6aa:	08d2      	lsrs	r2, r2, #3
 800b6ac:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b6b0:	6961      	ldr	r1, [r4, #20]
 800b6b2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b6b6:	69a1      	ldr	r1, [r4, #24]
 800b6b8:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b6bc:	69e1      	ldr	r1, [r4, #28]
 800b6be:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b6c2:	491b      	ldr	r1, [pc, #108]	; (800b730 <HAL_DMA_Init+0x4d4>)
 800b6c4:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 800b6c8:	4419      	add	r1, r3
 800b6ca:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b6cc:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b6ce:	4819      	ldr	r0, [pc, #100]	; (800b734 <HAL_DMA_Init+0x4d8>)
 800b6d0:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b6d4:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b6d6:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b6d8:	090b      	lsrs	r3, r1, #4
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b6de:	f7ff fcd7 	bl	800b090 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b6e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	f002 021f 	and.w	r2, r2, #31
 800b6ea:	4093      	lsls	r3, r2
 800b6ec:	6043      	str	r3, [r0, #4]
 800b6ee:	e64b      	b.n	800b388 <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b6f0:	2010      	movs	r0, #16
 800b6f2:	e7d7      	b.n	800b6a4 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b6f4:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b6f6:	2303      	movs	r3, #3
    return HAL_ERROR;
 800b6f8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b6fa:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b6fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800b700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b702:	bf00      	nop
 800b704:	c3c0003f 	.word	0xc3c0003f
 800b708:	ffff0000 	.word	0xffff0000
 800b70c:	58025408 	.word	0x58025408
 800b710:	5802541c 	.word	0x5802541c
 800b714:	58025494 	.word	0x58025494
 800b718:	1000823f 	.word	0x1000823f
 800b71c:	40020940 	.word	0x40020940
 800b720:	1600963f 	.word	0x1600963f
 800b724:	58025940 	.word	0x58025940
 800b728:	58025430 	.word	0x58025430
 800b72c:	fffe000f 	.word	0xfffe000f
 800b730:	a7fdabf8 	.word	0xa7fdabf8
 800b734:	cccccccd 	.word	0xcccccccd

0800b738 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800b738:	2800      	cmp	r0, #0
 800b73a:	f000 80f3 	beq.w	800b924 <HAL_DMA_DeInit+0x1ec>
  __HAL_DMA_DISABLE(hdma);
 800b73e:	6802      	ldr	r2, [r0, #0]
 800b740:	497c      	ldr	r1, [pc, #496]	; (800b934 <HAL_DMA_DeInit+0x1fc>)
{
 800b742:	b538      	push	{r3, r4, r5, lr}
  __HAL_DMA_DISABLE(hdma);
 800b744:	4b7c      	ldr	r3, [pc, #496]	; (800b938 <HAL_DMA_DeInit+0x200>)
 800b746:	4604      	mov	r4, r0
 800b748:	487c      	ldr	r0, [pc, #496]	; (800b93c <HAL_DMA_DeInit+0x204>)
 800b74a:	4282      	cmp	r2, r0
 800b74c:	bf18      	it	ne
 800b74e:	429a      	cmpne	r2, r3
 800b750:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800b754:	bf0c      	ite	eq
 800b756:	2301      	moveq	r3, #1
 800b758:	2300      	movne	r3, #0
 800b75a:	428a      	cmp	r2, r1
 800b75c:	bf08      	it	eq
 800b75e:	f043 0301 	orreq.w	r3, r3, #1
 800b762:	3130      	adds	r1, #48	; 0x30
 800b764:	4282      	cmp	r2, r0
 800b766:	bf08      	it	eq
 800b768:	f043 0301 	orreq.w	r3, r3, #1
 800b76c:	3030      	adds	r0, #48	; 0x30
 800b76e:	428a      	cmp	r2, r1
 800b770:	bf08      	it	eq
 800b772:	f043 0301 	orreq.w	r3, r3, #1
 800b776:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800b77a:	4282      	cmp	r2, r0
 800b77c:	bf08      	it	eq
 800b77e:	f043 0301 	orreq.w	r3, r3, #1
 800b782:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800b786:	428a      	cmp	r2, r1
 800b788:	bf08      	it	eq
 800b78a:	f043 0301 	orreq.w	r3, r3, #1
 800b78e:	3130      	adds	r1, #48	; 0x30
 800b790:	4282      	cmp	r2, r0
 800b792:	bf08      	it	eq
 800b794:	f043 0301 	orreq.w	r3, r3, #1
 800b798:	3030      	adds	r0, #48	; 0x30
 800b79a:	428a      	cmp	r2, r1
 800b79c:	bf08      	it	eq
 800b79e:	f043 0301 	orreq.w	r3, r3, #1
 800b7a2:	3130      	adds	r1, #48	; 0x30
 800b7a4:	4282      	cmp	r2, r0
 800b7a6:	bf08      	it	eq
 800b7a8:	f043 0301 	orreq.w	r3, r3, #1
 800b7ac:	3030      	adds	r0, #48	; 0x30
 800b7ae:	428a      	cmp	r2, r1
 800b7b0:	bf08      	it	eq
 800b7b2:	f043 0301 	orreq.w	r3, r3, #1
 800b7b6:	3130      	adds	r1, #48	; 0x30
 800b7b8:	4282      	cmp	r2, r0
 800b7ba:	bf08      	it	eq
 800b7bc:	f043 0301 	orreq.w	r3, r3, #1
 800b7c0:	428a      	cmp	r2, r1
 800b7c2:	bf08      	it	eq
 800b7c4:	f043 0301 	orreq.w	r3, r3, #1
 800b7c8:	3118      	adds	r1, #24
 800b7ca:	428a      	cmp	r2, r1
 800b7cc:	bf08      	it	eq
 800b7ce:	f043 0301 	orreq.w	r3, r3, #1
 800b7d2:	b933      	cbnz	r3, 800b7e2 <HAL_DMA_DeInit+0xaa>
 800b7d4:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800b7d8:	4b59      	ldr	r3, [pc, #356]	; (800b940 <HAL_DMA_DeInit+0x208>)
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	bf18      	it	ne
 800b7de:	428a      	cmpne	r2, r1
 800b7e0:	d165      	bne.n	800b8ae <HAL_DMA_DeInit+0x176>
 800b7e2:	6811      	ldr	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800b7e4:	2300      	movs	r3, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800b7e6:	2521      	movs	r5, #33	; 0x21
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b7e8:	4620      	mov	r0, r4
  __HAL_DMA_DISABLE(hdma);
 800b7ea:	f021 0101 	bic.w	r1, r1, #1
 800b7ee:	6011      	str	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800b7f0:	6013      	str	r3, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800b7f2:	6053      	str	r3, [r2, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800b7f4:	6093      	str	r3, [r2, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800b7f6:	60d3      	str	r3, [r2, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800b7f8:	6113      	str	r3, [r2, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800b7fa:	6155      	str	r5, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b7fc:	f7ff fc48 	bl	800b090 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b800:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b802:	233f      	movs	r3, #63	; 0x3f
 800b804:	f002 021f 	and.w	r2, r2, #31
 800b808:	4093      	lsls	r3, r2
 800b80a:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b80c:	4620      	mov	r0, r4
 800b80e:	f7ff fcb9 	bl	800b184 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 800b812:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b814:	b123      	cbz	r3, 800b820 <HAL_DMA_DeInit+0xe8>
      hdma->DMAmuxChannel->CCR = 0U;
 800b816:	2000      	movs	r0, #0
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b818:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
      hdma->DMAmuxChannel->CCR = 0U;
 800b81c:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b81e:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b820:	6861      	ldr	r1, [r4, #4]
 800b822:	1e4b      	subs	r3, r1, #1
 800b824:	2b07      	cmp	r3, #7
 800b826:	d910      	bls.n	800b84a <HAL_DMA_DeInit+0x112>
    hdma->DMAmuxRequestGen = 0U;
 800b828:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b82a:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800b82c:	4618      	mov	r0, r3
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b82e:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 800b830:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800b834:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 800b838:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 800b83c:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800b840:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 800b844:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800b848:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b84a:	6820      	ldr	r0, [r4, #0]
 800b84c:	4a3d      	ldr	r2, [pc, #244]	; (800b944 <HAL_DMA_DeInit+0x20c>)
 800b84e:	4d3e      	ldr	r5, [pc, #248]	; (800b948 <HAL_DMA_DeInit+0x210>)
 800b850:	42a8      	cmp	r0, r5
 800b852:	bf18      	it	ne
 800b854:	4290      	cmpne	r0, r2
 800b856:	f105 0514 	add.w	r5, r5, #20
 800b85a:	bf0c      	ite	eq
 800b85c:	2201      	moveq	r2, #1
 800b85e:	2200      	movne	r2, #0
 800b860:	42a8      	cmp	r0, r5
 800b862:	bf08      	it	eq
 800b864:	f042 0201 	orreq.w	r2, r2, #1
 800b868:	3514      	adds	r5, #20
 800b86a:	42a8      	cmp	r0, r5
 800b86c:	bf08      	it	eq
 800b86e:	f042 0201 	orreq.w	r2, r2, #1
 800b872:	3514      	adds	r5, #20
 800b874:	42a8      	cmp	r0, r5
 800b876:	bf08      	it	eq
 800b878:	f042 0201 	orreq.w	r2, r2, #1
 800b87c:	3514      	adds	r5, #20
 800b87e:	42a8      	cmp	r0, r5
 800b880:	bf08      	it	eq
 800b882:	f042 0201 	orreq.w	r2, r2, #1
 800b886:	3514      	adds	r5, #20
 800b888:	42a8      	cmp	r0, r5
 800b88a:	bf08      	it	eq
 800b88c:	f042 0201 	orreq.w	r2, r2, #1
 800b890:	b912      	cbnz	r2, 800b898 <HAL_DMA_DeInit+0x160>
 800b892:	4a2e      	ldr	r2, [pc, #184]	; (800b94c <HAL_DMA_DeInit+0x214>)
 800b894:	4290      	cmp	r0, r2
 800b896:	d147      	bne.n	800b928 <HAL_DMA_DeInit+0x1f0>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b898:	4a2d      	ldr	r2, [pc, #180]	; (800b950 <HAL_DMA_DeInit+0x218>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b89a:	482e      	ldr	r0, [pc, #184]	; (800b954 <HAL_DMA_DeInit+0x21c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b89c:	440a      	add	r2, r1
 800b89e:	0091      	lsls	r1, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	fa02 f303 	lsl.w	r3, r2, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	600a      	str	r2, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b8aa:	6043      	str	r3, [r0, #4]
 800b8ac:	e7bc      	b.n	800b828 <HAL_DMA_DeInit+0xf0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b8ae:	4b25      	ldr	r3, [pc, #148]	; (800b944 <HAL_DMA_DeInit+0x20c>)
 800b8b0:	4d25      	ldr	r5, [pc, #148]	; (800b948 <HAL_DMA_DeInit+0x210>)
 800b8b2:	4829      	ldr	r0, [pc, #164]	; (800b958 <HAL_DMA_DeInit+0x220>)
 800b8b4:	42aa      	cmp	r2, r5
 800b8b6:	bf18      	it	ne
 800b8b8:	429a      	cmpne	r2, r3
  __HAL_DMA_DISABLE(hdma);
 800b8ba:	6811      	ldr	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b8bc:	bf0c      	ite	eq
 800b8be:	2301      	moveq	r3, #1
 800b8c0:	2300      	movne	r3, #0
  __HAL_DMA_DISABLE(hdma);
 800b8c2:	f021 0101 	bic.w	r1, r1, #1
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b8c6:	4282      	cmp	r2, r0
 800b8c8:	bf08      	it	eq
 800b8ca:	f043 0301 	orreq.w	r3, r3, #1
 800b8ce:	3014      	adds	r0, #20
  __HAL_DMA_DISABLE(hdma);
 800b8d0:	6011      	str	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b8d2:	4282      	cmp	r2, r0
 800b8d4:	bf08      	it	eq
 800b8d6:	f043 0301 	orreq.w	r3, r3, #1
 800b8da:	4920      	ldr	r1, [pc, #128]	; (800b95c <HAL_DMA_DeInit+0x224>)
 800b8dc:	3028      	adds	r0, #40	; 0x28
 800b8de:	428a      	cmp	r2, r1
 800b8e0:	bf08      	it	eq
 800b8e2:	f043 0301 	orreq.w	r3, r3, #1
 800b8e6:	3128      	adds	r1, #40	; 0x28
 800b8e8:	4282      	cmp	r2, r0
 800b8ea:	bf08      	it	eq
 800b8ec:	f043 0301 	orreq.w	r3, r3, #1
 800b8f0:	428a      	cmp	r2, r1
 800b8f2:	bf08      	it	eq
 800b8f4:	f043 0301 	orreq.w	r3, r3, #1
 800b8f8:	b913      	cbnz	r3, 800b900 <HAL_DMA_DeInit+0x1c8>
 800b8fa:	4b14      	ldr	r3, [pc, #80]	; (800b94c <HAL_DMA_DeInit+0x214>)
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d10f      	bne.n	800b920 <HAL_DMA_DeInit+0x1e8>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800b900:	2300      	movs	r3, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b902:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800b904:	6013      	str	r3, [r2, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800b906:	6053      	str	r3, [r2, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800b908:	6093      	str	r3, [r2, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800b90a:	60d3      	str	r3, [r2, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800b90c:	6113      	str	r3, [r2, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b90e:	f7ff fbbf 	bl	800b090 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b912:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b914:	2301      	movs	r3, #1
 800b916:	f002 021f 	and.w	r2, r2, #31
 800b91a:	4093      	lsls	r3, r2
 800b91c:	6043      	str	r3, [r0, #4]
 800b91e:	e775      	b.n	800b80c <HAL_DMA_DeInit+0xd4>
    return HAL_ERROR;
 800b920:	2001      	movs	r0, #1
}
 800b922:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b924:	2001      	movs	r0, #1
}
 800b926:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b928:	4a0d      	ldr	r2, [pc, #52]	; (800b960 <HAL_DMA_DeInit+0x228>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b92a:	480e      	ldr	r0, [pc, #56]	; (800b964 <HAL_DMA_DeInit+0x22c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b92c:	440a      	add	r2, r1
 800b92e:	0091      	lsls	r1, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b930:	e7b6      	b.n	800b8a0 <HAL_DMA_DeInit+0x168>
 800b932:	bf00      	nop
 800b934:	40020070 	.word	0x40020070
 800b938:	40020058 	.word	0x40020058
 800b93c:	40020040 	.word	0x40020040
 800b940:	40020028 	.word	0x40020028
 800b944:	58025408 	.word	0x58025408
 800b948:	5802541c 	.word	0x5802541c
 800b94c:	58025494 	.word	0x58025494
 800b950:	1600963f 	.word	0x1600963f
 800b954:	58025940 	.word	0x58025940
 800b958:	58025430 	.word	0x58025430
 800b95c:	58025458 	.word	0x58025458
 800b960:	1000823f 	.word	0x1000823f
 800b964:	40020940 	.word	0x40020940

0800b968 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800b968:	2800      	cmp	r0, #0
 800b96a:	f000 8177 	beq.w	800bc5c <HAL_DMA_Start_IT+0x2f4>
 800b96e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 800b970:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800b974:	2801      	cmp	r0, #1
 800b976:	f000 8173 	beq.w	800bc60 <HAL_DMA_Start_IT+0x2f8>
 800b97a:	2001      	movs	r0, #1
{
 800b97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 800b980:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 800b984:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800b988:	4284      	cmp	r4, r0
 800b98a:	d008      	beq.n	800b99e <HAL_DMA_Start_IT+0x36>
    __HAL_UNLOCK(hdma);
 800b98c:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b98e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800b992:	f88c 2034 	strb.w	r2, [ip, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b996:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
}
 800b99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800b99e:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 800b9a0:	f8dc 4000 	ldr.w	r4, [ip]
 800b9a4:	4d53      	ldr	r5, [pc, #332]	; (800baf4 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800b9a6:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9aa:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800b9ac:	4e52      	ldr	r6, [pc, #328]	; (800baf8 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9ae:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800b9b2:	4852      	ldr	r0, [pc, #328]	; (800bafc <HAL_DMA_Start_IT+0x194>)
 800b9b4:	42ac      	cmp	r4, r5
 800b9b6:	bf18      	it	ne
 800b9b8:	4284      	cmpne	r4, r0
 800b9ba:	f105 0518 	add.w	r5, r5, #24
 800b9be:	bf0c      	ite	eq
 800b9c0:	2001      	moveq	r0, #1
 800b9c2:	2000      	movne	r0, #0
 800b9c4:	42ac      	cmp	r4, r5
 800b9c6:	bf08      	it	eq
 800b9c8:	f040 0001 	orreq.w	r0, r0, #1
 800b9cc:	3518      	adds	r5, #24
 800b9ce:	42ac      	cmp	r4, r5
 800b9d0:	bf08      	it	eq
 800b9d2:	f040 0001 	orreq.w	r0, r0, #1
 800b9d6:	3518      	adds	r5, #24
 800b9d8:	42ac      	cmp	r4, r5
 800b9da:	bf08      	it	eq
 800b9dc:	f040 0001 	orreq.w	r0, r0, #1
 800b9e0:	3518      	adds	r5, #24
 800b9e2:	42ac      	cmp	r4, r5
 800b9e4:	bf08      	it	eq
 800b9e6:	f040 0001 	orreq.w	r0, r0, #1
 800b9ea:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800b9ee:	42ac      	cmp	r4, r5
 800b9f0:	bf08      	it	eq
 800b9f2:	f040 0001 	orreq.w	r0, r0, #1
 800b9f6:	3518      	adds	r5, #24
 800b9f8:	42ac      	cmp	r4, r5
 800b9fa:	bf08      	it	eq
 800b9fc:	f040 0001 	orreq.w	r0, r0, #1
 800ba00:	3518      	adds	r5, #24
 800ba02:	42ac      	cmp	r4, r5
 800ba04:	bf08      	it	eq
 800ba06:	f040 0001 	orreq.w	r0, r0, #1
 800ba0a:	3518      	adds	r5, #24
 800ba0c:	42ac      	cmp	r4, r5
 800ba0e:	bf08      	it	eq
 800ba10:	f040 0001 	orreq.w	r0, r0, #1
 800ba14:	3518      	adds	r5, #24
 800ba16:	42ac      	cmp	r4, r5
 800ba18:	bf08      	it	eq
 800ba1a:	f040 0001 	orreq.w	r0, r0, #1
 800ba1e:	3518      	adds	r5, #24
 800ba20:	42ac      	cmp	r4, r5
 800ba22:	bf08      	it	eq
 800ba24:	f040 0001 	orreq.w	r0, r0, #1
 800ba28:	3518      	adds	r5, #24
 800ba2a:	42ac      	cmp	r4, r5
 800ba2c:	bf08      	it	eq
 800ba2e:	f040 0001 	orreq.w	r0, r0, #1
 800ba32:	3518      	adds	r5, #24
 800ba34:	42ac      	cmp	r4, r5
 800ba36:	bf14      	ite	ne
 800ba38:	4681      	movne	r9, r0
 800ba3a:	f040 0901 	orreq.w	r9, r0, #1
 800ba3e:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 800ba42:	42ac      	cmp	r4, r5
 800ba44:	bf18      	it	ne
 800ba46:	42b4      	cmpne	r4, r6
 800ba48:	bf0c      	ite	eq
 800ba4a:	2501      	moveq	r5, #1
 800ba4c:	2500      	movne	r5, #0
 800ba4e:	d002      	beq.n	800ba56 <HAL_DMA_Start_IT+0xee>
 800ba50:	f1b9 0f00 	cmp.w	r9, #0
 800ba54:	d054      	beq.n	800bb00 <HAL_DMA_Start_IT+0x198>
 800ba56:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba58:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800ba5c:	f026 0601 	bic.w	r6, r6, #1
 800ba60:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ba62:	2d00      	cmp	r5, #0
 800ba64:	d078      	beq.n	800bb58 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ba66:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800ba6a:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800ba6c:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800ba70:	b117      	cbz	r7, 800ba78 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ba72:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800ba76:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ba78:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 800ba7c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 800ba80:	f006 081f 	and.w	r8, r6, #31
 800ba84:	fa0e fe08 	lsl.w	lr, lr, r8
 800ba88:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ba8c:	6826      	ldr	r6, [r4, #0]
 800ba8e:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800ba92:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800ba94:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ba96:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800ba9a:	2b40      	cmp	r3, #64	; 0x40
 800ba9c:	f000 80e2 	beq.w	800bc64 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800baa0:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800baa2:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800baa4:	b91d      	cbnz	r5, 800baae <HAL_DMA_Start_IT+0x146>
 800baa6:	f1b9 0f00 	cmp.w	r9, #0
 800baaa:	f000 80e1 	beq.w	800bc70 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	f023 031e 	bic.w	r3, r3, #30
 800bab4:	f043 0316 	orr.w	r3, r3, #22
 800bab8:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800baba:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800babe:	b11b      	cbz	r3, 800bac8 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	f043 0308 	orr.w	r3, r3, #8
 800bac6:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bac8:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	03d2      	lsls	r2, r2, #15
 800bad0:	d503      	bpl.n	800bada <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bad8:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800bada:	b11f      	cbz	r7, 800bae4 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bae2:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 800bae4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bae6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800bae8:	f043 0301 	orr.w	r3, r3, #1
 800baec:	6023      	str	r3, [r4, #0]
}
 800baee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf2:	bf00      	nop
 800baf4:	40020058 	.word	0x40020058
 800baf8:	40020010 	.word	0x40020010
 800bafc:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bb00:	4f61      	ldr	r7, [pc, #388]	; (800bc88 <HAL_DMA_Start_IT+0x320>)
 800bb02:	4e62      	ldr	r6, [pc, #392]	; (800bc8c <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb04:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bb08:	42b4      	cmp	r4, r6
 800bb0a:	bf18      	it	ne
 800bb0c:	42bc      	cmpne	r4, r7
 800bb0e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800bb12:	bf0c      	ite	eq
 800bb14:	2701      	moveq	r7, #1
 800bb16:	2700      	movne	r7, #0
 800bb18:	42b4      	cmp	r4, r6
 800bb1a:	bf08      	it	eq
 800bb1c:	f047 0701 	orreq.w	r7, r7, #1
 800bb20:	3614      	adds	r6, #20
 800bb22:	42b4      	cmp	r4, r6
 800bb24:	bf08      	it	eq
 800bb26:	f047 0701 	orreq.w	r7, r7, #1
 800bb2a:	3614      	adds	r6, #20
 800bb2c:	42b4      	cmp	r4, r6
 800bb2e:	bf08      	it	eq
 800bb30:	f047 0701 	orreq.w	r7, r7, #1
 800bb34:	3614      	adds	r6, #20
 800bb36:	42b4      	cmp	r4, r6
 800bb38:	bf08      	it	eq
 800bb3a:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800bb3e:	6826      	ldr	r6, [r4, #0]
 800bb40:	f026 0601 	bic.w	r6, r6, #1
 800bb44:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bb46:	4e52      	ldr	r6, [pc, #328]	; (800bc90 <HAL_DMA_Start_IT+0x328>)
 800bb48:	42b4      	cmp	r4, r6
 800bb4a:	bf08      	it	eq
 800bb4c:	f047 0701 	orreq.w	r7, r7, #1
 800bb50:	b917      	cbnz	r7, 800bb58 <HAL_DMA_Start_IT+0x1f0>
 800bb52:	4f50      	ldr	r7, [pc, #320]	; (800bc94 <HAL_DMA_Start_IT+0x32c>)
 800bb54:	42bc      	cmp	r4, r7
 800bb56:	d10b      	bne.n	800bb70 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb58:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800bb5c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800bb5e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800bb62:	b117      	cbz	r7, 800bb6a <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb64:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 800bb68:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bb6a:	f1b9 0f00 	cmp.w	r9, #0
 800bb6e:	d183      	bne.n	800ba78 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bb70:	4f46      	ldr	r7, [pc, #280]	; (800bc8c <HAL_DMA_Start_IT+0x324>)
 800bb72:	f8df e114 	ldr.w	lr, [pc, #276]	; 800bc88 <HAL_DMA_Start_IT+0x320>
 800bb76:	4574      	cmp	r4, lr
 800bb78:	bf18      	it	ne
 800bb7a:	42bc      	cmpne	r4, r7
 800bb7c:	f10e 0e14 	add.w	lr, lr, #20
 800bb80:	bf0c      	ite	eq
 800bb82:	2701      	moveq	r7, #1
 800bb84:	2700      	movne	r7, #0
 800bb86:	4574      	cmp	r4, lr
 800bb88:	bf08      	it	eq
 800bb8a:	f047 0701 	orreq.w	r7, r7, #1
 800bb8e:	f10e 0e14 	add.w	lr, lr, #20
 800bb92:	4574      	cmp	r4, lr
 800bb94:	bf08      	it	eq
 800bb96:	f047 0701 	orreq.w	r7, r7, #1
 800bb9a:	f10e 0e14 	add.w	lr, lr, #20
 800bb9e:	4574      	cmp	r4, lr
 800bba0:	bf08      	it	eq
 800bba2:	f047 0701 	orreq.w	r7, r7, #1
 800bba6:	f10e 0e14 	add.w	lr, lr, #20
 800bbaa:	4574      	cmp	r4, lr
 800bbac:	bf08      	it	eq
 800bbae:	f047 0701 	orreq.w	r7, r7, #1
 800bbb2:	f10e 0e14 	add.w	lr, lr, #20
 800bbb6:	4574      	cmp	r4, lr
 800bbb8:	bf08      	it	eq
 800bbba:	f047 0701 	orreq.w	r7, r7, #1
 800bbbe:	b917      	cbnz	r7, 800bbc6 <HAL_DMA_Start_IT+0x25e>
 800bbc0:	4f34      	ldr	r7, [pc, #208]	; (800bc94 <HAL_DMA_Start_IT+0x32c>)
 800bbc2:	42bc      	cmp	r4, r7
 800bbc4:	d154      	bne.n	800bc70 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800bbc6:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800bbca:	2701      	movs	r7, #1
 800bbcc:	f000 0e1f 	and.w	lr, r0, #31
 800bbd0:	fa07 f70e 	lsl.w	r7, r7, lr
 800bbd4:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800bbd8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bbda:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800bbde:	2b40      	cmp	r3, #64	; 0x40
 800bbe0:	d043      	beq.n	800bc6a <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800bbe2:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800bbe4:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	f023 030e 	bic.w	r3, r3, #14
 800bbec:	f043 030a 	orr.w	r3, r3, #10
 800bbf0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800bbf2:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d02d      	beq.n	800bc56 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	f043 0304 	orr.w	r3, r3, #4
 800bc00:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bc02:	4b21      	ldr	r3, [pc, #132]	; (800bc88 <HAL_DMA_Start_IT+0x320>)
 800bc04:	4a21      	ldr	r2, [pc, #132]	; (800bc8c <HAL_DMA_Start_IT+0x324>)
 800bc06:	4294      	cmp	r4, r2
 800bc08:	bf18      	it	ne
 800bc0a:	429c      	cmpne	r4, r3
 800bc0c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800bc10:	bf0c      	ite	eq
 800bc12:	2301      	moveq	r3, #1
 800bc14:	2300      	movne	r3, #0
 800bc16:	4294      	cmp	r4, r2
 800bc18:	bf08      	it	eq
 800bc1a:	f043 0301 	orreq.w	r3, r3, #1
 800bc1e:	3214      	adds	r2, #20
 800bc20:	4294      	cmp	r4, r2
 800bc22:	bf08      	it	eq
 800bc24:	f043 0301 	orreq.w	r3, r3, #1
 800bc28:	3214      	adds	r2, #20
 800bc2a:	4294      	cmp	r4, r2
 800bc2c:	bf08      	it	eq
 800bc2e:	f043 0301 	orreq.w	r3, r3, #1
 800bc32:	3214      	adds	r2, #20
 800bc34:	4294      	cmp	r4, r2
 800bc36:	bf08      	it	eq
 800bc38:	f043 0301 	orreq.w	r3, r3, #1
 800bc3c:	3214      	adds	r2, #20
 800bc3e:	4294      	cmp	r4, r2
 800bc40:	bf08      	it	eq
 800bc42:	f043 0301 	orreq.w	r3, r3, #1
 800bc46:	3214      	adds	r2, #20
 800bc48:	4294      	cmp	r4, r2
 800bc4a:	bf08      	it	eq
 800bc4c:	f043 0301 	orreq.w	r3, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f43f af47 	beq.w	800bae4 <HAL_DMA_Start_IT+0x17c>
 800bc56:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800bc5a:	e735      	b.n	800bac8 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 800bc5c:	2001      	movs	r0, #1
 800bc5e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800bc60:	2002      	movs	r0, #2
}
 800bc62:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800bc64:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800bc66:	60e1      	str	r1, [r4, #12]
 800bc68:	e71c      	b.n	800baa4 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800bc6a:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800bc6c:	60e1      	str	r1, [r4, #12]
 800bc6e:	e7ba      	b.n	800bbe6 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800bc70:	6823      	ldr	r3, [r4, #0]
 800bc72:	f023 030e 	bic.w	r3, r3, #14
 800bc76:	f043 030a 	orr.w	r3, r3, #10
 800bc7a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800bc7c:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1ba      	bne.n	800bbfa <HAL_DMA_Start_IT+0x292>
 800bc84:	e7bd      	b.n	800bc02 <HAL_DMA_Start_IT+0x29a>
 800bc86:	bf00      	nop
 800bc88:	5802541c 	.word	0x5802541c
 800bc8c:	58025408 	.word	0x58025408
 800bc90:	58025480 	.word	0x58025480
 800bc94:	58025494 	.word	0x58025494

0800bc98 <HAL_DMA_Abort>:
{
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800bc9c:	f7fe ff4e 	bl	800ab3c <HAL_GetTick>
  if(hdma == NULL)
 800bca0:	2d00      	cmp	r5, #0
 800bca2:	f000 8124 	beq.w	800beee <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bca6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	f040 80dd 	bne.w	800be6a <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bcb0:	682c      	ldr	r4, [r5, #0]
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	4b8f      	ldr	r3, [pc, #572]	; (800bef4 <HAL_DMA_Abort+0x25c>)
 800bcb6:	4890      	ldr	r0, [pc, #576]	; (800bef8 <HAL_DMA_Abort+0x260>)
 800bcb8:	4a90      	ldr	r2, [pc, #576]	; (800befc <HAL_DMA_Abort+0x264>)
 800bcba:	4284      	cmp	r4, r0
 800bcbc:	bf18      	it	ne
 800bcbe:	429c      	cmpne	r4, r3
 800bcc0:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800bcc4:	498e      	ldr	r1, [pc, #568]	; (800bf00 <HAL_DMA_Abort+0x268>)
 800bcc6:	bf0c      	ite	eq
 800bcc8:	2301      	moveq	r3, #1
 800bcca:	2300      	movne	r3, #0
 800bccc:	4284      	cmp	r4, r0
 800bcce:	bf08      	it	eq
 800bcd0:	f043 0301 	orreq.w	r3, r3, #1
 800bcd4:	3018      	adds	r0, #24
 800bcd6:	4284      	cmp	r4, r0
 800bcd8:	bf08      	it	eq
 800bcda:	f043 0301 	orreq.w	r3, r3, #1
 800bcde:	3018      	adds	r0, #24
 800bce0:	4284      	cmp	r4, r0
 800bce2:	bf08      	it	eq
 800bce4:	f043 0301 	orreq.w	r3, r3, #1
 800bce8:	3018      	adds	r0, #24
 800bcea:	4284      	cmp	r4, r0
 800bcec:	bf08      	it	eq
 800bcee:	f043 0301 	orreq.w	r3, r3, #1
 800bcf2:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800bcf6:	4284      	cmp	r4, r0
 800bcf8:	bf08      	it	eq
 800bcfa:	f043 0301 	orreq.w	r3, r3, #1
 800bcfe:	3018      	adds	r0, #24
 800bd00:	4284      	cmp	r4, r0
 800bd02:	bf08      	it	eq
 800bd04:	f043 0301 	orreq.w	r3, r3, #1
 800bd08:	3018      	adds	r0, #24
 800bd0a:	4284      	cmp	r4, r0
 800bd0c:	bf08      	it	eq
 800bd0e:	f043 0301 	orreq.w	r3, r3, #1
 800bd12:	3018      	adds	r0, #24
 800bd14:	4284      	cmp	r4, r0
 800bd16:	bf08      	it	eq
 800bd18:	f043 0301 	orreq.w	r3, r3, #1
 800bd1c:	3018      	adds	r0, #24
 800bd1e:	4284      	cmp	r4, r0
 800bd20:	bf08      	it	eq
 800bd22:	f043 0301 	orreq.w	r3, r3, #1
 800bd26:	3018      	adds	r0, #24
 800bd28:	4284      	cmp	r4, r0
 800bd2a:	bf08      	it	eq
 800bd2c:	f043 0301 	orreq.w	r3, r3, #1
 800bd30:	3018      	adds	r0, #24
 800bd32:	4284      	cmp	r4, r0
 800bd34:	bf08      	it	eq
 800bd36:	f043 0301 	orreq.w	r3, r3, #1
 800bd3a:	3018      	adds	r0, #24
 800bd3c:	4284      	cmp	r4, r0
 800bd3e:	bf08      	it	eq
 800bd40:	f043 0301 	orreq.w	r3, r3, #1
 800bd44:	428c      	cmp	r4, r1
 800bd46:	bf18      	it	ne
 800bd48:	4294      	cmpne	r4, r2
 800bd4a:	bf0c      	ite	eq
 800bd4c:	2201      	moveq	r2, #1
 800bd4e:	2200      	movne	r2, #0
 800bd50:	d002      	beq.n	800bd58 <HAL_DMA_Abort+0xc0>
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 8090 	beq.w	800be78 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800bd58:	6821      	ldr	r1, [r4, #0]
 800bd5a:	f021 011e 	bic.w	r1, r1, #30
 800bd5e:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800bd60:	6961      	ldr	r1, [r4, #20]
 800bd62:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bd66:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bd68:	2a00      	cmp	r2, #0
 800bd6a:	f000 80b0 	beq.w	800bece <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bd6e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800bd70:	6813      	ldr	r3, [r2, #0]
 800bd72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd76:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	f023 0301 	bic.w	r3, r3, #1
 800bd7e:	6023      	str	r3, [r4, #0]
 800bd80:	e005      	b.n	800bd8e <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bd82:	f7fe fedb 	bl	800ab3c <HAL_GetTick>
 800bd86:	1b83      	subs	r3, r0, r6
 800bd88:	2b05      	cmp	r3, #5
 800bd8a:	f200 80a6 	bhi.w	800beda <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800bd8e:	6823      	ldr	r3, [r4, #0]
 800bd90:	07db      	lsls	r3, r3, #31
 800bd92:	d4f6      	bmi.n	800bd82 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bd94:	682a      	ldr	r2, [r5, #0]
 800bd96:	4b57      	ldr	r3, [pc, #348]	; (800bef4 <HAL_DMA_Abort+0x25c>)
 800bd98:	4857      	ldr	r0, [pc, #348]	; (800bef8 <HAL_DMA_Abort+0x260>)
 800bd9a:	495a      	ldr	r1, [pc, #360]	; (800bf04 <HAL_DMA_Abort+0x26c>)
 800bd9c:	4282      	cmp	r2, r0
 800bd9e:	bf18      	it	ne
 800bda0:	429a      	cmpne	r2, r3
 800bda2:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800bda6:	bf0c      	ite	eq
 800bda8:	2301      	moveq	r3, #1
 800bdaa:	2300      	movne	r3, #0
 800bdac:	428a      	cmp	r2, r1
 800bdae:	bf08      	it	eq
 800bdb0:	f043 0301 	orreq.w	r3, r3, #1
 800bdb4:	3130      	adds	r1, #48	; 0x30
 800bdb6:	4282      	cmp	r2, r0
 800bdb8:	bf08      	it	eq
 800bdba:	f043 0301 	orreq.w	r3, r3, #1
 800bdbe:	3030      	adds	r0, #48	; 0x30
 800bdc0:	428a      	cmp	r2, r1
 800bdc2:	bf08      	it	eq
 800bdc4:	f043 0301 	orreq.w	r3, r3, #1
 800bdc8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800bdcc:	4282      	cmp	r2, r0
 800bdce:	bf08      	it	eq
 800bdd0:	f043 0301 	orreq.w	r3, r3, #1
 800bdd4:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800bdd8:	428a      	cmp	r2, r1
 800bdda:	bf08      	it	eq
 800bddc:	f043 0301 	orreq.w	r3, r3, #1
 800bde0:	3130      	adds	r1, #48	; 0x30
 800bde2:	4282      	cmp	r2, r0
 800bde4:	bf08      	it	eq
 800bde6:	f043 0301 	orreq.w	r3, r3, #1
 800bdea:	3030      	adds	r0, #48	; 0x30
 800bdec:	428a      	cmp	r2, r1
 800bdee:	bf08      	it	eq
 800bdf0:	f043 0301 	orreq.w	r3, r3, #1
 800bdf4:	3130      	adds	r1, #48	; 0x30
 800bdf6:	4282      	cmp	r2, r0
 800bdf8:	bf08      	it	eq
 800bdfa:	f043 0301 	orreq.w	r3, r3, #1
 800bdfe:	3030      	adds	r0, #48	; 0x30
 800be00:	428a      	cmp	r2, r1
 800be02:	bf08      	it	eq
 800be04:	f043 0301 	orreq.w	r3, r3, #1
 800be08:	3130      	adds	r1, #48	; 0x30
 800be0a:	4282      	cmp	r2, r0
 800be0c:	bf08      	it	eq
 800be0e:	f043 0301 	orreq.w	r3, r3, #1
 800be12:	428a      	cmp	r2, r1
 800be14:	bf08      	it	eq
 800be16:	f043 0301 	orreq.w	r3, r3, #1
 800be1a:	3118      	adds	r1, #24
 800be1c:	428a      	cmp	r2, r1
 800be1e:	bf08      	it	eq
 800be20:	f043 0301 	orreq.w	r3, r3, #1
 800be24:	b933      	cbnz	r3, 800be34 <HAL_DMA_Abort+0x19c>
 800be26:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800be2a:	4b35      	ldr	r3, [pc, #212]	; (800bf00 <HAL_DMA_Abort+0x268>)
 800be2c:	429a      	cmp	r2, r3
 800be2e:	bf18      	it	ne
 800be30:	428a      	cmpne	r2, r1
 800be32:	d16f      	bne.n	800bf14 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800be34:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800be36:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800be38:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800be3a:	f002 021f 	and.w	r2, r2, #31
 800be3e:	4093      	lsls	r3, r2
 800be40:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 800be42:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800be44:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 800be48:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800be4a:	b133      	cbz	r3, 800be5a <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800be4c:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be4e:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800be52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be56:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be58:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800be5a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800be5c:	2201      	movs	r2, #1
  return HAL_OK;
 800be5e:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800be60:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800be64:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 800be68:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800be6a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800be6c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800be6e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800be70:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800be72:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800be76:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800be78:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800be7a:	4923      	ldr	r1, [pc, #140]	; (800bf08 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800be7c:	f022 020e 	bic.w	r2, r2, #14
 800be80:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800be82:	4a22      	ldr	r2, [pc, #136]	; (800bf0c <HAL_DMA_Abort+0x274>)
 800be84:	428c      	cmp	r4, r1
 800be86:	bf18      	it	ne
 800be88:	4294      	cmpne	r4, r2
 800be8a:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800be8e:	bf0c      	ite	eq
 800be90:	2201      	moveq	r2, #1
 800be92:	2200      	movne	r2, #0
 800be94:	428c      	cmp	r4, r1
 800be96:	bf08      	it	eq
 800be98:	f042 0201 	orreq.w	r2, r2, #1
 800be9c:	3114      	adds	r1, #20
 800be9e:	428c      	cmp	r4, r1
 800bea0:	bf08      	it	eq
 800bea2:	f042 0201 	orreq.w	r2, r2, #1
 800bea6:	3114      	adds	r1, #20
 800bea8:	428c      	cmp	r4, r1
 800beaa:	bf08      	it	eq
 800beac:	f042 0201 	orreq.w	r2, r2, #1
 800beb0:	3114      	adds	r1, #20
 800beb2:	428c      	cmp	r4, r1
 800beb4:	bf08      	it	eq
 800beb6:	f042 0201 	orreq.w	r2, r2, #1
 800beba:	3114      	adds	r1, #20
 800bebc:	428c      	cmp	r4, r1
 800bebe:	bf08      	it	eq
 800bec0:	f042 0201 	orreq.w	r2, r2, #1
 800bec4:	b91a      	cbnz	r2, 800bece <HAL_DMA_Abort+0x236>
 800bec6:	4a12      	ldr	r2, [pc, #72]	; (800bf10 <HAL_DMA_Abort+0x278>)
 800bec8:	4294      	cmp	r4, r2
 800beca:	f47f af55 	bne.w	800bd78 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bece:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800bed0:	680a      	ldr	r2, [r1, #0]
 800bed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bed6:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800bed8:	e74e      	b.n	800bd78 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800beda:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800bedc:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 800bede:	2303      	movs	r3, #3
        return HAL_ERROR;
 800bee0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bee2:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800bee4:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800bee8:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800beec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800beee:	2001      	movs	r0, #1
}
 800bef0:	bd70      	pop	{r4, r5, r6, pc}
 800bef2:	bf00      	nop
 800bef4:	40020058 	.word	0x40020058
 800bef8:	40020040 	.word	0x40020040
 800befc:	40020010 	.word	0x40020010
 800bf00:	40020028 	.word	0x40020028
 800bf04:	40020070 	.word	0x40020070
 800bf08:	58025408 	.word	0x58025408
 800bf0c:	5802541c 	.word	0x5802541c
 800bf10:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bf14:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800bf16:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bf18:	4b16      	ldr	r3, [pc, #88]	; (800bf74 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bf1a:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bf1e:	4c16      	ldr	r4, [pc, #88]	; (800bf78 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bf20:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bf22:	42a2      	cmp	r2, r4
 800bf24:	bf18      	it	ne
 800bf26:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800bf28:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bf2a:	bf0c      	ite	eq
 800bf2c:	2301      	moveq	r3, #1
 800bf2e:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bf30:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bf32:	4812      	ldr	r0, [pc, #72]	; (800bf7c <HAL_DMA_Abort+0x2e4>)
 800bf34:	4912      	ldr	r1, [pc, #72]	; (800bf80 <HAL_DMA_Abort+0x2e8>)
 800bf36:	4282      	cmp	r2, r0
 800bf38:	bf08      	it	eq
 800bf3a:	f043 0301 	orreq.w	r3, r3, #1
 800bf3e:	3028      	adds	r0, #40	; 0x28
 800bf40:	428a      	cmp	r2, r1
 800bf42:	bf08      	it	eq
 800bf44:	f043 0301 	orreq.w	r3, r3, #1
 800bf48:	3128      	adds	r1, #40	; 0x28
 800bf4a:	4282      	cmp	r2, r0
 800bf4c:	bf08      	it	eq
 800bf4e:	f043 0301 	orreq.w	r3, r3, #1
 800bf52:	428a      	cmp	r2, r1
 800bf54:	bf08      	it	eq
 800bf56:	f043 0301 	orreq.w	r3, r3, #1
 800bf5a:	3114      	adds	r1, #20
 800bf5c:	428a      	cmp	r2, r1
 800bf5e:	bf08      	it	eq
 800bf60:	f043 0301 	orreq.w	r3, r3, #1
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f47f af6c 	bne.w	800be42 <HAL_DMA_Abort+0x1aa>
 800bf6a:	4b06      	ldr	r3, [pc, #24]	; (800bf84 <HAL_DMA_Abort+0x2ec>)
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	f43f af68 	beq.w	800be42 <HAL_DMA_Abort+0x1aa>
 800bf72:	e772      	b.n	800be5a <HAL_DMA_Abort+0x1c2>
 800bf74:	5802541c 	.word	0x5802541c
 800bf78:	58025408 	.word	0x58025408
 800bf7c:	58025430 	.word	0x58025430
 800bf80:	58025444 	.word	0x58025444
 800bf84:	58025494 	.word	0x58025494

0800bf88 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d05f      	beq.n	800c04c <HAL_DMA_Abort_IT+0xc4>
{
 800bf8c:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bf8e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800bf92:	4603      	mov	r3, r0
 800bf94:	2a02      	cmp	r2, #2
 800bf96:	d155      	bne.n	800c044 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bf98:	6801      	ldr	r1, [r0, #0]
 800bf9a:	4a57      	ldr	r2, [pc, #348]	; (800c0f8 <HAL_DMA_Abort_IT+0x170>)
 800bf9c:	4291      	cmp	r1, r2
 800bf9e:	d048      	beq.n	800c032 <HAL_DMA_Abort_IT+0xaa>
 800bfa0:	3218      	adds	r2, #24
 800bfa2:	4291      	cmp	r1, r2
 800bfa4:	d045      	beq.n	800c032 <HAL_DMA_Abort_IT+0xaa>
 800bfa6:	3230      	adds	r2, #48	; 0x30
 800bfa8:	4c54      	ldr	r4, [pc, #336]	; (800c0fc <HAL_DMA_Abort_IT+0x174>)
 800bfaa:	4855      	ldr	r0, [pc, #340]	; (800c100 <HAL_DMA_Abort_IT+0x178>)
 800bfac:	42a1      	cmp	r1, r4
 800bfae:	bf18      	it	ne
 800bfb0:	4291      	cmpne	r1, r2
 800bfb2:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800bfb6:	bf0c      	ite	eq
 800bfb8:	2201      	moveq	r2, #1
 800bfba:	2200      	movne	r2, #0
 800bfbc:	4281      	cmp	r1, r0
 800bfbe:	bf08      	it	eq
 800bfc0:	f042 0201 	orreq.w	r2, r2, #1
 800bfc4:	3030      	adds	r0, #48	; 0x30
 800bfc6:	42a1      	cmp	r1, r4
 800bfc8:	bf08      	it	eq
 800bfca:	f042 0201 	orreq.w	r2, r2, #1
 800bfce:	3430      	adds	r4, #48	; 0x30
 800bfd0:	4281      	cmp	r1, r0
 800bfd2:	bf08      	it	eq
 800bfd4:	f042 0201 	orreq.w	r2, r2, #1
 800bfd8:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800bfdc:	42a1      	cmp	r1, r4
 800bfde:	bf08      	it	eq
 800bfe0:	f042 0201 	orreq.w	r2, r2, #1
 800bfe4:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800bfe8:	4281      	cmp	r1, r0
 800bfea:	bf08      	it	eq
 800bfec:	f042 0201 	orreq.w	r2, r2, #1
 800bff0:	3030      	adds	r0, #48	; 0x30
 800bff2:	42a1      	cmp	r1, r4
 800bff4:	bf08      	it	eq
 800bff6:	f042 0201 	orreq.w	r2, r2, #1
 800bffa:	3430      	adds	r4, #48	; 0x30
 800bffc:	4281      	cmp	r1, r0
 800bffe:	bf08      	it	eq
 800c000:	f042 0201 	orreq.w	r2, r2, #1
 800c004:	3030      	adds	r0, #48	; 0x30
 800c006:	42a1      	cmp	r1, r4
 800c008:	bf08      	it	eq
 800c00a:	f042 0201 	orreq.w	r2, r2, #1
 800c00e:	3430      	adds	r4, #48	; 0x30
 800c010:	4281      	cmp	r1, r0
 800c012:	bf08      	it	eq
 800c014:	f042 0201 	orreq.w	r2, r2, #1
 800c018:	3030      	adds	r0, #48	; 0x30
 800c01a:	42a1      	cmp	r1, r4
 800c01c:	bf08      	it	eq
 800c01e:	f042 0201 	orreq.w	r2, r2, #1
 800c022:	4281      	cmp	r1, r0
 800c024:	bf08      	it	eq
 800c026:	f042 0201 	orreq.w	r2, r2, #1
 800c02a:	b912      	cbnz	r2, 800c032 <HAL_DMA_Abort_IT+0xaa>
 800c02c:	4a35      	ldr	r2, [pc, #212]	; (800c104 <HAL_DMA_Abort_IT+0x17c>)
 800c02e:	4291      	cmp	r1, r2
 800c030:	d10e      	bne.n	800c050 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800c032:	2204      	movs	r2, #4
  return HAL_OK;
 800c034:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800c036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800c03a:	680b      	ldr	r3, [r1, #0]
 800c03c:	f023 0301 	bic.w	r3, r3, #1
 800c040:	600b      	str	r3, [r1, #0]
}
 800c042:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c044:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800c046:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c048:	655a      	str	r2, [r3, #84]	; 0x54
}
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c04c:	2001      	movs	r0, #1
}
 800c04e:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c050:	4a2d      	ldr	r2, [pc, #180]	; (800c108 <HAL_DMA_Abort_IT+0x180>)
 800c052:	4d2e      	ldr	r5, [pc, #184]	; (800c10c <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c054:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c056:	42a9      	cmp	r1, r5
 800c058:	bf18      	it	ne
 800c05a:	4291      	cmpne	r1, r2
 800c05c:	4c2c      	ldr	r4, [pc, #176]	; (800c110 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c05e:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c062:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800c066:	bf0c      	ite	eq
 800c068:	2201      	moveq	r2, #1
 800c06a:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c06c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c06e:	42a1      	cmp	r1, r4
 800c070:	bf08      	it	eq
 800c072:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800c076:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c078:	3428      	adds	r4, #40	; 0x28
 800c07a:	42a9      	cmp	r1, r5
 800c07c:	bf08      	it	eq
 800c07e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800c082:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c086:	42a1      	cmp	r1, r4
 800c088:	bf08      	it	eq
 800c08a:	f042 0201 	orreq.w	r2, r2, #1
 800c08e:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 800c090:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c092:	42a1      	cmp	r1, r4
 800c094:	bf08      	it	eq
 800c096:	f042 0201 	orreq.w	r2, r2, #1
 800c09a:	481e      	ldr	r0, [pc, #120]	; (800c114 <HAL_DMA_Abort_IT+0x18c>)
 800c09c:	4281      	cmp	r1, r0
 800c09e:	bf08      	it	eq
 800c0a0:	f042 0201 	orreq.w	r2, r2, #1
 800c0a4:	b912      	cbnz	r2, 800c0ac <HAL_DMA_Abort_IT+0x124>
 800c0a6:	4a1c      	ldr	r2, [pc, #112]	; (800c118 <HAL_DMA_Abort_IT+0x190>)
 800c0a8:	4291      	cmp	r1, r2
 800c0aa:	d117      	bne.n	800c0dc <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c0ac:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c0ae:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c0b0:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c0b4:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c0b6:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c0ba:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c0be:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c0c0:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c0c2:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800c0c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c0c6:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 800c0ca:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800c0cc:	b132      	cbz	r2, 800c0dc <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c0ce:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c0d0:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c0d4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c0d8:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c0da:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 800c0dc:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800c0de:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800c0e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800c0e2:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800c0e6:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800c0ea:	b11a      	cbz	r2, 800c0f4 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	4790      	blx	r2
  return HAL_OK;
 800c0f0:	4620      	mov	r0, r4
}
 800c0f2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800c0f4:	4610      	mov	r0, r2
}
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	40020010 	.word	0x40020010
 800c0fc:	40020040 	.word	0x40020040
 800c100:	40020070 	.word	0x40020070
 800c104:	400204b8 	.word	0x400204b8
 800c108:	5802541c 	.word	0x5802541c
 800c10c:	58025408 	.word	0x58025408
 800c110:	58025430 	.word	0x58025430
 800c114:	58025480 	.word	0x58025480
 800c118:	58025494 	.word	0x58025494

0800c11c <HAL_DMA_IRQHandler>:
{
 800c11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 800c120:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800c122:	4b9c      	ldr	r3, [pc, #624]	; (800c394 <HAL_DMA_IRQHandler+0x278>)
{
 800c124:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c126:	4e9c      	ldr	r6, [pc, #624]	; (800c398 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800c128:	681d      	ldr	r5, [r3, #0]
{
 800c12a:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 800c12c:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c12e:	6803      	ldr	r3, [r0, #0]
 800c130:	4a9a      	ldr	r2, [pc, #616]	; (800c39c <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c132:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c134:	4293      	cmp	r3, r2
 800c136:	bf18      	it	ne
 800c138:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800c13a:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c13c:	bf08      	it	eq
 800c13e:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 800c140:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c142:	bf18      	it	ne
 800c144:	2600      	movne	r6, #0
 800c146:	d045      	beq.n	800c1d4 <HAL_DMA_IRQHandler+0xb8>
 800c148:	3218      	adds	r2, #24
 800c14a:	4895      	ldr	r0, [pc, #596]	; (800c3a0 <HAL_DMA_IRQHandler+0x284>)
 800c14c:	4283      	cmp	r3, r0
 800c14e:	bf18      	it	ne
 800c150:	4293      	cmpne	r3, r2
 800c152:	f100 0018 	add.w	r0, r0, #24
 800c156:	bf0c      	ite	eq
 800c158:	2201      	moveq	r2, #1
 800c15a:	2200      	movne	r2, #0
 800c15c:	4283      	cmp	r3, r0
 800c15e:	bf08      	it	eq
 800c160:	f042 0201 	orreq.w	r2, r2, #1
 800c164:	3018      	adds	r0, #24
 800c166:	4283      	cmp	r3, r0
 800c168:	bf08      	it	eq
 800c16a:	f042 0201 	orreq.w	r2, r2, #1
 800c16e:	3018      	adds	r0, #24
 800c170:	4283      	cmp	r3, r0
 800c172:	bf08      	it	eq
 800c174:	f042 0201 	orreq.w	r2, r2, #1
 800c178:	3018      	adds	r0, #24
 800c17a:	4283      	cmp	r3, r0
 800c17c:	bf08      	it	eq
 800c17e:	f042 0201 	orreq.w	r2, r2, #1
 800c182:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800c186:	4283      	cmp	r3, r0
 800c188:	bf08      	it	eq
 800c18a:	f042 0201 	orreq.w	r2, r2, #1
 800c18e:	3018      	adds	r0, #24
 800c190:	4283      	cmp	r3, r0
 800c192:	bf08      	it	eq
 800c194:	f042 0201 	orreq.w	r2, r2, #1
 800c198:	3018      	adds	r0, #24
 800c19a:	4283      	cmp	r3, r0
 800c19c:	bf08      	it	eq
 800c19e:	f042 0201 	orreq.w	r2, r2, #1
 800c1a2:	3018      	adds	r0, #24
 800c1a4:	4283      	cmp	r3, r0
 800c1a6:	bf08      	it	eq
 800c1a8:	f042 0201 	orreq.w	r2, r2, #1
 800c1ac:	3018      	adds	r0, #24
 800c1ae:	4283      	cmp	r3, r0
 800c1b0:	bf08      	it	eq
 800c1b2:	f042 0201 	orreq.w	r2, r2, #1
 800c1b6:	3018      	adds	r0, #24
 800c1b8:	4283      	cmp	r3, r0
 800c1ba:	bf08      	it	eq
 800c1bc:	f042 0201 	orreq.w	r2, r2, #1
 800c1c0:	3018      	adds	r0, #24
 800c1c2:	4283      	cmp	r3, r0
 800c1c4:	bf08      	it	eq
 800c1c6:	f042 0201 	orreq.w	r2, r2, #1
 800c1ca:	b91a      	cbnz	r2, 800c1d4 <HAL_DMA_IRQHandler+0xb8>
 800c1cc:	4a75      	ldr	r2, [pc, #468]	; (800c3a4 <HAL_DMA_IRQHandler+0x288>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	f040 8250 	bne.w	800c674 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c1d4:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 800c1d8:	2208      	movs	r2, #8
 800c1da:	f001 0c1f 	and.w	ip, r1, #31
 800c1de:	fa02 f20c 	lsl.w	r2, r2, ip
 800c1e2:	4217      	tst	r7, r2
 800c1e4:	f040 8188 	bne.w	800c4f8 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c1e8:	fa27 f20c 	lsr.w	r2, r7, ip
 800c1ec:	07d2      	lsls	r2, r2, #31
 800c1ee:	d50c      	bpl.n	800c20a <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c1f0:	695a      	ldr	r2, [r3, #20]
 800c1f2:	0610      	lsls	r0, r2, #24
 800c1f4:	d509      	bpl.n	800c20a <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	fa02 f20c 	lsl.w	r2, r2, ip
 800c1fc:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c1fe:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800c202:	f042 0202 	orr.w	r2, r2, #2
 800c206:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c20a:	f04f 0e04 	mov.w	lr, #4
 800c20e:	fa0e f00c 	lsl.w	r0, lr, ip
 800c212:	4238      	tst	r0, r7
 800c214:	d05b      	beq.n	800c2ce <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c216:	2e00      	cmp	r6, #0
 800c218:	d14f      	bne.n	800c2ba <HAL_DMA_IRQHandler+0x19e>
 800c21a:	4a63      	ldr	r2, [pc, #396]	; (800c3a8 <HAL_DMA_IRQHandler+0x28c>)
 800c21c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800c3a0 <HAL_DMA_IRQHandler+0x284>
 800c220:	4543      	cmp	r3, r8
 800c222:	bf18      	it	ne
 800c224:	4293      	cmpne	r3, r2
 800c226:	f108 0818 	add.w	r8, r8, #24
 800c22a:	bf0c      	ite	eq
 800c22c:	2201      	moveq	r2, #1
 800c22e:	2200      	movne	r2, #0
 800c230:	4543      	cmp	r3, r8
 800c232:	bf08      	it	eq
 800c234:	f042 0201 	orreq.w	r2, r2, #1
 800c238:	f108 0818 	add.w	r8, r8, #24
 800c23c:	4543      	cmp	r3, r8
 800c23e:	bf08      	it	eq
 800c240:	f042 0201 	orreq.w	r2, r2, #1
 800c244:	f108 0818 	add.w	r8, r8, #24
 800c248:	4543      	cmp	r3, r8
 800c24a:	bf08      	it	eq
 800c24c:	f042 0201 	orreq.w	r2, r2, #1
 800c250:	f108 0818 	add.w	r8, r8, #24
 800c254:	4543      	cmp	r3, r8
 800c256:	bf08      	it	eq
 800c258:	f042 0201 	orreq.w	r2, r2, #1
 800c25c:	f508 7856 	add.w	r8, r8, #856	; 0x358
 800c260:	4543      	cmp	r3, r8
 800c262:	bf08      	it	eq
 800c264:	f042 0201 	orreq.w	r2, r2, #1
 800c268:	f108 0818 	add.w	r8, r8, #24
 800c26c:	4543      	cmp	r3, r8
 800c26e:	bf08      	it	eq
 800c270:	f042 0201 	orreq.w	r2, r2, #1
 800c274:	f108 0818 	add.w	r8, r8, #24
 800c278:	4543      	cmp	r3, r8
 800c27a:	bf08      	it	eq
 800c27c:	f042 0201 	orreq.w	r2, r2, #1
 800c280:	f108 0818 	add.w	r8, r8, #24
 800c284:	4543      	cmp	r3, r8
 800c286:	bf08      	it	eq
 800c288:	f042 0201 	orreq.w	r2, r2, #1
 800c28c:	f108 0818 	add.w	r8, r8, #24
 800c290:	4543      	cmp	r3, r8
 800c292:	bf08      	it	eq
 800c294:	f042 0201 	orreq.w	r2, r2, #1
 800c298:	f108 0818 	add.w	r8, r8, #24
 800c29c:	4543      	cmp	r3, r8
 800c29e:	bf08      	it	eq
 800c2a0:	f042 0201 	orreq.w	r2, r2, #1
 800c2a4:	f108 0818 	add.w	r8, r8, #24
 800c2a8:	4543      	cmp	r3, r8
 800c2aa:	bf08      	it	eq
 800c2ac:	f042 0201 	orreq.w	r2, r2, #1
 800c2b0:	b91a      	cbnz	r2, 800c2ba <HAL_DMA_IRQHandler+0x19e>
 800c2b2:	4a3c      	ldr	r2, [pc, #240]	; (800c3a4 <HAL_DMA_IRQHandler+0x288>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	f040 8219 	bne.w	800c6ec <HAL_DMA_IRQHandler+0x5d0>
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	0792      	lsls	r2, r2, #30
 800c2be:	d506      	bpl.n	800c2ce <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c2c0:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c2c2:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800c2c6:	f042 0204 	orr.w	r2, r2, #4
 800c2ca:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c2ce:	2210      	movs	r2, #16
 800c2d0:	fa02 fc0c 	lsl.w	ip, r2, ip
 800c2d4:	ea1c 0f07 	tst.w	ip, r7
 800c2d8:	d06c      	beq.n	800c3b4 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c2da:	2e00      	cmp	r6, #0
 800c2dc:	d145      	bne.n	800c36a <HAL_DMA_IRQHandler+0x24e>
 800c2de:	4a32      	ldr	r2, [pc, #200]	; (800c3a8 <HAL_DMA_IRQHandler+0x28c>)
 800c2e0:	4e2f      	ldr	r6, [pc, #188]	; (800c3a0 <HAL_DMA_IRQHandler+0x284>)
 800c2e2:	42b3      	cmp	r3, r6
 800c2e4:	bf18      	it	ne
 800c2e6:	4293      	cmpne	r3, r2
 800c2e8:	f106 0618 	add.w	r6, r6, #24
 800c2ec:	bf0c      	ite	eq
 800c2ee:	2201      	moveq	r2, #1
 800c2f0:	2200      	movne	r2, #0
 800c2f2:	42b3      	cmp	r3, r6
 800c2f4:	bf08      	it	eq
 800c2f6:	f042 0201 	orreq.w	r2, r2, #1
 800c2fa:	3618      	adds	r6, #24
 800c2fc:	42b3      	cmp	r3, r6
 800c2fe:	bf08      	it	eq
 800c300:	f042 0201 	orreq.w	r2, r2, #1
 800c304:	3618      	adds	r6, #24
 800c306:	42b3      	cmp	r3, r6
 800c308:	bf08      	it	eq
 800c30a:	f042 0201 	orreq.w	r2, r2, #1
 800c30e:	3618      	adds	r6, #24
 800c310:	42b3      	cmp	r3, r6
 800c312:	bf08      	it	eq
 800c314:	f042 0201 	orreq.w	r2, r2, #1
 800c318:	f506 7656 	add.w	r6, r6, #856	; 0x358
 800c31c:	42b3      	cmp	r3, r6
 800c31e:	bf08      	it	eq
 800c320:	f042 0201 	orreq.w	r2, r2, #1
 800c324:	3618      	adds	r6, #24
 800c326:	42b3      	cmp	r3, r6
 800c328:	bf08      	it	eq
 800c32a:	f042 0201 	orreq.w	r2, r2, #1
 800c32e:	3618      	adds	r6, #24
 800c330:	42b3      	cmp	r3, r6
 800c332:	bf08      	it	eq
 800c334:	f042 0201 	orreq.w	r2, r2, #1
 800c338:	3618      	adds	r6, #24
 800c33a:	42b3      	cmp	r3, r6
 800c33c:	bf08      	it	eq
 800c33e:	f042 0201 	orreq.w	r2, r2, #1
 800c342:	3618      	adds	r6, #24
 800c344:	42b3      	cmp	r3, r6
 800c346:	bf08      	it	eq
 800c348:	f042 0201 	orreq.w	r2, r2, #1
 800c34c:	3618      	adds	r6, #24
 800c34e:	42b3      	cmp	r3, r6
 800c350:	bf08      	it	eq
 800c352:	f042 0201 	orreq.w	r2, r2, #1
 800c356:	3618      	adds	r6, #24
 800c358:	42b3      	cmp	r3, r6
 800c35a:	bf08      	it	eq
 800c35c:	f042 0201 	orreq.w	r2, r2, #1
 800c360:	b91a      	cbnz	r2, 800c36a <HAL_DMA_IRQHandler+0x24e>
 800c362:	4a10      	ldr	r2, [pc, #64]	; (800c3a4 <HAL_DMA_IRQHandler+0x288>)
 800c364:	4293      	cmp	r3, r2
 800c366:	f040 81c9 	bne.w	800c6fc <HAL_DMA_IRQHandler+0x5e0>
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	0710      	lsls	r0, r2, #28
 800c36e:	d521      	bpl.n	800c3b4 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c370:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	0356      	lsls	r6, r2, #13
 800c378:	f100 814c 	bmi.w	800c614 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	05d2      	lsls	r2, r2, #23
 800c380:	d403      	bmi.n	800c38a <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	f022 0208 	bic.w	r2, r2, #8
 800c388:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800c38a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800c38e:	b18b      	cbz	r3, 800c3b4 <HAL_DMA_IRQHandler+0x298>
 800c390:	e00c      	b.n	800c3ac <HAL_DMA_IRQHandler+0x290>
 800c392:	bf00      	nop
 800c394:	20004728 	.word	0x20004728
 800c398:	40020010 	.word	0x40020010
 800c39c:	40020028 	.word	0x40020028
 800c3a0:	40020058 	.word	0x40020058
 800c3a4:	400204b8 	.word	0x400204b8
 800c3a8:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 800c3ac:	4648      	mov	r0, r9
 800c3ae:	4798      	blx	r3
 800c3b0:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c3b4:	f001 011f 	and.w	r1, r1, #31
 800c3b8:	2620      	movs	r6, #32
 800c3ba:	408e      	lsls	r6, r1
 800c3bc:	423e      	tst	r6, r7
 800c3be:	d068      	beq.n	800c492 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c3c0:	f8d9 2000 	ldr.w	r2, [r9]
 800c3c4:	4ba5      	ldr	r3, [pc, #660]	; (800c65c <HAL_DMA_IRQHandler+0x540>)
 800c3c6:	4fa6      	ldr	r7, [pc, #664]	; (800c660 <HAL_DMA_IRQHandler+0x544>)
 800c3c8:	42ba      	cmp	r2, r7
 800c3ca:	bf18      	it	ne
 800c3cc:	429a      	cmpne	r2, r3
 800c3ce:	f107 0718 	add.w	r7, r7, #24
 800c3d2:	bf0c      	ite	eq
 800c3d4:	2301      	moveq	r3, #1
 800c3d6:	2300      	movne	r3, #0
 800c3d8:	42ba      	cmp	r2, r7
 800c3da:	bf08      	it	eq
 800c3dc:	f043 0301 	orreq.w	r3, r3, #1
 800c3e0:	3718      	adds	r7, #24
 800c3e2:	42ba      	cmp	r2, r7
 800c3e4:	bf08      	it	eq
 800c3e6:	f043 0301 	orreq.w	r3, r3, #1
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	42ba      	cmp	r2, r7
 800c3ee:	bf08      	it	eq
 800c3f0:	f043 0301 	orreq.w	r3, r3, #1
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	42ba      	cmp	r2, r7
 800c3f8:	bf08      	it	eq
 800c3fa:	f043 0301 	orreq.w	r3, r3, #1
 800c3fe:	3718      	adds	r7, #24
 800c400:	42ba      	cmp	r2, r7
 800c402:	bf08      	it	eq
 800c404:	f043 0301 	orreq.w	r3, r3, #1
 800c408:	3718      	adds	r7, #24
 800c40a:	42ba      	cmp	r2, r7
 800c40c:	bf08      	it	eq
 800c40e:	f043 0301 	orreq.w	r3, r3, #1
 800c412:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800c416:	42ba      	cmp	r2, r7
 800c418:	bf08      	it	eq
 800c41a:	f043 0301 	orreq.w	r3, r3, #1
 800c41e:	3718      	adds	r7, #24
 800c420:	42ba      	cmp	r2, r7
 800c422:	bf08      	it	eq
 800c424:	f043 0301 	orreq.w	r3, r3, #1
 800c428:	3718      	adds	r7, #24
 800c42a:	42ba      	cmp	r2, r7
 800c42c:	bf08      	it	eq
 800c42e:	f043 0301 	orreq.w	r3, r3, #1
 800c432:	3718      	adds	r7, #24
 800c434:	42ba      	cmp	r2, r7
 800c436:	bf08      	it	eq
 800c438:	f043 0301 	orreq.w	r3, r3, #1
 800c43c:	3718      	adds	r7, #24
 800c43e:	42ba      	cmp	r2, r7
 800c440:	bf08      	it	eq
 800c442:	f043 0301 	orreq.w	r3, r3, #1
 800c446:	3718      	adds	r7, #24
 800c448:	42ba      	cmp	r2, r7
 800c44a:	bf08      	it	eq
 800c44c:	f043 0301 	orreq.w	r3, r3, #1
 800c450:	3718      	adds	r7, #24
 800c452:	42ba      	cmp	r2, r7
 800c454:	bf08      	it	eq
 800c456:	f043 0301 	orreq.w	r3, r3, #1
 800c45a:	b91b      	cbnz	r3, 800c464 <HAL_DMA_IRQHandler+0x348>
 800c45c:	4b81      	ldr	r3, [pc, #516]	; (800c664 <HAL_DMA_IRQHandler+0x548>)
 800c45e:	429a      	cmp	r2, r3
 800c460:	f040 8162 	bne.w	800c728 <HAL_DMA_IRQHandler+0x60c>
 800c464:	6813      	ldr	r3, [r2, #0]
 800c466:	06db      	lsls	r3, r3, #27
 800c468:	d513      	bpl.n	800c492 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c46a:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800c46c:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 800c470:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c472:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800c474:	f000 80ae 	beq.w	800c5d4 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c478:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c47c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c47e:	f000 80d3 	beq.w	800c628 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c482:	031c      	lsls	r4, r3, #12
 800c484:	f140 80de 	bpl.w	800c644 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 800c488:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800c48c:	b10b      	cbz	r3, 800c492 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 800c48e:	4648      	mov	r0, r9
 800c490:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c492:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 80b9 	beq.w	800c60e <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800c49c:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800c4a0:	07d8      	lsls	r0, r3, #31
 800c4a2:	d51f      	bpl.n	800c4e4 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 800c4a4:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 800c4a8:	2104      	movs	r1, #4
 800c4aa:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800c4ae:	6813      	ldr	r3, [r2, #0]
 800c4b0:	f023 0301 	bic.w	r3, r3, #1
 800c4b4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c4b6:	4b6c      	ldr	r3, [pc, #432]	; (800c668 <HAL_DMA_IRQHandler+0x54c>)
 800c4b8:	fba3 3505 	umull	r3, r5, r3, r5
 800c4bc:	0aad      	lsrs	r5, r5, #10
 800c4be:	e002      	b.n	800c4c6 <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800c4c0:	6813      	ldr	r3, [r2, #0]
 800c4c2:	07d9      	lsls	r1, r3, #31
 800c4c4:	d504      	bpl.n	800c4d0 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 800c4c6:	9b01      	ldr	r3, [sp, #4]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	42ab      	cmp	r3, r5
 800c4cc:	9301      	str	r3, [sp, #4]
 800c4ce:	d9f7      	bls.n	800c4c0 <HAL_DMA_IRQHandler+0x3a4>
        __HAL_UNLOCK(hdma);
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c4d6:	6813      	ldr	r3, [r2, #0]
 800c4d8:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800c4da:	bf4c      	ite	mi
 800c4dc:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800c4de:	2301      	movpl	r3, #1
 800c4e0:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800c4e4:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 8090 	beq.w	800c60e <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 800c4ee:	4648      	mov	r0, r9
}
 800c4f0:	b003      	add	sp, #12
 800c4f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 800c4f6:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800c4f8:	6818      	ldr	r0, [r3, #0]
 800c4fa:	0740      	lsls	r0, r0, #29
 800c4fc:	d50a      	bpl.n	800c514 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800c4fe:	6818      	ldr	r0, [r3, #0]
 800c500:	f020 0004 	bic.w	r0, r0, #4
 800c504:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c506:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c508:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800c50c:	f042 0201 	orr.w	r2, r2, #1
 800c510:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c514:	fa27 f20c 	lsr.w	r2, r7, ip
 800c518:	07d2      	lsls	r2, r2, #31
 800c51a:	f57f ae76 	bpl.w	800c20a <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c51e:	4a53      	ldr	r2, [pc, #332]	; (800c66c <HAL_DMA_IRQHandler+0x550>)
 800c520:	4853      	ldr	r0, [pc, #332]	; (800c670 <HAL_DMA_IRQHandler+0x554>)
 800c522:	4283      	cmp	r3, r0
 800c524:	bf18      	it	ne
 800c526:	4293      	cmpne	r3, r2
 800c528:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800c52c:	bf0c      	ite	eq
 800c52e:	2201      	moveq	r2, #1
 800c530:	2200      	movne	r2, #0
 800c532:	4283      	cmp	r3, r0
 800c534:	bf08      	it	eq
 800c536:	f042 0201 	orreq.w	r2, r2, #1
 800c53a:	3018      	adds	r0, #24
 800c53c:	4283      	cmp	r3, r0
 800c53e:	bf08      	it	eq
 800c540:	f042 0201 	orreq.w	r2, r2, #1
 800c544:	3018      	adds	r0, #24
 800c546:	4283      	cmp	r3, r0
 800c548:	bf08      	it	eq
 800c54a:	f042 0201 	orreq.w	r2, r2, #1
 800c54e:	3018      	adds	r0, #24
 800c550:	4283      	cmp	r3, r0
 800c552:	bf08      	it	eq
 800c554:	f042 0201 	orreq.w	r2, r2, #1
 800c558:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800c55c:	4283      	cmp	r3, r0
 800c55e:	bf08      	it	eq
 800c560:	f042 0201 	orreq.w	r2, r2, #1
 800c564:	3018      	adds	r0, #24
 800c566:	4283      	cmp	r3, r0
 800c568:	bf08      	it	eq
 800c56a:	f042 0201 	orreq.w	r2, r2, #1
 800c56e:	3018      	adds	r0, #24
 800c570:	4283      	cmp	r3, r0
 800c572:	bf08      	it	eq
 800c574:	f042 0201 	orreq.w	r2, r2, #1
 800c578:	3018      	adds	r0, #24
 800c57a:	4283      	cmp	r3, r0
 800c57c:	bf08      	it	eq
 800c57e:	f042 0201 	orreq.w	r2, r2, #1
 800c582:	3018      	adds	r0, #24
 800c584:	4283      	cmp	r3, r0
 800c586:	bf08      	it	eq
 800c588:	f042 0201 	orreq.w	r2, r2, #1
 800c58c:	3018      	adds	r0, #24
 800c58e:	4283      	cmp	r3, r0
 800c590:	bf08      	it	eq
 800c592:	f042 0201 	orreq.w	r2, r2, #1
 800c596:	3018      	adds	r0, #24
 800c598:	4283      	cmp	r3, r0
 800c59a:	bf08      	it	eq
 800c59c:	f042 0201 	orreq.w	r2, r2, #1
 800c5a0:	3018      	adds	r0, #24
 800c5a2:	4283      	cmp	r3, r0
 800c5a4:	bf08      	it	eq
 800c5a6:	f042 0201 	orreq.w	r2, r2, #1
 800c5aa:	2a00      	cmp	r2, #0
 800c5ac:	f47f ae20 	bne.w	800c1f0 <HAL_DMA_IRQHandler+0xd4>
 800c5b0:	2e00      	cmp	r6, #0
 800c5b2:	f47f ae1d 	bne.w	800c1f0 <HAL_DMA_IRQHandler+0xd4>
 800c5b6:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c5b8:	2204      	movs	r2, #4
 800c5ba:	fa02 f20c 	lsl.w	r2, r2, ip
 800c5be:	423a      	tst	r2, r7
 800c5c0:	f040 8094 	bne.w	800c6ec <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c5c4:	2210      	movs	r2, #16
 800c5c6:	fa02 fc0c 	lsl.w	ip, r2, ip
 800c5ca:	ea17 0f0c 	tst.w	r7, ip
 800c5ce:	f43f aef1 	beq.w	800c3b4 <HAL_DMA_IRQHandler+0x298>
 800c5d2:	e684      	b.n	800c2de <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c5d4:	f023 0316 	bic.w	r3, r3, #22
 800c5d8:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c5da:	6953      	ldr	r3, [r2, #20]
 800c5dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5e0:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c5e2:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800c5e6:	b39b      	cbz	r3, 800c650 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c5e8:	6813      	ldr	r3, [r2, #0]
 800c5ea:	f023 0308 	bic.w	r3, r3, #8
 800c5ee:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c5f0:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800c5f2:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 800c5f4:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c5f6:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800c5fa:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c5fe:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 800c600:	f889 5034 	strb.w	r5, [r9, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800c604:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f47f af70 	bne.w	800c4ee <HAL_DMA_IRQHandler+0x3d2>
}
 800c60e:	b003      	add	sp, #12
 800c610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	0318      	lsls	r0, r3, #12
 800c618:	f57f aeb7 	bpl.w	800c38a <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800c61c:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c620:	2b00      	cmp	r3, #0
 800c622:	f47f aec3 	bne.w	800c3ac <HAL_DMA_IRQHandler+0x290>
 800c626:	e6c5      	b.n	800c3b4 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c628:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800c62c:	f47f af2c 	bne.w	800c488 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800c630:	6811      	ldr	r1, [r2, #0]
 800c632:	f021 0110 	bic.w	r1, r1, #16
 800c636:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800c638:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800c63a:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800c63e:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
 800c642:	e721      	b.n	800c488 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 800c644:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f47f af20 	bne.w	800c48e <HAL_DMA_IRQHandler+0x372>
 800c64e:	e720      	b.n	800c492 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c650:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1c7      	bne.n	800c5e8 <HAL_DMA_IRQHandler+0x4cc>
 800c658:	e7ca      	b.n	800c5f0 <HAL_DMA_IRQHandler+0x4d4>
 800c65a:	bf00      	nop
 800c65c:	40020010 	.word	0x40020010
 800c660:	40020028 	.word	0x40020028
 800c664:	400204b8 	.word	0x400204b8
 800c668:	1b4e81b5 	.word	0x1b4e81b5
 800c66c:	40020058 	.word	0x40020058
 800c670:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800c674:	4a4e      	ldr	r2, [pc, #312]	; (800c7b0 <HAL_DMA_IRQHandler+0x694>)
 800c676:	4d4f      	ldr	r5, [pc, #316]	; (800c7b4 <HAL_DMA_IRQHandler+0x698>)
 800c678:	42ab      	cmp	r3, r5
 800c67a:	bf18      	it	ne
 800c67c:	4293      	cmpne	r3, r2
 800c67e:	f105 0514 	add.w	r5, r5, #20
 800c682:	bf0c      	ite	eq
 800c684:	2201      	moveq	r2, #1
 800c686:	2200      	movne	r2, #0
 800c688:	42ab      	cmp	r3, r5
 800c68a:	bf08      	it	eq
 800c68c:	f042 0201 	orreq.w	r2, r2, #1
 800c690:	3514      	adds	r5, #20
 800c692:	42ab      	cmp	r3, r5
 800c694:	bf08      	it	eq
 800c696:	f042 0201 	orreq.w	r2, r2, #1
 800c69a:	3514      	adds	r5, #20
 800c69c:	42ab      	cmp	r3, r5
 800c69e:	bf08      	it	eq
 800c6a0:	f042 0201 	orreq.w	r2, r2, #1
 800c6a4:	3514      	adds	r5, #20
 800c6a6:	42ab      	cmp	r3, r5
 800c6a8:	bf08      	it	eq
 800c6aa:	f042 0201 	orreq.w	r2, r2, #1
 800c6ae:	3514      	adds	r5, #20
 800c6b0:	42ab      	cmp	r3, r5
 800c6b2:	bf08      	it	eq
 800c6b4:	f042 0201 	orreq.w	r2, r2, #1
 800c6b8:	b912      	cbnz	r2, 800c6c0 <HAL_DMA_IRQHandler+0x5a4>
 800c6ba:	4a3f      	ldr	r2, [pc, #252]	; (800c7b8 <HAL_DMA_IRQHandler+0x69c>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d1a6      	bne.n	800c60e <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800c6c0:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 800c6c4:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800c6c6:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800c6c8:	f005 051f 	and.w	r5, r5, #31
 800c6cc:	40ae      	lsls	r6, r5
 800c6ce:	420e      	tst	r6, r1
 800c6d0:	d019      	beq.n	800c706 <HAL_DMA_IRQHandler+0x5ea>
 800c6d2:	0757      	lsls	r7, r2, #29
 800c6d4:	d517      	bpl.n	800c706 <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c6d6:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800c6d8:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c6da:	d54b      	bpl.n	800c774 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c6dc:	03d1      	lsls	r1, r2, #15
 800c6de:	d44f      	bmi.n	800c780 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c6e0:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f47f af02 	bne.w	800c4ee <HAL_DMA_IRQHandler+0x3d2>
 800c6ea:	e790      	b.n	800c60e <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c6ec:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c6ee:	2210      	movs	r2, #16
 800c6f0:	fa02 fc0c 	lsl.w	ip, r2, ip
 800c6f4:	ea17 0f0c 	tst.w	r7, ip
 800c6f8:	f43f ae5c 	beq.w	800c3b4 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	0752      	lsls	r2, r2, #29
 800c700:	f57f ae58 	bpl.w	800c3b4 <HAL_DMA_IRQHandler+0x298>
 800c704:	e634      	b.n	800c370 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800c706:	2602      	movs	r6, #2
 800c708:	40ae      	lsls	r6, r5
 800c70a:	420e      	tst	r6, r1
 800c70c:	d011      	beq.n	800c732 <HAL_DMA_IRQHandler+0x616>
 800c70e:	0797      	lsls	r7, r2, #30
 800c710:	d50f      	bpl.n	800c732 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800c712:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c714:	0414      	lsls	r4, r2, #16
 800c716:	d539      	bpl.n	800c78c <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c718:	03d0      	lsls	r0, r2, #15
 800c71a:	d443      	bmi.n	800c7a4 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 800c71c:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800c720:	2b00      	cmp	r3, #0
 800c722:	f47f aee4 	bne.w	800c4ee <HAL_DMA_IRQHandler+0x3d2>
 800c726:	e772      	b.n	800c60e <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c728:	6813      	ldr	r3, [r2, #0]
 800c72a:	079f      	lsls	r7, r3, #30
 800c72c:	f57f aeb1 	bpl.w	800c492 <HAL_DMA_IRQHandler+0x376>
 800c730:	e69b      	b.n	800c46a <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800c732:	2608      	movs	r6, #8
 800c734:	40ae      	lsls	r6, r5
 800c736:	420e      	tst	r6, r1
 800c738:	f43f af69 	beq.w	800c60e <HAL_DMA_IRQHandler+0x4f2>
 800c73c:	0711      	lsls	r1, r2, #28
 800c73e:	f57f af66 	bpl.w	800c60e <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c742:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800c744:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c746:	f022 020e 	bic.w	r2, r2, #14
 800c74a:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c74c:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800c74e:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c752:	fa03 f505 	lsl.w	r5, r3, r5
 800c756:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c758:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800c75c:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800c760:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800c764:	2a00      	cmp	r2, #0
 800c766:	f43f af52 	beq.w	800c60e <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800c76a:	4648      	mov	r0, r9
}
 800c76c:	b003      	add	sp, #12
 800c76e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 800c772:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c774:	0692      	lsls	r2, r2, #26
 800c776:	d403      	bmi.n	800c780 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	f022 0204 	bic.w	r2, r2, #4
 800c77e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800c780:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800c784:	2b00      	cmp	r3, #0
 800c786:	f47f aeb2 	bne.w	800c4ee <HAL_DMA_IRQHandler+0x3d2>
 800c78a:	e740      	b.n	800c60e <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c78c:	f012 0220 	ands.w	r2, r2, #32
 800c790:	d108      	bne.n	800c7a4 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c792:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800c794:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c796:	f021 010a 	bic.w	r1, r1, #10
 800c79a:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 800c79c:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800c7a0:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800c7a4:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f47f aea0 	bne.w	800c4ee <HAL_DMA_IRQHandler+0x3d2>
 800c7ae:	e72e      	b.n	800c60e <HAL_DMA_IRQHandler+0x4f2>
 800c7b0:	58025408 	.word	0x58025408
 800c7b4:	5802541c 	.word	0x5802541c
 800c7b8:	58025494 	.word	0x58025494

0800c7bc <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop

0800c7c0 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d035      	beq.n	800c830 <HAL_DMA2D_Init+0x70>
{
 800c7c4:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c7c6:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c7d0:	b34b      	cbz	r3, 800c826 <HAL_DMA2D_Init+0x66>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c7d2:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c7d4:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c7d6:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c7d8:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c7dc:	69e1      	ldr	r1, [r4, #28]
 800c7de:	681d      	ldr	r5, [r3, #0]
 800c7e0:	4814      	ldr	r0, [pc, #80]	; (800c834 <HAL_DMA2D_Init+0x74>)
 800c7e2:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c7e4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c7e6:	4028      	ands	r0, r5
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c7e8:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c7ea:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c7ec:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c7ee:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c7f0:	4302      	orrs	r2, r0
 800c7f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c7f4:	4810      	ldr	r0, [pc, #64]	; (800c838 <HAL_DMA2D_Init+0x78>)
 800c7f6:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c7f8:	4910      	ldr	r1, [pc, #64]	; (800c83c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c7fa:	4302      	orrs	r2, r0
 800c7fc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c7fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c800:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c802:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c806:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c808:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c80a:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c80c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c80e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c812:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c814:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800c818:	430a      	orrs	r2, r1
 800c81a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c81c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c81e:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c820:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 800c824:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800c826:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800c82a:	f7ff ffc7 	bl	800c7bc <HAL_DMA2D_MspInit>
 800c82e:	e7d0      	b.n	800c7d2 <HAL_DMA2D_Init+0x12>
     return HAL_ERROR;
 800c830:	2001      	movs	r0, #1
}
 800c832:	4770      	bx	lr
 800c834:	fff8ffbf 	.word	0xfff8ffbf
 800c838:	fffffef8 	.word	0xfffffef8
 800c83c:	ffff0000 	.word	0xffff0000

0800c840 <HAL_DMA2D_MspDeInit>:
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop

0800c844 <HAL_DMA2D_DeInit>:
  if(hdma2d == NULL)
 800c844:	2800      	cmp	r0, #0
 800c846:	d06b      	beq.n	800c920 <HAL_DMA2D_DeInit+0xdc>
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800c848:	4b40      	ldr	r3, [pc, #256]	; (800c94c <HAL_DMA2D_DeInit+0x108>)
 800c84a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
{
 800c84e:	b570      	push	{r4, r5, r6, lr}
 800c850:	4605      	mov	r5, r0
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800c852:	6804      	ldr	r4, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800c854:	06d8      	lsls	r0, r3, #27
 800c856:	d508      	bpl.n	800c86a <HAL_DMA2D_DeInit+0x26>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800c858:	6823      	ldr	r3, [r4, #0]
 800c85a:	07d9      	lsls	r1, r3, #31
 800c85c:	d418      	bmi.n	800c890 <HAL_DMA2D_DeInit+0x4c>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800c85e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c860:	069a      	lsls	r2, r3, #26
 800c862:	d45f      	bmi.n	800c924 <HAL_DMA2D_DeInit+0xe0>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800c864:	69e3      	ldr	r3, [r4, #28]
 800c866:	069b      	lsls	r3, r3, #26
 800c868:	d431      	bmi.n	800c8ce <HAL_DMA2D_DeInit+0x8a>
  hdma2d->Instance->CR       =    0U;
 800c86a:	2600      	movs	r6, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 800c86c:	233f      	movs	r3, #63	; 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 800c86e:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 800c870:	6026      	str	r6, [r4, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800c872:	60a3      	str	r3, [r4, #8]
  hdma2d->Instance->FGOR     =    0U;
 800c874:	6126      	str	r6, [r4, #16]
  hdma2d->Instance->BGOR     =    0U;
 800c876:	61a6      	str	r6, [r4, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800c878:	61e6      	str	r6, [r4, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800c87a:	6266      	str	r6, [r4, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800c87c:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 800c87e:	f7ff ffdf 	bl	800c840 <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c882:	666e      	str	r6, [r5, #100]	; 0x64
  return HAL_OK;
 800c884:	4630      	mov	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800c886:	f885 6061 	strb.w	r6, [r5, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800c88a:	f885 6060 	strb.w	r6, [r5, #96]	; 0x60
}
 800c88e:	bd70      	pop	{r4, r5, r6, pc}

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800c890:	6823      	ldr	r3, [r4, #0]
 800c892:	f023 0305 	bic.w	r3, r3, #5
 800c896:	f043 0304 	orr.w	r3, r3, #4
 800c89a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c89c:	f7fe f94e 	bl	800ab3c <HAL_GetTick>
 800c8a0:	4606      	mov	r6, r0

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c8a2:	e005      	b.n	800c8b0 <HAL_DMA2D_DeInit+0x6c>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800c8a4:	f7fe f94a 	bl	800ab3c <HAL_GetTick>
 800c8a8:	1b80      	subs	r0, r0, r6
 800c8aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c8ae:	d82b      	bhi.n	800c908 <HAL_DMA2D_DeInit+0xc4>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c8b0:	682c      	ldr	r4, [r5, #0]
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	f013 0301 	ands.w	r3, r3, #1
 800c8b8:	d1f4      	bne.n	800c8a4 <HAL_DMA2D_DeInit+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800c8ba:	6822      	ldr	r2, [r4, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c8bc:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800c8be:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800c8c2:	6022      	str	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c8c4:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800c8c8:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60

  return HAL_OK;
 800c8cc:	e7cd      	b.n	800c86a <HAL_DMA2D_DeInit+0x26>
{
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	f043 0304 	orr.w	r3, r3, #4
 800c8d4:	6023      	str	r3, [r4, #0]
    reg  = &(hdma2d->Instance->FGPFCCR);
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800c8d6:	f7fe f931 	bl	800ab3c <HAL_GetTick>
 800c8da:	4606      	mov	r6, r0

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800c8dc:	e005      	b.n	800c8ea <HAL_DMA2D_DeInit+0xa6>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800c8de:	f7fe f92d 	bl	800ab3c <HAL_GetTick>
 800c8e2:	1b80      	subs	r0, r0, r6
 800c8e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c8e8:	d80e      	bhi.n	800c908 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800c8ea:	69e3      	ldr	r3, [r4, #28]
 800c8ec:	f013 0320 	ands.w	r3, r3, #32
 800c8f0:	d1f5      	bne.n	800c8de <HAL_DMA2D_DeInit+0x9a>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800c8f2:	682c      	ldr	r4, [r5, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c8f4:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800c8f6:	6822      	ldr	r2, [r4, #0]
 800c8f8:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800c8fc:	6022      	str	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c8fe:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800c902:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60

  return HAL_OK;
 800c906:	e7b0      	b.n	800c86a <HAL_DMA2D_DeInit+0x26>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c90a:	2203      	movs	r2, #3
      __HAL_UNLOCK(hdma2d);
 800c90c:	2100      	movs	r1, #0
            return HAL_ERROR;
 800c90e:	2001      	movs	r0, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c910:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 800c914:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c918:	666b      	str	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c91a:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
}
 800c91e:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 800c920:	2001      	movs	r0, #1
}
 800c922:	4770      	bx	lr
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	f043 0304 	orr.w	r3, r3, #4
 800c92a:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c92c:	f7fe f906 	bl	800ab3c <HAL_GetTick>
 800c930:	4606      	mov	r6, r0
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800c932:	e005      	b.n	800c940 <HAL_DMA2D_DeInit+0xfc>
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800c934:	f7fe f902 	bl	800ab3c <HAL_GetTick>
 800c938:	1b80      	subs	r0, r0, r6
 800c93a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c93e:	d8e3      	bhi.n	800c908 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800c940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c942:	f013 0320 	ands.w	r3, r3, #32
 800c946:	d1f5      	bne.n	800c934 <HAL_DMA2D_DeInit+0xf0>
 800c948:	e7d3      	b.n	800c8f2 <HAL_DMA2D_DeInit+0xae>
 800c94a:	bf00      	nop
 800c94c:	58024400 	.word	0x58024400

0800c950 <HAL_DMA2D_Start>:
{
 800c950:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800c952:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800c956:	2c01      	cmp	r4, #1
 800c958:	d03a      	beq.n	800c9d0 <HAL_DMA2D_Start+0x80>
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c95a:	9c03      	ldr	r4, [sp, #12]
  __HAL_LOCK(hdma2d);
 800c95c:	2501      	movs	r5, #1
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c95e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c962:	2302      	movs	r3, #2
  __HAL_LOCK(hdma2d);
 800c964:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c968:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800c96c:	e9d0 3600 	ldrd	r3, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c970:	6c5d      	ldr	r5, [r3, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800c972:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c976:	f005 4c40 	and.w	ip, r5, #3221225472	; 0xc0000000
 800c97a:	ea44 040c 	orr.w	r4, r4, ip
 800c97e:	645c      	str	r4, [r3, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800c980:	63da      	str	r2, [r3, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800c982:	d00a      	beq.n	800c99a <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800c984:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 800c988:	d025      	beq.n	800c9d6 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800c98a:	60d9      	str	r1, [r3, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800c98c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800c98e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800c990:	f042 0201 	orr.w	r2, r2, #1
}
 800c994:	bc70      	pop	{r4, r5, r6}
  __HAL_DMA2D_ENABLE(hdma2d);
 800c996:	601a      	str	r2, [r3, #0]
}
 800c998:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800c99a:	6882      	ldr	r2, [r0, #8]
 800c99c:	b1b2      	cbz	r2, 800c9cc <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800c99e:	2a01      	cmp	r2, #1
 800c9a0:	d026      	beq.n	800c9f0 <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800c9a2:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800c9a4:	f401 007f 	and.w	r0, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800c9a8:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800c9ac:	b2cc      	uxtb	r4, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800c9ae:	d022      	beq.n	800c9f6 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800c9b0:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800c9b2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800c9b6:	d010      	beq.n	800c9da <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 800c9b8:	0d02      	lsrs	r2, r0, #20
      tmp3 = (tmp3 >> 12U);
 800c9ba:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800c9bc:	0212      	lsls	r2, r2, #8
      tmp1 = (tmp1 >> 28U);
 800c9be:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800c9c0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800c9c4:	ea42 1214 	orr.w	r2, r2, r4, lsr #4
 800c9c8:	ea42 3101 	orr.w	r1, r2, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800c9cc:	6399      	str	r1, [r3, #56]	; 0x38
 800c9ce:	e7dd      	b.n	800c98c <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 800c9d0:	2002      	movs	r0, #2
}
 800c9d2:	bc70      	pop	{r4, r5, r6}
 800c9d4:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
 800c9d6:	6159      	str	r1, [r3, #20]
 800c9d8:	e7d8      	b.n	800c98c <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 800c9da:	0cc0      	lsrs	r0, r0, #19
      tmp3 = (tmp3 >> 11U);
 800c9dc:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800c9de:	0282      	lsls	r2, r0, #10
      tmp1 = (tmp1 >> 31U);
 800c9e0:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800c9e2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
 800c9e6:	ea42 02d4 	orr.w	r2, r2, r4, lsr #3
 800c9ea:	ea42 31c1 	orr.w	r1, r2, r1, lsl #15
 800c9ee:	e7ed      	b.n	800c9cc <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 800c9f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800c9f4:	e7ea      	b.n	800c9cc <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 800c9f6:	0cc1      	lsrs	r1, r0, #19
      tmp3 = (tmp3 >> 10U);
 800c9f8:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800c9fa:	02c9      	lsls	r1, r1, #11
 800c9fc:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800ca00:	ea41 01d4 	orr.w	r1, r1, r4, lsr #3
 800ca04:	e7e2      	b.n	800c9cc <HAL_DMA2D_Start+0x7c>
 800ca06:	bf00      	nop

0800ca08 <HAL_DMA2D_PollForTransfer>:
{
 800ca08:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800ca0a:	2300      	movs	r3, #0
{
 800ca0c:	b082      	sub	sp, #8
 800ca0e:	4604      	mov	r4, r0
 800ca10:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 800ca12:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800ca14:	6803      	ldr	r3, [r0, #0]
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	07d6      	lsls	r6, r2, #31
 800ca1a:	d40f      	bmi.n	800ca3c <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800ca1c:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800ca1e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ca20:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800ca22:	0691      	lsls	r1, r2, #26
 800ca24:	d432      	bmi.n	800ca8c <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_UNLOCK(hdma2d);
 800ca26:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800ca28:	2012      	movs	r0, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ca2a:	2101      	movs	r1, #1
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800ca2c:	6098      	str	r0, [r3, #8]
  return HAL_OK;
 800ca2e:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ca30:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800ca34:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
}
 800ca38:	b002      	add	sp, #8
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800ca3c:	f7fe f87e 	bl	800ab3c <HAL_GetTick>
 800ca40:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800ca42:	1c6a      	adds	r2, r5, #1
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	d147      	bne.n	800cad8 <HAL_DMA2D_PollForTransfer+0xd0>
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	0796      	lsls	r6, r2, #30
 800ca4c:	d4e6      	bmi.n	800ca1c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800ca52:	9a01      	ldr	r2, [sp, #4]
 800ca54:	f012 0f21 	tst.w	r2, #33	; 0x21
 800ca58:	d0f6      	beq.n	800ca48 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800ca5a:	9a01      	ldr	r2, [sp, #4]
 800ca5c:	0690      	lsls	r0, r2, #26
 800ca5e:	d503      	bpl.n	800ca68 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800ca60:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca62:	f042 0202 	orr.w	r2, r2, #2
 800ca66:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ca68:	9a01      	ldr	r2, [sp, #4]
 800ca6a:	07d1      	lsls	r1, r2, #31
 800ca6c:	d503      	bpl.n	800ca76 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ca6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca70:	f042 0201 	orr.w	r2, r2, #1
 800ca74:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800ca76:	2021      	movs	r0, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800ca78:	6098      	str	r0, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800ca7a:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 800ca7c:	2200      	movs	r2, #0
        return HAL_ERROR;
 800ca7e:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800ca80:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800ca84:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
}
 800ca88:	b002      	add	sp, #8
 800ca8a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800ca8c:	f7fe f856 	bl	800ab3c <HAL_GetTick>
 800ca90:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800ca92:	1c68      	adds	r0, r5, #1
 800ca94:	6823      	ldr	r3, [r4, #0]
 800ca96:	d13b      	bne.n	800cb10 <HAL_DMA2D_PollForTransfer+0x108>
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	06d1      	lsls	r1, r2, #27
 800ca9c:	d4c3      	bmi.n	800ca26 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800ca9e:	685a      	ldr	r2, [r3, #4]
 800caa0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800caa2:	9a01      	ldr	r2, [sp, #4]
 800caa4:	f012 0f29 	tst.w	r2, #41	; 0x29
 800caa8:	d0f6      	beq.n	800ca98 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800caaa:	9a01      	ldr	r2, [sp, #4]
 800caac:	0712      	lsls	r2, r2, #28
 800caae:	d503      	bpl.n	800cab8 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800cab0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cab2:	f042 0204 	orr.w	r2, r2, #4
 800cab6:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800cab8:	9a01      	ldr	r2, [sp, #4]
 800caba:	0696      	lsls	r6, r2, #26
 800cabc:	d503      	bpl.n	800cac6 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800cabe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cac0:	f042 0202 	orr.w	r2, r2, #2
 800cac4:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800cac6:	9a01      	ldr	r2, [sp, #4]
 800cac8:	07d5      	lsls	r5, r2, #31
 800caca:	d503      	bpl.n	800cad4 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800cacc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cace:	f042 0201 	orr.w	r2, r2, #1
 800cad2:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800cad4:	2029      	movs	r0, #41	; 0x29
 800cad6:	e7cf      	b.n	800ca78 <HAL_DMA2D_PollForTransfer+0x70>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800cad8:	685a      	ldr	r2, [r3, #4]
 800cada:	0790      	lsls	r0, r2, #30
 800cadc:	d49e      	bmi.n	800ca1c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800cade:	685a      	ldr	r2, [r3, #4]
 800cae0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800cae2:	9a01      	ldr	r2, [sp, #4]
 800cae4:	f012 0f21 	tst.w	r2, #33	; 0x21
 800cae8:	d1b7      	bne.n	800ca5a <HAL_DMA2D_PollForTransfer+0x52>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800caea:	f7fe f827 	bl	800ab3c <HAL_GetTick>
 800caee:	1b80      	subs	r0, r0, r6
 800caf0:	42a8      	cmp	r0, r5
 800caf2:	d801      	bhi.n	800caf8 <HAL_DMA2D_PollForTransfer+0xf0>
 800caf4:	2d00      	cmp	r5, #0
 800caf6:	d1a4      	bne.n	800ca42 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800caf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800cafa:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800cafc:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800cafe:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800cb02:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800cb04:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800cb08:	6663      	str	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800cb0a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
          return HAL_TIMEOUT;
 800cb0e:	e793      	b.n	800ca38 <HAL_DMA2D_PollForTransfer+0x30>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800cb10:	685a      	ldr	r2, [r3, #4]
 800cb12:	06d2      	lsls	r2, r2, #27
 800cb14:	d487      	bmi.n	800ca26 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800cb1a:	9a01      	ldr	r2, [sp, #4]
 800cb1c:	f012 0f29 	tst.w	r2, #41	; 0x29
 800cb20:	d1c3      	bne.n	800caaa <HAL_DMA2D_PollForTransfer+0xa2>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800cb22:	f7fe f80b 	bl	800ab3c <HAL_GetTick>
 800cb26:	1b80      	subs	r0, r0, r6
 800cb28:	42a8      	cmp	r0, r5
 800cb2a:	d8e5      	bhi.n	800caf8 <HAL_DMA2D_PollForTransfer+0xf0>
 800cb2c:	2d00      	cmp	r5, #0
 800cb2e:	d1b0      	bne.n	800ca92 <HAL_DMA2D_PollForTransfer+0x8a>
 800cb30:	e7e2      	b.n	800caf8 <HAL_DMA2D_PollForTransfer+0xf0>
 800cb32:	bf00      	nop

0800cb34 <HAL_DMA2D_LineEventCallback>:
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop

0800cb38 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop

0800cb3c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800cb3c:	6803      	ldr	r3, [r0, #0]
{
 800cb3e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800cb40:	685d      	ldr	r5, [r3, #4]
{
 800cb42:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800cb44:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800cb46:	07ea      	lsls	r2, r5, #31
 800cb48:	d501      	bpl.n	800cb4e <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800cb4a:	05f1      	lsls	r1, r6, #23
 800cb4c:	d456      	bmi.n	800cbfc <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800cb4e:	06aa      	lsls	r2, r5, #26
 800cb50:	d501      	bpl.n	800cb56 <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800cb52:	04b3      	lsls	r3, r6, #18
 800cb54:	d43b      	bmi.n	800cbce <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800cb56:	0728      	lsls	r0, r5, #28
 800cb58:	d501      	bpl.n	800cb5e <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800cb5a:	0531      	lsls	r1, r6, #20
 800cb5c:	d421      	bmi.n	800cba2 <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800cb5e:	076a      	lsls	r2, r5, #29
 800cb60:	d501      	bpl.n	800cb66 <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800cb62:	0573      	lsls	r3, r6, #21
 800cb64:	d472      	bmi.n	800cc4c <HAL_DMA2D_IRQHandler+0x110>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800cb66:	07a8      	lsls	r0, r5, #30
 800cb68:	d501      	bpl.n	800cb6e <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800cb6a:	05b1      	lsls	r1, r6, #22
 800cb6c:	d404      	bmi.n	800cb78 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800cb6e:	06ea      	lsls	r2, r5, #27
 800cb70:	d501      	bpl.n	800cb76 <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800cb72:	04f3      	lsls	r3, r6, #19
 800cb74:	d457      	bmi.n	800cc26 <HAL_DMA2D_IRQHandler+0xea>
}
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800cb78:	6823      	ldr	r3, [r4, #0]
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cb80:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800cb82:	2202      	movs	r2, #2
 800cb84:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800cb86:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800cb88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb8a:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800cb8c:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800cb8e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800cb92:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if(hdma2d->XferCpltCallback != NULL)
 800cb96:	6a23      	ldr	r3, [r4, #32]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d0e8      	beq.n	800cb6e <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	4798      	blx	r3
 800cba0:	e7e5      	b.n	800cb6e <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cbaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800cbac:	2208      	movs	r2, #8
 800cbae:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cbb0:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800cbb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cbb8:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800cbbc:	2200      	movs	r2, #0
      if(hdma2d->XferErrorCallback != NULL)
 800cbbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
 800cbc0:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d0ca      	beq.n	800cb5e <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 800cbc8:	4620      	mov	r0, r4
 800cbca:	4798      	blx	r3
 800cbcc:	e7c7      	b.n	800cb5e <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800cbd8:	2220      	movs	r2, #32
 800cbda:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cbdc:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800cbde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbe0:	f043 0302 	orr.w	r3, r3, #2
 800cbe4:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cbe6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800cbea:	2200      	movs	r2, #0
      if(hdma2d->XferErrorCallback != NULL)
 800cbec:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
 800cbee:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d0af      	beq.n	800cb56 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	4798      	blx	r3
 800cbfa:	e7ac      	b.n	800cb56 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc02:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800cc04:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800cc06:	f042 0201 	orr.w	r2, r2, #1
 800cc0a:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cc10:	2304      	movs	r3, #4
 800cc12:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800cc16:	2300      	movs	r3, #0
 800cc18:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800cc1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d095      	beq.n	800cb4e <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 800cc22:	4798      	blx	r3
 800cc24:	e793      	b.n	800cb4e <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800cc26:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800cc28:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800cc2a:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800cc2c:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cc34:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800cc36:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800cc38:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800cc3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800cc3c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800cc40:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800cc42:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800cc46:	f7ff ff77 	bl	800cb38 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800cc4c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800cc4e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc56:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800cc58:	2204      	movs	r2, #4
 800cc5a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800cc5c:	f7ff ff6a 	bl	800cb34 <HAL_DMA2D_LineEventCallback>
 800cc60:	e781      	b.n	800cb66 <HAL_DMA2D_IRQHandler+0x2a>
 800cc62:	bf00      	nop

0800cc64 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800cc64:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 800cc68:	2a01      	cmp	r2, #1
 800cc6a:	d065      	beq.n	800cd38 <HAL_DMA2D_ConfigLayer+0xd4>
 800cc6c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800cc6e:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800cc72:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800cc74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800cc78:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800cc7a:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800cc7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 800cc80:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800cc84:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800cc86:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800cc88:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800cc8a:	0512      	lsls	r2, r2, #20
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800cc8c:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800cc90:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800cc94:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800cc96:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800cc9a:	ea42 0204 	orr.w	r2, r2, r4
 800cc9e:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800cca2:	d922      	bls.n	800ccea <HAL_DMA2D_ConfigLayer+0x86>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800cca4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800cca6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800ccaa:	b981      	cbnz	r1, 800ccce <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ccac:	6818      	ldr	r0, [r3, #0]
 800ccae:	4923      	ldr	r1, [pc, #140]	; (800cd3c <HAL_DMA2D_ConfigLayer+0xd8>)
 800ccb0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800ccb2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ccb4:	4029      	ands	r1, r5
 800ccb6:	430a      	orrs	r2, r1
 800ccb8:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800ccba:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 800ccbc:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ccbe:	2101      	movs	r1, #1
  return HAL_OK;
 800ccc0:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ccc2:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800ccc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800ccca:	bc70      	pop	{r4, r5, r6}
 800cccc:	4770      	bx	lr
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800ccce:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ccd0:	681c      	ldr	r4, [r3, #0]
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800ccd2:	d129      	bne.n	800cd28 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ccd4:	69e5      	ldr	r5, [r4, #28]
 800ccd6:	491a      	ldr	r1, [pc, #104]	; (800cd40 <HAL_DMA2D_ConfigLayer+0xdc>)
 800ccd8:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800ccda:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800ccdc:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ccde:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 800cce2:	430a      	orrs	r2, r1
 800cce4:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800cce6:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800cce8:	e7e8      	b.n	800ccbc <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800ccea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ccec:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 800ccf0:	4322      	orrs	r2, r4
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800ccf2:	b961      	cbnz	r1, 800cd0e <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ccf4:	6818      	ldr	r0, [r3, #0]
 800ccf6:	4911      	ldr	r1, [pc, #68]	; (800cd3c <HAL_DMA2D_ConfigLayer+0xd8>)
 800ccf8:	6a46      	ldr	r6, [r0, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800ccfa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ccfc:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800ccfe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800cd00:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800cd04:	430a      	orrs	r2, r1
 800cd06:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800cd08:	6185      	str	r5, [r0, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800cd0a:	6284      	str	r4, [r0, #40]	; 0x28
 800cd0c:	e7d6      	b.n	800ccbc <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800cd0e:	681c      	ldr	r4, [r3, #0]
 800cd10:	490a      	ldr	r1, [pc, #40]	; (800cd3c <HAL_DMA2D_ConfigLayer+0xd8>)
 800cd12:	69e5      	ldr	r5, [r4, #28]
 800cd14:	4029      	ands	r1, r5
 800cd16:	430a      	orrs	r2, r1
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800cd18:	6b41      	ldr	r1, [r0, #52]	; 0x34
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800cd1a:	6a80      	ldr	r0, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800cd1c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800cd20:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800cd22:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800cd24:	6221      	str	r1, [r4, #32]
 800cd26:	e7c9      	b.n	800ccbc <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800cd28:	69e5      	ldr	r5, [r4, #28]
 800cd2a:	4904      	ldr	r1, [pc, #16]	; (800cd3c <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800cd2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800cd2e:	4029      	ands	r1, r5
 800cd30:	430a      	orrs	r2, r1
 800cd32:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800cd34:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800cd36:	e7c1      	b.n	800ccbc <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 800cd38:	2002      	movs	r0, #2
}
 800cd3a:	4770      	bx	lr
 800cd3c:	00ccfff0 	.word	0x00ccfff0
 800cd40:	00c0fff0 	.word	0x00c0fff0

0800cd44 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop

0800cd48 <HAL_DSI_Init>:
  if (hdsi == NULL)
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	f000 80b1 	beq.w	800ceb0 <HAL_DSI_Init+0x168>
{
 800cd4e:	b570      	push	{r4, r5, r6, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800cd50:	7c43      	ldrb	r3, [r0, #17]
{
 800cd52:	b082      	sub	sp, #8
 800cd54:	4604      	mov	r4, r0
 800cd56:	460d      	mov	r5, r1
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f000 80a6 	beq.w	800ceaa <HAL_DSI_Init+0x162>
  __HAL_DSI_REG_ENABLE(hdsi);
 800cd5e:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800cd60:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800cd62:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800cd64:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800cd66:	9200      	str	r2, [sp, #0]
 800cd68:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800cd6c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cd70:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800cd74:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800cd78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd7c:	9300      	str	r3, [sp, #0]
 800cd7e:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800cd80:	f7fd fedc 	bl	800ab3c <HAL_GetTick>
 800cd84:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800cd86:	e006      	b.n	800cd96 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cd88:	f7fd fed8 	bl	800ab3c <HAL_GetTick>
 800cd8c:	1b83      	subs	r3, r0, r6
 800cd8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd92:	f200 8087 	bhi.w	800cea4 <HAL_DSI_Init+0x15c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800cd9c:	04d1      	lsls	r1, r2, #19
 800cd9e:	d5f3      	bpl.n	800cd88 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800cda0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800cda4:	4943      	ldr	r1, [pc, #268]	; (800ceb4 <HAL_DSI_Init+0x16c>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800cda6:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800cda8:	4011      	ands	r1, r2
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800cdaa:	686a      	ldr	r2, [r5, #4]
 800cdac:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800cdae:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800cdb2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800cdb6:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 800cdba:	68a8      	ldr	r0, [r5, #8]
 800cdbc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cdc0:	430a      	orrs	r2, r1
  __HAL_DSI_PLL_ENABLE(hdsi);
 800cdc2:	2100      	movs	r1, #0
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800cdc4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800cdc8:	9101      	str	r1, [sp, #4]
 800cdca:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800cdce:	f042 0201 	orr.w	r2, r2, #1
 800cdd2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800cdd6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	9301      	str	r3, [sp, #4]
 800cde0:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800cde2:	f7fd feab 	bl	800ab3c <HAL_GetTick>
 800cde6:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800cde8:	e005      	b.n	800cdf6 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cdea:	f7fd fea7 	bl	800ab3c <HAL_GetTick>
 800cdee:	1b80      	subs	r0, r0, r6
 800cdf0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cdf4:	d856      	bhi.n	800cea4 <HAL_DSI_Init+0x15c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800cdfc:	05d2      	lsls	r2, r2, #23
 800cdfe:	d5f4      	bpl.n	800cdea <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800ce00:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ce04:	6860      	ldr	r0, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800ce06:	f041 0106 	orr.w	r1, r1, #6
 800ce0a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800ce0e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ce12:	f021 0103 	bic.w	r1, r1, #3
 800ce16:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ce1a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ce1e:	4302      	orrs	r2, r0
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800ce20:	68e0      	ldr	r0, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ce22:	f042 0201 	orr.w	r2, r2, #1
 800ce26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800ce2a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ce2e:	f021 0103 	bic.w	r1, r1, #3
 800ce32:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800ce36:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ce3a:	4302      	orrs	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ce3c:	68a0      	ldr	r0, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800ce3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800ce42:	689a      	ldr	r2, [r3, #8]
 800ce44:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ce48:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ce4a:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ce4c:	6899      	ldr	r1, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ce4e:	2a01      	cmp	r2, #1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ce50:	ea41 0100 	orr.w	r1, r1, r0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ce54:	6828      	ldr	r0, [r5, #0]
 800ce56:	bf38      	it	cc
 800ce58:	2201      	movcc	r2, #1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ce5a:	6099      	str	r1, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ce5c:	68a9      	ldr	r1, [r5, #8]
 800ce5e:	4d16      	ldr	r5, [pc, #88]	; (800ceb8 <HAL_DSI_Init+0x170>)
 800ce60:	f001 0103 	and.w	r1, r1, #3
 800ce64:	fb05 f202 	mul.w	r2, r5, r2
 800ce68:	408a      	lsls	r2, r1
 800ce6a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800ce6e:	fb01 f000 	mul.w	r0, r1, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800ce72:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ce76:	fbb2 f2f0 	udiv	r2, r2, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800ce7a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800ce7e:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800ce82:	2100      	movs	r1, #0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ce84:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 800ce88:	4302      	orrs	r2, r0
  return HAL_OK;
 800ce8a:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ce8c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->State = HAL_DSI_STATE_READY;
 800ce90:	2201      	movs	r2, #1
  hdsi->Instance->IER[0U] = 0U;
 800ce92:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800ce96:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800ce9a:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800ce9c:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800ce9e:	7462      	strb	r2, [r4, #17]
}
 800cea0:	b002      	add	sp, #8
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800cea4:	2003      	movs	r0, #3
}
 800cea6:	b002      	add	sp, #8
 800cea8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 800ceaa:	f7ff ff4b 	bl	800cd44 <HAL_DSI_MspInit>
 800ceae:	e756      	b.n	800cd5e <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800ceb0:	2001      	movs	r0, #1
}
 800ceb2:	4770      	bx	lr
 800ceb4:	fffc8603 	.word	0xfffc8603
 800ceb8:	003d0900 	.word	0x003d0900

0800cebc <HAL_DSI_TearingEffectCallback>:
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop

0800cec0 <HAL_DSI_EndOfRefreshCallback>:
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop

0800cec4 <HAL_DSI_ErrorCallback>:
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop

0800cec8 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800cec8:	b538      	push	{r3, r4, r5, lr}
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800ceca:	6803      	ldr	r3, [r0, #0]
{
 800cecc:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800cece:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800ced2:	07d1      	lsls	r1, r2, #31
 800ced4:	d503      	bpl.n	800cede <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800ced6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800ceda:	07d2      	lsls	r2, r2, #31
 800cedc:	d462      	bmi.n	800cfa4 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800cede:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800cee2:	0795      	lsls	r5, r2, #30
 800cee4:	d503      	bpl.n	800ceee <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800cee6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800ceea:	0790      	lsls	r0, r2, #30
 800ceec:	d44f      	bmi.n	800cf8e <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800ceee:	69a3      	ldr	r3, [r4, #24]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d04b      	beq.n	800cf8c <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800cef4:	6821      	ldr	r1, [r4, #0]
 800cef6:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800cefa:	f8d1 00c4 	ldr.w	r0, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800cefe:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800cf02:	4002      	ands	r2, r0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800cf04:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800cf08:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800cf0a:	402b      	ands	r3, r5
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800cf0c:	b119      	cbz	r1, 800cf16 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800cf0e:	6961      	ldr	r1, [r4, #20]
 800cf10:	f041 0101 	orr.w	r1, r1, #1
 800cf14:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800cf16:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800cf1a:	d003      	beq.n	800cf24 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800cf1c:	6962      	ldr	r2, [r4, #20]
 800cf1e:	f042 0202 	orr.w	r2, r2, #2
 800cf22:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800cf24:	07d9      	lsls	r1, r3, #31
 800cf26:	d503      	bpl.n	800cf30 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800cf28:	6962      	ldr	r2, [r4, #20]
 800cf2a:	f042 0204 	orr.w	r2, r2, #4
 800cf2e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800cf30:	079a      	lsls	r2, r3, #30
 800cf32:	d503      	bpl.n	800cf3c <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800cf34:	6962      	ldr	r2, [r4, #20]
 800cf36:	f042 0208 	orr.w	r2, r2, #8
 800cf3a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800cf3c:	f013 0f0c 	tst.w	r3, #12
 800cf40:	d003      	beq.n	800cf4a <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800cf42:	6962      	ldr	r2, [r4, #20]
 800cf44:	f042 0210 	orr.w	r2, r2, #16
 800cf48:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800cf4a:	06dd      	lsls	r5, r3, #27
 800cf4c:	d503      	bpl.n	800cf56 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800cf4e:	6962      	ldr	r2, [r4, #20]
 800cf50:	f042 0220 	orr.w	r2, r2, #32
 800cf54:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800cf56:	0698      	lsls	r0, r3, #26
 800cf58:	d503      	bpl.n	800cf62 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800cf5a:	6962      	ldr	r2, [r4, #20]
 800cf5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf60:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800cf62:	0659      	lsls	r1, r3, #25
 800cf64:	d503      	bpl.n	800cf6e <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800cf66:	6962      	ldr	r2, [r4, #20]
 800cf68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cf6c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800cf6e:	061a      	lsls	r2, r3, #24
 800cf70:	d503      	bpl.n	800cf7a <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800cf72:	6962      	ldr	r2, [r4, #20]
 800cf74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf78:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800cf7a:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800cf7e:	d003      	beq.n	800cf88 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800cf80:	6963      	ldr	r3, [r4, #20]
 800cf82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf86:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800cf88:	6963      	ldr	r3, [r4, #20]
 800cf8a:	b93b      	cbnz	r3, 800cf9c <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800cf8c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800cf8e:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800cf90:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800cf92:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800cf96:	f7ff ff93 	bl	800cec0 <HAL_DSI_EndOfRefreshCallback>
 800cf9a:	e7a8      	b.n	800ceee <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f7ff ff91 	bl	800cec4 <HAL_DSI_ErrorCallback>
}
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800cfaa:	f7ff ff87 	bl	800cebc <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	e795      	b.n	800cede <HAL_DSI_IRQHandler+0x16>
 800cfb2:	bf00      	nop

0800cfb4 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800cfb4:	7c03      	ldrb	r3, [r0, #16]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	f000 80f8 	beq.w	800d1ac <HAL_DSI_ConfigVideoMode+0x1f8>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800cfbc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	4684      	mov	ip, r0
{
 800cfc2:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 800cfc4:	7402      	strb	r2, [r0, #16]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800cfc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 800cfc8:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800cfca:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800cfce:	68cc      	ldr	r4, [r1, #12]
  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800cfd0:	4d77      	ldr	r5, [pc, #476]	; (800d1b0 <HAL_DSI_ConfigVideoMode+0x1fc>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800cfd2:	2803      	cmp	r0, #3
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800cfd4:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800cfd6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800cfda:	f022 0201 	bic.w	r2, r2, #1
 800cfde:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800cfe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfe4:	f022 0203 	bic.w	r2, r2, #3
 800cfe8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800cfea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfec:	ea42 0204 	orr.w	r2, r2, r4
 800cff0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800cff2:	4a70      	ldr	r2, [pc, #448]	; (800d1b4 <HAL_DSI_ConfigVideoMode+0x200>)
 800cff4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800cff6:	ea02 0204 	and.w	r2, r2, r4
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800cffa:	690c      	ldr	r4, [r1, #16]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800cffc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800cffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d000:	ea42 0204 	orr.w	r2, r2, r4
 800d004:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800d006:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800d008:	694a      	ldr	r2, [r1, #20]
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800d00a:	ea04 0405 	and.w	r4, r4, r5
 800d00e:	641c      	str	r4, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800d010:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800d012:	ea44 0402 	orr.w	r4, r4, r2
 800d016:	641c      	str	r4, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800d018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800d01a:	698c      	ldr	r4, [r1, #24]
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800d01c:	ea02 0205 	and.w	r2, r2, r5
 800d020:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800d022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d024:	ea42 0204 	orr.w	r2, r2, r4
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800d028:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800d02a:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800d02c:	68da      	ldr	r2, [r3, #12]
 800d02e:	f022 0203 	bic.w	r2, r2, #3
 800d032:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800d034:	68da      	ldr	r2, [r3, #12]
 800d036:	ea42 0204 	orr.w	r2, r2, r4
 800d03a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800d03c:	695a      	ldr	r2, [r3, #20]
 800d03e:	f022 0207 	bic.w	r2, r2, #7
 800d042:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800d044:	695c      	ldr	r4, [r3, #20]
 800d046:	e9d1 5208 	ldrd	r5, r2, [r1, #32]
 800d04a:	ea42 0205 	orr.w	r2, r2, r5
 800d04e:	69cd      	ldr	r5, [r1, #28]
 800d050:	ea42 0205 	orr.w	r2, r2, r5
 800d054:	ea42 0204 	orr.w	r2, r2, r4
 800d058:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800d05a:	691a      	ldr	r2, [r3, #16]
 800d05c:	f022 020f 	bic.w	r2, r2, #15
 800d060:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800d062:	691a      	ldr	r2, [r3, #16]
 800d064:	ea42 0200 	orr.w	r2, r2, r0
 800d068:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800d06a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800d06e:	f022 020e 	bic.w	r2, r2, #14
 800d072:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800d076:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800d07a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d07e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 800d082:	d107      	bne.n	800d094 <HAL_DSI_ConfigVideoMode+0xe0>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800d084:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800d086:	688c      	ldr	r4, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800d088:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800d08c:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800d08e:	691a      	ldr	r2, [r3, #16]
 800d090:	4322      	orrs	r2, r4
 800d092:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800d094:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d096:	4c48      	ldr	r4, [pc, #288]	; (800d1b8 <HAL_DSI_ConfigVideoMode+0x204>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800d098:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800d09a:	4022      	ands	r2, r4
 800d09c:	649a      	str	r2, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800d09e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d0a0:	4302      	orrs	r2, r0
 800d0a2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800d0a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d0a6:	4020      	ands	r0, r4
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800d0a8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800d0aa:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800d0ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800d0ae:	4843      	ldr	r0, [pc, #268]	; (800d1bc <HAL_DSI_ConfigVideoMode+0x208>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800d0b0:	4322      	orrs	r2, r4
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800d0b2:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800d0b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800d0b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d0b8:	4010      	ands	r0, r2
 800d0ba:	6518      	str	r0, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800d0bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800d0be:	4840      	ldr	r0, [pc, #256]	; (800d1c0 <HAL_DSI_ConfigVideoMode+0x20c>)
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800d0c0:	4322      	orrs	r2, r4
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800d0c2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800d0c4:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800d0c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0c8:	4002      	ands	r2, r0
 800d0ca:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800d0cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0ce:	4322      	orrs	r2, r4

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800d0d0:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800d0d2:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800d0d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d0d6:	4002      	ands	r2, r0
 800d0d8:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800d0da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d0dc:	4322      	orrs	r2, r4

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800d0de:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800d0e0:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800d0e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d0e4:	4002      	ands	r2, r0
 800d0e6:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800d0e8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800d0ea:	4a32      	ldr	r2, [pc, #200]	; (800d1b4 <HAL_DSI_ConfigVideoMode+0x200>)
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800d0ec:	4320      	orrs	r0, r4
 800d0ee:	65d8      	str	r0, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800d0f0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800d0f2:	4002      	ands	r2, r0
 800d0f4:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800d0f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d0f8:	6c08      	ldr	r0, [r1, #64]	; 0x40

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800d0fa:	6c4c      	ldr	r4, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800d0fc:	4302      	orrs	r2, r0
 800d0fe:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800d100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d106:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800d108:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d10a:	4320      	orrs	r0, r4

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800d10c:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800d10e:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800d110:	6998      	ldr	r0, [r3, #24]
 800d112:	f420 007f 	bic.w	r0, r0, #16711680	; 0xff0000
 800d116:	6198      	str	r0, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800d118:	699a      	ldr	r2, [r3, #24]
 800d11a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800d11e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800d120:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800d122:	699a      	ldr	r2, [r3, #24]
 800d124:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d128:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800d12a:	6998      	ldr	r0, [r3, #24]
 800d12c:	4320      	orrs	r0, r4

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800d12e:	6d0c      	ldr	r4, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800d130:	6198      	str	r0, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800d132:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d134:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800d138:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800d13a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d13c:	4322      	orrs	r2, r4

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800d13e:	6d4c      	ldr	r4, [r1, #84]	; 0x54
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800d140:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800d142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d144:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d148:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800d14a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d14c:	4320      	orrs	r0, r4

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800d14e:	6d8c      	ldr	r4, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800d150:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800d152:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d154:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 800d158:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800d15a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d15c:	4322      	orrs	r2, r4
 800d15e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800d160:	6b98      	ldr	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800d162:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800d164:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800d168:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800d16a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d16c:	4322      	orrs	r2, r4

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800d16e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800d170:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800d172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d178:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800d17a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d17c:	4320      	orrs	r0, r4
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d17e:	2400      	movs	r4, #0
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800d180:	e9d1 2519 	ldrd	r2, r5, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800d184:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800d186:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d188:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800d18c:	6398      	str	r0, [r3, #56]	; 0x38

  return HAL_OK;
 800d18e:	4620      	mov	r0, r4
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800d190:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d192:	4311      	orrs	r1, r2
 800d194:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800d196:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d198:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800d19c:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800d19e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1a0:	432a      	orrs	r2, r5
 800d1a2:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 800d1a4:	f88c 4010 	strb.w	r4, [ip, #16]
}
 800d1a8:	bc30      	pop	{r4, r5}
 800d1aa:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800d1ac:	2002      	movs	r0, #2
}
 800d1ae:	4770      	bx	lr
 800d1b0:	ffffe000 	.word	0xffffe000
 800d1b4:	ffffc000 	.word	0xffffc000
 800d1b8:	fffff000 	.word	0xfffff000
 800d1bc:	ffff8000 	.word	0xffff8000
 800d1c0:	fffffc00 	.word	0xfffffc00

0800d1c4 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d1c4:	7c02      	ldrb	r2, [r0, #16]
{
 800d1c6:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800d1c8:	2a01      	cmp	r2, #1
 800d1ca:	d00d      	beq.n	800d1e8 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800d1cc:	6802      	ldr	r2, [r0, #0]
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d1ce:	f04f 0c00 	mov.w	ip, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800d1d2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800d1d4:	f020 001f 	bic.w	r0, r0, #31
 800d1d8:	62d0      	str	r0, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800d1da:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800d1dc:	4301      	orrs	r1, r0

  return HAL_OK;
 800d1de:	4660      	mov	r0, ip
  hdsi->Instance->PCR |= FlowControl;
 800d1e0:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 800d1e2:	f883 c010 	strb.w	ip, [r3, #16]
  return HAL_OK;
 800d1e6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800d1e8:	2002      	movs	r0, #2
}
 800d1ea:	4770      	bx	lr

0800d1ec <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d1ec:	7c03      	ldrb	r3, [r0, #16]
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d021      	beq.n	800d236 <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800d1f2:	6803      	ldr	r3, [r0, #0]
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800d1f8:	4608      	mov	r0, r1
{
 800d1fa:	b410      	push	{r4}
 800d1fc:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 800d1fe:	9100      	str	r1, [sp, #0]
 800d200:	685c      	ldr	r4, [r3, #4]
 800d202:	f044 0401 	orr.w	r4, r4, #1
 800d206:	605c      	str	r4, [r3, #4]
 800d208:	685c      	ldr	r4, [r3, #4]
 800d20a:	f004 0401 	and.w	r4, r4, #1
 800d20e:	9400      	str	r4, [sp, #0]
 800d210:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800d212:	9101      	str	r1, [sp, #4]
 800d214:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 800d218:	f044 0408 	orr.w	r4, r4, #8
 800d21c:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 800d220:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 800d224:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800d226:	f003 0308 	and.w	r3, r3, #8
 800d22a:	9301      	str	r3, [sp, #4]
 800d22c:	9b01      	ldr	r3, [sp, #4]
}
 800d22e:	b003      	add	sp, #12
 800d230:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d234:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800d236:	2002      	movs	r0, #2
}
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop

0800d23c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800d23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d240:	4699      	mov	r9, r3
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d242:	7c03      	ldrb	r3, [r0, #16]
 800d244:	2b01      	cmp	r3, #1
 800d246:	d022      	beq.n	800d28e <HAL_DSI_ShortWrite+0x52>
 800d248:	2301      	movs	r3, #1
 800d24a:	4605      	mov	r5, r0
 800d24c:	4688      	mov	r8, r1
 800d24e:	4617      	mov	r7, r2
 800d250:	7403      	strb	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800d252:	f7fd fc73 	bl	800ab3c <HAL_GetTick>
 800d256:	4606      	mov	r6, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d258:	e006      	b.n	800d268 <HAL_DSI_ShortWrite+0x2c>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800d25a:	f7fd fc6f 	bl	800ab3c <HAL_GetTick>
 800d25e:	eba0 0c06 	sub.w	ip, r0, r6
 800d262:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 800d266:	d810      	bhi.n	800d28a <HAL_DSI_ShortWrite+0x4e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d268:	682c      	ldr	r4, [r5, #0]
 800d26a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d26c:	07db      	lsls	r3, r3, #31
 800d26e:	d5f4      	bpl.n	800d25a <HAL_DSI_ShortWrite+0x1e>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800d270:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 800d274:	9b08      	ldr	r3, [sp, #32]
  return HAL_OK;
 800d276:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800d278:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d27c:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 800d280:	66e1      	str	r1, [r4, #108]	; 0x6c

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d282:	2300      	movs	r3, #0
 800d284:	742b      	strb	r3, [r5, #16]

  return status;
}
 800d286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800d28a:	2003      	movs	r0, #3
 800d28c:	e7f9      	b.n	800d282 <HAL_DSI_ShortWrite+0x46>
  __HAL_LOCK(hdsi);
 800d28e:	2002      	movs	r0, #2
}
 800d290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d294 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800d294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d298:	461f      	mov	r7, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d29a:	7c03      	ldrb	r3, [r0, #16]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d060      	beq.n	800d362 <HAL_DSI_LongWrite+0xce>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	4605      	mov	r5, r0
 800d2a4:	4688      	mov	r8, r1
 800d2a6:	4691      	mov	r9, r2
 800d2a8:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800d2aa:	f7fd fc47 	bl	800ab3c <HAL_GetTick>
 800d2ae:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d2b0:	e006      	b.n	800d2c0 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d2b2:	f7fd fc43 	bl	800ab3c <HAL_GetTick>
 800d2b6:	eba0 0c06 	sub.w	ip, r0, r6
 800d2ba:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 800d2be:	d84c      	bhi.n	800d35a <HAL_DSI_LongWrite+0xc6>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d2c0:	682a      	ldr	r2, [r5, #0]
 800d2c2:	6f54      	ldr	r4, [r2, #116]	; 0x74
 800d2c4:	f014 0401 	ands.w	r4, r4, #1
 800d2c8:	d0f3      	beq.n	800d2b2 <HAL_DSI_LongWrite+0x1e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800d2ca:	2f03      	cmp	r7, #3
 800d2cc:	463b      	mov	r3, r7
 800d2ce:	bf28      	it	cs
 800d2d0:	2303      	movcs	r3, #3

  for (count = 0U; count < nbBytes; count++)
 800d2d2:	2f00      	cmp	r7, #0
 800d2d4:	d048      	beq.n	800d368 <HAL_DSI_LongWrite+0xd4>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800d2d6:	9909      	ldr	r1, [sp, #36]	; 0x24
  for (count = 0U; count < nbBytes; count++)
 800d2d8:	2f01      	cmp	r7, #1
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800d2da:	9808      	ldr	r0, [sp, #32]
 800d2dc:	7809      	ldrb	r1, [r1, #0]
 800d2de:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
  for (count = 0U; count < nbBytes; count++)
 800d2e2:	d909      	bls.n	800d2f8 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800d2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
  for (count = 0U; count < nbBytes; count++)
 800d2e6:	2f02      	cmp	r7, #2
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800d2e8:	7840      	ldrb	r0, [r0, #1]
 800d2ea:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  for (count = 0U; count < nbBytes; count++)
 800d2ee:	d903      	bls.n	800d2f8 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800d2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2f2:	7880      	ldrb	r0, [r0, #2]
 800d2f4:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;
 800d2f8:	6711      	str	r1, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800d2fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2fc:	4419      	add	r1, r3
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800d2fe:	1afb      	subs	r3, r7, r3
 800d300:	d017      	beq.n	800d332 <HAL_DSI_LongWrite+0x9e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800d302:	2b04      	cmp	r3, #4
 800d304:	461c      	mov	r4, r3
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d306:	7808      	ldrb	r0, [r1, #0]
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800d308:	bf28      	it	cs
 800d30a:	2404      	movcs	r4, #4
    for (count = 0U; count < nbBytes; count++)
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d00c      	beq.n	800d32a <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d310:	784e      	ldrb	r6, [r1, #1]
    for (count = 0U; count < nbBytes; count++)
 800d312:	2b02      	cmp	r3, #2
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d314:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    for (count = 0U; count < nbBytes; count++)
 800d318:	d007      	beq.n	800d32a <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d31a:	788e      	ldrb	r6, [r1, #2]
    for (count = 0U; count < nbBytes; count++)
 800d31c:	2b03      	cmp	r3, #3
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d31e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    for (count = 0U; count < nbBytes; count++)
 800d322:	d902      	bls.n	800d32a <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d324:	78ce      	ldrb	r6, [r1, #3]
 800d326:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
  while (uicounter != 0U)
 800d32a:	1b1b      	subs	r3, r3, r4
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 800d32c:	4421      	add	r1, r4
    hdsi->Instance->GPDR = fifoword;
 800d32e:	6710      	str	r0, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800d330:	d1e7      	bne.n	800d302 <HAL_DSI_LongWrite+0x6e>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800d332:	3701      	adds	r7, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d334:	ea49 1888 	orr.w	r8, r9, r8, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d338:	2300      	movs	r3, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d33a:	ea4f 2907 	mov.w	r9, r7, lsl #8

  return HAL_OK;
 800d33e:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d340:	464f      	mov	r7, r9
 800d342:	fa1f f989 	uxth.w	r9, r9
 800d346:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 800d34a:	ea48 0809 	orr.w	r8, r8, r9
 800d34e:	ea48 0707 	orr.w	r7, r8, r7
 800d352:	66d7      	str	r7, [r2, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800d354:	742b      	strb	r3, [r5, #16]
}
 800d356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800d35a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800d35c:	742c      	strb	r4, [r5, #16]
}
 800d35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hdsi);
 800d362:	2002      	movs	r0, #2
}
 800d364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdsi->Instance->GPDR = fifoword;
 800d368:	9b08      	ldr	r3, [sp, #32]
 800d36a:	6713      	str	r3, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800d36c:	e7e1      	b.n	800d332 <HAL_DSI_LongWrite+0x9e>
 800d36e:	bf00      	nop

0800d370 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800d370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d374:	461c      	mov	r4, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d376:	7c03      	ldrb	r3, [r0, #16]
{
 800d378:	f8dd 9020 	ldr.w	r9, [sp, #32]
  __HAL_LOCK(hdsi);
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	f000 808a 	beq.w	800d496 <HAL_DSI_Read+0x126>
 800d382:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800d384:	2c02      	cmp	r4, #2
 800d386:	4605      	mov	r5, r0
 800d388:	460f      	mov	r7, r1
 800d38a:	4616      	mov	r6, r2
  __HAL_LOCK(hdsi);
 800d38c:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800d38e:	d810      	bhi.n	800d3b2 <HAL_DSI_Read+0x42>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800d390:	f1b9 0f06 	cmp.w	r9, #6
 800d394:	d02c      	beq.n	800d3f0 <HAL_DSI_Read+0x80>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800d396:	f1b9 0f04 	cmp.w	r9, #4
 800d39a:	d068      	beq.n	800d46e <HAL_DSI_Read+0xfe>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800d39c:	f1b9 0f14 	cmp.w	r9, #20
 800d3a0:	d07c      	beq.n	800d49c <HAL_DSI_Read+0x12c>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800d3a2:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800d3a6:	d068      	beq.n	800d47a <HAL_DSI_Read+0x10a>
      __HAL_UNLOCK(hdsi);
 800d3a8:	2300      	movs	r3, #0
      return HAL_ERROR;
 800d3aa:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800d3ac:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800d3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tickstart = HAL_GetTick();
 800d3b2:	f7fd fbc3 	bl	800ab3c <HAL_GetTick>
 800d3b6:	4680      	mov	r8, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d3b8:	e006      	b.n	800d3c8 <HAL_DSI_Read+0x58>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800d3ba:	f7fd fbbf 	bl	800ab3c <HAL_GetTick>
 800d3be:	eba0 0008 	sub.w	r0, r0, r8
 800d3c2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d3c6:	d8ef      	bhi.n	800d3a8 <HAL_DSI_Read+0x38>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d3cc:	07d1      	lsls	r1, r2, #31
 800d3ce:	d5f4      	bpl.n	800d3ba <HAL_DSI_Read+0x4a>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800d3d0:	0222      	lsls	r2, r4, #8
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800d3d2:	f1b9 0f06 	cmp.w	r9, #6
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800d3d6:	ea4f 2104 	mov.w	r1, r4, lsl #8
 800d3da:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800d3de:	b289      	uxth	r1, r1
 800d3e0:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 800d3e4:	ea42 0201 	orr.w	r2, r2, r1
 800d3e8:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800d3ec:	66da      	str	r2, [r3, #108]	; 0x6c
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800d3ee:	d1d2      	bne.n	800d396 <HAL_DSI_Read+0x26>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800d3f2:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d3f4:	021b      	lsls	r3, r3, #8
 800d3f6:	ea43 1787 	orr.w	r7, r3, r7, lsl #6
 800d3fa:	f047 0706 	orr.w	r7, r7, #6
 800d3fe:	66d7      	str	r7, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800d400:	f7fd fb9c 	bl	800ab3c <HAL_GetTick>
 800d404:	4607      	mov	r7, r0
  while (((int32_t)(datasize)) > 0)
 800d406:	e005      	b.n	800d414 <HAL_DSI_Read+0xa4>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d408:	f7fd fb98 	bl	800ab3c <HAL_GetTick>
 800d40c:	1bc1      	subs	r1, r0, r7
 800d40e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800d412:	d822      	bhi.n	800d45a <HAL_DSI_Read+0xea>
  while (((int32_t)(datasize)) > 0)
 800d414:	2c00      	cmp	r4, #0
 800d416:	dd25      	ble.n	800d464 <HAL_DSI_Read+0xf4>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800d418:	682b      	ldr	r3, [r5, #0]
 800d41a:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800d41c:	06ca      	lsls	r2, r1, #27
 800d41e:	d4f3      	bmi.n	800d408 <HAL_DSI_Read+0x98>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800d420:	2c04      	cmp	r4, #4
      fifoword = hdsi->Instance->GPDR;
 800d422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800d424:	4622      	mov	r2, r4
 800d426:	bf28      	it	cs
 800d428:	2204      	movcs	r2, #4
      for (count = 0U; count < nbbytes; count++)
 800d42a:	2c01      	cmp	r4, #1
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d42c:	ea4f 2113 	mov.w	r1, r3, lsr #8
 800d430:	7033      	strb	r3, [r6, #0]
 800d432:	ea4f 4013 	mov.w	r0, r3, lsr #16
 800d436:	ea4f 6313 	mov.w	r3, r3, lsr #24
      for (count = 0U; count < nbbytes; count++)
 800d43a:	d006      	beq.n	800d44a <HAL_DSI_Read+0xda>
 800d43c:	2c02      	cmp	r4, #2
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d43e:	7071      	strb	r1, [r6, #1]
      for (count = 0U; count < nbbytes; count++)
 800d440:	d003      	beq.n	800d44a <HAL_DSI_Read+0xda>
 800d442:	2c03      	cmp	r4, #3
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d444:	70b0      	strb	r0, [r6, #2]
 800d446:	bf88      	it	hi
 800d448:	70f3      	strbhi	r3, [r6, #3]
        pdata++;
 800d44a:	4416      	add	r6, r2
        datasize--;
 800d44c:	1aa4      	subs	r4, r4, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d44e:	f7fd fb75 	bl	800ab3c <HAL_GetTick>
 800d452:	1bc1      	subs	r1, r0, r7
 800d454:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800d458:	d9dc      	bls.n	800d414 <HAL_DSI_Read+0xa4>
      __HAL_UNLOCK(hdsi);
 800d45a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800d45c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800d45e:	742b      	strb	r3, [r5, #16]
}
 800d460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_UNLOCK(hdsi);
 800d464:	2300      	movs	r3, #0
  return HAL_OK;
 800d466:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdsi);
 800d468:	742b      	strb	r3, [r5, #16]
}
 800d46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d46e:	01bf      	lsls	r7, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800d470:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d472:	f047 0704 	orr.w	r7, r7, #4
 800d476:	66df      	str	r7, [r3, #108]	; 0x6c
}
 800d478:	e7c2      	b.n	800d400 <HAL_DSI_Read+0x90>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800d47a:	990a      	ldr	r1, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d47c:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800d47e:	682a      	ldr	r2, [r5, #0]
 800d480:	7849      	ldrb	r1, [r1, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d482:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800d486:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d488:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d48a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d48e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800d492:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800d494:	e7b4      	b.n	800d400 <HAL_DSI_Read+0x90>
  __HAL_LOCK(hdsi);
 800d496:	2002      	movs	r0, #2
}
 800d498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800d49c:	990a      	ldr	r1, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d49e:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800d4a0:	682a      	ldr	r2, [r5, #0]
 800d4a2:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d4a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d4a8:	f043 0314 	orr.w	r3, r3, #20
 800d4ac:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800d4ae:	e7a7      	b.n	800d400 <HAL_DSI_Read+0x90>

0800d4b0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800d4b0:	4603      	mov	r3, r0
  if (hexti == NULL)
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 800d4b2:	b919      	cbnz	r1, 800d4bc <HAL_EXTI_RegisterCallback+0xc>
 800d4b4:	b110      	cbz	r0, 800d4bc <HAL_EXTI_RegisterCallback+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800d4b6:	2000      	movs	r0, #0
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800d4b8:	605a      	str	r2, [r3, #4]
      break;
 800d4ba:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 800d4bc:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800d4be:	4770      	bx	lr

0800d4c0 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	b110      	cbz	r0, 800d4ca <HAL_EXTI_GetHandle+0xa>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 800d4c4:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 800d4c6:	6019      	str	r1, [r3, #0]
    return HAL_OK;
 800d4c8:	4770      	bx	lr
    return HAL_ERROR;
 800d4ca:	2001      	movs	r0, #1
  }
}
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop

0800d4d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d4d4:	680d      	ldr	r5, [r1, #0]
{
 800d4d6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d4d8:	2d00      	cmp	r5, #0
 800d4da:	f000 80eb 	beq.w	800d6b4 <HAL_GPIO_Init+0x1e4>
 800d4de:	f04f 0c00 	mov.w	ip, #0
 800d4e2:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800d74c <HAL_GPIO_Init+0x27c>
  uint32_t position = 0x00U;
 800d4e6:	4663      	mov	r3, ip
 800d4e8:	e025      	b.n	800d536 <HAL_GPIO_Init+0x66>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d4ea:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800d4ee:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d4f2:	f04f 0a0f 	mov.w	sl, #15
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d4f6:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d4fa:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800d4fe:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d502:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d506:	fa0a fa09 	lsl.w	sl, sl, r9
        temp = GPIOx->AFR[position >> 3U];
 800d50a:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d50e:	ea22 0a0a 	bic.w	sl, r2, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d512:	690a      	ldr	r2, [r1, #16]
 800d514:	fa02 f209 	lsl.w	r2, r2, r9
 800d518:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 800d51c:	f8ce 2020 	str.w	r2, [lr, #32]
      temp = GPIOx->MODER;
 800d520:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d522:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d524:	4326      	orrs	r6, r4
      GPIOx->MODER = temp;
 800d526:	6006      	str	r6, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 800d528:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d52a:	f10c 0c02 	add.w	ip, ip, #2
 800d52e:	fa35 f203 	lsrs.w	r2, r5, r3
 800d532:	f000 80bf 	beq.w	800d6b4 <HAL_GPIO_Init+0x1e4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d536:	2201      	movs	r2, #1
 800d538:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800d53a:	ea12 0e05 	ands.w	lr, r2, r5
 800d53e:	d0f3      	beq.n	800d528 <HAL_GPIO_Init+0x58>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d540:	684c      	ldr	r4, [r1, #4]
 800d542:	f024 0910 	bic.w	r9, r4, #16
 800d546:	f109 36ff 	add.w	r6, r9, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d54a:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d54c:	f04f 0603 	mov.w	r6, #3
 800d550:	fa06 f60c 	lsl.w	r6, r6, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d554:	f200 80b1 	bhi.w	800d6ba <HAL_GPIO_Init+0x1ea>
        temp = GPIOx->OSPEEDR;
 800d558:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d55c:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d55e:	ea2a 0a06 	bic.w	sl, sl, r6
 800d562:	43f6      	mvns	r6, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d564:	fa07 fb0c 	lsl.w	fp, r7, ip
 800d568:	ea4b 0a0a 	orr.w	sl, fp, sl
        GPIOx->OSPEEDR = temp;
 800d56c:	f8c0 a008 	str.w	sl, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d570:	f3c4 1a00 	ubfx	sl, r4, #4, #1
        temp = GPIOx->OTYPER;
 800d574:	f8d0 b004 	ldr.w	fp, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d578:	fa0a fa03 	lsl.w	sl, sl, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d57c:	ea2b 0202 	bic.w	r2, fp, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d580:	ea4a 0202 	orr.w	r2, sl, r2
        GPIOx->OTYPER = temp;
 800d584:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800d586:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d588:	f1b9 0f02 	cmp.w	r9, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d58c:	ea02 0a06 	and.w	sl, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d590:	688a      	ldr	r2, [r1, #8]
 800d592:	fa02 f20c 	lsl.w	r2, r2, ip
 800d596:	ea42 020a 	orr.w	r2, r2, sl
      GPIOx->PUPDR = temp;
 800d59a:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d59c:	d0a5      	beq.n	800d4ea <HAL_GPIO_Init+0x1a>
      temp = GPIOx->MODER;
 800d59e:	6802      	ldr	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d5a0:	00e7      	lsls	r7, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d5a2:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d5a6:	f004 0603 	and.w	r6, r4, #3
 800d5aa:	fa06 f60c 	lsl.w	r6, r6, ip
 800d5ae:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->MODER = temp;
 800d5b2:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d5b4:	d5b8      	bpl.n	800d528 <HAL_GPIO_Init+0x58>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d5b6:	4e5e      	ldr	r6, [pc, #376]	; (800d730 <HAL_GPIO_Init+0x260>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d5b8:	f003 0903 	and.w	r9, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d5bc:	4f5d      	ldr	r7, [pc, #372]	; (800d734 <HAL_GPIO_Init+0x264>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d5be:	f8d6 20f4 	ldr.w	r2, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d5c2:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d5c6:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d5c8:	f042 0202 	orr.w	r2, r2, #2
 800d5cc:	f8c6 20f4 	str.w	r2, [r6, #244]	; 0xf4
 800d5d0:	f8d6 20f4 	ldr.w	r2, [r6, #244]	; 0xf4
 800d5d4:	f023 0603 	bic.w	r6, r3, #3
 800d5d8:	f002 0202 	and.w	r2, r2, #2
 800d5dc:	4446      	add	r6, r8
 800d5de:	9201      	str	r2, [sp, #4]
 800d5e0:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d5e2:	f04f 020f 	mov.w	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800d5e6:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d5ea:	fa02 f209 	lsl.w	r2, r2, r9
 800d5ee:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d5f2:	d026      	beq.n	800d642 <HAL_GPIO_Init+0x172>
 800d5f4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800d5f8:	42b8      	cmp	r0, r7
 800d5fa:	d067      	beq.n	800d6cc <HAL_GPIO_Init+0x1fc>
 800d5fc:	4f4e      	ldr	r7, [pc, #312]	; (800d738 <HAL_GPIO_Init+0x268>)
 800d5fe:	42b8      	cmp	r0, r7
 800d600:	d06b      	beq.n	800d6da <HAL_GPIO_Init+0x20a>
 800d602:	4f4e      	ldr	r7, [pc, #312]	; (800d73c <HAL_GPIO_Init+0x26c>)
 800d604:	42b8      	cmp	r0, r7
 800d606:	d05a      	beq.n	800d6be <HAL_GPIO_Init+0x1ee>
 800d608:	4f4d      	ldr	r7, [pc, #308]	; (800d740 <HAL_GPIO_Init+0x270>)
 800d60a:	42b8      	cmp	r0, r7
 800d60c:	d073      	beq.n	800d6f6 <HAL_GPIO_Init+0x226>
 800d60e:	4f4d      	ldr	r7, [pc, #308]	; (800d744 <HAL_GPIO_Init+0x274>)
 800d610:	42b8      	cmp	r0, r7
 800d612:	d077      	beq.n	800d704 <HAL_GPIO_Init+0x234>
 800d614:	4f4c      	ldr	r7, [pc, #304]	; (800d748 <HAL_GPIO_Init+0x278>)
 800d616:	42b8      	cmp	r0, r7
 800d618:	d066      	beq.n	800d6e8 <HAL_GPIO_Init+0x218>
 800d61a:	f8df a134 	ldr.w	sl, [pc, #308]	; 800d750 <HAL_GPIO_Init+0x280>
 800d61e:	4550      	cmp	r0, sl
 800d620:	d077      	beq.n	800d712 <HAL_GPIO_Init+0x242>
 800d622:	f8df a130 	ldr.w	sl, [pc, #304]	; 800d754 <HAL_GPIO_Init+0x284>
 800d626:	4550      	cmp	r0, sl
 800d628:	d07a      	beq.n	800d720 <HAL_GPIO_Init+0x250>
 800d62a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800d758 <HAL_GPIO_Init+0x288>
 800d62e:	4550      	cmp	r0, sl
 800d630:	bf0c      	ite	eq
 800d632:	f04f 0a09 	moveq.w	sl, #9
 800d636:	f04f 0a0a 	movne.w	sl, #10
 800d63a:	fa0a f909 	lsl.w	r9, sl, r9
 800d63e:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d642:	60b2      	str	r2, [r6, #8]
        temp = EXTI_CurrentCPU->IMR1;
 800d644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d648:	03e6      	lsls	r6, r4, #15
        temp &= ~(iocurrent);
 800d64a:	ea6f 090e 	mvn.w	r9, lr
        temp = EXTI_CurrentCPU->IMR1;
 800d64e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        EXTI_CurrentCPU->IMR1 = temp;
 800d652:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    position++;
 800d656:	f103 0301 	add.w	r3, r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d65a:	f10c 0c02 	add.w	ip, ip, #2
        temp &= ~(iocurrent);
 800d65e:	bf54      	ite	pl
 800d660:	ea09 0202 	andpl.w	r2, r9, r2
          temp |= iocurrent;
 800d664:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800d668:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d66c:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 800d66e:	f8d6 6084 	ldr.w	r6, [r6, #132]	; 0x84
        EXTI_CurrentCPU->EMR1 = temp;
 800d672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800d676:	bf54      	ite	pl
 800d678:	ea09 0606 	andpl.w	r6, r9, r6
          temp |= iocurrent;
 800d67c:	ea4e 0606 	orrmi.w	r6, lr, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d680:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800d682:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 800d686:	6816      	ldr	r6, [r2, #0]
        EXTI->RTSR1 = temp;
 800d688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800d68c:	bf54      	ite	pl
 800d68e:	ea09 0606 	andpl.w	r6, r9, r6
          temp |= iocurrent;
 800d692:	ea4e 0606 	orrmi.w	r6, lr, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d696:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800d698:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800d69c:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 800d69e:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800d6a0:	bf54      	ite	pl
 800d6a2:	ea09 0202 	andpl.w	r2, r9, r2
          temp |= iocurrent;
 800d6a6:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->FTSR1 = temp;
 800d6aa:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d6ac:	fa35 f203 	lsrs.w	r2, r5, r3
 800d6b0:	f47f af41 	bne.w	800d536 <HAL_GPIO_Init+0x66>
  }
}
 800d6b4:	b003      	add	sp, #12
 800d6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d6ba:	43f6      	mvns	r6, r6
 800d6bc:	e763      	b.n	800d586 <HAL_GPIO_Init+0xb6>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d6be:	f04f 0a03 	mov.w	sl, #3
 800d6c2:	fa0a f909 	lsl.w	r9, sl, r9
 800d6c6:	ea42 0209 	orr.w	r2, r2, r9
 800d6ca:	e7ba      	b.n	800d642 <HAL_GPIO_Init+0x172>
 800d6cc:	f04f 0a01 	mov.w	sl, #1
 800d6d0:	fa0a f909 	lsl.w	r9, sl, r9
 800d6d4:	ea42 0209 	orr.w	r2, r2, r9
 800d6d8:	e7b3      	b.n	800d642 <HAL_GPIO_Init+0x172>
 800d6da:	f04f 0a02 	mov.w	sl, #2
 800d6de:	fa0a f909 	lsl.w	r9, sl, r9
 800d6e2:	ea42 0209 	orr.w	r2, r2, r9
 800d6e6:	e7ac      	b.n	800d642 <HAL_GPIO_Init+0x172>
 800d6e8:	f04f 0a06 	mov.w	sl, #6
 800d6ec:	fa0a f909 	lsl.w	r9, sl, r9
 800d6f0:	ea42 0209 	orr.w	r2, r2, r9
 800d6f4:	e7a5      	b.n	800d642 <HAL_GPIO_Init+0x172>
 800d6f6:	f04f 0a04 	mov.w	sl, #4
 800d6fa:	fa0a f909 	lsl.w	r9, sl, r9
 800d6fe:	ea42 0209 	orr.w	r2, r2, r9
 800d702:	e79e      	b.n	800d642 <HAL_GPIO_Init+0x172>
 800d704:	f04f 0a05 	mov.w	sl, #5
 800d708:	fa0a f909 	lsl.w	r9, sl, r9
 800d70c:	ea42 0209 	orr.w	r2, r2, r9
 800d710:	e797      	b.n	800d642 <HAL_GPIO_Init+0x172>
 800d712:	f04f 0a07 	mov.w	sl, #7
 800d716:	fa0a f909 	lsl.w	r9, sl, r9
 800d71a:	ea42 0209 	orr.w	r2, r2, r9
 800d71e:	e790      	b.n	800d642 <HAL_GPIO_Init+0x172>
 800d720:	f04f 0a08 	mov.w	sl, #8
 800d724:	fa0a f909 	lsl.w	r9, sl, r9
 800d728:	ea42 0209 	orr.w	r2, r2, r9
 800d72c:	e789      	b.n	800d642 <HAL_GPIO_Init+0x172>
 800d72e:	bf00      	nop
 800d730:	58024400 	.word	0x58024400
 800d734:	58020000 	.word	0x58020000
 800d738:	58020800 	.word	0x58020800
 800d73c:	58020c00 	.word	0x58020c00
 800d740:	58021000 	.word	0x58021000
 800d744:	58021400 	.word	0x58021400
 800d748:	58021800 	.word	0x58021800
 800d74c:	58000400 	.word	0x58000400
 800d750:	58021c00 	.word	0x58021c00
 800d754:	58022000 	.word	0x58022000
 800d758:	58022400 	.word	0x58022400

0800d75c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d75c:	2900      	cmp	r1, #0
 800d75e:	f000 80a8 	beq.w	800d8b2 <HAL_GPIO_DeInit+0x156>
  uint32_t position = 0x00U;
 800d762:	2300      	movs	r3, #0
{
 800d764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d768:	f8df 9168 	ldr.w	r9, [pc, #360]	; 800d8d4 <HAL_GPIO_DeInit+0x178>
 800d76c:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d76e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800d8d8 <HAL_GPIO_DeInit+0x17c>
 800d772:	f8df a168 	ldr.w	sl, [pc, #360]	; 800d8dc <HAL_GPIO_DeInit+0x180>
 800d776:	f8df b168 	ldr.w	fp, [pc, #360]	; 800d8e0 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d77a:	f04f 0e01 	mov.w	lr, #1
 800d77e:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
 800d782:	ea12 0c01 	ands.w	ip, r2, r1
 800d786:	d06f      	beq.n	800d868 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d788:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d78c:	f003 0403 	and.w	r4, r3, #3
 800d790:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d792:	4540      	cmp	r0, r8
 800d794:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d796:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d79a:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d79c:	fa06 f604 	lsl.w	r6, r6, r4
 800d7a0:	ea07 0706 	and.w	r7, r7, r6
 800d7a4:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d7a6:	d021      	beq.n	800d7ec <HAL_GPIO_DeInit+0x90>
 800d7a8:	4550      	cmp	r0, sl
 800d7aa:	d066      	beq.n	800d87a <HAL_GPIO_DeInit+0x11e>
 800d7ac:	4558      	cmp	r0, fp
 800d7ae:	d067      	beq.n	800d880 <HAL_GPIO_DeInit+0x124>
 800d7b0:	4f43      	ldr	r7, [pc, #268]	; (800d8c0 <HAL_GPIO_DeInit+0x164>)
 800d7b2:	42b8      	cmp	r0, r7
 800d7b4:	d06e      	beq.n	800d894 <HAL_GPIO_DeInit+0x138>
 800d7b6:	4f43      	ldr	r7, [pc, #268]	; (800d8c4 <HAL_GPIO_DeInit+0x168>)
 800d7b8:	42b8      	cmp	r0, r7
 800d7ba:	d070      	beq.n	800d89e <HAL_GPIO_DeInit+0x142>
 800d7bc:	4f42      	ldr	r7, [pc, #264]	; (800d8c8 <HAL_GPIO_DeInit+0x16c>)
 800d7be:	42b8      	cmp	r0, r7
 800d7c0:	d063      	beq.n	800d88a <HAL_GPIO_DeInit+0x12e>
 800d7c2:	4f42      	ldr	r7, [pc, #264]	; (800d8cc <HAL_GPIO_DeInit+0x170>)
 800d7c4:	42b8      	cmp	r0, r7
 800d7c6:	d056      	beq.n	800d876 <HAL_GPIO_DeInit+0x11a>
 800d7c8:	4f41      	ldr	r7, [pc, #260]	; (800d8d0 <HAL_GPIO_DeInit+0x174>)
 800d7ca:	42b8      	cmp	r0, r7
 800d7cc:	d072      	beq.n	800d8b4 <HAL_GPIO_DeInit+0x158>
 800d7ce:	f8df e114 	ldr.w	lr, [pc, #276]	; 800d8e4 <HAL_GPIO_DeInit+0x188>
 800d7d2:	4570      	cmp	r0, lr
 800d7d4:	d068      	beq.n	800d8a8 <HAL_GPIO_DeInit+0x14c>
 800d7d6:	f8df e110 	ldr.w	lr, [pc, #272]	; 800d8e8 <HAL_GPIO_DeInit+0x18c>
 800d7da:	4570      	cmp	r0, lr
 800d7dc:	bf14      	ite	ne
 800d7de:	f04f 0e0a 	movne.w	lr, #10
 800d7e2:	f04f 0e09 	moveq.w	lr, #9
 800d7e6:	fa0e f404 	lsl.w	r4, lr, r4
 800d7ea:	e000      	b.n	800d7ee <HAL_GPIO_DeInit+0x92>
 800d7ec:	2400      	movs	r4, #0
 800d7ee:	9f01      	ldr	r7, [sp, #4]
 800d7f0:	42a7      	cmp	r7, r4
 800d7f2:	d119      	bne.n	800d828 <HAL_GPIO_DeInit+0xcc>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d7f4:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800d7f8:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800d7fc:	ea27 070c 	bic.w	r7, r7, ip
 800d800:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800d804:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 800d808:	ea27 070c 	bic.w	r7, r7, ip
 800d80c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800d810:	6827      	ldr	r7, [r4, #0]
 800d812:	ea27 070c 	bic.w	r7, r7, ip
 800d816:	6027      	str	r7, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800d818:	6867      	ldr	r7, [r4, #4]
 800d81a:	ea27 070c 	bic.w	r7, r7, ip
 800d81e:	6067      	str	r7, [r4, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d820:	68ac      	ldr	r4, [r5, #8]
 800d822:	ea24 0606 	bic.w	r6, r4, r6
 800d826:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d828:	2503      	movs	r5, #3
 800d82a:	005c      	lsls	r4, r3, #1

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d82c:	f003 0707 	and.w	r7, r3, #7
 800d830:	260f      	movs	r6, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d832:	fa05 f404 	lsl.w	r4, r5, r4
 800d836:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d838:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d83a:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d83c:	fa06 f707 	lsl.w	r7, r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d840:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d842:	08dd      	lsrs	r5, r3, #3
 800d844:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800d848:	6a2e      	ldr	r6, [r5, #32]
 800d84a:	ea26 0607 	bic.w	r6, r6, r7
 800d84e:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d850:	68c5      	ldr	r5, [r0, #12]
 800d852:	ea25 0504 	bic.w	r5, r5, r4
 800d856:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d858:	6845      	ldr	r5, [r0, #4]
 800d85a:	ea25 0202 	bic.w	r2, r5, r2
 800d85e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d860:	6882      	ldr	r2, [r0, #8]
 800d862:	ea22 0404 	bic.w	r4, r2, r4
 800d866:	6084      	str	r4, [r0, #8]
    }

    position++;
 800d868:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800d86a:	fa31 f203 	lsrs.w	r2, r1, r3
 800d86e:	d184      	bne.n	800d77a <HAL_GPIO_DeInit+0x1e>
  }
}
 800d870:	b003      	add	sp, #12
 800d872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d876:	f04f 0e06 	mov.w	lr, #6
 800d87a:	fa0e f404 	lsl.w	r4, lr, r4
 800d87e:	e7b6      	b.n	800d7ee <HAL_GPIO_DeInit+0x92>
 800d880:	f04f 0e02 	mov.w	lr, #2
 800d884:	fa0e f404 	lsl.w	r4, lr, r4
 800d888:	e7b1      	b.n	800d7ee <HAL_GPIO_DeInit+0x92>
 800d88a:	f04f 0e05 	mov.w	lr, #5
 800d88e:	fa0e f404 	lsl.w	r4, lr, r4
 800d892:	e7ac      	b.n	800d7ee <HAL_GPIO_DeInit+0x92>
 800d894:	f04f 0e03 	mov.w	lr, #3
 800d898:	fa0e f404 	lsl.w	r4, lr, r4
 800d89c:	e7a7      	b.n	800d7ee <HAL_GPIO_DeInit+0x92>
 800d89e:	f04f 0e04 	mov.w	lr, #4
 800d8a2:	fa0e f404 	lsl.w	r4, lr, r4
 800d8a6:	e7a2      	b.n	800d7ee <HAL_GPIO_DeInit+0x92>
 800d8a8:	f04f 0e08 	mov.w	lr, #8
 800d8ac:	fa0e f404 	lsl.w	r4, lr, r4
 800d8b0:	e79d      	b.n	800d7ee <HAL_GPIO_DeInit+0x92>
 800d8b2:	4770      	bx	lr
 800d8b4:	f04f 0e07 	mov.w	lr, #7
 800d8b8:	fa0e f404 	lsl.w	r4, lr, r4
 800d8bc:	e797      	b.n	800d7ee <HAL_GPIO_DeInit+0x92>
 800d8be:	bf00      	nop
 800d8c0:	58020c00 	.word	0x58020c00
 800d8c4:	58021000 	.word	0x58021000
 800d8c8:	58021400 	.word	0x58021400
 800d8cc:	58021800 	.word	0x58021800
 800d8d0:	58021c00 	.word	0x58021c00
 800d8d4:	58000400 	.word	0x58000400
 800d8d8:	58020000 	.word	0x58020000
 800d8dc:	58020400 	.word	0x58020400
 800d8e0:	58020800 	.word	0x58020800
 800d8e4:	58022000 	.word	0x58022000
 800d8e8:	58022400 	.word	0x58022400

0800d8ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d8ec:	6903      	ldr	r3, [r0, #16]
 800d8ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800d8f0:	bf14      	ite	ne
 800d8f2:	2001      	movne	r0, #1
 800d8f4:	2000      	moveq	r0, #0
 800d8f6:	4770      	bx	lr

0800d8f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d8f8:	b902      	cbnz	r2, 800d8fc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d8fa:	0409      	lsls	r1, r1, #16
 800d8fc:	6181      	str	r1, [r0, #24]
  }
}
 800d8fe:	4770      	bx	lr

0800d900 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800d900:	6943      	ldr	r3, [r0, #20]
 800d902:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d906:	bf08      	it	eq
 800d908:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800d90a:	6181      	str	r1, [r0, #24]
  }
}
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop

0800d910 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d912:	4605      	mov	r5, r0
 800d914:	460e      	mov	r6, r1
 800d916:	4617      	mov	r7, r2
 800d918:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d91a:	682c      	ldr	r4, [r5, #0]
 800d91c:	d12c      	bne.n	800d978 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 800d91e:	69a3      	ldr	r3, [r4, #24]
 800d920:	0799      	lsls	r1, r3, #30
 800d922:	d427      	bmi.n	800d974 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d924:	69a3      	ldr	r3, [r4, #24]
 800d926:	06da      	lsls	r2, r3, #27
 800d928:	d5f9      	bpl.n	800d91e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d92a:	69a3      	ldr	r3, [r4, #24]
 800d92c:	069a      	lsls	r2, r3, #26
 800d92e:	d5fc      	bpl.n	800d92a <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d930:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d932:	2210      	movs	r2, #16
 800d934:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d936:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d938:	69a3      	ldr	r3, [r4, #24]
 800d93a:	079f      	lsls	r7, r3, #30
 800d93c:	d501      	bpl.n	800d942 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800d93e:	2300      	movs	r3, #0
 800d940:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d942:	69a3      	ldr	r3, [r4, #24]
 800d944:	07de      	lsls	r6, r3, #31
 800d946:	d403      	bmi.n	800d950 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d948:	69a3      	ldr	r3, [r4, #24]
 800d94a:	f043 0301 	orr.w	r3, r3, #1
 800d94e:	61a3      	str	r3, [r4, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d950:	6863      	ldr	r3, [r4, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d952:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 800d954:	481b      	ldr	r0, [pc, #108]	; (800d9c4 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 800d956:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d958:	4003      	ands	r3, r0
      return HAL_ERROR;
 800d95a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800d95c:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d95e:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d960:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d964:	f043 0304 	orr.w	r3, r3, #4
 800d968:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d96a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d96e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800d974:	2000      	movs	r0, #0
}
 800d976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d978:	69a3      	ldr	r3, [r4, #24]
 800d97a:	079b      	lsls	r3, r3, #30
 800d97c:	d4fa      	bmi.n	800d974 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d97e:	69a3      	ldr	r3, [r4, #24]
 800d980:	06d9      	lsls	r1, r3, #27
 800d982:	d41b      	bmi.n	800d9bc <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d984:	f7fd f8da 	bl	800ab3c <HAL_GetTick>
 800d988:	1bc0      	subs	r0, r0, r7
 800d98a:	42b0      	cmp	r0, r6
 800d98c:	d801      	bhi.n	800d992 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800d98e:	2e00      	cmp	r6, #0
 800d990:	d1c2      	bne.n	800d918 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d992:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d994:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d996:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800d998:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d99a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d99c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d9a0:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d9a2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9a6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9ac:	f7fd f8c6 	bl	800ab3c <HAL_GetTick>
 800d9b0:	1bc0      	subs	r0, r0, r7
 800d9b2:	4286      	cmp	r6, r0
 800d9b4:	d3ed      	bcc.n	800d992 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800d9b6:	2e00      	cmp	r6, #0
 800d9b8:	d0eb      	beq.n	800d992 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d9ba:	682c      	ldr	r4, [r5, #0]
 800d9bc:	69a3      	ldr	r3, [r4, #24]
 800d9be:	069b      	lsls	r3, r3, #26
 800d9c0:	d5f4      	bpl.n	800d9ac <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 800d9c2:	e7b5      	b.n	800d930 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 800d9c4:	fe00e800 	.word	0xfe00e800

0800d9c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ca:	4605      	mov	r5, r0
 800d9cc:	460e      	mov	r6, r1
 800d9ce:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d9d0:	682c      	ldr	r4, [r5, #0]
 800d9d2:	69a3      	ldr	r3, [r4, #24]
 800d9d4:	069b      	lsls	r3, r3, #26
 800d9d6:	d449      	bmi.n	800da6c <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d9d8:	69a3      	ldr	r3, [r4, #24]
 800d9da:	06da      	lsls	r2, r3, #27
 800d9dc:	d526      	bpl.n	800da2c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 800d9de:	1c73      	adds	r3, r6, #1
 800d9e0:	d138      	bne.n	800da54 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d9e2:	69a3      	ldr	r3, [r4, #24]
 800d9e4:	069e      	lsls	r6, r3, #26
 800d9e6:	d5fc      	bpl.n	800d9e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d9e8:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9ea:	2210      	movs	r2, #16
 800d9ec:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d9ee:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d9f0:	69a3      	ldr	r3, [r4, #24]
 800d9f2:	0799      	lsls	r1, r3, #30
 800d9f4:	d501      	bpl.n	800d9fa <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d9fa:	69a3      	ldr	r3, [r4, #24]
 800d9fc:	07da      	lsls	r2, r3, #31
 800d9fe:	d403      	bmi.n	800da08 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800da00:	69a3      	ldr	r3, [r4, #24]
 800da02:	f043 0301 	orr.w	r3, r3, #1
 800da06:	61a3      	str	r3, [r4, #24]
    I2C_RESET_CR2(hi2c);
 800da08:	6863      	ldr	r3, [r4, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800da0a:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 800da0c:	4818      	ldr	r0, [pc, #96]	; (800da70 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 800da0e:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800da10:	4003      	ands	r3, r0
      return HAL_ERROR;
 800da12:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800da14:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800da16:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800da18:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800da1c:	f043 0304 	orr.w	r3, r3, #4
 800da20:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800da22:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800da26:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800da2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da2c:	f7fd f886 	bl	800ab3c <HAL_GetTick>
 800da30:	1bc0      	subs	r0, r0, r7
 800da32:	42b0      	cmp	r0, r6
 800da34:	d801      	bhi.n	800da3a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800da36:	2e00      	cmp	r6, #0
 800da38:	d1ca      	bne.n	800d9d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800da3a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800da3c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800da3e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800da40:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800da42:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800da44:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800da48:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800da4a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800da4e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800da52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800da54:	69a3      	ldr	r3, [r4, #24]
 800da56:	0698      	lsls	r0, r3, #26
 800da58:	d4c6      	bmi.n	800d9e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da5a:	f7fd f86f 	bl	800ab3c <HAL_GetTick>
 800da5e:	1bc0      	subs	r0, r0, r7
 800da60:	4286      	cmp	r6, r0
 800da62:	d3ea      	bcc.n	800da3a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800da64:	2e00      	cmp	r6, #0
 800da66:	d0e8      	beq.n	800da3a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800da68:	682c      	ldr	r4, [r5, #0]
 800da6a:	e7b8      	b.n	800d9de <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800da6c:	2000      	movs	r0, #0
}
 800da6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da70:	fe00e800 	.word	0xfe00e800

0800da74 <HAL_I2C_MspInit>:
}
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop

0800da78 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800da78:	2800      	cmp	r0, #0
 800da7a:	d04e      	beq.n	800db1a <HAL_I2C_Init+0xa2>
{
 800da7c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800da7e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800da82:	4604      	mov	r4, r0
 800da84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d041      	beq.n	800db10 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 800da8c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800da8e:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800da90:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800da92:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800da96:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800da98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800da9c:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800da9e:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800daa2:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800daa4:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800daa6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800daa8:	689a      	ldr	r2, [r3, #8]
 800daaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800daae:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800dab0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dab2:	d029      	beq.n	800db08 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800dab4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dab8:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800daba:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dabc:	d102      	bne.n	800dac4 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800dabe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dac2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dac4:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800dac6:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800daca:	4915      	ldr	r1, [pc, #84]	; (800db20 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800dacc:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dace:	4301      	orrs	r1, r0
 800dad0:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dad2:	68d9      	ldr	r1, [r3, #12]
 800dad4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800dad8:	60d9      	str	r1, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800dada:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
 800dade:	4302      	orrs	r2, r0
 800dae0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dae4:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800dae8:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800daea:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800daec:	4301      	orrs	r1, r0
  return HAL_OK;
 800daee:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800daf0:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800daf2:	6819      	ldr	r1, [r3, #0]
 800daf4:	f041 0101 	orr.w	r1, r1, #1
 800daf8:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dafa:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dafc:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800db00:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800db02:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800db06:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800db08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db0c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800db0e:	e7d9      	b.n	800dac4 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800db10:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800db14:	f7ff ffae 	bl	800da74 <HAL_I2C_MspInit>
 800db18:	e7b8      	b.n	800da8c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800db1a:	2001      	movs	r0, #1
}
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	02008000 	.word	0x02008000

0800db24 <HAL_I2C_MspDeInit>:
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop

0800db28 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800db28:	b1b0      	cbz	r0, 800db58 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 800db2a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800db2c:	2324      	movs	r3, #36	; 0x24
{
 800db2e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800db30:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800db34:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 800db36:	6813      	ldr	r3, [r2, #0]
 800db38:	f023 0301 	bic.w	r3, r3, #1
 800db3c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800db3e:	f7ff fff1 	bl	800db24 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db42:	2300      	movs	r3, #0
 800db44:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800db46:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 800db48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800db4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 800db50:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800db52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800db56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800db58:	2001      	movs	r0, #1
}
 800db5a:	4770      	bx	lr

0800db5c <HAL_I2C_Mem_Write>:
{
 800db5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db60:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800db62:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800db66:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800db6a:	2b20      	cmp	r3, #32
{
 800db6c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 800db70:	f040 80a8 	bne.w	800dcc4 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800db74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db76:	4604      	mov	r4, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f000 809d 	beq.w	800dcb8 <HAL_I2C_Mem_Write+0x15c>
 800db7e:	f1bb 0f00 	cmp.w	fp, #0
 800db82:	f000 8099 	beq.w	800dcb8 <HAL_I2C_Mem_Write+0x15c>
    __HAL_LOCK(hi2c);
 800db86:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	f000 809a 	beq.w	800dcc4 <HAL_I2C_Mem_Write+0x168>
 800db90:	2301      	movs	r3, #1
 800db92:	460f      	mov	r7, r1
 800db94:	4691      	mov	r9, r2
 800db96:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800db9a:	f7fc ffcf 	bl	800ab3c <HAL_GetTick>
 800db9e:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800dba0:	e005      	b.n	800dbae <HAL_I2C_Mem_Write+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dba2:	f7fc ffcb 	bl	800ab3c <HAL_GetTick>
 800dba6:	1b80      	subs	r0, r0, r6
 800dba8:	2819      	cmp	r0, #25
 800dbaa:	f200 80a9 	bhi.w	800dd00 <HAL_I2C_Mem_Write+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	699d      	ldr	r5, [r3, #24]
 800dbb2:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 800dbb6:	d1f4      	bne.n	800dba2 <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 800dbb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dbba:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800dbbe:	4977      	ldr	r1, [pc, #476]	; (800dd9c <HAL_I2C_Mem_Write+0x240>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dbc0:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800dbc2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dbc4:	2221      	movs	r2, #33	; 0x21
    hi2c->XferISR   = NULL;
 800dbc6:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dbc8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dbcc:	2240      	movs	r2, #64	; 0x40
 800dbce:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dbd2:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800dbd4:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dbd8:	685a      	ldr	r2, [r3, #4]
 800dbda:	400a      	ands	r2, r1
 800dbdc:	fa5f f18a 	uxtb.w	r1, sl
 800dbe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dbe4:	496e      	ldr	r1, [pc, #440]	; (800dda0 <HAL_I2C_Mem_Write+0x244>)
 800dbe6:	433a      	orrs	r2, r7
 800dbe8:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dbea:	4632      	mov	r2, r6
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dbec:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dbee:	4641      	mov	r1, r8
 800dbf0:	f7ff fe8e 	bl	800d910 <I2C_WaitOnTXISFlagUntilTimeout>
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	d171      	bne.n	800dcdc <HAL_I2C_Mem_Write+0x180>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800dbf8:	f1ba 0f01 	cmp.w	sl, #1
 800dbfc:	d00a      	beq.n	800dc14 <HAL_I2C_Mem_Write+0xb8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800dbfe:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800dc02:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dc04:	4641      	mov	r1, r8
 800dc06:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800dc08:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dc0a:	4632      	mov	r2, r6
 800dc0c:	f7ff fe80 	bl	800d910 <I2C_WaitOnTXISFlagUntilTimeout>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d163      	bne.n	800dcdc <HAL_I2C_Mem_Write+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800dc14:	fa5f f389 	uxtb.w	r3, r9
 800dc18:	6822      	ldr	r2, [r4, #0]
 800dc1a:	6293      	str	r3, [r2, #40]	; 0x28
 800dc1c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800dc20:	f040 8089 	bne.w	800dd36 <HAL_I2C_Mem_Write+0x1da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dc24:	6993      	ldr	r3, [r2, #24]
 800dc26:	0618      	lsls	r0, r3, #24
 800dc28:	d5fc      	bpl.n	800dc24 <HAL_I2C_Mem_Write+0xc8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	2bff      	cmp	r3, #255	; 0xff
 800dc30:	f240 8091 	bls.w	800dd56 <HAL_I2C_Mem_Write+0x1fa>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dc34:	6853      	ldr	r3, [r2, #4]
 800dc36:	495b      	ldr	r1, [pc, #364]	; (800dda4 <HAL_I2C_Mem_Write+0x248>)
 800dc38:	400b      	ands	r3, r1
 800dc3a:	495b      	ldr	r1, [pc, #364]	; (800dda8 <HAL_I2C_Mem_Write+0x24c>)
 800dc3c:	433b      	orrs	r3, r7
 800dc3e:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc40:	23ff      	movs	r3, #255	; 0xff
 800dc42:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dc44:	6051      	str	r1, [r2, #4]
 800dc46:	4d57      	ldr	r5, [pc, #348]	; (800dda4 <HAL_I2C_Mem_Write+0x248>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc48:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dc4c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800dda8 <HAL_I2C_Mem_Write+0x24c>
 800dc50:	e004      	b.n	800dc5c <HAL_I2C_Mem_Write+0x100>
    while (hi2c->XferCount > 0U);
 800dc52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f000 808b 	beq.w	800dd72 <HAL_I2C_Mem_Write+0x216>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc5c:	4632      	mov	r2, r6
 800dc5e:	4641      	mov	r1, r8
 800dc60:	4620      	mov	r0, r4
 800dc62:	f7ff fe55 	bl	800d910 <I2C_WaitOnTXISFlagUntilTimeout>
 800dc66:	2800      	cmp	r0, #0
 800dc68:	d173      	bne.n	800dd52 <HAL_I2C_Mem_Write+0x1f6>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dc6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dc6c:	6821      	ldr	r1, [r4, #0]
 800dc6e:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
 800dc72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dc74:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
 800dc76:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800dc78:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800dc7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800dc7c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800dc7e:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800dc80:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800dc82:	b292      	uxth	r2, r2
 800dc84:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dc86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800dc88:	b292      	uxth	r2, r2
 800dc8a:	2a00      	cmp	r2, #0
 800dc8c:	d0e1      	beq.n	800dc52 <HAL_I2C_Mem_Write+0xf6>
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1df      	bne.n	800dc52 <HAL_I2C_Mem_Write+0xf6>
 800dc92:	f1b8 3fff 	cmp.w	r8, #4294967295
 800dc96:	d126      	bne.n	800dce6 <HAL_I2C_Mem_Write+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dc98:	698b      	ldr	r3, [r1, #24]
 800dc9a:	061a      	lsls	r2, r3, #24
 800dc9c:	d5fc      	bpl.n	800dc98 <HAL_I2C_Mem_Write+0x13c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	2bff      	cmp	r3, #255	; 0xff
 800dca4:	d93a      	bls.n	800dd1c <HAL_I2C_Mem_Write+0x1c0>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dca6:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dca8:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dcac:	402b      	ands	r3, r5
 800dcae:	433b      	orrs	r3, r7
 800dcb0:	ea43 0309 	orr.w	r3, r3, r9
 800dcb4:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800dcb6:	e7cc      	b.n	800dc52 <HAL_I2C_Mem_Write+0xf6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dcb8:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800dcbc:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dcbe:	6463      	str	r3, [r4, #68]	; 0x44
}
 800dcc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800dcc4:	2002      	movs	r0, #2
}
 800dcc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dcca:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dccc:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcce:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dcd0:	430b      	orrs	r3, r1
 800dcd2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dcd4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcd8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800dcdc:	2300      	movs	r3, #0
      return HAL_ERROR;
 800dcde:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800dce0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800dce4:	e7ec      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x164>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dce6:	698b      	ldr	r3, [r1, #24]
 800dce8:	061b      	lsls	r3, r3, #24
 800dcea:	d4d8      	bmi.n	800dc9e <HAL_I2C_Mem_Write+0x142>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcec:	f7fc ff26 	bl	800ab3c <HAL_GetTick>
 800dcf0:	1b80      	subs	r0, r0, r6
 800dcf2:	4580      	cmp	r8, r0
 800dcf4:	d304      	bcc.n	800dd00 <HAL_I2C_Mem_Write+0x1a4>
 800dcf6:	f1b8 0f00 	cmp.w	r8, #0
 800dcfa:	d001      	beq.n	800dd00 <HAL_I2C_Mem_Write+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dcfc:	6821      	ldr	r1, [r4, #0]
 800dcfe:	e7c8      	b.n	800dc92 <HAL_I2C_Mem_Write+0x136>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dd00:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dd02:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd04:	2200      	movs	r2, #0
          return HAL_ERROR;
 800dd06:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dd08:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800dd0a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dd0e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dd10:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800dd18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          hi2c->XferSize = hi2c->XferCount;
 800dd1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dd1e:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dd20:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
 800dd22:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dd24:	684b      	ldr	r3, [r1, #4]
 800dd26:	402b      	ands	r3, r5
 800dd28:	433b      	orrs	r3, r7
 800dd2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dd32:	604b      	str	r3, [r1, #4]
}
 800dd34:	e78d      	b.n	800dc52 <HAL_I2C_Mem_Write+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dd36:	6993      	ldr	r3, [r2, #24]
 800dd38:	0619      	lsls	r1, r3, #24
 800dd3a:	f53f af76 	bmi.w	800dc2a <HAL_I2C_Mem_Write+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd3e:	f7fc fefd 	bl	800ab3c <HAL_GetTick>
 800dd42:	1b80      	subs	r0, r0, r6
 800dd44:	4580      	cmp	r8, r0
 800dd46:	d3c0      	bcc.n	800dcca <HAL_I2C_Mem_Write+0x16e>
 800dd48:	f1b8 0f00 	cmp.w	r8, #0
 800dd4c:	d0bd      	beq.n	800dcca <HAL_I2C_Mem_Write+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dd4e:	6822      	ldr	r2, [r4, #0]
 800dd50:	e764      	b.n	800dc1c <HAL_I2C_Mem_Write+0xc0>
        return HAL_ERROR;
 800dd52:	2001      	movs	r0, #1
 800dd54:	e7b4      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x164>
      hi2c->XferSize = hi2c->XferCount;
 800dd56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dd58:	4812      	ldr	r0, [pc, #72]	; (800dda4 <HAL_I2C_Mem_Write+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 800dd5a:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dd5c:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 800dd5e:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dd60:	6853      	ldr	r3, [r2, #4]
 800dd62:	4003      	ands	r3, r0
 800dd64:	433b      	orrs	r3, r7
 800dd66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800dd6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dd6e:	6053      	str	r3, [r2, #4]
}
 800dd70:	e769      	b.n	800dc46 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dd72:	4632      	mov	r2, r6
 800dd74:	4641      	mov	r1, r8
 800dd76:	4620      	mov	r0, r4
 800dd78:	f7ff fe26 	bl	800d9c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	d1e8      	bne.n	800dd52 <HAL_I2C_Mem_Write+0x1f6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd80:	6823      	ldr	r3, [r4, #0]
 800dd82:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800dd84:	4d09      	ldr	r5, [pc, #36]	; (800ddac <HAL_I2C_Mem_Write+0x250>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd86:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800dd88:	685a      	ldr	r2, [r3, #4]
 800dd8a:	402a      	ands	r2, r5
 800dd8c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800dd8e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800dd92:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dd96:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800dd9a:	e791      	b.n	800dcc0 <HAL_I2C_Mem_Write+0x164>
 800dd9c:	fc009800 	.word	0xfc009800
 800dda0:	81002000 	.word	0x81002000
 800dda4:	fc009c00 	.word	0xfc009c00
 800dda8:	01ff0000 	.word	0x01ff0000
 800ddac:	fe00e800 	.word	0xfe00e800

0800ddb0 <HAL_I2C_Mem_Read>:
{
 800ddb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb4:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ddb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800ddba:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ddbe:	2b20      	cmp	r3, #32
{
 800ddc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ddc2:	f040 80bf 	bne.w	800df44 <HAL_I2C_Mem_Read+0x194>
    if ((pData == NULL) || (Size == 0U))
 800ddc6:	9b08      	ldr	r3, [sp, #32]
 800ddc8:	4682      	mov	sl, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 80b3 	beq.w	800df36 <HAL_I2C_Mem_Read+0x186>
 800ddd0:	f1b9 0f00 	cmp.w	r9, #0
 800ddd4:	f000 80af 	beq.w	800df36 <HAL_I2C_Mem_Read+0x186>
    __HAL_LOCK(hi2c);
 800ddd8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	f000 80b1 	beq.w	800df44 <HAL_I2C_Mem_Read+0x194>
 800dde2:	2301      	movs	r3, #1
 800dde4:	460e      	mov	r6, r1
 800dde6:	4690      	mov	r8, r2
 800dde8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800ddec:	f7fc fea6 	bl	800ab3c <HAL_GetTick>
 800ddf0:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800ddf2:	e005      	b.n	800de00 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ddf4:	f7fc fea2 	bl	800ab3c <HAL_GetTick>
 800ddf8:	1b40      	subs	r0, r0, r5
 800ddfa:	2819      	cmp	r0, #25
 800ddfc:	f200 808b 	bhi.w	800df16 <HAL_I2C_Mem_Read+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800de00:	f8da 3000 	ldr.w	r3, [sl]
 800de04:	6998      	ldr	r0, [r3, #24]
 800de06:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800de0a:	d1f3      	bne.n	800ddf4 <HAL_I2C_Mem_Read+0x44>
    hi2c->pBuffPtr  = pData;
 800de0c:	9a08      	ldr	r2, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800de0e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800de12:	4987      	ldr	r1, [pc, #540]	; (800e030 <HAL_I2C_Mem_Read+0x280>)
    hi2c->pBuffPtr  = pData;
 800de14:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800de18:	2222      	movs	r2, #34	; 0x22
    hi2c->XferISR   = NULL;
 800de1a:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800de1e:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800de22:	2240      	movs	r2, #64	; 0x40
 800de24:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de28:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de2c:	4650      	mov	r0, sl
    hi2c->XferCount = Size;
 800de2e:	f8aa 902a 	strh.w	r9, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800de32:	685a      	ldr	r2, [r3, #4]
 800de34:	400a      	ands	r2, r1
 800de36:	b2f9      	uxtb	r1, r7
 800de38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800de3c:	497d      	ldr	r1, [pc, #500]	; (800e034 <HAL_I2C_Mem_Read+0x284>)
 800de3e:	4332      	orrs	r2, r6
 800de40:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de42:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800de44:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de46:	4621      	mov	r1, r4
 800de48:	f7ff fd62 	bl	800d910 <I2C_WaitOnTXISFlagUntilTimeout>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	f040 8087 	bne.w	800df60 <HAL_I2C_Mem_Read+0x1b0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800de52:	2f01      	cmp	r7, #1
 800de54:	d00b      	beq.n	800de6e <HAL_I2C_Mem_Read+0xbe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800de56:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800de5a:	f8da 3000 	ldr.w	r3, [sl]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de5e:	4621      	mov	r1, r4
 800de60:	4650      	mov	r0, sl
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800de62:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de64:	462a      	mov	r2, r5
 800de66:	f7ff fd53 	bl	800d910 <I2C_WaitOnTXISFlagUntilTimeout>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	d178      	bne.n	800df60 <HAL_I2C_Mem_Read+0x1b0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800de6e:	fa5f f388 	uxtb.w	r3, r8
 800de72:	f8da 2000 	ldr.w	r2, [sl]
 800de76:	6293      	str	r3, [r2, #40]	; 0x28
 800de78:	1c61      	adds	r1, r4, #1
 800de7a:	f040 80a4 	bne.w	800dfc6 <HAL_I2C_Mem_Read+0x216>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800de7e:	6993      	ldr	r3, [r2, #24]
 800de80:	065b      	lsls	r3, r3, #25
 800de82:	d5fc      	bpl.n	800de7e <HAL_I2C_Mem_Read+0xce>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de84:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 800de88:	b29b      	uxth	r3, r3
 800de8a:	2bff      	cmp	r3, #255	; 0xff
 800de8c:	f240 80a9 	bls.w	800dfe2 <HAL_I2C_Mem_Read+0x232>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800de90:	6853      	ldr	r3, [r2, #4]
 800de92:	4967      	ldr	r1, [pc, #412]	; (800e030 <HAL_I2C_Mem_Read+0x280>)
 800de94:	400b      	ands	r3, r1
 800de96:	4968      	ldr	r1, [pc, #416]	; (800e038 <HAL_I2C_Mem_Read+0x288>)
 800de98:	4333      	orrs	r3, r6
 800de9a:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800de9c:	23ff      	movs	r3, #255	; 0xff
 800de9e:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dea2:	6051      	str	r1, [r2, #4]
 800dea4:	1c60      	adds	r0, r4, #1
 800dea6:	4f65      	ldr	r7, [pc, #404]	; (800e03c <HAL_I2C_Mem_Read+0x28c>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dea8:	f04f 09ff 	mov.w	r9, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800deac:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800e048 <HAL_I2C_Mem_Read+0x298>
 800deb0:	d127      	bne.n	800df02 <HAL_I2C_Mem_Read+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800deb2:	6993      	ldr	r3, [r2, #24]
 800deb4:	0759      	lsls	r1, r3, #29
 800deb6:	d5fc      	bpl.n	800deb2 <HAL_I2C_Mem_Read+0x102>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800deb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800deba:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800debe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800dec0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
      hi2c->XferCount--;
 800dec4:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800dec8:	3301      	adds	r3, #1
      hi2c->XferCount--;
 800deca:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800decc:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      hi2c->XferSize--;
 800ded0:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
      hi2c->XferCount--;
 800ded4:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800ded6:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800ded8:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dedc:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->XferSize--;
 800dee0:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dee2:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800dee4:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dee8:	b90b      	cbnz	r3, 800deee <HAL_I2C_Mem_Read+0x13e>
 800deea:	2a00      	cmp	r2, #0
 800deec:	d147      	bne.n	800df7e <HAL_I2C_Mem_Read+0x1ce>
    while (hi2c->XferCount > 0U);
 800deee:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 800def2:	b29b      	uxth	r3, r3
 800def4:	2b00      	cmp	r3, #0
 800def6:	f000 8084 	beq.w	800e002 <HAL_I2C_Mem_Read+0x252>
 800defa:	1c60      	adds	r0, r4, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800defc:	f8da 2000 	ldr.w	r2, [sl]
 800df00:	d0d7      	beq.n	800deb2 <HAL_I2C_Mem_Read+0x102>
 800df02:	6993      	ldr	r3, [r2, #24]
 800df04:	075b      	lsls	r3, r3, #29
 800df06:	d4d7      	bmi.n	800deb8 <HAL_I2C_Mem_Read+0x108>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df08:	f7fc fe18 	bl	800ab3c <HAL_GetTick>
 800df0c:	1b40      	subs	r0, r0, r5
 800df0e:	4284      	cmp	r4, r0
 800df10:	d301      	bcc.n	800df16 <HAL_I2C_Mem_Read+0x166>
 800df12:	2c00      	cmp	r4, #0
 800df14:	d1f1      	bne.n	800defa <HAL_I2C_Mem_Read+0x14a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800df16:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800df1a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800df1c:	2200      	movs	r2, #0
          return HAL_ERROR;
 800df1e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800df20:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800df22:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800df26:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800df2a:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800df2e:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
}
 800df32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800df36:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800df3a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800df3c:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
}
 800df40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800df44:	2002      	movs	r0, #2
}
 800df46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800df4a:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800df4e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800df50:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800df52:	430b      	orrs	r3, r1
 800df54:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800df58:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800df5c:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800df60:	2300      	movs	r3, #0
      return HAL_ERROR;
 800df62:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800df64:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
      return HAL_ERROR;
 800df68:	e7ea      	b.n	800df40 <HAL_I2C_Mem_Read+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800df6a:	6993      	ldr	r3, [r2, #24]
 800df6c:	061b      	lsls	r3, r3, #24
 800df6e:	d40d      	bmi.n	800df8c <HAL_I2C_Mem_Read+0x1dc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df70:	f7fc fde4 	bl	800ab3c <HAL_GetTick>
 800df74:	1b40      	subs	r0, r0, r5
 800df76:	4284      	cmp	r4, r0
 800df78:	d3cd      	bcc.n	800df16 <HAL_I2C_Mem_Read+0x166>
 800df7a:	2c00      	cmp	r4, #0
 800df7c:	d0cb      	beq.n	800df16 <HAL_I2C_Mem_Read+0x166>
 800df7e:	1c60      	adds	r0, r4, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800df80:	f8da 2000 	ldr.w	r2, [sl]
 800df84:	d1f1      	bne.n	800df6a <HAL_I2C_Mem_Read+0x1ba>
 800df86:	6993      	ldr	r3, [r2, #24]
 800df88:	0619      	lsls	r1, r3, #24
 800df8a:	d5fc      	bpl.n	800df86 <HAL_I2C_Mem_Read+0x1d6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800df8c:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 800df90:	b29b      	uxth	r3, r3
 800df92:	2bff      	cmp	r3, #255	; 0xff
 800df94:	d908      	bls.n	800dfa8 <HAL_I2C_Mem_Read+0x1f8>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800df96:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800df98:	f8aa 9028 	strh.w	r9, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800df9c:	403b      	ands	r3, r7
 800df9e:	4333      	orrs	r3, r6
 800dfa0:	ea43 0308 	orr.w	r3, r3, r8
 800dfa4:	6053      	str	r3, [r2, #4]
}
 800dfa6:	e7a2      	b.n	800deee <HAL_I2C_Mem_Read+0x13e>
          hi2c->XferSize = hi2c->XferCount;
 800dfa8:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 800dfac:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dfae:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 800dfb0:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dfb4:	6853      	ldr	r3, [r2, #4]
 800dfb6:	403b      	ands	r3, r7
 800dfb8:	4333      	orrs	r3, r6
 800dfba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800dfbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dfc2:	6053      	str	r3, [r2, #4]
}
 800dfc4:	e793      	b.n	800deee <HAL_I2C_Mem_Read+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dfc6:	6993      	ldr	r3, [r2, #24]
 800dfc8:	065f      	lsls	r7, r3, #25
 800dfca:	f53f af5b 	bmi.w	800de84 <HAL_I2C_Mem_Read+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dfce:	f7fc fdb5 	bl	800ab3c <HAL_GetTick>
 800dfd2:	1b40      	subs	r0, r0, r5
 800dfd4:	4284      	cmp	r4, r0
 800dfd6:	d3b8      	bcc.n	800df4a <HAL_I2C_Mem_Read+0x19a>
 800dfd8:	2c00      	cmp	r4, #0
 800dfda:	d0b6      	beq.n	800df4a <HAL_I2C_Mem_Read+0x19a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dfdc:	f8da 2000 	ldr.w	r2, [sl]
 800dfe0:	e74a      	b.n	800de78 <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 800dfe2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dfe6:	4812      	ldr	r0, [pc, #72]	; (800e030 <HAL_I2C_Mem_Read+0x280>)
      hi2c->XferSize = hi2c->XferCount;
 800dfe8:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dfea:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 800dfec:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dff0:	6853      	ldr	r3, [r2, #4]
 800dff2:	4003      	ands	r3, r0
 800dff4:	4333      	orrs	r3, r6
 800dff6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800dffa:	4911      	ldr	r1, [pc, #68]	; (800e040 <HAL_I2C_Mem_Read+0x290>)
 800dffc:	4319      	orrs	r1, r3
 800dffe:	6051      	str	r1, [r2, #4]
}
 800e000:	e750      	b.n	800dea4 <HAL_I2C_Mem_Read+0xf4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e002:	462a      	mov	r2, r5
 800e004:	4621      	mov	r1, r4
 800e006:	4650      	mov	r0, sl
 800e008:	f7ff fcde 	bl	800d9c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e00c:	b970      	cbnz	r0, 800e02c <HAL_I2C_Mem_Read+0x27c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e00e:	f8da 3000 	ldr.w	r3, [sl]
 800e012:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800e014:	4c0b      	ldr	r4, [pc, #44]	; (800e044 <HAL_I2C_Mem_Read+0x294>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e016:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800e018:	685a      	ldr	r2, [r3, #4]
 800e01a:	4022      	ands	r2, r4
 800e01c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e01e:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800e022:	f88a 0040 	strb.w	r0, [sl, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e026:	f88a 0042 	strb.w	r0, [sl, #66]	; 0x42
    return HAL_OK;
 800e02a:	e789      	b.n	800df40 <HAL_I2C_Mem_Read+0x190>
      return HAL_ERROR;
 800e02c:	2001      	movs	r0, #1
 800e02e:	e787      	b.n	800df40 <HAL_I2C_Mem_Read+0x190>
 800e030:	fc009800 	.word	0xfc009800
 800e034:	80002000 	.word	0x80002000
 800e038:	81ff2400 	.word	0x81ff2400
 800e03c:	fc009c00 	.word	0xfc009c00
 800e040:	82002400 	.word	0x82002400
 800e044:	fe00e800 	.word	0xfe00e800
 800e048:	01ff0000 	.word	0x01ff0000

0800e04c <HAL_I2C_GetState>:
  return hi2c->State;
 800e04c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop

0800e054 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800e054:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800e056:	4770      	bx	lr

0800e058 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e058:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800e05c:	2a20      	cmp	r2, #32
 800e05e:	d123      	bne.n	800e0a8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800e060:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e064:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800e068:	4603      	mov	r3, r0
 800e06a:	2a01      	cmp	r2, #1
 800e06c:	d01c      	beq.n	800e0a8 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e06e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e070:	2024      	movs	r0, #36	; 0x24
{
 800e072:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e074:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e078:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 800e07c:	6810      	ldr	r0, [r2, #0]
 800e07e:	f020 0001 	bic.w	r0, r0, #1
 800e082:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e084:	6810      	ldr	r0, [r2, #0]
 800e086:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800e08a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800e08c:	6810      	ldr	r0, [r2, #0]
 800e08e:	4301      	orrs	r1, r0

    return HAL_OK;
 800e090:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 800e092:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800e094:	6811      	ldr	r1, [r2, #0]
 800e096:	f041 0101 	orr.w	r1, r1, #1
 800e09a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800e09c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800e0a0:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800e0a4:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800e0a8:	2002      	movs	r0, #2
}
 800e0aa:	4770      	bx	lr

0800e0ac <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0ac:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800e0b0:	2a20      	cmp	r2, #32
 800e0b2:	d122      	bne.n	800e0fa <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 800e0b4:	4603      	mov	r3, r0
{
 800e0b6:	b500      	push	{lr}
 800e0b8:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e0bc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800e0c0:	2a01      	cmp	r2, #1
 800e0c2:	d01c      	beq.n	800e0fe <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e0c4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e0c6:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e0c8:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e0cc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800e0d0:	6810      	ldr	r0, [r2, #0]
 800e0d2:	f020 0001 	bic.w	r0, r0, #1
 800e0d6:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800e0d8:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800e0da:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800e0de:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 800e0e2:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 800e0e4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800e0e6:	6811      	ldr	r1, [r2, #0]
 800e0e8:	f041 0101 	orr.w	r1, r1, #1
 800e0ec:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800e0ee:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800e0f2:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800e0f6:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800e0fa:	2002      	movs	r0, #2
}
 800e0fc:	4770      	bx	lr
    return HAL_BUSY;
 800e0fe:	2002      	movs	r0, #2
}
 800e100:	f85d fb04 	ldr.w	pc, [sp], #4

0800e104 <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop

0800e108 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800e108:	2800      	cmp	r0, #0
 800e10a:	d067      	beq.n	800e1dc <HAL_LTDC_Init+0xd4>
{
 800e10c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800e10e:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800e112:	4604      	mov	r4, r0
 800e114:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d05a      	beq.n	800e1d2 <HAL_LTDC_Init+0xca>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e11c:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e11e:	2102      	movs	r1, #2
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e120:	69e5      	ldr	r5, [r4, #28]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e122:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e126:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e12a:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e12c:	4302      	orrs	r2, r0
 800e12e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e130:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e134:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e136:	6920      	ldr	r0, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e138:	6199      	str	r1, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e13a:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e13c:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e13e:	4828      	ldr	r0, [pc, #160]	; (800e1e0 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e140:	430a      	orrs	r2, r1
 800e142:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e144:	689a      	ldr	r2, [r3, #8]
 800e146:	4002      	ands	r2, r0
 800e148:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e14a:	6962      	ldr	r2, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e14c:	6899      	ldr	r1, [r3, #8]
 800e14e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e152:	69a2      	ldr	r2, [r4, #24]
 800e154:	4311      	orrs	r1, r2
 800e156:	6099      	str	r1, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e158:	68d9      	ldr	r1, [r3, #12]
 800e15a:	4001      	ands	r1, r0
 800e15c:	60d9      	str	r1, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e15e:	68da      	ldr	r2, [r3, #12]
 800e160:	6a21      	ldr	r1, [r4, #32]
 800e162:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e166:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e168:	430a      	orrs	r2, r1
 800e16a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e16c:	691a      	ldr	r2, [r3, #16]
 800e16e:	4002      	ands	r2, r0
 800e170:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e172:	6919      	ldr	r1, [r3, #16]
 800e174:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e176:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e17a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e17c:	4311      	orrs	r1, r2
 800e17e:	6119      	str	r1, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e180:	6959      	ldr	r1, [r3, #20]
 800e182:	4008      	ands	r0, r1
 800e184:	6158      	str	r0, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800e186:	695a      	ldr	r2, [r3, #20]
 800e188:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e18a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800e18e:	430a      	orrs	r2, r1
 800e190:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e192:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800e194:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e198:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800e19c:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e1a0:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e1a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e1a4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800e1a8:	430a      	orrs	r2, r1
 800e1aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e1ae:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e1b0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800e1b4:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800e1b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1b8:	f042 0206 	orr.w	r2, r2, #6
 800e1bc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800e1be:	699a      	ldr	r2, [r3, #24]
 800e1c0:	f042 0201 	orr.w	r2, r2, #1
 800e1c4:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800e1c6:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e1c8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800e1cc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800e1d0:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800e1d2:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800e1d6:	f7ff ff95 	bl	800e104 <HAL_LTDC_MspInit>
 800e1da:	e79f      	b.n	800e11c <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800e1dc:	2001      	movs	r0, #1
}
 800e1de:	4770      	bx	lr
 800e1e0:	f000f800 	.word	0xf000f800

0800e1e4 <HAL_LTDC_ErrorCallback>:
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop

0800e1e8 <HAL_LTDC_LineEventCallback>:
 800e1e8:	4770      	bx	lr
 800e1ea:	bf00      	nop

0800e1ec <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800e1ec:	6803      	ldr	r3, [r0, #0]
{
 800e1ee:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800e1f0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
 800e1f2:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800e1f4:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800e1f6:	076a      	lsls	r2, r5, #29
 800e1f8:	d501      	bpl.n	800e1fe <HAL_LTDC_IRQHandler+0x12>
 800e1fa:	0771      	lsls	r1, r6, #29
 800e1fc:	d41d      	bmi.n	800e23a <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800e1fe:	07aa      	lsls	r2, r5, #30
 800e200:	d501      	bpl.n	800e206 <HAL_LTDC_IRQHandler+0x1a>
 800e202:	07b3      	lsls	r3, r6, #30
 800e204:	d42d      	bmi.n	800e262 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800e206:	07e8      	lsls	r0, r5, #31
 800e208:	d501      	bpl.n	800e20e <HAL_LTDC_IRQHandler+0x22>
 800e20a:	07f1      	lsls	r1, r6, #31
 800e20c:	d440      	bmi.n	800e290 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800e20e:	072a      	lsls	r2, r5, #28
 800e210:	d501      	bpl.n	800e216 <HAL_LTDC_IRQHandler+0x2a>
 800e212:	0733      	lsls	r3, r6, #28
 800e214:	d400      	bmi.n	800e218 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800e216:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800e218:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800e21a:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 800e21c:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800e21e:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800e220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e222:	f022 0208 	bic.w	r2, r2, #8
 800e226:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800e228:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
 800e22a:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
 800e22c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800e230:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800e234:	f7f3 fb96 	bl	8001964 <HAL_LTDC_ReloadEventCallback>
}
 800e238:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800e23a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e23c:	f022 0204 	bic.w	r2, r2, #4
 800e240:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800e242:	2204      	movs	r2, #4
 800e244:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800e246:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800e24a:	f043 0301 	orr.w	r3, r3, #1
 800e24e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800e252:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e254:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800e258:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800e25c:	f7ff ffc2 	bl	800e1e4 <HAL_LTDC_ErrorCallback>
 800e260:	e7cd      	b.n	800e1fe <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800e262:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800e264:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800e266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e268:	f022 0202 	bic.w	r2, r2, #2
 800e26c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800e26e:	2202      	movs	r2, #2
 800e270:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e272:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800e274:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800e278:	f043 0302 	orr.w	r3, r3, #2
 800e27c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800e280:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e282:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800e286:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800e28a:	f7ff ffab 	bl	800e1e4 <HAL_LTDC_ErrorCallback>
 800e28e:	e7ba      	b.n	800e206 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e290:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800e292:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e296:	f022 0201 	bic.w	r2, r2, #1
 800e29a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800e29c:	2201      	movs	r2, #1
 800e29e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800e2a0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800e2a2:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800e2a6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800e2aa:	f7ff ff9d 	bl	800e1e8 <HAL_LTDC_LineEventCallback>
 800e2ae:	e7ae      	b.n	800e20e <HAL_LTDC_IRQHandler+0x22>

0800e2b0 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800e2b0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	f000 80c6 	beq.w	800e446 <HAL_LTDC_ConfigLayer+0x196>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e2ba:	2302      	movs	r3, #2
{
 800e2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e2c0:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e2c4:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e2c8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
 800e2cc:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e2ce:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e2d2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e2d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e2d8:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e2da:	f102 0684 	add.w	r6, r2, #132	; 0x84
 800e2de:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e2e0:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
 800e2e4:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e2e6:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e2ea:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800e2ee:	f8df a164 	ldr.w	sl, [pc, #356]	; 800e454 <HAL_LTDC_ConfigLayer+0x1a4>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e2f2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800e2f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800e2fa:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e2fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e2fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e304:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e306:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e30a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e30c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e310:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e312:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e314:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e318:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e31a:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e31c:	f8cc 3004 	str.w	r3, [ip, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e320:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e324:	1c51      	adds	r1, r2, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800e326:	f8d5 e018 	ldr.w	lr, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e32a:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800e32e:	440b      	add	r3, r1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800e330:	68e9      	ldr	r1, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e332:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 800e336:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800e33a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800e33e:	f8dc 0008 	ldr.w	r0, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800e342:	f3c3 030a 	ubfx	r3, r3, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800e346:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800e34a:	4419      	add	r1, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800e34c:	68ab      	ldr	r3, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800e34e:	f8cc 0008 	str.w	r0, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800e352:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800e356:	3301      	adds	r3, #1
 800e358:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800e35c:	4403      	add	r3, r0
 800e35e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800e362:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800e364:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800e368:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e36c:	f023 0307 	bic.w	r3, r3, #7
 800e370:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800e374:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800e378:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800e37c:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800e37e:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800e382:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800e386:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800e38a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800e38e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 800e392:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800e396:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e39a:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800e39e:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800e3a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e3a6:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800e3aa:	696b      	ldr	r3, [r5, #20]
 800e3ac:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800e3b0:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800e3b4:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800e3b6:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800e3ba:	6a28      	ldr	r0, [r5, #32]
 800e3bc:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800e3be:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800e3c2:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800e3c6:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800e3d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e3d2:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800e3d6:	bb59      	cbnz	r1, 800e430 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
 800e3d8:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800e3da:	1abf      	subs	r7, r7, r2
 800e3dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e3de:	fb03 f707 	mul.w	r7, r3, r7
 800e3e2:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800e3e6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800e3e8:	3707      	adds	r7, #7
 800e3ea:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800e3ee:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 800e3f2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800e3f6:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800e3fa:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800e3fe:	4b14      	ldr	r3, [pc, #80]	; (800e450 <HAL_LTDC_ConfigLayer+0x1a0>)
 800e400:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 800e404:	400b      	ands	r3, r1
 800e406:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800e40a:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800e40e:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800e410:	f859 3006 	ldr.w	r3, [r9, r6]
 800e414:	4313      	orrs	r3, r2
 800e416:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 800e41a:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800e41c:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
 800e420:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 800e422:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800e426:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
 800e42a:	b003      	add	sp, #12
 800e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800e430:	2901      	cmp	r1, #1
 800e432:	d00a      	beq.n	800e44a <HAL_LTDC_ConfigLayer+0x19a>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800e434:	1e8b      	subs	r3, r1, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800e436:	2b02      	cmp	r3, #2
 800e438:	d903      	bls.n	800e442 <HAL_LTDC_ConfigLayer+0x192>
 800e43a:	2907      	cmp	r1, #7
 800e43c:	d001      	beq.n	800e442 <HAL_LTDC_ConfigLayer+0x192>
    tmp = 1U;
 800e43e:	2301      	movs	r3, #1
 800e440:	e7cb      	b.n	800e3da <HAL_LTDC_ConfigLayer+0x12a>
    tmp = 2U;
 800e442:	2302      	movs	r3, #2
 800e444:	e7c9      	b.n	800e3da <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
 800e446:	2002      	movs	r0, #2
}
 800e448:	4770      	bx	lr
    tmp = 3U;
 800e44a:	2303      	movs	r3, #3
 800e44c:	e7c5      	b.n	800e3da <HAL_LTDC_ConfigLayer+0x12a>
 800e44e:	bf00      	nop
 800e450:	fffff800 	.word	0xfffff800
 800e454:	fffff8f8 	.word	0xfffff8f8

0800e458 <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 800e458:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 800e45c:	2a01      	cmp	r2, #1
 800e45e:	d015      	beq.n	800e48c <HAL_LTDC_Reload+0x34>
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800e460:	6802      	ldr	r2, [r0, #0]
 800e462:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e464:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
 800e466:	f04f 0c00 	mov.w	ip, #0
{
 800e46a:	b500      	push	{lr}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e46c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 800e470:	f04f 0e01 	mov.w	lr, #1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800e474:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800e476:	f040 0008 	orr.w	r0, r0, #8
 800e47a:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 800e47c:	4660      	mov	r0, ip
  hltdc->Instance->SRCR = ReloadType;
 800e47e:	6251      	str	r1, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800e480:	f883 e0a1 	strb.w	lr, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800e484:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
 800e488:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hltdc);
 800e48c:	2002      	movs	r0, #2
}
 800e48e:	4770      	bx	lr

0800e490 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e494:	f7fc fb52 	bl	800ab3c <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800e498:	2c00      	cmp	r4, #0
 800e49a:	d05a      	beq.n	800e552 <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800e49c:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800e49e:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800e4a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800e4a8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800e4ac:	68da      	ldr	r2, [r3, #12]
 800e4ae:	f022 0201 	bic.w	r2, r2, #1
 800e4b2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e4b4:	e005      	b.n	800e4c2 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800e4b6:	f7fc fb41 	bl	800ab3c <HAL_GetTick>
 800e4ba:	1b43      	subs	r3, r0, r5
 800e4bc:	2b05      	cmp	r3, #5
 800e4be:	d841      	bhi.n	800e544 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e4c0:	6823      	ldr	r3, [r4, #0]
 800e4c2:	68da      	ldr	r2, [r3, #12]
 800e4c4:	07d2      	lsls	r2, r2, #31
 800e4c6:	d4f6      	bmi.n	800e4b6 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e4c8:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 800e4cc:	69e0      	ldr	r0, [r4, #28]
 800e4ce:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800e4d0:	68e1      	ldr	r1, [r4, #12]
 800e4d2:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e4d4:	4302      	orrs	r2, r0
 800e4d6:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800e4d8:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e4da:	4302      	orrs	r2, r0
 800e4dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e4de:	4302      	orrs	r2, r0
 800e4e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e4e2:	4302      	orrs	r2, r0
 800e4e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e4e6:	4302      	orrs	r2, r0
 800e4e8:	68a0      	ldr	r0, [r4, #8]
 800e4ea:	4302      	orrs	r2, r0
 800e4ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e4ee:	3801      	subs	r0, #1
 800e4f0:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e4f4:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800e4f6:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e4f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e4fc:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e4fe:	d103      	bne.n	800e508 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800e500:	691a      	ldr	r2, [r3, #16]
 800e502:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800e506:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800e508:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800e50a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e50c:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 800e50e:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800e510:	db30      	blt.n	800e574 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800e512:	b292      	uxth	r2, r2
 800e514:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800e516:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e518:	2a00      	cmp	r2, #0
 800e51a:	db1c      	blt.n	800e556 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e51c:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800e51e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e522:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800e526:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800e528:	d021      	beq.n	800e56e <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800e52a:	b2c0      	uxtb	r0, r0
 800e52c:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800e52e:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800e530:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800e532:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800e534:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e536:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800e538:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800e53a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800e53e:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800e542:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800e544:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800e546:	2303      	movs	r3, #3
      return HAL_ERROR;
 800e548:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800e54a:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800e54c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e550:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e552:	2001      	movs	r0, #1
}
 800e554:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800e556:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800e558:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800e55a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800e55e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 800e562:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e564:	6a19      	ldr	r1, [r3, #32]
 800e566:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800e56a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800e56c:	d1dd      	bne.n	800e52a <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800e56e:	2200      	movs	r2, #0
 800e570:	629a      	str	r2, [r3, #40]	; 0x28
 800e572:	e7dc      	b.n	800e52e <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800e574:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800e576:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800e578:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800e57c:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800e57e:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800e580:	621a      	str	r2, [r3, #32]
 800e582:	e7c8      	b.n	800e516 <HAL_MDMA_Init+0x86>

0800e584 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 800e584:	2800      	cmp	r0, #0
 800e586:	d06e      	beq.n	800e666 <HAL_MDMA_Start_IT+0xe2>
 800e588:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
 800e58a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800e58e:	2801      	cmp	r0, #1
 800e590:	d071      	beq.n	800e676 <HAL_MDMA_Start_IT+0xf2>
 800e592:	2001      	movs	r0, #1
 800e594:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800e598:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
 800e59c:	2801      	cmp	r0, #1
 800e59e:	d004      	beq.n	800e5aa <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
 800e5a0:	2300      	movs	r3, #0
    return HAL_BUSY;
 800e5a2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
 800e5a4:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
 800e5a8:	4770      	bx	lr
{
 800e5aa:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800e5ac:	f3c3 0010 	ubfx	r0, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800e5b0:	2402      	movs	r4, #2
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e5b2:	2300      	movs	r3, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800e5b4:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800e5b6:	f88c 403d 	strb.w	r4, [ip, #61]	; 0x3d
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800e5ba:	f1a4 1402 	sub.w	r4, r4, #131074	; 0x20002
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e5be:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800e5c2:	f105 3eff 	add.w	lr, r5, #4294967295
    __HAL_MDMA_DISABLE(hmdma);
 800e5c6:	f8dc 3000 	ldr.w	r3, [ip]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800e5ca:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
    __HAL_MDMA_DISABLE(hmdma);
 800e5ce:	68dd      	ldr	r5, [r3, #12]
 800e5d0:	f025 0501 	bic.w	r5, r5, #1
 800e5d4:	60dd      	str	r5, [r3, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800e5d6:	695d      	ldr	r5, [r3, #20]
 800e5d8:	ea04 0405 	and.w	r4, r4, r5
 800e5dc:	ea44 0400 	orr.w	r4, r4, r0
 800e5e0:	615c      	str	r4, [r3, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800e5e2:	6958      	ldr	r0, [r3, #20]
 800e5e4:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800e5e8:	ea40 500e 	orr.w	r0, r0, lr, lsl #20
 800e5ec:	6158      	str	r0, [r3, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800e5ee:	f04f 001f 	mov.w	r0, #31
 800e5f2:	6058      	str	r0, [r3, #4]
  hmdma->Instance->CDAR = DstAddress;
 800e5f4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800e5f6:	6199      	str	r1, [r3, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800e5f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800e5fa:	bf0c      	ite	eq
 800e5fc:	f441 3180 	orreq.w	r1, r1, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800e600:	f421 3180 	bicne.w	r1, r1, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800e604:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800e608:	6299      	str	r1, [r3, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800e60a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if(hmdma->XferBlockCpltCallback != NULL)
 800e60c:	f8dc 104c 	ldr.w	r1, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800e610:	bf0c      	ite	eq
 800e612:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800e616:	f422 3200 	bicne.w	r2, r2, #131072	; 0x20000
 800e61a:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800e61c:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800e620:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800e622:	68da      	ldr	r2, [r3, #12]
 800e624:	f042 0206 	orr.w	r2, r2, #6
 800e628:	60da      	str	r2, [r3, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800e62a:	b119      	cbz	r1, 800e634 <HAL_MDMA_Start_IT+0xb0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800e62c:	68da      	ldr	r2, [r3, #12]
 800e62e:	f042 0210 	orr.w	r2, r2, #16
 800e632:	60da      	str	r2, [r3, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800e634:	f8dc 2050 	ldr.w	r2, [ip, #80]	; 0x50
 800e638:	b11a      	cbz	r2, 800e642 <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800e63a:	68da      	ldr	r2, [r3, #12]
 800e63c:	f042 0208 	orr.w	r2, r2, #8
 800e640:	60da      	str	r2, [r3, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800e642:	f8dc 2048 	ldr.w	r2, [ip, #72]	; 0x48
 800e646:	b11a      	cbz	r2, 800e650 <HAL_MDMA_Start_IT+0xcc>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800e648:	68da      	ldr	r2, [r3, #12]
 800e64a:	f042 0220 	orr.w	r2, r2, #32
 800e64e:	60da      	str	r2, [r3, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800e650:	68da      	ldr	r2, [r3, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e652:	f8dc 1004 	ldr.w	r1, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
 800e656:	f042 0201 	orr.w	r2, r2, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e65a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 800e65e:	60da      	str	r2, [r3, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e660:	d003      	beq.n	800e66a <HAL_MDMA_Start_IT+0xe6>
  return HAL_OK;
 800e662:	2000      	movs	r0, #0
}
 800e664:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800e666:	2001      	movs	r0, #1
 800e668:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800e66a:	68da      	ldr	r2, [r3, #12]
  return HAL_OK;
 800e66c:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800e66e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e672:	60da      	str	r2, [r3, #12]
}
 800e674:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
 800e676:	2002      	movs	r0, #2
}
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop

0800e67c <HAL_MDMA_IRQHandler>:
{
 800e67c:	b530      	push	{r4, r5, lr}
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800e67e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
{
 800e682:	4604      	mov	r4, r0
 800e684:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 800e686:	2500      	movs	r5, #0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800e688:	4a58      	ldr	r2, [pc, #352]	; (800e7ec <HAL_MDMA_IRQHandler+0x170>)
 800e68a:	2101      	movs	r1, #1
  __IO uint32_t count = 0;
 800e68c:	9501      	str	r5, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800e68e:	6818      	ldr	r0, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	441a      	add	r2, r3
 800e694:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800e698:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800e69c:	4202      	tst	r2, r0
 800e69e:	f000 80a2 	beq.w	800e7e6 <HAL_MDMA_IRQHandler+0x16a>
  uint32_t timeout = SystemCoreClock / 9600U;
 800e6a2:	4953      	ldr	r1, [pc, #332]	; (800e7f0 <HAL_MDMA_IRQHandler+0x174>)
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800e6a4:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e6a6:	680d      	ldr	r5, [r1, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800e6a8:	07d1      	lsls	r1, r2, #31
 800e6aa:	d529      	bpl.n	800e700 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800e6ac:	68da      	ldr	r2, [r3, #12]
 800e6ae:	0792      	lsls	r2, r2, #30
 800e6b0:	d526      	bpl.n	800e700 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800e6b2:	68da      	ldr	r2, [r3, #12]
 800e6b4:	f022 0202 	bic.w	r2, r2, #2
 800e6b8:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800e6ba:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800e6bc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800e6be:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800e6c0:	bf54      	ite	pl
 800e6c2:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800e6c6:	f041 0102 	orrmi.w	r1, r1, #2
 800e6ca:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800e6cc:	0591      	lsls	r1, r2, #22
 800e6ce:	d503      	bpl.n	800e6d8 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800e6d0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800e6d2:	f041 0104 	orr.w	r1, r1, #4
 800e6d6:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800e6d8:	05d0      	lsls	r0, r2, #23
 800e6da:	d503      	bpl.n	800e6e4 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800e6dc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800e6de:	f041 0108 	orr.w	r1, r1, #8
 800e6e2:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800e6e4:	0551      	lsls	r1, r2, #21
 800e6e6:	d503      	bpl.n	800e6f0 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800e6e8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800e6ea:	f041 0110 	orr.w	r1, r1, #16
 800e6ee:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800e6f0:	0510      	lsls	r0, r2, #20
 800e6f2:	d503      	bpl.n	800e6fc <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800e6f4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800e6f6:	f042 0220 	orr.w	r2, r2, #32
 800e6fa:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	06d1      	lsls	r1, r2, #27
 800e704:	d509      	bpl.n	800e71a <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800e706:	68da      	ldr	r2, [r3, #12]
 800e708:	0692      	lsls	r2, r2, #26
 800e70a:	d506      	bpl.n	800e71a <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800e70c:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 800e70e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800e710:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800e712:	b112      	cbz	r2, 800e71a <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 800e714:	4620      	mov	r0, r4
 800e716:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	0710      	lsls	r0, r2, #28
 800e71e:	d509      	bpl.n	800e734 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800e720:	68da      	ldr	r2, [r3, #12]
 800e722:	06d1      	lsls	r1, r2, #27
 800e724:	d506      	bpl.n	800e734 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800e726:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 800e728:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800e72a:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800e72c:	b112      	cbz	r2, 800e734 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 800e72e:	4620      	mov	r0, r4
 800e730:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	0752      	lsls	r2, r2, #29
 800e738:	d509      	bpl.n	800e74e <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800e73a:	68da      	ldr	r2, [r3, #12]
 800e73c:	0710      	lsls	r0, r2, #28
 800e73e:	d506      	bpl.n	800e74e <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800e740:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800e742:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800e744:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800e746:	b112      	cbz	r2, 800e74e <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800e748:	4620      	mov	r0, r4
 800e74a:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800e74c:	6823      	ldr	r3, [r4, #0]
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	0791      	lsls	r1, r2, #30
 800e752:	d516      	bpl.n	800e782 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800e754:	68da      	ldr	r2, [r3, #12]
 800e756:	0752      	lsls	r2, r2, #29
 800e758:	d513      	bpl.n	800e782 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800e75a:	68da      	ldr	r2, [r3, #12]
 800e75c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800e760:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800e762:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800e766:	2a04      	cmp	r2, #4
 800e768:	d034      	beq.n	800e7d4 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800e76a:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 800e76c:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800e76e:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800e770:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 800e772:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
 800e774:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800e778:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800e77c:	b10b      	cbz	r3, 800e782 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 800e77e:	4620      	mov	r0, r4
 800e780:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800e782:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e784:	2b00      	cmp	r3, #0
 800e786:	d02e      	beq.n	800e7e6 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 800e788:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800e78a:	2304      	movs	r3, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 800e78c:	4a19      	ldr	r2, [pc, #100]	; (800e7f4 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800e78e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800e792:	68cb      	ldr	r3, [r1, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e794:	fba2 0205 	umull	r0, r2, r2, r5
    __HAL_MDMA_DISABLE(hmdma);
 800e798:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800e79c:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 800e79e:	60cb      	str	r3, [r1, #12]
 800e7a0:	e002      	b.n	800e7a8 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800e7a2:	68cb      	ldr	r3, [r1, #12]
 800e7a4:	07d8      	lsls	r0, r3, #31
 800e7a6:	d504      	bpl.n	800e7b2 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 800e7a8:	9b01      	ldr	r3, [sp, #4]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	9301      	str	r3, [sp, #4]
 800e7b0:	d9f7      	bls.n	800e7a2 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e7b8:	68cb      	ldr	r3, [r1, #12]
 800e7ba:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800e7bc:	bf4c      	ite	mi
 800e7be:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800e7c0:	2301      	movpl	r3, #1
 800e7c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800e7c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e7c8:	b16b      	cbz	r3, 800e7e6 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 800e7ca:	4620      	mov	r0, r4
}
 800e7cc:	b003      	add	sp, #12
 800e7ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800e7d2:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 800e7d4:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 800e7d6:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 800e7d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
 800e7da:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800e7de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1f1      	bne.n	800e7ca <HAL_MDMA_IRQHandler+0x14e>
}
 800e7e6:	b003      	add	sp, #12
 800e7e8:	bd30      	pop	{r4, r5, pc}
 800e7ea:	bf00      	nop
 800e7ec:	adffffc0 	.word	0xadffffc0
 800e7f0:	20004728 	.word	0x20004728
 800e7f4:	1b4e81b5 	.word	0x1b4e81b5

0800e7f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e7f8:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e7fa:	4c1d      	ldr	r4, [pc, #116]	; (800e870 <HAL_PWREx_ConfigSupply+0x78>)
{
 800e7fc:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e7fe:	68e3      	ldr	r3, [r4, #12]
 800e800:	f003 0307 	and.w	r3, r3, #7
 800e804:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e806:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e808:	d005      	beq.n	800e816 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e80a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e80e:	1a18      	subs	r0, r3, r0
 800e810:	bf18      	it	ne
 800e812:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800e814:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e816:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800e81a:	4303      	orrs	r3, r0
 800e81c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800e81e:	f7fc f98d 	bl	800ab3c <HAL_GetTick>
 800e822:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e824:	e005      	b.n	800e832 <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e826:	f7fc f989 	bl	800ab3c <HAL_GetTick>
 800e82a:	1b83      	subs	r3, r0, r6
 800e82c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e830:	d81b      	bhi.n	800e86a <HAL_PWREx_ConfigSupply+0x72>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e832:	6863      	ldr	r3, [r4, #4]
 800e834:	049a      	lsls	r2, r3, #18
 800e836:	d5f6      	bpl.n	800e826 <HAL_PWREx_ConfigSupply+0x2e>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800e838:	f1a5 031d 	sub.w	r3, r5, #29
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d905      	bls.n	800e84c <HAL_PWREx_ConfigSupply+0x54>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800e840:	f1a5 002d 	sub.w	r0, r5, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800e844:	2801      	cmp	r0, #1
 800e846:	d901      	bls.n	800e84c <HAL_PWREx_ConfigSupply+0x54>
  return HAL_OK;
 800e848:	2000      	movs	r0, #0
}
 800e84a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800e84c:	f7fc f976 	bl	800ab3c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e850:	4d07      	ldr	r5, [pc, #28]	; (800e870 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 800e852:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e854:	e005      	b.n	800e862 <HAL_PWREx_ConfigSupply+0x6a>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e856:	f7fc f971 	bl	800ab3c <HAL_GetTick>
 800e85a:	1b00      	subs	r0, r0, r4
 800e85c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e860:	d803      	bhi.n	800e86a <HAL_PWREx_ConfigSupply+0x72>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e862:	68eb      	ldr	r3, [r5, #12]
 800e864:	03db      	lsls	r3, r3, #15
 800e866:	d5f6      	bpl.n	800e856 <HAL_PWREx_ConfigSupply+0x5e>
 800e868:	e7ee      	b.n	800e848 <HAL_PWREx_ConfigSupply+0x50>
      return HAL_ERROR;
 800e86a:	2001      	movs	r0, #1
}
 800e86c:	bd70      	pop	{r4, r5, r6, pc}
 800e86e:	bf00      	nop
 800e870:	58024800 	.word	0x58024800

0800e874 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e874:	4b3b      	ldr	r3, [pc, #236]	; (800e964 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800e876:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800e87a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e87c:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800e87e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e882:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800e884:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800e888:	d038      	beq.n	800e8fc <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e88a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e88e:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e892:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e896:	fb05 f101 	mul.w	r1, r5, r1
 800e89a:	2a01      	cmp	r2, #1
 800e89c:	ee07 1a90 	vmov	s15, r1
 800e8a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800e8a4:	d002      	beq.n	800e8ac <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800e8a6:	2a02      	cmp	r2, #2
 800e8a8:	d04e      	beq.n	800e948 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800e8aa:	b34a      	cbz	r2, 800e900 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e8ac:	ee07 0a90 	vmov	s15, r0
 800e8b0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800e968 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800e8b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ba:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800e8be:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800e96c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800e8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8c6:	ee06 3a90 	vmov	s13, r3
 800e8ca:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e8ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e8d2:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e8d6:	eee7 6a25 	vfma.f32	s13, s14, s11
 800e8da:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800e8de:	4b21      	ldr	r3, [pc, #132]	; (800e964 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800e8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8e2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800e8e6:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800e8e8:	ee07 3a90 	vmov	s15, r3
 800e8ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e8f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e8f8:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800e8fc:	bc30      	pop	{r4, r5}
 800e8fe:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	0692      	lsls	r2, r2, #26
 800e904:	d527      	bpl.n	800e956 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e906:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e908:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e90c:	4a18      	ldr	r2, [pc, #96]	; (800e970 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e90e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e914:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e91c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800e96c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800e920:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e924:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e926:	ee06 3a90 	vmov	s13, r3
 800e92a:	ee05 2a90 	vmov	s11, r2
 800e92e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e932:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800e936:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e93a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800e93e:	eee7 6a05 	vfma.f32	s13, s14, s10
 800e942:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e946:	e7ca      	b.n	800e8de <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e948:	ee07 0a90 	vmov	s15, r0
 800e94c:	eddf 6a09 	vldr	s13, [pc, #36]	; 800e974 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800e950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e954:	e7b0      	b.n	800e8b8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e956:	ee07 0a90 	vmov	s15, r0
 800e95a:	eddf 6a07 	vldr	s13, [pc, #28]	; 800e978 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800e95e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e962:	e7a9      	b.n	800e8b8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800e964:	58024400 	.word	0x58024400
 800e968:	4a742400 	.word	0x4a742400
 800e96c:	39000000 	.word	0x39000000
 800e970:	03d09000 	.word	0x03d09000
 800e974:	4bbebc20 	.word	0x4bbebc20
 800e978:	4c742400 	.word	0x4c742400

0800e97c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800e97c:	2800      	cmp	r0, #0
 800e97e:	f000 81eb 	beq.w	800ed58 <HAL_RCC_OscConfig+0x3dc>
{
 800e982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e984:	6803      	ldr	r3, [r0, #0]
 800e986:	4604      	mov	r4, r0
 800e988:	07d9      	lsls	r1, r3, #31
 800e98a:	d530      	bpl.n	800e9ee <HAL_RCC_OscConfig+0x72>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e98c:	49a0      	ldr	r1, [pc, #640]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
 800e98e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e990:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e992:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e996:	2a10      	cmp	r2, #16
 800e998:	f000 8127 	beq.w	800ebea <HAL_RCC_OscConfig+0x26e>
 800e99c:	2a18      	cmp	r2, #24
 800e99e:	f000 811f 	beq.w	800ebe0 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e9a2:	6863      	ldr	r3, [r4, #4]
 800e9a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9a8:	f000 8161 	beq.w	800ec6e <HAL_RCC_OscConfig+0x2f2>
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f000 8179 	beq.w	800eca4 <HAL_RCC_OscConfig+0x328>
 800e9b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e9b6:	4b96      	ldr	r3, [pc, #600]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	f000 826c 	beq.w	800ee96 <HAL_RCC_OscConfig+0x51a>
 800e9be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e9c2:	601a      	str	r2, [r3, #0]
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e9ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e9cc:	f7fc f8b6 	bl	800ab3c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e9d0:	4e8f      	ldr	r6, [pc, #572]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e9d2:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800e9d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e9d8:	e005      	b.n	800e9e6 <HAL_RCC_OscConfig+0x6a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e9da:	f7fc f8af 	bl	800ab3c <HAL_GetTick>
 800e9de:	1b40      	subs	r0, r0, r5
 800e9e0:	42b8      	cmp	r0, r7
 800e9e2:	f200 815d 	bhi.w	800eca0 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e9e6:	6833      	ldr	r3, [r6, #0]
 800e9e8:	039b      	lsls	r3, r3, #14
 800e9ea:	d5f6      	bpl.n	800e9da <HAL_RCC_OscConfig+0x5e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e9ec:	6823      	ldr	r3, [r4, #0]
 800e9ee:	0799      	lsls	r1, r3, #30
 800e9f0:	d521      	bpl.n	800ea36 <HAL_RCC_OscConfig+0xba>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e9f2:	4a87      	ldr	r2, [pc, #540]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
 800e9f4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e9f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e9f8:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800e9fc:	f040 80a4 	bne.w	800eb48 <HAL_RCC_OscConfig+0x1cc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ea00:	4b83      	ldr	r3, [pc, #524]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	075b      	lsls	r3, r3, #29
 800ea06:	d503      	bpl.n	800ea10 <HAL_RCC_OscConfig+0x94>
 800ea08:	68e3      	ldr	r3, [r4, #12]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f000 80e6 	beq.w	800ebdc <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea10:	f7fc f8ac 	bl	800ab6c <HAL_GetREVID>
 800ea14:	f241 0303 	movw	r3, #4099	; 0x1003
 800ea18:	4298      	cmp	r0, r3
 800ea1a:	f200 817e 	bhi.w	800ed1a <HAL_RCC_OscConfig+0x39e>
 800ea1e:	6922      	ldr	r2, [r4, #16]
 800ea20:	2a40      	cmp	r2, #64	; 0x40
 800ea22:	f000 8240 	beq.w	800eea6 <HAL_RCC_OscConfig+0x52a>
 800ea26:	497a      	ldr	r1, [pc, #488]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
 800ea28:	684b      	ldr	r3, [r1, #4]
 800ea2a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ea2e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ea32:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ea34:	6823      	ldr	r3, [r4, #0]
 800ea36:	06d9      	lsls	r1, r3, #27
 800ea38:	d453      	bmi.n	800eae2 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ea3a:	071d      	lsls	r5, r3, #28
 800ea3c:	d516      	bpl.n	800ea6c <HAL_RCC_OscConfig+0xf0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ea3e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800ea40:	4d73      	ldr	r5, [pc, #460]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f000 80ae 	beq.w	800eba4 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_LSI_ENABLE();
 800ea48:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ea4a:	f043 0301 	orr.w	r3, r3, #1
 800ea4e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ea50:	f7fc f874 	bl	800ab3c <HAL_GetTick>
 800ea54:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ea56:	e005      	b.n	800ea64 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ea58:	f7fc f870 	bl	800ab3c <HAL_GetTick>
 800ea5c:	1b80      	subs	r0, r0, r6
 800ea5e:	2802      	cmp	r0, #2
 800ea60:	f200 811e 	bhi.w	800eca0 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ea64:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ea66:	0798      	lsls	r0, r3, #30
 800ea68:	d5f6      	bpl.n	800ea58 <HAL_RCC_OscConfig+0xdc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	069a      	lsls	r2, r3, #26
 800ea6e:	d516      	bpl.n	800ea9e <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ea70:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800ea72:	4d67      	ldr	r5, [pc, #412]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 812d 	beq.w	800ecd4 <HAL_RCC_OscConfig+0x358>
      __HAL_RCC_HSI48_ENABLE();
 800ea7a:	682b      	ldr	r3, [r5, #0]
 800ea7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ea80:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ea82:	f7fc f85b 	bl	800ab3c <HAL_GetTick>
 800ea86:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ea88:	e005      	b.n	800ea96 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ea8a:	f7fc f857 	bl	800ab3c <HAL_GetTick>
 800ea8e:	1b80      	subs	r0, r0, r6
 800ea90:	2802      	cmp	r0, #2
 800ea92:	f200 8105 	bhi.w	800eca0 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ea96:	682b      	ldr	r3, [r5, #0]
 800ea98:	049f      	lsls	r7, r3, #18
 800ea9a:	d5f6      	bpl.n	800ea8a <HAL_RCC_OscConfig+0x10e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ea9c:	6823      	ldr	r3, [r4, #0]
 800ea9e:	0759      	lsls	r1, r3, #29
 800eaa0:	f100 80ad 	bmi.w	800ebfe <HAL_RCC_OscConfig+0x282>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800eaa4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eaa6:	b1d0      	cbz	r0, 800eade <HAL_RCC_OscConfig+0x162>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800eaa8:	4d59      	ldr	r5, [pc, #356]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
 800eaaa:	692b      	ldr	r3, [r5, #16]
 800eaac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eab0:	2b18      	cmp	r3, #24
 800eab2:	f000 81c2 	beq.w	800ee3a <HAL_RCC_OscConfig+0x4be>
        __HAL_RCC_PLL_DISABLE();
 800eab6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eab8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800eaba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eabe:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eac0:	f000 8156 	beq.w	800ed70 <HAL_RCC_OscConfig+0x3f4>
        tickstart = HAL_GetTick();
 800eac4:	f7fc f83a 	bl	800ab3c <HAL_GetTick>
 800eac8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eaca:	e005      	b.n	800ead8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eacc:	f7fc f836 	bl	800ab3c <HAL_GetTick>
 800ead0:	1b00      	subs	r0, r0, r4
 800ead2:	2802      	cmp	r0, #2
 800ead4:	f200 80e4 	bhi.w	800eca0 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ead8:	682b      	ldr	r3, [r5, #0]
 800eada:	019b      	lsls	r3, r3, #6
 800eadc:	d4f6      	bmi.n	800eacc <HAL_RCC_OscConfig+0x150>
  return HAL_OK;
 800eade:	2000      	movs	r0, #0
}
 800eae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eae2:	4a4b      	ldr	r2, [pc, #300]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
 800eae4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800eae6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800eaec:	2b08      	cmp	r3, #8
 800eaee:	d06e      	beq.n	800ebce <HAL_RCC_OscConfig+0x252>
 800eaf0:	2b18      	cmp	r3, #24
 800eaf2:	d068      	beq.n	800ebc6 <HAL_RCC_OscConfig+0x24a>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800eaf4:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800eaf6:	4d46      	ldr	r5, [pc, #280]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	f000 80fc 	beq.w	800ecf6 <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_CSI_ENABLE();
 800eafe:	682b      	ldr	r3, [r5, #0]
 800eb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800eb06:	f7fc f819 	bl	800ab3c <HAL_GetTick>
 800eb0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800eb0c:	e005      	b.n	800eb1a <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800eb0e:	f7fc f815 	bl	800ab3c <HAL_GetTick>
 800eb12:	1b80      	subs	r0, r0, r6
 800eb14:	2802      	cmp	r0, #2
 800eb16:	f200 80c3 	bhi.w	800eca0 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800eb1a:	682b      	ldr	r3, [r5, #0]
 800eb1c:	05db      	lsls	r3, r3, #23
 800eb1e:	d5f6      	bpl.n	800eb0e <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800eb20:	f7fc f824 	bl	800ab6c <HAL_GetREVID>
 800eb24:	f241 0303 	movw	r3, #4099	; 0x1003
 800eb28:	4298      	cmp	r0, r3
 800eb2a:	f200 81e5 	bhi.w	800eef8 <HAL_RCC_OscConfig+0x57c>
 800eb2e:	6a22      	ldr	r2, [r4, #32]
 800eb30:	686b      	ldr	r3, [r5, #4]
 800eb32:	2a20      	cmp	r2, #32
 800eb34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800eb38:	bf0c      	ite	eq
 800eb3a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800eb3e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800eb42:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eb44:	6823      	ldr	r3, [r4, #0]
 800eb46:	e778      	b.n	800ea3a <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800eb48:	2b18      	cmp	r3, #24
 800eb4a:	f000 8101 	beq.w	800ed50 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800eb4e:	4d30      	ldr	r5, [pc, #192]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800eb50:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800eb52:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800eb54:	2a00      	cmp	r2, #0
 800eb56:	f000 80ea 	beq.w	800ed2e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800eb5a:	f023 0319 	bic.w	r3, r3, #25
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800eb62:	f7fb ffeb 	bl	800ab3c <HAL_GetTick>
 800eb66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800eb68:	e005      	b.n	800eb76 <HAL_RCC_OscConfig+0x1fa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eb6a:	f7fb ffe7 	bl	800ab3c <HAL_GetTick>
 800eb6e:	1b80      	subs	r0, r0, r6
 800eb70:	2802      	cmp	r0, #2
 800eb72:	f200 8095 	bhi.w	800eca0 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800eb76:	682b      	ldr	r3, [r5, #0]
 800eb78:	075f      	lsls	r7, r3, #29
 800eb7a:	d5f6      	bpl.n	800eb6a <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb7c:	f7fb fff6 	bl	800ab6c <HAL_GetREVID>
 800eb80:	f241 0303 	movw	r3, #4099	; 0x1003
 800eb84:	4298      	cmp	r0, r3
 800eb86:	f200 81c0 	bhi.w	800ef0a <HAL_RCC_OscConfig+0x58e>
 800eb8a:	6922      	ldr	r2, [r4, #16]
 800eb8c:	686b      	ldr	r3, [r5, #4]
 800eb8e:	2a40      	cmp	r2, #64	; 0x40
 800eb90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800eb94:	bf0c      	ite	eq
 800eb96:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800eb9a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800eb9e:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800eba0:	6823      	ldr	r3, [r4, #0]
 800eba2:	e748      	b.n	800ea36 <HAL_RCC_OscConfig+0xba>
      __HAL_RCC_LSI_DISABLE();
 800eba4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800eba6:	f023 0301 	bic.w	r3, r3, #1
 800ebaa:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ebac:	f7fb ffc6 	bl	800ab3c <HAL_GetTick>
 800ebb0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ebb2:	e004      	b.n	800ebbe <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ebb4:	f7fb ffc2 	bl	800ab3c <HAL_GetTick>
 800ebb8:	1b80      	subs	r0, r0, r6
 800ebba:	2802      	cmp	r0, #2
 800ebbc:	d870      	bhi.n	800eca0 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ebbe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ebc0:	0799      	lsls	r1, r3, #30
 800ebc2:	d4f7      	bmi.n	800ebb4 <HAL_RCC_OscConfig+0x238>
 800ebc4:	e751      	b.n	800ea6a <HAL_RCC_OscConfig+0xee>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ebc6:	f002 0203 	and.w	r2, r2, #3
 800ebca:	2a01      	cmp	r2, #1
 800ebcc:	d192      	bne.n	800eaf4 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ebce:	4b10      	ldr	r3, [pc, #64]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	05da      	lsls	r2, r3, #23
 800ebd4:	d551      	bpl.n	800ec7a <HAL_RCC_OscConfig+0x2fe>
 800ebd6:	69e3      	ldr	r3, [r4, #28]
 800ebd8:	2b80      	cmp	r3, #128	; 0x80
 800ebda:	d04e      	beq.n	800ec7a <HAL_RCC_OscConfig+0x2fe>
        return HAL_ERROR;
 800ebdc:	2001      	movs	r0, #1
}
 800ebde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ebe0:	f001 0103 	and.w	r1, r1, #3
 800ebe4:	2902      	cmp	r1, #2
 800ebe6:	f47f aedc 	bne.w	800e9a2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ebea:	4a09      	ldr	r2, [pc, #36]	; (800ec10 <HAL_RCC_OscConfig+0x294>)
 800ebec:	6812      	ldr	r2, [r2, #0]
 800ebee:	0392      	lsls	r2, r2, #14
 800ebf0:	f57f aefd 	bpl.w	800e9ee <HAL_RCC_OscConfig+0x72>
 800ebf4:	6862      	ldr	r2, [r4, #4]
 800ebf6:	2a00      	cmp	r2, #0
 800ebf8:	f47f aef9 	bne.w	800e9ee <HAL_RCC_OscConfig+0x72>
 800ebfc:	e7ee      	b.n	800ebdc <HAL_RCC_OscConfig+0x260>
    PWR->CR1 |= PWR_CR1_DBP;
 800ebfe:	4d05      	ldr	r5, [pc, #20]	; (800ec14 <HAL_RCC_OscConfig+0x298>)
 800ec00:	682b      	ldr	r3, [r5, #0]
 800ec02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec06:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800ec08:	f7fb ff98 	bl	800ab3c <HAL_GetTick>
 800ec0c:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ec0e:	e008      	b.n	800ec22 <HAL_RCC_OscConfig+0x2a6>
 800ec10:	58024400 	.word	0x58024400
 800ec14:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ec18:	f7fb ff90 	bl	800ab3c <HAL_GetTick>
 800ec1c:	1b80      	subs	r0, r0, r6
 800ec1e:	2864      	cmp	r0, #100	; 0x64
 800ec20:	d83e      	bhi.n	800eca0 <HAL_RCC_OscConfig+0x324>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ec22:	682b      	ldr	r3, [r5, #0]
 800ec24:	05da      	lsls	r2, r3, #23
 800ec26:	d5f7      	bpl.n	800ec18 <HAL_RCC_OscConfig+0x29c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ec28:	68a3      	ldr	r3, [r4, #8]
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	f000 8176 	beq.w	800ef1c <HAL_RCC_OscConfig+0x5a0>
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f000 8141 	beq.w	800eeb8 <HAL_RCC_OscConfig+0x53c>
 800ec36:	2b05      	cmp	r3, #5
 800ec38:	4ba7      	ldr	r3, [pc, #668]	; (800eed8 <HAL_RCC_OscConfig+0x55c>)
 800ec3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ec3c:	f000 817d 	beq.w	800ef3a <HAL_RCC_OscConfig+0x5be>
 800ec40:	f022 0201 	bic.w	r2, r2, #1
 800ec44:	671a      	str	r2, [r3, #112]	; 0x70
 800ec46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ec48:	f022 0204 	bic.w	r2, r2, #4
 800ec4c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800ec4e:	f7fb ff75 	bl	800ab3c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec52:	4ea1      	ldr	r6, [pc, #644]	; (800eed8 <HAL_RCC_OscConfig+0x55c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec54:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800ec58:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec5a:	e004      	b.n	800ec66 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec5c:	f7fb ff6e 	bl	800ab3c <HAL_GetTick>
 800ec60:	1b40      	subs	r0, r0, r5
 800ec62:	42b8      	cmp	r0, r7
 800ec64:	d81c      	bhi.n	800eca0 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec66:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800ec68:	079b      	lsls	r3, r3, #30
 800ec6a:	d5f7      	bpl.n	800ec5c <HAL_RCC_OscConfig+0x2e0>
 800ec6c:	e71a      	b.n	800eaa4 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ec6e:	4a9a      	ldr	r2, [pc, #616]	; (800eed8 <HAL_RCC_OscConfig+0x55c>)
 800ec70:	6813      	ldr	r3, [r2, #0]
 800ec72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec76:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ec78:	e6a8      	b.n	800e9cc <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ec7a:	f7fb ff77 	bl	800ab6c <HAL_GetREVID>
 800ec7e:	f241 0303 	movw	r3, #4099	; 0x1003
 800ec82:	4298      	cmp	r0, r3
 800ec84:	d86a      	bhi.n	800ed5c <HAL_RCC_OscConfig+0x3e0>
 800ec86:	6a22      	ldr	r2, [r4, #32]
 800ec88:	2a20      	cmp	r2, #32
 800ec8a:	f000 814d 	beq.w	800ef28 <HAL_RCC_OscConfig+0x5ac>
 800ec8e:	4992      	ldr	r1, [pc, #584]	; (800eed8 <HAL_RCC_OscConfig+0x55c>)
 800ec90:	684b      	ldr	r3, [r1, #4]
 800ec92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ec96:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800ec9a:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ec9c:	6823      	ldr	r3, [r4, #0]
 800ec9e:	e6cc      	b.n	800ea3a <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 800eca0:	2003      	movs	r0, #3
}
 800eca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eca4:	4d8c      	ldr	r5, [pc, #560]	; (800eed8 <HAL_RCC_OscConfig+0x55c>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eca6:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ecaa:	682b      	ldr	r3, [r5, #0]
 800ecac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ecb0:	602b      	str	r3, [r5, #0]
 800ecb2:	682b      	ldr	r3, [r5, #0]
 800ecb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ecb8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ecba:	f7fb ff3f 	bl	800ab3c <HAL_GetTick>
 800ecbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ecc0:	e004      	b.n	800eccc <HAL_RCC_OscConfig+0x350>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ecc2:	f7fb ff3b 	bl	800ab3c <HAL_GetTick>
 800ecc6:	1b80      	subs	r0, r0, r6
 800ecc8:	42b8      	cmp	r0, r7
 800ecca:	d8e9      	bhi.n	800eca0 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800eccc:	682b      	ldr	r3, [r5, #0]
 800ecce:	0398      	lsls	r0, r3, #14
 800ecd0:	d4f7      	bmi.n	800ecc2 <HAL_RCC_OscConfig+0x346>
 800ecd2:	e68b      	b.n	800e9ec <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSI48_DISABLE();
 800ecd4:	682b      	ldr	r3, [r5, #0]
 800ecd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecda:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ecdc:	f7fb ff2e 	bl	800ab3c <HAL_GetTick>
 800ece0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ece2:	e004      	b.n	800ecee <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ece4:	f7fb ff2a 	bl	800ab3c <HAL_GetTick>
 800ece8:	1b80      	subs	r0, r0, r6
 800ecea:	2802      	cmp	r0, #2
 800ecec:	d8d8      	bhi.n	800eca0 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ecee:	682b      	ldr	r3, [r5, #0]
 800ecf0:	0498      	lsls	r0, r3, #18
 800ecf2:	d4f7      	bmi.n	800ece4 <HAL_RCC_OscConfig+0x368>
 800ecf4:	e6d2      	b.n	800ea9c <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 800ecf6:	682b      	ldr	r3, [r5, #0]
 800ecf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ecfe:	f7fb ff1d 	bl	800ab3c <HAL_GetTick>
 800ed02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ed04:	e004      	b.n	800ed10 <HAL_RCC_OscConfig+0x394>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ed06:	f7fb ff19 	bl	800ab3c <HAL_GetTick>
 800ed0a:	1b80      	subs	r0, r0, r6
 800ed0c:	2802      	cmp	r0, #2
 800ed0e:	d8c7      	bhi.n	800eca0 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ed10:	682b      	ldr	r3, [r5, #0]
 800ed12:	05df      	lsls	r7, r3, #23
 800ed14:	d4f7      	bmi.n	800ed06 <HAL_RCC_OscConfig+0x38a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ed16:	6823      	ldr	r3, [r4, #0]
 800ed18:	e68f      	b.n	800ea3a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed1a:	4a6f      	ldr	r2, [pc, #444]	; (800eed8 <HAL_RCC_OscConfig+0x55c>)
 800ed1c:	6921      	ldr	r1, [r4, #16]
 800ed1e:	6853      	ldr	r3, [r2, #4]
 800ed20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ed24:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ed28:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ed2a:	6823      	ldr	r3, [r4, #0]
 800ed2c:	e683      	b.n	800ea36 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_DISABLE();
 800ed2e:	f023 0301 	bic.w	r3, r3, #1
 800ed32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ed34:	f7fb ff02 	bl	800ab3c <HAL_GetTick>
 800ed38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ed3a:	e004      	b.n	800ed46 <HAL_RCC_OscConfig+0x3ca>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ed3c:	f7fb fefe 	bl	800ab3c <HAL_GetTick>
 800ed40:	1b80      	subs	r0, r0, r6
 800ed42:	2802      	cmp	r0, #2
 800ed44:	d8ac      	bhi.n	800eca0 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ed46:	682b      	ldr	r3, [r5, #0]
 800ed48:	0758      	lsls	r0, r3, #29
 800ed4a:	d4f7      	bmi.n	800ed3c <HAL_RCC_OscConfig+0x3c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ed4c:	6823      	ldr	r3, [r4, #0]
 800ed4e:	e672      	b.n	800ea36 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ed50:	0792      	lsls	r2, r2, #30
 800ed52:	f47f aefc 	bne.w	800eb4e <HAL_RCC_OscConfig+0x1d2>
 800ed56:	e653      	b.n	800ea00 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 800ed58:	2001      	movs	r0, #1
}
 800ed5a:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ed5c:	4a5e      	ldr	r2, [pc, #376]	; (800eed8 <HAL_RCC_OscConfig+0x55c>)
 800ed5e:	6a21      	ldr	r1, [r4, #32]
 800ed60:	68d3      	ldr	r3, [r2, #12]
 800ed62:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800ed66:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ed6a:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ed6c:	6823      	ldr	r3, [r4, #0]
 800ed6e:	e664      	b.n	800ea3a <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 800ed70:	f7fb fee4 	bl	800ab3c <HAL_GetTick>
 800ed74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ed76:	e004      	b.n	800ed82 <HAL_RCC_OscConfig+0x406>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed78:	f7fb fee0 	bl	800ab3c <HAL_GetTick>
 800ed7c:	1b80      	subs	r0, r0, r6
 800ed7e:	2802      	cmp	r0, #2
 800ed80:	d88e      	bhi.n	800eca0 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ed82:	682b      	ldr	r3, [r5, #0]
 800ed84:	0199      	lsls	r1, r3, #6
 800ed86:	d4f7      	bmi.n	800ed78 <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ed88:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800ed8a:	4b54      	ldr	r3, [pc, #336]	; (800eedc <HAL_RCC_OscConfig+0x560>)
 800ed8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ed8e:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ed90:	4953      	ldr	r1, [pc, #332]	; (800eee0 <HAL_RCC_OscConfig+0x564>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ed92:	4e51      	ldr	r6, [pc, #324]	; (800eed8 <HAL_RCC_OscConfig+0x55c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ed94:	4313      	orrs	r3, r2
 800ed96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ed98:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ed9c:	62ab      	str	r3, [r5, #40]	; 0x28
 800ed9e:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800eda2:	3b01      	subs	r3, #1
 800eda4:	3a01      	subs	r2, #1
 800eda6:	025b      	lsls	r3, r3, #9
 800eda8:	0412      	lsls	r2, r2, #16
 800edaa:	b29b      	uxth	r3, r3
 800edac:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800edb0:	4313      	orrs	r3, r2
 800edb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800edb4:	3a01      	subs	r2, #1
 800edb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800edba:	4313      	orrs	r3, r2
 800edbc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800edbe:	3a01      	subs	r2, #1
 800edc0:	0612      	lsls	r2, r2, #24
 800edc2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800edc6:	4313      	orrs	r3, r2
 800edc8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800edca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800edcc:	f023 0301 	bic.w	r3, r3, #1
 800edd0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800edd2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800edd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800edd6:	4011      	ands	r1, r2
 800edd8:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800eddc:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800edde:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ede0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ede2:	f023 030c 	bic.w	r3, r3, #12
 800ede6:	4313      	orrs	r3, r2
 800ede8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800edea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800edec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800edee:	f023 0302 	bic.w	r3, r3, #2
 800edf2:	4313      	orrs	r3, r2
 800edf4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800edf6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800edf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800edfc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edfe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ee00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee04:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ee06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ee08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ee0c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800ee0e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ee10:	f043 0301 	orr.w	r3, r3, #1
 800ee14:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800ee16:	682b      	ldr	r3, [r5, #0]
 800ee18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ee1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ee1e:	f7fb fe8d 	bl	800ab3c <HAL_GetTick>
 800ee22:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ee24:	e005      	b.n	800ee32 <HAL_RCC_OscConfig+0x4b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ee26:	f7fb fe89 	bl	800ab3c <HAL_GetTick>
 800ee2a:	1b00      	subs	r0, r0, r4
 800ee2c:	2802      	cmp	r0, #2
 800ee2e:	f63f af37 	bhi.w	800eca0 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ee32:	6833      	ldr	r3, [r6, #0]
 800ee34:	019a      	lsls	r2, r3, #6
 800ee36:	d5f6      	bpl.n	800ee26 <HAL_RCC_OscConfig+0x4aa>
 800ee38:	e651      	b.n	800eade <HAL_RCC_OscConfig+0x162>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee3a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ee3c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ee3e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee40:	f43f ae4e 	beq.w	800eae0 <HAL_RCC_OscConfig+0x164>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee44:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ee4a:	428b      	cmp	r3, r1
 800ee4c:	f47f aec6 	bne.w	800ebdc <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ee50:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ee56:	429a      	cmp	r2, r3
 800ee58:	f47f aec0 	bne.w	800ebdc <HAL_RCC_OscConfig+0x260>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ee5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ee5e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800ee62:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ee64:	429a      	cmp	r2, r3
 800ee66:	f47f aeb9 	bne.w	800ebdc <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ee6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee6c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800ee70:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ee72:	429a      	cmp	r2, r3
 800ee74:	f47f aeb2 	bne.w	800ebdc <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ee78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee7a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800ee7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ee80:	429a      	cmp	r2, r3
 800ee82:	f47f aeab 	bne.w	800ebdc <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ee86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ee88:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800ee8c:	3801      	subs	r0, #1
  return HAL_OK;
 800ee8e:	1a28      	subs	r0, r5, r0
 800ee90:	bf18      	it	ne
 800ee92:	2001      	movne	r0, #1
}
 800ee94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ee96:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ee9a:	601a      	str	r2, [r3, #0]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eea2:	601a      	str	r2, [r3, #0]
 800eea4:	e592      	b.n	800e9cc <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eea6:	4a0c      	ldr	r2, [pc, #48]	; (800eed8 <HAL_RCC_OscConfig+0x55c>)
 800eea8:	6853      	ldr	r3, [r2, #4]
 800eeaa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800eeae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eeb2:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	e5be      	b.n	800ea36 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eeb8:	4d07      	ldr	r5, [pc, #28]	; (800eed8 <HAL_RCC_OscConfig+0x55c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eeba:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eebe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800eec0:	f023 0301 	bic.w	r3, r3, #1
 800eec4:	672b      	str	r3, [r5, #112]	; 0x70
 800eec6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800eec8:	f023 0304 	bic.w	r3, r3, #4
 800eecc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800eece:	f7fb fe35 	bl	800ab3c <HAL_GetTick>
 800eed2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800eed4:	e00c      	b.n	800eef0 <HAL_RCC_OscConfig+0x574>
 800eed6:	bf00      	nop
 800eed8:	58024400 	.word	0x58024400
 800eedc:	fffffc0c 	.word	0xfffffc0c
 800eee0:	ffff0007 	.word	0xffff0007
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eee4:	f7fb fe2a 	bl	800ab3c <HAL_GetTick>
 800eee8:	1b80      	subs	r0, r0, r6
 800eeea:	42b8      	cmp	r0, r7
 800eeec:	f63f aed8 	bhi.w	800eca0 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800eef0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800eef2:	0798      	lsls	r0, r3, #30
 800eef4:	d4f6      	bmi.n	800eee4 <HAL_RCC_OscConfig+0x568>
 800eef6:	e5d5      	b.n	800eaa4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800eef8:	68eb      	ldr	r3, [r5, #12]
 800eefa:	6a22      	ldr	r2, [r4, #32]
 800eefc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800ef00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ef04:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	e597      	b.n	800ea3a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef0a:	686b      	ldr	r3, [r5, #4]
 800ef0c:	6922      	ldr	r2, [r4, #16]
 800ef0e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ef12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ef16:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ef18:	6823      	ldr	r3, [r4, #0]
 800ef1a:	e58c      	b.n	800ea36 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ef1c:	4a0b      	ldr	r2, [pc, #44]	; (800ef4c <HAL_RCC_OscConfig+0x5d0>)
 800ef1e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800ef20:	f043 0301 	orr.w	r3, r3, #1
 800ef24:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ef26:	e692      	b.n	800ec4e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ef28:	4a08      	ldr	r2, [pc, #32]	; (800ef4c <HAL_RCC_OscConfig+0x5d0>)
 800ef2a:	6853      	ldr	r3, [r2, #4]
 800ef2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ef30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef34:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	e57f      	b.n	800ea3a <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ef3a:	f042 0204 	orr.w	r2, r2, #4
 800ef3e:	671a      	str	r2, [r3, #112]	; 0x70
 800ef40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ef42:	f042 0201 	orr.w	r2, r2, #1
 800ef46:	671a      	str	r2, [r3, #112]	; 0x70
 800ef48:	e681      	b.n	800ec4e <HAL_RCC_OscConfig+0x2d2>
 800ef4a:	bf00      	nop
 800ef4c:	58024400 	.word	0x58024400

0800ef50 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ef50:	4a47      	ldr	r2, [pc, #284]	; (800f070 <HAL_RCC_GetSysClockFreq+0x120>)
 800ef52:	6913      	ldr	r3, [r2, #16]
 800ef54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef58:	2b10      	cmp	r3, #16
 800ef5a:	d004      	beq.n	800ef66 <HAL_RCC_GetSysClockFreq+0x16>
 800ef5c:	2b18      	cmp	r3, #24
 800ef5e:	d00d      	beq.n	800ef7c <HAL_RCC_GetSysClockFreq+0x2c>
 800ef60:	b11b      	cbz	r3, 800ef6a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 800ef62:	4844      	ldr	r0, [pc, #272]	; (800f074 <HAL_RCC_GetSysClockFreq+0x124>)
 800ef64:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ef66:	4844      	ldr	r0, [pc, #272]	; (800f078 <HAL_RCC_GetSysClockFreq+0x128>)
 800ef68:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef6a:	6813      	ldr	r3, [r2, #0]
 800ef6c:	0699      	lsls	r1, r3, #26
 800ef6e:	d54a      	bpl.n	800f006 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ef70:	6813      	ldr	r3, [r2, #0]
 800ef72:	4842      	ldr	r0, [pc, #264]	; (800f07c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ef74:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ef78:	40d8      	lsrs	r0, r3
 800ef7a:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ef7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800ef7e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ef80:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ef82:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 800ef84:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ef88:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ef8a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800ef8e:	d038      	beq.n	800f002 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ef90:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ef94:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ef98:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ef9c:	fb05 f101 	mul.w	r1, r5, r1
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	ee07 1a90 	vmov	s15, r1
 800efa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800efaa:	d002      	beq.n	800efb2 <HAL_RCC_GetSysClockFreq+0x62>
 800efac:	2b02      	cmp	r3, #2
 800efae:	d02c      	beq.n	800f00a <HAL_RCC_GetSysClockFreq+0xba>
 800efb0:	b393      	cbz	r3, 800f018 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800efb2:	ee07 0a90 	vmov	s15, r0
 800efb6:	eddf 6a32 	vldr	s13, [pc, #200]	; 800f080 <HAL_RCC_GetSysClockFreq+0x130>
 800efba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800efc0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800efc4:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800f084 <HAL_RCC_GetSysClockFreq+0x134>
 800efc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efcc:	ee06 3a90 	vmov	s13, r3
 800efd0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800efd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800efd8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800efdc:	eee7 6a25 	vfma.f32	s13, s14, s11
 800efe0:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800efe4:	4b22      	ldr	r3, [pc, #136]	; (800f070 <HAL_RCC_GetSysClockFreq+0x120>)
 800efe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efe8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800efec:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800efee:	ee07 3a90 	vmov	s15, r3
 800eff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800effa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800effe:	ee17 0a90 	vmov	r0, s15
}
 800f002:	bc30      	pop	{r4, r5}
 800f004:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f006:	481d      	ldr	r0, [pc, #116]	; (800f07c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800f008:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f00a:	ee07 0a90 	vmov	s15, r0
 800f00e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800f088 <HAL_RCC_GetSysClockFreq+0x138>
 800f012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f016:	e7d2      	b.n	800efbe <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f018:	6813      	ldr	r3, [r2, #0]
 800f01a:	069b      	lsls	r3, r3, #26
 800f01c:	d520      	bpl.n	800f060 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f01e:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f020:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f024:	4915      	ldr	r1, [pc, #84]	; (800f07c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f026:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f02a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f02c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f034:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800f084 <HAL_RCC_GetSysClockFreq+0x134>
 800f038:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f03c:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f03e:	ee06 3a90 	vmov	s13, r3
 800f042:	ee05 1a90 	vmov	s11, r1
 800f046:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f04a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800f04e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f052:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800f056:	eee7 6a05 	vfma.f32	s13, s14, s10
 800f05a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f05e:	e7c1      	b.n	800efe4 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f060:	ee07 0a90 	vmov	s15, r0
 800f064:	eddf 6a09 	vldr	s13, [pc, #36]	; 800f08c <HAL_RCC_GetSysClockFreq+0x13c>
 800f068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f06c:	e7a7      	b.n	800efbe <HAL_RCC_GetSysClockFreq+0x6e>
 800f06e:	bf00      	nop
 800f070:	58024400 	.word	0x58024400
 800f074:	003d0900 	.word	0x003d0900
 800f078:	017d7840 	.word	0x017d7840
 800f07c:	03d09000 	.word	0x03d09000
 800f080:	4a742400 	.word	0x4a742400
 800f084:	39000000 	.word	0x39000000
 800f088:	4bbebc20 	.word	0x4bbebc20
 800f08c:	4c742400 	.word	0x4c742400

0800f090 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800f090:	2800      	cmp	r0, #0
 800f092:	f000 810c 	beq.w	800f2ae <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f096:	4a8c      	ldr	r2, [pc, #560]	; (800f2c8 <HAL_RCC_ClockConfig+0x238>)
 800f098:	6813      	ldr	r3, [r2, #0]
 800f09a:	f003 030f 	and.w	r3, r3, #15
 800f09e:	428b      	cmp	r3, r1
{
 800f0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f0a8:	d20c      	bcs.n	800f0c4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0aa:	6813      	ldr	r3, [r2, #0]
 800f0ac:	f023 030f 	bic.w	r3, r3, #15
 800f0b0:	430b      	orrs	r3, r1
 800f0b2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f0b4:	6813      	ldr	r3, [r2, #0]
 800f0b6:	f003 030f 	and.w	r3, r3, #15
 800f0ba:	428b      	cmp	r3, r1
 800f0bc:	d002      	beq.n	800f0c4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800f0be:	2001      	movs	r0, #1
}
 800f0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f0c4:	6823      	ldr	r3, [r4, #0]
 800f0c6:	075f      	lsls	r7, r3, #29
 800f0c8:	d50b      	bpl.n	800f0e2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f0ca:	4980      	ldr	r1, [pc, #512]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f0cc:	6920      	ldr	r0, [r4, #16]
 800f0ce:	698a      	ldr	r2, [r1, #24]
 800f0d0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f0d4:	4290      	cmp	r0, r2
 800f0d6:	d904      	bls.n	800f0e2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f0d8:	698a      	ldr	r2, [r1, #24]
 800f0da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f0de:	4302      	orrs	r2, r0
 800f0e0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f0e2:	071e      	lsls	r6, r3, #28
 800f0e4:	d50b      	bpl.n	800f0fe <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f0e6:	4979      	ldr	r1, [pc, #484]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f0e8:	6960      	ldr	r0, [r4, #20]
 800f0ea:	69ca      	ldr	r2, [r1, #28]
 800f0ec:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f0f0:	4290      	cmp	r0, r2
 800f0f2:	d904      	bls.n	800f0fe <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f0f4:	69ca      	ldr	r2, [r1, #28]
 800f0f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f0fa:	4302      	orrs	r2, r0
 800f0fc:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f0fe:	06d8      	lsls	r0, r3, #27
 800f100:	d50b      	bpl.n	800f11a <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f102:	4972      	ldr	r1, [pc, #456]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f104:	69a0      	ldr	r0, [r4, #24]
 800f106:	69ca      	ldr	r2, [r1, #28]
 800f108:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800f10c:	4290      	cmp	r0, r2
 800f10e:	d904      	bls.n	800f11a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f110:	69ca      	ldr	r2, [r1, #28]
 800f112:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f116:	4302      	orrs	r2, r0
 800f118:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f11a:	0699      	lsls	r1, r3, #26
 800f11c:	d50b      	bpl.n	800f136 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f11e:	496b      	ldr	r1, [pc, #428]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f120:	69e0      	ldr	r0, [r4, #28]
 800f122:	6a0a      	ldr	r2, [r1, #32]
 800f124:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f128:	4290      	cmp	r0, r2
 800f12a:	d904      	bls.n	800f136 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800f12c:	6a0a      	ldr	r2, [r1, #32]
 800f12e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f132:	4302      	orrs	r2, r0
 800f134:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f136:	079a      	lsls	r2, r3, #30
 800f138:	f140 80ab 	bpl.w	800f292 <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f13c:	4863      	ldr	r0, [pc, #396]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f13e:	68e1      	ldr	r1, [r4, #12]
 800f140:	6982      	ldr	r2, [r0, #24]
 800f142:	f002 020f 	and.w	r2, r2, #15
 800f146:	4291      	cmp	r1, r2
 800f148:	d904      	bls.n	800f154 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f14a:	6982      	ldr	r2, [r0, #24]
 800f14c:	f022 020f 	bic.w	r2, r2, #15
 800f150:	430a      	orrs	r2, r1
 800f152:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f154:	07d8      	lsls	r0, r3, #31
 800f156:	d530      	bpl.n	800f1ba <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f158:	4a5c      	ldr	r2, [pc, #368]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f15a:	68a1      	ldr	r1, [r4, #8]
 800f15c:	6993      	ldr	r3, [r2, #24]
 800f15e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f162:	430b      	orrs	r3, r1
 800f164:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f166:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f168:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f16a:	2902      	cmp	r1, #2
 800f16c:	f000 80a1 	beq.w	800f2b2 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f170:	2903      	cmp	r1, #3
 800f172:	f000 8098 	beq.w	800f2a6 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f176:	2901      	cmp	r1, #1
 800f178:	f000 80a1 	beq.w	800f2be <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f17c:	0758      	lsls	r0, r3, #29
 800f17e:	d59e      	bpl.n	800f0be <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f180:	4e52      	ldr	r6, [pc, #328]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f182:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f186:	6933      	ldr	r3, [r6, #16]
 800f188:	f023 0307 	bic.w	r3, r3, #7
 800f18c:	430b      	orrs	r3, r1
 800f18e:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800f190:	f7fb fcd4 	bl	800ab3c <HAL_GetTick>
 800f194:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f196:	e005      	b.n	800f1a4 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f198:	f7fb fcd0 	bl	800ab3c <HAL_GetTick>
 800f19c:	1bc0      	subs	r0, r0, r7
 800f19e:	4540      	cmp	r0, r8
 800f1a0:	f200 808b 	bhi.w	800f2ba <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f1a4:	6933      	ldr	r3, [r6, #16]
 800f1a6:	6862      	ldr	r2, [r4, #4]
 800f1a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f1ac:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800f1b0:	d1f2      	bne.n	800f198 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f1b2:	6823      	ldr	r3, [r4, #0]
 800f1b4:	0799      	lsls	r1, r3, #30
 800f1b6:	d506      	bpl.n	800f1c6 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f1b8:	68e1      	ldr	r1, [r4, #12]
 800f1ba:	4844      	ldr	r0, [pc, #272]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f1bc:	6982      	ldr	r2, [r0, #24]
 800f1be:	f002 020f 	and.w	r2, r2, #15
 800f1c2:	428a      	cmp	r2, r1
 800f1c4:	d869      	bhi.n	800f29a <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f1c6:	4940      	ldr	r1, [pc, #256]	; (800f2c8 <HAL_RCC_ClockConfig+0x238>)
 800f1c8:	680a      	ldr	r2, [r1, #0]
 800f1ca:	f002 020f 	and.w	r2, r2, #15
 800f1ce:	42aa      	cmp	r2, r5
 800f1d0:	d90a      	bls.n	800f1e8 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1d2:	680a      	ldr	r2, [r1, #0]
 800f1d4:	f022 020f 	bic.w	r2, r2, #15
 800f1d8:	432a      	orrs	r2, r5
 800f1da:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1dc:	680a      	ldr	r2, [r1, #0]
 800f1de:	f002 020f 	and.w	r2, r2, #15
 800f1e2:	42aa      	cmp	r2, r5
 800f1e4:	f47f af6b 	bne.w	800f0be <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f1e8:	075a      	lsls	r2, r3, #29
 800f1ea:	d50b      	bpl.n	800f204 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f1ec:	4937      	ldr	r1, [pc, #220]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f1ee:	6920      	ldr	r0, [r4, #16]
 800f1f0:	698a      	ldr	r2, [r1, #24]
 800f1f2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f1f6:	4290      	cmp	r0, r2
 800f1f8:	d204      	bcs.n	800f204 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f1fa:	698a      	ldr	r2, [r1, #24]
 800f1fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f200:	4302      	orrs	r2, r0
 800f202:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f204:	071f      	lsls	r7, r3, #28
 800f206:	d50b      	bpl.n	800f220 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f208:	4930      	ldr	r1, [pc, #192]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f20a:	6960      	ldr	r0, [r4, #20]
 800f20c:	69ca      	ldr	r2, [r1, #28]
 800f20e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f212:	4290      	cmp	r0, r2
 800f214:	d204      	bcs.n	800f220 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f216:	69ca      	ldr	r2, [r1, #28]
 800f218:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f21c:	4302      	orrs	r2, r0
 800f21e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f220:	06de      	lsls	r6, r3, #27
 800f222:	d50b      	bpl.n	800f23c <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f224:	4929      	ldr	r1, [pc, #164]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f226:	69a0      	ldr	r0, [r4, #24]
 800f228:	69ca      	ldr	r2, [r1, #28]
 800f22a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800f22e:	4290      	cmp	r0, r2
 800f230:	d204      	bcs.n	800f23c <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f232:	69ca      	ldr	r2, [r1, #28]
 800f234:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f238:	4302      	orrs	r2, r0
 800f23a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f23c:	069d      	lsls	r5, r3, #26
 800f23e:	d50b      	bpl.n	800f258 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f240:	4a22      	ldr	r2, [pc, #136]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f242:	69e1      	ldr	r1, [r4, #28]
 800f244:	6a13      	ldr	r3, [r2, #32]
 800f246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f24a:	4299      	cmp	r1, r3
 800f24c:	d204      	bcs.n	800f258 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800f24e:	6a13      	ldr	r3, [r2, #32]
 800f250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f254:	430b      	orrs	r3, r1
 800f256:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f258:	f7ff fe7a 	bl	800ef50 <HAL_RCC_GetSysClockFreq>
 800f25c:	4a1b      	ldr	r2, [pc, #108]	; (800f2cc <HAL_RCC_ClockConfig+0x23c>)
 800f25e:	4603      	mov	r3, r0
 800f260:	481b      	ldr	r0, [pc, #108]	; (800f2d0 <HAL_RCC_ClockConfig+0x240>)
 800f262:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f264:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f266:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800f26a:	4d1a      	ldr	r5, [pc, #104]	; (800f2d4 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f26c:	f002 020f 	and.w	r2, r2, #15
 800f270:	4c19      	ldr	r4, [pc, #100]	; (800f2d8 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f272:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f274:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f276:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 800f27a:	4818      	ldr	r0, [pc, #96]	; (800f2dc <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f27c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f280:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 800f282:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800f284:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f286:	40d3      	lsrs	r3, r2
 800f288:	6023      	str	r3, [r4, #0]
}
 800f28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800f28e:	f7fb bbf3 	b.w	800aa78 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f292:	07da      	lsls	r2, r3, #31
 800f294:	f53f af60 	bmi.w	800f158 <HAL_RCC_ClockConfig+0xc8>
 800f298:	e795      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f29a:	6982      	ldr	r2, [r0, #24]
 800f29c:	f022 020f 	bic.w	r2, r2, #15
 800f2a0:	4311      	orrs	r1, r2
 800f2a2:	6181      	str	r1, [r0, #24]
 800f2a4:	e78f      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f2a6:	019f      	lsls	r7, r3, #6
 800f2a8:	f53f af6a 	bmi.w	800f180 <HAL_RCC_ClockConfig+0xf0>
 800f2ac:	e707      	b.n	800f0be <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800f2ae:	2001      	movs	r0, #1
}
 800f2b0:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f2b2:	039b      	lsls	r3, r3, #14
 800f2b4:	f53f af64 	bmi.w	800f180 <HAL_RCC_ClockConfig+0xf0>
 800f2b8:	e701      	b.n	800f0be <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 800f2ba:	2003      	movs	r0, #3
 800f2bc:	e700      	b.n	800f0c0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f2be:	05de      	lsls	r6, r3, #23
 800f2c0:	f53f af5e 	bmi.w	800f180 <HAL_RCC_ClockConfig+0xf0>
 800f2c4:	e6fb      	b.n	800f0be <HAL_RCC_ClockConfig+0x2e>
 800f2c6:	bf00      	nop
 800f2c8:	52002000 	.word	0x52002000
 800f2cc:	58024400 	.word	0x58024400
 800f2d0:	0805fab4 	.word	0x0805fab4
 800f2d4:	20004728 	.word	0x20004728
 800f2d8:	2000472c 	.word	0x2000472c
 800f2dc:	20004808 	.word	0x20004808

0800f2e0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f2e0:	4a18      	ldr	r2, [pc, #96]	; (800f344 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f2e2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f2e4:	6913      	ldr	r3, [r2, #16]
 800f2e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f2ea:	2b10      	cmp	r3, #16
 800f2ec:	d01a      	beq.n	800f324 <HAL_RCC_GetHCLKFreq+0x44>
 800f2ee:	2b18      	cmp	r3, #24
 800f2f0:	d023      	beq.n	800f33a <HAL_RCC_GetHCLKFreq+0x5a>
 800f2f2:	b1cb      	cbz	r3, 800f328 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 800f2f4:	4814      	ldr	r0, [pc, #80]	; (800f348 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f2f6:	4b13      	ldr	r3, [pc, #76]	; (800f344 <HAL_RCC_GetHCLKFreq+0x64>)
 800f2f8:	4914      	ldr	r1, [pc, #80]	; (800f34c <HAL_RCC_GetHCLKFreq+0x6c>)
 800f2fa:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f2fc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f2fe:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f302:	4c13      	ldr	r4, [pc, #76]	; (800f350 <HAL_RCC_GetHCLKFreq+0x70>)
 800f304:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f308:	4d12      	ldr	r5, [pc, #72]	; (800f354 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f30a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f30c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f30e:	f002 021f 	and.w	r2, r2, #31
 800f312:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f316:	f003 001f 	and.w	r0, r3, #31
 800f31a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800f31e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f320:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800f322:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f324:	480c      	ldr	r0, [pc, #48]	; (800f358 <HAL_RCC_GetHCLKFreq+0x78>)
 800f326:	e7e6      	b.n	800f2f6 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f328:	6813      	ldr	r3, [r2, #0]
 800f32a:	069b      	lsls	r3, r3, #26
 800f32c:	d508      	bpl.n	800f340 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f32e:	6812      	ldr	r2, [r2, #0]
 800f330:	480a      	ldr	r0, [pc, #40]	; (800f35c <HAL_RCC_GetHCLKFreq+0x7c>)
 800f332:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800f336:	40d0      	lsrs	r0, r2
 800f338:	e7dd      	b.n	800f2f6 <HAL_RCC_GetHCLKFreq+0x16>
 800f33a:	f7ff fa9b 	bl	800e874 <HAL_RCC_GetSysClockFreq.part.0>
 800f33e:	e7da      	b.n	800f2f6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f340:	4806      	ldr	r0, [pc, #24]	; (800f35c <HAL_RCC_GetHCLKFreq+0x7c>)
 800f342:	e7d8      	b.n	800f2f6 <HAL_RCC_GetHCLKFreq+0x16>
 800f344:	58024400 	.word	0x58024400
 800f348:	003d0900 	.word	0x003d0900
 800f34c:	0805fab4 	.word	0x0805fab4
 800f350:	2000472c 	.word	0x2000472c
 800f354:	20004728 	.word	0x20004728
 800f358:	017d7840 	.word	0x017d7840
 800f35c:	03d09000 	.word	0x03d09000

0800f360 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f360:	4a1c      	ldr	r2, [pc, #112]	; (800f3d4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f362:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f364:	6913      	ldr	r3, [r2, #16]
 800f366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f36a:	2b10      	cmp	r3, #16
 800f36c:	d021      	beq.n	800f3b2 <HAL_RCC_GetPCLK1Freq+0x52>
 800f36e:	2b18      	cmp	r3, #24
 800f370:	d02b      	beq.n	800f3ca <HAL_RCC_GetPCLK1Freq+0x6a>
 800f372:	b303      	cbz	r3, 800f3b6 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800f374:	4818      	ldr	r0, [pc, #96]	; (800f3d8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f376:	4a17      	ldr	r2, [pc, #92]	; (800f3d4 <HAL_RCC_GetPCLK1Freq+0x74>)
 800f378:	4918      	ldr	r1, [pc, #96]	; (800f3dc <HAL_RCC_GetPCLK1Freq+0x7c>)
 800f37a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800f37c:	4d18      	ldr	r5, [pc, #96]	; (800f3e0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f37e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f382:	4c18      	ldr	r4, [pc, #96]	; (800f3e4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f384:	5ccb      	ldrb	r3, [r1, r3]
 800f386:	f003 031f 	and.w	r3, r3, #31
 800f38a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f38e:	6990      	ldr	r0, [r2, #24]
 800f390:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800f394:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f396:	5c08      	ldrb	r0, [r1, r0]
 800f398:	f000 001f 	and.w	r0, r0, #31
 800f39c:	40c3      	lsrs	r3, r0
 800f39e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f3a0:	69d2      	ldr	r2, [r2, #28]
 800f3a2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800f3a6:	5c88      	ldrb	r0, [r1, r2]
 800f3a8:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f3ac:	fa23 f000 	lsr.w	r0, r3, r0
 800f3b0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f3b2:	480d      	ldr	r0, [pc, #52]	; (800f3e8 <HAL_RCC_GetPCLK1Freq+0x88>)
 800f3b4:	e7df      	b.n	800f376 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3b6:	6813      	ldr	r3, [r2, #0]
 800f3b8:	069b      	lsls	r3, r3, #26
 800f3ba:	d509      	bpl.n	800f3d0 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f3bc:	6810      	ldr	r0, [r2, #0]
 800f3be:	4b0b      	ldr	r3, [pc, #44]	; (800f3ec <HAL_RCC_GetPCLK1Freq+0x8c>)
 800f3c0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800f3c4:	fa23 f000 	lsr.w	r0, r3, r0
 800f3c8:	e7d5      	b.n	800f376 <HAL_RCC_GetPCLK1Freq+0x16>
 800f3ca:	f7ff fa53 	bl	800e874 <HAL_RCC_GetSysClockFreq.part.0>
 800f3ce:	e7d2      	b.n	800f376 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f3d0:	4806      	ldr	r0, [pc, #24]	; (800f3ec <HAL_RCC_GetPCLK1Freq+0x8c>)
 800f3d2:	e7d0      	b.n	800f376 <HAL_RCC_GetPCLK1Freq+0x16>
 800f3d4:	58024400 	.word	0x58024400
 800f3d8:	003d0900 	.word	0x003d0900
 800f3dc:	0805fab4 	.word	0x0805fab4
 800f3e0:	20004728 	.word	0x20004728
 800f3e4:	2000472c 	.word	0x2000472c
 800f3e8:	017d7840 	.word	0x017d7840
 800f3ec:	03d09000 	.word	0x03d09000

0800f3f0 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f3f0:	4a1c      	ldr	r2, [pc, #112]	; (800f464 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f3f2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f3f4:	6913      	ldr	r3, [r2, #16]
 800f3f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f3fa:	2b10      	cmp	r3, #16
 800f3fc:	d021      	beq.n	800f442 <HAL_RCC_GetPCLK2Freq+0x52>
 800f3fe:	2b18      	cmp	r3, #24
 800f400:	d02b      	beq.n	800f45a <HAL_RCC_GetPCLK2Freq+0x6a>
 800f402:	b303      	cbz	r3, 800f446 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800f404:	4818      	ldr	r0, [pc, #96]	; (800f468 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f406:	4a17      	ldr	r2, [pc, #92]	; (800f464 <HAL_RCC_GetPCLK2Freq+0x74>)
 800f408:	4918      	ldr	r1, [pc, #96]	; (800f46c <HAL_RCC_GetPCLK2Freq+0x7c>)
 800f40a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800f40c:	4d18      	ldr	r5, [pc, #96]	; (800f470 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f40e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f412:	4c18      	ldr	r4, [pc, #96]	; (800f474 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f414:	5ccb      	ldrb	r3, [r1, r3]
 800f416:	f003 031f 	and.w	r3, r3, #31
 800f41a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f41e:	6990      	ldr	r0, [r2, #24]
 800f420:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800f424:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f426:	5c08      	ldrb	r0, [r1, r0]
 800f428:	f000 001f 	and.w	r0, r0, #31
 800f42c:	40c3      	lsrs	r3, r0
 800f42e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f430:	69d2      	ldr	r2, [r2, #28]
 800f432:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800f436:	5c88      	ldrb	r0, [r1, r2]
 800f438:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f43c:	fa23 f000 	lsr.w	r0, r3, r0
 800f440:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f442:	480d      	ldr	r0, [pc, #52]	; (800f478 <HAL_RCC_GetPCLK2Freq+0x88>)
 800f444:	e7df      	b.n	800f406 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f446:	6813      	ldr	r3, [r2, #0]
 800f448:	069b      	lsls	r3, r3, #26
 800f44a:	d509      	bpl.n	800f460 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f44c:	6810      	ldr	r0, [r2, #0]
 800f44e:	4b0b      	ldr	r3, [pc, #44]	; (800f47c <HAL_RCC_GetPCLK2Freq+0x8c>)
 800f450:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800f454:	fa23 f000 	lsr.w	r0, r3, r0
 800f458:	e7d5      	b.n	800f406 <HAL_RCC_GetPCLK2Freq+0x16>
 800f45a:	f7ff fa0b 	bl	800e874 <HAL_RCC_GetSysClockFreq.part.0>
 800f45e:	e7d2      	b.n	800f406 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f460:	4806      	ldr	r0, [pc, #24]	; (800f47c <HAL_RCC_GetPCLK2Freq+0x8c>)
 800f462:	e7d0      	b.n	800f406 <HAL_RCC_GetPCLK2Freq+0x16>
 800f464:	58024400 	.word	0x58024400
 800f468:	003d0900 	.word	0x003d0900
 800f46c:	0805fab4 	.word	0x0805fab4
 800f470:	20004728 	.word	0x20004728
 800f474:	2000472c 	.word	0x2000472c
 800f478:	017d7840 	.word	0x017d7840
 800f47c:	03d09000 	.word	0x03d09000

0800f480 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f482:	4c3a      	ldr	r4, [pc, #232]	; (800f56c <RCCEx_PLL2_Config+0xec>)
 800f484:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f486:	f003 0303 	and.w	r3, r3, #3
 800f48a:	2b03      	cmp	r3, #3
 800f48c:	d067      	beq.n	800f55e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f48e:	6823      	ldr	r3, [r4, #0]
 800f490:	4606      	mov	r6, r0
 800f492:	460f      	mov	r7, r1
 800f494:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f498:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f49a:	f7fb fb4f 	bl	800ab3c <HAL_GetTick>
 800f49e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f4a0:	e004      	b.n	800f4ac <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f4a2:	f7fb fb4b 	bl	800ab3c <HAL_GetTick>
 800f4a6:	1b43      	subs	r3, r0, r5
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d856      	bhi.n	800f55a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f4ac:	6823      	ldr	r3, [r4, #0]
 800f4ae:	011a      	lsls	r2, r3, #4
 800f4b0:	d4f7      	bmi.n	800f4a2 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f4b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f4b4:	6832      	ldr	r2, [r6, #0]
 800f4b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f4ba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800f4be:	62a3      	str	r3, [r4, #40]	; 0x28
 800f4c0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800f4c4:	3b01      	subs	r3, #1
 800f4c6:	3a01      	subs	r2, #1
 800f4c8:	025b      	lsls	r3, r3, #9
 800f4ca:	0412      	lsls	r2, r2, #16
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	6872      	ldr	r2, [r6, #4]
 800f4d6:	3a01      	subs	r2, #1
 800f4d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	6932      	ldr	r2, [r6, #16]
 800f4e0:	3a01      	subs	r2, #1
 800f4e2:	0612      	lsls	r2, r2, #24
 800f4e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f4ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4ee:	6972      	ldr	r2, [r6, #20]
 800f4f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f4f4:	4313      	orrs	r3, r2
 800f4f6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f4f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f4fa:	69b3      	ldr	r3, [r6, #24]
 800f4fc:	f022 0220 	bic.w	r2, r2, #32
 800f500:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f502:	4b1b      	ldr	r3, [pc, #108]	; (800f570 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f504:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f506:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f508:	f022 0210 	bic.w	r2, r2, #16
 800f50c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f50e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f510:	69f2      	ldr	r2, [r6, #28]
 800f512:	400b      	ands	r3, r1
 800f514:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f518:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f51a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f51c:	f043 0310 	orr.w	r3, r3, #16
 800f520:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f522:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800f524:	b1ef      	cbz	r7, 800f562 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f526:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f528:	bf0c      	ite	eq
 800f52a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f52e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800f532:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f534:	4c0d      	ldr	r4, [pc, #52]	; (800f56c <RCCEx_PLL2_Config+0xec>)
 800f536:	6823      	ldr	r3, [r4, #0]
 800f538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f53c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f53e:	f7fb fafd 	bl	800ab3c <HAL_GetTick>
 800f542:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f544:	e004      	b.n	800f550 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f546:	f7fb faf9 	bl	800ab3c <HAL_GetTick>
 800f54a:	1b40      	subs	r0, r0, r5
 800f54c:	2802      	cmp	r0, #2
 800f54e:	d804      	bhi.n	800f55a <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f550:	6823      	ldr	r3, [r4, #0]
 800f552:	011b      	lsls	r3, r3, #4
 800f554:	d5f7      	bpl.n	800f546 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800f556:	2000      	movs	r0, #0
}
 800f558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800f55a:	2003      	movs	r0, #3
}
 800f55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f55e:	2001      	movs	r0, #1
}
 800f560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f566:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f568:	e7e4      	b.n	800f534 <RCCEx_PLL2_Config+0xb4>
 800f56a:	bf00      	nop
 800f56c:	58024400 	.word	0x58024400
 800f570:	ffff0007 	.word	0xffff0007

0800f574 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f576:	4c3a      	ldr	r4, [pc, #232]	; (800f660 <RCCEx_PLL3_Config+0xec>)
 800f578:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f57a:	f003 0303 	and.w	r3, r3, #3
 800f57e:	2b03      	cmp	r3, #3
 800f580:	d067      	beq.n	800f652 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f582:	6823      	ldr	r3, [r4, #0]
 800f584:	4606      	mov	r6, r0
 800f586:	460f      	mov	r7, r1
 800f588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f58c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f58e:	f7fb fad5 	bl	800ab3c <HAL_GetTick>
 800f592:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f594:	e004      	b.n	800f5a0 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f596:	f7fb fad1 	bl	800ab3c <HAL_GetTick>
 800f59a:	1b43      	subs	r3, r0, r5
 800f59c:	2b02      	cmp	r3, #2
 800f59e:	d856      	bhi.n	800f64e <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f5a0:	6823      	ldr	r3, [r4, #0]
 800f5a2:	009a      	lsls	r2, r3, #2
 800f5a4:	d4f7      	bmi.n	800f596 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f5a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f5a8:	6832      	ldr	r2, [r6, #0]
 800f5aa:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800f5ae:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800f5b2:	62a3      	str	r3, [r4, #40]	; 0x28
 800f5b4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	3a01      	subs	r2, #1
 800f5bc:	025b      	lsls	r3, r3, #9
 800f5be:	0412      	lsls	r2, r2, #16
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	6872      	ldr	r2, [r6, #4]
 800f5ca:	3a01      	subs	r2, #1
 800f5cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	6932      	ldr	r2, [r6, #16]
 800f5d4:	3a01      	subs	r2, #1
 800f5d6:	0612      	lsls	r2, r2, #24
 800f5d8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f5e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f5e2:	6972      	ldr	r2, [r6, #20]
 800f5e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f5ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f5ee:	69b3      	ldr	r3, [r6, #24]
 800f5f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f5f4:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f5f6:	4b1b      	ldr	r3, [pc, #108]	; (800f664 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f5f8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f5fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f5fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f600:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f602:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f604:	69f2      	ldr	r2, [r6, #28]
 800f606:	400b      	ands	r3, r1
 800f608:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f60c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f60e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f614:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f616:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800f618:	b1ef      	cbz	r7, 800f656 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f61a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f61c:	bf0c      	ite	eq
 800f61e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f622:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800f626:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f628:	4c0d      	ldr	r4, [pc, #52]	; (800f660 <RCCEx_PLL3_Config+0xec>)
 800f62a:	6823      	ldr	r3, [r4, #0]
 800f62c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f630:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f632:	f7fb fa83 	bl	800ab3c <HAL_GetTick>
 800f636:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f638:	e004      	b.n	800f644 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f63a:	f7fb fa7f 	bl	800ab3c <HAL_GetTick>
 800f63e:	1b40      	subs	r0, r0, r5
 800f640:	2802      	cmp	r0, #2
 800f642:	d804      	bhi.n	800f64e <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	d5f7      	bpl.n	800f63a <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800f64a:	2000      	movs	r0, #0
}
 800f64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800f64e:	2003      	movs	r0, #3
}
 800f650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f652:	2001      	movs	r0, #1
}
 800f654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f656:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f65a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f65c:	e7e4      	b.n	800f628 <RCCEx_PLL3_Config+0xb4>
 800f65e:	bf00      	nop
 800f660:	58024400 	.word	0x58024400
 800f664:	ffff0007 	.word	0xffff0007

0800f668 <HAL_RCCEx_PeriphCLKConfig>:
{
 800f668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f66c:	6803      	ldr	r3, [r0, #0]
{
 800f66e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f670:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800f674:	d01c      	beq.n	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800f676:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800f678:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f67c:	f000 84e7 	beq.w	801004e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 800f680:	d823      	bhi.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x62>
 800f682:	2a00      	cmp	r2, #0
 800f684:	f000 83df 	beq.w	800fe46 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800f688:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800f68c:	d120      	bne.n	800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f68e:	2102      	movs	r1, #2
 800f690:	3004      	adds	r0, #4
 800f692:	f7ff fef5 	bl	800f480 <RCCEx_PLL2_Config>
 800f696:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800f698:	2e00      	cmp	r6, #0
 800f69a:	f040 84b4 	bne.w	8010006 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f69e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f6a0:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f6a2:	48a7      	ldr	r0, [pc, #668]	; (800f940 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f6a4:	2600      	movs	r6, #0
 800f6a6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800f6a8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800f6ac:	430a      	orrs	r2, r1
 800f6ae:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f6b0:	05da      	lsls	r2, r3, #23
 800f6b2:	d511      	bpl.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800f6b4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f6b6:	2a04      	cmp	r2, #4
 800f6b8:	f200 8527 	bhi.w	801010a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800f6bc:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f6c0:	049c04c0 	.word	0x049c04c0
 800f6c4:	02f504af 	.word	0x02f504af
 800f6c8:	02f5      	.short	0x02f5
    switch(PeriphClkInit->SpdifrxClockSelection)
 800f6ca:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800f6ce:	d0e8      	beq.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f6d0:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 800f6d2:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f6d6:	d4ed      	bmi.n	800f6b4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800f6d8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f6da:	059f      	lsls	r7, r3, #22
 800f6dc:	d51b      	bpl.n	800f716 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 800f6de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f6e0:	2a80      	cmp	r2, #128	; 0x80
 800f6e2:	f000 84c6 	beq.w	8010072 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800f6e6:	f200 80fa 	bhi.w	800f8de <HAL_RCCEx_PeriphCLKConfig+0x276>
 800f6ea:	2a00      	cmp	r2, #0
 800f6ec:	f000 83b7 	beq.w	800fe5e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800f6f0:	2a40      	cmp	r2, #64	; 0x40
 800f6f2:	f040 80fb 	bne.w	800f8ec <HAL_RCCEx_PeriphCLKConfig+0x284>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	1d20      	adds	r0, r4, #4
 800f6fa:	f7ff fec1 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f6fe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f700:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f702:	2d00      	cmp	r5, #0
 800f704:	f040 8385 	bne.w	800fe12 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f708:	498d      	ldr	r1, [pc, #564]	; (800f940 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f70a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800f70c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f70e:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800f712:	4302      	orrs	r2, r0
 800f714:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f716:	0558      	lsls	r0, r3, #21
 800f718:	d51f      	bpl.n	800f75a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 800f71a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800f71e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800f722:	f000 849d 	beq.w	8010060 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
 800f726:	f200 80e4 	bhi.w	800f8f2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 800f72a:	2a00      	cmp	r2, #0
 800f72c:	f000 8391 	beq.w	800fe52 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
 800f730:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f734:	f040 80e5 	bne.w	800f902 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f738:	2100      	movs	r1, #0
 800f73a:	1d20      	adds	r0, r4, #4
 800f73c:	f7ff fea0 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f740:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f742:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f744:	2d00      	cmp	r5, #0
 800f746:	f040 8366 	bne.w	800fe16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f74a:	497d      	ldr	r1, [pc, #500]	; (800f940 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f74c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800f750:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f752:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800f756:	4302      	orrs	r2, r0
 800f758:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f75a:	0519      	lsls	r1, r3, #20
 800f75c:	d51f      	bpl.n	800f79e <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 800f75e:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800f762:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800f766:	f000 8451 	beq.w	801000c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800f76a:	f200 80cd 	bhi.w	800f908 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 800f76e:	2a00      	cmp	r2, #0
 800f770:	f000 837b 	beq.w	800fe6a <HAL_RCCEx_PeriphCLKConfig+0x802>
 800f774:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f778:	f040 80ce 	bne.w	800f918 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f77c:	2100      	movs	r1, #0
 800f77e:	1d20      	adds	r0, r4, #4
 800f780:	f7ff fe7e 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f784:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f786:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f788:	2d00      	cmp	r5, #0
 800f78a:	f040 834a 	bne.w	800fe22 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f78e:	496c      	ldr	r1, [pc, #432]	; (800f940 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f790:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800f794:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f796:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800f79a:	4302      	orrs	r2, r0
 800f79c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f79e:	019a      	lsls	r2, r3, #6
 800f7a0:	d518      	bpl.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 800f7a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f7a4:	2a20      	cmp	r2, #32
 800f7a6:	f000 83f8 	beq.w	800ff9a <HAL_RCCEx_PeriphCLKConfig+0x932>
 800f7aa:	f200 80b8 	bhi.w	800f91e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800f7ae:	b13a      	cbz	r2, 800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800f7b0:	2a10      	cmp	r2, #16
 800f7b2:	f040 80b7 	bne.w	800f924 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7b6:	4962      	ldr	r1, [pc, #392]	; (800f940 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f7b8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f7ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f7be:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800f7c0:	2d00      	cmp	r5, #0
 800f7c2:	f040 8383 	bne.w	800fecc <HAL_RCCEx_PeriphCLKConfig+0x864>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f7c6:	495e      	ldr	r1, [pc, #376]	; (800f940 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f7c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f7ca:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800f7cc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800f7d0:	4302      	orrs	r2, r0
 800f7d2:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f7d4:	04df      	lsls	r7, r3, #19
 800f7d6:	d51d      	bpl.n	800f814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 800f7d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800f7da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f7de:	f000 8426 	beq.w	801002e <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 800f7e2:	f200 80a2 	bhi.w	800f92a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800f7e6:	2a00      	cmp	r2, #0
 800f7e8:	f000 8345 	beq.w	800fe76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800f7ec:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800f7f0:	f040 80a3 	bne.w	800f93a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	1d20      	adds	r0, r4, #4
 800f7f8:	f7ff fe42 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f7fc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f7fe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f800:	2d00      	cmp	r5, #0
 800f802:	f040 830a 	bne.w	800fe1a <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f806:	494e      	ldr	r1, [pc, #312]	; (800f940 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f808:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800f80a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f80c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800f810:	4302      	orrs	r2, r0
 800f812:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f814:	0498      	lsls	r0, r3, #18
 800f816:	d51b      	bpl.n	800f850 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 800f818:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f81a:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800f81e:	f000 839f 	beq.w	800ff60 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800f822:	f200 808f 	bhi.w	800f944 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800f826:	b14a      	cbz	r2, 800f83c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800f828:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f82c:	f040 8094 	bne.w	800f958 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f830:	2101      	movs	r1, #1
 800f832:	1d20      	adds	r0, r4, #4
 800f834:	f7ff fe24 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f838:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f83a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f83c:	2d00      	cmp	r5, #0
 800f83e:	f040 8347 	bne.w	800fed0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f842:	493f      	ldr	r1, [pc, #252]	; (800f940 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f844:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800f846:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800f848:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f84c:	4302      	orrs	r2, r0
 800f84e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f850:	0459      	lsls	r1, r3, #17
 800f852:	d51c      	bpl.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0x226>
    switch(PeriphClkInit->Spi6ClockSelection)
 800f854:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800f858:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800f85c:	f000 838a 	beq.w	800ff74 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800f860:	d87d      	bhi.n	800f95e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 800f862:	b14a      	cbz	r2, 800f878 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800f864:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800f868:	f040 8081 	bne.w	800f96e <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f86c:	2101      	movs	r1, #1
 800f86e:	1d20      	adds	r0, r4, #4
 800f870:	f7ff fe06 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800f874:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f876:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f878:	2d00      	cmp	r5, #0
 800f87a:	f040 831d 	bne.w	800feb8 <HAL_RCCEx_PeriphCLKConfig+0x850>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f87e:	4930      	ldr	r1, [pc, #192]	; (800f940 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f880:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800f884:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800f886:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800f88a:	4302      	orrs	r2, r0
 800f88c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800f88e:	015a      	lsls	r2, r3, #5
 800f890:	d509      	bpl.n	800f8a6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->DsiClockSelection)
 800f892:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800f894:	2a00      	cmp	r2, #0
 800f896:	f000 8253 	beq.w	800fd40 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800f89a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f89e:	f000 8249 	beq.w	800fd34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800f8a2:	2601      	movs	r6, #1
 800f8a4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f8a6:	041f      	lsls	r7, r3, #16
 800f8a8:	d50d      	bpl.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch(PeriphClkInit->FdcanClockSelection)
 800f8aa:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800f8ac:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800f8b0:	f000 837c 	beq.w	800ffac <HAL_RCCEx_PeriphCLKConfig+0x944>
 800f8b4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800f8b8:	f000 8229 	beq.w	800fd0e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800f8bc:	2a00      	cmp	r2, #0
 800f8be:	f000 822c 	beq.w	800fd1a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800f8c2:	2601      	movs	r6, #1
 800f8c4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f8c6:	01d8      	lsls	r0, r3, #7
 800f8c8:	d55e      	bpl.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x320>
    switch(PeriphClkInit->FmcClockSelection)
 800f8ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f8cc:	2a03      	cmp	r2, #3
 800f8ce:	f200 841f 	bhi.w	8010110 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800f8d2:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f8d6:	0055      	.short	0x0055
 800f8d8:	004f0359 	.word	0x004f0359
 800f8dc:	0055      	.short	0x0055
    switch(PeriphClkInit->Sai23ClockSelection)
 800f8de:	2ac0      	cmp	r2, #192	; 0xc0
 800f8e0:	f43f af0f 	beq.w	800f702 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800f8e4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f8e8:	f43f af0b 	beq.w	800f702 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800f8ec:	2601      	movs	r6, #1
 800f8ee:	4635      	mov	r5, r6
 800f8f0:	e711      	b.n	800f716 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 800f8f2:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800f8f6:	f43f af25 	beq.w	800f744 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800f8fa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800f8fe:	f43f af21 	beq.w	800f744 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800f902:	2601      	movs	r6, #1
 800f904:	4635      	mov	r5, r6
 800f906:	e728      	b.n	800f75a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4BClockSelection)
 800f908:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800f90c:	f43f af3c 	beq.w	800f788 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800f910:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800f914:	f43f af38 	beq.w	800f788 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800f918:	2601      	movs	r6, #1
 800f91a:	4635      	mov	r5, r6
 800f91c:	e73f      	b.n	800f79e <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 800f91e:	2a30      	cmp	r2, #48	; 0x30
 800f920:	f43f af4e 	beq.w	800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800f924:	2601      	movs	r6, #1
 800f926:	4635      	mov	r5, r6
 800f928:	e754      	b.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800f92a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800f92e:	f43f af67 	beq.w	800f800 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800f932:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f936:	f43f af63 	beq.w	800f800 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800f93a:	2601      	movs	r6, #1
 800f93c:	4635      	mov	r5, r6
 800f93e:	e769      	b.n	800f814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800f940:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 800f944:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800f948:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800f94c:	f43f af76 	beq.w	800f83c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800f950:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800f954:	f43f af72 	beq.w	800f83c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800f958:	2601      	movs	r6, #1
 800f95a:	4635      	mov	r5, r6
 800f95c:	e778      	b.n	800f850 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 800f95e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800f962:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800f966:	d087      	beq.n	800f878 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800f968:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800f96c:	d084      	beq.n	800f878 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800f96e:	2601      	movs	r6, #1
 800f970:	4635      	mov	r5, r6
 800f972:	e78c      	b.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0x226>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f974:	2102      	movs	r1, #2
 800f976:	1d20      	adds	r0, r4, #4
 800f978:	f7ff fd82 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f97c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f97e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800f980:	2d00      	cmp	r5, #0
 800f982:	f000 829b 	beq.w	800febc <HAL_RCCEx_PeriphCLKConfig+0x854>
 800f986:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f988:	0259      	lsls	r1, r3, #9
 800f98a:	f100 8201 	bmi.w	800fd90 <HAL_RCCEx_PeriphCLKConfig+0x728>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f98e:	07df      	lsls	r7, r3, #31
 800f990:	d52f      	bpl.n	800f9f2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800f992:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800f994:	2a28      	cmp	r2, #40	; 0x28
 800f996:	d82a      	bhi.n	800f9ee <HAL_RCCEx_PeriphCLKConfig+0x386>
 800f998:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f99c:	002901e4 	.word	0x002901e4
 800f9a0:	00290029 	.word	0x00290029
 800f9a4:	00290029 	.word	0x00290029
 800f9a8:	00290029 	.word	0x00290029
 800f9ac:	00290388 	.word	0x00290388
 800f9b0:	00290029 	.word	0x00290029
 800f9b4:	00290029 	.word	0x00290029
 800f9b8:	00290029 	.word	0x00290029
 800f9bc:	002901dd 	.word	0x002901dd
 800f9c0:	00290029 	.word	0x00290029
 800f9c4:	00290029 	.word	0x00290029
 800f9c8:	00290029 	.word	0x00290029
 800f9cc:	002901e4 	.word	0x002901e4
 800f9d0:	00290029 	.word	0x00290029
 800f9d4:	00290029 	.word	0x00290029
 800f9d8:	00290029 	.word	0x00290029
 800f9dc:	002901e4 	.word	0x002901e4
 800f9e0:	00290029 	.word	0x00290029
 800f9e4:	00290029 	.word	0x00290029
 800f9e8:	00290029 	.word	0x00290029
 800f9ec:	01e4      	.short	0x01e4
 800f9ee:	2601      	movs	r6, #1
 800f9f0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f9f2:	0798      	lsls	r0, r3, #30
 800f9f4:	d516      	bpl.n	800fa24 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800f9f6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800f9f8:	2a05      	cmp	r2, #5
 800f9fa:	f200 838c 	bhi.w	8010116 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800f9fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fa02:	000d      	.short	0x000d
 800fa04:	00060341 	.word	0x00060341
 800fa08:	000d000d 	.word	0x000d000d
 800fa0c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fa0e:	2101      	movs	r1, #1
 800fa10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fa14:	f7ff fdae 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fa18:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fa1a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fa1c:	2d00      	cmp	r5, #0
 800fa1e:	f000 8243 	beq.w	800fea8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800fa22:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fa24:	0759      	lsls	r1, r3, #29
 800fa26:	d517      	bpl.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800fa28:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800fa2c:	2a05      	cmp	r2, #5
 800fa2e:	f200 8375 	bhi.w	801011c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800fa32:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fa36:	000d      	.short	0x000d
 800fa38:	00060331 	.word	0x00060331
 800fa3c:	000d000d 	.word	0x000d000d
 800fa40:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fa42:	2101      	movs	r1, #1
 800fa44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fa48:	f7ff fd94 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fa4c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fa4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fa50:	2d00      	cmp	r5, #0
 800fa52:	f000 8220 	beq.w	800fe96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800fa56:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fa58:	069a      	lsls	r2, r3, #26
 800fa5a:	d51d      	bpl.n	800fa98 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800fa5c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800fa60:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800fa64:	f000 8272 	beq.w	800ff4c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 800fa68:	f200 80dc 	bhi.w	800fc24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800fa6c:	b14a      	cbz	r2, 800fa82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800fa6e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800fa72:	f040 80e1 	bne.w	800fc38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fa76:	2100      	movs	r1, #0
 800fa78:	1d20      	adds	r0, r4, #4
 800fa7a:	f7ff fd01 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fa7e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fa80:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fa82:	2d00      	cmp	r5, #0
 800fa84:	f040 8201 	bne.w	800fe8a <HAL_RCCEx_PeriphCLKConfig+0x822>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fa88:	49a9      	ldr	r1, [pc, #676]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fa8a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800fa8e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800fa90:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800fa94:	4302      	orrs	r2, r0
 800fa96:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fa98:	065f      	lsls	r7, r3, #25
 800fa9a:	d51d      	bpl.n	800fad8 <HAL_RCCEx_PeriphCLKConfig+0x470>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800fa9c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800faa0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800faa4:	f000 823e 	beq.w	800ff24 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800faa8:	f200 80c9 	bhi.w	800fc3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800faac:	b14a      	cbz	r2, 800fac2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800faae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fab2:	f040 80ce 	bne.w	800fc52 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fab6:	2100      	movs	r1, #0
 800fab8:	1d20      	adds	r0, r4, #4
 800faba:	f7ff fce1 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fabe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fac0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fac2:	2d00      	cmp	r5, #0
 800fac4:	f040 81df 	bne.w	800fe86 <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fac8:	4999      	ldr	r1, [pc, #612]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800faca:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800face:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fad0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800fad4:	4302      	orrs	r2, r0
 800fad6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fad8:	0618      	lsls	r0, r3, #24
 800fada:	d51d      	bpl.n	800fb18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800fadc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800fae0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800fae4:	f000 8228 	beq.w	800ff38 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800fae8:	f200 80b6 	bhi.w	800fc58 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 800faec:	b14a      	cbz	r2, 800fb02 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800faee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800faf2:	f040 80bb 	bne.w	800fc6c <HAL_RCCEx_PeriphCLKConfig+0x604>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800faf6:	2100      	movs	r1, #0
 800faf8:	1d20      	adds	r0, r4, #4
 800fafa:	f7ff fcc1 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fafe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fb00:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fb02:	2d00      	cmp	r5, #0
 800fb04:	f040 81c3 	bne.w	800fe8e <HAL_RCCEx_PeriphCLKConfig+0x826>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fb08:	4989      	ldr	r1, [pc, #548]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fb0a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800fb0e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fb10:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800fb14:	4302      	orrs	r2, r0
 800fb16:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fb18:	0719      	lsls	r1, r3, #28
 800fb1a:	d50b      	bpl.n	800fb34 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800fb1c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800fb20:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800fb24:	f000 8257 	beq.w	800ffd6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fb28:	4881      	ldr	r0, [pc, #516]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fb2a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800fb2c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800fb30:	430a      	orrs	r2, r1
 800fb32:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fb34:	06da      	lsls	r2, r3, #27
 800fb36:	d50b      	bpl.n	800fb50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800fb38:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800fb3c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800fb40:	f000 823c 	beq.w	800ffbc <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fb44:	487a      	ldr	r0, [pc, #488]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fb46:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800fb48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fb4c:	430a      	orrs	r2, r1
 800fb4e:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fb50:	031f      	lsls	r7, r3, #12
 800fb52:	d50e      	bpl.n	800fb72 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    switch(PeriphClkInit->AdcClockSelection)
 800fb54:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800fb58:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800fb5c:	f000 80c4 	beq.w	800fce8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800fb60:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800fb64:	f000 80c7 	beq.w	800fcf6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800fb68:	2900      	cmp	r1, #0
 800fb6a:	f000 81d3 	beq.w	800ff14 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 800fb6e:	2601      	movs	r6, #1
 800fb70:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fb72:	0358      	lsls	r0, r3, #13
 800fb74:	d50f      	bpl.n	800fb96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch(PeriphClkInit->UsbClockSelection)
 800fb76:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800fb7a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800fb7e:	f000 80a0 	beq.w	800fcc2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
 800fb82:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800fb86:	f000 80a3 	beq.w	800fcd0 <HAL_RCCEx_PeriphCLKConfig+0x668>
 800fb8a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800fb8e:	f000 81b9 	beq.w	800ff04 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800fb92:	2601      	movs	r6, #1
 800fb94:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fb96:	03d9      	lsls	r1, r3, #15
 800fb98:	d509      	bpl.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x546>
    switch(PeriphClkInit->SdmmcClockSelection)
 800fb9a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800fb9c:	2a00      	cmp	r2, #0
 800fb9e:	f000 81a8 	beq.w	800fef2 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 800fba2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800fba6:	f000 813e 	beq.w	800fe26 <HAL_RCCEx_PeriphCLKConfig+0x7be>
 800fbaa:	2601      	movs	r6, #1
 800fbac:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fbae:	009a      	lsls	r2, r3, #2
 800fbb0:	f100 80e3 	bmi.w	800fd7a <HAL_RCCEx_PeriphCLKConfig+0x712>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fbb4:	039f      	lsls	r7, r3, #14
 800fbb6:	d45c      	bmi.n	800fc72 <HAL_RCCEx_PeriphCLKConfig+0x60a>
    return HAL_OK;
 800fbb8:	1e30      	subs	r0, r6, #0
 800fbba:	bf18      	it	ne
 800fbbc:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fbbe:	02de      	lsls	r6, r3, #11
 800fbc0:	d506      	bpl.n	800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x568>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fbc2:	495b      	ldr	r1, [pc, #364]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fbc4:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800fbc6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800fbc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800fbcc:	432a      	orrs	r2, r5
 800fbce:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fbd0:	00dd      	lsls	r5, r3, #3
 800fbd2:	d507      	bpl.n	800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fbd4:	4956      	ldr	r1, [pc, #344]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fbd6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800fbda:	690a      	ldr	r2, [r1, #16]
 800fbdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fbe0:	432a      	orrs	r2, r5
 800fbe2:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fbe4:	0299      	lsls	r1, r3, #10
 800fbe6:	d506      	bpl.n	800fbf6 <HAL_RCCEx_PeriphCLKConfig+0x58e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fbe8:	4951      	ldr	r1, [pc, #324]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fbea:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800fbec:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800fbee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800fbf2:	432a      	orrs	r2, r5
 800fbf4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fbf6:	005a      	lsls	r2, r3, #1
 800fbf8:	d509      	bpl.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fbfa:	4a4d      	ldr	r2, [pc, #308]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fbfc:	6911      	ldr	r1, [r2, #16]
 800fbfe:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800fc02:	6111      	str	r1, [r2, #16]
 800fc04:	6911      	ldr	r1, [r2, #16]
 800fc06:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800fc0a:	4329      	orrs	r1, r5
 800fc0c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	da06      	bge.n	800fc20 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fc12:	4a47      	ldr	r2, [pc, #284]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fc14:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800fc16:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800fc18:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800fc1c:	430b      	orrs	r3, r1
 800fc1e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800fc20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 800fc24:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800fc28:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800fc2c:	f43f af29 	beq.w	800fa82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800fc30:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800fc34:	f43f af25 	beq.w	800fa82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800fc38:	2601      	movs	r6, #1
 800fc3a:	4635      	mov	r5, r6
 800fc3c:	e72c      	b.n	800fa98 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800fc3e:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800fc42:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800fc46:	f43f af3c 	beq.w	800fac2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800fc4a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800fc4e:	f43f af38 	beq.w	800fac2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800fc52:	2601      	movs	r6, #1
 800fc54:	4635      	mov	r5, r6
 800fc56:	e73f      	b.n	800fad8 <HAL_RCCEx_PeriphCLKConfig+0x470>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800fc58:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800fc5c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800fc60:	f43f af4f 	beq.w	800fb02 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800fc64:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800fc68:	f43f af4b 	beq.w	800fb02 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800fc6c:	2601      	movs	r6, #1
 800fc6e:	4635      	mov	r5, r6
 800fc70:	e752      	b.n	800fb18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    switch(PeriphClkInit->RngClockSelection)
 800fc72:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800fc76:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800fc7a:	f000 812f 	beq.w	800fedc <HAL_RCCEx_PeriphCLKConfig+0x874>
 800fc7e:	d906      	bls.n	800fc8e <HAL_RCCEx_PeriphCLKConfig+0x626>
 800fc80:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800fc84:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fc88:	d003      	beq.n	800fc92 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800fc8a:	2001      	movs	r0, #1
 800fc8c:	e797      	b.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0x556>
 800fc8e:	2a00      	cmp	r2, #0
 800fc90:	d1fb      	bne.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0x622>
    if(ret == HAL_OK)
 800fc92:	2d00      	cmp	r5, #0
 800fc94:	d1f9      	bne.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0x622>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fc96:	4d26      	ldr	r5, [pc, #152]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    return HAL_OK;
 800fc98:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fc9a:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 800fc9c:	bf18      	it	ne
 800fc9e:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fca0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800fca4:	430a      	orrs	r2, r1
 800fca6:	656a      	str	r2, [r5, #84]	; 0x54
 800fca8:	e789      	b.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Sai1ClockSelection)
 800fcaa:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800fcac:	2d00      	cmp	r5, #0
 800fcae:	f040 80b6 	bne.w	800fe1e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800fcb2:	491f      	ldr	r1, [pc, #124]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fcb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcb6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800fcb8:	f022 0207 	bic.w	r2, r2, #7
 800fcbc:	4302      	orrs	r2, r0
 800fcbe:	650a      	str	r2, [r1, #80]	; 0x50
 800fcc0:	e50b      	b.n	800f6da <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fcc2:	2101      	movs	r1, #1
 800fcc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fcc8:	f7ff fc54 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fccc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fcce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fcd0:	2d00      	cmp	r5, #0
 800fcd2:	f040 80d6 	bne.w	800fe82 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fcd6:	4916      	ldr	r1, [pc, #88]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fcd8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800fcdc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800fcde:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800fce2:	4302      	orrs	r2, r0
 800fce4:	654a      	str	r2, [r1, #84]	; 0x54
 800fce6:	e756      	b.n	800fb96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fce8:	2102      	movs	r1, #2
 800fcea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fcee:	f7ff fc41 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fcf2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fcf4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fcf6:	2d00      	cmp	r5, #0
 800fcf8:	f040 80ee 	bne.w	800fed8 <HAL_RCCEx_PeriphCLKConfig+0x870>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fcfc:	490c      	ldr	r1, [pc, #48]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fcfe:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800fd02:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fd04:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800fd08:	4302      	orrs	r2, r0
 800fd0a:	658a      	str	r2, [r1, #88]	; 0x58
 800fd0c:	e731      	b.n	800fb72 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fd0e:	2101      	movs	r1, #1
 800fd10:	1d20      	adds	r0, r4, #4
 800fd12:	f7ff fbb5 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800fd16:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fd18:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fd1a:	2d00      	cmp	r5, #0
 800fd1c:	f040 80da 	bne.w	800fed4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800fd20:	4903      	ldr	r1, [pc, #12]	; (800fd30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800fd22:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800fd24:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800fd26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fd2a:	4302      	orrs	r2, r0
 800fd2c:	650a      	str	r2, [r1, #80]	; 0x50
 800fd2e:	e5ca      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800fd30:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fd34:	2101      	movs	r1, #1
 800fd36:	1d20      	adds	r0, r4, #4
 800fd38:	f7ff fba2 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800fd3c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fd3e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fd40:	2d00      	cmp	r5, #0
 800fd42:	f040 80d4 	bne.w	800feee <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800fd46:	49aa      	ldr	r1, [pc, #680]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fd48:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800fd4a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800fd4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fd50:	4302      	orrs	r2, r0
 800fd52:	64ca      	str	r2, [r1, #76]	; 0x4c
 800fd54:	e5a7      	b.n	800f8a6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fd56:	2101      	movs	r1, #1
 800fd58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fd5c:	f7ff fc0a 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fd60:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fd62:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fd64:	2d00      	cmp	r5, #0
 800fd66:	f040 8094 	bne.w	800fe92 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fd6a:	49a1      	ldr	r1, [pc, #644]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fd6c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800fd6e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800fd70:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800fd74:	4302      	orrs	r2, r0
 800fd76:	654a      	str	r2, [r1, #84]	; 0x54
 800fd78:	e63b      	b.n	800f9f2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800fd7a:	2102      	movs	r1, #2
 800fd7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fd80:	f7ff fbf8 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fd84:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800fd86:	2800      	cmp	r0, #0
 800fd88:	f43f af14 	beq.w	800fbb4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      status=HAL_ERROR;
 800fd8c:	2601      	movs	r6, #1
 800fd8e:	e711      	b.n	800fbb4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fd90:	4f98      	ldr	r7, [pc, #608]	; (800fff4 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd98:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800fd9a:	f7fa fecf 	bl	800ab3c <HAL_GetTick>
 800fd9e:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fda0:	e006      	b.n	800fdb0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fda2:	f7fa fecb 	bl	800ab3c <HAL_GetTick>
 800fda6:	eba0 0008 	sub.w	r0, r0, r8
 800fdaa:	2864      	cmp	r0, #100	; 0x64
 800fdac:	f200 8188 	bhi.w	80100c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	05da      	lsls	r2, r3, #23
 800fdb4:	d5f5      	bpl.n	800fda2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    if(ret == HAL_OK)
 800fdb6:	2d00      	cmp	r5, #0
 800fdb8:	f040 81a4 	bne.w	8010104 <HAL_RCCEx_PeriphCLKConfig+0xa9c>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800fdbc:	4a8c      	ldr	r2, [pc, #560]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fdbe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800fdc2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800fdc4:	4059      	eors	r1, r3
 800fdc6:	f411 7f40 	tst.w	r1, #768	; 0x300
 800fdca:	d00b      	beq.n	800fde4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fdcc:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800fdce:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fdd0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800fdd4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800fdd8:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fdda:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800fddc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800fde0:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800fde2:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800fde4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fde8:	f000 816e 	beq.w	80100c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fdec:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800fdf0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800fdf4:	f000 817c 	beq.w	80100f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 800fdf8:	497d      	ldr	r1, [pc, #500]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fdfa:	690a      	ldr	r2, [r1, #16]
 800fdfc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800fe00:	610a      	str	r2, [r1, #16]
 800fe02:	4a7b      	ldr	r2, [pc, #492]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fe04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fe08:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800fe0a:	430b      	orrs	r3, r1
 800fe0c:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800fe0e:	6823      	ldr	r3, [r4, #0]
 800fe10:	e5bd      	b.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800fe12:	462e      	mov	r6, r5
 800fe14:	e47f      	b.n	800f716 <HAL_RCCEx_PeriphCLKConfig+0xae>
 800fe16:	462e      	mov	r6, r5
 800fe18:	e49f      	b.n	800f75a <HAL_RCCEx_PeriphCLKConfig+0xf2>
 800fe1a:	462e      	mov	r6, r5
 800fe1c:	e4fa      	b.n	800f814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800fe1e:	462e      	mov	r6, r5
 800fe20:	e45b      	b.n	800f6da <HAL_RCCEx_PeriphCLKConfig+0x72>
 800fe22:	462e      	mov	r6, r5
 800fe24:	e4bb      	b.n	800f79e <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800fe26:	2102      	movs	r1, #2
 800fe28:	1d20      	adds	r0, r4, #4
 800fe2a:	f7ff fb29 	bl	800f480 <RCCEx_PLL2_Config>
 800fe2e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fe30:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800fe32:	2d00      	cmp	r5, #0
 800fe34:	d164      	bne.n	800ff00 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fe36:	496e      	ldr	r1, [pc, #440]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fe38:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800fe3a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800fe3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fe40:	4302      	orrs	r2, r0
 800fe42:	64ca      	str	r2, [r1, #76]	; 0x4c
 800fe44:	e6b3      	b.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x546>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe46:	486a      	ldr	r0, [pc, #424]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fe48:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800fe4a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800fe4e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800fe50:	e427      	b.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe52:	4967      	ldr	r1, [pc, #412]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fe54:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800fe56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fe5a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800fe5c:	e472      	b.n	800f744 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe5e:	4964      	ldr	r1, [pc, #400]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fe60:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800fe62:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fe66:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800fe68:	e44b      	b.n	800f702 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe6a:	4961      	ldr	r1, [pc, #388]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fe6c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800fe6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fe72:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800fe74:	e488      	b.n	800f788 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe76:	495e      	ldr	r1, [pc, #376]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fe78:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800fe7a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fe7e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800fe80:	e4be      	b.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800fe82:	462e      	mov	r6, r5
 800fe84:	e687      	b.n	800fb96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
 800fe86:	462e      	mov	r6, r5
 800fe88:	e626      	b.n	800fad8 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800fe8a:	462e      	mov	r6, r5
 800fe8c:	e604      	b.n	800fa98 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800fe8e:	462e      	mov	r6, r5
 800fe90:	e642      	b.n	800fb18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800fe92:	462e      	mov	r6, r5
 800fe94:	e5ad      	b.n	800f9f2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fe96:	4956      	ldr	r1, [pc, #344]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fe98:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800fe9c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fe9e:	f022 0207 	bic.w	r2, r2, #7
 800fea2:	4302      	orrs	r2, r0
 800fea4:	658a      	str	r2, [r1, #88]	; 0x58
 800fea6:	e5d7      	b.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800fea8:	4951      	ldr	r1, [pc, #324]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800feaa:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800feac:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800feae:	f022 0207 	bic.w	r2, r2, #7
 800feb2:	4302      	orrs	r2, r0
 800feb4:	654a      	str	r2, [r1, #84]	; 0x54
 800feb6:	e5b5      	b.n	800fa24 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800feb8:	462e      	mov	r6, r5
 800feba:	e4e8      	b.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800febc:	494c      	ldr	r1, [pc, #304]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800febe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800fec0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800fec2:	f022 0203 	bic.w	r2, r2, #3
 800fec6:	4302      	orrs	r2, r0
 800fec8:	64ca      	str	r2, [r1, #76]	; 0x4c
 800feca:	e55d      	b.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x320>
 800fecc:	462e      	mov	r6, r5
 800fece:	e481      	b.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800fed0:	462e      	mov	r6, r5
 800fed2:	e4bd      	b.n	800f850 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800fed4:	462e      	mov	r6, r5
 800fed6:	e4f6      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800fed8:	462e      	mov	r6, r5
 800feda:	e64a      	b.n	800fb72 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fedc:	4844      	ldr	r0, [pc, #272]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fede:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800fee0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800fee4:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800fee6:	2d00      	cmp	r5, #0
 800fee8:	f47f aecf 	bne.w	800fc8a <HAL_RCCEx_PeriphCLKConfig+0x622>
 800feec:	e6d3      	b.n	800fc96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800feee:	462e      	mov	r6, r5
 800fef0:	e4d9      	b.n	800f8a6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fef2:	493f      	ldr	r1, [pc, #252]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800fef4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800fef6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fefa:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800fefc:	2d00      	cmp	r5, #0
 800fefe:	d09a      	beq.n	800fe36 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800ff00:	462e      	mov	r6, r5
 800ff02:	e654      	b.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x546>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ff04:	493a      	ldr	r1, [pc, #232]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800ff06:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ff08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ff0c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800ff0e:	2d00      	cmp	r5, #0
 800ff10:	d1b7      	bne.n	800fe82 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800ff12:	e6e0      	b.n	800fcd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ff14:	1d20      	adds	r0, r4, #4
 800ff16:	f7ff fab3 	bl	800f480 <RCCEx_PLL2_Config>
 800ff1a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ff1c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ff1e:	2d00      	cmp	r5, #0
 800ff20:	d1da      	bne.n	800fed8 <HAL_RCCEx_PeriphCLKConfig+0x870>
 800ff22:	e6eb      	b.n	800fcfc <HAL_RCCEx_PeriphCLKConfig+0x694>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ff24:	2102      	movs	r1, #2
 800ff26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ff2a:	f7ff fb23 	bl	800f574 <RCCEx_PLL3_Config>
 800ff2e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ff30:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ff32:	2d00      	cmp	r5, #0
 800ff34:	d1a7      	bne.n	800fe86 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800ff36:	e5c7      	b.n	800fac8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ff38:	2102      	movs	r1, #2
 800ff3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ff3e:	f7ff fb19 	bl	800f574 <RCCEx_PLL3_Config>
 800ff42:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ff44:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	d1a1      	bne.n	800fe8e <HAL_RCCEx_PeriphCLKConfig+0x826>
 800ff4a:	e5dd      	b.n	800fb08 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ff4c:	2102      	movs	r1, #2
 800ff4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ff52:	f7ff fb0f 	bl	800f574 <RCCEx_PLL3_Config>
 800ff56:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ff58:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ff5a:	2d00      	cmp	r5, #0
 800ff5c:	d195      	bne.n	800fe8a <HAL_RCCEx_PeriphCLKConfig+0x822>
 800ff5e:	e593      	b.n	800fa88 <HAL_RCCEx_PeriphCLKConfig+0x420>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ff60:	2101      	movs	r1, #1
 800ff62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ff66:	f7ff fb05 	bl	800f574 <RCCEx_PLL3_Config>
 800ff6a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ff6c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ff6e:	2d00      	cmp	r5, #0
 800ff70:	d1ae      	bne.n	800fed0 <HAL_RCCEx_PeriphCLKConfig+0x868>
 800ff72:	e466      	b.n	800f842 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ff74:	2101      	movs	r1, #1
 800ff76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ff7a:	f7ff fafb 	bl	800f574 <RCCEx_PLL3_Config>
 800ff7e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800ff80:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ff82:	2d00      	cmp	r5, #0
 800ff84:	d198      	bne.n	800feb8 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800ff86:	e47a      	b.n	800f87e <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ff88:	4919      	ldr	r1, [pc, #100]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800ff8a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ff8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ff90:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800ff92:	2d00      	cmp	r5, #0
 800ff94:	f47f acf7 	bne.w	800f986 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 800ff98:	e790      	b.n	800febc <HAL_RCCEx_PeriphCLKConfig+0x854>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ff9a:	2102      	movs	r1, #2
 800ff9c:	1d20      	adds	r0, r4, #4
 800ff9e:	f7ff fa6f 	bl	800f480 <RCCEx_PLL2_Config>
 800ffa2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ffa4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ffa6:	2d00      	cmp	r5, #0
 800ffa8:	d190      	bne.n	800fecc <HAL_RCCEx_PeriphCLKConfig+0x864>
 800ffaa:	e40c      	b.n	800f7c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ffac:	4910      	ldr	r1, [pc, #64]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800ffae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ffb0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ffb4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800ffb6:	2d00      	cmp	r5, #0
 800ffb8:	d18c      	bne.n	800fed4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800ffba:	e6b1      	b.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ffbc:	2102      	movs	r1, #2
 800ffbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ffc2:	f7ff fad7 	bl	800f574 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ffc6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ffca:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	f43f adb9 	beq.w	800fb44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        status = HAL_ERROR;
 800ffd2:	2601      	movs	r6, #1
 800ffd4:	e5b6      	b.n	800fb44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ffd6:	2102      	movs	r1, #2
 800ffd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ffdc:	f7ff faca 	bl	800f574 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ffe0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ffe4:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ffe6:	2800      	cmp	r0, #0
 800ffe8:	f43f ad9e 	beq.w	800fb28 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
          status = HAL_ERROR;
 800ffec:	2601      	movs	r6, #1
 800ffee:	e59b      	b.n	800fb28 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800fff0:	58024400 	.word	0x58024400
 800fff4:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fff8:	2100      	movs	r1, #0
 800fffa:	1d20      	adds	r0, r4, #4
 800fffc:	f7ff fa40 	bl	800f480 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010000:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010002:	4605      	mov	r5, r0
      break;
 8010004:	e652      	b.n	800fcac <HAL_RCCEx_PeriphCLKConfig+0x644>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010006:	6823      	ldr	r3, [r4, #0]
 8010008:	f7ff bb52 	b.w	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801000c:	2100      	movs	r1, #0
 801000e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010012:	f7ff faaf 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010016:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010018:	4605      	mov	r5, r0
      break;
 801001a:	f7ff bbb5 	b.w	800f788 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801001e:	2100      	movs	r1, #0
 8010020:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010024:	f7ff faa6 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010028:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801002a:	4605      	mov	r5, r0
      break;
 801002c:	e63e      	b.n	800fcac <HAL_RCCEx_PeriphCLKConfig+0x644>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801002e:	2100      	movs	r1, #0
 8010030:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010034:	f7ff fa9e 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010038:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801003a:	4605      	mov	r5, r0
      break;
 801003c:	f7ff bbe0 	b.w	800f800 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010040:	4938      	ldr	r1, [pc, #224]	; (8010124 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
      break;
 8010042:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010044:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010046:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801004a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 801004c:	e62e      	b.n	800fcac <HAL_RCCEx_PeriphCLKConfig+0x644>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801004e:	2102      	movs	r1, #2
 8010050:	3024      	adds	r0, #36	; 0x24
 8010052:	f7ff fa8f 	bl	800f574 <RCCEx_PLL3_Config>
 8010056:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8010058:	2e00      	cmp	r6, #0
 801005a:	f43f ab20 	beq.w	800f69e <HAL_RCCEx_PeriphCLKConfig+0x36>
 801005e:	e7d2      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010060:	2100      	movs	r1, #0
 8010062:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010066:	f7ff fa85 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801006a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801006c:	4605      	mov	r5, r0
      break;
 801006e:	f7ff bb69 	b.w	800f744 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010072:	2100      	movs	r1, #0
 8010074:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010078:	f7ff fa7c 	bl	800f574 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801007c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801007e:	4605      	mov	r5, r0
      break;
 8010080:	f7ff bb3f 	b.w	800f702 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010084:	2101      	movs	r1, #1
 8010086:	1d20      	adds	r0, r4, #4
 8010088:	f7ff f9fa 	bl	800f480 <RCCEx_PLL2_Config>
 801008c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801008e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010090:	2d00      	cmp	r5, #0
 8010092:	f47f acc6 	bne.w	800fa22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8010096:	e707      	b.n	800fea8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010098:	2101      	movs	r1, #1
 801009a:	1d20      	adds	r0, r4, #4
 801009c:	f7ff f9f0 	bl	800f480 <RCCEx_PLL2_Config>
 80100a0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80100a2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80100a4:	2d00      	cmp	r5, #0
 80100a6:	f47f acd6 	bne.w	800fa56 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80100aa:	e6f4      	b.n	800fe96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80100ac:	2101      	movs	r1, #1
 80100ae:	1d20      	adds	r0, r4, #4
 80100b0:	f7ff f9e6 	bl	800f480 <RCCEx_PLL2_Config>
 80100b4:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80100b6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80100b8:	2d00      	cmp	r5, #0
 80100ba:	f47f aeea 	bne.w	800fe92 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 80100be:	e654      	b.n	800fd6a <HAL_RCCEx_PeriphCLKConfig+0x702>
            ret = HAL_TIMEOUT;
 80100c0:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80100c2:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 80100c4:	4635      	mov	r5, r6
 80100c6:	e462      	b.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0x326>
        tickstart = HAL_GetTick();
 80100c8:	f7fa fd38 	bl	800ab3c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80100cc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8010124 <HAL_RCCEx_PeriphCLKConfig+0xabc>
        tickstart = HAL_GetTick();
 80100d0:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80100d2:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80100d6:	e004      	b.n	80100e2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80100d8:	f7fa fd30 	bl	800ab3c <HAL_GetTick>
 80100dc:	1bc0      	subs	r0, r0, r7
 80100de:	4548      	cmp	r0, r9
 80100e0:	d8ee      	bhi.n	80100c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80100e2:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80100e6:	079b      	lsls	r3, r3, #30
 80100e8:	d5f6      	bpl.n	80100d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80100ea:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80100ee:	e67d      	b.n	800fdec <HAL_RCCEx_PeriphCLKConfig+0x784>
 80100f0:	480c      	ldr	r0, [pc, #48]	; (8010124 <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 80100f2:	4a0d      	ldr	r2, [pc, #52]	; (8010128 <HAL_RCCEx_PeriphCLKConfig+0xac0>)
 80100f4:	6901      	ldr	r1, [r0, #16]
 80100f6:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80100fa:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80100fe:	430a      	orrs	r2, r1
 8010100:	6102      	str	r2, [r0, #16]
 8010102:	e67e      	b.n	800fe02 <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010104:	6823      	ldr	r3, [r4, #0]
 8010106:	462e      	mov	r6, r5
 8010108:	e441      	b.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0x326>
    switch(PeriphClkInit->Sai1ClockSelection)
 801010a:	2601      	movs	r6, #1
 801010c:	f7ff bae4 	b.w	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->FmcClockSelection)
 8010110:	2601      	movs	r6, #1
 8010112:	4635      	mov	r5, r6
 8010114:	e438      	b.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x320>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8010116:	2601      	movs	r6, #1
 8010118:	4635      	mov	r5, r6
 801011a:	e483      	b.n	800fa24 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 801011c:	2601      	movs	r6, #1
 801011e:	4635      	mov	r5, r6
 8010120:	e49a      	b.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8010122:	bf00      	nop
 8010124:	58024400 	.word	0x58024400
 8010128:	00ffffcf 	.word	0x00ffffcf

0801012c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 801012c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801012e:	f7ff f8d7 	bl	800f2e0 <HAL_RCC_GetHCLKFreq>
 8010132:	4b05      	ldr	r3, [pc, #20]	; (8010148 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8010134:	4a05      	ldr	r2, [pc, #20]	; (801014c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8010136:	6a1b      	ldr	r3, [r3, #32]
 8010138:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801013c:	5cd3      	ldrb	r3, [r2, r3]
 801013e:	f003 031f 	and.w	r3, r3, #31
}
 8010142:	40d8      	lsrs	r0, r3
 8010144:	bd08      	pop	{r3, pc}
 8010146:	bf00      	nop
 8010148:	58024400 	.word	0x58024400
 801014c:	0805fab4 	.word	0x0805fab4

08010150 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010150:	4b4f      	ldr	r3, [pc, #316]	; (8010290 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8010152:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010154:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8010156:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010158:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 801015a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 801015e:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010162:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8010164:	d05c      	beq.n	8010220 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010166:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801016a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801016e:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010172:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8010176:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010178:	ee07 4a90 	vmov	s15, r4
 801017c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8010180:	d003      	beq.n	801018a <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8010182:	2902      	cmp	r1, #2
 8010184:	d075      	beq.n	8010272 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8010186:	2900      	cmp	r1, #0
 8010188:	d04f      	beq.n	801022a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801018a:	ee07 2a90 	vmov	s15, r2
 801018e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8010294 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8010192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010198:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801019c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8010298 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80101a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101a4:	ee06 3a90 	vmov	s13, r3
 80101a8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80101ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80101b0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80101b4:	eee7 6a25 	vfma.f32	s13, s14, s11
 80101b8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80101bc:	4a34      	ldr	r2, [pc, #208]	; (8010290 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 80101be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80101c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80101c4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80101c8:	ee07 3a10 	vmov	s14, r3
 80101cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80101d0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80101d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80101d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101de:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80101e2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80101e4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80101e8:	ee07 3a10 	vmov	s14, r3
 80101ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80101f0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80101f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101fc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8010200:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8010202:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8010206:	ee07 3a90 	vmov	s15, r3
 801020a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801020e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010216:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801021a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 801021e:	4770      	bx	lr
 8010220:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010222:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010226:	6082      	str	r2, [r0, #8]
}
 8010228:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801022a:	6819      	ldr	r1, [r3, #0]
 801022c:	0689      	lsls	r1, r1, #26
 801022e:	d527      	bpl.n	8010280 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010230:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010232:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010236:	4919      	ldr	r1, [pc, #100]	; (801029c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010238:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801023c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801023e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010246:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8010298 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 801024a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801024e:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010250:	ee06 3a90 	vmov	s13, r3
 8010254:	ee05 1a90 	vmov	s11, r1
 8010258:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801025c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8010260:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010264:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8010268:	eee7 6a05 	vfma.f32	s13, s14, s10
 801026c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010270:	e7a4      	b.n	80101bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010272:	ee07 2a90 	vmov	s15, r2
 8010276:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80102a0 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 801027a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801027e:	e78a      	b.n	8010196 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010280:	ee07 2a90 	vmov	s15, r2
 8010284:	eddf 6a07 	vldr	s13, [pc, #28]	; 80102a4 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8010288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801028c:	e783      	b.n	8010196 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 801028e:	bf00      	nop
 8010290:	58024400 	.word	0x58024400
 8010294:	4a742400 	.word	0x4a742400
 8010298:	39000000 	.word	0x39000000
 801029c:	03d09000 	.word	0x03d09000
 80102a0:	4bbebc20 	.word	0x4bbebc20
 80102a4:	4c742400 	.word	0x4c742400

080102a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80102a8:	4b4f      	ldr	r3, [pc, #316]	; (80103e8 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 80102aa:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80102ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80102ae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80102b0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 80102b2:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80102b6:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80102ba:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 80102bc:	d05c      	beq.n	8010378 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80102be:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80102c2:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80102c6:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80102ca:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80102ce:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80102d0:	ee07 4a90 	vmov	s15, r4
 80102d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80102d8:	d003      	beq.n	80102e2 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80102da:	2902      	cmp	r1, #2
 80102dc:	d075      	beq.n	80103ca <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 80102de:	2900      	cmp	r1, #0
 80102e0:	d04f      	beq.n	8010382 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80102e2:	ee07 2a90 	vmov	s15, r2
 80102e6:	eddf 6a41 	vldr	s13, [pc, #260]	; 80103ec <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80102ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102f0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80102f4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80103f0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80102f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102fc:	ee06 3a90 	vmov	s13, r3
 8010300:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8010304:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010308:	ee76 6a85 	vadd.f32	s13, s13, s10
 801030c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8010310:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8010314:	4a34      	ldr	r2, [pc, #208]	; (80103e8 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8010316:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801031a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801031c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8010320:	ee07 3a10 	vmov	s14, r3
 8010324:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8010328:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 801032a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801032e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010336:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801033a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801033c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8010340:	ee07 3a10 	vmov	s14, r3
 8010344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010348:	ee37 7a06 	vadd.f32	s14, s14, s12
 801034c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010354:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8010358:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801035a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 801035e:	ee07 3a90 	vmov	s15, r3
 8010362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010366:	ee77 7a86 	vadd.f32	s15, s15, s12
 801036a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801036e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010372:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8010376:	4770      	bx	lr
 8010378:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801037a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801037e:	6082      	str	r2, [r0, #8]
}
 8010380:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010382:	6819      	ldr	r1, [r3, #0]
 8010384:	0689      	lsls	r1, r1, #26
 8010386:	d527      	bpl.n	80103d8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010388:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801038a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801038e:	4919      	ldr	r1, [pc, #100]	; (80103f4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010390:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010396:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801039a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801039e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80103f0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80103a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80103a6:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80103a8:	ee06 3a90 	vmov	s13, r3
 80103ac:	ee05 1a90 	vmov	s11, r1
 80103b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80103b4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80103b8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80103bc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80103c0:	eee7 6a05 	vfma.f32	s13, s14, s10
 80103c4:	ee66 6a26 	vmul.f32	s13, s12, s13
 80103c8:	e7a4      	b.n	8010314 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80103ca:	ee07 2a90 	vmov	s15, r2
 80103ce:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80103f8 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80103d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103d6:	e78a      	b.n	80102ee <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80103d8:	ee07 2a90 	vmov	s15, r2
 80103dc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80103fc <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80103e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103e4:	e783      	b.n	80102ee <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80103e6:	bf00      	nop
 80103e8:	58024400 	.word	0x58024400
 80103ec:	4a742400 	.word	0x4a742400
 80103f0:	39000000 	.word	0x39000000
 80103f4:	03d09000 	.word	0x03d09000
 80103f8:	4bbebc20 	.word	0x4bbebc20
 80103fc:	4c742400 	.word	0x4c742400

08010400 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010400:	4b4f      	ldr	r3, [pc, #316]	; (8010540 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8010402:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010404:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8010406:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010408:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 801040a:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 801040e:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010412:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8010414:	d05c      	beq.n	80104d0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010416:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801041a:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801041e:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010422:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8010426:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010428:	ee07 4a90 	vmov	s15, r4
 801042c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8010430:	d003      	beq.n	801043a <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
 8010432:	2902      	cmp	r1, #2
 8010434:	d075      	beq.n	8010522 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8010436:	2900      	cmp	r1, #0
 8010438:	d04f      	beq.n	80104da <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801043a:	ee07 2a90 	vmov	s15, r2
 801043e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8010544 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8010442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010448:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801044c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8010548 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8010450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010454:	ee06 3a90 	vmov	s13, r3
 8010458:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801045c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010460:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010464:	eee7 6a25 	vfma.f32	s13, s14, s11
 8010468:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 801046c:	4a34      	ldr	r2, [pc, #208]	; (8010540 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 801046e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010472:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010474:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8010478:	ee07 3a10 	vmov	s14, r3
 801047c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8010480:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8010482:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801048a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801048e:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8010492:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010494:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8010498:	ee07 3a10 	vmov	s14, r3
 801049c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80104a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80104a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80104a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80104ac:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80104b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80104b2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80104b6:	ee07 3a90 	vmov	s15, r3
 80104ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104be:	ee77 7a86 	vadd.f32	s15, s15, s12
 80104c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104c6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80104ca:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80104ce:	4770      	bx	lr
 80104d0:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80104d2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80104d6:	6082      	str	r2, [r0, #8]
}
 80104d8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80104da:	6819      	ldr	r1, [r3, #0]
 80104dc:	0689      	lsls	r1, r1, #26
 80104de:	d527      	bpl.n	8010530 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80104e0:	681c      	ldr	r4, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80104e2:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80104e6:	4919      	ldr	r1, [pc, #100]	; (801054c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80104e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80104ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80104ee:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80104f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104f6:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8010548 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 80104fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80104fe:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010500:	ee06 3a90 	vmov	s13, r3
 8010504:	ee05 1a90 	vmov	s11, r1
 8010508:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801050c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8010510:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010514:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8010518:	eee7 6a05 	vfma.f32	s13, s14, s10
 801051c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010520:	e7a4      	b.n	801046c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010522:	ee07 2a90 	vmov	s15, r2
 8010526:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8010550 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 801052a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801052e:	e78a      	b.n	8010446 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010530:	ee07 2a90 	vmov	s15, r2
 8010534:	eddf 6a07 	vldr	s13, [pc, #28]	; 8010554 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8010538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801053c:	e783      	b.n	8010446 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 801053e:	bf00      	nop
 8010540:	58024400 	.word	0x58024400
 8010544:	4a742400 	.word	0x4a742400
 8010548:	39000000 	.word	0x39000000
 801054c:	03d09000 	.word	0x03d09000
 8010550:	4bbebc20 	.word	0x4bbebc20
 8010554:	4c742400 	.word	0x4c742400

08010558 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010558:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 801055c:	b500      	push	{lr}
 801055e:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010560:	d050      	beq.n	8010604 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010562:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8010566:	d019      	beq.n	801059c <HAL_RCCEx_GetPeriphCLKFreq+0x44>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010568:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801056c:	f000 808a 	beq.w	8010684 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010570:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8010574:	d05a      	beq.n	801062c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010576:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 801057a:	d034      	beq.n	80105e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801057c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8010580:	f000 80b1 	beq.w	80106e6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010584:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010588:	f000 80be 	beq.w	8010708 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801058c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8010590:	f000 8096 	beq.w	80106c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      frequency = 0;
 8010594:	2000      	movs	r0, #0
}
 8010596:	b005      	add	sp, #20
 8010598:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 801059c:	4a70      	ldr	r2, [pc, #448]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 801059e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80105a0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 80105a4:	2b80      	cmp	r3, #128	; 0x80
 80105a6:	d059      	beq.n	801065c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80105a8:	d912      	bls.n	80105d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80105aa:	2bc0      	cmp	r3, #192	; 0xc0
 80105ac:	d026      	beq.n	80105fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80105ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105b2:	d1ef      	bne.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80105b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80105b6:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80105ba:	d05b      	beq.n	8010674 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80105bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80105c0:	f000 80a0 	beq.w	8010704 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
            frequency = HSE_VALUE;
 80105c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105c8:	4866      	ldr	r0, [pc, #408]	; (8010764 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 80105ca:	bf18      	it	ne
 80105cc:	2000      	movne	r0, #0
 80105ce:	e7e2      	b.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d03c      	beq.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80105d4:	2b40      	cmp	r3, #64	; 0x40
 80105d6:	d1dd      	bne.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80105d8:	a801      	add	r0, sp, #4
 80105da:	f7ff fdb9 	bl	8010150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80105de:	9801      	ldr	r0, [sp, #4]
}
 80105e0:	b005      	add	sp, #20
 80105e2:	f85d fb04 	ldr.w	pc, [sp], #4
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80105e6:	4a5e      	ldr	r2, [pc, #376]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80105e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80105ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80105ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105f2:	d033      	beq.n	801065c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80105f4:	d929      	bls.n	801064a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80105f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80105fa:	d158      	bne.n	80106ae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = EXTERNAL_CLOCK_VALUE;
 80105fc:	485a      	ldr	r0, [pc, #360]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
}
 80105fe:	b005      	add	sp, #20
 8010600:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8010604:	4b56      	ldr	r3, [pc, #344]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010608:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 801060c:	2b04      	cmp	r3, #4
 801060e:	d8c1      	bhi.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8010610:	a201      	add	r2, pc, #4	; (adr r2, 8010618 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8010612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010616:	bf00      	nop
 8010618:	0801064f 	.word	0x0801064f
 801061c:	080105d9 	.word	0x080105d9
 8010620:	0801065d 	.word	0x0801065d
 8010624:	080105fd 	.word	0x080105fd
 8010628:	0801066b 	.word	0x0801066b
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 801062c:	4a4c      	ldr	r2, [pc, #304]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 801062e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010630:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8010634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010638:	d010      	beq.n	801065c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 801063a:	d91d      	bls.n	8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 801063c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010640:	d0dc      	beq.n	80105fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8010642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010646:	d0b5      	beq.n	80105b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8010648:	e7a4      	b.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 801064a:	2b00      	cmp	r3, #0
 801064c:	d134      	bne.n	80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801064e:	a801      	add	r0, sp, #4
 8010650:	f7ff fed6 	bl	8010400 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010654:	9802      	ldr	r0, [sp, #8]
}
 8010656:	b005      	add	sp, #20
 8010658:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801065c:	a801      	add	r0, sp, #4
 801065e:	f7ff fe23 	bl	80102a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010662:	9801      	ldr	r0, [sp, #4]
}
 8010664:	b005      	add	sp, #20
 8010666:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801066a:	4b3d      	ldr	r3, [pc, #244]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 801066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801066e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8010672:	d1a3      	bne.n	80105bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSI_VALUE;
 8010674:	483d      	ldr	r0, [pc, #244]	; (801076c <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8010676:	e78e      	b.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 8010678:	2b00      	cmp	r3, #0
 801067a:	d0e8      	beq.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 801067c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010680:	d0aa      	beq.n	80105d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8010682:	e787      	b.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8010684:	4a36      	ldr	r2, [pc, #216]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010686:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010688:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 801068c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010690:	d0e4      	beq.n	801065c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8010692:	d805      	bhi.n	80106a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8010694:	2b00      	cmp	r3, #0
 8010696:	d0da      	beq.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8010698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801069c:	d09c      	beq.n	80105d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 801069e:	e779      	b.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80106a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80106a4:	d0aa      	beq.n	80105fc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80106a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80106aa:	d083      	beq.n	80105b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 80106ac:	e772      	b.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 80106ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80106b2:	f43f af7f 	beq.w	80105b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 80106b6:	e76d      	b.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80106b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106bc:	d08c      	beq.n	80105d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 80106be:	e769      	b.n	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80106c0:	4b27      	ldr	r3, [pc, #156]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80106c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106c4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80106c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80106cc:	d0d2      	beq.n	8010674 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 80106ce:	d824      	bhi.n	801071a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80106d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106d4:	d03e      	beq.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80106d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106da:	d127      	bne.n	801072c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106dc:	a801      	add	r0, sp, #4
 80106de:	f7ff fde3 	bl	80102a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80106e2:	9802      	ldr	r0, [sp, #8]
          break;
 80106e4:	e757      	b.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80106e6:	4a1e      	ldr	r2, [pc, #120]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80106e8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80106ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 80106ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106f2:	d02a      	beq.n	801074a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 80106f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106f8:	f43f af5c 	beq.w	80105b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f47f af49 	bne.w	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8010702:	e769      	b.n	80105d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      switch (srcclk)
 8010704:	481a      	ldr	r0, [pc, #104]	; (8010770 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 8010706:	e746      	b.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8010708:	4b15      	ldr	r3, [pc, #84]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 801070a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 801070c:	03db      	lsls	r3, r3, #15
 801070e:	d59e      	bpl.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010710:	a801      	add	r0, sp, #4
 8010712:	f7ff fd1d 	bl	8010150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010716:	9803      	ldr	r0, [sp, #12]
          break;
 8010718:	e73d      	b.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 801071a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801071e:	d0f1      	beq.n	8010704 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          frequency = HSE_VALUE;
 8010720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010724:	480f      	ldr	r0, [pc, #60]	; (8010764 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8010726:	bf18      	it	ne
 8010728:	2000      	movne	r0, #0
 801072a:	e734      	b.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 801072c:	2b00      	cmp	r3, #0
 801072e:	f47f af31 	bne.w	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010732:	f7fe fdd5 	bl	800f2e0 <HAL_RCC_GetHCLKFreq>
 8010736:	4b0a      	ldr	r3, [pc, #40]	; (8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010738:	4a0e      	ldr	r2, [pc, #56]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>)
 801073a:	6a1b      	ldr	r3, [r3, #32]
 801073c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010740:	5cd3      	ldrb	r3, [r2, r3]
 8010742:	f003 031f 	and.w	r3, r3, #31
 8010746:	40d8      	lsrs	r0, r3
          break;
 8010748:	e725      	b.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801074a:	a801      	add	r0, sp, #4
 801074c:	f7ff fdac 	bl	80102a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010750:	9803      	ldr	r0, [sp, #12]
          break;
 8010752:	e720      	b.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010754:	a801      	add	r0, sp, #4
 8010756:	f7ff fcfb 	bl	8010150 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801075a:	9802      	ldr	r0, [sp, #8]
          break;
 801075c:	e71b      	b.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 801075e:	bf00      	nop
 8010760:	58024400 	.word	0x58024400
 8010764:	017d7840 	.word	0x017d7840
 8010768:	00bb8000 	.word	0x00bb8000
 801076c:	03d09000 	.word	0x03d09000
 8010770:	003d0900 	.word	0x003d0900
 8010774:	0805fab4 	.word	0x0805fab4

08010778 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8010778:	2800      	cmp	r0, #0
 801077a:	d036      	beq.n	80107ea <HAL_RNG_Init+0x72>
{
 801077c:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801077e:	7a43      	ldrb	r3, [r0, #9]
 8010780:	4604      	mov	r4, r0
 8010782:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010786:	b333      	cbz	r3, 80107d6 <HAL_RNG_Init+0x5e>
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8010788:	6823      	ldr	r3, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 801078a:	2202      	movs	r2, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 801078c:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 801078e:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	f022 0220 	bic.w	r2, r2, #32
 8010796:	430a      	orrs	r2, r1
 8010798:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	f042 0204 	orr.w	r2, r2, #4
 80107a0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	065b      	lsls	r3, r3, #25
 80107a6:	d503      	bpl.n	80107b0 <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80107a8:	2304      	movs	r3, #4
    return HAL_ERROR;
 80107aa:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 80107ac:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80107ae:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 80107b0:	f7fa f9c4 	bl	800ab3c <HAL_GetTick>
 80107b4:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80107b6:	e004      	b.n	80107c2 <HAL_RNG_Init+0x4a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80107b8:	f7fa f9c0 	bl	800ab3c <HAL_GetTick>
 80107bc:	1b43      	subs	r3, r0, r5
 80107be:	2b02      	cmp	r3, #2
 80107c0:	d80d      	bhi.n	80107de <HAL_RNG_Init+0x66>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80107c2:	6823      	ldr	r3, [r4, #0]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	f013 0304 	ands.w	r3, r3, #4
 80107ca:	d1f5      	bne.n	80107b8 <HAL_RNG_Init+0x40>
  hrng->State = HAL_RNG_STATE_READY;
 80107cc:	2201      	movs	r2, #1
  return HAL_OK;
 80107ce:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 80107d0:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80107d2:	60e3      	str	r3, [r4, #12]
}
 80107d4:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80107d6:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80107d8:	f7f5 fbf6 	bl	8005fc8 <HAL_RNG_MspInit>
 80107dc:	e7d4      	b.n	8010788 <HAL_RNG_Init+0x10>
      hrng->State = HAL_RNG_STATE_ERROR;
 80107de:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80107e0:	2302      	movs	r3, #2
      return HAL_ERROR;
 80107e2:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 80107e4:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80107e6:	60e3      	str	r3, [r4, #12]
}
 80107e8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80107ea:	2001      	movs	r0, #1
}
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop

080107f0 <HAL_RNG_DeInit>:
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;

#endif /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80107f0:	b1b0      	cbz	r0, 8010820 <HAL_RNG_DeInit+0x30>
    }
  }

#else
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 80107f2:	6803      	ldr	r3, [r0, #0]
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	f022 0220 	bic.w	r2, r2, #32
{
 80107fa:	b510      	push	{r4, lr}
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 80107fc:	601a      	str	r2, [r3, #0]
 80107fe:	4604      	mov	r4, r0
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	f022 020c 	bic.w	r2, r2, #12
 8010806:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 8010808:	685a      	ldr	r2, [r3, #4]
 801080a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801080e:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 8010810:	f7f5 fbf8 	bl	8006004 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8010814:	2300      	movs	r3, #0
 8010816:	7263      	strb	r3, [r4, #9]

  /* Release Lock */
  __HAL_UNLOCK(hrng);

  /* Return the function status */
  return HAL_OK;
 8010818:	4618      	mov	r0, r3
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801081a:	60e3      	str	r3, [r4, #12]
  __HAL_UNLOCK(hrng);
 801081c:	7223      	strb	r3, [r4, #8]
}
 801081e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010820:	2001      	movs	r0, #1
}
 8010822:	4770      	bx	lr

08010824 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8010824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8010828:	7a03      	ldrb	r3, [r0, #8]
 801082a:	2b01      	cmp	r3, #1
 801082c:	d028      	beq.n	8010880 <HAL_RNG_GenerateRandomNumber+0x5c>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801082e:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 8010830:	2201      	movs	r2, #1
 8010832:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 8010834:	4293      	cmp	r3, r2
 8010836:	fa5f f883 	uxtb.w	r8, r3
  __HAL_LOCK(hrng);
 801083a:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 801083c:	d007      	beq.n	801084e <HAL_RNG_GenerateRandomNumber+0x2a>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801083e:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8010840:	4690      	mov	r8, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8010842:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8010844:	2300      	movs	r3, #0
 8010846:	7223      	strb	r3, [r4, #8]

  return status;
}
 8010848:	4640      	mov	r0, r8
 801084a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 801084e:	2302      	movs	r3, #2
 8010850:	460e      	mov	r6, r1
 8010852:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8010854:	f7fa f972 	bl	800ab3c <HAL_GetTick>
 8010858:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801085a:	e004      	b.n	8010866 <HAL_RNG_GenerateRandomNumber+0x42>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801085c:	f7fa f96e 	bl	800ab3c <HAL_GetTick>
 8010860:	1bc0      	subs	r0, r0, r7
 8010862:	2802      	cmp	r0, #2
 8010864:	d811      	bhi.n	801088a <HAL_RNG_GenerateRandomNumber+0x66>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8010866:	6822      	ldr	r2, [r4, #0]
 8010868:	6855      	ldr	r5, [r2, #4]
 801086a:	f015 0501 	ands.w	r5, r5, #1
 801086e:	d0f5      	beq.n	801085c <HAL_RNG_GenerateRandomNumber+0x38>
    hrng->RandomNumber = hrng->Instance->DR;
 8010870:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8010872:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8010874:	f04f 0800 	mov.w	r8, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8010878:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 801087a:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 801087c:	7262      	strb	r2, [r4, #9]
 801087e:	e7e1      	b.n	8010844 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8010880:	f04f 0802 	mov.w	r8, #2
}
 8010884:	4640      	mov	r0, r8
 8010886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hrng->State = HAL_RNG_STATE_READY;
 801088a:	2201      	movs	r2, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801088c:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 801088e:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8010890:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8010892:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 8010894:	e7d8      	b.n	8010848 <HAL_RNG_GenerateRandomNumber+0x24>
 8010896:	bf00      	nop

08010898 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801089c:	4605      	mov	r5, r0
 801089e:	b086      	sub	sp, #24
 80108a0:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80108a2:	f7fa f94b 	bl	800ab3c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80108a6:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 80108a8:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80108aa:	6828      	ldr	r0, [r5, #0]
 80108ac:	f001 ffc2 	bl	8012834 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80108b0:	4604      	mov	r4, r0
 80108b2:	b118      	cbz	r0, 80108bc <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80108b4:	4620      	mov	r0, r4
 80108b6:	b006      	add	sp, #24
 80108b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80108bc:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80108be:	6828      	ldr	r0, [r5, #0]
 80108c0:	0409      	lsls	r1, r1, #16
 80108c2:	f002 fd11 	bl	80132e8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80108c6:	4604      	mov	r4, r0
 80108c8:	2800      	cmp	r0, #0
 80108ca:	d1f3      	bne.n	80108b4 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80108cc:	f04f 32ff 	mov.w	r2, #4294967295
 80108d0:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80108d2:	4669      	mov	r1, sp
 80108d4:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80108d6:	e9cd 2300 	strd	r2, r3, [sp]
 80108da:	2230      	movs	r2, #48	; 0x30
 80108dc:	2302      	movs	r3, #2
 80108de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80108e2:	2200      	movs	r2, #0
 80108e4:	2301      	movs	r3, #1
 80108e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80108ea:	f001 ff8d 	bl	8012808 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80108ee:	6828      	ldr	r0, [r5, #0]
 80108f0:	f002 fe80 	bl	80135f4 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80108f4:	4604      	mov	r4, r0
 80108f6:	2800      	cmp	r0, #0
 80108f8:	d1dc      	bne.n	80108b4 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 80108fa:	4682      	mov	sl, r0
 80108fc:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80108fe:	f240 582a 	movw	r8, #1322	; 0x52a
 8010902:	e004      	b.n	801090e <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010904:	f7fa f91a 	bl	800ab3c <HAL_GetTick>
 8010908:	1b83      	subs	r3, r0, r6
 801090a:	3301      	adds	r3, #1
 801090c:	d024      	beq.n	8010958 <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 801090e:	6828      	ldr	r0, [r5, #0]
 8010910:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010912:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8010916:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8010918:	d10c      	bne.n	8010934 <SD_FindSCR+0x9c>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 801091a:	0319      	lsls	r1, r3, #12
 801091c:	d4f2      	bmi.n	8010904 <SD_FindSCR+0x6c>
 801091e:	2c00      	cmp	r4, #0
 8010920:	d1f0      	bne.n	8010904 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8010922:	f001 ff4f 	bl	80127c4 <SDMMC_ReadFIFO>
 8010926:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8010928:	6828      	ldr	r0, [r5, #0]
      index++;
 801092a:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 801092c:	f001 ff4a 	bl	80127c4 <SDMMC_ReadFIFO>
 8010930:	4682      	mov	sl, r0
      index++;
 8010932:	e7e7      	b.n	8010904 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010934:	071a      	lsls	r2, r3, #28
 8010936:	d416      	bmi.n	8010966 <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010938:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801093a:	079b      	lsls	r3, r3, #30
 801093c:	d40f      	bmi.n	801095e <SD_FindSCR+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801093e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010940:	f014 0420 	ands.w	r4, r4, #32
 8010944:	d113      	bne.n	801096e <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010946:	fa9a f28a 	rev.w	r2, sl
 801094a:	fa99 f389 	rev.w	r3, r9
 801094e:	490a      	ldr	r1, [pc, #40]	; (8010978 <SD_FindSCR+0xe0>)
 8010950:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010952:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8010956:	e7ad      	b.n	80108b4 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8010958:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801095c:	e7aa      	b.n	80108b4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801095e:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010960:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010962:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010964:	e7a6      	b.n	80108b4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010966:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010968:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801096a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801096c:	e7a2      	b.n	80108b4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801096e:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8010970:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010972:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8010974:	e79e      	b.n	80108b4 <SD_FindSCR+0x1c>
 8010976:	bf00      	nop
 8010978:	18000f3a 	.word	0x18000f3a

0801097c <SD_HighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SD_HighSpeed(SD_HandleTypeDef *hsd)
{
 801097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010980:	b096      	sub	sp, #88	; 0x58
 8010982:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8010984:	2240      	movs	r2, #64	; 0x40
 8010986:	2100      	movs	r1, #0
 8010988:	a806      	add	r0, sp, #24
 801098a:	f011 fca7 	bl	80222dc <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 801098e:	f7fa f8d5 	bl	800ab3c <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8010992:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8010994:	b13b      	cbz	r3, 80109a6 <SD_HighSpeed+0x2a>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801099a:	d00a      	beq.n	80109b2 <SD_HighSpeed+0x36>
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);


    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 801099c:	2600      	movs	r6, #0
    }

  }

  return errorstate;
}
 801099e:	4630      	mov	r0, r6
 80109a0:	b016      	add	sp, #88	; 0x58
 80109a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80109a6:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
}
 80109aa:	4630      	mov	r0, r6
 80109ac:	b016      	add	sp, #88	; 0x58
 80109ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 80109b2:	2300      	movs	r3, #0
 80109b4:	4607      	mov	r7, r0
 80109b6:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80109b8:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 80109ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80109bc:	f001 ff3a 	bl	8012834 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 80109c0:	4606      	mov	r6, r0
 80109c2:	2800      	cmp	r0, #0
 80109c4:	d1eb      	bne.n	801099e <SD_HighSpeed+0x22>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80109c6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ca:	2340      	movs	r3, #64	; 0x40
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80109cc:	4669      	mov	r1, sp
 80109ce:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80109d0:	e9cd 2300 	strd	r2, r3, [sp]
 80109d4:	2260      	movs	r2, #96	; 0x60
 80109d6:	2302      	movs	r3, #2
 80109d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80109dc:	2200      	movs	r2, #0
 80109de:	2301      	movs	r3, #1
 80109e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80109e4:	f001 ff10 	bl	8012808 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 80109e8:	4925      	ldr	r1, [pc, #148]	; (8010a80 <SD_HighSpeed+0x104>)
 80109ea:	6820      	ldr	r0, [r4, #0]
 80109ec:	f003 f8ce 	bl	8013b8c <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 80109f0:	4606      	mov	r6, r0
 80109f2:	2800      	cmp	r0, #0
 80109f4:	d1d3      	bne.n	801099e <SD_HighSpeed+0x22>
  uint32_t count, loop = 0 ;
 80109f6:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80109f8:	f240 5a2a 	movw	sl, #1322	; 0x52a
 80109fc:	e004      	b.n	8010a08 <SD_HighSpeed+0x8c>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 80109fe:	f7fa f89d 	bl	800ab3c <HAL_GetTick>
 8010a02:	1bc0      	subs	r0, r0, r7
 8010a04:	3001      	adds	r0, #1
 8010a06:	d029      	beq.n	8010a5c <SD_HighSpeed+0xe0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010a08:	6820      	ldr	r0, [r4, #0]
 8010a0a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010a0c:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010a10:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010a12:	d112      	bne.n	8010a3a <SD_HighSpeed+0xbe>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010a14:	0415      	lsls	r5, r2, #16
 8010a16:	d5f2      	bpl.n	80109fe <SD_HighSpeed+0x82>
 8010a18:	ab06      	add	r3, sp, #24
 8010a1a:	eb03 1549 	add.w	r5, r3, r9, lsl #5
 8010a1e:	ab0e      	add	r3, sp, #56	; 0x38
 8010a20:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 8010a24:	e000      	b.n	8010a28 <SD_HighSpeed+0xac>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8010a26:	6820      	ldr	r0, [r4, #0]
 8010a28:	f001 fecc 	bl	80127c4 <SDMMC_ReadFIFO>
 8010a2c:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 8010a30:	4545      	cmp	r5, r8
 8010a32:	d1f8      	bne.n	8010a26 <SD_HighSpeed+0xaa>
        loop ++;
 8010a34:	f109 0901 	add.w	r9, r9, #1
 8010a38:	e7e1      	b.n	80109fe <SD_HighSpeed+0x82>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010a3a:	0714      	lsls	r4, r2, #28
 8010a3c:	d415      	bmi.n	8010a6a <SD_HighSpeed+0xee>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010a3e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010a40:	0791      	lsls	r1, r2, #30
 8010a42:	d415      	bmi.n	8010a70 <SD_HighSpeed+0xf4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010a44:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010a46:	0692      	lsls	r2, r2, #26
 8010a48:	d416      	bmi.n	8010a78 <SD_HighSpeed+0xfc>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010a4a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010a4e:	490d      	ldr	r1, [pc, #52]	; (8010a84 <SD_HighSpeed+0x108>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010a50:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010a52:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010a54:	d4a2      	bmi.n	801099c <SD_HighSpeed+0x20>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8010a56:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8010a5a:	e7a0      	b.n	801099e <SD_HighSpeed+0x22>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010a5c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8010a60:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010a62:	63a6      	str	r6, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8010a64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8010a68:	e799      	b.n	801099e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010a6a:	2208      	movs	r2, #8
 8010a6c:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8010a6e:	e796      	b.n	801099e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010a70:	2202      	movs	r2, #2
      return errorstate;
 8010a72:	4616      	mov	r6, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010a74:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8010a76:	e792      	b.n	801099e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010a78:	2220      	movs	r2, #32
      return errorstate;
 8010a7a:	4616      	mov	r6, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010a7c:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8010a7e:	e78e      	b.n	801099e <SD_HighSpeed+0x22>
 8010a80:	80ffff01 	.word	0x80ffff01
 8010a84:	18000f3a 	.word	0x18000f3a

08010a88 <HAL_SD_MspInit>:
 8010a88:	4770      	bx	lr
 8010a8a:	bf00      	nop

08010a8c <HAL_SD_MspDeInit>:
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop

08010a90 <HAL_SD_ReadBlocks>:
{
 8010a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a94:	460d      	mov	r5, r1
 8010a96:	b087      	sub	sp, #28
 8010a98:	4680      	mov	r8, r0
 8010a9a:	4614      	mov	r4, r2
 8010a9c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8010a9e:	f7fa f84d 	bl	800ab3c <HAL_GetTick>
  if(NULL == pData)
 8010aa2:	2d00      	cmp	r5, #0
 8010aa4:	f000 8099 	beq.w	8010bda <HAL_SD_ReadBlocks+0x14a>
  if(hsd->State == HAL_SD_STATE_READY)
 8010aa8:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	fa5f f983 	uxtb.w	r9, r3
 8010ab2:	d17f      	bne.n	8010bb4 <HAL_SD_ReadBlocks+0x124>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010ab4:	19e3      	adds	r3, r4, r7
 8010ab6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010aba:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010abc:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010abe:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010ac2:	f200 8096 	bhi.w	8010bf2 <HAL_SD_ReadBlocks+0x162>
    hsd->State = HAL_SD_STATE_BUSY;
 8010ac6:	2303      	movs	r3, #3
 8010ac8:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8010aca:	f8d8 0000 	ldr.w	r0, [r8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010ace:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
 8010ad2:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010ad6:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8010ada:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010adc:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010ade:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010ae0:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8010ae4:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010ae8:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 8010aec:	bf18      	it	ne
 8010aee:	0264      	lslne	r4, r4, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010af0:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010af2:	027b      	lsls	r3, r7, #9
 8010af4:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010af6:	2390      	movs	r3, #144	; 0x90
 8010af8:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010afc:	f001 fe84 	bl	8012808 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8010b00:	f8d8 0000 	ldr.w	r0, [r8]
    if(NumberOfBlocks > 1U)
 8010b04:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8010b06:	68c3      	ldr	r3, [r0, #12]
 8010b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b0c:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8010b0e:	d95d      	bls.n	8010bcc <HAL_SD_ReadBlocks+0x13c>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8010b10:	4621      	mov	r1, r4
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8010b12:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8010b16:	f001 ffd9 	bl	8012acc <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	d173      	bne.n	8010c06 <HAL_SD_ReadBlocks+0x176>
    dataremaining = config.DataLength;
 8010b1e:	f8dd b004 	ldr.w	fp, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010b22:	e005      	b.n	8010b30 <HAL_SD_ReadBlocks+0xa0>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010b24:	f7fa f80a 	bl	800ab3c <HAL_GetTick>
 8010b28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b2a:	1b80      	subs	r0, r0, r6
 8010b2c:	4298      	cmp	r0, r3
 8010b2e:	d22b      	bcs.n	8010b88 <HAL_SD_ReadBlocks+0xf8>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010b30:	f8d8 0000 	ldr.w	r0, [r8]
 8010b34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010b36:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8010b3a:	d174      	bne.n	8010c26 <HAL_SD_ReadBlocks+0x196>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8010b3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010b3e:	041a      	lsls	r2, r3, #16
 8010b40:	d5f0      	bpl.n	8010b24 <HAL_SD_ReadBlocks+0x94>
 8010b42:	f1bb 0f1f 	cmp.w	fp, #31
 8010b46:	d9ed      	bls.n	8010b24 <HAL_SD_ReadBlocks+0x94>
 8010b48:	1d2c      	adds	r4, r5, #4
 8010b4a:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 8010b4e:	e001      	b.n	8010b54 <HAL_SD_ReadBlocks+0xc4>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8010b50:	f8d8 0000 	ldr.w	r0, [r8]
        for(count = 0U; count < 8U; count++)
 8010b54:	3404      	adds	r4, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 8010b56:	f001 fe35 	bl	80127c4 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8010b5a:	0a01      	lsrs	r1, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8010b5c:	0c02      	lsrs	r2, r0, #16
        for(count = 0U; count < 8U; count++)
 8010b5e:	4554      	cmp	r4, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8010b60:	ea4f 6310 	mov.w	r3, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 8010b64:	f804 0c08 	strb.w	r0, [r4, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8010b68:	f804 1c07 	strb.w	r1, [r4, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8010b6c:	f804 2c06 	strb.w	r2, [r4, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8010b70:	f804 3c05 	strb.w	r3, [r4, #-5]
        for(count = 0U; count < 8U; count++)
 8010b74:	d1ec      	bne.n	8010b50 <HAL_SD_ReadBlocks+0xc0>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010b76:	f7f9 ffe1 	bl	800ab3c <HAL_GetTick>
 8010b7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b7c:	1b80      	subs	r0, r0, r6
          tempbuff++;
 8010b7e:	3520      	adds	r5, #32
        dataremaining -= 32U;
 8010b80:	f1ab 0b20 	sub.w	fp, fp, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010b84:	4298      	cmp	r0, r3
 8010b86:	d3d3      	bcc.n	8010b30 <HAL_SD_ReadBlocks+0xa0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010b88:	f8d8 3000 	ldr.w	r3, [r8]
        return HAL_TIMEOUT;
 8010b8c:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010b90:	484d      	ldr	r0, [pc, #308]	; (8010cc8 <HAL_SD_ReadBlocks+0x238>)
        hsd->State= HAL_SD_STATE_READY;
 8010b92:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 8010b94:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010b96:	6398      	str	r0, [r3, #56]	; 0x38
}
 8010b98:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8010b9a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8010b9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010ba2:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8010ba6:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8010baa:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
}
 8010bae:	b007      	add	sp, #28
 8010bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010bb4:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    return HAL_ERROR;
 8010bb8:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010bbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010bc0:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
}
 8010bc4:	4648      	mov	r0, r9
 8010bc6:	b007      	add	sp, #28
 8010bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8010bcc:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010bce:	4621      	mov	r1, r4
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8010bd0:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010bd4:	f001 fed4 	bl	8012980 <SDMMC_CmdReadSingleBlock>
 8010bd8:	e79f      	b.n	8010b1a <HAL_SD_ReadBlocks+0x8a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010bda:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    return HAL_ERROR;
 8010bde:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8010be6:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010be8:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
}
 8010bec:	b007      	add	sp, #28
 8010bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010bf2:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
}
 8010bf6:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010bfc:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
}
 8010c00:	b007      	add	sp, #28
 8010c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c06:	f8d8 3000 	ldr.w	r3, [r8]
 8010c0a:	4a2f      	ldr	r2, [pc, #188]	; (8010cc8 <HAL_SD_ReadBlocks+0x238>)
 8010c0c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8010c0e:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8010c10:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8010c14:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 8010c16:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 8010c18:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8010c1c:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8010c20:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
          return HAL_ERROR;
 8010c24:	e7ce      	b.n	8010bc4 <HAL_SD_ReadBlocks+0x134>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8010c26:	68c3      	ldr	r3, [r0, #12]
 8010c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c2c:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010c2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c30:	05db      	lsls	r3, r3, #23
 8010c32:	d50b      	bpl.n	8010c4c <HAL_SD_ReadBlocks+0x1bc>
 8010c34:	2f01      	cmp	r7, #1
 8010c36:	d909      	bls.n	8010c4c <HAL_SD_ReadBlocks+0x1bc>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8010c38:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8010c3c:	2b03      	cmp	r3, #3
 8010c3e:	d005      	beq.n	8010c4c <HAL_SD_ReadBlocks+0x1bc>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010c40:	f002 f936 	bl	8012eb0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8010c44:	2800      	cmp	r0, #0
 8010c46:	d1de      	bne.n	8010c06 <HAL_SD_ReadBlocks+0x176>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010c48:	f8d8 0000 	ldr.w	r0, [r8]
 8010c4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c4e:	f013 0308 	ands.w	r3, r3, #8
 8010c52:	d115      	bne.n	8010c80 <HAL_SD_ReadBlocks+0x1f0>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010c54:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010c56:	f012 0202 	ands.w	r2, r2, #2
 8010c5a:	d120      	bne.n	8010c9e <HAL_SD_ReadBlocks+0x20e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010c5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c5e:	f013 0320 	ands.w	r3, r3, #32
 8010c62:	d02a      	beq.n	8010cba <HAL_SD_ReadBlocks+0x22a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c64:	4b18      	ldr	r3, [pc, #96]	; (8010cc8 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
 8010c66:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c68:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8010c6a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8010c6e:	f043 0320 	orr.w	r3, r3, #32
 8010c72:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010c76:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010c7a:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
      return HAL_ERROR;
 8010c7e:	e7a1      	b.n	8010bc4 <HAL_SD_ReadBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c80:	4b11      	ldr	r3, [pc, #68]	; (8010cc8 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
 8010c82:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c84:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010c86:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8010c8a:	f043 0308 	orr.w	r3, r3, #8
 8010c8e:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8010c92:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8010c94:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010c98:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      return HAL_ERROR;
 8010c9c:	e792      	b.n	8010bc4 <HAL_SD_ReadBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c9e:	4a0a      	ldr	r2, [pc, #40]	; (8010cc8 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
 8010ca0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010ca2:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010ca4:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8010ca8:	f042 0202 	orr.w	r2, r2, #2
 8010cac:	f8c8 2038 	str.w	r2, [r8, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010cb0:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010cb4:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      return HAL_ERROR;
 8010cb8:	e784      	b.n	8010bc4 <HAL_SD_ReadBlocks+0x134>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010cba:	4904      	ldr	r1, [pc, #16]	; (8010ccc <HAL_SD_ReadBlocks+0x23c>)
    hsd->State = HAL_SD_STATE_READY;
 8010cbc:	2201      	movs	r2, #1
    return HAL_OK;
 8010cbe:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010cc0:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010cc2:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
    return HAL_OK;
 8010cc6:	e77d      	b.n	8010bc4 <HAL_SD_ReadBlocks+0x134>
 8010cc8:	1fe00fff 	.word	0x1fe00fff
 8010ccc:	18000f3a 	.word	0x18000f3a

08010cd0 <HAL_SD_WriteBlocks>:
{
 8010cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cd4:	460d      	mov	r5, r1
 8010cd6:	b089      	sub	sp, #36	; 0x24
 8010cd8:	4604      	mov	r4, r0
 8010cda:	4692      	mov	sl, r2
 8010cdc:	461f      	mov	r7, r3
 8010cde:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8010ce2:	f7f9 ff2b 	bl	800ab3c <HAL_GetTick>
  if(NULL == pData)
 8010ce6:	2d00      	cmp	r5, #0
 8010ce8:	d079      	beq.n	8010dde <HAL_SD_WriteBlocks+0x10e>
  if(hsd->State == HAL_SD_STATE_READY)
 8010cea:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	fa5f f983 	uxtb.w	r9, r3
 8010cf4:	d164      	bne.n	8010dc0 <HAL_SD_WriteBlocks+0xf0>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010cf6:	eb0a 0307 	add.w	r3, sl, r7
 8010cfa:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010cfc:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010cfe:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010d00:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010d02:	d876      	bhi.n	8010df2 <HAL_SD_WriteBlocks+0x122>
    hsd->State = HAL_SD_STATE_BUSY;
 8010d04:	2303      	movs	r3, #3
 8010d06:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8010d08:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8010d0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010d0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8010d10:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010d12:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010d14:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8010d16:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010d1a:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8010d1e:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010d20:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 8010d24:	bf18      	it	ne
 8010d26:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010d2a:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010d2c:	027b      	lsls	r3, r7, #9
 8010d2e:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010d30:	2390      	movs	r3, #144	; 0x90
 8010d32:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010d34:	f001 fd68 	bl	8012808 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8010d38:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 8010d3a:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010d3c:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8010d3e:	68c3      	ldr	r3, [r0, #12]
 8010d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d44:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8010d46:	d945      	bls.n	8010dd4 <HAL_SD_WriteBlocks+0x104>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8010d48:	2320      	movs	r3, #32
 8010d4a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010d4c:	f002 f80a 	bl	8012d64 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d156      	bne.n	8010e02 <HAL_SD_WriteBlocks+0x132>
    dataremaining = config.DataLength;
 8010d54:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010d58:	e004      	b.n	8010d64 <HAL_SD_WriteBlocks+0x94>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010d5a:	f7f9 feef 	bl	800ab3c <HAL_GetTick>
 8010d5e:	1b80      	subs	r0, r0, r6
 8010d60:	4540      	cmp	r0, r8
 8010d62:	d21d      	bcs.n	8010da0 <HAL_SD_WriteBlocks+0xd0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010d64:	6820      	ldr	r0, [r4, #0]
 8010d66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010d68:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8010d6c:	d155      	bne.n	8010e1a <HAL_SD_WriteBlocks+0x14a>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8010d6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010d70:	045a      	lsls	r2, r3, #17
 8010d72:	d5f2      	bpl.n	8010d5a <HAL_SD_WriteBlocks+0x8a>
 8010d74:	f1bb 0f1f 	cmp.w	fp, #31
 8010d78:	d9ef      	bls.n	8010d5a <HAL_SD_WriteBlocks+0x8a>
 8010d7a:	f105 0a20 	add.w	sl, r5, #32
 8010d7e:	e000      	b.n	8010d82 <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010d80:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8010d82:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010d86:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8010d88:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010d8a:	f001 fd1f 	bl	80127cc <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8010d8e:	4555      	cmp	r5, sl
 8010d90:	d1f6      	bne.n	8010d80 <HAL_SD_WriteBlocks+0xb0>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010d92:	f7f9 fed3 	bl	800ab3c <HAL_GetTick>
 8010d96:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
 8010d98:	f1ab 0b20 	sub.w	fp, fp, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010d9c:	4540      	cmp	r0, r8
 8010d9e:	d3e1      	bcc.n	8010d64 <HAL_SD_WriteBlocks+0x94>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010da0:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
 8010da2:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010da6:	4840      	ldr	r0, [pc, #256]	; (8010ea8 <HAL_SD_WriteBlocks+0x1d8>)
        hsd->State = HAL_SD_STATE_READY;
 8010da8:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 8010daa:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010dac:	6388      	str	r0, [r1, #56]	; 0x38
}
 8010dae:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
 8010db0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010db2:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010db4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8010db8:	6323      	str	r3, [r4, #48]	; 0x30
}
 8010dba:	b009      	add	sp, #36	; 0x24
 8010dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010dc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8010dc2:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010dca:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8010dcc:	4648      	mov	r0, r9
 8010dce:	b009      	add	sp, #36	; 0x24
 8010dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8010dd4:	2310      	movs	r3, #16
 8010dd6:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010dd8:	f001 ff1e 	bl	8012c18 <SDMMC_CmdWriteSingleBlock>
 8010ddc:	e7b8      	b.n	8010d50 <HAL_SD_WriteBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010dde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8010de0:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010de4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8010de8:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010dea:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8010dec:	b009      	add	sp, #36	; 0x24
 8010dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010df2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8010df4:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010df6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010dfa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8010dfc:	b009      	add	sp, #36	; 0x24
 8010dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e02:	6823      	ldr	r3, [r4, #0]
 8010e04:	4a28      	ldr	r2, [pc, #160]	; (8010ea8 <HAL_SD_WriteBlocks+0x1d8>)
 8010e06:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8010e08:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8010e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e0c:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 8010e0e:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 8010e10:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8010e12:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8010e16:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8010e18:	e7d8      	b.n	8010dcc <HAL_SD_WriteBlocks+0xfc>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8010e1a:	68c3      	ldr	r3, [r0, #12]
 8010e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e20:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010e22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010e24:	05db      	lsls	r3, r3, #23
 8010e26:	d509      	bpl.n	8010e3c <HAL_SD_WriteBlocks+0x16c>
 8010e28:	2f01      	cmp	r7, #1
 8010e2a:	d907      	bls.n	8010e3c <HAL_SD_WriteBlocks+0x16c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8010e2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010e2e:	2b03      	cmp	r3, #3
 8010e30:	d004      	beq.n	8010e3c <HAL_SD_WriteBlocks+0x16c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010e32:	f002 f83d 	bl	8012eb0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d1e3      	bne.n	8010e02 <HAL_SD_WriteBlocks+0x132>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010e3a:	6820      	ldr	r0, [r4, #0]
 8010e3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010e3e:	f013 0308 	ands.w	r3, r3, #8
 8010e42:	d112      	bne.n	8010e6a <HAL_SD_WriteBlocks+0x19a>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010e44:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010e46:	f012 0202 	ands.w	r2, r2, #2
 8010e4a:	d11a      	bne.n	8010e82 <HAL_SD_WriteBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8010e4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010e4e:	f013 0310 	ands.w	r3, r3, #16
 8010e52:	d021      	beq.n	8010e98 <HAL_SD_WriteBlocks+0x1c8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e54:	4b14      	ldr	r3, [pc, #80]	; (8010ea8 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8010e56:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e58:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8010e5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e5c:	f043 0310 	orr.w	r3, r3, #16
 8010e60:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010e62:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010e66:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8010e68:	e7b0      	b.n	8010dcc <HAL_SD_WriteBlocks+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e6a:	4b0f      	ldr	r3, [pc, #60]	; (8010ea8 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8010e6c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e6e:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e72:	f043 0308 	orr.w	r3, r3, #8
 8010e76:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8010e78:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8010e7a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010e7e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8010e80:	e7a4      	b.n	8010dcc <HAL_SD_WriteBlocks+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e82:	4a09      	ldr	r2, [pc, #36]	; (8010ea8 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8010e84:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e86:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010e88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010e8a:	f042 0202 	orr.w	r2, r2, #2
 8010e8e:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010e90:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010e94:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8010e96:	e799      	b.n	8010dcc <HAL_SD_WriteBlocks+0xfc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010e98:	4904      	ldr	r1, [pc, #16]	; (8010eac <HAL_SD_WriteBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
 8010e9a:	2201      	movs	r2, #1
    return HAL_OK;
 8010e9c:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010e9e:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010ea0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8010ea4:	e792      	b.n	8010dcc <HAL_SD_WriteBlocks+0xfc>
 8010ea6:	bf00      	nop
 8010ea8:	1fe00fff 	.word	0x1fe00fff
 8010eac:	18000f3a 	.word	0x18000f3a

08010eb0 <HAL_SD_DeInit>:
  if(hsd == NULL)
 8010eb0:	b198      	cbz	r0, 8010eda <HAL_SD_DeInit+0x2a>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8010eb2:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 8010eb4:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8010eb6:	2b02      	cmp	r3, #2
{
 8010eb8:	b510      	push	{r4, lr}
 8010eba:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 8010ebc:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8010ec0:	d00d      	beq.n	8010ede <HAL_SD_DeInit+0x2e>
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8010ec2:	6820      	ldr	r0, [r4, #0]
 8010ec4:	f001 fc90 	bl	80127e8 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8010ec8:	4620      	mov	r0, r4
 8010eca:	f7ff fddf 	bl	8010a8c <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 8010ed2:	4618      	mov	r0, r3
  hsd->State = HAL_SD_STATE_RESET;
 8010ed4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8010ed8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010eda:	2001      	movs	r0, #1
}
 8010edc:	4770      	bx	lr
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 8010ede:	2000      	movs	r0, #0
 8010ee0:	f7f9 fdc8 	bl	800aa74 <HAL_SD_DriveTransceiver_1_8V_Callback>
 8010ee4:	e7ed      	b.n	8010ec2 <HAL_SD_DeInit+0x12>
 8010ee6:	bf00      	nop

08010ee8 <SD_UltraHighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SD_UltraHighSpeed(SD_HandleTypeDef *hsd)
{
 8010ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eec:	b096      	sub	sp, #88	; 0x58
 8010eee:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8010ef0:	2240      	movs	r2, #64	; 0x40
 8010ef2:	2100      	movs	r1, #0
 8010ef4:	a806      	add	r0, sp, #24
 8010ef6:	f011 f9f1 	bl	80222dc <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8010efa:	f7f9 fe1f 	bl	800ab3c <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8010efe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8010f00:	b13b      	cbz	r3, 8010f12 <SD_UltraHighSpeed+0x2a>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8010f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f06:	d00a      	beq.n	8010f1e <SD_UltraHighSpeed+0x36>
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8010f08:	2500      	movs	r5, #0
#endif /* (DLYB_SDMMC1) || (DLYB_SDMMC2) */
    }
  }

  return errorstate;
}
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	b016      	add	sp, #88	; 0x58
 8010f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010f12:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8010f16:	4628      	mov	r0, r5
 8010f18:	b016      	add	sp, #88	; 0x58
 8010f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	4606      	mov	r6, r0
 8010f22:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010f24:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 8010f26:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010f28:	f001 fc84 	bl	8012834 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8010f2c:	4605      	mov	r5, r0
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d1eb      	bne.n	8010f0a <SD_UltraHighSpeed+0x22>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010f32:	f04f 32ff 	mov.w	r2, #4294967295
 8010f36:	2340      	movs	r3, #64	; 0x40
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8010f38:	4669      	mov	r1, sp
 8010f3a:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010f3c:	e9cd 2300 	strd	r2, r3, [sp]
 8010f40:	2260      	movs	r2, #96	; 0x60
 8010f42:	2302      	movs	r3, #2
 8010f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8010f50:	f001 fc5a 	bl	8012808 <SDMMC_ConfigData>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	d14a      	bne.n	8010fee <SD_UltraHighSpeed+0x106>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8010f58:	4931      	ldr	r1, [pc, #196]	; (8011020 <SD_UltraHighSpeed+0x138>)
 8010f5a:	6820      	ldr	r0, [r4, #0]
 8010f5c:	f002 fe16 	bl	8013b8c <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010f60:	4605      	mov	r5, r0
 8010f62:	2800      	cmp	r0, #0
 8010f64:	d1d1      	bne.n	8010f0a <SD_UltraHighSpeed+0x22>
  uint32_t count, loop = 0 ;
 8010f66:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010f68:	f240 5a2a 	movw	sl, #1322	; 0x52a
 8010f6c:	e004      	b.n	8010f78 <SD_UltraHighSpeed+0x90>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8010f6e:	f7f9 fde5 	bl	800ab3c <HAL_GetTick>
 8010f72:	1b80      	subs	r0, r0, r6
 8010f74:	3001      	adds	r0, #1
 8010f76:	d03d      	beq.n	8010ff4 <SD_UltraHighSpeed+0x10c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010f78:	6820      	ldr	r0, [r4, #0]
 8010f7a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010f7c:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010f80:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010f82:	d112      	bne.n	8010faa <SD_UltraHighSpeed+0xc2>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010f84:	0417      	lsls	r7, r2, #16
 8010f86:	d5f2      	bpl.n	8010f6e <SD_UltraHighSpeed+0x86>
 8010f88:	ab06      	add	r3, sp, #24
 8010f8a:	eb03 1749 	add.w	r7, r3, r9, lsl #5
 8010f8e:	ab0e      	add	r3, sp, #56	; 0x38
 8010f90:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 8010f94:	e000      	b.n	8010f98 <SD_UltraHighSpeed+0xb0>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8010f96:	6820      	ldr	r0, [r4, #0]
 8010f98:	f001 fc14 	bl	80127c4 <SDMMC_ReadFIFO>
 8010f9c:	f847 0b04 	str.w	r0, [r7], #4
        for (count = 0U; count < 8U; count++)
 8010fa0:	4547      	cmp	r7, r8
 8010fa2:	d1f8      	bne.n	8010f96 <SD_UltraHighSpeed+0xae>
        loop ++;
 8010fa4:	f109 0901 	add.w	r9, r9, #1
 8010fa8:	e7e1      	b.n	8010f6e <SD_UltraHighSpeed+0x86>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010faa:	0716      	lsls	r6, r2, #28
 8010fac:	d429      	bmi.n	8011002 <SD_UltraHighSpeed+0x11a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010fae:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010fb0:	0791      	lsls	r1, r2, #30
 8010fb2:	d42c      	bmi.n	801100e <SD_UltraHighSpeed+0x126>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010fb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010fb6:	0692      	lsls	r2, r2, #26
 8010fb8:	d42d      	bmi.n	8011016 <SD_UltraHighSpeed+0x12e>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010fba:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010fbe:	4919      	ldr	r1, [pc, #100]	; (8011024 <SD_UltraHighSpeed+0x13c>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010fc0:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010fc2:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010fc4:	d520      	bpl.n	8011008 <SD_UltraHighSpeed+0x120>
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8010fc6:	2001      	movs	r0, #1
 8010fc8:	f7f9 fd54 	bl	800aa74 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8010fcc:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8010fce:	4816      	ldr	r0, [pc, #88]	; (8011028 <SD_UltraHighSpeed+0x140>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8010fd0:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8010fd2:	4c16      	ldr	r4, [pc, #88]	; (801102c <SD_UltraHighSpeed+0x144>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8010fd4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8010fd8:	4915      	ldr	r1, [pc, #84]	; (8011030 <SD_UltraHighSpeed+0x148>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8010fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8010fde:	42a2      	cmp	r2, r4
 8010fe0:	bf18      	it	ne
 8010fe2:	4608      	movne	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8010fe4:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8010fe6:	f001 fb81 	bl	80126ec <DelayBlock_Enable>
 8010fea:	2800      	cmp	r0, #0
 8010fec:	d08c      	beq.n	8010f08 <SD_UltraHighSpeed+0x20>
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
 8010fee:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8010ff2:	e78a      	b.n	8010f0a <SD_UltraHighSpeed+0x22>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010ff4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8010ff8:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010ffa:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8010ffc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8011000:	e783      	b.n	8010f0a <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011002:	2208      	movs	r2, #8
 8011004:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8011006:	e780      	b.n	8010f0a <SD_UltraHighSpeed+0x22>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8011008:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801100c:	e77d      	b.n	8010f0a <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801100e:	2202      	movs	r2, #2
      return errorstate;
 8011010:	4615      	mov	r5, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011012:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8011014:	e779      	b.n	8010f0a <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011016:	2220      	movs	r2, #32
      return errorstate;
 8011018:	4615      	mov	r5, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801101a:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 801101c:	e775      	b.n	8010f0a <SD_UltraHighSpeed+0x22>
 801101e:	bf00      	nop
 8011020:	80ff1f03 	.word	0x80ff1f03
 8011024:	18000f3a 	.word	0x18000f3a
 8011028:	52008000 	.word	0x52008000
 801102c:	52007000 	.word	0x52007000
 8011030:	48022800 	.word	0x48022800

08011034 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8011034:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
 8011036:	4603      	mov	r3, r0
 8011038:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801103a:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801103e:	0f94      	lsrs	r4, r2, #30
 8011040:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8011042:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8011046:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8011048:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801104c:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801104e:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8011050:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8011054:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8011056:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011058:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801105a:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 801105c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801105e:	0d14      	lsrs	r4, r2, #20
 8011060:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8011062:	f3c2 4403 	ubfx	r4, r2, #16, #4
 8011066:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8011068:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 801106c:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801106e:	f3c2 3480 	ubfx	r4, r2, #14, #1
 8011072:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8011074:	f3c2 3440 	ubfx	r4, r2, #13, #1
 8011078:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801107a:	f3c2 3400 	ubfx	r4, r2, #12, #1
 801107e:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011080:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8011082:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011084:	2800      	cmp	r0, #0
 8011086:	d170      	bne.n	801116a <HAL_SD_GetCardCSD+0x136>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011088:	f640 74fc 	movw	r4, #4092	; 0xffc
 801108c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801108e:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8011092:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011096:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 801109a:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801109c:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80110a0:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80110a2:	f3c0 6402 	ubfx	r4, r0, #24, #3
 80110a6:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80110a8:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80110ac:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80110ae:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80110b2:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80110b4:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80110b6:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80110b8:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80110ba:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80110bc:	f004 0407 	and.w	r4, r4, #7
 80110c0:	3402      	adds	r4, #2
 80110c2:	fa02 f404 	lsl.w	r4, r2, r4
 80110c6:	64dc      	str	r4, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80110c8:	7a0a      	ldrb	r2, [r1, #8]
 80110ca:	f002 0c0f 	and.w	ip, r2, #15
 80110ce:	2201      	movs	r2, #1
 80110d0:	fa02 f20c 	lsl.w	r2, r2, ip
 80110d4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80110d6:	0a52      	lsrs	r2, r2, #9
 80110d8:	fb04 f202 	mul.w	r2, r4, r2
    hsd->SdCard.LogBlockSize = 512U;
 80110dc:	f44f 7400 	mov.w	r4, #512	; 0x200
 80110e0:	e9c3 2415 	strd	r2, r4, [r3, #84]	; 0x54
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80110e4:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80110e8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80110ec:	f3c0 3c80 	ubfx	ip, r0, #14, #1
  pCSD->Reserved3 = 0;
 80110f0:	2000      	movs	r0, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80110f2:	f881 c019 	strb.w	ip, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80110f6:	768c      	strb	r4, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80110f8:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80110fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110fc:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80110fe:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011102:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011104:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8011108:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801110a:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801110e:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8011110:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011114:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8011116:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801111a:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801111e:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 8011122:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8011126:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801112a:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801112e:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8011132:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8011136:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801113a:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801113e:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011142:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011146:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801114a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801114e:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8011152:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8011156:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->Reserved4 = 1;
 801115a:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801115c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8011160:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 8011164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011168:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801116a:	2801      	cmp	r0, #1
 801116c:	d110      	bne.n	8011190 <HAL_SD_GetCardCSD+0x15c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801116e:	0412      	lsls	r2, r2, #16
 8011170:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = 512U;
 8011172:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8011176:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 801117a:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 801117e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011180:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8011182:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011184:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8011186:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011188:	0292      	lsls	r2, r2, #10
 801118a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801118c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801118e:	e7a9      	b.n	80110e4 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011190:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8011192:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011194:	4805      	ldr	r0, [pc, #20]	; (80111ac <HAL_SD_GetCardCSD+0x178>)
 8011196:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 8011198:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801119a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801119c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80111a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80111a2:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 80111a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111aa:	4770      	bx	lr
 80111ac:	1fe00fff 	.word	0x1fe00fff

080111b0 <HAL_SD_InitCard>:
{
 80111b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80111b4:	2200      	movs	r2, #0
 80111b6:	2300      	movs	r3, #0
{
 80111b8:	b098      	sub	sp, #96	; 0x60
 80111ba:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80111bc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80111c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80111c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80111c8:	f7ff f9c6 	bl	8010558 <HAL_RCCEx_GetPeriphCLKFreq>
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80111cc:	4aa4      	ldr	r2, [pc, #656]	; (8011460 <HAL_SD_InitCard+0x2b0>)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80111ce:	69a3      	ldr	r3, [r4, #24]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80111d0:	0a05      	lsrs	r5, r0, #8
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80111d2:	4606      	mov	r6, r0
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80111d4:	6827      	ldr	r7, [r4, #0]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80111d6:	fba2 2505 	umull	r2, r5, r2, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80111da:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80111dc:	ea4f 1515 	mov.w	r5, r5, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80111e0:	d103      	bne.n	80111ea <HAL_SD_InitCard+0x3a>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	f043 0310 	orr.w	r3, r3, #16
 80111e8:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 80111ea:	aa09      	add	r2, sp, #36	; 0x24
 80111ec:	950a      	str	r5, [sp, #40]	; 0x28
 80111ee:	ab06      	add	r3, sp, #24
 80111f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80111f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80111f6:	4638      	mov	r0, r7
 80111f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80111fa:	f001 fac7 	bl	801278c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80111fe:	6820      	ldr	r0, [r4, #0]
 8011200:	f001 faea 	bl	80127d8 <SDMMC_PowerState_ON>
  if(sdmmc_clk != 0U)
 8011204:	ebb6 0f45 	cmp.w	r6, r5, lsl #1
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8011208:	ea4f 0045 	mov.w	r0, r5, lsl #1
  if(sdmmc_clk != 0U)
 801120c:	d31b      	bcc.n	8011246 <HAL_SD_InitCard+0x96>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 801120e:	4b95      	ldr	r3, [pc, #596]	; (8011464 <HAL_SD_InitCard+0x2b4>)
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8011210:	fbb6 f0f0 	udiv	r0, r6, r0
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8011214:	fbb3 f0f0 	udiv	r0, r3, r0
 8011218:	3001      	adds	r0, #1
 801121a:	f7f9 fc95 	bl	800ab48 <HAL_Delay>
  __IO uint32_t count = 0U;
 801121e:	2300      	movs	r3, #0
 8011220:	9305      	str	r3, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 8011222:	f7f9 fc8b 	bl	800ab3c <HAL_GetTick>
 8011226:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011228:	6820      	ldr	r0, [r4, #0]
 801122a:	f001 fff1 	bl	8013210 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 801122e:	4605      	mov	r5, r0
 8011230:	b168      	cbz	r0, 801124e <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 8011232:	2601      	movs	r6, #1
 8011234:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011238:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801123a:	432b      	orrs	r3, r5
 801123c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801123e:	4630      	mov	r0, r6
 8011240:	b018      	add	sp, #96	; 0x60
 8011242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 8011246:	2002      	movs	r0, #2
 8011248:	f7f9 fc7e 	bl	800ab48 <HAL_Delay>
 801124c:	e7e7      	b.n	801121e <HAL_SD_InitCard+0x6e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801124e:	6820      	ldr	r0, [r4, #0]
 8011250:	f002 f80a 	bl	8013268 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011254:	2800      	cmp	r0, #0
 8011256:	f040 80c2 	bne.w	80113de <HAL_SD_InitCard+0x22e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 801125a:	2301      	movs	r3, #1
 801125c:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801125e:	2100      	movs	r1, #0
 8011260:	6820      	ldr	r0, [r4, #0]
 8011262:	f002 f841 	bl	80132e8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011266:	bb10      	cbnz	r0, 80112ae <HAL_SD_InitCard+0xfe>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011268:	9b05      	ldr	r3, [sp, #20]
 801126a:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 801126e:	42bb      	cmp	r3, r7
 8011270:	f200 80c5 	bhi.w	80113fe <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8011274:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 801146c <HAL_SD_InitCard+0x2bc>
 8011278:	e00b      	b.n	8011292 <HAL_SD_InitCard+0xe2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801127a:	6820      	ldr	r0, [r4, #0]
 801127c:	f001 fac0 	bl	8012800 <SDMMC_GetResponse>
    count++;
 8011280:	9b05      	ldr	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011282:	2800      	cmp	r0, #0
    count++;
 8011284:	f103 0301 	add.w	r3, r3, #1
 8011288:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801128a:	9b05      	ldr	r3, [sp, #20]
 801128c:	db12      	blt.n	80112b4 <HAL_SD_InitCard+0x104>
 801128e:	42bb      	cmp	r3, r7
 8011290:	d810      	bhi.n	80112b4 <HAL_SD_InitCard+0x104>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011292:	2100      	movs	r1, #0
 8011294:	6820      	ldr	r0, [r4, #0]
 8011296:	f002 f827 	bl	80132e8 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801129a:	4641      	mov	r1, r8
    if(errorstate != HAL_SD_ERROR_NONE)
 801129c:	4605      	mov	r5, r0
 801129e:	2800      	cmp	r0, #0
 80112a0:	d1c7      	bne.n	8011232 <HAL_SD_InitCard+0x82>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80112a2:	6820      	ldr	r0, [r4, #0]
 80112a4:	f002 f8c6 	bl	8013434 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80112a8:	4601      	mov	r1, r0
 80112aa:	2800      	cmp	r0, #0
 80112ac:	d0e5      	beq.n	801127a <HAL_SD_InitCard+0xca>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80112ae:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80112b2:	e7be      	b.n	8011232 <HAL_SD_InitCard+0x82>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80112b4:	9a05      	ldr	r2, [sp, #20]
 80112b6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80112ba:	429a      	cmp	r2, r3
 80112bc:	f200 80a3 	bhi.w	8011406 <HAL_SD_InitCard+0x256>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80112c0:	0045      	lsls	r5, r0, #1
 80112c2:	d505      	bpl.n	80112d0 <HAL_SD_InitCard+0x120>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80112c4:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80112c6:	2201      	movs	r2, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80112c8:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80112ca:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80112cc:	f000 809e 	beq.w	801140c <HAL_SD_InitCard+0x25c>
 80112d0:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 80112d2:	2301      	movs	r3, #1
 80112d4:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80112d8:	f001 fa8e 	bl	80127f8 <SDMMC_GetPowerState>
 80112dc:	b348      	cbz	r0, 8011332 <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80112de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80112e0:	2b03      	cmp	r3, #3
 80112e2:	d132      	bne.n	801134a <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80112e4:	2104      	movs	r1, #4
 80112e6:	6820      	ldr	r0, [r4, #0]
 80112e8:	f001 fa8a 	bl	8012800 <SDMMC_GetResponse>
 80112ec:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80112ee:	a90d      	add	r1, sp, #52	; 0x34
 80112f0:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80112f2:	0d1b      	lsrs	r3, r3, #20
 80112f4:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80112f6:	f7ff fe9d 	bl	8011034 <HAL_SD_GetCardCSD>
 80112fa:	4606      	mov	r6, r0
 80112fc:	2800      	cmp	r0, #0
 80112fe:	d17b      	bne.n	80113f8 <HAL_SD_InitCard+0x248>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8011300:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8011302:	4603      	mov	r3, r0
 8011304:	6820      	ldr	r0, [r4, #0]
 8011306:	0412      	lsls	r2, r2, #16
 8011308:	f001 fedc 	bl	80130c4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 801130c:	b998      	cbnz	r0, 8011336 <HAL_SD_InitCard+0x186>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801130e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011312:	6820      	ldr	r0, [r4, #0]
 8011314:	f001 fa8e 	bl	8012834 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011318:	2800      	cmp	r0, #0
 801131a:	d090      	beq.n	801123e <HAL_SD_InitCard+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801131c:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 801131e:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011320:	4951      	ldr	r1, [pc, #324]	; (8011468 <HAL_SD_InitCard+0x2b8>)
    return HAL_ERROR;
 8011322:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011324:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011328:	4318      	orrs	r0, r3
 801132a:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801132c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 8011330:	e785      	b.n	801123e <HAL_SD_InitCard+0x8e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011332:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8011336:	2601      	movs	r6, #1
 8011338:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801133c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801133e:	4318      	orrs	r0, r3
 8011340:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8011342:	4630      	mov	r0, r6
 8011344:	b018      	add	sp, #96	; 0x60
 8011346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801134a:	6820      	ldr	r0, [r4, #0]
 801134c:	f002 f9fa 	bl	8013744 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011350:	2800      	cmp	r0, #0
 8011352:	d1f0      	bne.n	8011336 <HAL_SD_InitCard+0x186>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011354:	4601      	mov	r1, r0
 8011356:	6820      	ldr	r0, [r4, #0]
 8011358:	f001 fa52 	bl	8012800 <SDMMC_GetResponse>
 801135c:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801135e:	2104      	movs	r1, #4
 8011360:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011362:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011364:	f001 fa4c 	bl	8012800 <SDMMC_GetResponse>
 8011368:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801136a:	2108      	movs	r1, #8
 801136c:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801136e:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011370:	f001 fa46 	bl	8012800 <SDMMC_GetResponse>
 8011374:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011376:	210c      	movs	r1, #12
 8011378:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801137a:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801137c:	f001 fa40 	bl	8012800 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011382:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011384:	2b03      	cmp	r3, #3
 8011386:	d0ad      	beq.n	80112e4 <HAL_SD_InitCard+0x134>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8011388:	f10d 0112 	add.w	r1, sp, #18
 801138c:	6820      	ldr	r0, [r4, #0]
 801138e:	f002 fa57 	bl	8013840 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011392:	2800      	cmp	r0, #0
 8011394:	d1cf      	bne.n	8011336 <HAL_SD_InitCard+0x186>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011396:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011398:	2b03      	cmp	r3, #3
 801139a:	d0a3      	beq.n	80112e4 <HAL_SD_InitCard+0x134>
    hsd->SdCard.RelCardAdd = sd_rca;
 801139c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80113a0:	6820      	ldr	r0, [r4, #0]
 80113a2:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 80113a4:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80113a6:	f002 fa0b 	bl	80137c0 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80113aa:	2800      	cmp	r0, #0
 80113ac:	d1c3      	bne.n	8011336 <HAL_SD_InitCard+0x186>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80113ae:	4601      	mov	r1, r0
 80113b0:	6820      	ldr	r0, [r4, #0]
 80113b2:	f001 fa25 	bl	8012800 <SDMMC_GetResponse>
 80113b6:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80113b8:	2104      	movs	r1, #4
 80113ba:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80113bc:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80113be:	f001 fa1f 	bl	8012800 <SDMMC_GetResponse>
 80113c2:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80113c4:	2108      	movs	r1, #8
 80113c6:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80113c8:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80113ca:	f001 fa19 	bl	8012800 <SDMMC_GetResponse>
 80113ce:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80113d0:	210c      	movs	r1, #12
 80113d2:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80113d4:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80113d6:	f001 fa13 	bl	8012800 <SDMMC_GetResponse>
 80113da:	66e0      	str	r0, [r4, #108]	; 0x6c
 80113dc:	e782      	b.n	80112e4 <HAL_SD_InitCard+0x134>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80113de:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80113e0:	6820      	ldr	r0, [r4, #0]
 80113e2:	f001 ff15 	bl	8013210 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80113e6:	4605      	mov	r5, r0
 80113e8:	2800      	cmp	r0, #0
 80113ea:	f47f af22 	bne.w	8011232 <HAL_SD_InitCard+0x82>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80113ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	f47f af39 	bne.w	8011268 <HAL_SD_InitCard+0xb8>
 80113f6:	e732      	b.n	801125e <HAL_SD_InitCard+0xae>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80113f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80113fc:	e79b      	b.n	8011336 <HAL_SD_InitCard+0x186>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80113fe:	9b05      	ldr	r3, [sp, #20]
 8011400:	42bb      	cmp	r3, r7
 8011402:	f67f af65 	bls.w	80112d0 <HAL_SD_InitCard+0x120>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8011406:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 801140a:	e712      	b.n	8011232 <HAL_SD_InitCard+0x82>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 801140c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8011410:	6820      	ldr	r0, [r4, #0]
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8011412:	f43f af5e 	beq.w	80112d2 <HAL_SD_InitCard+0x122>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8011416:	6803      	ldr	r3, [r0, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8011418:	f44f 7200 	mov.w	r2, #512	; 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 801141c:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8011420:	65e2      	str	r2, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8011422:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8011424:	f002 fc58 	bl	8013cd8 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8011428:	4605      	mov	r5, r0
 801142a:	b128      	cbz	r0, 8011438 <HAL_SD_InitCard+0x288>
 801142c:	e701      	b.n	8011232 <HAL_SD_InitCard+0x82>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801142e:	f7f9 fb85 	bl	800ab3c <HAL_GetTick>
 8011432:	1b80      	subs	r0, r0, r6
 8011434:	3001      	adds	r0, #1
 8011436:	d030      	beq.n	801149a <HAL_SD_InitCard+0x2ea>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8011438:	6823      	ldr	r3, [r4, #0]
 801143a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801143c:	0150      	lsls	r0, r2, #5
 801143e:	d5f6      	bpl.n	801142e <HAL_SD_InitCard+0x27e>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8011440:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8011444:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8011446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011448:	02d9      	lsls	r1, r3, #11
 801144a:	f57f af30 	bpl.w	80112ae <HAL_SD_InitCard+0xfe>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 801144e:	2001      	movs	r0, #1
 8011450:	f7f9 fb10 	bl	800aa74 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8011454:	6820      	ldr	r0, [r4, #0]
 8011456:	6803      	ldr	r3, [r0, #0]
 8011458:	f043 0304 	orr.w	r3, r3, #4
 801145c:	6003      	str	r3, [r0, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 801145e:	e00d      	b.n	801147c <HAL_SD_InitCard+0x2cc>
 8011460:	014f8b59 	.word	0x014f8b59
 8011464:	00012110 	.word	0x00012110
 8011468:	1fe00fff 	.word	0x1fe00fff
 801146c:	c1100000 	.word	0xc1100000
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011470:	f7f9 fb64 	bl	800ab3c <HAL_GetTick>
 8011474:	1b80      	subs	r0, r0, r6
 8011476:	3001      	adds	r0, #1
 8011478:	d00f      	beq.n	801149a <HAL_SD_InitCard+0x2ea>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 801147a:	6820      	ldr	r0, [r4, #0]
 801147c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801147e:	019a      	lsls	r2, r3, #6
 8011480:	d5f6      	bpl.n	8011470 <HAL_SD_InitCard+0x2c0>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8011482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011486:	6383      	str	r3, [r0, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8011488:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801148a:	02db      	lsls	r3, r3, #11
 801148c:	d4bb      	bmi.n	8011406 <HAL_SD_InitCard+0x256>
          hsd->Instance->POWER = 0x13U;
 801148e:	2213      	movs	r2, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8011490:	f04f 33ff 	mov.w	r3, #4294967295
          hsd->Instance->POWER = 0x13U;
 8011494:	6002      	str	r2, [r0, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8011496:	6383      	str	r3, [r0, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 8011498:	e71b      	b.n	80112d2 <HAL_SD_InitCard+0x122>
            return HAL_SD_ERROR_TIMEOUT;
 801149a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 801149e:	e6c8      	b.n	8011232 <HAL_SD_InitCard+0x82>

080114a0 <HAL_SD_GetCardStatus>:
{
 80114a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114a4:	4604      	mov	r4, r0
 80114a6:	b097      	sub	sp, #92	; 0x5c
 80114a8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80114aa:	f7f9 fb47 	bl	800ab3c <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80114ae:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 80114b0:	4607      	mov	r7, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80114b2:	6820      	ldr	r0, [r4, #0]
 80114b4:	f001 f9a4 	bl	8012800 <SDMMC_GetResponse>
 80114b8:	0182      	lsls	r2, r0, #6
 80114ba:	d45b      	bmi.n	8011574 <HAL_SD_GetCardStatus+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80114bc:	2140      	movs	r1, #64	; 0x40
 80114be:	6820      	ldr	r0, [r4, #0]
 80114c0:	f001 f9b8 	bl	8012834 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80114c4:	4603      	mov	r3, r0
 80114c6:	b1e0      	cbz	r0, 8011502 <HAL_SD_GetCardStatus+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80114c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80114ca:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80114cc:	6820      	ldr	r0, [r4, #0]
 80114ce:	4a5a      	ldr	r2, [pc, #360]	; (8011638 <HAL_SD_GetCardStatus+0x198>)
    hsd->State = HAL_SD_STATE_READY;
 80114d0:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80114d2:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80114d4:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 80114d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80114d8:	4313      	orrs	r3, r2
 80114da:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80114dc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80114e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80114e4:	f001 f9a6 	bl	8012834 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80114e8:	b138      	cbz	r0, 80114fa <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 80114ea:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80114ec:	6822      	ldr	r2, [r4, #0]
 80114ee:	4952      	ldr	r1, [pc, #328]	; (8011638 <HAL_SD_GetCardStatus+0x198>)
    status = HAL_ERROR;
 80114f0:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80114f2:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80114f4:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80114f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80114fa:	4630      	mov	r0, r6
 80114fc:	b017      	add	sp, #92	; 0x5c
 80114fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011502:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011504:	6820      	ldr	r0, [r4, #0]
 8011506:	0409      	lsls	r1, r1, #16
 8011508:	f001 feee 	bl	80132e8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 801150c:	4603      	mov	r3, r0
 801150e:	2800      	cmp	r0, #0
 8011510:	d1da      	bne.n	80114c8 <HAL_SD_GetCardStatus+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011512:	f04f 32ff 	mov.w	r2, #4294967295
 8011516:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011518:	4669      	mov	r1, sp
 801151a:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801151c:	e9cd 2300 	strd	r2, r3, [sp]
 8011520:	2260      	movs	r2, #96	; 0x60
 8011522:	2302      	movs	r3, #2
 8011524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011528:	2301      	movs	r3, #1
 801152a:	2200      	movs	r2, #0
 801152c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011530:	f001 f96a 	bl	8012808 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8011534:	6820      	ldr	r0, [r4, #0]
 8011536:	f002 fa81 	bl	8013a3c <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 801153a:	4603      	mov	r3, r0
 801153c:	2800      	cmp	r0, #0
 801153e:	d1c3      	bne.n	80114c8 <HAL_SD_GetCardStatus+0x28>
  uint32_t *pData = pSDstatus;
 8011540:	ae06      	add	r6, sp, #24
 8011542:	e004      	b.n	801154e <HAL_SD_GetCardStatus+0xae>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011544:	f7f9 fafa 	bl	800ab3c <HAL_GetTick>
 8011548:	1bc0      	subs	r0, r0, r7
 801154a:	3001      	adds	r0, #1
 801154c:	d016      	beq.n	801157c <HAL_SD_GetCardStatus+0xdc>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801154e:	6820      	ldr	r0, [r4, #0]
 8011550:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011552:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011556:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011558:	d113      	bne.n	8011582 <HAL_SD_GetCardStatus+0xe2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801155a:	041b      	lsls	r3, r3, #16
 801155c:	d5f2      	bpl.n	8011544 <HAL_SD_GetCardStatus+0xa4>
 801155e:	f106 0820 	add.w	r8, r6, #32
 8011562:	e000      	b.n	8011566 <HAL_SD_GetCardStatus+0xc6>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011564:	6820      	ldr	r0, [r4, #0]
 8011566:	f001 f92d 	bl	80127c4 <SDMMC_ReadFIFO>
 801156a:	f846 0b04 	str.w	r0, [r6], #4
      for(count = 0U; count < 8U; count++)
 801156e:	4546      	cmp	r6, r8
 8011570:	d1f8      	bne.n	8011564 <HAL_SD_GetCardStatus+0xc4>
 8011572:	e7e7      	b.n	8011544 <HAL_SD_GetCardStatus+0xa4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011574:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801157a:	e7a8      	b.n	80114ce <HAL_SD_GetCardStatus+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 801157c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011580:	e7a4      	b.n	80114cc <HAL_SD_GetCardStatus+0x2c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011582:	0719      	lsls	r1, r3, #28
 8011584:	d451      	bmi.n	801162a <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011586:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011588:	079a      	lsls	r2, r3, #30
 801158a:	d450      	bmi.n	801162e <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801158c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801158e:	069b      	lsls	r3, r3, #26
 8011590:	d50a      	bpl.n	80115a8 <HAL_SD_GetCardStatus+0x108>
 8011592:	e04e      	b.n	8011632 <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011594:	f001 f916 	bl	80127c4 <SDMMC_ReadFIFO>
 8011598:	f846 0b04 	str.w	r0, [r6], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801159c:	f7f9 face 	bl	800ab3c <HAL_GetTick>
 80115a0:	1bc0      	subs	r0, r0, r7
 80115a2:	3001      	adds	r0, #1
 80115a4:	d0ea      	beq.n	801157c <HAL_SD_GetCardStatus+0xdc>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80115a6:	6820      	ldr	r0, [r4, #0]
 80115a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80115aa:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80115ae:	d1f1      	bne.n	8011594 <HAL_SD_GetCardStatus+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80115b0:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80115b2:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80115b4:	4a21      	ldr	r2, [pc, #132]	; (801163c <HAL_SD_GetCardStatus+0x19c>)
 80115b6:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80115b8:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80115ba:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80115be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80115c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80115c6:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80115ca:	fa5f f883 	uxtb.w	r8, r3
 80115ce:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80115d2:	fa1f f982 	uxth.w	r9, r2
 80115d6:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80115d8:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80115dc:	f3c1 1881 	ubfx	r8, r1, #6, #2
 80115e0:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80115e4:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80115e8:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80115ec:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80115f0:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80115f2:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80115f6:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80115fa:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80115fc:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8011600:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8011602:	f3cc 5203 	ubfx	r2, ip, #20, #4
 8011606:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8011608:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801160c:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801160e:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8011610:	f3c3 2201 	ubfx	r2, r3, #8, #2
 8011614:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8011616:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801161a:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801161e:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8011620:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8011622:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8011626:	74ab      	strb	r3, [r5, #18]
 8011628:	e75a      	b.n	80114e0 <HAL_SD_GetCardStatus+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801162a:	2308      	movs	r3, #8
 801162c:	e74f      	b.n	80114ce <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801162e:	2302      	movs	r3, #2
 8011630:	e74d      	b.n	80114ce <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 8011632:	2320      	movs	r3, #32
 8011634:	e74b      	b.n	80114ce <HAL_SD_GetCardStatus+0x2e>
 8011636:	bf00      	nop
 8011638:	1fe00fff 	.word	0x1fe00fff
 801163c:	18000f3a 	.word	0x18000f3a

08011640 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011640:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
 8011642:	b4f0      	push	{r4, r5, r6, r7}
 8011644:	e9d0 c710 	ldrd	ip, r7, [r0, #64]	; 0x40
 8011648:	e9d0 6512 	ldrd	r6, r5, [r0, #72]	; 0x48
 801164c:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011650:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8011652:	61cb      	str	r3, [r1, #28]
 8011654:	6008      	str	r0, [r1, #0]
}
 8011656:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011658:	e9c1 c701 	strd	ip, r7, [r1, #4]
 801165c:	e9c1 6503 	strd	r6, r5, [r1, #12]
 8011660:	e9c1 4205 	strd	r4, r2, [r1, #20]
}
 8011664:	bcf0      	pop	{r4, r5, r6, r7}
 8011666:	4770      	bx	lr

08011668 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8011668:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 801166a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801166c:	4293      	cmp	r3, r2
{
 801166e:	b530      	push	{r4, r5, lr}
 8011670:	4604      	mov	r4, r0
 8011672:	b08b      	sub	sp, #44	; 0x2c
 8011674:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8011676:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 801167a:	d025      	beq.n	80116c8 <HAL_SD_ConfigWideBusOperation+0x60>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 801167c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8011680:	d022      	beq.n	80116c8 <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8011682:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8011686:	d064      	beq.n	8011752 <HAL_SD_ConfigWideBusOperation+0xea>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8011688:	2900      	cmp	r1, #0
 801168a:	d043      	beq.n	8011714 <HAL_SD_ConfigWideBusOperation+0xac>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801168c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801168e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011692:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8011694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011696:	b9f3      	cbnz	r3, 80116d6 <HAL_SD_ConfigWideBusOperation+0x6e>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8011698:	6922      	ldr	r2, [r4, #16]
    Init.BusWide             = WideMode;
 801169a:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801169c:	9207      	str	r2, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801169e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 80116a2:	e9cd 1304 	strd	r1, r3, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80116a6:	6963      	ldr	r3, [r4, #20]
 80116a8:	2b03      	cmp	r3, #3
 80116aa:	d92a      	bls.n	8011702 <HAL_SD_ConfigWideBusOperation+0x9a>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80116ac:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80116ae:	ab0a      	add	r3, sp, #40	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 80116b0:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 80116b2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80116b6:	ab04      	add	r3, sp, #16
 80116b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80116bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80116be:	6820      	ldr	r0, [r4, #0]
 80116c0:	f001 f864 	bl	801278c <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80116c4:	6820      	ldr	r0, [r4, #0]
 80116c6:	e00a      	b.n	80116de <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80116c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80116ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116ce:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80116d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d0e0      	beq.n	8011698 <HAL_SD_ConfigWideBusOperation+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80116d6:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 80116d8:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80116da:	4b32      	ldr	r3, [pc, #200]	; (80117a4 <HAL_SD_ConfigWideBusOperation+0x13c>)
 80116dc:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80116de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80116e2:	f001 f8a7 	bl	8012834 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80116e6:	b130      	cbz	r0, 80116f6 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80116e8:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80116ea:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80116ec:	4a2d      	ldr	r2, [pc, #180]	; (80117a4 <HAL_SD_ConfigWideBusOperation+0x13c>)
 80116ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80116f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80116f2:	4318      	orrs	r0, r3
 80116f4:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80116f6:	2301      	movs	r3, #1
}
 80116f8:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80116fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80116fe:	b00b      	add	sp, #44	; 0x2c
 8011700:	bd30      	pop	{r4, r5, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8011702:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011704:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8011708:	d0d0      	beq.n	80116ac <HAL_SD_ConfigWideBusOperation+0x44>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801170a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801170e:	d042      	beq.n	8011796 <HAL_SD_ConfigWideBusOperation+0x12e>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8011710:	2304      	movs	r3, #4
 8011712:	e7cb      	b.n	80116ac <HAL_SD_ConfigWideBusOperation+0x44>
  uint32_t scr[2U] = {0UL, 0UL};
 8011714:	2200      	movs	r2, #0
 8011716:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011718:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 801171a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801171e:	f001 f86f 	bl	8012800 <SDMMC_GetResponse>
 8011722:	0182      	lsls	r2, r0, #6
 8011724:	d434      	bmi.n	8011790 <HAL_SD_ConfigWideBusOperation+0x128>
  errorstate = SD_FindSCR(hsd, scr);
 8011726:	a904      	add	r1, sp, #16
 8011728:	4620      	mov	r0, r4
 801172a:	f7ff f8b5 	bl	8010898 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 801172e:	b960      	cbnz	r0, 801174a <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011730:	9b05      	ldr	r3, [sp, #20]
 8011732:	03db      	lsls	r3, r3, #15
 8011734:	d532      	bpl.n	801179c <HAL_SD_ConfigWideBusOperation+0x134>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011736:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011738:	6820      	ldr	r0, [r4, #0]
 801173a:	0409      	lsls	r1, r1, #16
 801173c:	f001 fdd4 	bl	80132e8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011740:	b918      	cbnz	r0, 801174a <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011742:	4601      	mov	r1, r0
 8011744:	6820      	ldr	r0, [r4, #0]
 8011746:	f001 feaf 	bl	80134a8 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 801174a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801174c:	4318      	orrs	r0, r3
 801174e:	63a0      	str	r0, [r4, #56]	; 0x38
 8011750:	e7be      	b.n	80116d0 <HAL_SD_ConfigWideBusOperation+0x68>
  uint32_t scr[2U] = {0UL, 0UL};
 8011752:	2200      	movs	r2, #0
 8011754:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011756:	2100      	movs	r1, #0
 8011758:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 801175a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801175e:	f001 f84f 	bl	8012800 <SDMMC_GetResponse>
 8011762:	0180      	lsls	r0, r0, #6
 8011764:	d414      	bmi.n	8011790 <HAL_SD_ConfigWideBusOperation+0x128>
  errorstate = SD_FindSCR(hsd, scr);
 8011766:	a904      	add	r1, sp, #16
 8011768:	4620      	mov	r0, r4
 801176a:	f7ff f895 	bl	8010898 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 801176e:	2800      	cmp	r0, #0
 8011770:	d1eb      	bne.n	801174a <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011772:	9b05      	ldr	r3, [sp, #20]
 8011774:	0359      	lsls	r1, r3, #13
 8011776:	d511      	bpl.n	801179c <HAL_SD_ConfigWideBusOperation+0x134>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011778:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801177a:	6820      	ldr	r0, [r4, #0]
 801177c:	0409      	lsls	r1, r1, #16
 801177e:	f001 fdb3 	bl	80132e8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011782:	2800      	cmp	r0, #0
 8011784:	d1e1      	bne.n	801174a <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8011786:	2102      	movs	r1, #2
 8011788:	6820      	ldr	r0, [r4, #0]
 801178a:	f001 fe8d 	bl	80134a8 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 801178e:	e7dc      	b.n	801174a <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011790:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011794:	e7d9      	b.n	801174a <HAL_SD_ConfigWideBusOperation+0xe2>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8011796:	2302      	movs	r3, #2
 8011798:	9308      	str	r3, [sp, #32]
 801179a:	e788      	b.n	80116ae <HAL_SD_ConfigWideBusOperation+0x46>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801179c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80117a0:	e7d3      	b.n	801174a <HAL_SD_ConfigWideBusOperation+0xe2>
 80117a2:	bf00      	nop
 80117a4:	1fe00fff 	.word	0x1fe00fff

080117a8 <HAL_SD_Init>:
{
 80117a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117aa:	b087      	sub	sp, #28
  if(hsd == NULL)
 80117ac:	b1a0      	cbz	r0, 80117d8 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 80117ae:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80117b2:	4604      	mov	r4, r0
 80117b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80117b8:	b93b      	cbnz	r3, 80117ca <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80117ba:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 80117bc:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80117be:	b90b      	cbnz	r3, 80117c4 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80117c0:	2302      	movs	r3, #2
 80117c2:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 80117c4:	4620      	mov	r0, r4
 80117c6:	f7ff f95f 	bl	8010a88 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80117ca:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80117cc:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80117ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80117d2:	f7ff fced 	bl	80111b0 <HAL_SD_InitCard>
 80117d6:	b118      	cbz	r0, 80117e0 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 80117d8:	2601      	movs	r6, #1
}
 80117da:	4630      	mov	r0, r6
 80117dc:	b007      	add	sp, #28
 80117de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80117e0:	a901      	add	r1, sp, #4
 80117e2:	4620      	mov	r0, r4
 80117e4:	f7ff fe5c 	bl	80114a0 <HAL_SD_GetCardStatus>
 80117e8:	2800      	cmp	r0, #0
 80117ea:	d1f5      	bne.n	80117d8 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80117ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 80117ee:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80117f2:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 80117f4:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 80117f8:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 80117fa:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80117fc:	d024      	beq.n	8011848 <HAL_SD_Init+0xa0>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80117fe:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8011800:	68e1      	ldr	r1, [r4, #12]
 8011802:	4620      	mov	r0, r4
 8011804:	f7ff ff30 	bl	8011668 <HAL_SD_ConfigWideBusOperation>
 8011808:	4606      	mov	r6, r0
 801180a:	2800      	cmp	r0, #0
 801180c:	d1e4      	bne.n	80117d8 <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 801180e:	f7f9 f995 	bl	800ab3c <HAL_GetTick>
 8011812:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8011814:	e00c      	b.n	8011830 <HAL_SD_Init+0x88>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011816:	6820      	ldr	r0, [r4, #0]
 8011818:	4629      	mov	r1, r5
 801181a:	f000 fff1 	bl	8012800 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 801181e:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8011822:	2804      	cmp	r0, #4
 8011824:	d018      	beq.n	8011858 <HAL_SD_Init+0xb0>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8011826:	f7f9 f989 	bl	800ab3c <HAL_GetTick>
 801182a:	1bc3      	subs	r3, r0, r7
 801182c:	3301      	adds	r3, #1
 801182e:	d019      	beq.n	8011864 <HAL_SD_Init+0xbc>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011830:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011832:	6820      	ldr	r0, [r4, #0]
 8011834:	0409      	lsls	r1, r1, #16
 8011836:	f002 f85b 	bl	80138f0 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 801183a:	4605      	mov	r5, r0
 801183c:	2800      	cmp	r0, #0
 801183e:	d0ea      	beq.n	8011816 <HAL_SD_Init+0x6e>
    hsd->ErrorCode |= errorstate;
 8011840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011842:	4303      	orrs	r3, r0
 8011844:	63a3      	str	r3, [r4, #56]	; 0x38
  return (HAL_SD_CardStateTypeDef)cardstate;
 8011846:	e7ee      	b.n	8011826 <HAL_SD_Init+0x7e>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8011848:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801184a:	bf14      	ite	ne
 801184c:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8011850:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8011854:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011856:	e7d3      	b.n	8011800 <HAL_SD_Init+0x58>
  hsd->State = HAL_SD_STATE_READY;
 8011858:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801185a:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 801185c:	6325      	str	r5, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 801185e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8011862:	e7ba      	b.n	80117da <HAL_SD_Init+0x32>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011864:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8011868:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 801186a:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801186c:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 801186e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8011872:	e7b2      	b.n	80117da <HAL_SD_Init+0x32>

08011874 <HAL_SD_ConfigSpeedBusOperation>:
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011874:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 8011876:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011878:	2b02      	cmp	r3, #2
{
 801187a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801187e:	4604      	mov	r4, r0
 8011880:	b096      	sub	sp, #88	; 0x58
  hsd->State = HAL_SD_STATE_BUSY;
 8011882:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011886:	d069      	beq.n	801195c <HAL_SD_ConfigSpeedBusOperation+0xe8>
    switch (SpeedMode)
 8011888:	2901      	cmp	r1, #1
 801188a:	d027      	beq.n	80118dc <HAL_SD_ConfigSpeedBusOperation+0x68>
 801188c:	2902      	cmp	r1, #2
 801188e:	d006      	beq.n	801189e <HAL_SD_ConfigSpeedBusOperation+0x2a>
 8011890:	b1a9      	cbz	r1, 80118be <HAL_SD_ConfigSpeedBusOperation+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 8011894:	2601      	movs	r6, #1
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801189a:	63a3      	str	r3, [r4, #56]	; 0x38
      break;
 801189c:	e01f      	b.n	80118de <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 801189e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80118a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118a4:	d015      	beq.n	80118d2 <HAL_SD_ConfigSpeedBusOperation+0x5e>
 80118a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118aa:	d012      	beq.n	80118d2 <HAL_SD_ConfigSpeedBusOperation+0x5e>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80118ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d00f      	beq.n	80118d2 <HAL_SD_ConfigSpeedBusOperation+0x5e>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80118b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 80118b4:	2601      	movs	r6, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80118b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118ba:	63a3      	str	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 80118bc:	e00f      	b.n	80118de <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80118be:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80118c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118c4:	d005      	beq.n	80118d2 <HAL_SD_ConfigSpeedBusOperation+0x5e>
 80118c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118ca:	d002      	beq.n	80118d2 <HAL_SD_ConfigSpeedBusOperation+0x5e>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80118cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d104      	bne.n	80118dc <HAL_SD_ConfigSpeedBusOperation+0x68>
          if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80118d2:	4620      	mov	r0, r4
 80118d4:	f7ff f852 	bl	801097c <SD_HighSpeed>
 80118d8:	2800      	cmp	r0, #0
 80118da:	d1ea      	bne.n	80118b2 <HAL_SD_ConfigSpeedBusOperation+0x3e>
    switch (SpeedMode)
 80118dc:	2600      	movs	r6, #0
  tickstart = HAL_GetTick();
 80118de:	f7f9 f92d 	bl	800ab3c <HAL_GetTick>
 80118e2:	4605      	mov	r5, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80118e4:	e00b      	b.n	80118fe <HAL_SD_ConfigSpeedBusOperation+0x8a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80118e6:	6820      	ldr	r0, [r4, #0]
 80118e8:	f000 ff8a 	bl	8012800 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80118ec:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80118f0:	2804      	cmp	r0, #4
 80118f2:	d01f      	beq.n	8011934 <HAL_SD_ConfigSpeedBusOperation+0xc0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80118f4:	f7f9 f922 	bl	800ab3c <HAL_GetTick>
 80118f8:	1b40      	subs	r0, r0, r5
 80118fa:	3001      	adds	r0, #1
 80118fc:	d00f      	beq.n	801191e <HAL_SD_ConfigSpeedBusOperation+0xaa>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80118fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011900:	6820      	ldr	r0, [r4, #0]
 8011902:	0409      	lsls	r1, r1, #16
 8011904:	f001 fff4 	bl	80138f0 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011908:	4601      	mov	r1, r0
 801190a:	2800      	cmp	r0, #0
 801190c:	d0eb      	beq.n	80118e6 <HAL_SD_ConfigSpeedBusOperation+0x72>
    hsd->ErrorCode |= errorstate;
 801190e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011910:	4319      	orrs	r1, r3
 8011912:	63a1      	str	r1, [r4, #56]	; 0x38
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011914:	f7f9 f912 	bl	800ab3c <HAL_GetTick>
 8011918:	1b40      	subs	r0, r0, r5
 801191a:	3001      	adds	r0, #1
 801191c:	d1ef      	bne.n	80118fe <HAL_SD_ConfigSpeedBusOperation+0x8a>
      return HAL_TIMEOUT;
 801191e:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011920:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8011924:	2301      	movs	r3, #1
}
 8011926:	4630      	mov	r0, r6
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011928:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801192a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 801192e:	b016      	add	sp, #88	; 0x58
 8011930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011938:	6820      	ldr	r0, [r4, #0]
 801193a:	f000 ff7b 	bl	8012834 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801193e:	b130      	cbz	r0, 801194e <HAL_SD_ConfigSpeedBusOperation+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011940:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8011942:	2601      	movs	r6, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011944:	4a74      	ldr	r2, [pc, #464]	; (8011b18 <HAL_SD_ConfigSpeedBusOperation+0x2a4>)
 8011946:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011948:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801194a:	4318      	orrs	r0, r3
 801194c:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 801194e:	2301      	movs	r3, #1
}
 8011950:	4630      	mov	r0, r6
  hsd->State = HAL_SD_STATE_READY;
 8011952:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8011956:	b016      	add	sp, #88	; 0x58
 8011958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (SpeedMode)
 801195c:	2904      	cmp	r1, #4
 801195e:	d898      	bhi.n	8011892 <HAL_SD_ConfigSpeedBusOperation+0x1e>
 8011960:	a301      	add	r3, pc, #4	; (adr r3, 8011968 <HAL_SD_ConfigSpeedBusOperation+0xf4>)
 8011962:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8011966:	bf00      	nop
 8011968:	080119e3 	.word	0x080119e3
 801196c:	080118dd 	.word	0x080118dd
 8011970:	0801189f 	.word	0x0801189f
 8011974:	080119b5 	.word	0x080119b5
 8011978:	0801197d 	.word	0x0801197d
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 801197c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801197e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011982:	d002      	beq.n	801198a <HAL_SD_ConfigSpeedBusOperation+0x116>
 8011984:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011986:	2b01      	cmp	r3, #1
 8011988:	d193      	bne.n	80118b2 <HAL_SD_ConfigSpeedBusOperation+0x3e>
  */
static uint32_t SD_DDR_Mode(SD_HandleTypeDef *hsd)
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 801198a:	2240      	movs	r2, #64	; 0x40
 801198c:	2100      	movs	r1, #0
 801198e:	a806      	add	r0, sp, #24
 8011990:	f010 fca4 	bl	80222dc <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8011994:	f7f9 f8d2 	bl	800ab3c <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8011998:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 801199a:	4607      	mov	r7, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 801199c:	2b00      	cmp	r3, #0
 801199e:	d05e      	beq.n	8011a5e <HAL_SD_ConfigSpeedBusOperation+0x1ea>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80119a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119a4:	d062      	beq.n	8011a6c <HAL_SD_ConfigSpeedBusOperation+0x1f8>
  HAL_StatusTypeDef status = HAL_OK;
 80119a6:	2600      	movs	r6, #0
 80119a8:	6823      	ldr	r3, [r4, #0]
          hsd->Instance->CLKCR |=  SDMMC_CLKCR_BUSSPEED | SDMMC_CLKCR_DDR;
 80119aa:	685a      	ldr	r2, [r3, #4]
 80119ac:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80119b0:	605a      	str	r2, [r3, #4]
 80119b2:	e794      	b.n	80118de <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80119b4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80119b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119ba:	d003      	beq.n	80119c4 <HAL_SD_ConfigSpeedBusOperation+0x150>
 80119bc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80119be:	2b01      	cmp	r3, #1
 80119c0:	f47f af77 	bne.w	80118b2 <HAL_SD_ConfigSpeedBusOperation+0x3e>
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80119c4:	4620      	mov	r0, r4
 80119c6:	f7ff fa8f 	bl	8010ee8 <SD_UltraHighSpeed>
 80119ca:	b310      	cbz	r0, 8011a12 <HAL_SD_ConfigSpeedBusOperation+0x19e>
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80119cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            status = HAL_ERROR;
 80119ce:	2601      	movs	r6, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80119d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80119d4:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80119d6:	6822      	ldr	r2, [r4, #0]
 80119d8:	6853      	ldr	r3, [r2, #4]
 80119da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80119de:	6053      	str	r3, [r2, #4]
 80119e0:	e77d      	b.n	80118de <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80119e2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80119e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119e8:	d007      	beq.n	80119fa <HAL_SD_ConfigSpeedBusOperation+0x186>
 80119ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80119ec:	2a01      	cmp	r2, #1
 80119ee:	d004      	beq.n	80119fa <HAL_SD_ConfigSpeedBusOperation+0x186>
        else if (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED)
 80119f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119f4:	f47f af72 	bne.w	80118dc <HAL_SD_ConfigSpeedBusOperation+0x68>
 80119f8:	e76b      	b.n	80118d2 <HAL_SD_ConfigSpeedBusOperation+0x5e>
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80119fa:	6822      	ldr	r2, [r4, #0]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80119fc:	4620      	mov	r0, r4
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80119fe:	6853      	ldr	r3, [r2, #4]
 8011a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a04:	6053      	str	r3, [r2, #4]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8011a06:	f7ff fa6f 	bl	8010ee8 <SD_UltraHighSpeed>
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	f43f af66 	beq.w	80118dc <HAL_SD_ConfigSpeedBusOperation+0x68>
 8011a10:	e75f      	b.n	80118d2 <HAL_SD_ConfigSpeedBusOperation+0x5e>
  HAL_StatusTypeDef status = HAL_OK;
 8011a12:	4606      	mov	r6, r0
 8011a14:	e7df      	b.n	80119d6 <HAL_SD_ConfigSpeedBusOperation+0x162>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a18:	0715      	lsls	r5, r2, #28
 8011a1a:	d479      	bmi.n	8011b10 <HAL_SD_ConfigSpeedBusOperation+0x29c>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a1e:	0790      	lsls	r0, r2, #30
 8011a20:	d473      	bmi.n	8011b0a <HAL_SD_ConfigSpeedBusOperation+0x296>

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a24:	0691      	lsls	r1, r2, #26
 8011a26:	d46d      	bmi.n	8011b04 <HAL_SD_ConfigSpeedBusOperation+0x290>

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);

    /* Test if the switch mode  is ok */
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011a28:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011a2c:	493b      	ldr	r1, [pc, #236]	; (8011b1c <HAL_SD_ConfigSpeedBusOperation+0x2a8>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011a2e:	0792      	lsls	r2, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011a30:	6399      	str	r1, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011a32:	d515      	bpl.n	8011a60 <HAL_SD_ConfigSpeedBusOperation+0x1ec>
    else
    {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
      hsd->DriveTransceiver_1_8V_Callback(SET);
#else
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8011a34:	2001      	movs	r0, #1
 8011a36:	f7f9 f81d 	bl	800aa74 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
#if defined (DLYB_SDMMC1) || defined (DLYB_SDMMC2)
      /* Enable DelayBlock Peripheral */
      /* SDMMC_CKin feedback clock selected as receive clock, for DDR50 */
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8011a3a:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011a3c:	4838      	ldr	r0, [pc, #224]	; (8011b20 <HAL_SD_ConfigSpeedBusOperation+0x2ac>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8011a3e:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011a40:	4938      	ldr	r1, [pc, #224]	; (8011b24 <HAL_SD_ConfigSpeedBusOperation+0x2b0>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8011a42:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8011a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a4a:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011a4c:	4b36      	ldr	r3, [pc, #216]	; (8011b28 <HAL_SD_ConfigSpeedBusOperation+0x2b4>)
 8011a4e:	4282      	cmp	r2, r0
 8011a50:	bf0c      	ite	eq
 8011a52:	4608      	moveq	r0, r1
 8011a54:	4618      	movne	r0, r3
 8011a56:	f000 fe49 	bl	80126ec <DelayBlock_Enable>
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	d0a3      	beq.n	80119a6 <HAL_SD_ConfigSpeedBusOperation+0x132>
 8011a5e:	6823      	ldr	r3, [r4, #0]
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011a60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 8011a62:	2601      	movs	r6, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011a64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011a68:	63a2      	str	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 8011a6a:	e79e      	b.n	80119aa <HAL_SD_ConfigSpeedBusOperation+0x136>
    hsd->Instance->DCTRL = 0;
 8011a6c:	6820      	ldr	r0, [r4, #0]
 8011a6e:	2300      	movs	r3, #0
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011a70:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 8011a72:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011a74:	f000 fede 	bl	8012834 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	d1f0      	bne.n	8011a5e <HAL_SD_ConfigSpeedBusOperation+0x1ea>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a80:	2340      	movs	r3, #64	; 0x40
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8011a82:	4669      	mov	r1, sp
 8011a84:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011a86:	e9cd 2300 	strd	r2, r3, [sp]
 8011a8a:	2260      	movs	r2, #96	; 0x60
 8011a8c:	2302      	movs	r3, #2
 8011a8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a92:	2200      	movs	r2, #0
 8011a94:	2301      	movs	r3, #1
 8011a96:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8011a9a:	f000 feb5 	bl	8012808 <SDMMC_ConfigData>
 8011a9e:	4606      	mov	r6, r0
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d1dc      	bne.n	8011a5e <HAL_SD_ConfigSpeedBusOperation+0x1ea>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_DDR50_SWITCH_PATTERN);
 8011aa4:	4921      	ldr	r1, [pc, #132]	; (8011b2c <HAL_SD_ConfigSpeedBusOperation+0x2b8>)
 8011aa6:	6820      	ldr	r0, [r4, #0]
 8011aa8:	f002 f870 	bl	8013b8c <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011aac:	4605      	mov	r5, r0
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	d1d5      	bne.n	8011a5e <HAL_SD_ConfigSpeedBusOperation+0x1ea>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011ab2:	f240 582a 	movw	r8, #1322	; 0x52a
 8011ab6:	e004      	b.n	8011ac2 <HAL_SD_ConfigSpeedBusOperation+0x24e>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8011ab8:	f7f9 f840 	bl	800ab3c <HAL_GetTick>
 8011abc:	1bc0      	subs	r0, r0, r7
 8011abe:	3001      	adds	r0, #1
 8011ac0:	d018      	beq.n	8011af4 <HAL_SD_ConfigSpeedBusOperation+0x280>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011ac2:	6823      	ldr	r3, [r4, #0]
 8011ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	ea12 0f08 	tst.w	r2, r8
 8011acc:	d1a3      	bne.n	8011a16 <HAL_SD_ConfigSpeedBusOperation+0x1a2>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ad0:	041b      	lsls	r3, r3, #16
 8011ad2:	d5f1      	bpl.n	8011ab8 <HAL_SD_ConfigSpeedBusOperation+0x244>
 8011ad4:	ab06      	add	r3, sp, #24
 8011ad6:	eb03 1945 	add.w	r9, r3, r5, lsl #5
 8011ada:	ab0e      	add	r3, sp, #56	; 0x38
 8011adc:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
 8011ae0:	e000      	b.n	8011ae4 <HAL_SD_ConfigSpeedBusOperation+0x270>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8011ae2:	6820      	ldr	r0, [r4, #0]
 8011ae4:	f000 fe6e 	bl	80127c4 <SDMMC_ReadFIFO>
 8011ae8:	f849 0b04 	str.w	r0, [r9], #4
        for (count = 0U; count < 8U; count++)
 8011aec:	45d1      	cmp	r9, sl
 8011aee:	d1f8      	bne.n	8011ae2 <HAL_SD_ConfigSpeedBusOperation+0x26e>
        loop ++;
 8011af0:	3501      	adds	r5, #1
 8011af2:	e7e1      	b.n	8011ab8 <HAL_SD_ConfigSpeedBusOperation+0x244>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011af4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8011af8:	2201      	movs	r2, #1
 8011afa:	6823      	ldr	r3, [r4, #0]
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011afc:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8011afe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8011b02:	e7ad      	b.n	8011a60 <HAL_SD_ConfigSpeedBusOperation+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011b04:	2220      	movs	r2, #32
 8011b06:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8011b08:	e7aa      	b.n	8011a60 <HAL_SD_ConfigSpeedBusOperation+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011b0a:	2202      	movs	r2, #2
 8011b0c:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8011b0e:	e7a7      	b.n	8011a60 <HAL_SD_ConfigSpeedBusOperation+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011b10:	2208      	movs	r2, #8
 8011b12:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8011b14:	e749      	b.n	80119aa <HAL_SD_ConfigSpeedBusOperation+0x136>
 8011b16:	bf00      	nop
 8011b18:	1fe00fff 	.word	0x1fe00fff
 8011b1c:	18000f3a 	.word	0x18000f3a
 8011b20:	52007000 	.word	0x52007000
 8011b24:	52008000 	.word	0x52008000
 8011b28:	48022800 	.word	0x48022800
 8011b2c:	80ffff04 	.word	0x80ffff04

08011b30 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011b30:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8011b32:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011b34:	0409      	lsls	r1, r1, #16
{
 8011b36:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011b38:	6800      	ldr	r0, [r0, #0]
 8011b3a:	f001 fed9 	bl	80138f0 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011b3e:	4601      	mov	r1, r0
 8011b40:	b120      	cbz	r0, 8011b4c <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8011b42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b44:	2000      	movs	r0, #0
 8011b46:	4319      	orrs	r1, r3
 8011b48:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8011b4a:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011b4c:	6820      	ldr	r0, [r4, #0]
 8011b4e:	f000 fe57 	bl	8012800 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8011b52:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8011b56:	bd10      	pop	{r4, pc}

08011b58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011b5a:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
 8011b5e:	2f20      	cmp	r7, #32
 8011b60:	d144      	bne.n	8011bec <HAL_UART_Transmit_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8011b62:	2900      	cmp	r1, #0
 8011b64:	d040      	beq.n	8011be8 <HAL_UART_Transmit_DMA+0x90>
 8011b66:	fab2 f682 	clz	r6, r2
 8011b6a:	0976      	lsrs	r6, r6, #5
 8011b6c:	2a00      	cmp	r2, #0
 8011b6e:	d03b      	beq.n	8011be8 <HAL_UART_Transmit_DMA+0x90>
 8011b70:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8011b72:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
 8011b76:	2801      	cmp	r0, #1
 8011b78:	d038      	beq.n	8011bec <HAL_UART_Transmit_DMA+0x94>
 8011b7a:	2501      	movs	r5, #1
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011b7c:	2321      	movs	r3, #33	; 0x21

    if (huart->hdmatx != NULL)
 8011b7e:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 8011b80:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 8011b84:	6521      	str	r1, [r4, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b86:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->TxXferSize  = Size;
 8011b8a:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 8011b8e:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011b92:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 8011b96:	b1d8      	cbz	r0, 8011bd0 <HAL_UART_Transmit_DMA+0x78>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011b98:	f8df c054 	ldr.w	ip, [pc, #84]	; 8011bf0 <HAL_UART_Transmit_DMA+0x98>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011b9c:	4613      	mov	r3, r2
 8011b9e:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011ba0:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011ba4:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8011bf4 <HAL_UART_Transmit_DMA+0x9c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011ba8:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8011baa:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011bac:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011bb0:	f8df c044 	ldr.w	ip, [pc, #68]	; 8011bf8 <HAL_UART_Transmit_DMA+0xa0>
 8011bb4:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011bb8:	f7f9 fed6 	bl	800b968 <HAL_DMA_Start_IT>
 8011bbc:	b140      	cbz	r0, 8011bd0 <HAL_UART_Transmit_DMA+0x78>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011bbe:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 8011bc0:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8011bc2:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011bc6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8011bca:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 8011bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011bd0:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8011bd2:	2200      	movs	r2, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011bd4:	2140      	movs	r1, #64	; 0x40
    return HAL_OK;
 8011bd6:	4610      	mov	r0, r2
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011bd8:	6219      	str	r1, [r3, #32]
    __HAL_UNLOCK(huart);
 8011bda:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011bde:	689a      	ldr	r2, [r3, #8]
 8011be0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011be4:	609a      	str	r2, [r3, #8]
}
 8011be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011be8:	2001      	movs	r0, #1
}
 8011bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8011bec:	2002      	movs	r0, #2
}
 8011bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bf0:	08011cad 	.word	0x08011cad
 8011bf4:	08011cdd 	.word	0x08011cdd
 8011bf8:	08011d35 	.word	0x08011d35

08011bfc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011bfe:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
 8011c02:	2f20      	cmp	r7, #32
 8011c04:	d148      	bne.n	8011c98 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8011c06:	2900      	cmp	r1, #0
 8011c08:	d044      	beq.n	8011c94 <HAL_UART_Receive_DMA+0x98>
 8011c0a:	fab2 f682 	clz	r6, r2
 8011c0e:	0976      	lsrs	r6, r6, #5
 8011c10:	2a00      	cmp	r2, #0
 8011c12:	d03f      	beq.n	8011c94 <HAL_UART_Receive_DMA+0x98>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8011c14:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8011c18:	4604      	mov	r4, r0
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d03c      	beq.n	8011c98 <HAL_UART_Receive_DMA+0x9c>
 8011c1e:	2501      	movs	r5, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011c20:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c22:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    huart->pRxBuffPtr = pData;
 8011c26:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize = Size;
 8011c28:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    __HAL_LOCK(huart);
 8011c2c:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011c30:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8011c34:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8011c36:	b1e0      	cbz	r0, 8011c72 <HAL_UART_Receive_DMA+0x76>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011c38:	f8df c060 	ldr.w	ip, [pc, #96]	; 8011c9c <HAL_UART_Receive_DMA+0xa0>

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	460a      	mov	r2, r1
 8011c40:	6821      	ldr	r1, [r4, #0]
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011c42:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011c46:	f8df c058 	ldr.w	ip, [pc, #88]	; 8011ca0 <HAL_UART_Receive_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011c4a:	3124      	adds	r1, #36	; 0x24
      huart->hdmarx->XferAbortCallback = NULL;
 8011c4c:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011c4e:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011c52:	f8df c050 	ldr.w	ip, [pc, #80]	; 8011ca4 <HAL_UART_Receive_DMA+0xa8>
 8011c56:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011c5a:	f7f9 fe85 	bl	800b968 <HAL_DMA_Start_IT>
 8011c5e:	b140      	cbz	r0, 8011c72 <HAL_UART_Receive_DMA+0x76>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011c60:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 8011c62:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8011c64:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011c68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8011c6c:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 8011c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c72:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8011c74:	2000      	movs	r0, #0
 8011c76:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011c80:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c82:	689a      	ldr	r2, [r3, #8]
 8011c84:	f042 0201 	orr.w	r2, r2, #1
 8011c88:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c8a:	689a      	ldr	r2, [r3, #8]
 8011c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c90:	609a      	str	r2, [r3, #8]
}
 8011c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011c94:	2001      	movs	r0, #1
}
 8011c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8011c98:	2002      	movs	r0, #2
}
 8011c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c9c:	08011ced 	.word	0x08011ced
 8011ca0:	08011d29 	.word	0x08011d29
 8011ca4:	08011d35 	.word	0x08011d35

08011ca8 <HAL_UART_TxCpltCallback>:
 8011ca8:	4770      	bx	lr
 8011caa:	bf00      	nop

08011cac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011cac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011cae:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cb0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cb6:	d00c      	beq.n	8011cd2 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011cb8:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 8011cba:	2200      	movs	r2, #0
 8011cbc:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011cc0:	689a      	ldr	r2, [r3, #8]
 8011cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011cc6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011cce:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011cd0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8011cd2:	f7ff ffe9 	bl	8011ca8 <HAL_UART_TxCpltCallback>
}
 8011cd6:	bd08      	pop	{r3, pc}

08011cd8 <HAL_UART_TxHalfCpltCallback>:
 8011cd8:	4770      	bx	lr
 8011cda:	bf00      	nop

08011cdc <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011cdc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8011cde:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8011ce0:	f7ff fffa 	bl	8011cd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ce4:	bd08      	pop	{r3, pc}
 8011ce6:	bf00      	nop

08011ce8 <HAL_UART_RxCpltCallback>:
 8011ce8:	4770      	bx	lr
 8011cea:	bf00      	nop

08011cec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011cec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011cee:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cf0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cf6:	d012      	beq.n	8011d1e <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011cf8:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 8011cfa:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011cfc:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 8011cfe:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011d08:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d0a:	689a      	ldr	r2, [r3, #8]
 8011d0c:	f022 0201 	bic.w	r2, r2, #1
 8011d10:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011d12:	689a      	ldr	r2, [r3, #8]
 8011d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011d18:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8011d1a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8011d1e:	f7ff ffe3 	bl	8011ce8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d22:	bd08      	pop	{r3, pc}

08011d24 <HAL_UART_RxHalfCpltCallback>:
 8011d24:	4770      	bx	lr
 8011d26:	bf00      	nop

08011d28 <UART_DMARxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8011d28:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8011d2a:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8011d2c:	f7ff fffa 	bl	8011d24 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d30:	bd08      	pop	{r3, pc}
 8011d32:	bf00      	nop

08011d34 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d34:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8011d36:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011d38:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011d3a:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011d3e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011d42:	689a      	ldr	r2, [r3, #8]
 8011d44:	0615      	lsls	r5, r2, #24
 8011d46:	d501      	bpl.n	8011d4c <UART_DMAError+0x18>
 8011d48:	2c21      	cmp	r4, #33	; 0x21
 8011d4a:	d01d      	beq.n	8011d88 <UART_DMAError+0x54>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011d4c:	689a      	ldr	r2, [r3, #8]
 8011d4e:	0652      	lsls	r2, r2, #25
 8011d50:	d501      	bpl.n	8011d56 <UART_DMAError+0x22>
 8011d52:	2922      	cmp	r1, #34	; 0x22
 8011d54:	d008      	beq.n	8011d68 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011d56:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8011d5a:	f043 0310 	orr.w	r3, r3, #16
 8011d5e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d62:	f7f3 f829 	bl	8004db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d66:	bd38      	pop	{r3, r4, r5, pc}
    huart->RxXferCount = 0U;
 8011d68:	2400      	movs	r4, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011d6a:	4a0f      	ldr	r2, [pc, #60]	; (8011da8 <UART_DMAError+0x74>)
  huart->RxState = HAL_UART_STATE_READY;
 8011d6c:	2520      	movs	r5, #32
    huart->RxXferCount = 0U;
 8011d6e:	f8a0 405e 	strh.w	r4, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d72:	6819      	ldr	r1, [r3, #0]
 8011d74:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8011d78:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011d7a:	6899      	ldr	r1, [r3, #8]
 8011d7c:	400a      	ands	r2, r1
 8011d7e:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8011d80:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  huart->RxISR = NULL;
 8011d84:	66c4      	str	r4, [r0, #108]	; 0x6c
}
 8011d86:	e7e6      	b.n	8011d56 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 8011d88:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8011d8a:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 8011d8c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011d90:	681a      	ldr	r2, [r3, #0]
 8011d92:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011d96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011d98:	689a      	ldr	r2, [r3, #8]
 8011d9a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8011d9e:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8011da0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
}
 8011da4:	e7d2      	b.n	8011d4c <UART_DMAError+0x18>
 8011da6:	bf00      	nop
 8011da8:	effffffe 	.word	0xeffffffe

08011dac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011dac:	6802      	ldr	r2, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011dae:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011db2:	69d3      	ldr	r3, [r2, #28]
  if (errorflags == 0U)
 8011db4:	ea13 0f0c 	tst.w	r3, ip
{
 8011db8:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011dba:	6815      	ldr	r5, [r2, #0]
{
 8011dbc:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011dbe:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8011dc0:	f000 8091 	beq.w	8011ee6 <HAL_UART_IRQHandler+0x13a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011dc4:	4e73      	ldr	r6, [pc, #460]	; (8011f94 <HAL_UART_IRQHandler+0x1e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011dc6:	4874      	ldr	r0, [pc, #464]	; (8011f98 <HAL_UART_IRQHandler+0x1ec>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011dc8:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011dcc:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011dce:	ea5c 0600 	orrs.w	r6, ip, r0
 8011dd2:	d11d      	bne.n	8011e10 <HAL_UART_IRQHandler+0x64>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011dd4:	02d8      	lsls	r0, r3, #11
 8011dd6:	d502      	bpl.n	8011dde <HAL_UART_IRQHandler+0x32>
 8011dd8:	024e      	lsls	r6, r1, #9
 8011dda:	f100 80aa 	bmi.w	8011f32 <HAL_UART_IRQHandler+0x186>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011dde:	0618      	lsls	r0, r3, #24
 8011de0:	d506      	bpl.n	8011df0 <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011de2:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011de6:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011dea:	4301      	orrs	r1, r0
 8011dec:	f040 8099 	bne.w	8011f22 <HAL_UART_IRQHandler+0x176>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011df0:	065e      	lsls	r6, r3, #25
 8011df2:	d502      	bpl.n	8011dfa <HAL_UART_IRQHandler+0x4e>
 8011df4:	0668      	lsls	r0, r5, #25
 8011df6:	f100 80a8 	bmi.w	8011f4a <HAL_UART_IRQHandler+0x19e>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011dfa:	0219      	lsls	r1, r3, #8
 8011dfc:	d502      	bpl.n	8011e04 <HAL_UART_IRQHandler+0x58>
 8011dfe:	006a      	lsls	r2, r5, #1
 8011e00:	f100 80b0 	bmi.w	8011f64 <HAL_UART_IRQHandler+0x1b8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011e04:	01db      	lsls	r3, r3, #7
 8011e06:	d502      	bpl.n	8011e0e <HAL_UART_IRQHandler+0x62>
 8011e08:	2d00      	cmp	r5, #0
 8011e0a:	f2c0 80b7 	blt.w	8011f7c <HAL_UART_IRQHandler+0x1d0>
}
 8011e0e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011e10:	07de      	lsls	r6, r3, #31
 8011e12:	d509      	bpl.n	8011e28 <HAL_UART_IRQHandler+0x7c>
 8011e14:	05ee      	lsls	r6, r5, #23
 8011e16:	d507      	bpl.n	8011e28 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011e18:	2601      	movs	r6, #1
 8011e1a:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011e1c:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8011e20:	f046 0601 	orr.w	r6, r6, #1
 8011e24:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e28:	079e      	lsls	r6, r3, #30
 8011e2a:	d56d      	bpl.n	8011f08 <HAL_UART_IRQHandler+0x15c>
 8011e2c:	07ce      	lsls	r6, r1, #31
 8011e2e:	d509      	bpl.n	8011e44 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011e30:	2602      	movs	r6, #2
 8011e32:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011e34:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8011e38:	f046 0604 	orr.w	r6, r6, #4
 8011e3c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e40:	075e      	lsls	r6, r3, #29
 8011e42:	d465      	bmi.n	8011f10 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011e44:	071e      	lsls	r6, r3, #28
 8011e46:	d50b      	bpl.n	8011e60 <HAL_UART_IRQHandler+0xb4>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011e48:	f005 0620 	and.w	r6, r5, #32
 8011e4c:	4330      	orrs	r0, r6
 8011e4e:	d007      	beq.n	8011e60 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011e50:	2008      	movs	r0, #8
 8011e52:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011e54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011e58:	f040 0008 	orr.w	r0, r0, #8
 8011e5c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011e60:	051e      	lsls	r6, r3, #20
 8011e62:	d50a      	bpl.n	8011e7a <HAL_UART_IRQHandler+0xce>
 8011e64:	0168      	lsls	r0, r5, #5
 8011e66:	d508      	bpl.n	8011e7a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011e68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011e6c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011e6e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011e72:	f040 0020 	orr.w	r0, r0, #32
 8011e76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011e7a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	d0c5      	beq.n	8011e0e <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011e82:	069e      	lsls	r6, r3, #26
 8011e84:	d506      	bpl.n	8011e94 <HAL_UART_IRQHandler+0xe8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011e86:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011e8a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8011e8e:	ea55 0301 	orrs.w	r3, r5, r1
 8011e92:	d16c      	bne.n	8011f6e <HAL_UART_IRQHandler+0x1c2>
      errorcode = huart->ErrorCode;
 8011e94:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011e98:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011e9a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ea2:	431d      	orrs	r5, r3
 8011ea4:	d06f      	beq.n	8011f86 <HAL_UART_IRQHandler+0x1da>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ea6:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8011ea8:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011eaa:	4b3c      	ldr	r3, [pc, #240]	; (8011f9c <HAL_UART_IRQHandler+0x1f0>)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011eac:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8011eb0:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011eb2:	6891      	ldr	r1, [r2, #8]
 8011eb4:	400b      	ands	r3, r1
  huart->RxISR = NULL;
 8011eb6:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011eb8:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8011eba:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ebe:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8011ec0:	66e1      	str	r1, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ec2:	065d      	lsls	r5, r3, #25
 8011ec4:	d53d      	bpl.n	8011f42 <HAL_UART_IRQHandler+0x196>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011ec6:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8011ec8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ece:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	d036      	beq.n	8011f42 <HAL_UART_IRQHandler+0x196>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011ed4:	4b32      	ldr	r3, [pc, #200]	; (8011fa0 <HAL_UART_IRQHandler+0x1f4>)
 8011ed6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011ed8:	f7fa f856 	bl	800bf88 <HAL_DMA_Abort_IT>
 8011edc:	2800      	cmp	r0, #0
 8011ede:	d096      	beq.n	8011e0e <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011ee0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8011ee2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011ee4:	e00d      	b.n	8011f02 <HAL_UART_IRQHandler+0x156>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011ee6:	069e      	lsls	r6, r3, #26
 8011ee8:	f57f af74 	bpl.w	8011dd4 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011eec:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011ef0:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 8011ef4:	ea56 060c 	orrs.w	r6, r6, ip
 8011ef8:	f43f af6c 	beq.w	8011dd4 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8011efc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d085      	beq.n	8011e0e <HAL_UART_IRQHandler+0x62>
}
 8011f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011f06:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f08:	075e      	lsls	r6, r3, #29
 8011f0a:	d59b      	bpl.n	8011e44 <HAL_UART_IRQHandler+0x98>
 8011f0c:	07ce      	lsls	r6, r1, #31
 8011f0e:	d599      	bpl.n	8011e44 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011f10:	2604      	movs	r6, #4
 8011f12:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f14:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8011f18:	f046 0602 	orr.w	r6, r6, #2
 8011f1c:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8011f20:	e790      	b.n	8011e44 <HAL_UART_IRQHandler+0x98>
    if (huart->TxISR != NULL)
 8011f22:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	f43f af72 	beq.w	8011e0e <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 8011f2a:	4620      	mov	r0, r4
}
 8011f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8011f30:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011f32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8011f36:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011f38:	6213      	str	r3, [r2, #32]
}
 8011f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8011f3e:	f000 bbcf 	b.w	80126e0 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8011f42:	4620      	mov	r0, r4
 8011f44:	f7f2 ff38 	bl	8004db8 <HAL_UART_ErrorCallback>
}
 8011f48:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f4a:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011f4c:	2020      	movs	r0, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011f4e:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f54:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8011f56:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011f5a:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8011f5c:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8011f5e:	f7ff fea3 	bl	8011ca8 <HAL_UART_TxCpltCallback>
}
 8011f62:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011f64:	4620      	mov	r0, r4
}
 8011f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011f6a:	f000 bbbd 	b.w	80126e8 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8011f6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d08f      	beq.n	8011e94 <HAL_UART_IRQHandler+0xe8>
          huart->RxISR(huart);
 8011f74:	4620      	mov	r0, r4
 8011f76:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011f78:	6822      	ldr	r2, [r4, #0]
 8011f7a:	e78b      	b.n	8011e94 <HAL_UART_IRQHandler+0xe8>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011f7c:	4620      	mov	r0, r4
}
 8011f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011f82:	f000 bbaf 	b.w	80126e4 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8011f86:	4620      	mov	r0, r4
 8011f88:	f7f2 ff16 	bl	8004db8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f8c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
}
 8011f90:	bd70      	pop	{r4, r5, r6, pc}
 8011f92:	bf00      	nop
 8011f94:	04000120 	.word	0x04000120
 8011f98:	10000001 	.word	0x10000001
 8011f9c:	effffffe 	.word	0xeffffffe
 8011fa0:	08011fa5 	.word	0x08011fa5

08011fa4 <UART_DMAAbortOnError>:
{
 8011fa4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fa6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011fae:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8011fb2:	f7f2 ff01 	bl	8004db8 <HAL_UART_ErrorCallback>
}
 8011fb6:	bd08      	pop	{r3, pc}

08011fb8 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8011fb8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 8011fbc:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 8011fc0:	4310      	orrs	r0, r2
 8011fc2:	4770      	bx	lr

08011fc4 <UART_SetConfig>:
{
 8011fc4:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011fc6:	6882      	ldr	r2, [r0, #8]
{
 8011fc8:	4604      	mov	r4, r0
 8011fca:	b087      	sub	sp, #28
  if (UART_INSTANCE_LOWPOWER(huart))
 8011fcc:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011fce:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011fd2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011fd4:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8011fd6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011fd8:	4302      	orrs	r2, r0
 8011fda:	69e0      	ldr	r0, [r4, #28]
 8011fdc:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8011fde:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011fe0:	49bc      	ldr	r1, [pc, #752]	; (80122d4 <UART_SetConfig+0x310>)
 8011fe2:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011fe4:	4dbc      	ldr	r5, [pc, #752]	; (80122d8 <UART_SetConfig+0x314>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011fe6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011fe8:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011fea:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011fec:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011fee:	685a      	ldr	r2, [r3, #4]
 8011ff0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8011ff4:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011ff8:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011ffa:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011ffc:	f000 80e0 	beq.w	80121c0 <UART_SetConfig+0x1fc>
    tmpreg |= huart->Init.OneBitSampling;
 8012000:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012002:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8012004:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012006:	4ab5      	ldr	r2, [pc, #724]	; (80122dc <UART_SetConfig+0x318>)
 8012008:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801200a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801200c:	4311      	orrs	r1, r2
 801200e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012012:	f022 020f 	bic.w	r2, r2, #15
 8012016:	432a      	orrs	r2, r5
 8012018:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 801201a:	4ab1      	ldr	r2, [pc, #708]	; (80122e0 <UART_SetConfig+0x31c>)
 801201c:	4293      	cmp	r3, r2
 801201e:	d023      	beq.n	8012068 <UART_SetConfig+0xa4>
 8012020:	4ab0      	ldr	r2, [pc, #704]	; (80122e4 <UART_SetConfig+0x320>)
 8012022:	4293      	cmp	r3, r2
 8012024:	d076      	beq.n	8012114 <UART_SetConfig+0x150>
 8012026:	4ab0      	ldr	r2, [pc, #704]	; (80122e8 <UART_SetConfig+0x324>)
 8012028:	4293      	cmp	r3, r2
 801202a:	f000 8190 	beq.w	801234e <UART_SetConfig+0x38a>
 801202e:	4aaf      	ldr	r2, [pc, #700]	; (80122ec <UART_SetConfig+0x328>)
 8012030:	4293      	cmp	r3, r2
 8012032:	f000 81e3 	beq.w	80123fc <UART_SetConfig+0x438>
 8012036:	4aae      	ldr	r2, [pc, #696]	; (80122f0 <UART_SetConfig+0x32c>)
 8012038:	4293      	cmp	r3, r2
 801203a:	f000 8121 	beq.w	8012280 <UART_SetConfig+0x2bc>
 801203e:	4aad      	ldr	r2, [pc, #692]	; (80122f4 <UART_SetConfig+0x330>)
 8012040:	4293      	cmp	r3, r2
 8012042:	f000 81e5 	beq.w	8012410 <UART_SetConfig+0x44c>
 8012046:	4aac      	ldr	r2, [pc, #688]	; (80122f8 <UART_SetConfig+0x334>)
 8012048:	4293      	cmp	r3, r2
 801204a:	f000 8236 	beq.w	80124ba <UART_SetConfig+0x4f6>
 801204e:	4aab      	ldr	r2, [pc, #684]	; (80122fc <UART_SetConfig+0x338>)
 8012050:	4293      	cmp	r3, r2
 8012052:	f000 81e9 	beq.w	8012428 <UART_SetConfig+0x464>
        ret = HAL_ERROR;
 8012056:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 8012058:	2300      	movs	r3, #0
 801205a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 801205e:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8012062:	6723      	str	r3, [r4, #112]	; 0x70
}
 8012064:	b007      	add	sp, #28
 8012066:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012068:	4ba5      	ldr	r3, [pc, #660]	; (8012300 <UART_SetConfig+0x33c>)
 801206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801206c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012070:	2b28      	cmp	r3, #40	; 0x28
 8012072:	d8f0      	bhi.n	8012056 <UART_SetConfig+0x92>
 8012074:	4aa3      	ldr	r2, [pc, #652]	; (8012304 <UART_SetConfig+0x340>)
 8012076:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012078:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801207c:	d055      	beq.n	801212a <UART_SetConfig+0x166>
    switch (clocksource)
 801207e:	2b20      	cmp	r3, #32
 8012080:	f200 814a 	bhi.w	8012318 <UART_SetConfig+0x354>
 8012084:	2b20      	cmp	r3, #32
 8012086:	d8e6      	bhi.n	8012056 <UART_SetConfig+0x92>
 8012088:	a201      	add	r2, pc, #4	; (adr r2, 8012090 <UART_SetConfig+0xcc>)
 801208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801208e:	bf00      	nop
 8012090:	080122cf 	.word	0x080122cf
 8012094:	080122c9 	.word	0x080122c9
 8012098:	08012057 	.word	0x08012057
 801209c:	08012057 	.word	0x08012057
 80120a0:	080122b9 	.word	0x080122b9
 80120a4:	08012057 	.word	0x08012057
 80120a8:	08012057 	.word	0x08012057
 80120ac:	08012057 	.word	0x08012057
 80120b0:	080122ab 	.word	0x080122ab
 80120b4:	08012057 	.word	0x08012057
 80120b8:	08012057 	.word	0x08012057
 80120bc:	08012057 	.word	0x08012057
 80120c0:	08012057 	.word	0x08012057
 80120c4:	08012057 	.word	0x08012057
 80120c8:	08012057 	.word	0x08012057
 80120cc:	08012057 	.word	0x08012057
 80120d0:	08012295 	.word	0x08012295
 80120d4:	08012057 	.word	0x08012057
 80120d8:	08012057 	.word	0x08012057
 80120dc:	08012057 	.word	0x08012057
 80120e0:	08012057 	.word	0x08012057
 80120e4:	08012057 	.word	0x08012057
 80120e8:	08012057 	.word	0x08012057
 80120ec:	08012057 	.word	0x08012057
 80120f0:	08012057 	.word	0x08012057
 80120f4:	08012057 	.word	0x08012057
 80120f8:	08012057 	.word	0x08012057
 80120fc:	08012057 	.word	0x08012057
 8012100:	08012057 	.word	0x08012057
 8012104:	08012057 	.word	0x08012057
 8012108:	08012057 	.word	0x08012057
 801210c:	08012057 	.word	0x08012057
 8012110:	0801243d 	.word	0x0801243d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012114:	4b7a      	ldr	r3, [pc, #488]	; (8012300 <UART_SetConfig+0x33c>)
 8012116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012118:	f003 0307 	and.w	r3, r3, #7
 801211c:	2b05      	cmp	r3, #5
 801211e:	d89a      	bhi.n	8012056 <UART_SetConfig+0x92>
 8012120:	4a79      	ldr	r2, [pc, #484]	; (8012308 <UART_SetConfig+0x344>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012122:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012126:	5cd3      	ldrb	r3, [r2, r3]
 8012128:	d1a9      	bne.n	801207e <UART_SetConfig+0xba>
    switch (clocksource)
 801212a:	2b20      	cmp	r3, #32
 801212c:	f200 8146 	bhi.w	80123bc <UART_SetConfig+0x3f8>
 8012130:	2b20      	cmp	r3, #32
 8012132:	d890      	bhi.n	8012056 <UART_SetConfig+0x92>
 8012134:	a201      	add	r2, pc, #4	; (adr r2, 801213c <UART_SetConfig+0x178>)
 8012136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801213a:	bf00      	nop
 801213c:	080124a7 	.word	0x080124a7
 8012140:	080124a1 	.word	0x080124a1
 8012144:	08012057 	.word	0x08012057
 8012148:	08012057 	.word	0x08012057
 801214c:	080124ad 	.word	0x080124ad
 8012150:	08012057 	.word	0x08012057
 8012154:	08012057 	.word	0x08012057
 8012158:	08012057 	.word	0x08012057
 801215c:	0801248f 	.word	0x0801248f
 8012160:	08012057 	.word	0x08012057
 8012164:	08012057 	.word	0x08012057
 8012168:	08012057 	.word	0x08012057
 801216c:	08012057 	.word	0x08012057
 8012170:	08012057 	.word	0x08012057
 8012174:	08012057 	.word	0x08012057
 8012178:	08012057 	.word	0x08012057
 801217c:	0801247b 	.word	0x0801247b
 8012180:	08012057 	.word	0x08012057
 8012184:	08012057 	.word	0x08012057
 8012188:	08012057 	.word	0x08012057
 801218c:	08012057 	.word	0x08012057
 8012190:	08012057 	.word	0x08012057
 8012194:	08012057 	.word	0x08012057
 8012198:	08012057 	.word	0x08012057
 801219c:	08012057 	.word	0x08012057
 80121a0:	08012057 	.word	0x08012057
 80121a4:	08012057 	.word	0x08012057
 80121a8:	08012057 	.word	0x08012057
 80121ac:	08012057 	.word	0x08012057
 80121b0:	08012057 	.word	0x08012057
 80121b4:	08012057 	.word	0x08012057
 80121b8:	08012057 	.word	0x08012057
 80121bc:	080124b7 	.word	0x080124b7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80121c0:	6898      	ldr	r0, [r3, #8]
 80121c2:	4a46      	ldr	r2, [pc, #280]	; (80122dc <UART_SetConfig+0x318>)
 80121c4:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121c6:	484e      	ldr	r0, [pc, #312]	; (8012300 <UART_SetConfig+0x33c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80121c8:	430a      	orrs	r2, r1
 80121ca:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80121cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80121d0:	f022 020f 	bic.w	r2, r2, #15
 80121d4:	430a      	orrs	r2, r1
 80121d6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121d8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80121da:	f003 0307 	and.w	r3, r3, #7
 80121de:	2b05      	cmp	r3, #5
 80121e0:	f63f af39 	bhi.w	8012056 <UART_SetConfig+0x92>
 80121e4:	4a49      	ldr	r2, [pc, #292]	; (801230c <UART_SetConfig+0x348>)
 80121e6:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 80121e8:	2b20      	cmp	r3, #32
 80121ea:	f200 80ba 	bhi.w	8012362 <UART_SetConfig+0x39e>
 80121ee:	2b01      	cmp	r3, #1
 80121f0:	f67f af31 	bls.w	8012056 <UART_SetConfig+0x92>
 80121f4:	3b02      	subs	r3, #2
 80121f6:	2b1e      	cmp	r3, #30
 80121f8:	f63f af2d 	bhi.w	8012056 <UART_SetConfig+0x92>
 80121fc:	a201      	add	r2, pc, #4	; (adr r2, 8012204 <UART_SetConfig+0x240>)
 80121fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012202:	bf00      	nop
 8012204:	08012471 	.word	0x08012471
 8012208:	08012057 	.word	0x08012057
 801220c:	08012467 	.word	0x08012467
 8012210:	08012057 	.word	0x08012057
 8012214:	08012057 	.word	0x08012057
 8012218:	08012057 	.word	0x08012057
 801221c:	08012455 	.word	0x08012455
 8012220:	08012057 	.word	0x08012057
 8012224:	08012057 	.word	0x08012057
 8012228:	08012057 	.word	0x08012057
 801222c:	08012057 	.word	0x08012057
 8012230:	08012057 	.word	0x08012057
 8012234:	08012057 	.word	0x08012057
 8012238:	08012057 	.word	0x08012057
 801223c:	08012441 	.word	0x08012441
 8012240:	08012057 	.word	0x08012057
 8012244:	08012057 	.word	0x08012057
 8012248:	08012057 	.word	0x08012057
 801224c:	08012057 	.word	0x08012057
 8012250:	08012057 	.word	0x08012057
 8012254:	08012057 	.word	0x08012057
 8012258:	08012057 	.word	0x08012057
 801225c:	08012057 	.word	0x08012057
 8012260:	08012057 	.word	0x08012057
 8012264:	08012057 	.word	0x08012057
 8012268:	08012057 	.word	0x08012057
 801226c:	08012057 	.word	0x08012057
 8012270:	08012057 	.word	0x08012057
 8012274:	08012057 	.word	0x08012057
 8012278:	08012057 	.word	0x08012057
 801227c:	08012477 	.word	0x08012477
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012280:	4b1f      	ldr	r3, [pc, #124]	; (8012300 <UART_SetConfig+0x33c>)
 8012282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012284:	f003 0307 	and.w	r3, r3, #7
 8012288:	2b05      	cmp	r3, #5
 801228a:	f63f aee4 	bhi.w	8012056 <UART_SetConfig+0x92>
 801228e:	4a20      	ldr	r2, [pc, #128]	; (8012310 <UART_SetConfig+0x34c>)
 8012290:	5cd3      	ldrb	r3, [r2, r3]
 8012292:	e6f1      	b.n	8012078 <UART_SetConfig+0xb4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012294:	4b1a      	ldr	r3, [pc, #104]	; (8012300 <UART_SetConfig+0x33c>)
 8012296:	681a      	ldr	r2, [r3, #0]
 8012298:	0692      	lsls	r2, r2, #26
 801229a:	f140 80c3 	bpl.w	8012424 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	481c      	ldr	r0, [pc, #112]	; (8012314 <UART_SetConfig+0x350>)
 80122a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80122a6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80122a8:	e03b      	b.n	8012322 <UART_SetConfig+0x35e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80122aa:	a803      	add	r0, sp, #12
 80122ac:	f7fd fffc 	bl	80102a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80122b0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80122b2:	b938      	cbnz	r0, 80122c4 <UART_SetConfig+0x300>
          pclk = (uint32_t) HSI_VALUE;
 80122b4:	2000      	movs	r0, #0
 80122b6:	e6cf      	b.n	8012058 <UART_SetConfig+0x94>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80122b8:	4668      	mov	r0, sp
 80122ba:	f7fd ff49 	bl	8010150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80122be:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80122c0:	2800      	cmp	r0, #0
 80122c2:	d0f7      	beq.n	80122b4 <UART_SetConfig+0x2f0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80122c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80122c6:	e02c      	b.n	8012322 <UART_SetConfig+0x35e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80122c8:	f7fd f892 	bl	800f3f0 <HAL_RCC_GetPCLK2Freq>
        break;
 80122cc:	e7f1      	b.n	80122b2 <UART_SetConfig+0x2ee>
        pclk = HAL_RCC_GetPCLK1Freq();
 80122ce:	f7fd f847 	bl	800f360 <HAL_RCC_GetPCLK1Freq>
        break;
 80122d2:	e7ee      	b.n	80122b2 <UART_SetConfig+0x2ee>
 80122d4:	cfff69f3 	.word	0xcfff69f3
 80122d8:	58000c00 	.word	0x58000c00
 80122dc:	11fff4ff 	.word	0x11fff4ff
 80122e0:	40011000 	.word	0x40011000
 80122e4:	40004400 	.word	0x40004400
 80122e8:	40004800 	.word	0x40004800
 80122ec:	40004c00 	.word	0x40004c00
 80122f0:	40005000 	.word	0x40005000
 80122f4:	40011400 	.word	0x40011400
 80122f8:	40007800 	.word	0x40007800
 80122fc:	40007c00 	.word	0x40007c00
 8012300:	58024400 	.word	0x58024400
 8012304:	0806044c 	.word	0x0806044c
 8012308:	08060478 	.word	0x08060478
 801230c:	08060480 	.word	0x08060480
 8012310:	08060478 	.word	0x08060478
 8012314:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8012318:	2b40      	cmp	r3, #64	; 0x40
 801231a:	f47f ae9c 	bne.w	8012056 <UART_SetConfig+0x92>
 801231e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012322:	4b6d      	ldr	r3, [pc, #436]	; (80124d8 <UART_SetConfig+0x514>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012324:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012328:	6862      	ldr	r2, [r4, #4]
 801232a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 801232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012332:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012336:	fbb3 f3f2 	udiv	r3, r3, r2
 801233a:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801233c:	f1a3 0210 	sub.w	r2, r3, #16
 8012340:	428a      	cmp	r2, r1
 8012342:	f63f ae88 	bhi.w	8012056 <UART_SetConfig+0x92>
        huart->Instance->BRR = usartdiv;
 8012346:	6822      	ldr	r2, [r4, #0]
 8012348:	2000      	movs	r0, #0
 801234a:	60d3      	str	r3, [r2, #12]
 801234c:	e684      	b.n	8012058 <UART_SetConfig+0x94>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801234e:	4b63      	ldr	r3, [pc, #396]	; (80124dc <UART_SetConfig+0x518>)
 8012350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012352:	f003 0307 	and.w	r3, r3, #7
 8012356:	2b05      	cmp	r3, #5
 8012358:	f63f ae7d 	bhi.w	8012056 <UART_SetConfig+0x92>
 801235c:	4a60      	ldr	r2, [pc, #384]	; (80124e0 <UART_SetConfig+0x51c>)
 801235e:	5cd3      	ldrb	r3, [r2, r3]
 8012360:	e68a      	b.n	8012078 <UART_SetConfig+0xb4>
    switch (clocksource)
 8012362:	2b40      	cmp	r3, #64	; 0x40
 8012364:	f47f ae77 	bne.w	8012056 <UART_SetConfig+0x92>
 8012368:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801236c:	4b5a      	ldr	r3, [pc, #360]	; (80124d8 <UART_SetConfig+0x514>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801236e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012370:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012374:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012378:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801237c:	4299      	cmp	r1, r3
 801237e:	f63f ae6a 	bhi.w	8012056 <UART_SetConfig+0x92>
 8012382:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8012386:	f63f ae66 	bhi.w	8012056 <UART_SetConfig+0x92>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801238a:	2300      	movs	r3, #0
 801238c:	4619      	mov	r1, r3
 801238e:	f7ee f80f 	bl	80003b0 <__aeabi_uldivmod>
 8012392:	462a      	mov	r2, r5
 8012394:	0209      	lsls	r1, r1, #8
 8012396:	0203      	lsls	r3, r0, #8
 8012398:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 801239c:	0868      	lsrs	r0, r5, #1
 801239e:	1818      	adds	r0, r3, r0
 80123a0:	f04f 0300 	mov.w	r3, #0
 80123a4:	f141 0100 	adc.w	r1, r1, #0
 80123a8:	f7ee f802 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80123ac:	4a4d      	ldr	r2, [pc, #308]	; (80124e4 <UART_SetConfig+0x520>)
 80123ae:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80123b2:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80123b4:	4291      	cmp	r1, r2
 80123b6:	f63f ae4e 	bhi.w	8012056 <UART_SetConfig+0x92>
 80123ba:	e7c4      	b.n	8012346 <UART_SetConfig+0x382>
    switch (clocksource)
 80123bc:	2b40      	cmp	r3, #64	; 0x40
 80123be:	f47f ae4a 	bne.w	8012056 <UART_SetConfig+0x92>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80123c2:	4b45      	ldr	r3, [pc, #276]	; (80124d8 <UART_SetConfig+0x514>)
 80123c4:	6862      	ldr	r2, [r4, #4]
 80123c6:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80123ca:	0853      	lsrs	r3, r2, #1
 80123cc:	fbb0 f0f1 	udiv	r0, r0, r1
 80123d0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80123d4:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80123d8:	fbb0 f0f2 	udiv	r0, r0, r2
 80123dc:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80123de:	f1a2 0110 	sub.w	r1, r2, #16
 80123e2:	4299      	cmp	r1, r3
 80123e4:	f63f ae37 	bhi.w	8012056 <UART_SetConfig+0x92>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80123e8:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80123ec:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 80123f0:	6821      	ldr	r1, [r4, #0]
 80123f2:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80123f4:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 80123f6:	4313      	orrs	r3, r2
 80123f8:	60cb      	str	r3, [r1, #12]
 80123fa:	e62d      	b.n	8012058 <UART_SetConfig+0x94>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123fc:	4b37      	ldr	r3, [pc, #220]	; (80124dc <UART_SetConfig+0x518>)
 80123fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012400:	f003 0307 	and.w	r3, r3, #7
 8012404:	2b05      	cmp	r3, #5
 8012406:	f63f ae26 	bhi.w	8012056 <UART_SetConfig+0x92>
 801240a:	4a37      	ldr	r2, [pc, #220]	; (80124e8 <UART_SetConfig+0x524>)
 801240c:	5cd3      	ldrb	r3, [r2, r3]
 801240e:	e633      	b.n	8012078 <UART_SetConfig+0xb4>
 8012410:	4b32      	ldr	r3, [pc, #200]	; (80124dc <UART_SetConfig+0x518>)
 8012412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012418:	2b28      	cmp	r3, #40	; 0x28
 801241a:	f63f ae1c 	bhi.w	8012056 <UART_SetConfig+0x92>
 801241e:	4a33      	ldr	r2, [pc, #204]	; (80124ec <UART_SetConfig+0x528>)
 8012420:	5cd3      	ldrb	r3, [r2, r3]
 8012422:	e629      	b.n	8012078 <UART_SetConfig+0xb4>
          pclk = (uint32_t) HSI_VALUE;
 8012424:	4832      	ldr	r0, [pc, #200]	; (80124f0 <UART_SetConfig+0x52c>)
 8012426:	e77c      	b.n	8012322 <UART_SetConfig+0x35e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012428:	4b2c      	ldr	r3, [pc, #176]	; (80124dc <UART_SetConfig+0x518>)
 801242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801242c:	f003 0307 	and.w	r3, r3, #7
 8012430:	2b05      	cmp	r3, #5
 8012432:	f63f ae10 	bhi.w	8012056 <UART_SetConfig+0x92>
 8012436:	4a2f      	ldr	r2, [pc, #188]	; (80124f4 <UART_SetConfig+0x530>)
 8012438:	5cd3      	ldrb	r3, [r2, r3]
 801243a:	e61d      	b.n	8012078 <UART_SetConfig+0xb4>
        pclk = (uint32_t) CSI_VALUE;
 801243c:	482e      	ldr	r0, [pc, #184]	; (80124f8 <UART_SetConfig+0x534>)
 801243e:	e770      	b.n	8012322 <UART_SetConfig+0x35e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012440:	4b26      	ldr	r3, [pc, #152]	; (80124dc <UART_SetConfig+0x518>)
 8012442:	681a      	ldr	r2, [r3, #0]
 8012444:	0690      	lsls	r0, r2, #26
 8012446:	d542      	bpl.n	80124ce <UART_SetConfig+0x50a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	4829      	ldr	r0, [pc, #164]	; (80124f0 <UART_SetConfig+0x52c>)
 801244c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012450:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8012452:	e78b      	b.n	801236c <UART_SetConfig+0x3a8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012454:	a803      	add	r0, sp, #12
 8012456:	f7fd ff27 	bl	80102a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801245a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 801245c:	2800      	cmp	r0, #0
 801245e:	f43f af29 	beq.w	80122b4 <UART_SetConfig+0x2f0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012462:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012464:	e782      	b.n	801236c <UART_SetConfig+0x3a8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012466:	4668      	mov	r0, sp
 8012468:	f7fd fe72 	bl	8010150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801246c:	9801      	ldr	r0, [sp, #4]
        break;
 801246e:	e7f5      	b.n	801245c <UART_SetConfig+0x498>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012470:	f7fd fe5c 	bl	801012c <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8012474:	e7f2      	b.n	801245c <UART_SetConfig+0x498>
        pclk = (uint32_t) CSI_VALUE;
 8012476:	4820      	ldr	r0, [pc, #128]	; (80124f8 <UART_SetConfig+0x534>)
 8012478:	e778      	b.n	801236c <UART_SetConfig+0x3a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801247a:	4b18      	ldr	r3, [pc, #96]	; (80124dc <UART_SetConfig+0x518>)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	0691      	lsls	r1, r2, #26
 8012480:	d527      	bpl.n	80124d2 <UART_SetConfig+0x50e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	481a      	ldr	r0, [pc, #104]	; (80124f0 <UART_SetConfig+0x52c>)
 8012486:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801248a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 801248c:	e799      	b.n	80123c2 <UART_SetConfig+0x3fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801248e:	a803      	add	r0, sp, #12
 8012490:	f7fd ff0a 	bl	80102a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012494:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8012496:	2800      	cmp	r0, #0
 8012498:	f43f af0c 	beq.w	80122b4 <UART_SetConfig+0x2f0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801249c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801249e:	e790      	b.n	80123c2 <UART_SetConfig+0x3fe>
        pclk = HAL_RCC_GetPCLK2Freq();
 80124a0:	f7fc ffa6 	bl	800f3f0 <HAL_RCC_GetPCLK2Freq>
        break;
 80124a4:	e7f7      	b.n	8012496 <UART_SetConfig+0x4d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80124a6:	f7fc ff5b 	bl	800f360 <HAL_RCC_GetPCLK1Freq>
        break;
 80124aa:	e7f4      	b.n	8012496 <UART_SetConfig+0x4d2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80124ac:	4668      	mov	r0, sp
 80124ae:	f7fd fe4f 	bl	8010150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80124b2:	9801      	ldr	r0, [sp, #4]
        break;
 80124b4:	e7ef      	b.n	8012496 <UART_SetConfig+0x4d2>
        pclk = (uint32_t) CSI_VALUE;
 80124b6:	4810      	ldr	r0, [pc, #64]	; (80124f8 <UART_SetConfig+0x534>)
 80124b8:	e783      	b.n	80123c2 <UART_SetConfig+0x3fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124ba:	4b08      	ldr	r3, [pc, #32]	; (80124dc <UART_SetConfig+0x518>)
 80124bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124be:	f003 0307 	and.w	r3, r3, #7
 80124c2:	2b05      	cmp	r3, #5
 80124c4:	f63f adc7 	bhi.w	8012056 <UART_SetConfig+0x92>
 80124c8:	4a0c      	ldr	r2, [pc, #48]	; (80124fc <UART_SetConfig+0x538>)
 80124ca:	5cd3      	ldrb	r3, [r2, r3]
 80124cc:	e5d4      	b.n	8012078 <UART_SetConfig+0xb4>
          pclk = (uint32_t) HSI_VALUE;
 80124ce:	4808      	ldr	r0, [pc, #32]	; (80124f0 <UART_SetConfig+0x52c>)
 80124d0:	e74c      	b.n	801236c <UART_SetConfig+0x3a8>
          pclk = (uint32_t) HSI_VALUE;
 80124d2:	4807      	ldr	r0, [pc, #28]	; (80124f0 <UART_SetConfig+0x52c>)
 80124d4:	e775      	b.n	80123c2 <UART_SetConfig+0x3fe>
 80124d6:	bf00      	nop
 80124d8:	08060488 	.word	0x08060488
 80124dc:	58024400 	.word	0x58024400
 80124e0:	08060478 	.word	0x08060478
 80124e4:	000ffcff 	.word	0x000ffcff
 80124e8:	08060478 	.word	0x08060478
 80124ec:	0806044c 	.word	0x0806044c
 80124f0:	03d09000 	.word	0x03d09000
 80124f4:	08060478 	.word	0x08060478
 80124f8:	003d0900 	.word	0x003d0900
 80124fc:	08060478 	.word	0x08060478

08012500 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012500:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012502:	07da      	lsls	r2, r3, #31
{
 8012504:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012506:	d506      	bpl.n	8012516 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012508:	6801      	ldr	r1, [r0, #0]
 801250a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 801250c:	684a      	ldr	r2, [r1, #4]
 801250e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8012512:	4322      	orrs	r2, r4
 8012514:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012516:	079c      	lsls	r4, r3, #30
 8012518:	d506      	bpl.n	8012528 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801251a:	6801      	ldr	r1, [r0, #0]
 801251c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801251e:	684a      	ldr	r2, [r1, #4]
 8012520:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8012524:	4322      	orrs	r2, r4
 8012526:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012528:	0759      	lsls	r1, r3, #29
 801252a:	d506      	bpl.n	801253a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801252c:	6801      	ldr	r1, [r0, #0]
 801252e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012530:	684a      	ldr	r2, [r1, #4]
 8012532:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012536:	4322      	orrs	r2, r4
 8012538:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801253a:	071a      	lsls	r2, r3, #28
 801253c:	d506      	bpl.n	801254c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801253e:	6801      	ldr	r1, [r0, #0]
 8012540:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8012542:	684a      	ldr	r2, [r1, #4]
 8012544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012548:	4322      	orrs	r2, r4
 801254a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801254c:	06dc      	lsls	r4, r3, #27
 801254e:	d506      	bpl.n	801255e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012550:	6801      	ldr	r1, [r0, #0]
 8012552:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8012554:	688a      	ldr	r2, [r1, #8]
 8012556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801255a:	4322      	orrs	r2, r4
 801255c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801255e:	0699      	lsls	r1, r3, #26
 8012560:	d506      	bpl.n	8012570 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012562:	6801      	ldr	r1, [r0, #0]
 8012564:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8012566:	688a      	ldr	r2, [r1, #8]
 8012568:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801256c:	4322      	orrs	r2, r4
 801256e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012570:	065a      	lsls	r2, r3, #25
 8012572:	d50a      	bpl.n	801258a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012574:	6801      	ldr	r1, [r0, #0]
 8012576:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8012578:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801257a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801257e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8012582:	ea42 0204 	orr.w	r2, r2, r4
 8012586:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012588:	d00b      	beq.n	80125a2 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801258a:	061b      	lsls	r3, r3, #24
 801258c:	d506      	bpl.n	801259c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801258e:	6802      	ldr	r2, [r0, #0]
 8012590:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8012592:	6853      	ldr	r3, [r2, #4]
 8012594:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8012598:	430b      	orrs	r3, r1
 801259a:	6053      	str	r3, [r2, #4]
}
 801259c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125a0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80125a2:	684a      	ldr	r2, [r1, #4]
 80125a4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80125a6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80125aa:	4322      	orrs	r2, r4
 80125ac:	604a      	str	r2, [r1, #4]
 80125ae:	e7ec      	b.n	801258a <UART_AdvFeatureConfig+0x8a>

080125b0 <UART_CheckIdleState>:
{
 80125b0:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125b2:	2300      	movs	r3, #0
{
 80125b4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125b6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 80125ba:	f7f8 fabf 	bl	800ab3c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80125be:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80125c0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	0711      	lsls	r1, r2, #28
 80125c6:	d40c      	bmi.n	80125e2 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80125c8:	681a      	ldr	r2, [r3, #0]
 80125ca:	0752      	lsls	r2, r2, #29
 80125cc:	d430      	bmi.n	8012630 <UART_CheckIdleState+0x80>
  huart->gState = HAL_UART_STATE_READY;
 80125ce:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80125d0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80125d2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  return HAL_OK;
 80125d6:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80125d8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80125dc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80125e0:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80125e2:	69da      	ldr	r2, [r3, #28]
 80125e4:	0292      	lsls	r2, r2, #10
 80125e6:	d4ef      	bmi.n	80125c8 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125e8:	f7f8 faa8 	bl	800ab3c <HAL_GetTick>
 80125ec:	1b43      	subs	r3, r0, r5
 80125ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80125f2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125f4:	d22d      	bcs.n	8012652 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80125f6:	681a      	ldr	r2, [r3, #0]
 80125f8:	0750      	lsls	r0, r2, #29
 80125fa:	d5f2      	bpl.n	80125e2 <UART_CheckIdleState+0x32>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80125fc:	69da      	ldr	r2, [r3, #28]
 80125fe:	0511      	lsls	r1, r2, #20
 8012600:	d5ef      	bpl.n	80125e2 <UART_CheckIdleState+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012602:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8012606:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8012608:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 801260a:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801260c:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801260e:	6819      	ldr	r1, [r3, #0]
 8012610:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8012614:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012616:	6899      	ldr	r1, [r3, #8]
 8012618:	f021 0101 	bic.w	r1, r1, #1
 801261c:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 801261e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8012622:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8012626:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801262a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 801262e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012630:	69db      	ldr	r3, [r3, #28]
 8012632:	0258      	lsls	r0, r3, #9
 8012634:	d4cb      	bmi.n	80125ce <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012636:	f7f8 fa81 	bl	800ab3c <HAL_GetTick>
 801263a:	1b43      	subs	r3, r0, r5
 801263c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012640:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012642:	d206      	bcs.n	8012652 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012644:	681a      	ldr	r2, [r3, #0]
 8012646:	0751      	lsls	r1, r2, #29
 8012648:	d5f2      	bpl.n	8012630 <UART_CheckIdleState+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801264a:	69da      	ldr	r2, [r3, #28]
 801264c:	0512      	lsls	r2, r2, #20
 801264e:	d5ef      	bpl.n	8012630 <UART_CheckIdleState+0x80>
 8012650:	e7d7      	b.n	8012602 <UART_CheckIdleState+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012652:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8012654:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8012656:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8012658:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801265a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801265e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012660:	689a      	ldr	r2, [r3, #8]
 8012662:	f022 0201 	bic.w	r2, r2, #1
 8012666:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8012668:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 801266c:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8012670:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 8012674:	bd38      	pop	{r3, r4, r5, pc}
 8012676:	bf00      	nop

08012678 <HAL_UART_Init>:
  if (huart == NULL)
 8012678:	b380      	cbz	r0, 80126dc <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 801267a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 801267e:	b510      	push	{r4, lr}
 8012680:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8012682:	b333      	cbz	r3, 80126d2 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8012684:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8012686:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012688:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 801268a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 801268e:	6813      	ldr	r3, [r2, #0]
 8012690:	f023 0301 	bic.w	r3, r3, #1
 8012694:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012696:	f7ff fc95 	bl	8011fc4 <UART_SetConfig>
 801269a:	2801      	cmp	r0, #1
 801269c:	d017      	beq.n	80126ce <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801269e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80126a0:	b98b      	cbnz	r3, 80126c6 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80126a2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80126a4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80126a6:	685a      	ldr	r2, [r3, #4]
 80126a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80126ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80126ae:	689a      	ldr	r2, [r3, #8]
 80126b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80126b4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	f042 0201 	orr.w	r2, r2, #1
}
 80126bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80126c0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80126c2:	f7ff bf75 	b.w	80125b0 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80126c6:	4620      	mov	r0, r4
 80126c8:	f7ff ff1a 	bl	8012500 <UART_AdvFeatureConfig>
 80126cc:	e7e9      	b.n	80126a2 <HAL_UART_Init+0x2a>
}
 80126ce:	2001      	movs	r0, #1
 80126d0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80126d2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80126d6:	f7f3 fca5 	bl	8006024 <HAL_UART_MspInit>
 80126da:	e7d3      	b.n	8012684 <HAL_UART_Init+0xc>
}
 80126dc:	2001      	movs	r0, #1
 80126de:	4770      	bx	lr

080126e0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80126e0:	4770      	bx	lr
 80126e2:	bf00      	nop

080126e4 <HAL_UARTEx_RxFifoFullCallback>:
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop

080126e8 <HAL_UARTEx_TxFifoEmptyCallback>:
 80126e8:	4770      	bx	lr
 80126ea:	bf00      	nop

080126ec <DelayBlock_Enable>:
  * @brief  Enable the Delay Block instance.
  * @param  DLYBx: Pointer to DLYB instance.
  * @retval HAL status
  */
HAL_StatusTypeDef DelayBlock_Enable(DLYB_TypeDef *DLYBx)
{
 80126ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t unit_current;
  uint32_t tuning;
  uint32_t lng_mask;
  uint32_t tickstart;

  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 80126f0:	2303      	movs	r3, #3
{
 80126f2:	b083      	sub	sp, #12
  uint32_t sel = 0U;
 80126f4:	f04f 0900 	mov.w	r9, #0
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 80126f8:	f04f 0a01 	mov.w	sl, #1
{
 80126fc:	4604      	mov	r4, r0

  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
  {
    /* lng_mask is the mask bit for the LNG field to check the output of the UNITx*/
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 80126fe:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  uint32_t unit = 0U;
 8012702:	f8cd 9004 	str.w	r9, [sp, #4]
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8012706:	6003      	str	r3, [r0, #0]
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8012708:	f10a 37ff 	add.w	r7, sl, #4294967295
    tuning = 0U;
 801270c:	f04f 0800 	mov.w	r8, #0
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8012710:	fa0b f707 	lsl.w	r7, fp, r7
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8012714:	4646      	mov	r6, r8
    {
      /* Set the Delay of the UNIT(s)*/
      DLYBx->CFGR = DLYB_MAX_SELECT | (unit_current << DLYB_CFGR_UNIT_Pos);
 8012716:	0233      	lsls	r3, r6, #8
 8012718:	f043 030c 	orr.w	r3, r3, #12
 801271c:	6063      	str	r3, [r4, #4]

      /* Waiting for a LNG valid value */
      tickstart =  HAL_GetTick();
 801271e:	f7f8 fa0d 	bl	800ab3c <HAL_GetTick>
 8012722:	4605      	mov	r5, r0
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012724:	e004      	b.n	8012730 <DelayBlock_Enable+0x44>
      {
        if((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8012726:	f7f8 fa09 	bl	800ab3c <HAL_GetTick>
 801272a:	1b40      	subs	r0, r0, r5
 801272c:	28fe      	cmp	r0, #254	; 0xfe
 801272e:	d81b      	bhi.n	8012768 <DelayBlock_Enable+0x7c>
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012730:	6863      	ldr	r3, [r4, #4]
 8012732:	2b00      	cmp	r3, #0
 8012734:	daf7      	bge.n	8012726 <DelayBlock_Enable+0x3a>
          return HAL_TIMEOUT;
        }
      }
      if (tuning == 0U)
      {
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8012736:	6863      	ldr	r3, [r4, #4]
      if (tuning == 0U)
 8012738:	f1b8 0f00 	cmp.w	r8, #0
 801273c:	d018      	beq.n	8012770 <DelayBlock_Enable+0x84>
        }
      }
      else
      {
        /* 1/2 period LOW detected after the HIGH 1/2 period => FULL PERIOD passed*/
        if((DLYBx->CFGR & lng_mask ) == 0U)
 801273e:	423b      	tst	r3, r7
 8012740:	d01d      	beq.n	801277e <DelayBlock_Enable+0x92>
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8012742:	3601      	adds	r6, #1
 8012744:	2e80      	cmp	r6, #128	; 0x80
 8012746:	d1e6      	bne.n	8012716 <DelayBlock_Enable+0x2a>
  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
 8012748:	f10a 0a01 	add.w	sl, sl, #1
 801274c:	f1ba 0f0d 	cmp.w	sl, #13
 8012750:	d1da      	bne.n	8012708 <DelayBlock_Enable+0x1c>
  }

  /* Apply the Tuning settings */
  DLYBx->CR   = 0U;
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8012752:	9b01      	ldr	r3, [sp, #4]
  DLYBx->CR   = 0U;
 8012754:	2000      	movs	r0, #0
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8012756:	2103      	movs	r1, #3
  DLYBx->CR   = DLYB_CR_DEN;
 8012758:	2201      	movs	r2, #1
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 801275a:	ea49 2303 	orr.w	r3, r9, r3, lsl #8
  DLYBx->CR   = 0U;
 801275e:	6020      	str	r0, [r4, #0]
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8012760:	6021      	str	r1, [r4, #0]
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8012762:	6063      	str	r3, [r4, #4]
  DLYBx->CR   = DLYB_CR_DEN;
 8012764:	6022      	str	r2, [r4, #0]

  return HAL_OK;
 8012766:	e000      	b.n	801276a <DelayBlock_Enable+0x7e>
          return HAL_TIMEOUT;
 8012768:	2003      	movs	r0, #3
}
 801276a:	b003      	add	sp, #12
 801276c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8012770:	423b      	tst	r3, r7
 8012772:	bf14      	ite	ne
 8012774:	f04f 0801 	movne.w	r8, #1
 8012778:	f04f 0800 	moveq.w	r8, #0
 801277c:	e7e1      	b.n	8012742 <DelayBlock_Enable+0x56>
          if( unit == 0U )
 801277e:	9b01      	ldr	r3, [sp, #4]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d1e1      	bne.n	8012748 <DelayBlock_Enable+0x5c>
            sel  = sel_current + 1U;
 8012784:	46d1      	mov	r9, sl
 8012786:	9601      	str	r6, [sp, #4]
 8012788:	e7de      	b.n	8012748 <DelayBlock_Enable+0x5c>
 801278a:	bf00      	nop

0801278c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801278c:	b084      	sub	sp, #16
 801278e:	b410      	push	{r4}
 8012790:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8012794:	4614      	mov	r4, r2
{
 8012796:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 801279a:	460b      	mov	r3, r1
             Init.ClockPowerSave      |\
 801279c:	9904      	ldr	r1, [sp, #16]
{
 801279e:	4602      	mov	r2, r0
             Init.BusWide             |\
 80127a0:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 80127a2:	4323      	orrs	r3, r4
             Init.HardwareFlowControl |\
             Init.ClockDiv
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80127a4:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      |\
 80127a6:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80127a8:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             |\
 80127aa:	4303      	orrs	r3, r0

  return HAL_OK;
}
 80127ac:	2000      	movs	r0, #0
             Init.HardwareFlowControl |\
 80127ae:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80127b0:	4903      	ldr	r1, [pc, #12]	; (80127c0 <SDMMC_Init+0x34>)
 80127b2:	4021      	ands	r1, r4
}
 80127b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80127b8:	430b      	orrs	r3, r1
}
 80127ba:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80127bc:	6053      	str	r3, [r2, #4]
}
 80127be:	4770      	bx	lr
 80127c0:	ffc02c00 	.word	0xffc02c00

080127c4 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80127c4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop

080127cc <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80127cc:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80127ce:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 80127d0:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 80127d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80127d6:	4770      	bx	lr

080127d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80127d8:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 80127da:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	f042 0203 	orr.w	r2, r2, #3
 80127e2:	601a      	str	r2, [r3, #0]
}
 80127e4:	4770      	bx	lr
 80127e6:	bf00      	nop

080127e8 <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 80127e8:	4603      	mov	r3, r0
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);

  return HAL_OK;
}
 80127ea:	2000      	movs	r0, #0
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	f022 0203 	bic.w	r2, r2, #3
 80127f2:	601a      	str	r2, [r3, #0]
}
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop

080127f8 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80127f8:	6800      	ldr	r0, [r0, #0]
}
 80127fa:	f000 0003 	and.w	r0, r0, #3
 80127fe:	4770      	bx	lr

08012800 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012800:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8012802:	5840      	ldr	r0, [r0, r1]
}
 8012804:	4770      	bx	lr
 8012806:	bf00      	nop

08012808 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8012808:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801280a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   |\
 801280e:	690d      	ldr	r5, [r1, #16]
{
 8012810:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012812:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012814:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 8012816:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012818:	6250      	str	r0, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 801281a:	432b      	orrs	r3, r5
                       Data->TransferMode  |\
 801281c:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 801281e:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012820:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8012822:	4303      	orrs	r3, r0

  return HAL_OK;

}
 8012824:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012826:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 801282a:	430b      	orrs	r3, r1
}
 801282c:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801282e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8012830:	4770      	bx	lr
 8012832:	bf00      	nop

08012834 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012834:	4a4c      	ldr	r2, [pc, #304]	; (8012968 <SDMMC_CmdBlockLength+0x134>)
 8012836:	4b4d      	ldr	r3, [pc, #308]	; (801296c <SDMMC_CmdBlockLength+0x138>)
 8012838:	6812      	ldr	r2, [r2, #0]
{
 801283a:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801283c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012840:	4c4b      	ldr	r4, [pc, #300]	; (8012970 <SDMMC_CmdBlockLength+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8012842:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012844:	f241 1310 	movw	r3, #4368	; 0x1110
 8012848:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801284a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801284c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801284e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012852:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012854:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012858:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 801285a:	b14a      	cbz	r2, 8012870 <SDMMC_CmdBlockLength+0x3c>
 801285c:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801285e:	4945      	ldr	r1, [pc, #276]	; (8012974 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
 8012860:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012862:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012864:	420a      	tst	r2, r1
 8012866:	d001      	beq.n	801286c <SDMMC_CmdBlockLength+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012868:	0492      	lsls	r2, r2, #18
 801286a:	d507      	bpl.n	801287c <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
 801286c:	1c5c      	adds	r4, r3, #1
 801286e:	d1f7      	bne.n	8012860 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012874:	4618      	mov	r0, r3
 8012876:	f85d 4b04 	ldr.w	r4, [sp], #4
 801287a:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801287c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801287e:	075c      	lsls	r4, r3, #29
 8012880:	d43d      	bmi.n	80128fe <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012882:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012884:	f013 0301 	ands.w	r3, r3, #1
 8012888:	d134      	bne.n	80128f4 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801288a:	4b3b      	ldr	r3, [pc, #236]	; (8012978 <SDMMC_CmdBlockLength+0x144>)
 801288c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801288e:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012890:	b2db      	uxtb	r3, r3
 8012892:	2b10      	cmp	r3, #16
 8012894:	d131      	bne.n	80128fa <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
 8012896:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012898:	4b38      	ldr	r3, [pc, #224]	; (801297c <SDMMC_CmdBlockLength+0x148>)
 801289a:	4013      	ands	r3, r2
 801289c:	2b00      	cmp	r3, #0
 801289e:	d0e9      	beq.n	8012874 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80128a0:	2a00      	cmp	r2, #0
 80128a2:	db30      	blt.n	8012906 <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80128a4:	0051      	lsls	r1, r2, #1
 80128a6:	d431      	bmi.n	801290c <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80128a8:	0094      	lsls	r4, r2, #2
 80128aa:	d431      	bmi.n	8012910 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80128ac:	00d0      	lsls	r0, r2, #3
 80128ae:	d431      	bmi.n	8012914 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80128b0:	0111      	lsls	r1, r2, #4
 80128b2:	d432      	bmi.n	801291a <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80128b4:	0154      	lsls	r4, r2, #5
 80128b6:	d433      	bmi.n	8012920 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80128b8:	01d0      	lsls	r0, r2, #7
 80128ba:	d434      	bmi.n	8012926 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80128bc:	0211      	lsls	r1, r2, #8
 80128be:	d435      	bmi.n	801292c <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80128c0:	0254      	lsls	r4, r2, #9
 80128c2:	d436      	bmi.n	8012932 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80128c4:	0290      	lsls	r0, r2, #10
 80128c6:	d440      	bmi.n	801294a <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80128c8:	02d1      	lsls	r1, r2, #11
 80128ca:	d43b      	bmi.n	8012944 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80128cc:	0354      	lsls	r4, r2, #13
 80128ce:	d436      	bmi.n	801293e <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80128d0:	0390      	lsls	r0, r2, #14
 80128d2:	d431      	bmi.n	8012938 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80128d4:	03d1      	lsls	r1, r2, #15
 80128d6:	d444      	bmi.n	8012962 <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80128d8:	0414      	lsls	r4, r2, #16
 80128da:	d43f      	bmi.n	801295c <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80128dc:	0450      	lsls	r0, r2, #17
 80128de:	d43a      	bmi.n	8012956 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80128e0:	0491      	lsls	r1, r2, #18
 80128e2:	d435      	bmi.n	8012950 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80128e4:	f012 0f08 	tst.w	r2, #8
 80128e8:	bf14      	ite	ne
 80128ea:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80128ee:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80128f2:	e7bf      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80128f4:	2201      	movs	r2, #1
 80128f6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128f8:	e7bc      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128fa:	2301      	movs	r3, #1
 80128fc:	e7ba      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80128fe:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012900:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012902:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012904:	e7b6      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801290a:	e7b3      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801290c:	2340      	movs	r3, #64	; 0x40
 801290e:	e7b1      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012910:	2380      	movs	r3, #128	; 0x80
 8012912:	e7af      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012918:	e7ac      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801291a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801291e:	e7a9      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012924:	e7a6      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801292a:	e7a3      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 801292c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012930:	e7a0      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012936:	e79d      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012938:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801293c:	e79a      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801293e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012942:	e797      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 8012944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012948:	e794      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801294a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801294e:	e791      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8012950:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012954:	e78e      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012956:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801295a:	e78b      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801295c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012960:	e788      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012962:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012966:	e785      	b.n	8012874 <SDMMC_CmdBlockLength+0x40>
 8012968:	20004728 	.word	0x20004728
 801296c:	10624dd3 	.word	0x10624dd3
 8012970:	fffee0c0 	.word	0xfffee0c0
 8012974:	00200045 	.word	0x00200045
 8012978:	002000c5 	.word	0x002000c5
 801297c:	fdffe008 	.word	0xfdffe008

08012980 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012980:	4a4c      	ldr	r2, [pc, #304]	; (8012ab4 <SDMMC_CmdReadSingleBlock+0x134>)
 8012982:	4b4d      	ldr	r3, [pc, #308]	; (8012ab8 <SDMMC_CmdReadSingleBlock+0x138>)
 8012984:	6812      	ldr	r2, [r2, #0]
{
 8012986:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012988:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801298c:	4c4b      	ldr	r4, [pc, #300]	; (8012abc <SDMMC_CmdReadSingleBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 801298e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012990:	f241 1311 	movw	r3, #4369	; 0x1111
 8012994:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012996:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012998:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801299a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801299e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80129a0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80129a4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80129a6:	b14a      	cbz	r2, 80129bc <SDMMC_CmdReadSingleBlock+0x3c>
 80129a8:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80129aa:	4945      	ldr	r1, [pc, #276]	; (8012ac0 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 80129ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80129ae:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80129b0:	420a      	tst	r2, r1
 80129b2:	d001      	beq.n	80129b8 <SDMMC_CmdReadSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80129b4:	0492      	lsls	r2, r2, #18
 80129b6:	d507      	bpl.n	80129c8 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
 80129b8:	1c5c      	adds	r4, r3, #1
 80129ba:	d1f7      	bne.n	80129ac <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80129bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129c6:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80129c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80129ca:	075c      	lsls	r4, r3, #29
 80129cc:	d43d      	bmi.n	8012a4a <SDMMC_CmdReadSingleBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80129ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80129d0:	f013 0301 	ands.w	r3, r3, #1
 80129d4:	d134      	bne.n	8012a40 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80129d6:	4b3b      	ldr	r3, [pc, #236]	; (8012ac4 <SDMMC_CmdReadSingleBlock+0x144>)
 80129d8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80129da:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	2b11      	cmp	r3, #17
 80129e0:	d131      	bne.n	8012a46 <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 80129e2:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80129e4:	4b38      	ldr	r3, [pc, #224]	; (8012ac8 <SDMMC_CmdReadSingleBlock+0x148>)
 80129e6:	4013      	ands	r3, r2
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d0e9      	beq.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80129ec:	2a00      	cmp	r2, #0
 80129ee:	db30      	blt.n	8012a52 <SDMMC_CmdReadSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80129f0:	0051      	lsls	r1, r2, #1
 80129f2:	d431      	bmi.n	8012a58 <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80129f4:	0094      	lsls	r4, r2, #2
 80129f6:	d431      	bmi.n	8012a5c <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80129f8:	00d0      	lsls	r0, r2, #3
 80129fa:	d431      	bmi.n	8012a60 <SDMMC_CmdReadSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80129fc:	0111      	lsls	r1, r2, #4
 80129fe:	d432      	bmi.n	8012a66 <SDMMC_CmdReadSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012a00:	0154      	lsls	r4, r2, #5
 8012a02:	d433      	bmi.n	8012a6c <SDMMC_CmdReadSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012a04:	01d0      	lsls	r0, r2, #7
 8012a06:	d434      	bmi.n	8012a72 <SDMMC_CmdReadSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012a08:	0211      	lsls	r1, r2, #8
 8012a0a:	d435      	bmi.n	8012a78 <SDMMC_CmdReadSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012a0c:	0254      	lsls	r4, r2, #9
 8012a0e:	d436      	bmi.n	8012a7e <SDMMC_CmdReadSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012a10:	0290      	lsls	r0, r2, #10
 8012a12:	d440      	bmi.n	8012a96 <SDMMC_CmdReadSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012a14:	02d1      	lsls	r1, r2, #11
 8012a16:	d43b      	bmi.n	8012a90 <SDMMC_CmdReadSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012a18:	0354      	lsls	r4, r2, #13
 8012a1a:	d436      	bmi.n	8012a8a <SDMMC_CmdReadSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012a1c:	0390      	lsls	r0, r2, #14
 8012a1e:	d431      	bmi.n	8012a84 <SDMMC_CmdReadSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012a20:	03d1      	lsls	r1, r2, #15
 8012a22:	d444      	bmi.n	8012aae <SDMMC_CmdReadSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012a24:	0414      	lsls	r4, r2, #16
 8012a26:	d43f      	bmi.n	8012aa8 <SDMMC_CmdReadSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012a28:	0450      	lsls	r0, r2, #17
 8012a2a:	d43a      	bmi.n	8012aa2 <SDMMC_CmdReadSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012a2c:	0491      	lsls	r1, r2, #18
 8012a2e:	d435      	bmi.n	8012a9c <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012a30:	f012 0f08 	tst.w	r2, #8
 8012a34:	bf14      	ite	ne
 8012a36:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8012a3a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8012a3e:	e7bf      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a40:	2201      	movs	r2, #1
 8012a42:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a44:	e7bc      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a46:	2301      	movs	r3, #1
 8012a48:	e7ba      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a4a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a4c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a4e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a50:	e7b6      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012a56:	e7b3      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012a58:	2340      	movs	r3, #64	; 0x40
 8012a5a:	e7b1      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012a5c:	2380      	movs	r3, #128	; 0x80
 8012a5e:	e7af      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a64:	e7ac      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a6a:	e7a9      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a70:	e7a6      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012a72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a76:	e7a3      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a7c:	e7a0      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012a82:	e79d      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012a84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012a88:	e79a      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012a8e:	e797      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8012a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a94:	e794      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012a96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012a9a:	e791      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8012a9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012aa0:	e78e      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012aa2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012aa6:	e78b      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012aa8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012aac:	e788      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012aae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012ab2:	e785      	b.n	80129c0 <SDMMC_CmdReadSingleBlock+0x40>
 8012ab4:	20004728 	.word	0x20004728
 8012ab8:	10624dd3 	.word	0x10624dd3
 8012abc:	fffee0c0 	.word	0xfffee0c0
 8012ac0:	00200045 	.word	0x00200045
 8012ac4:	002000c5 	.word	0x002000c5
 8012ac8:	fdffe008 	.word	0xfdffe008

08012acc <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012acc:	4a4c      	ldr	r2, [pc, #304]	; (8012c00 <SDMMC_CmdReadMultiBlock+0x134>)
 8012ace:	4b4d      	ldr	r3, [pc, #308]	; (8012c04 <SDMMC_CmdReadMultiBlock+0x138>)
 8012ad0:	6812      	ldr	r2, [r2, #0]
{
 8012ad2:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ad4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012ad8:	4c4b      	ldr	r4, [pc, #300]	; (8012c08 <SDMMC_CmdReadMultiBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8012ada:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012adc:	f241 1312 	movw	r3, #4370	; 0x1112
 8012ae0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ae2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012ae4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ae6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012aea:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012aec:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012af0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8012af2:	b14a      	cbz	r2, 8012b08 <SDMMC_CmdReadMultiBlock+0x3c>
 8012af4:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012af6:	4945      	ldr	r1, [pc, #276]	; (8012c0c <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8012af8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012afa:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012afc:	420a      	tst	r2, r1
 8012afe:	d001      	beq.n	8012b04 <SDMMC_CmdReadMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012b00:	0492      	lsls	r2, r2, #18
 8012b02:	d507      	bpl.n	8012b14 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
 8012b04:	1c5c      	adds	r4, r3, #1
 8012b06:	d1f7      	bne.n	8012af8 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012b08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b12:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b14:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012b16:	075c      	lsls	r4, r3, #29
 8012b18:	d43d      	bmi.n	8012b96 <SDMMC_CmdReadMultiBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012b1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012b1c:	f013 0301 	ands.w	r3, r3, #1
 8012b20:	d134      	bne.n	8012b8c <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012b22:	4b3b      	ldr	r3, [pc, #236]	; (8012c10 <SDMMC_CmdReadMultiBlock+0x144>)
 8012b24:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012b26:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	2b12      	cmp	r3, #18
 8012b2c:	d131      	bne.n	8012b92 <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8012b2e:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012b30:	4b38      	ldr	r3, [pc, #224]	; (8012c14 <SDMMC_CmdReadMultiBlock+0x148>)
 8012b32:	4013      	ands	r3, r2
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d0e9      	beq.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012b38:	2a00      	cmp	r2, #0
 8012b3a:	db30      	blt.n	8012b9e <SDMMC_CmdReadMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012b3c:	0051      	lsls	r1, r2, #1
 8012b3e:	d431      	bmi.n	8012ba4 <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012b40:	0094      	lsls	r4, r2, #2
 8012b42:	d431      	bmi.n	8012ba8 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012b44:	00d0      	lsls	r0, r2, #3
 8012b46:	d431      	bmi.n	8012bac <SDMMC_CmdReadMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012b48:	0111      	lsls	r1, r2, #4
 8012b4a:	d432      	bmi.n	8012bb2 <SDMMC_CmdReadMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012b4c:	0154      	lsls	r4, r2, #5
 8012b4e:	d433      	bmi.n	8012bb8 <SDMMC_CmdReadMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012b50:	01d0      	lsls	r0, r2, #7
 8012b52:	d434      	bmi.n	8012bbe <SDMMC_CmdReadMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012b54:	0211      	lsls	r1, r2, #8
 8012b56:	d435      	bmi.n	8012bc4 <SDMMC_CmdReadMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012b58:	0254      	lsls	r4, r2, #9
 8012b5a:	d436      	bmi.n	8012bca <SDMMC_CmdReadMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012b5c:	0290      	lsls	r0, r2, #10
 8012b5e:	d440      	bmi.n	8012be2 <SDMMC_CmdReadMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012b60:	02d1      	lsls	r1, r2, #11
 8012b62:	d43b      	bmi.n	8012bdc <SDMMC_CmdReadMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012b64:	0354      	lsls	r4, r2, #13
 8012b66:	d436      	bmi.n	8012bd6 <SDMMC_CmdReadMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012b68:	0390      	lsls	r0, r2, #14
 8012b6a:	d431      	bmi.n	8012bd0 <SDMMC_CmdReadMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012b6c:	03d1      	lsls	r1, r2, #15
 8012b6e:	d444      	bmi.n	8012bfa <SDMMC_CmdReadMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012b70:	0414      	lsls	r4, r2, #16
 8012b72:	d43f      	bmi.n	8012bf4 <SDMMC_CmdReadMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012b74:	0450      	lsls	r0, r2, #17
 8012b76:	d43a      	bmi.n	8012bee <SDMMC_CmdReadMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012b78:	0491      	lsls	r1, r2, #18
 8012b7a:	d435      	bmi.n	8012be8 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012b7c:	f012 0f08 	tst.w	r2, #8
 8012b80:	bf14      	ite	ne
 8012b82:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8012b86:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8012b8a:	e7bf      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012b8c:	2201      	movs	r2, #1
 8012b8e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b90:	e7bc      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b92:	2301      	movs	r3, #1
 8012b94:	e7ba      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b96:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b98:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b9a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b9c:	e7b6      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012ba2:	e7b3      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012ba4:	2340      	movs	r3, #64	; 0x40
 8012ba6:	e7b1      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012ba8:	2380      	movs	r3, #128	; 0x80
 8012baa:	e7af      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bb0:	e7ac      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012bb6:	e7a9      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bbc:	e7a6      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012bbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012bc2:	e7a3      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bc8:	e7a0      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012bce:	e79d      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012bd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012bd4:	e79a      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012bda:	e797      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8012bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012be0:	e794      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012be2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012be6:	e791      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8012be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012bec:	e78e      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012bee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012bf2:	e78b      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012bf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012bf8:	e788      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012bfa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012bfe:	e785      	b.n	8012b0c <SDMMC_CmdReadMultiBlock+0x40>
 8012c00:	20004728 	.word	0x20004728
 8012c04:	10624dd3 	.word	0x10624dd3
 8012c08:	fffee0c0 	.word	0xfffee0c0
 8012c0c:	00200045 	.word	0x00200045
 8012c10:	002000c5 	.word	0x002000c5
 8012c14:	fdffe008 	.word	0xfdffe008

08012c18 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012c18:	4a4c      	ldr	r2, [pc, #304]	; (8012d4c <SDMMC_CmdWriteSingleBlock+0x134>)
 8012c1a:	4b4d      	ldr	r3, [pc, #308]	; (8012d50 <SDMMC_CmdWriteSingleBlock+0x138>)
 8012c1c:	6812      	ldr	r2, [r2, #0]
{
 8012c1e:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012c20:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012c24:	4c4b      	ldr	r4, [pc, #300]	; (8012d54 <SDMMC_CmdWriteSingleBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8012c26:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012c28:	f241 1318 	movw	r3, #4376	; 0x1118
 8012c2c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012c2e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012c30:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012c32:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012c36:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012c38:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012c3c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8012c3e:	b14a      	cbz	r2, 8012c54 <SDMMC_CmdWriteSingleBlock+0x3c>
 8012c40:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012c42:	4945      	ldr	r1, [pc, #276]	; (8012d58 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8012c44:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012c46:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012c48:	420a      	tst	r2, r1
 8012c4a:	d001      	beq.n	8012c50 <SDMMC_CmdWriteSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012c4c:	0492      	lsls	r2, r2, #18
 8012c4e:	d507      	bpl.n	8012c60 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
 8012c50:	1c5c      	adds	r4, r3, #1
 8012c52:	d1f7      	bne.n	8012c44 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012c54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c5e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012c62:	075c      	lsls	r4, r3, #29
 8012c64:	d43d      	bmi.n	8012ce2 <SDMMC_CmdWriteSingleBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012c68:	f013 0301 	ands.w	r3, r3, #1
 8012c6c:	d134      	bne.n	8012cd8 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012c6e:	4b3b      	ldr	r3, [pc, #236]	; (8012d5c <SDMMC_CmdWriteSingleBlock+0x144>)
 8012c70:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012c72:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012c74:	b2db      	uxtb	r3, r3
 8012c76:	2b18      	cmp	r3, #24
 8012c78:	d131      	bne.n	8012cde <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8012c7a:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012c7c:	4b38      	ldr	r3, [pc, #224]	; (8012d60 <SDMMC_CmdWriteSingleBlock+0x148>)
 8012c7e:	4013      	ands	r3, r2
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d0e9      	beq.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012c84:	2a00      	cmp	r2, #0
 8012c86:	db30      	blt.n	8012cea <SDMMC_CmdWriteSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012c88:	0051      	lsls	r1, r2, #1
 8012c8a:	d431      	bmi.n	8012cf0 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012c8c:	0094      	lsls	r4, r2, #2
 8012c8e:	d431      	bmi.n	8012cf4 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012c90:	00d0      	lsls	r0, r2, #3
 8012c92:	d431      	bmi.n	8012cf8 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012c94:	0111      	lsls	r1, r2, #4
 8012c96:	d432      	bmi.n	8012cfe <SDMMC_CmdWriteSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012c98:	0154      	lsls	r4, r2, #5
 8012c9a:	d433      	bmi.n	8012d04 <SDMMC_CmdWriteSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012c9c:	01d0      	lsls	r0, r2, #7
 8012c9e:	d434      	bmi.n	8012d0a <SDMMC_CmdWriteSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012ca0:	0211      	lsls	r1, r2, #8
 8012ca2:	d435      	bmi.n	8012d10 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012ca4:	0254      	lsls	r4, r2, #9
 8012ca6:	d436      	bmi.n	8012d16 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012ca8:	0290      	lsls	r0, r2, #10
 8012caa:	d440      	bmi.n	8012d2e <SDMMC_CmdWriteSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012cac:	02d1      	lsls	r1, r2, #11
 8012cae:	d43b      	bmi.n	8012d28 <SDMMC_CmdWriteSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012cb0:	0354      	lsls	r4, r2, #13
 8012cb2:	d436      	bmi.n	8012d22 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012cb4:	0390      	lsls	r0, r2, #14
 8012cb6:	d431      	bmi.n	8012d1c <SDMMC_CmdWriteSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012cb8:	03d1      	lsls	r1, r2, #15
 8012cba:	d444      	bmi.n	8012d46 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012cbc:	0414      	lsls	r4, r2, #16
 8012cbe:	d43f      	bmi.n	8012d40 <SDMMC_CmdWriteSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012cc0:	0450      	lsls	r0, r2, #17
 8012cc2:	d43a      	bmi.n	8012d3a <SDMMC_CmdWriteSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012cc4:	0491      	lsls	r1, r2, #18
 8012cc6:	d435      	bmi.n	8012d34 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012cc8:	f012 0f08 	tst.w	r2, #8
 8012ccc:	bf14      	ite	ne
 8012cce:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8012cd2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8012cd6:	e7bf      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012cd8:	2201      	movs	r2, #1
 8012cda:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012cdc:	e7bc      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012cde:	2301      	movs	r3, #1
 8012ce0:	e7ba      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012ce2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012ce4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012ce6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012ce8:	e7b6      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012cee:	e7b3      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012cf0:	2340      	movs	r3, #64	; 0x40
 8012cf2:	e7b1      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012cf4:	2380      	movs	r3, #128	; 0x80
 8012cf6:	e7af      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012cfc:	e7ac      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d02:	e7a9      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d08:	e7a6      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d0e:	e7a3      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d14:	e7a0      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012d1a:	e79d      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012d20:	e79a      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012d26:	e797      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8012d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012d2c:	e794      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012d2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012d32:	e791      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8012d34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012d38:	e78e      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012d3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012d3e:	e78b      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012d40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012d44:	e788      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012d46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012d4a:	e785      	b.n	8012c58 <SDMMC_CmdWriteSingleBlock+0x40>
 8012d4c:	20004728 	.word	0x20004728
 8012d50:	10624dd3 	.word	0x10624dd3
 8012d54:	fffee0c0 	.word	0xfffee0c0
 8012d58:	00200045 	.word	0x00200045
 8012d5c:	002000c5 	.word	0x002000c5
 8012d60:	fdffe008 	.word	0xfdffe008

08012d64 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012d64:	4a4c      	ldr	r2, [pc, #304]	; (8012e98 <SDMMC_CmdWriteMultiBlock+0x134>)
 8012d66:	4b4d      	ldr	r3, [pc, #308]	; (8012e9c <SDMMC_CmdWriteMultiBlock+0x138>)
 8012d68:	6812      	ldr	r2, [r2, #0]
{
 8012d6a:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012d6c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d70:	4c4b      	ldr	r4, [pc, #300]	; (8012ea0 <SDMMC_CmdWriteMultiBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8012d72:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d74:	f241 1319 	movw	r3, #4377	; 0x1119
 8012d78:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012d7a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d7c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012d7e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d82:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012d84:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d88:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8012d8a:	b14a      	cbz	r2, 8012da0 <SDMMC_CmdWriteMultiBlock+0x3c>
 8012d8c:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012d8e:	4945      	ldr	r1, [pc, #276]	; (8012ea4 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8012d90:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012d92:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012d94:	420a      	tst	r2, r1
 8012d96:	d001      	beq.n	8012d9c <SDMMC_CmdWriteMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012d98:	0492      	lsls	r2, r2, #18
 8012d9a:	d507      	bpl.n	8012dac <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
 8012d9c:	1c5c      	adds	r4, r3, #1
 8012d9e:	d1f7      	bne.n	8012d90 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8012da0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012daa:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012dac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012dae:	075c      	lsls	r4, r3, #29
 8012db0:	d43d      	bmi.n	8012e2e <SDMMC_CmdWriteMultiBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012db2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012db4:	f013 0301 	ands.w	r3, r3, #1
 8012db8:	d134      	bne.n	8012e24 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012dba:	4b3b      	ldr	r3, [pc, #236]	; (8012ea8 <SDMMC_CmdWriteMultiBlock+0x144>)
 8012dbc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012dbe:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	2b19      	cmp	r3, #25
 8012dc4:	d131      	bne.n	8012e2a <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8012dc6:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012dc8:	4b38      	ldr	r3, [pc, #224]	; (8012eac <SDMMC_CmdWriteMultiBlock+0x148>)
 8012dca:	4013      	ands	r3, r2
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d0e9      	beq.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012dd0:	2a00      	cmp	r2, #0
 8012dd2:	db30      	blt.n	8012e36 <SDMMC_CmdWriteMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012dd4:	0051      	lsls	r1, r2, #1
 8012dd6:	d431      	bmi.n	8012e3c <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012dd8:	0094      	lsls	r4, r2, #2
 8012dda:	d431      	bmi.n	8012e40 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012ddc:	00d0      	lsls	r0, r2, #3
 8012dde:	d431      	bmi.n	8012e44 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012de0:	0111      	lsls	r1, r2, #4
 8012de2:	d432      	bmi.n	8012e4a <SDMMC_CmdWriteMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012de4:	0154      	lsls	r4, r2, #5
 8012de6:	d433      	bmi.n	8012e50 <SDMMC_CmdWriteMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012de8:	01d0      	lsls	r0, r2, #7
 8012dea:	d434      	bmi.n	8012e56 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012dec:	0211      	lsls	r1, r2, #8
 8012dee:	d435      	bmi.n	8012e5c <SDMMC_CmdWriteMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012df0:	0254      	lsls	r4, r2, #9
 8012df2:	d436      	bmi.n	8012e62 <SDMMC_CmdWriteMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012df4:	0290      	lsls	r0, r2, #10
 8012df6:	d440      	bmi.n	8012e7a <SDMMC_CmdWriteMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012df8:	02d1      	lsls	r1, r2, #11
 8012dfa:	d43b      	bmi.n	8012e74 <SDMMC_CmdWriteMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012dfc:	0354      	lsls	r4, r2, #13
 8012dfe:	d436      	bmi.n	8012e6e <SDMMC_CmdWriteMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012e00:	0390      	lsls	r0, r2, #14
 8012e02:	d431      	bmi.n	8012e68 <SDMMC_CmdWriteMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012e04:	03d1      	lsls	r1, r2, #15
 8012e06:	d444      	bmi.n	8012e92 <SDMMC_CmdWriteMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012e08:	0414      	lsls	r4, r2, #16
 8012e0a:	d43f      	bmi.n	8012e8c <SDMMC_CmdWriteMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012e0c:	0450      	lsls	r0, r2, #17
 8012e0e:	d43a      	bmi.n	8012e86 <SDMMC_CmdWriteMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012e10:	0491      	lsls	r1, r2, #18
 8012e12:	d435      	bmi.n	8012e80 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012e14:	f012 0f08 	tst.w	r2, #8
 8012e18:	bf14      	ite	ne
 8012e1a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8012e1e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8012e22:	e7bf      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e24:	2201      	movs	r2, #1
 8012e26:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e28:	e7bc      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	e7ba      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e2e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e30:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e32:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e34:	e7b6      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012e3a:	e7b3      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012e3c:	2340      	movs	r3, #64	; 0x40
 8012e3e:	e7b1      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012e40:	2380      	movs	r3, #128	; 0x80
 8012e42:	e7af      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e48:	e7ac      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012e4e:	e7a9      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e54:	e7a6      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e5a:	e7a3      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e60:	e7a0      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012e66:	e79d      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012e68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012e6c:	e79a      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012e6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012e72:	e797      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8012e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012e78:	e794      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012e7e:	e791      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8012e80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012e84:	e78e      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012e86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012e8a:	e78b      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012e8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012e90:	e788      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012e92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012e96:	e785      	b.n	8012da4 <SDMMC_CmdWriteMultiBlock+0x40>
 8012e98:	20004728 	.word	0x20004728
 8012e9c:	10624dd3 	.word	0x10624dd3
 8012ea0:	fffee0c0 	.word	0xfffee0c0
 8012ea4:	00200045 	.word	0x00200045
 8012ea8:	002000c5 	.word	0x002000c5
 8012eac:	fdffe008 	.word	0xfdffe008

08012eb0 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012eb0:	4b7d      	ldr	r3, [pc, #500]	; (80130a8 <SDMMC_CmdStopTransfer+0x1f8>)
 8012eb2:	497e      	ldr	r1, [pc, #504]	; (80130ac <SDMMC_CmdStopTransfer+0x1fc>)
 8012eb4:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012eb6:	4b7e      	ldr	r3, [pc, #504]	; (80130b0 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012eb8:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012ebc:	68c1      	ldr	r1, [r0, #12]
 8012ebe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ec2:	0a52      	lsrs	r2, r2, #9
{
 8012ec4:	b430      	push	{r4, r5}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012ec6:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8012ec8:	2400      	movs	r4, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012eca:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ecc:	4d79      	ldr	r5, [pc, #484]	; (80130b4 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012ece:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ed2:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012ed6:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012ed8:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 8012edc:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012ede:	68c4      	ldr	r4, [r0, #12]
 8012ee0:	4023      	ands	r3, r4
 8012ee2:	4319      	orrs	r1, r3
 8012ee4:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8012ee6:	b14a      	cbz	r2, 8012efc <SDMMC_CmdStopTransfer+0x4c>
 8012ee8:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012eea:	4973      	ldr	r1, [pc, #460]	; (80130b8 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 8012eec:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8012eee:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012ef0:	420a      	tst	r2, r1
 8012ef2:	d001      	beq.n	8012ef8 <SDMMC_CmdStopTransfer+0x48>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012ef4:	0492      	lsls	r2, r2, #18
 8012ef6:	d50a      	bpl.n	8012f0e <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8012ef8:	1c5c      	adds	r4, r3, #1
 8012efa:	d1f7      	bne.n	8012eec <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012efc:	68c2      	ldr	r2, [r0, #12]
 8012efe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012f06:	60c2      	str	r2, [r0, #12]
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	bc30      	pop	{r4, r5}
 8012f0c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012f10:	075b      	lsls	r3, r3, #29
 8012f12:	d454      	bmi.n	8012fbe <SDMMC_CmdStopTransfer+0x10e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012f14:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012f16:	f013 0301 	ands.w	r3, r3, #1
 8012f1a:	d13c      	bne.n	8012f96 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f1c:	4a67      	ldr	r2, [pc, #412]	; (80130bc <SDMMC_CmdStopTransfer+0x20c>)
 8012f1e:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012f20:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012f22:	b2d2      	uxtb	r2, r2
 8012f24:	2a0c      	cmp	r2, #12
 8012f26:	d144      	bne.n	8012fb2 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 8012f28:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012f2a:	4965      	ldr	r1, [pc, #404]	; (80130c0 <SDMMC_CmdStopTransfer+0x210>)
 8012f2c:	4011      	ands	r1, r2
 8012f2e:	2900      	cmp	r1, #0
 8012f30:	d038      	beq.n	8012fa4 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012f32:	2a00      	cmp	r2, #0
 8012f34:	db36      	blt.n	8012fa4 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012f36:	0055      	lsls	r5, r2, #1
 8012f38:	d448      	bmi.n	8012fcc <SDMMC_CmdStopTransfer+0x11c>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012f3a:	0094      	lsls	r4, r2, #2
 8012f3c:	d44c      	bmi.n	8012fd8 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012f3e:	00d1      	lsls	r1, r2, #3
 8012f40:	d450      	bmi.n	8012fe4 <SDMMC_CmdStopTransfer+0x134>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012f42:	0113      	lsls	r3, r2, #4
 8012f44:	d455      	bmi.n	8012ff2 <SDMMC_CmdStopTransfer+0x142>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012f46:	0155      	lsls	r5, r2, #5
 8012f48:	d45a      	bmi.n	8013000 <SDMMC_CmdStopTransfer+0x150>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012f4a:	01d4      	lsls	r4, r2, #7
 8012f4c:	d466      	bmi.n	801301c <SDMMC_CmdStopTransfer+0x16c>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012f4e:	0211      	lsls	r1, r2, #8
 8012f50:	d45d      	bmi.n	801300e <SDMMC_CmdStopTransfer+0x15e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012f52:	0253      	lsls	r3, r2, #9
 8012f54:	d470      	bmi.n	8013038 <SDMMC_CmdStopTransfer+0x188>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012f56:	0295      	lsls	r5, r2, #10
 8012f58:	d467      	bmi.n	801302a <SDMMC_CmdStopTransfer+0x17a>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012f5a:	02d4      	lsls	r4, r2, #11
 8012f5c:	f100 8081 	bmi.w	8013062 <SDMMC_CmdStopTransfer+0x1b2>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012f60:	0351      	lsls	r1, r2, #13
 8012f62:	d477      	bmi.n	8013054 <SDMMC_CmdStopTransfer+0x1a4>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012f64:	0393      	lsls	r3, r2, #14
 8012f66:	d46e      	bmi.n	8013046 <SDMMC_CmdStopTransfer+0x196>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012f68:	03d5      	lsls	r5, r2, #15
 8012f6a:	f100 8096 	bmi.w	801309a <SDMMC_CmdStopTransfer+0x1ea>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012f6e:	0414      	lsls	r4, r2, #16
 8012f70:	f100 8085 	bmi.w	801307e <SDMMC_CmdStopTransfer+0x1ce>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012f74:	0451      	lsls	r1, r2, #17
 8012f76:	d47b      	bmi.n	8013070 <SDMMC_CmdStopTransfer+0x1c0>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012f78:	0493      	lsls	r3, r2, #18
 8012f7a:	f100 8087 	bmi.w	801308c <SDMMC_CmdStopTransfer+0x1dc>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012f7e:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012f82:	68c2      	ldr	r2, [r0, #12]
 8012f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012f88:	bf14      	ite	ne
 8012f8a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012f8e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012f92:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012f94:	e7b8      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012f96:	2201      	movs	r2, #1
 8012f98:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012f9a:	68c2      	ldr	r2, [r0, #12]
 8012f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012fa0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012fa2:	e7b1      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fa4:	68c2      	ldr	r2, [r0, #12]
 8012fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
}
 8012faa:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fac:	60c2      	str	r2, [r0, #12]
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fb2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012fb4:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012fba:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012fbc:	e7a4      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012fbe:	2304      	movs	r3, #4
 8012fc0:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fc2:	68c2      	ldr	r2, [r0, #12]
 8012fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012fc8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012fca:	e79d      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fcc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012fce:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012fd4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012fd6:	e797      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fd8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012fda:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012fe0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012fe2:	e791      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fe4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012fee:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012ff0:	e78a      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012ff2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012ffc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012ffe:	e783      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013000:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013002:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801300a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801300c:	e77c      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801300e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013018:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801301a:	e775      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801301c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801301e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013026:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013028:	e76e      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801302a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801302c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013034:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013036:	e767      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013038:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 801303a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801303e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013042:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013044:	e760      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013046:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013048:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801304c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013050:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013052:	e759      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013054:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013056:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801305a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801305e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013060:	e752      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013062:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 8013064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801306c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801306e:	e74b      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013070:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013072:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801307a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801307c:	e744      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801307e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013080:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013088:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801308a:	e73d      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801308c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 801308e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013096:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013098:	e736      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801309a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801309c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80130a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80130a4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80130a6:	e72f      	b.n	8012f08 <SDMMC_CmdStopTransfer+0x58>
 80130a8:	20004728 	.word	0x20004728
 80130ac:	10624dd3 	.word	0x10624dd3
 80130b0:	fffee0c0 	.word	0xfffee0c0
 80130b4:	05f5e100 	.word	0x05f5e100
 80130b8:	00200045 	.word	0x00200045
 80130bc:	002000c5 	.word	0x002000c5
 80130c0:	fdffe008 	.word	0xfdffe008

080130c4 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80130c4:	4b4c      	ldr	r3, [pc, #304]	; (80131f8 <SDMMC_CmdSelDesel+0x134>)
 80130c6:	494d      	ldr	r1, [pc, #308]	; (80131fc <SDMMC_CmdSelDesel+0x138>)
 80130c8:	681b      	ldr	r3, [r3, #0]
{
 80130ca:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80130cc:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130d0:	4c4b      	ldr	r4, [pc, #300]	; (8013200 <SDMMC_CmdSelDesel+0x13c>)
  SDMMCx->ARG = Command->Argument;
 80130d2:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130d4:	f241 1107 	movw	r1, #4359	; 0x1107
 80130d8:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80130da:	0a5a      	lsrs	r2, r3, #9
 80130dc:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130e0:	402c      	ands	r4, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80130e2:	fb03 f202 	mul.w	r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130e6:	4321      	orrs	r1, r4
 80130e8:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 80130ea:	b14a      	cbz	r2, 8013100 <SDMMC_CmdSelDesel+0x3c>
 80130ec:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80130ee:	4945      	ldr	r1, [pc, #276]	; (8013204 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
 80130f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80130f2:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80130f4:	420a      	tst	r2, r1
 80130f6:	d001      	beq.n	80130fc <SDMMC_CmdSelDesel+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80130f8:	0492      	lsls	r2, r2, #18
 80130fa:	d506      	bpl.n	801310a <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 80130fc:	1c5c      	adds	r4, r3, #1
 80130fe:	d1f7      	bne.n	80130f0 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8013100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013104:	4618      	mov	r0, r3
 8013106:	bc30      	pop	{r4, r5}
 8013108:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801310a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801310c:	075b      	lsls	r3, r3, #29
 801310e:	d43d      	bmi.n	801318c <SDMMC_CmdSelDesel+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013110:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013112:	f013 0301 	ands.w	r3, r3, #1
 8013116:	d134      	bne.n	8013182 <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013118:	4b3b      	ldr	r3, [pc, #236]	; (8013208 <SDMMC_CmdSelDesel+0x144>)
 801311a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801311c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801311e:	b2db      	uxtb	r3, r3
 8013120:	2b07      	cmp	r3, #7
 8013122:	d131      	bne.n	8013188 <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 8013124:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013126:	4b39      	ldr	r3, [pc, #228]	; (801320c <SDMMC_CmdSelDesel+0x148>)
 8013128:	4013      	ands	r3, r2
 801312a:	2b00      	cmp	r3, #0
 801312c:	d0ea      	beq.n	8013104 <SDMMC_CmdSelDesel+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801312e:	2a00      	cmp	r2, #0
 8013130:	db30      	blt.n	8013194 <SDMMC_CmdSelDesel+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013132:	0055      	lsls	r5, r2, #1
 8013134:	d431      	bmi.n	801319a <SDMMC_CmdSelDesel+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013136:	0094      	lsls	r4, r2, #2
 8013138:	d431      	bmi.n	801319e <SDMMC_CmdSelDesel+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801313a:	00d0      	lsls	r0, r2, #3
 801313c:	d431      	bmi.n	80131a2 <SDMMC_CmdSelDesel+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801313e:	0111      	lsls	r1, r2, #4
 8013140:	d432      	bmi.n	80131a8 <SDMMC_CmdSelDesel+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013142:	0155      	lsls	r5, r2, #5
 8013144:	d433      	bmi.n	80131ae <SDMMC_CmdSelDesel+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013146:	01d4      	lsls	r4, r2, #7
 8013148:	d434      	bmi.n	80131b4 <SDMMC_CmdSelDesel+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801314a:	0210      	lsls	r0, r2, #8
 801314c:	d435      	bmi.n	80131ba <SDMMC_CmdSelDesel+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801314e:	0251      	lsls	r1, r2, #9
 8013150:	d436      	bmi.n	80131c0 <SDMMC_CmdSelDesel+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013152:	0295      	lsls	r5, r2, #10
 8013154:	d440      	bmi.n	80131d8 <SDMMC_CmdSelDesel+0x114>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013156:	02d4      	lsls	r4, r2, #11
 8013158:	d43b      	bmi.n	80131d2 <SDMMC_CmdSelDesel+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801315a:	0350      	lsls	r0, r2, #13
 801315c:	d436      	bmi.n	80131cc <SDMMC_CmdSelDesel+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801315e:	0391      	lsls	r1, r2, #14
 8013160:	d431      	bmi.n	80131c6 <SDMMC_CmdSelDesel+0x102>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013162:	03d5      	lsls	r5, r2, #15
 8013164:	d444      	bmi.n	80131f0 <SDMMC_CmdSelDesel+0x12c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013166:	0414      	lsls	r4, r2, #16
 8013168:	d43f      	bmi.n	80131ea <SDMMC_CmdSelDesel+0x126>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801316a:	0450      	lsls	r0, r2, #17
 801316c:	d43a      	bmi.n	80131e4 <SDMMC_CmdSelDesel+0x120>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801316e:	0491      	lsls	r1, r2, #18
 8013170:	d435      	bmi.n	80131de <SDMMC_CmdSelDesel+0x11a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013172:	f012 0f08 	tst.w	r2, #8
 8013176:	bf14      	ite	ne
 8013178:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801317c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013180:	e7c0      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013182:	2201      	movs	r2, #1
 8013184:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013186:	e7bd      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013188:	2301      	movs	r3, #1
 801318a:	e7bb      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801318c:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801318e:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013190:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013192:	e7b7      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013198:	e7b4      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801319a:	2340      	movs	r3, #64	; 0x40
 801319c:	e7b2      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801319e:	2380      	movs	r3, #128	; 0x80
 80131a0:	e7b0      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80131a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131a6:	e7ad      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80131a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80131ac:	e7aa      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80131ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131b2:	e7a7      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80131b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80131b8:	e7a4      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80131ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131be:	e7a1      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80131c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80131c4:	e79e      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80131c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80131ca:	e79b      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80131cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80131d0:	e798      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 80131d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80131d6:	e795      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80131d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80131dc:	e792      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80131de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80131e2:	e78f      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80131e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80131e8:	e78c      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80131ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80131ee:	e789      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80131f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80131f4:	e786      	b.n	8013104 <SDMMC_CmdSelDesel+0x40>
 80131f6:	bf00      	nop
 80131f8:	20004728 	.word	0x20004728
 80131fc:	10624dd3 	.word	0x10624dd3
 8013200:	fffee0c0 	.word	0xfffee0c0
 8013204:	00200045 	.word	0x00200045
 8013208:	002000c5 	.word	0x002000c5
 801320c:	fdffe008 	.word	0xfdffe008

08013210 <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013210:	4b11      	ldr	r3, [pc, #68]	; (8013258 <SDMMC_CmdGoIdleState+0x48>)
{
 8013212:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013214:	4a11      	ldr	r2, [pc, #68]	; (801325c <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013216:	681b      	ldr	r3, [r3, #0]
{
 8013218:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801321a:	4c11      	ldr	r4, [pc, #68]	; (8013260 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 801321c:	2500      	movs	r5, #0
 801321e:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013220:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013224:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013226:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801322a:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801322c:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801322e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013232:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013236:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013238:	e002      	b.n	8013240 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801323a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801323c:	0612      	lsls	r2, r2, #24
 801323e:	d405      	bmi.n	801324c <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8013240:	3b01      	subs	r3, #1
 8013242:	d2fa      	bcs.n	801323a <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8013244:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013248:	bc30      	pop	{r4, r5}
 801324a:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801324c:	4b05      	ldr	r3, [pc, #20]	; (8013264 <SDMMC_CmdGoIdleState+0x54>)
  return SDMMC_ERROR_NONE;
 801324e:	2000      	movs	r0, #0
}
 8013250:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013252:	638b      	str	r3, [r1, #56]	; 0x38
}
 8013254:	4770      	bx	lr
 8013256:	bf00      	nop
 8013258:	20004728 	.word	0x20004728
 801325c:	fffee0c0 	.word	0xfffee0c0
 8013260:	10624dd3 	.word	0x10624dd3
 8013264:	002000c5 	.word	0x002000c5

08013268 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013268:	4a1c      	ldr	r2, [pc, #112]	; (80132dc <SDMMC_CmdOperCond+0x74>)
{
 801326a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 801326c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013270:	481b      	ldr	r0, [pc, #108]	; (80132e0 <SDMMC_CmdOperCond+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013272:	6812      	ldr	r2, [r2, #0]
{
 8013274:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013276:	4c1b      	ldr	r4, [pc, #108]	; (80132e4 <SDMMC_CmdOperCond+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8013278:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801327a:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801327e:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013282:	68cc      	ldr	r4, [r1, #12]
 8013284:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013286:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013288:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801328a:	f241 3088 	movw	r0, #5000	; 0x1388
 801328e:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013292:	60cb      	str	r3, [r1, #12]

  do
  {
    if (count-- == 0U)
 8013294:	b14a      	cbz	r2, 80132aa <SDMMC_CmdOperCond+0x42>
 8013296:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8013298:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 801329a:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801329c:	f012 0f45 	tst.w	r2, #69	; 0x45
 80132a0:	d001      	beq.n	80132a6 <SDMMC_CmdOperCond+0x3e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80132a2:	0490      	lsls	r0, r2, #18
 80132a4:	d506      	bpl.n	80132b4 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 80132a6:	1c5c      	adds	r4, r3, #1
 80132a8:	d1f6      	bne.n	8013298 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80132aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80132ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132b2:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80132b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80132b6:	075a      	lsls	r2, r3, #29
 80132b8:	d40c      	bmi.n	80132d4 <SDMMC_CmdOperCond+0x6c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80132ba:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80132bc:	f010 0001 	ands.w	r0, r0, #1
 80132c0:	d105      	bne.n	80132ce <SDMMC_CmdOperCond+0x66>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80132c2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80132c4:	065b      	lsls	r3, r3, #25
 80132c6:	d5f2      	bpl.n	80132ae <SDMMC_CmdOperCond+0x46>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80132c8:	2340      	movs	r3, #64	; 0x40
 80132ca:	638b      	str	r3, [r1, #56]	; 0x38
 80132cc:	e7ef      	b.n	80132ae <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80132ce:	2301      	movs	r3, #1
 80132d0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80132d2:	e7ec      	b.n	80132ae <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80132d4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80132d6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80132d8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80132da:	e7e8      	b.n	80132ae <SDMMC_CmdOperCond+0x46>
 80132dc:	20004728 	.word	0x20004728
 80132e0:	fffee0c0 	.word	0xfffee0c0
 80132e4:	10624dd3 	.word	0x10624dd3

080132e8 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80132e8:	4a4c      	ldr	r2, [pc, #304]	; (801341c <SDMMC_CmdAppCommand+0x134>)
 80132ea:	4b4d      	ldr	r3, [pc, #308]	; (8013420 <SDMMC_CmdAppCommand+0x138>)
 80132ec:	6812      	ldr	r2, [r2, #0]
{
 80132ee:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80132f0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80132f4:	4c4b      	ldr	r4, [pc, #300]	; (8013424 <SDMMC_CmdAppCommand+0x13c>)
  SDMMCx->ARG = Command->Argument;
 80132f6:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80132f8:	f241 1337 	movw	r3, #4407	; 0x1137
 80132fc:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80132fe:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013300:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013302:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013306:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013308:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801330c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 801330e:	b14a      	cbz	r2, 8013324 <SDMMC_CmdAppCommand+0x3c>
 8013310:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013312:	4945      	ldr	r1, [pc, #276]	; (8013428 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
 8013314:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013316:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013318:	420a      	tst	r2, r1
 801331a:	d001      	beq.n	8013320 <SDMMC_CmdAppCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801331c:	0492      	lsls	r2, r2, #18
 801331e:	d507      	bpl.n	8013330 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
 8013320:	1c5c      	adds	r4, r3, #1
 8013322:	d1f7      	bne.n	8013314 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8013324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013328:	4618      	mov	r0, r3
 801332a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801332e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013330:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013332:	075c      	lsls	r4, r3, #29
 8013334:	d43d      	bmi.n	80133b2 <SDMMC_CmdAppCommand+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013336:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013338:	f013 0301 	ands.w	r3, r3, #1
 801333c:	d134      	bne.n	80133a8 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801333e:	4b3b      	ldr	r3, [pc, #236]	; (801342c <SDMMC_CmdAppCommand+0x144>)
 8013340:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013342:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013344:	b2db      	uxtb	r3, r3
 8013346:	2b37      	cmp	r3, #55	; 0x37
 8013348:	d131      	bne.n	80133ae <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
 801334a:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801334c:	4b38      	ldr	r3, [pc, #224]	; (8013430 <SDMMC_CmdAppCommand+0x148>)
 801334e:	4013      	ands	r3, r2
 8013350:	2b00      	cmp	r3, #0
 8013352:	d0e9      	beq.n	8013328 <SDMMC_CmdAppCommand+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013354:	2a00      	cmp	r2, #0
 8013356:	db30      	blt.n	80133ba <SDMMC_CmdAppCommand+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013358:	0051      	lsls	r1, r2, #1
 801335a:	d431      	bmi.n	80133c0 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801335c:	0094      	lsls	r4, r2, #2
 801335e:	d431      	bmi.n	80133c4 <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013360:	00d0      	lsls	r0, r2, #3
 8013362:	d431      	bmi.n	80133c8 <SDMMC_CmdAppCommand+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013364:	0111      	lsls	r1, r2, #4
 8013366:	d432      	bmi.n	80133ce <SDMMC_CmdAppCommand+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013368:	0154      	lsls	r4, r2, #5
 801336a:	d433      	bmi.n	80133d4 <SDMMC_CmdAppCommand+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801336c:	01d0      	lsls	r0, r2, #7
 801336e:	d434      	bmi.n	80133da <SDMMC_CmdAppCommand+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013370:	0211      	lsls	r1, r2, #8
 8013372:	d435      	bmi.n	80133e0 <SDMMC_CmdAppCommand+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013374:	0254      	lsls	r4, r2, #9
 8013376:	d436      	bmi.n	80133e6 <SDMMC_CmdAppCommand+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013378:	0290      	lsls	r0, r2, #10
 801337a:	d440      	bmi.n	80133fe <SDMMC_CmdAppCommand+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801337c:	02d1      	lsls	r1, r2, #11
 801337e:	d43b      	bmi.n	80133f8 <SDMMC_CmdAppCommand+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013380:	0354      	lsls	r4, r2, #13
 8013382:	d436      	bmi.n	80133f2 <SDMMC_CmdAppCommand+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013384:	0390      	lsls	r0, r2, #14
 8013386:	d431      	bmi.n	80133ec <SDMMC_CmdAppCommand+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013388:	03d1      	lsls	r1, r2, #15
 801338a:	d444      	bmi.n	8013416 <SDMMC_CmdAppCommand+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801338c:	0414      	lsls	r4, r2, #16
 801338e:	d43f      	bmi.n	8013410 <SDMMC_CmdAppCommand+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013390:	0450      	lsls	r0, r2, #17
 8013392:	d43a      	bmi.n	801340a <SDMMC_CmdAppCommand+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013394:	0491      	lsls	r1, r2, #18
 8013396:	d435      	bmi.n	8013404 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013398:	f012 0f08 	tst.w	r2, #8
 801339c:	bf14      	ite	ne
 801339e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80133a2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80133a6:	e7bf      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80133a8:	2201      	movs	r2, #1
 80133aa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80133ac:	e7bc      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80133ae:	2301      	movs	r3, #1
 80133b0:	e7ba      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80133b2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80133b4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80133b6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80133b8:	e7b6      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80133ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80133be:	e7b3      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80133c0:	2340      	movs	r3, #64	; 0x40
 80133c2:	e7b1      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80133c4:	2380      	movs	r3, #128	; 0x80
 80133c6:	e7af      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80133c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133cc:	e7ac      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80133ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80133d2:	e7a9      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80133d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133d8:	e7a6      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80133da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80133de:	e7a3      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80133e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80133e4:	e7a0      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80133e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80133ea:	e79d      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80133ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80133f0:	e79a      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80133f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80133f6:	e797      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 80133f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80133fc:	e794      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80133fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013402:	e791      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8013404:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013408:	e78e      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801340a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801340e:	e78b      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013410:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013414:	e788      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013416:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801341a:	e785      	b.n	8013328 <SDMMC_CmdAppCommand+0x40>
 801341c:	20004728 	.word	0x20004728
 8013420:	10624dd3 	.word	0x10624dd3
 8013424:	fffee0c0 	.word	0xfffee0c0
 8013428:	00200045 	.word	0x00200045
 801342c:	002000c5 	.word	0x002000c5
 8013430:	fdffe008 	.word	0xfdffe008

08013434 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013434:	4a18      	ldr	r2, [pc, #96]	; (8013498 <SDMMC_CmdAppOperCommand+0x64>)
 8013436:	4b19      	ldr	r3, [pc, #100]	; (801349c <SDMMC_CmdAppOperCommand+0x68>)
 8013438:	6812      	ldr	r2, [r2, #0]
{
 801343a:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801343c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013440:	4c17      	ldr	r4, [pc, #92]	; (80134a0 <SDMMC_CmdAppOperCommand+0x6c>)
  SDMMCx->ARG = Command->Argument;
 8013442:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013444:	f241 1329 	movw	r3, #4393	; 0x1129
 8013448:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801344a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801344c:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801344e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013452:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013454:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013458:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 801345a:	b14a      	cbz	r2, 8013470 <SDMMC_CmdAppOperCommand+0x3c>
 801345c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 801345e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013460:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013462:	f012 0f45 	tst.w	r2, #69	; 0x45
 8013466:	d001      	beq.n	801346c <SDMMC_CmdAppOperCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013468:	0492      	lsls	r2, r2, #18
 801346a:	d507      	bpl.n	801347c <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
 801346c:	1c59      	adds	r1, r3, #1
 801346e:	d1f6      	bne.n	801345e <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8013470:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013474:	4618      	mov	r0, r3
 8013476:	f85d 4b04 	ldr.w	r4, [sp], #4
 801347a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801347c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801347e:	f013 0304 	ands.w	r3, r3, #4
 8013482:	d105      	bne.n	8013490 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013484:	4a07      	ldr	r2, [pc, #28]	; (80134a4 <SDMMC_CmdAppOperCommand+0x70>)
}
 8013486:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801348a:	6382      	str	r2, [r0, #56]	; 0x38
}
 801348c:	4618      	mov	r0, r3
 801348e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013490:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013492:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013494:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013496:	e7ed      	b.n	8013474 <SDMMC_CmdAppOperCommand+0x40>
 8013498:	20004728 	.word	0x20004728
 801349c:	10624dd3 	.word	0x10624dd3
 80134a0:	fffee0c0 	.word	0xfffee0c0
 80134a4:	002000c5 	.word	0x002000c5

080134a8 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134a8:	4a4c      	ldr	r2, [pc, #304]	; (80135dc <SDMMC_CmdBusWidth+0x134>)
 80134aa:	4b4d      	ldr	r3, [pc, #308]	; (80135e0 <SDMMC_CmdBusWidth+0x138>)
 80134ac:	6812      	ldr	r2, [r2, #0]
{
 80134ae:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134b0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134b4:	4c4b      	ldr	r4, [pc, #300]	; (80135e4 <SDMMC_CmdBusWidth+0x13c>)
  SDMMCx->ARG = Command->Argument;
 80134b6:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134b8:	f241 1306 	movw	r3, #4358	; 0x1106
 80134bc:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134be:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134c0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134c2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134c6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134c8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134cc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80134ce:	b14a      	cbz	r2, 80134e4 <SDMMC_CmdBusWidth+0x3c>
 80134d0:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80134d2:	4945      	ldr	r1, [pc, #276]	; (80135e8 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
 80134d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80134d6:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80134d8:	420a      	tst	r2, r1
 80134da:	d001      	beq.n	80134e0 <SDMMC_CmdBusWidth+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80134dc:	0492      	lsls	r2, r2, #18
 80134de:	d507      	bpl.n	80134f0 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
 80134e0:	1c5c      	adds	r4, r3, #1
 80134e2:	d1f7      	bne.n	80134d4 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80134e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80134e8:	4618      	mov	r0, r3
 80134ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134ee:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80134f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80134f2:	075c      	lsls	r4, r3, #29
 80134f4:	d43d      	bmi.n	8013572 <SDMMC_CmdBusWidth+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80134f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80134f8:	f013 0301 	ands.w	r3, r3, #1
 80134fc:	d134      	bne.n	8013568 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80134fe:	4b3b      	ldr	r3, [pc, #236]	; (80135ec <SDMMC_CmdBusWidth+0x144>)
 8013500:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013502:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013504:	b2db      	uxtb	r3, r3
 8013506:	2b06      	cmp	r3, #6
 8013508:	d131      	bne.n	801356e <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
 801350a:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801350c:	4b38      	ldr	r3, [pc, #224]	; (80135f0 <SDMMC_CmdBusWidth+0x148>)
 801350e:	4013      	ands	r3, r2
 8013510:	2b00      	cmp	r3, #0
 8013512:	d0e9      	beq.n	80134e8 <SDMMC_CmdBusWidth+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013514:	2a00      	cmp	r2, #0
 8013516:	db30      	blt.n	801357a <SDMMC_CmdBusWidth+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013518:	0051      	lsls	r1, r2, #1
 801351a:	d431      	bmi.n	8013580 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801351c:	0094      	lsls	r4, r2, #2
 801351e:	d431      	bmi.n	8013584 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013520:	00d0      	lsls	r0, r2, #3
 8013522:	d431      	bmi.n	8013588 <SDMMC_CmdBusWidth+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013524:	0111      	lsls	r1, r2, #4
 8013526:	d432      	bmi.n	801358e <SDMMC_CmdBusWidth+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013528:	0154      	lsls	r4, r2, #5
 801352a:	d433      	bmi.n	8013594 <SDMMC_CmdBusWidth+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801352c:	01d0      	lsls	r0, r2, #7
 801352e:	d434      	bmi.n	801359a <SDMMC_CmdBusWidth+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013530:	0211      	lsls	r1, r2, #8
 8013532:	d435      	bmi.n	80135a0 <SDMMC_CmdBusWidth+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013534:	0254      	lsls	r4, r2, #9
 8013536:	d436      	bmi.n	80135a6 <SDMMC_CmdBusWidth+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013538:	0290      	lsls	r0, r2, #10
 801353a:	d440      	bmi.n	80135be <SDMMC_CmdBusWidth+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801353c:	02d1      	lsls	r1, r2, #11
 801353e:	d43b      	bmi.n	80135b8 <SDMMC_CmdBusWidth+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013540:	0354      	lsls	r4, r2, #13
 8013542:	d436      	bmi.n	80135b2 <SDMMC_CmdBusWidth+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013544:	0390      	lsls	r0, r2, #14
 8013546:	d431      	bmi.n	80135ac <SDMMC_CmdBusWidth+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013548:	03d1      	lsls	r1, r2, #15
 801354a:	d444      	bmi.n	80135d6 <SDMMC_CmdBusWidth+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801354c:	0414      	lsls	r4, r2, #16
 801354e:	d43f      	bmi.n	80135d0 <SDMMC_CmdBusWidth+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013550:	0450      	lsls	r0, r2, #17
 8013552:	d43a      	bmi.n	80135ca <SDMMC_CmdBusWidth+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013554:	0491      	lsls	r1, r2, #18
 8013556:	d435      	bmi.n	80135c4 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013558:	f012 0f08 	tst.w	r2, #8
 801355c:	bf14      	ite	ne
 801355e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013562:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013566:	e7bf      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013568:	2201      	movs	r2, #1
 801356a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801356c:	e7bc      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801356e:	2301      	movs	r3, #1
 8013570:	e7ba      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013572:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013574:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013576:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013578:	e7b6      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801357a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801357e:	e7b3      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013580:	2340      	movs	r3, #64	; 0x40
 8013582:	e7b1      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013584:	2380      	movs	r3, #128	; 0x80
 8013586:	e7af      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013588:	f44f 7380 	mov.w	r3, #256	; 0x100
 801358c:	e7ac      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801358e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013592:	e7a9      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013598:	e7a6      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801359a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801359e:	e7a3      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80135a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80135a4:	e7a0      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80135a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80135aa:	e79d      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80135ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80135b0:	e79a      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80135b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80135b6:	e797      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 80135b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80135bc:	e794      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80135be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80135c2:	e791      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80135c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80135c8:	e78e      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80135ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80135ce:	e78b      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80135d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80135d4:	e788      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80135d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80135da:	e785      	b.n	80134e8 <SDMMC_CmdBusWidth+0x40>
 80135dc:	20004728 	.word	0x20004728
 80135e0:	10624dd3 	.word	0x10624dd3
 80135e4:	fffee0c0 	.word	0xfffee0c0
 80135e8:	00200045 	.word	0x00200045
 80135ec:	002000c5 	.word	0x002000c5
 80135f0:	fdffe008 	.word	0xfdffe008

080135f4 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80135f4:	4a4d      	ldr	r2, [pc, #308]	; (801372c <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
 80135f6:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80135f8:	494d      	ldr	r1, [pc, #308]	; (8013730 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80135fa:	6812      	ldr	r2, [r2, #0]
{
 80135fc:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80135fe:	4c4d      	ldr	r4, [pc, #308]	; (8013734 <SDMMC_CmdSendSCR+0x140>)
  SDMMCx->ARG = Command->Argument;
 8013600:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013602:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013606:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801360a:	68c4      	ldr	r4, [r0, #12]
 801360c:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801360e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013610:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013612:	f241 3188 	movw	r1, #5000	; 0x1388
 8013616:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801361a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 801361c:	b14a      	cbz	r2, 8013632 <SDMMC_CmdSendSCR+0x3e>
 801361e:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013620:	4945      	ldr	r1, [pc, #276]	; (8013738 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 8013622:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013624:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013626:	420a      	tst	r2, r1
 8013628:	d001      	beq.n	801362e <SDMMC_CmdSendSCR+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801362a:	0492      	lsls	r2, r2, #18
 801362c:	d507      	bpl.n	801363e <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 801362e:	1c5c      	adds	r4, r3, #1
 8013630:	d1f7      	bne.n	8013622 <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8013632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013636:	4618      	mov	r0, r3
 8013638:	f85d 4b04 	ldr.w	r4, [sp], #4
 801363c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801363e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013640:	075c      	lsls	r4, r3, #29
 8013642:	d43d      	bmi.n	80136c0 <SDMMC_CmdSendSCR+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013644:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013646:	f013 0301 	ands.w	r3, r3, #1
 801364a:	d134      	bne.n	80136b6 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801364c:	4b3b      	ldr	r3, [pc, #236]	; (801373c <SDMMC_CmdSendSCR+0x148>)
 801364e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013650:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013652:	b2db      	uxtb	r3, r3
 8013654:	2b33      	cmp	r3, #51	; 0x33
 8013656:	d131      	bne.n	80136bc <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 8013658:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801365a:	4b39      	ldr	r3, [pc, #228]	; (8013740 <SDMMC_CmdSendSCR+0x14c>)
 801365c:	4013      	ands	r3, r2
 801365e:	2b00      	cmp	r3, #0
 8013660:	d0e9      	beq.n	8013636 <SDMMC_CmdSendSCR+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013662:	2a00      	cmp	r2, #0
 8013664:	db30      	blt.n	80136c8 <SDMMC_CmdSendSCR+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013666:	0051      	lsls	r1, r2, #1
 8013668:	d431      	bmi.n	80136ce <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801366a:	0094      	lsls	r4, r2, #2
 801366c:	d431      	bmi.n	80136d2 <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801366e:	00d0      	lsls	r0, r2, #3
 8013670:	d431      	bmi.n	80136d6 <SDMMC_CmdSendSCR+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013672:	0111      	lsls	r1, r2, #4
 8013674:	d432      	bmi.n	80136dc <SDMMC_CmdSendSCR+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013676:	0154      	lsls	r4, r2, #5
 8013678:	d433      	bmi.n	80136e2 <SDMMC_CmdSendSCR+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801367a:	01d0      	lsls	r0, r2, #7
 801367c:	d434      	bmi.n	80136e8 <SDMMC_CmdSendSCR+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801367e:	0211      	lsls	r1, r2, #8
 8013680:	d435      	bmi.n	80136ee <SDMMC_CmdSendSCR+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013682:	0254      	lsls	r4, r2, #9
 8013684:	d436      	bmi.n	80136f4 <SDMMC_CmdSendSCR+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013686:	0290      	lsls	r0, r2, #10
 8013688:	d440      	bmi.n	801370c <SDMMC_CmdSendSCR+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801368a:	02d1      	lsls	r1, r2, #11
 801368c:	d43b      	bmi.n	8013706 <SDMMC_CmdSendSCR+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801368e:	0354      	lsls	r4, r2, #13
 8013690:	d436      	bmi.n	8013700 <SDMMC_CmdSendSCR+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013692:	0390      	lsls	r0, r2, #14
 8013694:	d431      	bmi.n	80136fa <SDMMC_CmdSendSCR+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013696:	03d1      	lsls	r1, r2, #15
 8013698:	d444      	bmi.n	8013724 <SDMMC_CmdSendSCR+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801369a:	0414      	lsls	r4, r2, #16
 801369c:	d43f      	bmi.n	801371e <SDMMC_CmdSendSCR+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801369e:	0450      	lsls	r0, r2, #17
 80136a0:	d43a      	bmi.n	8013718 <SDMMC_CmdSendSCR+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80136a2:	0491      	lsls	r1, r2, #18
 80136a4:	d435      	bmi.n	8013712 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80136a6:	f012 0f08 	tst.w	r2, #8
 80136aa:	bf14      	ite	ne
 80136ac:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80136b0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80136b4:	e7bf      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80136b6:	2201      	movs	r2, #1
 80136b8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80136ba:	e7bc      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80136bc:	2301      	movs	r3, #1
 80136be:	e7ba      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80136c0:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80136c2:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80136c4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80136c6:	e7b6      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80136c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80136cc:	e7b3      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80136ce:	2340      	movs	r3, #64	; 0x40
 80136d0:	e7b1      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80136d2:	2380      	movs	r3, #128	; 0x80
 80136d4:	e7af      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80136d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80136da:	e7ac      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80136dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136e0:	e7a9      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80136e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80136e6:	e7a6      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80136e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80136ec:	e7a3      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80136ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136f2:	e7a0      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80136f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80136f8:	e79d      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80136fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80136fe:	e79a      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013704:	e797      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 8013706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801370a:	e794      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801370c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013710:	e791      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8013712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013716:	e78e      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801371c:	e78b      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801371e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013722:	e788      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013724:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013728:	e785      	b.n	8013636 <SDMMC_CmdSendSCR+0x42>
 801372a:	bf00      	nop
 801372c:	20004728 	.word	0x20004728
 8013730:	fffee0c0 	.word	0xfffee0c0
 8013734:	10624dd3 	.word	0x10624dd3
 8013738:	00200045 	.word	0x00200045
 801373c:	002000c5 	.word	0x002000c5
 8013740:	fdffe008 	.word	0xfdffe008

08013744 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013744:	4a1a      	ldr	r2, [pc, #104]	; (80137b0 <SDMMC_CmdSendCID+0x6c>)
{
 8013746:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8013748:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801374a:	481a      	ldr	r0, [pc, #104]	; (80137b4 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801374c:	6812      	ldr	r2, [r2, #0]
{
 801374e:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013750:	4c19      	ldr	r4, [pc, #100]	; (80137b8 <SDMMC_CmdSendCID+0x74>)
  SDMMCx->ARG = Command->Argument;
 8013752:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013754:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013758:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801375c:	68cc      	ldr	r4, [r1, #12]
 801375e:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013760:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013762:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013764:	f241 3088 	movw	r0, #5000	; 0x1388
 8013768:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801376c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 801376e:	b14a      	cbz	r2, 8013784 <SDMMC_CmdSendCID+0x40>
 8013770:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8013772:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8013774:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013776:	f012 0f45 	tst.w	r2, #69	; 0x45
 801377a:	d001      	beq.n	8013780 <SDMMC_CmdSendCID+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801377c:	0492      	lsls	r2, r2, #18
 801377e:	d506      	bpl.n	801378e <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 8013780:	1c58      	adds	r0, r3, #1
 8013782:	d1f6      	bne.n	8013772 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8013784:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013788:	f85d 4b04 	ldr.w	r4, [sp], #4
 801378c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801378e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8013790:	075b      	lsls	r3, r3, #29
 8013792:	d409      	bmi.n	80137a8 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013794:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
 8013796:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801379a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801379e:	bf14      	ite	ne
 80137a0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80137a2:	4b06      	ldreq	r3, [pc, #24]	; (80137bc <SDMMC_CmdSendCID+0x78>)
 80137a4:	638b      	str	r3, [r1, #56]	; 0x38
}
 80137a6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80137a8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80137aa:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80137ac:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80137ae:	e7eb      	b.n	8013788 <SDMMC_CmdSendCID+0x44>
 80137b0:	20004728 	.word	0x20004728
 80137b4:	fffee0c0 	.word	0xfffee0c0
 80137b8:	10624dd3 	.word	0x10624dd3
 80137bc:	002000c5 	.word	0x002000c5

080137c0 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80137c0:	4a1b      	ldr	r2, [pc, #108]	; (8013830 <SDMMC_CmdSendCSD+0x70>)
{
 80137c2:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80137c4:	4b1b      	ldr	r3, [pc, #108]	; (8013834 <SDMMC_CmdSendCSD+0x74>)
 80137c6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80137c8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80137cc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80137d0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80137d4:	4818      	ldr	r0, [pc, #96]	; (8013838 <SDMMC_CmdSendCSD+0x78>)
 80137d6:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80137da:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80137dc:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80137de:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80137e2:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80137e4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80137e8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 80137ec:	1e53      	subs	r3, r2, #1
 80137ee:	b14a      	cbz	r2, 8013804 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 80137f0:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 80137f4:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80137f6:	f012 0f45 	tst.w	r2, #69	; 0x45
 80137fa:	d001      	beq.n	8013800 <SDMMC_CmdSendCSD+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80137fc:	0492      	lsls	r2, r2, #18
 80137fe:	d504      	bpl.n	801380a <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 8013800:	1c59      	adds	r1, r3, #1
 8013802:	d1f5      	bne.n	80137f0 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8013804:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013808:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801380a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 801380e:	075b      	lsls	r3, r3, #29
 8013810:	d409      	bmi.n	8013826 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013812:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8013816:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801381a:	bf14      	ite	ne
 801381c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801381e:	4b07      	ldreq	r3, [pc, #28]	; (801383c <SDMMC_CmdSendCSD+0x7c>)
 8013820:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8013824:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013826:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013828:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801382a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801382e:	4770      	bx	lr
 8013830:	20004728 	.word	0x20004728
 8013834:	10624dd3 	.word	0x10624dd3
 8013838:	fffee0c0 	.word	0xfffee0c0
 801383c:	002000c5 	.word	0x002000c5

08013840 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 8013840:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013842:	4a27      	ldr	r2, [pc, #156]	; (80138e0 <SDMMC_CmdSetRelAdd+0xa0>)
{
 8013844:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8013846:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013848:	4c26      	ldr	r4, [pc, #152]	; (80138e4 <SDMMC_CmdSetRelAdd+0xa4>)
 801384a:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801384c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801384e:	401c      	ands	r4, r3
 8013850:	f241 1303 	movw	r3, #4355	; 0x1103
 8013854:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013856:	4c24      	ldr	r4, [pc, #144]	; (80138e8 <SDMMC_CmdSetRelAdd+0xa8>)
 8013858:	fba4 4202 	umull	r4, r2, r4, r2
 801385c:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013860:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013862:	0a52      	lsrs	r2, r2, #9
 8013864:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
 8013868:	b14a      	cbz	r2, 801387e <SDMMC_CmdSetRelAdd+0x3e>
 801386a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 801386c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801386e:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013870:	f012 0f45 	tst.w	r2, #69	; 0x45
 8013874:	d001      	beq.n	801387a <SDMMC_CmdSetRelAdd+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013876:	0492      	lsls	r2, r2, #18
 8013878:	d507      	bpl.n	801388a <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
 801387a:	1c5c      	adds	r4, r3, #1
 801387c:	d1f6      	bne.n	801386c <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801387e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013882:	4618      	mov	r0, r3
 8013884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013888:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801388a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801388c:	075c      	lsls	r4, r3, #29
 801388e:	d41c      	bmi.n	80138ca <SDMMC_CmdSetRelAdd+0x8a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013890:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013892:	f013 0301 	ands.w	r3, r3, #1
 8013896:	d113      	bne.n	80138c0 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
 8013898:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801389a:	b2db      	uxtb	r3, r3
 801389c:	2b03      	cmp	r3, #3
 801389e:	d112      	bne.n	80138c6 <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80138a0:	4b12      	ldr	r3, [pc, #72]	; (80138ec <SDMMC_CmdSetRelAdd+0xac>)
 80138a2:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80138a4:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80138a6:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 80138aa:	d015      	beq.n	80138d8 <SDMMC_CmdSetRelAdd+0x98>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80138ac:	0451      	lsls	r1, r2, #17
 80138ae:	d410      	bmi.n	80138d2 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80138b0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80138b4:	bf14      	ite	ne
 80138b6:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 80138ba:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80138be:	e7e0      	b.n	8013882 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80138c0:	2201      	movs	r2, #1
 80138c2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80138c4:	e7dd      	b.n	8013882 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80138c6:	2301      	movs	r3, #1
 80138c8:	e7db      	b.n	8013882 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80138ca:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80138cc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80138ce:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80138d0:	e7d7      	b.n	8013882 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80138d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80138d6:	e7d4      	b.n	8013882 <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80138d8:	0c12      	lsrs	r2, r2, #16
 80138da:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 80138dc:	e7d1      	b.n	8013882 <SDMMC_CmdSetRelAdd+0x42>
 80138de:	bf00      	nop
 80138e0:	20004728 	.word	0x20004728
 80138e4:	fffee0c0 	.word	0xfffee0c0
 80138e8:	10624dd3 	.word	0x10624dd3
 80138ec:	002000c5 	.word	0x002000c5

080138f0 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80138f0:	4a4c      	ldr	r2, [pc, #304]	; (8013a24 <SDMMC_CmdSendStatus+0x134>)
 80138f2:	4b4d      	ldr	r3, [pc, #308]	; (8013a28 <SDMMC_CmdSendStatus+0x138>)
 80138f4:	6812      	ldr	r2, [r2, #0]
{
 80138f6:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80138f8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80138fc:	4c4b      	ldr	r4, [pc, #300]	; (8013a2c <SDMMC_CmdSendStatus+0x13c>)
  SDMMCx->ARG = Command->Argument;
 80138fe:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013900:	f241 130d 	movw	r3, #4365	; 0x110d
 8013904:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013906:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013908:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801390a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801390e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013910:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013914:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8013916:	b14a      	cbz	r2, 801392c <SDMMC_CmdSendStatus+0x3c>
 8013918:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801391a:	4945      	ldr	r1, [pc, #276]	; (8013a30 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
 801391c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801391e:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013920:	420a      	tst	r2, r1
 8013922:	d001      	beq.n	8013928 <SDMMC_CmdSendStatus+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013924:	0492      	lsls	r2, r2, #18
 8013926:	d507      	bpl.n	8013938 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
 8013928:	1c5c      	adds	r4, r3, #1
 801392a:	d1f7      	bne.n	801391c <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801392c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013930:	4618      	mov	r0, r3
 8013932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013936:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013938:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801393a:	075c      	lsls	r4, r3, #29
 801393c:	d43d      	bmi.n	80139ba <SDMMC_CmdSendStatus+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801393e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013940:	f013 0301 	ands.w	r3, r3, #1
 8013944:	d134      	bne.n	80139b0 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013946:	4b3b      	ldr	r3, [pc, #236]	; (8013a34 <SDMMC_CmdSendStatus+0x144>)
 8013948:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801394a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801394c:	b2db      	uxtb	r3, r3
 801394e:	2b0d      	cmp	r3, #13
 8013950:	d131      	bne.n	80139b6 <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
 8013952:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013954:	4b38      	ldr	r3, [pc, #224]	; (8013a38 <SDMMC_CmdSendStatus+0x148>)
 8013956:	4013      	ands	r3, r2
 8013958:	2b00      	cmp	r3, #0
 801395a:	d0e9      	beq.n	8013930 <SDMMC_CmdSendStatus+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801395c:	2a00      	cmp	r2, #0
 801395e:	db30      	blt.n	80139c2 <SDMMC_CmdSendStatus+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013960:	0051      	lsls	r1, r2, #1
 8013962:	d431      	bmi.n	80139c8 <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013964:	0094      	lsls	r4, r2, #2
 8013966:	d431      	bmi.n	80139cc <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013968:	00d0      	lsls	r0, r2, #3
 801396a:	d431      	bmi.n	80139d0 <SDMMC_CmdSendStatus+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801396c:	0111      	lsls	r1, r2, #4
 801396e:	d432      	bmi.n	80139d6 <SDMMC_CmdSendStatus+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013970:	0154      	lsls	r4, r2, #5
 8013972:	d433      	bmi.n	80139dc <SDMMC_CmdSendStatus+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013974:	01d0      	lsls	r0, r2, #7
 8013976:	d434      	bmi.n	80139e2 <SDMMC_CmdSendStatus+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013978:	0211      	lsls	r1, r2, #8
 801397a:	d435      	bmi.n	80139e8 <SDMMC_CmdSendStatus+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801397c:	0254      	lsls	r4, r2, #9
 801397e:	d436      	bmi.n	80139ee <SDMMC_CmdSendStatus+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013980:	0290      	lsls	r0, r2, #10
 8013982:	d440      	bmi.n	8013a06 <SDMMC_CmdSendStatus+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013984:	02d1      	lsls	r1, r2, #11
 8013986:	d43b      	bmi.n	8013a00 <SDMMC_CmdSendStatus+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013988:	0354      	lsls	r4, r2, #13
 801398a:	d436      	bmi.n	80139fa <SDMMC_CmdSendStatus+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801398c:	0390      	lsls	r0, r2, #14
 801398e:	d431      	bmi.n	80139f4 <SDMMC_CmdSendStatus+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013990:	03d1      	lsls	r1, r2, #15
 8013992:	d444      	bmi.n	8013a1e <SDMMC_CmdSendStatus+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013994:	0414      	lsls	r4, r2, #16
 8013996:	d43f      	bmi.n	8013a18 <SDMMC_CmdSendStatus+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013998:	0450      	lsls	r0, r2, #17
 801399a:	d43a      	bmi.n	8013a12 <SDMMC_CmdSendStatus+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801399c:	0491      	lsls	r1, r2, #18
 801399e:	d435      	bmi.n	8013a0c <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80139a0:	f012 0f08 	tst.w	r2, #8
 80139a4:	bf14      	ite	ne
 80139a6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80139aa:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80139ae:	e7bf      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80139b0:	2201      	movs	r2, #1
 80139b2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80139b4:	e7bc      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80139b6:	2301      	movs	r3, #1
 80139b8:	e7ba      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80139ba:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80139bc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80139be:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80139c0:	e7b6      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80139c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80139c6:	e7b3      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80139c8:	2340      	movs	r3, #64	; 0x40
 80139ca:	e7b1      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80139cc:	2380      	movs	r3, #128	; 0x80
 80139ce:	e7af      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80139d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139d4:	e7ac      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80139d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80139da:	e7a9      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80139dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80139e0:	e7a6      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80139e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80139e6:	e7a3      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80139e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80139ec:	e7a0      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80139ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80139f2:	e79d      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80139f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80139f8:	e79a      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80139fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80139fe:	e797      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 8013a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013a04:	e794      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013a06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013a0a:	e791      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8013a0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013a10:	e78e      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013a12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013a16:	e78b      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013a18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013a1c:	e788      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013a1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013a22:	e785      	b.n	8013930 <SDMMC_CmdSendStatus+0x40>
 8013a24:	20004728 	.word	0x20004728
 8013a28:	10624dd3 	.word	0x10624dd3
 8013a2c:	fffee0c0 	.word	0xfffee0c0
 8013a30:	00200045 	.word	0x00200045
 8013a34:	002000c5 	.word	0x002000c5
 8013a38:	fdffe008 	.word	0xfdffe008

08013a3c <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a3c:	4a4d      	ldr	r2, [pc, #308]	; (8013b74 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
 8013a3e:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a40:	494d      	ldr	r1, [pc, #308]	; (8013b78 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a42:	6812      	ldr	r2, [r2, #0]
{
 8013a44:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a46:	4c4d      	ldr	r4, [pc, #308]	; (8013b7c <SDMMC_CmdStatusRegister+0x140>)
  SDMMCx->ARG = Command->Argument;
 8013a48:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a4a:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a4e:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a52:	68c4      	ldr	r4, [r0, #12]
 8013a54:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a56:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a58:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a5a:	f241 3188 	movw	r1, #5000	; 0x1388
 8013a5e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a62:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8013a64:	b14a      	cbz	r2, 8013a7a <SDMMC_CmdStatusRegister+0x3e>
 8013a66:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013a68:	4945      	ldr	r1, [pc, #276]	; (8013b80 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 8013a6a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013a6c:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013a6e:	420a      	tst	r2, r1
 8013a70:	d001      	beq.n	8013a76 <SDMMC_CmdStatusRegister+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013a72:	0492      	lsls	r2, r2, #18
 8013a74:	d507      	bpl.n	8013a86 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 8013a76:	1c5c      	adds	r4, r3, #1
 8013a78:	d1f7      	bne.n	8013a6a <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8013a7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a84:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013a86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013a88:	075c      	lsls	r4, r3, #29
 8013a8a:	d43d      	bmi.n	8013b08 <SDMMC_CmdStatusRegister+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013a8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013a8e:	f013 0301 	ands.w	r3, r3, #1
 8013a92:	d134      	bne.n	8013afe <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013a94:	4b3b      	ldr	r3, [pc, #236]	; (8013b84 <SDMMC_CmdStatusRegister+0x148>)
 8013a96:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013a98:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	2b0d      	cmp	r3, #13
 8013a9e:	d131      	bne.n	8013b04 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 8013aa0:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013aa2:	4b39      	ldr	r3, [pc, #228]	; (8013b88 <SDMMC_CmdStatusRegister+0x14c>)
 8013aa4:	4013      	ands	r3, r2
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d0e9      	beq.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013aaa:	2a00      	cmp	r2, #0
 8013aac:	db30      	blt.n	8013b10 <SDMMC_CmdStatusRegister+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013aae:	0051      	lsls	r1, r2, #1
 8013ab0:	d431      	bmi.n	8013b16 <SDMMC_CmdStatusRegister+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013ab2:	0094      	lsls	r4, r2, #2
 8013ab4:	d431      	bmi.n	8013b1a <SDMMC_CmdStatusRegister+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013ab6:	00d0      	lsls	r0, r2, #3
 8013ab8:	d431      	bmi.n	8013b1e <SDMMC_CmdStatusRegister+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013aba:	0111      	lsls	r1, r2, #4
 8013abc:	d432      	bmi.n	8013b24 <SDMMC_CmdStatusRegister+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013abe:	0154      	lsls	r4, r2, #5
 8013ac0:	d433      	bmi.n	8013b2a <SDMMC_CmdStatusRegister+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013ac2:	01d0      	lsls	r0, r2, #7
 8013ac4:	d434      	bmi.n	8013b30 <SDMMC_CmdStatusRegister+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013ac6:	0211      	lsls	r1, r2, #8
 8013ac8:	d435      	bmi.n	8013b36 <SDMMC_CmdStatusRegister+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013aca:	0254      	lsls	r4, r2, #9
 8013acc:	d436      	bmi.n	8013b3c <SDMMC_CmdStatusRegister+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013ace:	0290      	lsls	r0, r2, #10
 8013ad0:	d440      	bmi.n	8013b54 <SDMMC_CmdStatusRegister+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013ad2:	02d1      	lsls	r1, r2, #11
 8013ad4:	d43b      	bmi.n	8013b4e <SDMMC_CmdStatusRegister+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013ad6:	0354      	lsls	r4, r2, #13
 8013ad8:	d436      	bmi.n	8013b48 <SDMMC_CmdStatusRegister+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013ada:	0390      	lsls	r0, r2, #14
 8013adc:	d431      	bmi.n	8013b42 <SDMMC_CmdStatusRegister+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013ade:	03d1      	lsls	r1, r2, #15
 8013ae0:	d444      	bmi.n	8013b6c <SDMMC_CmdStatusRegister+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013ae2:	0414      	lsls	r4, r2, #16
 8013ae4:	d43f      	bmi.n	8013b66 <SDMMC_CmdStatusRegister+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013ae6:	0450      	lsls	r0, r2, #17
 8013ae8:	d43a      	bmi.n	8013b60 <SDMMC_CmdStatusRegister+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013aea:	0491      	lsls	r1, r2, #18
 8013aec:	d435      	bmi.n	8013b5a <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013aee:	f012 0f08 	tst.w	r2, #8
 8013af2:	bf14      	ite	ne
 8013af4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013af8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013afc:	e7bf      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013afe:	2201      	movs	r2, #1
 8013b00:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b02:	e7bc      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b04:	2301      	movs	r3, #1
 8013b06:	e7ba      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013b08:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013b0a:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013b0c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013b0e:	e7b6      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013b14:	e7b3      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013b16:	2340      	movs	r3, #64	; 0x40
 8013b18:	e7b1      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013b1a:	2380      	movs	r3, #128	; 0x80
 8013b1c:	e7af      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013b22:	e7ac      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b28:	e7a9      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b2e:	e7a6      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013b30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013b34:	e7a3      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013b3a:	e7a0      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b40:	e79d      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013b42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013b46:	e79a      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013b4c:	e797      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 8013b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b52:	e794      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013b54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013b58:	e791      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8013b5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013b5e:	e78e      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013b60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013b64:	e78b      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013b66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013b6a:	e788      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013b6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013b70:	e785      	b.n	8013a7e <SDMMC_CmdStatusRegister+0x42>
 8013b72:	bf00      	nop
 8013b74:	20004728 	.word	0x20004728
 8013b78:	fffee0c0 	.word	0xfffee0c0
 8013b7c:	10624dd3 	.word	0x10624dd3
 8013b80:	00200045 	.word	0x00200045
 8013b84:	002000c5 	.word	0x002000c5
 8013b88:	fdffe008 	.word	0xfdffe008

08013b8c <SDMMC_CmdSwitch>:
 8013b8c:	4a4c      	ldr	r2, [pc, #304]	; (8013cc0 <SDMMC_CmdSwitch+0x134>)
 8013b8e:	4b4d      	ldr	r3, [pc, #308]	; (8013cc4 <SDMMC_CmdSwitch+0x138>)
 8013b90:	6812      	ldr	r2, [r2, #0]
 8013b92:	b410      	push	{r4}
 8013b94:	fba3 3202 	umull	r3, r2, r3, r2
 8013b98:	4c4b      	ldr	r4, [pc, #300]	; (8013cc8 <SDMMC_CmdSwitch+0x13c>)
 8013b9a:	6081      	str	r1, [r0, #8]
 8013b9c:	f241 1306 	movw	r3, #4358	; 0x1106
 8013ba0:	68c1      	ldr	r1, [r0, #12]
 8013ba2:	0a52      	lsrs	r2, r2, #9
 8013ba4:	400c      	ands	r4, r1
 8013ba6:	f241 3188 	movw	r1, #5000	; 0x1388
 8013baa:	4323      	orrs	r3, r4
 8013bac:	fb01 f202 	mul.w	r2, r1, r2
 8013bb0:	60c3      	str	r3, [r0, #12]
 8013bb2:	b14a      	cbz	r2, 8013bc8 <SDMMC_CmdSwitch+0x3c>
 8013bb4:	1e53      	subs	r3, r2, #1
 8013bb6:	4945      	ldr	r1, [pc, #276]	; (8013ccc <SDMMC_CmdSwitch+0x140>)
 8013bb8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8013bba:	3b01      	subs	r3, #1
 8013bbc:	420a      	tst	r2, r1
 8013bbe:	d001      	beq.n	8013bc4 <SDMMC_CmdSwitch+0x38>
 8013bc0:	0492      	lsls	r2, r2, #18
 8013bc2:	d507      	bpl.n	8013bd4 <SDMMC_CmdSwitch+0x48>
 8013bc4:	1c5c      	adds	r4, r3, #1
 8013bc6:	d1f7      	bne.n	8013bb8 <SDMMC_CmdSwitch+0x2c>
 8013bc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bd2:	4770      	bx	lr
 8013bd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013bd6:	075c      	lsls	r4, r3, #29
 8013bd8:	d43d      	bmi.n	8013c56 <SDMMC_CmdSwitch+0xca>
 8013bda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013bdc:	f013 0301 	ands.w	r3, r3, #1
 8013be0:	d134      	bne.n	8013c4c <SDMMC_CmdSwitch+0xc0>
 8013be2:	4b3b      	ldr	r3, [pc, #236]	; (8013cd0 <SDMMC_CmdSwitch+0x144>)
 8013be4:	6383      	str	r3, [r0, #56]	; 0x38
 8013be6:	6903      	ldr	r3, [r0, #16]
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	2b06      	cmp	r3, #6
 8013bec:	d131      	bne.n	8013c52 <SDMMC_CmdSwitch+0xc6>
 8013bee:	6942      	ldr	r2, [r0, #20]
 8013bf0:	4b38      	ldr	r3, [pc, #224]	; (8013cd4 <SDMMC_CmdSwitch+0x148>)
 8013bf2:	4013      	ands	r3, r2
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d0e9      	beq.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013bf8:	2a00      	cmp	r2, #0
 8013bfa:	db30      	blt.n	8013c5e <SDMMC_CmdSwitch+0xd2>
 8013bfc:	0051      	lsls	r1, r2, #1
 8013bfe:	d431      	bmi.n	8013c64 <SDMMC_CmdSwitch+0xd8>
 8013c00:	0094      	lsls	r4, r2, #2
 8013c02:	d431      	bmi.n	8013c68 <SDMMC_CmdSwitch+0xdc>
 8013c04:	00d0      	lsls	r0, r2, #3
 8013c06:	d431      	bmi.n	8013c6c <SDMMC_CmdSwitch+0xe0>
 8013c08:	0111      	lsls	r1, r2, #4
 8013c0a:	d432      	bmi.n	8013c72 <SDMMC_CmdSwitch+0xe6>
 8013c0c:	0154      	lsls	r4, r2, #5
 8013c0e:	d433      	bmi.n	8013c78 <SDMMC_CmdSwitch+0xec>
 8013c10:	01d0      	lsls	r0, r2, #7
 8013c12:	d434      	bmi.n	8013c7e <SDMMC_CmdSwitch+0xf2>
 8013c14:	0211      	lsls	r1, r2, #8
 8013c16:	d435      	bmi.n	8013c84 <SDMMC_CmdSwitch+0xf8>
 8013c18:	0254      	lsls	r4, r2, #9
 8013c1a:	d436      	bmi.n	8013c8a <SDMMC_CmdSwitch+0xfe>
 8013c1c:	0290      	lsls	r0, r2, #10
 8013c1e:	d440      	bmi.n	8013ca2 <SDMMC_CmdSwitch+0x116>
 8013c20:	02d1      	lsls	r1, r2, #11
 8013c22:	d43b      	bmi.n	8013c9c <SDMMC_CmdSwitch+0x110>
 8013c24:	0354      	lsls	r4, r2, #13
 8013c26:	d436      	bmi.n	8013c96 <SDMMC_CmdSwitch+0x10a>
 8013c28:	0390      	lsls	r0, r2, #14
 8013c2a:	d431      	bmi.n	8013c90 <SDMMC_CmdSwitch+0x104>
 8013c2c:	03d1      	lsls	r1, r2, #15
 8013c2e:	d444      	bmi.n	8013cba <SDMMC_CmdSwitch+0x12e>
 8013c30:	0414      	lsls	r4, r2, #16
 8013c32:	d43f      	bmi.n	8013cb4 <SDMMC_CmdSwitch+0x128>
 8013c34:	0450      	lsls	r0, r2, #17
 8013c36:	d43a      	bmi.n	8013cae <SDMMC_CmdSwitch+0x122>
 8013c38:	0491      	lsls	r1, r2, #18
 8013c3a:	d435      	bmi.n	8013ca8 <SDMMC_CmdSwitch+0x11c>
 8013c3c:	f012 0f08 	tst.w	r2, #8
 8013c40:	bf14      	ite	ne
 8013c42:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013c46:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013c4a:	e7bf      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	6382      	str	r2, [r0, #56]	; 0x38
 8013c50:	e7bc      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c52:	2301      	movs	r3, #1
 8013c54:	e7ba      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c56:	2204      	movs	r2, #4
 8013c58:	4613      	mov	r3, r2
 8013c5a:	6382      	str	r2, [r0, #56]	; 0x38
 8013c5c:	e7b6      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013c62:	e7b3      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c64:	2340      	movs	r3, #64	; 0x40
 8013c66:	e7b1      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c68:	2380      	movs	r3, #128	; 0x80
 8013c6a:	e7af      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013c70:	e7ac      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013c76:	e7a9      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c7c:	e7a6      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013c82:	e7a3      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013c88:	e7a0      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013c8e:	e79d      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013c94:	e79a      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013c9a:	e797      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013ca0:	e794      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013ca2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013ca6:	e791      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013ca8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013cac:	e78e      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013cae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013cb2:	e78b      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013cb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013cb8:	e788      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013cba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013cbe:	e785      	b.n	8013bcc <SDMMC_CmdSwitch+0x40>
 8013cc0:	20004728 	.word	0x20004728
 8013cc4:	10624dd3 	.word	0x10624dd3
 8013cc8:	fffee0c0 	.word	0xfffee0c0
 8013ccc:	00200045 	.word	0x00200045
 8013cd0:	002000c5 	.word	0x002000c5
 8013cd4:	fdffe008 	.word	0xfdffe008

08013cd8 <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013cd8:	4a4d      	ldr	r2, [pc, #308]	; (8013e10 <SDMMC_CmdVoltageSwitch+0x138>)
  SDMMCx->ARG = Command->Argument;
 8013cda:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013cdc:	494d      	ldr	r1, [pc, #308]	; (8013e14 <SDMMC_CmdVoltageSwitch+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013cde:	6812      	ldr	r2, [r2, #0]
{
 8013ce0:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013ce2:	4c4d      	ldr	r4, [pc, #308]	; (8013e18 <SDMMC_CmdVoltageSwitch+0x140>)
  SDMMCx->ARG = Command->Argument;
 8013ce4:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013ce6:	f241 130b 	movw	r3, #4363	; 0x110b
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013cea:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013cee:	68c4      	ldr	r4, [r0, #12]
 8013cf0:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013cf2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013cf4:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013cf6:	f241 3188 	movw	r1, #5000	; 0x1388
 8013cfa:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013cfe:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8013d00:	b14a      	cbz	r2, 8013d16 <SDMMC_CmdVoltageSwitch+0x3e>
 8013d02:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013d04:	4945      	ldr	r1, [pc, #276]	; (8013e1c <SDMMC_CmdVoltageSwitch+0x144>)
    sta_reg = SDMMCx->STA;
 8013d06:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013d08:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013d0a:	420a      	tst	r2, r1
 8013d0c:	d001      	beq.n	8013d12 <SDMMC_CmdVoltageSwitch+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013d0e:	0492      	lsls	r2, r2, #18
 8013d10:	d507      	bpl.n	8013d22 <SDMMC_CmdVoltageSwitch+0x4a>
    if (count-- == 0U)
 8013d12:	1c5c      	adds	r4, r3, #1
 8013d14:	d1f7      	bne.n	8013d06 <SDMMC_CmdVoltageSwitch+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8013d16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d20:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013d22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013d24:	075c      	lsls	r4, r3, #29
 8013d26:	d43d      	bmi.n	8013da4 <SDMMC_CmdVoltageSwitch+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013d28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013d2a:	f013 0301 	ands.w	r3, r3, #1
 8013d2e:	d134      	bne.n	8013d9a <SDMMC_CmdVoltageSwitch+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013d30:	4b3b      	ldr	r3, [pc, #236]	; (8013e20 <SDMMC_CmdVoltageSwitch+0x148>)
 8013d32:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013d34:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	2b0b      	cmp	r3, #11
 8013d3a:	d131      	bne.n	8013da0 <SDMMC_CmdVoltageSwitch+0xc8>
  return (*(__IO uint32_t *) tmp);
 8013d3c:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013d3e:	4b39      	ldr	r3, [pc, #228]	; (8013e24 <SDMMC_CmdVoltageSwitch+0x14c>)
 8013d40:	4013      	ands	r3, r2
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d0e9      	beq.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013d46:	2a00      	cmp	r2, #0
 8013d48:	db30      	blt.n	8013dac <SDMMC_CmdVoltageSwitch+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013d4a:	0051      	lsls	r1, r2, #1
 8013d4c:	d431      	bmi.n	8013db2 <SDMMC_CmdVoltageSwitch+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013d4e:	0094      	lsls	r4, r2, #2
 8013d50:	d431      	bmi.n	8013db6 <SDMMC_CmdVoltageSwitch+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013d52:	00d0      	lsls	r0, r2, #3
 8013d54:	d431      	bmi.n	8013dba <SDMMC_CmdVoltageSwitch+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013d56:	0111      	lsls	r1, r2, #4
 8013d58:	d432      	bmi.n	8013dc0 <SDMMC_CmdVoltageSwitch+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013d5a:	0154      	lsls	r4, r2, #5
 8013d5c:	d433      	bmi.n	8013dc6 <SDMMC_CmdVoltageSwitch+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013d5e:	01d0      	lsls	r0, r2, #7
 8013d60:	d434      	bmi.n	8013dcc <SDMMC_CmdVoltageSwitch+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013d62:	0211      	lsls	r1, r2, #8
 8013d64:	d435      	bmi.n	8013dd2 <SDMMC_CmdVoltageSwitch+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013d66:	0254      	lsls	r4, r2, #9
 8013d68:	d436      	bmi.n	8013dd8 <SDMMC_CmdVoltageSwitch+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013d6a:	0290      	lsls	r0, r2, #10
 8013d6c:	d440      	bmi.n	8013df0 <SDMMC_CmdVoltageSwitch+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013d6e:	02d1      	lsls	r1, r2, #11
 8013d70:	d43b      	bmi.n	8013dea <SDMMC_CmdVoltageSwitch+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013d72:	0354      	lsls	r4, r2, #13
 8013d74:	d436      	bmi.n	8013de4 <SDMMC_CmdVoltageSwitch+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013d76:	0390      	lsls	r0, r2, #14
 8013d78:	d431      	bmi.n	8013dde <SDMMC_CmdVoltageSwitch+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013d7a:	03d1      	lsls	r1, r2, #15
 8013d7c:	d444      	bmi.n	8013e08 <SDMMC_CmdVoltageSwitch+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013d7e:	0414      	lsls	r4, r2, #16
 8013d80:	d43f      	bmi.n	8013e02 <SDMMC_CmdVoltageSwitch+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013d82:	0450      	lsls	r0, r2, #17
 8013d84:	d43a      	bmi.n	8013dfc <SDMMC_CmdVoltageSwitch+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013d86:	0491      	lsls	r1, r2, #18
 8013d88:	d435      	bmi.n	8013df6 <SDMMC_CmdVoltageSwitch+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013d8a:	f012 0f08 	tst.w	r2, #8
 8013d8e:	bf14      	ite	ne
 8013d90:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013d94:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013d98:	e7bf      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013d9e:	e7bc      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013da0:	2301      	movs	r3, #1
 8013da2:	e7ba      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013da4:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013da6:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013da8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013daa:	e7b6      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013db0:	e7b3      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013db2:	2340      	movs	r3, #64	; 0x40
 8013db4:	e7b1      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013db6:	2380      	movs	r3, #128	; 0x80
 8013db8:	e7af      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013dbe:	e7ac      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013dc4:	e7a9      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013dca:	e7a6      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013dd0:	e7a3      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013dd6:	e7a0      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013ddc:	e79d      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013dde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013de2:	e79a      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013de8:	e797      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CC_ERR;
 8013dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013dee:	e794      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013df4:	e791      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8013df6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013dfa:	e78e      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013dfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013e00:	e78b      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013e02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013e06:	e788      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013e08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013e0c:	e785      	b.n	8013d1a <SDMMC_CmdVoltageSwitch+0x42>
 8013e0e:	bf00      	nop
 8013e10:	20004728 	.word	0x20004728
 8013e14:	fffee0c0 	.word	0xfffee0c0
 8013e18:	10624dd3 	.word	0x10624dd3
 8013e1c:	00200045 	.word	0x00200045
 8013e20:	002000c5 	.word	0x002000c5
 8013e24:	fdffe008 	.word	0xfdffe008

08013e28 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8013e28:	287f      	cmp	r0, #127	; 0x7f
 8013e2a:	d912      	bls.n	8013e52 <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8013e2c:	b971      	cbnz	r1, 8013e4c <ff_convert+0x24>
 8013e2e:	4b0c      	ldr	r3, [pc, #48]	; (8013e60 <ff_convert+0x38>)
 8013e30:	e001      	b.n	8013e36 <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8013e32:	2980      	cmp	r1, #128	; 0x80
 8013e34:	d00c      	beq.n	8013e50 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
 8013e36:	f833 2b02 	ldrh.w	r2, [r3], #2
 8013e3a:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 8013e3e:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 8013e40:	4282      	cmp	r2, r0
 8013e42:	d1f6      	bne.n	8013e32 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 8013e44:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 8013e48:	b280      	uxth	r0, r0
 8013e4a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013e4c:	28ff      	cmp	r0, #255	; 0xff
 8013e4e:	d901      	bls.n	8013e54 <ff_convert+0x2c>
 8013e50:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8013e52:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013e54:	4b02      	ldr	r3, [pc, #8]	; (8013e60 <ff_convert+0x38>)
 8013e56:	3880      	subs	r0, #128	; 0x80
 8013e58:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop
 8013e60:	080604a0 	.word	0x080604a0

08013e64 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8013e64:	4b22      	ldr	r3, [pc, #136]	; (8013ef0 <ff_wtoupper+0x8c>)
 8013e66:	4a23      	ldr	r2, [pc, #140]	; (8013ef4 <ff_wtoupper+0x90>)
 8013e68:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8013e6c:	bf28      	it	cs
 8013e6e:	4613      	movcs	r3, r2
{
 8013e70:	b510      	push	{r4, lr}
 8013e72:	3304      	adds	r3, #4
 8013e74:	e001      	b.n	8013e7a <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8013e76:	3304      	adds	r3, #4
 8013e78:	b1da      	cbz	r2, 8013eb2 <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
 8013e7a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 8013e7e:	461c      	mov	r4, r3
 8013e80:	b1b1      	cbz	r1, 8013eb0 <ff_wtoupper+0x4c>
 8013e82:	4288      	cmp	r0, r1
 8013e84:	d314      	bcc.n	8013eb0 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8013e86:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8013e8a:	fa5f fc82 	uxtb.w	ip, r2
 8013e8e:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8013e90:	eb0c 0e01 	add.w	lr, ip, r1
 8013e94:	4570      	cmp	r0, lr
 8013e96:	daee      	bge.n	8013e76 <ff_wtoupper+0x12>
			switch (cmd) {
 8013e98:	2a08      	cmp	r2, #8
 8013e9a:	d809      	bhi.n	8013eb0 <ff_wtoupper+0x4c>
 8013e9c:	e8df f002 	tbb	[pc, r2]
 8013ea0:	19161005 	.word	0x19161005
 8013ea4:	25221f1c 	.word	0x25221f1c
 8013ea8:	0c          	.byte	0x0c
 8013ea9:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013eaa:	1a41      	subs	r1, r0, r1
 8013eac:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8013eb0:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
 8013eb2:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 8013eb6:	e7dc      	b.n	8013e72 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8013eb8:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8013ebc:	b280      	uxth	r0, r0
}
 8013ebe:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8013ec0:	1a43      	subs	r3, r0, r1
 8013ec2:	f003 0301 	and.w	r3, r3, #1
 8013ec6:	1ac0      	subs	r0, r0, r3
 8013ec8:	b280      	uxth	r0, r0
}
 8013eca:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8013ecc:	3810      	subs	r0, #16
 8013ece:	b280      	uxth	r0, r0
}
 8013ed0:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 8013ed2:	3820      	subs	r0, #32
 8013ed4:	b280      	uxth	r0, r0
}
 8013ed6:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 8013ed8:	3830      	subs	r0, #48	; 0x30
 8013eda:	b280      	uxth	r0, r0
}
 8013edc:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 8013ede:	381a      	subs	r0, #26
 8013ee0:	b280      	uxth	r0, r0
}
 8013ee2:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 8013ee4:	3008      	adds	r0, #8
 8013ee6:	b280      	uxth	r0, r0
}
 8013ee8:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 8013eea:	3850      	subs	r0, #80	; 0x50
 8013eec:	b280      	uxth	r0, r0
}
 8013eee:	bd10      	pop	{r4, pc}
 8013ef0:	080605a0 	.word	0x080605a0
 8013ef4:	08060794 	.word	0x08060794

08013ef8 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013ef8:	4b03      	ldr	r3, [pc, #12]	; (8013f08 <disk_status+0x10>)
 8013efa:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8013efe:	4403      	add	r3, r0
 8013f00:	6852      	ldr	r2, [r2, #4]
 8013f02:	7b18      	ldrb	r0, [r3, #12]
 8013f04:	6853      	ldr	r3, [r2, #4]
 8013f06:	4718      	bx	r3
 8013f08:	20007218 	.word	0x20007218

08013f0c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8013f0c:	4b07      	ldr	r3, [pc, #28]	; (8013f2c <disk_initialize+0x20>)
 8013f0e:	5c1a      	ldrb	r2, [r3, r0]
 8013f10:	b952      	cbnz	r2, 8013f28 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013f12:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8013f16:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 8013f18:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013f1c:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 8013f1e:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013f22:	7b08      	ldrb	r0, [r1, #12]
 8013f24:	6813      	ldr	r3, [r2, #0]
 8013f26:	4718      	bx	r3
  }
  return stat;
}
 8013f28:	2000      	movs	r0, #0
 8013f2a:	4770      	bx	lr
 8013f2c:	20007218 	.word	0x20007218

08013f30 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013f30:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013f32:	4c05      	ldr	r4, [pc, #20]	; (8013f48 <disk_read+0x18>)
 8013f34:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8013f38:	4404      	add	r4, r0
 8013f3a:	686d      	ldr	r5, [r5, #4]
 8013f3c:	7b20      	ldrb	r0, [r4, #12]
 8013f3e:	68ac      	ldr	r4, [r5, #8]
 8013f40:	46a4      	mov	ip, r4
  return res;
}
 8013f42:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013f44:	4760      	bx	ip
 8013f46:	bf00      	nop
 8013f48:	20007218 	.word	0x20007218

08013f4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013f4c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013f4e:	4c05      	ldr	r4, [pc, #20]	; (8013f64 <disk_write+0x18>)
 8013f50:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8013f54:	4404      	add	r4, r0
 8013f56:	686d      	ldr	r5, [r5, #4]
 8013f58:	7b20      	ldrb	r0, [r4, #12]
 8013f5a:	68ec      	ldr	r4, [r5, #12]
 8013f5c:	46a4      	mov	ip, r4
  return res;
}
 8013f5e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013f60:	4760      	bx	ip
 8013f62:	bf00      	nop
 8013f64:	20007218 	.word	0x20007218

08013f68 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013f68:	4b04      	ldr	r3, [pc, #16]	; (8013f7c <disk_ioctl+0x14>)
 8013f6a:	eb03 0c00 	add.w	ip, r3, r0
 8013f6e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	f89c 000c 	ldrb.w	r0, [ip, #12]
 8013f78:	691b      	ldr	r3, [r3, #16]
 8013f7a:	4718      	bx	r3
 8013f7c:	20007218 	.word	0x20007218

08013f80 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8013f80:	2000      	movs	r0, #0
 8013f82:	4770      	bx	lr

08013f84 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8013f84:	4a36      	ldr	r2, [pc, #216]	; (8014060 <inc_lock+0xdc>)
{
 8013f86:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8013f88:	6813      	ldr	r3, [r2, #0]
{
 8013f8a:	468e      	mov	lr, r1
		if (Files[i].fs == dp->obj.fs &&
 8013f8c:	6801      	ldr	r1, [r0, #0]
 8013f8e:	4299      	cmp	r1, r3
 8013f90:	d029      	beq.n	8013fe6 <inc_lock+0x62>
 8013f92:	6914      	ldr	r4, [r2, #16]
 8013f94:	42a1      	cmp	r1, r4
 8013f96:	d030      	beq.n	8013ffa <inc_lock+0x76>
 8013f98:	6a15      	ldr	r5, [r2, #32]
 8013f9a:	42a9      	cmp	r1, r5
 8013f9c:	d037      	beq.n	801400e <inc_lock+0x8a>
 8013f9e:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8013fa2:	458c      	cmp	ip, r1
 8013fa4:	d00a      	beq.n	8013fbc <inc_lock+0x38>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d03c      	beq.n	8014024 <inc_lock+0xa0>
 8013faa:	2c00      	cmp	r4, #0
 8013fac:	d039      	beq.n	8014022 <inc_lock+0x9e>
 8013fae:	2d00      	cmp	r5, #0
 8013fb0:	d052      	beq.n	8014058 <inc_lock+0xd4>
 8013fb2:	f1bc 0f00 	cmp.w	ip, #0
 8013fb6:	d051      	beq.n	801405c <inc_lock+0xd8>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013fb8:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 8013fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (Files[i].fs == dp->obj.fs &&
 8013fbc:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8013fbe:	6887      	ldr	r7, [r0, #8]
 8013fc0:	42be      	cmp	r6, r7
 8013fc2:	d1f0      	bne.n	8013fa6 <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
 8013fc4:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8013fc6:	6947      	ldr	r7, [r0, #20]
 8013fc8:	42be      	cmp	r6, r7
 8013fca:	d1ec      	bne.n	8013fa6 <inc_lock+0x22>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013fcc:	2303      	movs	r3, #3
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013fce:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8013fd2:	0118      	lsls	r0, r3, #4
 8013fd4:	f1be 0f00 	cmp.w	lr, #0
 8013fd8:	d03a      	beq.n	8014050 <inc_lock+0xcc>
 8013fda:	8989      	ldrh	r1, [r1, #12]
 8013fdc:	2900      	cmp	r1, #0
 8013fde:	d1eb      	bne.n	8013fb8 <inc_lock+0x34>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013fe0:	f44f 7480 	mov.w	r4, #256	; 0x100
 8013fe4:	e030      	b.n	8014048 <inc_lock+0xc4>
		if (Files[i].fs == dp->obj.fs &&
 8013fe6:	6855      	ldr	r5, [r2, #4]
 8013fe8:	6884      	ldr	r4, [r0, #8]
 8013fea:	42a5      	cmp	r5, r4
 8013fec:	d1d1      	bne.n	8013f92 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 8013fee:	6895      	ldr	r5, [r2, #8]
 8013ff0:	6944      	ldr	r4, [r0, #20]
 8013ff2:	42a5      	cmp	r5, r4
 8013ff4:	d1cd      	bne.n	8013f92 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	e7e9      	b.n	8013fce <inc_lock+0x4a>
		if (Files[i].fs == dp->obj.fs &&
 8013ffa:	6957      	ldr	r7, [r2, #20]
 8013ffc:	6885      	ldr	r5, [r0, #8]
 8013ffe:	42af      	cmp	r7, r5
 8014000:	d1ca      	bne.n	8013f98 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 8014002:	6997      	ldr	r7, [r2, #24]
 8014004:	6945      	ldr	r5, [r0, #20]
 8014006:	42af      	cmp	r7, r5
 8014008:	d1c6      	bne.n	8013f98 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801400a:	2301      	movs	r3, #1
 801400c:	e7df      	b.n	8013fce <inc_lock+0x4a>
		if (Files[i].fs == dp->obj.fs &&
 801400e:	6a57      	ldr	r7, [r2, #36]	; 0x24
 8014010:	6886      	ldr	r6, [r0, #8]
 8014012:	42b7      	cmp	r7, r6
 8014014:	d1c3      	bne.n	8013f9e <inc_lock+0x1a>
			Files[i].clu == dp->obj.sclust &&
 8014016:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8014018:	6947      	ldr	r7, [r0, #20]
 801401a:	42be      	cmp	r6, r7
 801401c:	d1bf      	bne.n	8013f9e <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801401e:	2302      	movs	r3, #2
 8014020:	e7d5      	b.n	8013fce <inc_lock+0x4a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014022:	2301      	movs	r3, #1
		Files[i].clu = dp->obj.sclust;
 8014024:	6946      	ldr	r6, [r0, #20]
		Files[i].fs = dp->obj.fs;
 8014026:	eb02 1503 	add.w	r5, r2, r3, lsl #4
		Files[i].clu = dp->obj.sclust;
 801402a:	6887      	ldr	r7, [r0, #8]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801402c:	f1be 0f00 	cmp.w	lr, #0
		Files[i].fs = dp->obj.fs;
 8014030:	ea4f 1003 	mov.w	r0, r3, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014034:	bf14      	ite	ne
 8014036:	f44f 7480 	movne.w	r4, #256	; 0x100
 801403a:	2401      	moveq	r4, #1
		Files[i].fs = dp->obj.fs;
 801403c:	5011      	str	r1, [r2, r0]
		Files[i].clu = dp->obj.sclust;
 801403e:	4629      	mov	r1, r5
 8014040:	e9c5 7601 	strd	r7, r6, [r5, #4]
		Files[i].ctr = 0;
 8014044:	2500      	movs	r5, #0
 8014046:	818d      	strh	r5, [r1, #12]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014048:	4402      	add	r2, r0
	return i + 1;
 801404a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801404c:	8194      	strh	r4, [r2, #12]
}
 801404e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014050:	898c      	ldrh	r4, [r1, #12]
 8014052:	3401      	adds	r4, #1
 8014054:	b2a4      	uxth	r4, r4
 8014056:	e7f7      	b.n	8014048 <inc_lock+0xc4>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014058:	2302      	movs	r3, #2
 801405a:	e7e3      	b.n	8014024 <inc_lock+0xa0>
 801405c:	2303      	movs	r3, #3
 801405e:	e7e1      	b.n	8014024 <inc_lock+0xa0>
 8014060:	200071d4 	.word	0x200071d4

08014064 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8014064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8014068:	2600      	movs	r6, #0
{
 801406a:	b082      	sub	sp, #8
	FATFS *fs = dp->obj.fs;
 801406c:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8014070:	758e      	strb	r6, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014072:	69c3      	ldr	r3, [r0, #28]
{
 8014074:	e9cd 0100 	strd	r0, r1, [sp]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014078:	2b00      	cmp	r3, #0
 801407a:	d05b      	beq.n	8014134 <get_fileinfo+0xd0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801407c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801407e:	4607      	mov	r7, r0
 8014080:	460d      	mov	r5, r1
 8014082:	3301      	adds	r3, #1
 8014084:	d01f      	beq.n	80140c6 <get_fileinfo+0x62>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8014086:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801408a:	8818      	ldrh	r0, [r3, #0]
 801408c:	2800      	cmp	r0, #0
 801408e:	d063      	beq.n	8014158 <get_fileinfo+0xf4>
 8014090:	f101 0615 	add.w	r6, r1, #21
 8014094:	2401      	movs	r4, #1
 8014096:	e000      	b.n	801409a <get_fileinfo+0x36>
 8014098:	4614      	mov	r4, r2
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801409a:	2100      	movs	r1, #0
 801409c:	f7ff fec4 	bl	8013e28 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80140a0:	1c62      	adds	r2, r4, #1
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80140a2:	9000      	str	r0, [sp, #0]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80140a4:	2800      	cmp	r0, #0
 80140a6:	d057      	beq.n	8014158 <get_fileinfo+0xf4>
 80140a8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80140ac:	d054      	beq.n	8014158 <get_fileinfo+0xf4>
				fno->fname[i++] = (TCHAR)w;
 80140ae:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80140b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80140b6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80140ba:	2800      	cmp	r0, #0
 80140bc:	d1ec      	bne.n	8014098 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80140be:	442c      	add	r4, r5
 80140c0:	2300      	movs	r3, #0
 80140c2:	75a3      	strb	r3, [r4, #22]
		}
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80140c4:	7dae      	ldrb	r6, [r5, #22]
 80140c6:	f8d7 c020 	ldr.w	ip, [r7, #32]
	i = j = 0;
 80140ca:	2100      	movs	r1, #0
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 80140cc:	f04f 082e 	mov.w	r8, #46	; 0x2e
 80140d0:	f10c 34ff 	add.w	r4, ip, #4294967295
	i = j = 0;
 80140d4:	460a      	mov	r2, r1
		c = (TCHAR)dp->dir[i++];
 80140d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80140da:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 80140dc:	2b20      	cmp	r3, #32
 80140de:	d018      	beq.n	8014112 <get_fileinfo+0xae>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80140e0:	2b05      	cmp	r3, #5
 80140e2:	bf08      	it	eq
 80140e4:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 80140e6:	2a09      	cmp	r2, #9
 80140e8:	d027      	beq.n	801413a <get_fileinfo+0xd6>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80140ea:	1868      	adds	r0, r5, r1
 80140ec:	7243      	strb	r3, [r0, #9]
		if (!lfv) {
 80140ee:	b97e      	cbnz	r6, 8014110 <get_fileinfo+0xac>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80140f0:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 80140f4:	2f19      	cmp	r7, #25
 80140f6:	d80a      	bhi.n	801410e <get_fileinfo+0xaa>
 80140f8:	2a08      	cmp	r2, #8
 80140fa:	f89c e00c 	ldrb.w	lr, [ip, #12]
 80140fe:	bf8c      	ite	hi
 8014100:	2710      	movhi	r7, #16
 8014102:	2708      	movls	r7, #8
 8014104:	ea1e 0f07 	tst.w	lr, r7
 8014108:	d001      	beq.n	801410e <get_fileinfo+0xaa>
				c += 0x20;			/* To lower */
 801410a:	3320      	adds	r3, #32
 801410c:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 801410e:	7583      	strb	r3, [r0, #22]
		}
		j++;
 8014110:	3101      	adds	r1, #1
	while (i < 11) {		/* Copy name body and extension */
 8014112:	2a0b      	cmp	r2, #11
 8014114:	d1df      	bne.n	80140d6 <get_fileinfo+0x72>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 8014116:	1868      	adds	r0, r5, r1
	if (!lfv) {
 8014118:	b1be      	cbz	r6, 801414a <get_fileinfo+0xe6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801411a:	2300      	movs	r3, #0
 801411c:	7243      	strb	r3, [r0, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801411e:	f89c 300b 	ldrb.w	r3, [ip, #11]
 8014122:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 8014124:	f8dc 301c 	ldr.w	r3, [ip, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8014128:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 801412a:	f8dc 3016 	ldr.w	r3, [ip, #22]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801412e:	0c1a      	lsrs	r2, r3, #16
 8014130:	80eb      	strh	r3, [r5, #6]
 8014132:	80aa      	strh	r2, [r5, #4]
}
 8014134:	b002      	add	sp, #8
 8014136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 801413a:	1868      	adds	r0, r5, r1
 801413c:	b90e      	cbnz	r6, 8014142 <get_fileinfo+0xde>
 801413e:	f880 8016 	strb.w	r8, [r0, #22]
			fno->altname[j++] = '.';
 8014142:	3101      	adds	r1, #1
 8014144:	f880 8009 	strb.w	r8, [r0, #9]
 8014148:	e7cf      	b.n	80140ea <get_fileinfo+0x86>
		fno->fname[j] = 0;
 801414a:	7586      	strb	r6, [r0, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801414c:	f89c 300c 	ldrb.w	r3, [ip, #12]
 8014150:	2b00      	cmp	r3, #0
 8014152:	bf08      	it	eq
 8014154:	4628      	moveq	r0, r5
 8014156:	e7e0      	b.n	801411a <get_fileinfo+0xb6>
			i = j = 0;
 8014158:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 801415a:	2300      	movs	r3, #0
 801415c:	442c      	add	r4, r5
 801415e:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8014160:	7dae      	ldrb	r6, [r5, #22]
 8014162:	e7b0      	b.n	80140c6 <get_fileinfo+0x62>

08014164 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014164:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014166:	f04f 36ff 	mov.w	r6, #4294967295
 801416a:	2300      	movs	r3, #0
{
 801416c:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801416e:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014170:	70c3      	strb	r3, [r0, #3]
 8014172:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014174:	d00c      	beq.n	8014190 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014176:	460d      	mov	r5, r1
 8014178:	460a      	mov	r2, r1
 801417a:	2301      	movs	r3, #1
 801417c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8014180:	7840      	ldrb	r0, [r0, #1]
 8014182:	f7ff fed5 	bl	8013f30 <disk_read>
 8014186:	b110      	cbz	r0, 801418e <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014188:	2004      	movs	r0, #4
			fs->winsect = sector;
 801418a:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 801418c:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 801418e:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014190:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014194:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8014198:	429a      	cmp	r2, r3
 801419a:	d11a      	bne.n	80141d2 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801419c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80141a0:	2be9      	cmp	r3, #233	; 0xe9
 80141a2:	d007      	beq.n	80141b4 <check_fs+0x50>
 80141a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80141a6:	4a0d      	ldr	r2, [pc, #52]	; (80141dc <check_fs+0x78>)
 80141a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80141ac:	4293      	cmp	r3, r2
 80141ae:	d001      	beq.n	80141b4 <check_fs+0x50>
	return 2;
 80141b0:	2002      	movs	r0, #2
}
 80141b2:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 80141b4:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80141b8:	4a09      	ldr	r2, [pc, #36]	; (80141e0 <check_fs+0x7c>)
 80141ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80141be:	4293      	cmp	r3, r2
 80141c0:	d009      	beq.n	80141d6 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 80141c2:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80141c6:	4b07      	ldr	r3, [pc, #28]	; (80141e4 <check_fs+0x80>)
 80141c8:	4298      	cmp	r0, r3
 80141ca:	bf14      	ite	ne
 80141cc:	2002      	movne	r0, #2
 80141ce:	2000      	moveq	r0, #0
}
 80141d0:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80141d2:	2003      	movs	r0, #3
}
 80141d4:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80141d6:	2000      	movs	r0, #0
}
 80141d8:	bd70      	pop	{r4, r5, r6, pc}
 80141da:	bf00      	nop
 80141dc:	009000eb 	.word	0x009000eb
 80141e0:	00544146 	.word	0x00544146
 80141e4:	33544146 	.word	0x33544146

080141e8 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80141e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80141ea:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80141ec:	b083      	sub	sp, #12
 80141ee:	4604      	mov	r4, r0
 80141f0:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80141f2:	b973      	cbnz	r3, 8014212 <move_window.part.0+0x2a>
 80141f4:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80141f8:	2301      	movs	r3, #1
 80141fa:	462a      	mov	r2, r5
 80141fc:	7860      	ldrb	r0, [r4, #1]
 80141fe:	f7ff fe97 	bl	8013f30 <disk_read>
 8014202:	b910      	cbnz	r0, 801420a <move_window.part.0+0x22>
			fs->winsect = sector;
 8014204:	6325      	str	r5, [r4, #48]	; 0x30
}
 8014206:	b003      	add	sp, #12
 8014208:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 801420a:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801420c:	f04f 35ff 	mov.w	r5, #4294967295
 8014210:	e7f8      	b.n	8014204 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 8014212:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014214:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8014218:	2301      	movs	r3, #1
 801421a:	7840      	ldrb	r0, [r0, #1]
 801421c:	4632      	mov	r2, r6
 801421e:	9101      	str	r1, [sp, #4]
 8014220:	f7ff fe94 	bl	8013f4c <disk_write>
 8014224:	b9b8      	cbnz	r0, 8014256 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014226:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014228:	69e3      	ldr	r3, [r4, #28]
 801422a:	1ab2      	subs	r2, r6, r2
 801422c:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 801422e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014230:	429a      	cmp	r2, r3
 8014232:	d2e1      	bcs.n	80141f8 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014234:	78a7      	ldrb	r7, [r4, #2]
 8014236:	2f01      	cmp	r7, #1
 8014238:	d801      	bhi.n	801423e <move_window.part.0+0x56>
 801423a:	e7dd      	b.n	80141f8 <move_window.part.0+0x10>
					wsect += fs->fsize;
 801423c:	69e3      	ldr	r3, [r4, #28]
 801423e:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014240:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8014242:	2301      	movs	r3, #1
 8014244:	7860      	ldrb	r0, [r4, #1]
 8014246:	4632      	mov	r2, r6
 8014248:	9101      	str	r1, [sp, #4]
 801424a:	f7ff fe7f 	bl	8013f4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801424e:	2f01      	cmp	r7, #1
 8014250:	9901      	ldr	r1, [sp, #4]
 8014252:	d1f3      	bne.n	801423c <move_window.part.0+0x54>
 8014254:	e7d0      	b.n	80141f8 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8014256:	2001      	movs	r0, #1
}
 8014258:	b003      	add	sp, #12
 801425a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801425c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014260:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 8014262:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 8014264:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8014266:	b19c      	cbz	r4, 8014290 <find_volume+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014268:	7825      	ldrb	r5, [r4, #0]
 801426a:	2d1f      	cmp	r5, #31
 801426c:	d914      	bls.n	8014298 <find_volume+0x3c>
 801426e:	2d3a      	cmp	r5, #58	; 0x3a
 8014270:	d012      	beq.n	8014298 <find_volume+0x3c>
 8014272:	46a4      	mov	ip, r4
 8014274:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8014278:	2b1f      	cmp	r3, #31
 801427a:	d90f      	bls.n	801429c <find_volume+0x40>
 801427c:	2b3a      	cmp	r3, #58	; 0x3a
 801427e:	d1f9      	bne.n	8014274 <find_volume+0x18>
			i = *tp++ - '0';
 8014280:	3401      	adds	r4, #1
 8014282:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014286:	45a4      	cmp	ip, r4
 8014288:	d102      	bne.n	8014290 <find_volume+0x34>
 801428a:	2e01      	cmp	r6, #1
 801428c:	f240 80fc 	bls.w	8014488 <find_volume+0x22c>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8014290:	250b      	movs	r5, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8014292:	4628      	mov	r0, r5
 8014294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014298:	462b      	mov	r3, r5
 801429a:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801429c:	2b3a      	cmp	r3, #58	; 0x3a
 801429e:	d0ef      	beq.n	8014280 <find_volume+0x24>
		vol = 0;		/* Drive 0 */
 80142a0:	2600      	movs	r6, #0
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80142a2:	4ba9      	ldr	r3, [pc, #676]	; (8014548 <find_volume+0x2ec>)
 80142a4:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80142a8:	2c00      	cmp	r4, #0
 80142aa:	f000 80cf 	beq.w	801444c <find_volume+0x1f0>
	*rfs = fs;							/* Return pointer to the file system object */
 80142ae:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80142b0:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80142b4:	7823      	ldrb	r3, [r4, #0]
 80142b6:	b17b      	cbz	r3, 80142d8 <find_volume+0x7c>
		stat = disk_status(fs->drv);
 80142b8:	7860      	ldrb	r0, [r4, #1]
 80142ba:	f7ff fe1d 	bl	8013ef8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80142be:	07c7      	lsls	r7, r0, #31
 80142c0:	d40a      	bmi.n	80142d8 <find_volume+0x7c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80142c2:	2d00      	cmp	r5, #0
 80142c4:	f000 80b1 	beq.w	801442a <find_volume+0x1ce>
 80142c8:	f010 0504 	ands.w	r5, r0, #4
 80142cc:	f000 80ad 	beq.w	801442a <find_volume+0x1ce>
				return FR_WRITE_PROTECTED;
 80142d0:	250a      	movs	r5, #10
}
 80142d2:	4628      	mov	r0, r5
 80142d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80142d8:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80142da:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80142dc:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 80142de:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80142e0:	f7ff fe14 	bl	8013f0c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80142e4:	07c6      	lsls	r6, r0, #31
 80142e6:	f100 80a3 	bmi.w	8014430 <find_volume+0x1d4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80142ea:	b10d      	cbz	r5, 80142f0 <find_volume+0x94>
 80142ec:	0745      	lsls	r5, r0, #29
 80142ee:	d4ef      	bmi.n	80142d0 <find_volume+0x74>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80142f0:	2100      	movs	r1, #0
 80142f2:	4620      	mov	r0, r4
 80142f4:	f7ff ff36 	bl	8014164 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80142f8:	2802      	cmp	r0, #2
 80142fa:	d07b      	beq.n	80143f4 <find_volume+0x198>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80142fc:	2804      	cmp	r0, #4
 80142fe:	f000 80a3 	beq.w	8014448 <find_volume+0x1ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014302:	2801      	cmp	r0, #1
 8014304:	f200 8090 	bhi.w	8014428 <find_volume+0x1cc>
	bsect = 0;
 8014308:	2500      	movs	r5, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801430a:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
 801430e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014312:	f040 8089 	bne.w	8014428 <find_volume+0x1cc>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014316:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801431a:	b902      	cbnz	r2, 801431e <find_volume+0xc2>
	rv = rv << 8 | ptr[0];
 801431c:	6da2      	ldr	r2, [r4, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801431e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8014322:	61e2      	str	r2, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014324:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014326:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014328:	2901      	cmp	r1, #1
 801432a:	d87d      	bhi.n	8014428 <find_volume+0x1cc>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801432c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8014330:	b288      	uxth	r0, r1
 8014332:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014334:	2800      	cmp	r0, #0
 8014336:	d077      	beq.n	8014428 <find_volume+0x1cc>
 8014338:	1e48      	subs	r0, r1, #1
 801433a:	4208      	tst	r0, r1
 801433c:	d174      	bne.n	8014428 <find_volume+0x1cc>
	rv = ptr[1];
 801433e:	f8b4 7045 	ldrh.w	r7, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014342:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014344:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014346:	d16f      	bne.n	8014428 <find_volume+0x1cc>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014348:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801434c:	b900      	cbnz	r0, 8014350 <find_volume+0xf4>
	rv = rv << 8 | ptr[0];
 801434e:	6d60      	ldr	r0, [r4, #84]	; 0x54
	rv = ptr[1];
 8014350:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014354:	2e00      	cmp	r6, #0
 8014356:	d067      	beq.n	8014428 <find_volume+0x1cc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014358:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801435c:	eb06 1c17 	add.w	ip, r6, r7, lsr #4
 8014360:	449c      	add	ip, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014362:	4560      	cmp	r0, ip
 8014364:	d360      	bcc.n	8014428 <find_volume+0x1cc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014366:	eba0 0e0c 	sub.w	lr, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801436a:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801436c:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014370:	d35a      	bcc.n	8014428 <find_volume+0x1cc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014372:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8014376:	4288      	cmp	r0, r1
 8014378:	f200 808a 	bhi.w	8014490 <find_volume+0x234>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801437c:	f640 71f5 	movw	r1, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014380:	442e      	add	r6, r5
		fs->volbase = bsect;							/* Volume start sector */
 8014382:	6225      	str	r5, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014384:	4288      	cmp	r0, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014386:	f100 0002 	add.w	r0, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 801438a:	eb0c 0105 	add.w	r1, ip, r5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801438e:	6266      	str	r6, [r4, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014390:	61a0      	str	r0, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8014392:	62e1      	str	r1, [r4, #44]	; 0x2c
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014394:	f200 80a2 	bhi.w	80144dc <find_volume+0x280>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014398:	2f00      	cmp	r7, #0
 801439a:	d045      	beq.n	8014428 <find_volume+0x1cc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801439c:	441e      	add	r6, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801439e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80143a2:	f000 0001 	and.w	r0, r0, #1
 80143a6:	2101      	movs	r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80143a8:	62a6      	str	r6, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80143aa:	eb00 0353 	add.w	r3, r0, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80143ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80143b2:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 80143b6:	d337      	bcc.n	8014428 <find_volume+0x1cc>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80143b8:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 80143bc:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80143be:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 80143c2:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 80143c4:	4861      	ldr	r0, [pc, #388]	; (801454c <find_volume+0x2f0>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 80143c6:	4b62      	ldr	r3, [pc, #392]	; (8014550 <find_volume+0x2f4>)
	fs->id = ++Fsid;		/* File system mount ID */
 80143c8:	8802      	ldrh	r2, [r0, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 80143ca:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80143cc:	3201      	adds	r2, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 80143ce:	6819      	ldr	r1, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80143d0:	b292      	uxth	r2, r2
		if (Files[i].fs == fs) Files[i].fs = 0;
 80143d2:	428c      	cmp	r4, r1
	fs->id = ++Fsid;		/* File system mount ID */
 80143d4:	8002      	strh	r2, [r0, #0]
 80143d6:	80e2      	strh	r2, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80143d8:	f000 808a 	beq.w	80144f0 <find_volume+0x294>
 80143dc:	691a      	ldr	r2, [r3, #16]
 80143de:	4294      	cmp	r4, r2
 80143e0:	f000 8083 	beq.w	80144ea <find_volume+0x28e>
 80143e4:	6a1a      	ldr	r2, [r3, #32]
 80143e6:	4294      	cmp	r4, r2
 80143e8:	d075      	beq.n	80144d6 <find_volume+0x27a>
 80143ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143ec:	4294      	cmp	r4, r2
 80143ee:	d06f      	beq.n	80144d0 <find_volume+0x274>
	return FR_OK;
 80143f0:	2500      	movs	r5, #0
 80143f2:	e01a      	b.n	801442a <find_volume+0x1ce>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80143f4:	f894 61f6 	ldrb.w	r6, [r4, #502]	; 0x1f6
 80143f8:	b10e      	cbz	r6, 80143fe <find_volume+0x1a2>
	rv = rv << 8 | ptr[0];
 80143fa:	f8d4 61fa 	ldr.w	r6, [r4, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80143fe:	f894 5206 	ldrb.w	r5, [r4, #518]	; 0x206
 8014402:	b10d      	cbz	r5, 8014408 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 8014404:	f8d4 520a 	ldr.w	r5, [r4, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014408:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
 801440c:	b303      	cbz	r3, 8014450 <find_volume+0x1f4>
	rv = rv << 8 | ptr[0];
 801440e:	f8d4 821a 	ldr.w	r8, [r4, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014412:	f894 7226 	ldrb.w	r7, [r4, #550]	; 0x226
 8014416:	b10f      	cbz	r7, 801441c <find_volume+0x1c0>
	rv = rv << 8 | ptr[0];
 8014418:	f8d4 722a 	ldr.w	r7, [r4, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801441c:	b9d6      	cbnz	r6, 8014454 <find_volume+0x1f8>
 801441e:	bb0d      	cbnz	r5, 8014464 <find_volume+0x208>
 8014420:	f1b8 0f00 	cmp.w	r8, #0
 8014424:	d128      	bne.n	8014478 <find_volume+0x21c>
 8014426:	b93f      	cbnz	r7, 8014438 <find_volume+0x1dc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014428:	250d      	movs	r5, #13
}
 801442a:	4628      	mov	r0, r5
 801442c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014430:	2503      	movs	r5, #3
}
 8014432:	4628      	mov	r0, r5
 8014434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014438:	4639      	mov	r1, r7
 801443a:	4620      	mov	r0, r4
 801443c:	f7ff fe92 	bl	8014164 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014440:	2801      	cmp	r0, #1
 8014442:	d97e      	bls.n	8014542 <find_volume+0x2e6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014444:	2804      	cmp	r0, #4
 8014446:	d1ef      	bne.n	8014428 <find_volume+0x1cc>
 8014448:	2501      	movs	r5, #1
 801444a:	e7ee      	b.n	801442a <find_volume+0x1ce>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801444c:	250c      	movs	r5, #12
 801444e:	e7ec      	b.n	801442a <find_volume+0x1ce>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014450:	4698      	mov	r8, r3
 8014452:	e7de      	b.n	8014412 <find_volume+0x1b6>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014454:	4631      	mov	r1, r6
 8014456:	4620      	mov	r0, r4
 8014458:	f7ff fe84 	bl	8014164 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801445c:	2801      	cmp	r0, #1
 801445e:	d8de      	bhi.n	801441e <find_volume+0x1c2>
 8014460:	4635      	mov	r5, r6
 8014462:	e752      	b.n	801430a <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014464:	4629      	mov	r1, r5
 8014466:	4620      	mov	r0, r4
 8014468:	f7ff fe7c 	bl	8014164 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801446c:	2801      	cmp	r0, #1
 801446e:	f67f af4c 	bls.w	801430a <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014472:	f1b8 0f00 	cmp.w	r8, #0
 8014476:	d0d6      	beq.n	8014426 <find_volume+0x1ca>
 8014478:	4641      	mov	r1, r8
 801447a:	4620      	mov	r0, r4
 801447c:	f7ff fe72 	bl	8014164 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014480:	2801      	cmp	r0, #1
 8014482:	d8d0      	bhi.n	8014426 <find_volume+0x1ca>
 8014484:	4645      	mov	r5, r8
 8014486:	e740      	b.n	801430a <find_volume+0xae>
					*path = ++tt;
 8014488:	f10c 0301 	add.w	r3, ip, #1
 801448c:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 801448e:	e708      	b.n	80142a2 <find_volume+0x46>
		fs->database = bsect + sysect;					/* Data start sector */
 8014490:	eb0c 0305 	add.w	r3, ip, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014494:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014496:	442e      	add	r6, r5
		fs->volbase = bsect;							/* Volume start sector */
 8014498:	6225      	str	r5, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801449a:	62e3      	str	r3, [r4, #44]	; 0x2c
	rv = rv << 8 | ptr[0];
 801449c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80144a0:	6266      	str	r6, [r4, #36]	; 0x24
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80144a2:	433b      	orrs	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80144a4:	61a0      	str	r0, [r4, #24]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80144a6:	d1bf      	bne.n	8014428 <find_volume+0x1cc>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80144a8:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 80144aa:	6e21      	ldr	r1, [r4, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80144ac:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80144b0:	62a1      	str	r1, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80144b2:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 80144b6:	d3b7      	bcc.n	8014428 <find_volume+0x1cc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80144b8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80144bc:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 80144c0:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80144c2:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 80144c4:	7121      	strb	r1, [r4, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80144c6:	e9c4 3304 	strd	r3, r3, [r4, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80144ca:	d014      	beq.n	80144f6 <find_volume+0x29a>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80144cc:	2103      	movs	r1, #3
 80144ce:	e779      	b.n	80143c4 <find_volume+0x168>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80144d0:	2200      	movs	r2, #0
 80144d2:	631a      	str	r2, [r3, #48]	; 0x30
 80144d4:	e78c      	b.n	80143f0 <find_volume+0x194>
 80144d6:	2200      	movs	r2, #0
 80144d8:	621a      	str	r2, [r3, #32]
 80144da:	e786      	b.n	80143ea <find_volume+0x18e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80144dc:	2f00      	cmp	r7, #0
 80144de:	d0a3      	beq.n	8014428 <find_volume+0x1cc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80144e0:	441e      	add	r6, r3
 80144e2:	2102      	movs	r1, #2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80144e4:	0043      	lsls	r3, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80144e6:	62a6      	str	r6, [r4, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80144e8:	e761      	b.n	80143ae <find_volume+0x152>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80144ea:	2200      	movs	r2, #0
 80144ec:	611a      	str	r2, [r3, #16]
 80144ee:	e779      	b.n	80143e4 <find_volume+0x188>
 80144f0:	2200      	movs	r2, #0
 80144f2:	601a      	str	r2, [r3, #0]
 80144f4:	e772      	b.n	80143dc <find_volume+0x180>
			&& move_window(fs, bsect + 1) == FR_OK)
 80144f6:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80144f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80144fa:	4299      	cmp	r1, r3
 80144fc:	d004      	beq.n	8014508 <find_volume+0x2ac>
 80144fe:	4620      	mov	r0, r4
 8014500:	f7ff fe72 	bl	80141e8 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014504:	2800      	cmp	r0, #0
 8014506:	d1e1      	bne.n	80144cc <find_volume+0x270>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014508:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801450c:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8014510:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014512:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 8014514:	7121      	strb	r1, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014516:	d1d9      	bne.n	80144cc <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 8014518:	6b62      	ldr	r2, [r4, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801451a:	4b0e      	ldr	r3, [pc, #56]	; (8014554 <find_volume+0x2f8>)
 801451c:	429a      	cmp	r2, r3
 801451e:	d1d5      	bne.n	80144cc <find_volume+0x270>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014520:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8014524:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014528:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801452c:	3320      	adds	r3, #32
 801452e:	429a      	cmp	r2, r3
 8014530:	d1cc      	bne.n	80144cc <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 8014532:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014536:	2103      	movs	r1, #3
 8014538:	f8d4 2220 	ldr.w	r2, [r4, #544]	; 0x220
 801453c:	e9c4 2304 	strd	r2, r3, [r4, #16]
 8014540:	e740      	b.n	80143c4 <find_volume+0x168>
 8014542:	463d      	mov	r5, r7
 8014544:	e6e1      	b.n	801430a <find_volume+0xae>
 8014546:	bf00      	nop
 8014548:	200071cc 	.word	0x200071cc
 801454c:	20007214 	.word	0x20007214
 8014550:	200071d4 	.word	0x200071d4
 8014554:	41615252 	.word	0x41615252

08014558 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8014558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 801455c:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 801455e:	4604      	mov	r4, r0
 8014560:	460d      	mov	r5, r1
 8014562:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8014564:	2b02      	cmp	r3, #2
 8014566:	d006      	beq.n	8014576 <put_fat.part.0+0x1e>
 8014568:	2b03      	cmp	r3, #3
 801456a:	d052      	beq.n	8014612 <put_fat.part.0+0xba>
 801456c:	2b01      	cmp	r3, #1
 801456e:	d01b      	beq.n	80145a8 <put_fat.part.0+0x50>
 8014570:	2002      	movs	r0, #2
}
 8014572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014576:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014578:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801457a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801457e:	4299      	cmp	r1, r3
 8014580:	d003      	beq.n	801458a <put_fat.part.0+0x32>
 8014582:	f7ff fe31 	bl	80141e8 <move_window.part.0>
			if (res != FR_OK) break;
 8014586:	2800      	cmp	r0, #0
 8014588:	d1f3      	bne.n	8014572 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801458a:	006d      	lsls	r5, r5, #1
 801458c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8014590:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
 8014594:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014596:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 801459a:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801459c:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
 801459e:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80145a0:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 80145a2:	70e3      	strb	r3, [r4, #3]
}
 80145a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 80145a8:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80145ac:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80145ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80145b0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80145b4:	4299      	cmp	r1, r3
 80145b6:	d003      	beq.n	80145c0 <put_fat.part.0+0x68>
 80145b8:	f7ff fe16 	bl	80141e8 <move_window.part.0>
			if (res != FR_OK) break;
 80145bc:	2800      	cmp	r0, #0
 80145be:	d1d8      	bne.n	8014572 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80145c0:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 80145c2:	f107 0801 	add.w	r8, r7, #1
 80145c6:	f104 0934 	add.w	r9, r4, #52	; 0x34
 80145ca:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80145ce:	d542      	bpl.n	8014656 <put_fat.part.0+0xfe>
 80145d0:	f819 3007 	ldrb.w	r3, [r9, r7]
 80145d4:	f003 030f 	and.w	r3, r3, #15
 80145d8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80145dc:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
 80145e0:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80145e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 80145e4:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80145e6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80145ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80145ec:	4299      	cmp	r1, r3
 80145ee:	d004      	beq.n	80145fa <put_fat.part.0+0xa2>
 80145f0:	4620      	mov	r0, r4
 80145f2:	f7ff fdf9 	bl	80141e8 <move_window.part.0>
			if (res != FR_OK) break;
 80145f6:	2800      	cmp	r0, #0
 80145f8:	d1bb      	bne.n	8014572 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 80145fa:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80145fe:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 8014602:	44c8      	add	r8, r9
			fs->wflag = 1;
 8014604:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014606:	f888 2000 	strb.w	r2, [r8]
			break;
 801460a:	2000      	movs	r0, #0
			fs->wflag = 1;
 801460c:	70e3      	strb	r3, [r4, #3]
}
 801460e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014612:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014614:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014616:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801461a:	4299      	cmp	r1, r3
 801461c:	d003      	beq.n	8014626 <put_fat.part.0+0xce>
 801461e:	f7ff fde3 	bl	80141e8 <move_window.part.0>
			if (res != FR_OK) break;
 8014622:	2800      	cmp	r0, #0
 8014624:	d1a5      	bne.n	8014572 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014626:	00ad      	lsls	r5, r5, #2
 8014628:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801462c:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 8014630:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8014634:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014636:	1941      	adds	r1, r0, r5
 8014638:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801463c:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
 801463e:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8014640:	5542      	strb	r2, [r0, r5]
 8014642:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8014644:	708b      	strb	r3, [r1, #2]
 8014646:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
 8014648:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801464a:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
 801464c:	70ca      	strb	r2, [r1, #3]
			break;
 801464e:	2000      	movs	r0, #0
			fs->wflag = 1;
 8014650:	70e3      	strb	r3, [r4, #3]
}
 8014652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014656:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 801465a:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801465c:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 801465e:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014660:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014664:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014666:	4299      	cmp	r1, r3
 8014668:	d005      	beq.n	8014676 <put_fat.part.0+0x11e>
 801466a:	4620      	mov	r0, r4
 801466c:	f7ff fdbc 	bl	80141e8 <move_window.part.0>
			if (res != FR_OK) break;
 8014670:	2800      	cmp	r0, #0
 8014672:	f47f af7e 	bne.w	8014572 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8014676:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801467a:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 801467e:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014680:	f898 3000 	ldrb.w	r3, [r8]
 8014684:	f023 060f 	bic.w	r6, r3, #15
 8014688:	4332      	orrs	r2, r6
 801468a:	e7bb      	b.n	8014604 <put_fat.part.0+0xac>

0801468c <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801468c:	2901      	cmp	r1, #1
 801468e:	d90e      	bls.n	80146ae <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8014690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014692:	6983      	ldr	r3, [r0, #24]
 8014694:	460c      	mov	r4, r1
 8014696:	4605      	mov	r5, r0
 8014698:	4299      	cmp	r1, r3
 801469a:	d206      	bcs.n	80146aa <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 801469c:	7803      	ldrb	r3, [r0, #0]
 801469e:	2b02      	cmp	r3, #2
 80146a0:	d03e      	beq.n	8014720 <get_fat.isra.0+0x94>
 80146a2:	2b03      	cmp	r3, #3
 80146a4:	d02b      	beq.n	80146fe <get_fat.isra.0+0x72>
 80146a6:	2b01      	cmp	r3, #1
 80146a8:	d003      	beq.n	80146b2 <get_fat.isra.0+0x26>
 80146aa:	2001      	movs	r0, #1
}
 80146ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80146ae:	2001      	movs	r0, #1
}
 80146b0:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 80146b2:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80146b8:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146ba:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80146be:	4291      	cmp	r1, r2
 80146c0:	d004      	beq.n	80146cc <get_fat.isra.0+0x40>
 80146c2:	f7ff fd91 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146c6:	bba0      	cbnz	r0, 8014732 <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80146ca:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80146cc:	1c77      	adds	r7, r6, #1
 80146ce:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146d2:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80146d6:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 80146d8:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80146da:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80146de:	d003      	beq.n	80146e8 <get_fat.isra.0+0x5c>
 80146e0:	4628      	mov	r0, r5
 80146e2:	f7ff fd81 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146e6:	bb20      	cbnz	r0, 8014732 <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
 80146e8:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80146ec:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80146ee:	443d      	add	r5, r7
 80146f0:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80146f4:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80146f8:	d524      	bpl.n	8014744 <get_fat.isra.0+0xb8>
 80146fa:	0900      	lsrs	r0, r0, #4
}
 80146fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80146fe:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014700:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014702:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014706:	4299      	cmp	r1, r3
 8014708:	d002      	beq.n	8014710 <get_fat.isra.0+0x84>
 801470a:	f7ff fd6d 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801470e:	b980      	cbnz	r0, 8014732 <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014710:	00a4      	lsls	r4, r4, #2
 8014712:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8014716:	4425      	add	r5, r4
 8014718:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801471a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 801471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014720:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014722:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014724:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014728:	4299      	cmp	r1, r3
 801472a:	d005      	beq.n	8014738 <get_fat.isra.0+0xac>
 801472c:	f7ff fd5c 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014730:	b110      	cbz	r0, 8014738 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014732:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014738:	0064      	lsls	r4, r4, #1
 801473a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 801473e:	4425      	add	r5, r4
 8014740:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 8014742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014744:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8014748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801474a:	bf00      	nop

0801474c <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 801474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014750:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014752:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014754:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014756:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 801475a:	d22c      	bcs.n	80147b6 <dir_next.constprop.0+0x6a>
 801475c:	b35b      	cbz	r3, 80147b6 <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801475e:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8014762:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8014764:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014766:	b137      	cbz	r7, 8014776 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014768:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 801476a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 801476c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801476e:	443e      	add	r6, r7
 8014770:	6226      	str	r6, [r4, #32]
}
 8014772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 8014776:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8014778:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 801477a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 801477c:	b1f1      	cbz	r1, 80147bc <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801477e:	8973      	ldrh	r3, [r6, #10]
 8014780:	3b01      	subs	r3, #1
 8014782:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8014786:	d1ef      	bne.n	8014768 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014788:	4630      	mov	r0, r6
 801478a:	f7ff ff7f 	bl	801468c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801478e:	2801      	cmp	r0, #1
 8014790:	d91c      	bls.n	80147cc <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014792:	1c43      	adds	r3, r0, #1
 8014794:	d01c      	beq.n	80147d0 <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014796:	69b3      	ldr	r3, [r6, #24]
 8014798:	4298      	cmp	r0, r3
 801479a:	d213      	bcs.n	80147c4 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801479c:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 801479e:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80147a0:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80147a2:	4298      	cmp	r0, r3
 80147a4:	d204      	bcs.n	80147b0 <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
 80147a6:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 80147aa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80147ac:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
 80147b0:	f8c4 801c 	str.w	r8, [r4, #28]
 80147b4:	e7d8      	b.n	8014768 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80147b6:	2004      	movs	r0, #4
}
 80147b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80147bc:	8933      	ldrh	r3, [r6, #8]
 80147be:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80147c2:	d8d1      	bhi.n	8014768 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 80147c4:	2300      	movs	r3, #0
 80147c6:	2004      	movs	r0, #4
 80147c8:	61e3      	str	r3, [r4, #28]
 80147ca:	e7d2      	b.n	8014772 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80147cc:	2002      	movs	r0, #2
 80147ce:	e7d0      	b.n	8014772 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80147d0:	2001      	movs	r0, #1
 80147d2:	e7ce      	b.n	8014772 <dir_next.constprop.0+0x26>

080147d4 <dir_read.constprop.0>:
FRESULT dir_read (
 80147d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 80147d8:	f8d0 a01c 	ldr.w	sl, [r0, #28]
FRESULT dir_read (
 80147dc:	b083      	sub	sp, #12
 80147de:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80147e0:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
 80147e2:	f1ba 0f00 	cmp.w	sl, #0
 80147e6:	d064      	beq.n	80148b2 <dir_read.constprop.0+0xde>
	BYTE ord = 0xFF, sum = 0xFF;
 80147e8:	f04f 09ff 	mov.w	r9, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80147ec:	f106 0834 	add.w	r8, r6, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 80147f0:	464f      	mov	r7, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80147f2:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80147f4:	4555      	cmp	r5, sl
 80147f6:	d015      	beq.n	8014824 <dir_read.constprop.0+0x50>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80147f8:	78f3      	ldrb	r3, [r6, #3]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	f040 80d6 	bne.w	80149ac <dir_read.constprop.0+0x1d8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014800:	2301      	movs	r3, #1
 8014802:	4652      	mov	r2, sl
 8014804:	4641      	mov	r1, r8
 8014806:	7870      	ldrb	r0, [r6, #1]
 8014808:	f7ff fb92 	bl	8013f30 <disk_read>
 801480c:	b140      	cbz	r0, 8014820 <dir_read.constprop.0+0x4c>
			fs->winsect = sector;
 801480e:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8014812:	2001      	movs	r0, #1
			fs->winsect = sector;
 8014814:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014816:	2300      	movs	r3, #0
 8014818:	61e3      	str	r3, [r4, #28]
}
 801481a:	b003      	add	sp, #12
 801481c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8014820:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014824:	6a21      	ldr	r1, [r4, #32]
 8014826:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8014828:	2a00      	cmp	r2, #0
 801482a:	d042      	beq.n	80148b2 <dir_read.constprop.0+0xde>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801482c:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801482e:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014834:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8014836:	d005      	beq.n	8014844 <dir_read.constprop.0+0x70>
 8014838:	2a2e      	cmp	r2, #46	; 0x2e
 801483a:	d003      	beq.n	8014844 <dir_read.constprop.0+0x70>
 801483c:	f023 0020 	bic.w	r0, r3, #32
 8014840:	2808      	cmp	r0, #8
 8014842:	d13d      	bne.n	80148c0 <dir_read.constprop.0+0xec>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014844:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
 8014846:	27ff      	movs	r7, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014848:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801484a:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 801484e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8014852:	d22e      	bcs.n	80148b2 <dir_read.constprop.0+0xde>
 8014854:	f1ba 0f00 	cmp.w	sl, #0
 8014858:	d02b      	beq.n	80148b2 <dir_read.constprop.0+0xde>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801485a:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 801485e:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014860:	bb4a      	cbnz	r2, 80148b6 <dir_read.constprop.0+0xe2>
		dp->sect++;				/* Next sector */
 8014862:	f10a 0a01 	add.w	sl, sl, #1
		if (!dp->clust) {		/* Static table */
 8014866:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8014868:	f8c4 a01c 	str.w	sl, [r4, #28]
		if (!dp->clust) {		/* Static table */
 801486c:	b969      	cbnz	r1, 801488a <dir_read.constprop.0+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801486e:	891a      	ldrh	r2, [r3, #8]
 8014870:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8014874:	d91d      	bls.n	80148b2 <dir_read.constprop.0+0xde>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014876:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8014878:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801487a:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 801487c:	f1ba 0f00 	cmp.w	sl, #0
 8014880:	d1b7      	bne.n	80147f2 <dir_read.constprop.0+0x1e>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8014882:	2000      	movs	r0, #0
}
 8014884:	b003      	add	sp, #12
 8014886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801488a:	895a      	ldrh	r2, [r3, #10]
 801488c:	3a01      	subs	r2, #1
 801488e:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 8014892:	d1f0      	bne.n	8014876 <dir_read.constprop.0+0xa2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014894:	4618      	mov	r0, r3
 8014896:	9301      	str	r3, [sp, #4]
 8014898:	f7ff fef8 	bl	801468c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801489c:	2801      	cmp	r0, #1
 801489e:	f240 80ba 	bls.w	8014a16 <dir_read.constprop.0+0x242>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80148a2:	1c43      	adds	r3, r0, #1
 80148a4:	f000 8089 	beq.w	80149ba <dir_read.constprop.0+0x1e6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80148a8:	9b01      	ldr	r3, [sp, #4]
 80148aa:	699a      	ldr	r2, [r3, #24]
 80148ac:	4290      	cmp	r0, r2
 80148ae:	f0c0 80a5 	bcc.w	80149fc <dir_read.constprop.0+0x228>
	FRESULT res = FR_NO_FILE;
 80148b2:	2004      	movs	r0, #4
 80148b4:	e7af      	b.n	8014816 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80148b6:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 80148b8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80148ba:	441a      	add	r2, r3
 80148bc:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 80148be:	e798      	b.n	80147f2 <dir_read.constprop.0+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 80148c0:	2b0f      	cmp	r3, #15
 80148c2:	f040 80b0 	bne.w	8014a26 <dir_read.constprop.0+0x252>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80148c6:	0650      	lsls	r0, r2, #25
						dp->blk_ofs = dp->dptr;
 80148c8:	6965      	ldr	r5, [r4, #20]
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80148ca:	d578      	bpl.n	80149be <dir_read.constprop.0+0x1ea>
						c &= (BYTE)~LLEF; ord = c;
 80148cc:	f002 07bf 	and.w	r7, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 80148d0:	f891 900d 	ldrb.w	r9, [r1, #13]
						dp->blk_ofs = dp->dptr;
 80148d4:	6325      	str	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80148d6:	7b4b      	ldrb	r3, [r1, #13]
 80148d8:	454b      	cmp	r3, r9
 80148da:	d1b4      	bne.n	8014846 <dir_read.constprop.0+0x72>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80148dc:	8b4b      	ldrh	r3, [r1, #26]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d1b1      	bne.n	8014846 <dir_read.constprop.0+0x72>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80148e2:	780b      	ldrb	r3, [r1, #0]
 80148e4:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 80148e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80148ec:	3b01      	subs	r3, #1
 80148ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80148f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80148f6:	2bfe      	cmp	r3, #254	; 0xfe
 80148f8:	d8a5      	bhi.n	8014846 <dir_read.constprop.0+0x72>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80148fa:	f8d6 c00c 	ldr.w	ip, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 80148fe:	1c5a      	adds	r2, r3, #1
 8014900:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
 8014904:	f8b1 e003 	ldrh.w	lr, [r1, #3]
		if (wc) {
 8014908:	2800      	cmp	r0, #0
 801490a:	f040 8094 	bne.w	8014a36 <dir_read.constprop.0+0x262>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801490e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014912:	459e      	cmp	lr, r3
 8014914:	d197      	bne.n	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8014916:	f8b1 b005 	ldrh.w	fp, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801491a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801491e:	459b      	cmp	fp, r3
 8014920:	d191      	bne.n	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8014922:	f8b1 a007 	ldrh.w	sl, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801492a:	459a      	cmp	sl, r3
 801492c:	d18b      	bne.n	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 801492e:	f8b1 e009 	ldrh.w	lr, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014936:	459e      	cmp	lr, r3
 8014938:	d185      	bne.n	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 801493a:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801493e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014942:	459a      	cmp	sl, r3
 8014944:	f47f af7f 	bne.w	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8014948:	f8b1 b010 	ldrh.w	fp, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801494c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014950:	459b      	cmp	fp, r3
 8014952:	f47f af78 	bne.w	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8014956:	f8b1 e012 	ldrh.w	lr, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801495a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801495e:	459e      	cmp	lr, r3
 8014960:	f47f af71 	bne.w	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8014964:	f8b1 a014 	ldrh.w	sl, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801496c:	459a      	cmp	sl, r3
 801496e:	f47f af6a 	bne.w	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8014972:	f8b1 e016 	ldrh.w	lr, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801497a:	459e      	cmp	lr, r3
 801497c:	f47f af63 	bne.w	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8014980:	f8b1 a018 	ldrh.w	sl, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014988:	459a      	cmp	sl, r3
 801498a:	f47f af5c 	bne.w	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 801498e:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014996:	459e      	cmp	lr, r3
 8014998:	f47f af55 	bne.w	8014846 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 801499c:	f8b1 a01e 	ldrh.w	sl, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80149a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80149a4:	459a      	cmp	sl, r3
 80149a6:	f000 80d5 	beq.w	8014b54 <dir_read.constprop.0+0x380>
 80149aa:	e74c      	b.n	8014846 <dir_read.constprop.0+0x72>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80149ac:	2301      	movs	r3, #1
 80149ae:	462a      	mov	r2, r5
 80149b0:	4641      	mov	r1, r8
 80149b2:	7870      	ldrb	r0, [r6, #1]
 80149b4:	f7ff faca 	bl	8013f4c <disk_write>
 80149b8:	b128      	cbz	r0, 80149c6 <dir_read.constprop.0+0x1f2>
	FRESULT res = FR_NO_FILE;
 80149ba:	2001      	movs	r0, #1
 80149bc:	e72b      	b.n	8014816 <dir_read.constprop.0+0x42>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80149be:	42ba      	cmp	r2, r7
 80149c0:	f47f af41 	bne.w	8014846 <dir_read.constprop.0+0x72>
 80149c4:	e787      	b.n	80148d6 <dir_read.constprop.0+0x102>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80149c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 80149c8:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80149ca:	1aea      	subs	r2, r5, r3
 80149cc:	69f3      	ldr	r3, [r6, #28]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	f4bf af16 	bcs.w	8014800 <dir_read.constprop.0+0x2c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80149d4:	f896 b002 	ldrb.w	fp, [r6, #2]
 80149d8:	f1bb 0f01 	cmp.w	fp, #1
 80149dc:	d801      	bhi.n	80149e2 <dir_read.constprop.0+0x20e>
 80149de:	e70f      	b.n	8014800 <dir_read.constprop.0+0x2c>
					wsect += fs->fsize;
 80149e0:	69f3      	ldr	r3, [r6, #28]
 80149e2:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80149e4:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80149e8:	2301      	movs	r3, #1
 80149ea:	4641      	mov	r1, r8
 80149ec:	462a      	mov	r2, r5
 80149ee:	7870      	ldrb	r0, [r6, #1]
 80149f0:	f7ff faac 	bl	8013f4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80149f4:	f1bb 0f01 	cmp.w	fp, #1
 80149f8:	d1f2      	bne.n	80149e0 <dir_read.constprop.0+0x20c>
 80149fa:	e701      	b.n	8014800 <dir_read.constprop.0+0x2c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80149fc:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80149fe:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8014a00:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014a02:	4290      	cmp	r0, r2
 8014a04:	d209      	bcs.n	8014a1a <dir_read.constprop.0+0x246>
	return clst * fs->csize + fs->database;
 8014a06:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 8014a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a0c:	fb00 2a0a 	mla	sl, r0, sl, r2
				dp->sect = clust2sect(fs, clst);
 8014a10:	f8c4 a01c 	str.w	sl, [r4, #28]
 8014a14:	e72f      	b.n	8014876 <dir_read.constprop.0+0xa2>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014a16:	2002      	movs	r0, #2
 8014a18:	e6fd      	b.n	8014816 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014a1a:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 8014a1c:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 8014a20:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014a22:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8014a24:	e72d      	b.n	8014882 <dir_read.constprop.0+0xae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8014a26:	2f00      	cmp	r7, #0
 8014a28:	f000 809f 	beq.w	8014b6a <dir_read.constprop.0+0x396>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8014a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a30:	2000      	movs	r0, #0
 8014a32:	6323      	str	r3, [r4, #48]	; 0x30
 8014a34:	e6f1      	b.n	801481a <dir_read.constprop.0+0x46>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014a36:	2aff      	cmp	r2, #255	; 0xff
 8014a38:	f000 80e1 	beq.w	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014a3c:	f82c e012 	strh.w	lr, [ip, r2, lsl #1]
 8014a40:	0050      	lsls	r0, r2, #1
 8014a42:	f8b1 b005 	ldrh.w	fp, [r1, #5]
 8014a46:	1c9a      	adds	r2, r3, #2
		if (wc) {
 8014a48:	f1be 0f00 	cmp.w	lr, #0
 8014a4c:	f43f af65 	beq.w	801491a <dir_read.constprop.0+0x146>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014a50:	2aff      	cmp	r2, #255	; 0xff
 8014a52:	f000 80d4 	beq.w	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014a56:	4460      	add	r0, ip
 8014a58:	1cda      	adds	r2, r3, #3
 8014a5a:	f8a0 b002 	strh.w	fp, [r0, #2]
 8014a5e:	f8b1 a007 	ldrh.w	sl, [r1, #7]
		if (wc) {
 8014a62:	f1bb 0f00 	cmp.w	fp, #0
 8014a66:	f43f af5e 	beq.w	8014926 <dir_read.constprop.0+0x152>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014a6a:	2aff      	cmp	r2, #255	; 0xff
 8014a6c:	f000 80c7 	beq.w	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014a70:	f8a0 a004 	strh.w	sl, [r0, #4]
 8014a74:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
 8014a76:	f8b1 e009 	ldrh.w	lr, [r1, #9]
		if (wc) {
 8014a7a:	f1ba 0f00 	cmp.w	sl, #0
 8014a7e:	f43f af58 	beq.w	8014932 <dir_read.constprop.0+0x15e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014a82:	2aff      	cmp	r2, #255	; 0xff
 8014a84:	f000 80bb 	beq.w	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014a88:	f8a0 e006 	strh.w	lr, [r0, #6]
 8014a8c:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
 8014a8e:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
		if (wc) {
 8014a92:	f1be 0f00 	cmp.w	lr, #0
 8014a96:	f43f af52 	beq.w	801493e <dir_read.constprop.0+0x16a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014a9a:	2aff      	cmp	r2, #255	; 0xff
 8014a9c:	f000 80af 	beq.w	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014aa0:	f8a0 a008 	strh.w	sl, [r0, #8]
 8014aa4:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
 8014aa6:	f8b1 b010 	ldrh.w	fp, [r1, #16]
		if (wc) {
 8014aaa:	f1ba 0f00 	cmp.w	sl, #0
 8014aae:	f43f af4d 	beq.w	801494c <dir_read.constprop.0+0x178>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014ab2:	2aff      	cmp	r2, #255	; 0xff
 8014ab4:	f000 80a3 	beq.w	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014ab8:	f8a0 b00a 	strh.w	fp, [r0, #10]
 8014abc:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
 8014abe:	f8b1 e012 	ldrh.w	lr, [r1, #18]
		if (wc) {
 8014ac2:	f1bb 0f00 	cmp.w	fp, #0
 8014ac6:	f43f af48 	beq.w	801495a <dir_read.constprop.0+0x186>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014aca:	2aff      	cmp	r2, #255	; 0xff
 8014acc:	f000 8097 	beq.w	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014ad0:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8014ad4:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
 8014ad8:	f8b1 a014 	ldrh.w	sl, [r1, #20]
		if (wc) {
 8014adc:	f1be 0f00 	cmp.w	lr, #0
 8014ae0:	f43f af42 	beq.w	8014968 <dir_read.constprop.0+0x194>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014ae4:	2aff      	cmp	r2, #255	; 0xff
 8014ae6:	f000 808a 	beq.w	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014aea:	f8a0 a00e 	strh.w	sl, [r0, #14]
 8014aee:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
 8014af2:	f8b1 e016 	ldrh.w	lr, [r1, #22]
		if (wc) {
 8014af6:	f1ba 0f00 	cmp.w	sl, #0
 8014afa:	f43f af3c 	beq.w	8014976 <dir_read.constprop.0+0x1a2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014afe:	2aff      	cmp	r2, #255	; 0xff
 8014b00:	f43f aea1 	beq.w	8014846 <dir_read.constprop.0+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014b04:	f8a0 e010 	strh.w	lr, [r0, #16]
 8014b08:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
 8014b0c:	f8b1 a018 	ldrh.w	sl, [r1, #24]
		if (wc) {
 8014b10:	f1be 0f00 	cmp.w	lr, #0
 8014b14:	f43f af36 	beq.w	8014984 <dir_read.constprop.0+0x1b0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014b18:	2aff      	cmp	r2, #255	; 0xff
 8014b1a:	d070      	beq.n	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014b1c:	f8a0 a012 	strh.w	sl, [r0, #18]
 8014b20:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
 8014b24:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
		if (wc) {
 8014b28:	f1ba 0f00 	cmp.w	sl, #0
 8014b2c:	f43f af31 	beq.w	8014992 <dir_read.constprop.0+0x1be>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014b30:	2aff      	cmp	r2, #255	; 0xff
 8014b32:	d064      	beq.n	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014b34:	f8a0 e014 	strh.w	lr, [r0, #20]
 8014b38:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
 8014b3c:	f8b1 a01e 	ldrh.w	sl, [r1, #30]
		if (wc) {
 8014b40:	f1be 0f00 	cmp.w	lr, #0
 8014b44:	f43f af2c 	beq.w	80149a0 <dir_read.constprop.0+0x1cc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014b48:	2aff      	cmp	r2, #255	; 0xff
 8014b4a:	d058      	beq.n	8014bfe <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014b4c:	f103 020d 	add.w	r2, r3, #13
 8014b50:	f8a0 a016 	strh.w	sl, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8014b54:	780b      	ldrb	r3, [r1, #0]
 8014b56:	0659      	lsls	r1, r3, #25
 8014b58:	d504      	bpl.n	8014b64 <dir_read.constprop.0+0x390>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8014b5a:	2aff      	cmp	r2, #255	; 0xff
 8014b5c:	d04f      	beq.n	8014bfe <dir_read.constprop.0+0x42a>
		lfnbuf[i] = 0;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	f82c 3012 	strh.w	r3, [ip, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014b64:	3f01      	subs	r7, #1
 8014b66:	b2ff      	uxtb	r7, r7
 8014b68:	e66e      	b.n	8014848 <dir_read.constprop.0+0x74>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014b6a:	780a      	ldrb	r2, [r1, #0]
 8014b6c:	01d3      	lsls	r3, r2, #7
 8014b6e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8014b72:	784a      	ldrb	r2, [r1, #1]
 8014b74:	441a      	add	r2, r3
 8014b76:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014b7a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014b7e:	788a      	ldrb	r2, [r1, #2]
 8014b80:	fa52 f283 	uxtab	r2, r2, r3
 8014b84:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014b88:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014b8c:	78ca      	ldrb	r2, [r1, #3]
 8014b8e:	fa52 f283 	uxtab	r2, r2, r3
 8014b92:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014b96:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014b9a:	790a      	ldrb	r2, [r1, #4]
 8014b9c:	fa52 f283 	uxtab	r2, r2, r3
 8014ba0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014ba4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014ba8:	794a      	ldrb	r2, [r1, #5]
 8014baa:	fa52 f283 	uxtab	r2, r2, r3
 8014bae:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014bb2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014bb6:	798a      	ldrb	r2, [r1, #6]
 8014bb8:	fa52 f283 	uxtab	r2, r2, r3
 8014bbc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014bc0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014bc4:	79ca      	ldrb	r2, [r1, #7]
 8014bc6:	fa52 f283 	uxtab	r2, r2, r3
 8014bca:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014bce:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014bd2:	7a0a      	ldrb	r2, [r1, #8]
 8014bd4:	fa52 f283 	uxtab	r2, r2, r3
 8014bd8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014bdc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014be0:	7a4a      	ldrb	r2, [r1, #9]
 8014be2:	7a89      	ldrb	r1, [r1, #10]
 8014be4:	fa52 f283 	uxtab	r2, r2, r3
 8014be8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014bec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014bf0:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8014bf4:	b2db      	uxtb	r3, r3
 8014bf6:	4599      	cmp	r9, r3
 8014bf8:	f47f af18 	bne.w	8014a2c <dir_read.constprop.0+0x258>
 8014bfc:	e641      	b.n	8014882 <dir_read.constprop.0+0xae>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014bfe:	4617      	mov	r7, r2
 8014c00:	e622      	b.n	8014848 <dir_read.constprop.0+0x74>
 8014c02:	bf00      	nop

08014c04 <sync_fs>:
{
 8014c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014c06:	78c3      	ldrb	r3, [r0, #3]
{
 8014c08:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014c0a:	b95b      	cbnz	r3, 8014c24 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014c0c:	7823      	ldrb	r3, [r4, #0]
 8014c0e:	2b03      	cmp	r3, #3
 8014c10:	d029      	beq.n	8014c66 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014c12:	2200      	movs	r2, #0
 8014c14:	7860      	ldrb	r0, [r4, #1]
 8014c16:	4611      	mov	r1, r2
 8014c18:	f7ff f9a6 	bl	8013f68 <disk_ioctl>
			res = FR_DISK_ERR;
 8014c1c:	3800      	subs	r0, #0
 8014c1e:	bf18      	it	ne
 8014c20:	2001      	movne	r0, #1
}
 8014c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8014c24:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014c26:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	7840      	ldrb	r0, [r0, #1]
 8014c2e:	462a      	mov	r2, r5
 8014c30:	4639      	mov	r1, r7
 8014c32:	f7ff f98b 	bl	8013f4c <disk_write>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	d150      	bne.n	8014cdc <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014c3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014c3c:	69e3      	ldr	r3, [r4, #28]
 8014c3e:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8014c40:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d2e2      	bcs.n	8014c0c <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014c46:	78a6      	ldrb	r6, [r4, #2]
 8014c48:	2e01      	cmp	r6, #1
 8014c4a:	d801      	bhi.n	8014c50 <sync_fs+0x4c>
 8014c4c:	e7de      	b.n	8014c0c <sync_fs+0x8>
					wsect += fs->fsize;
 8014c4e:	69e3      	ldr	r3, [r4, #28]
 8014c50:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014c52:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8014c54:	2301      	movs	r3, #1
 8014c56:	4639      	mov	r1, r7
 8014c58:	462a      	mov	r2, r5
 8014c5a:	7860      	ldrb	r0, [r4, #1]
 8014c5c:	f7ff f976 	bl	8013f4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014c60:	2e01      	cmp	r6, #1
 8014c62:	d1f4      	bne.n	8014c4e <sync_fs+0x4a>
 8014c64:	e7d2      	b.n	8014c0c <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014c66:	7925      	ldrb	r5, [r4, #4]
 8014c68:	2d01      	cmp	r5, #1
 8014c6a:	d1d2      	bne.n	8014c12 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8014c6c:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8014c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c74:	2100      	movs	r1, #0
 8014c76:	4630      	mov	r0, r6
 8014c78:	f00d fb30 	bl	80222dc <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8014c7c:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014c80:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014c82:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8014c84:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014c88:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8014c8a:	4815      	ldr	r0, [pc, #84]	; (8014ce0 <sync_fs+0xdc>)
 8014c8c:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 8014c90:	6360      	str	r0, [r4, #52]	; 0x34
 8014c92:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
 8014c96:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8014c9a:	3020      	adds	r0, #32
 8014c9c:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8014ca0:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8014ca2:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
 8014ca6:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8014ca8:	0e12      	lsrs	r2, r2, #24
 8014caa:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014cae:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
 8014cb0:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8014cb4:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
 8014cb6:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8014cb8:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
 8014cbc:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8014cbe:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 8014cc2:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8014cc4:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 8014cc6:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8014cc8:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 8014ccc:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014cd0:	7860      	ldrb	r0, [r4, #1]
 8014cd2:	f7ff f93b 	bl	8013f4c <disk_write>
			fs->fsi_flag = 0;
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	7123      	strb	r3, [r4, #4]
 8014cda:	e79a      	b.n	8014c12 <sync_fs+0xe>
			res = FR_DISK_ERR;
 8014cdc:	2001      	movs	r0, #1
}
 8014cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ce0:	41615252 	.word	0x41615252

08014ce4 <create_chain>:
{
 8014ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ce8:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
 8014cea:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 8014cec:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
 8014cf0:	2900      	cmp	r1, #0
 8014cf2:	f040 80b4 	bne.w	8014e5e <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014cf6:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014cfa:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014cfe:	b9ce      	cbnz	r6, 8014d34 <create_chain+0x50>
 8014d00:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 8014d02:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8014d04:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014d06:	429c      	cmp	r4, r3
 8014d08:	d318      	bcc.n	8014d3c <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 8014d0a:	2e01      	cmp	r6, #1
 8014d0c:	f000 80a3 	beq.w	8014e56 <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014d10:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
 8014d14:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014d16:	69ab      	ldr	r3, [r5, #24]
 8014d18:	42a3      	cmp	r3, r4
 8014d1a:	d907      	bls.n	8014d2c <create_chain+0x48>
		switch (fs->fs_type) {
 8014d1c:	782b      	ldrb	r3, [r5, #0]
 8014d1e:	2b02      	cmp	r3, #2
 8014d20:	f000 8088 	beq.w	8014e34 <create_chain+0x150>
 8014d24:	2b03      	cmp	r3, #3
 8014d26:	d044      	beq.n	8014db2 <create_chain+0xce>
 8014d28:	2b01      	cmp	r3, #1
 8014d2a:	d00c      	beq.n	8014d46 <create_chain+0x62>
 8014d2c:	2401      	movs	r4, #1
}
 8014d2e:	4620      	mov	r0, r4
 8014d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014d34:	42b3      	cmp	r3, r6
 8014d36:	bf98      	it	ls
 8014d38:	2601      	movls	r6, #1
 8014d3a:	e7e2      	b.n	8014d02 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014d3c:	2c01      	cmp	r4, #1
 8014d3e:	f8da 5000 	ldr.w	r5, [sl]
 8014d42:	d9f3      	bls.n	8014d2c <create_chain+0x48>
 8014d44:	e7e7      	b.n	8014d16 <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 8014d46:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014d4c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d4e:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014d52:	4291      	cmp	r1, r2
 8014d54:	d005      	beq.n	8014d62 <create_chain+0x7e>
 8014d56:	4628      	mov	r0, r5
 8014d58:	f7ff fa46 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d5c:	bb20      	cbnz	r0, 8014da8 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014d60:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8014d62:	f107 0b01 	add.w	fp, r7, #1
 8014d66:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d6a:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8014d6e:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014d70:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8014d72:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014d76:	d003      	beq.n	8014d80 <create_chain+0x9c>
 8014d78:	4628      	mov	r0, r5
 8014d7a:	f7ff fa35 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d7e:	b998      	cbnz	r0, 8014da8 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014d80:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014d84:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8014d86:	445d      	add	r5, fp
 8014d88:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8014d8c:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014d90:	d575      	bpl.n	8014e7e <create_chain+0x19a>
 8014d92:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 8014d94:	b30b      	cbz	r3, 8014dda <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014d96:	2b01      	cmp	r3, #1
 8014d98:	d0c8      	beq.n	8014d2c <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 8014d9a:	42a6      	cmp	r6, r4
 8014d9c:	d05b      	beq.n	8014e56 <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014d9e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8014da2:	e7af      	b.n	8014d04 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014da4:	2801      	cmp	r0, #1
 8014da6:	d1c1      	bne.n	8014d2c <create_chain+0x48>
 8014da8:	f04f 34ff 	mov.w	r4, #4294967295
}
 8014dac:	4620      	mov	r0, r4
 8014dae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014db2:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014db4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014db6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014dba:	4299      	cmp	r1, r3
 8014dbc:	d004      	beq.n	8014dc8 <create_chain+0xe4>
 8014dbe:	4628      	mov	r0, r5
 8014dc0:	f7ff fa12 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014dc4:	2800      	cmp	r0, #0
 8014dc6:	d1ef      	bne.n	8014da8 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014dc8:	00a3      	lsls	r3, r4, #2
 8014dca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8014dce:	441d      	add	r5, r3
 8014dd0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014dd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d1dd      	bne.n	8014d96 <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014dda:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8014dde:	42a3      	cmp	r3, r4
 8014de0:	d9a4      	bls.n	8014d2c <create_chain+0x48>
 8014de2:	f04f 32ff 	mov.w	r2, #4294967295
 8014de6:	4621      	mov	r1, r4
 8014de8:	4648      	mov	r0, r9
 8014dea:	f7ff fbb5 	bl	8014558 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8014dee:	b970      	cbnz	r0, 8014e0e <create_chain+0x12a>
 8014df0:	f1b8 0f00 	cmp.w	r8, #0
 8014df4:	d00b      	beq.n	8014e0e <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014df6:	f1b8 0f01 	cmp.w	r8, #1
 8014dfa:	d097      	beq.n	8014d2c <create_chain+0x48>
 8014dfc:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8014e00:	4598      	cmp	r8, r3
 8014e02:	d293      	bcs.n	8014d2c <create_chain+0x48>
 8014e04:	4622      	mov	r2, r4
 8014e06:	4641      	mov	r1, r8
 8014e08:	4648      	mov	r0, r9
 8014e0a:	f7ff fba5 	bl	8014558 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	d1c8      	bne.n	8014da4 <create_chain+0xc0>
		fs->last_clst = ncl;
 8014e12:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014e16:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
 8014e1a:	3b02      	subs	r3, #2
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d802      	bhi.n	8014e26 <create_chain+0x142>
 8014e20:	3a01      	subs	r2, #1
 8014e22:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
 8014e26:	f899 3004 	ldrb.w	r3, [r9, #4]
 8014e2a:	f043 0301 	orr.w	r3, r3, #1
 8014e2e:	f889 3004 	strb.w	r3, [r9, #4]
 8014e32:	e77c      	b.n	8014d2e <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014e34:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014e36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014e38:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014e3c:	4299      	cmp	r1, r3
 8014e3e:	d004      	beq.n	8014e4a <create_chain+0x166>
 8014e40:	4628      	mov	r0, r5
 8014e42:	f7ff f9d1 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014e46:	2800      	cmp	r0, #0
 8014e48:	d1ae      	bne.n	8014da8 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014e4a:	0063      	lsls	r3, r4, #1
 8014e4c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014e50:	441d      	add	r5, r3
 8014e52:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 8014e54:	e79e      	b.n	8014d94 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 8014e56:	2400      	movs	r4, #0
}
 8014e58:	4620      	mov	r0, r4
 8014e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014e5e:	4648      	mov	r0, r9
 8014e60:	f7ff fc14 	bl	801468c <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014e64:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014e66:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014e68:	f67f af60 	bls.w	8014d2c <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014e6c:	1c41      	adds	r1, r0, #1
 8014e6e:	d09b      	beq.n	8014da8 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014e70:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8014e74:	4283      	cmp	r3, r0
 8014e76:	f63f af5a 	bhi.w	8014d2e <create_chain+0x4a>
 8014e7a:	4646      	mov	r6, r8
 8014e7c:	e741      	b.n	8014d02 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014e82:	e787      	b.n	8014d94 <create_chain+0xb0>

08014e84 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014e84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8014e88:	d274      	bcs.n	8014f74 <dir_sdi+0xf0>
 8014e8a:	06ca      	lsls	r2, r1, #27
{
 8014e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e90:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014e92:	d151      	bne.n	8014f38 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014e94:	6885      	ldr	r5, [r0, #8]
 8014e96:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 8014e98:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 8014e9c:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014e9e:	2d00      	cmp	r5, #0
 8014ea0:	d04d      	beq.n	8014f3e <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014ea2:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014ea6:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014eaa:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8014eae:	f0c0 808e 	bcc.w	8014fce <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014eb2:	2d01      	cmp	r5, #1
 8014eb4:	d040      	beq.n	8014f38 <dir_sdi+0xb4>
 8014eb6:	4647      	mov	r7, r8
 8014eb8:	e03b      	b.n	8014f32 <dir_sdi+0xae>
		switch (fs->fs_type) {
 8014eba:	783b      	ldrb	r3, [r7, #0]
 8014ebc:	2b02      	cmp	r3, #2
 8014ebe:	d073      	beq.n	8014fa8 <dir_sdi+0x124>
 8014ec0:	2b03      	cmp	r3, #3
 8014ec2:	d05f      	beq.n	8014f84 <dir_sdi+0x100>
 8014ec4:	2b01      	cmp	r3, #1
 8014ec6:	d137      	bne.n	8014f38 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 8014ec8:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014ed0:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014ed4:	4291      	cmp	r1, r2
 8014ed6:	d006      	beq.n	8014ee6 <dir_sdi+0x62>
 8014ed8:	4638      	mov	r0, r7
 8014eda:	f7ff f985 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014ede:	2800      	cmp	r0, #0
 8014ee0:	d172      	bne.n	8014fc8 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8014ee6:	f10a 0b01 	add.w	fp, sl, #1
 8014eea:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014eee:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8014ef2:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014ef4:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8014ef6:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014efa:	d004      	beq.n	8014f06 <dir_sdi+0x82>
 8014efc:	4638      	mov	r0, r7
 8014efe:	f7ff f973 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014f02:	2800      	cmp	r0, #0
 8014f04:	d160      	bne.n	8014fc8 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014f06:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 8014f0a:	445f      	add	r7, fp
 8014f0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014f10:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014f14:	07eb      	lsls	r3, r5, #31
 8014f16:	d568      	bpl.n	8014fea <dir_sdi+0x166>
 8014f18:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014f1c:	2d01      	cmp	r5, #1
 8014f1e:	d90b      	bls.n	8014f38 <dir_sdi+0xb4>
 8014f20:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8014f24:	42ab      	cmp	r3, r5
 8014f26:	d907      	bls.n	8014f38 <dir_sdi+0xb4>
			ofs -= csz;
 8014f28:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8014f2c:	45a1      	cmp	r9, r4
 8014f2e:	d850      	bhi.n	8014fd2 <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014f30:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014f32:	69bb      	ldr	r3, [r7, #24]
 8014f34:	42ab      	cmp	r3, r5
 8014f36:	d8c0      	bhi.n	8014eba <dir_sdi+0x36>
		switch (fs->fs_type) {
 8014f38:	2002      	movs	r0, #2
}
 8014f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014f3e:	f898 3000 	ldrb.w	r3, [r8]
 8014f42:	2b02      	cmp	r3, #2
 8014f44:	d818      	bhi.n	8014f78 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014f46:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8014f4a:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8014f4e:	d9f3      	bls.n	8014f38 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 8014f50:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8014f54:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8014f56:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014f58:	2a00      	cmp	r2, #0
 8014f5a:	d0ed      	beq.n	8014f38 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014f5c:	f108 0834 	add.w	r8, r8, #52	; 0x34
 8014f60:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014f64:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
 8014f68:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014f6a:	4443      	add	r3, r8
 8014f6c:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8014f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8014f74:	2002      	movs	r0, #2
}
 8014f76:	4770      	bx	lr
		clst = fs->dirbase;
 8014f78:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d0e2      	beq.n	8014f46 <dir_sdi+0xc2>
 8014f80:	461d      	mov	r5, r3
 8014f82:	e78e      	b.n	8014ea2 <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014f88:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014f8c:	4299      	cmp	r1, r3
 8014f8e:	d003      	beq.n	8014f98 <dir_sdi+0x114>
 8014f90:	4638      	mov	r0, r7
 8014f92:	f7ff f929 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014f96:	b9b8      	cbnz	r0, 8014fc8 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014f98:	00ad      	lsls	r5, r5, #2
 8014f9a:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8014f9e:	442f      	add	r7, r5
 8014fa0:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014fa2:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8014fa6:	e7b9      	b.n	8014f1c <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014fac:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014fb0:	4299      	cmp	r1, r3
 8014fb2:	d003      	beq.n	8014fbc <dir_sdi+0x138>
 8014fb4:	4638      	mov	r0, r7
 8014fb6:	f7ff f917 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014fba:	b928      	cbnz	r0, 8014fc8 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014fbc:	006d      	lsls	r5, r5, #1
 8014fbe:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8014fc2:	442f      	add	r7, r5
 8014fc4:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
 8014fc6:	e7a9      	b.n	8014f1c <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014fc8:	2001      	movs	r0, #1
}
 8014fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014fce:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8014fd2:	3b02      	subs	r3, #2
	clst -= 2;
 8014fd4:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014fd6:	4299      	cmp	r1, r3
 8014fd8:	d20a      	bcs.n	8014ff0 <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
 8014fda:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8014fde:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014fe2:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
 8014fe6:	61f2      	str	r2, [r6, #28]
 8014fe8:	e7b5      	b.n	8014f56 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014fea:	f3ca 050b 	ubfx	r5, sl, #0, #12
 8014fee:	e795      	b.n	8014f1c <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014ff6:	e79f      	b.n	8014f38 <dir_sdi+0xb4>

08014ff8 <dir_find>:
{
 8014ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014ffc:	2100      	movs	r1, #0
{
 8014ffe:	b085      	sub	sp, #20
 8015000:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8015002:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015006:	f7ff ff3d 	bl	8014e84 <dir_sdi>
	if (res != FR_OK) return res;
 801500a:	4607      	mov	r7, r0
 801500c:	b9e8      	cbnz	r0, 801504a <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801500e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8015012:	f04f 33ff 	mov.w	r3, #4294967295
		res = move_window(fs, dp->sect);
 8015016:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015018:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801501a:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 801501c:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 8015020:	42b5      	cmp	r5, r6
 8015022:	d018      	beq.n	8015056 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015024:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015028:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801502c:	2b00      	cmp	r3, #0
 801502e:	f040 8088 	bne.w	8015142 <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015032:	2301      	movs	r3, #1
 8015034:	4632      	mov	r2, r6
 8015036:	f898 0001 	ldrb.w	r0, [r8, #1]
 801503a:	f7fe ff79 	bl	8013f30 <disk_read>
 801503e:	b140      	cbz	r0, 8015052 <dir_find+0x5a>
			fs->winsect = sector;
 8015040:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8015044:	2701      	movs	r7, #1
			fs->winsect = sector;
 8015046:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 801504a:	4638      	mov	r0, r7
 801504c:	b005      	add	sp, #20
 801504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8015052:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8015056:	6a26      	ldr	r6, [r4, #32]
 8015058:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801505a:	b34d      	cbz	r5, 80150b0 <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801505c:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801505e:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015060:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8015064:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015066:	d004      	beq.n	8015072 <dir_find+0x7a>
 8015068:	0717      	lsls	r7, r2, #28
 801506a:	d526      	bpl.n	80150ba <dir_find+0xc2>
 801506c:	2b0f      	cmp	r3, #15
 801506e:	f000 8093 	beq.w	8015198 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015072:	f04f 33ff 	mov.w	r3, #4294967295
 8015076:	f04f 0aff 	mov.w	sl, #255	; 0xff
 801507a:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801507c:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801507e:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015080:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015082:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8015086:	d213      	bcs.n	80150b0 <dir_find+0xb8>
 8015088:	b196      	cbz	r6, 80150b0 <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801508a:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 801508e:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015090:	b94b      	cbnz	r3, 80150a6 <dir_find+0xae>
		dp->sect++;				/* Next sector */
 8015092:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 8015094:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8015096:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8015098:	2900      	cmp	r1, #0
 801509a:	d15e      	bne.n	801515a <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801509c:	893a      	ldrh	r2, [r7, #8]
 801509e:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 80150a2:	f240 8133 	bls.w	801530c <dir_find+0x314>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80150a6:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 80150a8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80150aa:	443b      	add	r3, r7
 80150ac:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 80150ae:	e7b5      	b.n	801501c <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80150b0:	2704      	movs	r7, #4
}
 80150b2:	4638      	mov	r0, r7
 80150b4:	b005      	add	sp, #20
 80150b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 80150ba:	2b0f      	cmp	r3, #15
 80150bc:	d06c      	beq.n	8015198 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80150be:	f1ba 0f00 	cmp.w	sl, #0
 80150c2:	f000 80d5 	beq.w	8015270 <dir_find+0x278>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80150c6:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
 80150ca:	f01a 0a01 	ands.w	sl, sl, #1
 80150ce:	d1d0      	bne.n	8015072 <dir_find+0x7a>
	} while (--cnt && r == 0);
 80150d0:	7832      	ldrb	r2, [r6, #0]
 80150d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80150d6:	429a      	cmp	r2, r3
 80150d8:	d1cb      	bne.n	8015072 <dir_find+0x7a>
 80150da:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80150de:	7873      	ldrb	r3, [r6, #1]
 80150e0:	429a      	cmp	r2, r3
 80150e2:	d1c6      	bne.n	8015072 <dir_find+0x7a>
 80150e4:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80150e8:	78b3      	ldrb	r3, [r6, #2]
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d1c1      	bne.n	8015072 <dir_find+0x7a>
 80150ee:	78f2      	ldrb	r2, [r6, #3]
 80150f0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d1bc      	bne.n	8015072 <dir_find+0x7a>
 80150f8:	7932      	ldrb	r2, [r6, #4]
 80150fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80150fe:	429a      	cmp	r2, r3
 8015100:	d1b7      	bne.n	8015072 <dir_find+0x7a>
 8015102:	7972      	ldrb	r2, [r6, #5]
 8015104:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8015108:	429a      	cmp	r2, r3
 801510a:	d1b2      	bne.n	8015072 <dir_find+0x7a>
 801510c:	79b2      	ldrb	r2, [r6, #6]
 801510e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8015112:	429a      	cmp	r2, r3
 8015114:	d1ad      	bne.n	8015072 <dir_find+0x7a>
 8015116:	79f2      	ldrb	r2, [r6, #7]
 8015118:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801511c:	429a      	cmp	r2, r3
 801511e:	d1a8      	bne.n	8015072 <dir_find+0x7a>
 8015120:	7a32      	ldrb	r2, [r6, #8]
 8015122:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015126:	429a      	cmp	r2, r3
 8015128:	d1a3      	bne.n	8015072 <dir_find+0x7a>
 801512a:	7a72      	ldrb	r2, [r6, #9]
 801512c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015130:	429a      	cmp	r2, r3
 8015132:	d19e      	bne.n	8015072 <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015134:	7ab2      	ldrb	r2, [r6, #10]
 8015136:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801513a:	429a      	cmp	r2, r3
 801513c:	d199      	bne.n	8015072 <dir_find+0x7a>
 801513e:	4657      	mov	r7, sl
 8015140:	e783      	b.n	801504a <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015142:	2301      	movs	r3, #1
 8015144:	462a      	mov	r2, r5
 8015146:	f898 0001 	ldrb.w	r0, [r8, #1]
 801514a:	9100      	str	r1, [sp, #0]
 801514c:	f7fe fefe 	bl	8013f4c <disk_write>
 8015150:	9900      	ldr	r1, [sp, #0]
 8015152:	2800      	cmp	r0, #0
 8015154:	d06c      	beq.n	8015230 <dir_find+0x238>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015156:	2701      	movs	r7, #1
 8015158:	e777      	b.n	801504a <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801515a:	897a      	ldrh	r2, [r7, #10]
 801515c:	3a01      	subs	r2, #1
 801515e:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8015162:	d1a0      	bne.n	80150a6 <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015164:	4638      	mov	r0, r7
 8015166:	9300      	str	r3, [sp, #0]
 8015168:	f7ff fa90 	bl	801468c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801516c:	2801      	cmp	r0, #1
 801516e:	f240 80d1 	bls.w	8015314 <dir_find+0x31c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015172:	1c43      	adds	r3, r0, #1
 8015174:	d0ef      	beq.n	8015156 <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015176:	69ba      	ldr	r2, [r7, #24]
 8015178:	4290      	cmp	r0, r2
 801517a:	f080 80c7 	bcs.w	801530c <dir_find+0x314>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801517e:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8015180:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8015182:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015184:	9b00      	ldr	r3, [sp, #0]
 8015186:	4290      	cmp	r0, r2
 8015188:	f080 80c6 	bcs.w	8015318 <dir_find+0x320>
	return clst * fs->csize + fs->database;
 801518c:	897a      	ldrh	r2, [r7, #10]
 801518e:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8015190:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 8015194:	61e6      	str	r6, [r4, #28]
 8015196:	e786      	b.n	80150a6 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8015198:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801519c:	0658      	lsls	r0, r3, #25
 801519e:	f53f af6d 	bmi.w	801507c <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80151a2:	0669      	lsls	r1, r5, #25
 80151a4:	d53f      	bpl.n	8015226 <dir_find+0x22e>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80151a6:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80151a8:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 80151ac:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80151b0:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80151b2:	7b73      	ldrb	r3, [r6, #13]
 80151b4:	454b      	cmp	r3, r9
 80151b6:	d138      	bne.n	801522a <dir_find+0x232>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80151b8:	8b73      	ldrh	r3, [r6, #26]
 80151ba:	bbb3      	cbnz	r3, 801522a <dir_find+0x232>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80151bc:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80151be:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80151c0:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80151c4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 80151c8:	f8df a174 	ldr.w	sl, [pc, #372]	; 8015340 <dir_find+0x348>
 80151cc:	9502      	str	r5, [sp, #8]
 80151ce:	4615      	mov	r5, r2
 80151d0:	3f01      	subs	r7, #1
 80151d2:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80151d6:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80151d8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80151dc:	f8cd 8000 	str.w	r8, [sp]
 80151e0:	9401      	str	r4, [sp, #4]
 80151e2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80151e6:	e010      	b.n	801520a <dir_find+0x212>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80151e8:	2ffe      	cmp	r7, #254	; 0xfe
 80151ea:	4620      	mov	r0, r4
 80151ec:	d816      	bhi.n	801521c <dir_find+0x224>
 80151ee:	f7fe fe39 	bl	8013e64 <ff_wtoupper>
 80151f2:	4680      	mov	r8, r0
 80151f4:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 80151f8:	3701      	adds	r7, #1
 80151fa:	f7fe fe33 	bl	8013e64 <ff_wtoupper>
 80151fe:	4580      	cmp	r8, r0
 8015200:	4621      	mov	r1, r4
 8015202:	d10b      	bne.n	801521c <dir_find+0x224>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015204:	45d3      	cmp	fp, sl
 8015206:	f000 8089 	beq.w	801531c <dir_find+0x324>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801520a:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
 801520e:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 8015210:	2900      	cmp	r1, #0
 8015212:	d1e9      	bne.n	80151e8 <dir_find+0x1f0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015218:	429c      	cmp	r4, r3
 801521a:	d0f3      	beq.n	8015204 <dir_find+0x20c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801521c:	e9dd 8400 	ldrd	r8, r4, [sp]
 8015220:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8015224:	e72a      	b.n	801507c <dir_find+0x84>
 8015226:	45aa      	cmp	sl, r5
 8015228:	d0c3      	beq.n	80151b2 <dir_find+0x1ba>
 801522a:	f04f 0aff 	mov.w	sl, #255	; 0xff
 801522e:	e725      	b.n	801507c <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015230:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8015234:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015238:	1aea      	subs	r2, r5, r3
 801523a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801523e:	429a      	cmp	r2, r3
 8015240:	f4bf aef7 	bcs.w	8015032 <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015244:	f898 7002 	ldrb.w	r7, [r8, #2]
 8015248:	2f01      	cmp	r7, #1
 801524a:	f67f aef2 	bls.w	8015032 <dir_find+0x3a>
 801524e:	468b      	mov	fp, r1
 8015250:	e001      	b.n	8015256 <dir_find+0x25e>
					wsect += fs->fsize;
 8015252:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8015256:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015258:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801525a:	2301      	movs	r3, #1
 801525c:	4659      	mov	r1, fp
 801525e:	462a      	mov	r2, r5
 8015260:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015264:	f7fe fe72 	bl	8013f4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015268:	2f01      	cmp	r7, #1
 801526a:	d1f2      	bne.n	8015252 <dir_find+0x25a>
 801526c:	4659      	mov	r1, fp
 801526e:	e6e0      	b.n	8015032 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015270:	7830      	ldrb	r0, [r6, #0]
 8015272:	7872      	ldrb	r2, [r6, #1]
 8015274:	01c1      	lsls	r1, r0, #7
 8015276:	78b3      	ldrb	r3, [r6, #2]
 8015278:	f896 b003 	ldrb.w	fp, [r6, #3]
 801527c:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 8015280:	7937      	ldrb	r7, [r6, #4]
 8015282:	f896 e005 	ldrb.w	lr, [r6, #5]
 8015286:	4411      	add	r1, r2
 8015288:	f896 c006 	ldrb.w	ip, [r6, #6]
 801528c:	7a32      	ldrb	r2, [r6, #8]
 801528e:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8015292:	7a75      	ldrb	r5, [r6, #9]
 8015294:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8015298:	fa53 f180 	uxtab	r1, r3, r0
 801529c:	79f3      	ldrb	r3, [r6, #7]
 801529e:	f3c1 0046 	ubfx	r0, r1, #1, #7
 80152a2:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 80152a6:	7ab1      	ldrb	r1, [r6, #10]
 80152a8:	fa5b fb80 	uxtab	fp, fp, r0
 80152ac:	f3cb 0046 	ubfx	r0, fp, #1, #7
 80152b0:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
 80152b4:	fa57 f780 	uxtab	r7, r7, r0
 80152b8:	f3c7 0046 	ubfx	r0, r7, #1, #7
 80152bc:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 80152c0:	fa5e f080 	uxtab	r0, lr, r0
 80152c4:	f3c0 0746 	ubfx	r7, r0, #1, #7
 80152c8:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
 80152cc:	fa5c f780 	uxtab	r7, ip, r0
 80152d0:	f3c7 0046 	ubfx	r0, r7, #1, #7
 80152d4:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 80152d8:	fa53 f080 	uxtab	r0, r3, r0
 80152dc:	f3c0 0346 	ubfx	r3, r0, #1, #7
 80152e0:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 80152e4:	fa52 f383 	uxtab	r3, r2, r3
 80152e8:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80152ec:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 80152f0:	fa55 f283 	uxtab	r2, r5, r3
 80152f4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80152f8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80152fc:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015300:	b2db      	uxtb	r3, r3
 8015302:	4599      	cmp	r9, r3
 8015304:	f47f aedf 	bne.w	80150c6 <dir_find+0xce>
 8015308:	4657      	mov	r7, sl
 801530a:	e69e      	b.n	801504a <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
 801530c:	2300      	movs	r3, #0
 801530e:	2704      	movs	r7, #4
 8015310:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 8015312:	e69a      	b.n	801504a <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015314:	2702      	movs	r7, #2
 8015316:	e698      	b.n	801504a <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015318:	461e      	mov	r6, r3
 801531a:	e73b      	b.n	8015194 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801531c:	7833      	ldrb	r3, [r6, #0]
 801531e:	f8dd 8000 	ldr.w	r8, [sp]
 8015322:	065a      	lsls	r2, r3, #25
 8015324:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 8015328:	d500      	bpl.n	801532c <dir_find+0x334>
 801532a:	b919      	cbnz	r1, 8015334 <dir_find+0x33c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801532c:	3d01      	subs	r5, #1
 801532e:	fa5f fa85 	uxtb.w	sl, r5
 8015332:	e6a3      	b.n	801507c <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015334:	9b03      	ldr	r3, [sp, #12]
 8015336:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d0f6      	beq.n	801532c <dir_find+0x334>
 801533e:	e774      	b.n	801522a <dir_find+0x232>
 8015340:	080608e4 	.word	0x080608e4

08015344 <follow_path>:
{
 8015344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015348:	780b      	ldrb	r3, [r1, #0]
{
 801534a:	b083      	sub	sp, #12
 801534c:	4688      	mov	r8, r1
 801534e:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015350:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 8015352:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015356:	d103      	bne.n	8015360 <follow_path+0x1c>
 8015358:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 801535c:	2b2f      	cmp	r3, #47	; 0x2f
 801535e:	d0fb      	beq.n	8015358 <follow_path+0x14>
 8015360:	2b5c      	cmp	r3, #92	; 0x5c
 8015362:	d0f9      	beq.n	8015358 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 8015364:	2100      	movs	r1, #0
 8015366:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015368:	f898 3000 	ldrb.w	r3, [r8]
 801536c:	2b1f      	cmp	r3, #31
 801536e:	f240 8148 	bls.w	8015602 <follow_path+0x2be>
 8015372:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 8015374:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015376:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 8015378:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 801537a:	d929      	bls.n	80153d0 <follow_path+0x8c>
 801537c:	f1a5 0902 	sub.w	r9, r5, #2
 8015380:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 8015382:	2401      	movs	r4, #1
 8015384:	e008      	b.n	8015398 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 8015386:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 801538a:	1c63      	adds	r3, r4, #1
 801538c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8015390:	281f      	cmp	r0, #31
 8015392:	f240 80f7 	bls.w	8015584 <follow_path+0x240>
		w = p[si++];					/* Get a character */
 8015396:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015398:	282f      	cmp	r0, #47	; 0x2f
 801539a:	f104 3aff 	add.w	sl, r4, #4294967295
 801539e:	d01d      	beq.n	80153dc <follow_path+0x98>
 80153a0:	285c      	cmp	r0, #92	; 0x5c
 80153a2:	d01b      	beq.n	80153dc <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80153a4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80153a8:	d00e      	beq.n	80153c8 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80153aa:	2101      	movs	r1, #1
 80153ac:	f7fe fd3c 	bl	8013e28 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80153b0:	b150      	cbz	r0, 80153c8 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80153b2:	287f      	cmp	r0, #127	; 0x7f
 80153b4:	d8e7      	bhi.n	8015386 <follow_path+0x42>
	while (*str && *str != chr) str++;
 80153b6:	2322      	movs	r3, #34	; 0x22
 80153b8:	4aa5      	ldr	r2, [pc, #660]	; (8015650 <follow_path+0x30c>)
 80153ba:	e003      	b.n	80153c4 <follow_path+0x80>
 80153bc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d0e0      	beq.n	8015386 <follow_path+0x42>
 80153c4:	4298      	cmp	r0, r3
 80153c6:	d1f9      	bne.n	80153bc <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80153c8:	2006      	movs	r0, #6
}
 80153ca:	b003      	add	sp, #12
 80153cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 80153d0:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80153d2:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 80153d4:	802b      	strh	r3, [r5, #0]
}
 80153d6:	b003      	add	sp, #12
 80153d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80153dc:	f818 3004 	ldrb.w	r3, [r8, r4]
 80153e0:	eb08 0204 	add.w	r2, r8, r4
 80153e4:	2b5c      	cmp	r3, #92	; 0x5c
 80153e6:	d002      	beq.n	80153ee <follow_path+0xaa>
 80153e8:	2b2f      	cmp	r3, #47	; 0x2f
 80153ea:	f040 811f 	bne.w	801562c <follow_path+0x2e8>
 80153ee:	1c63      	adds	r3, r4, #1
 80153f0:	4443      	add	r3, r8
 80153f2:	4698      	mov	r8, r3
 80153f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153f8:	2a2f      	cmp	r2, #47	; 0x2f
 80153fa:	d0fa      	beq.n	80153f2 <follow_path+0xae>
 80153fc:	2a5c      	cmp	r2, #92	; 0x5c
 80153fe:	d0f8      	beq.n	80153f2 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015400:	f1ba 0f00 	cmp.w	sl, #0
 8015404:	d0e4      	beq.n	80153d0 <follow_path+0x8c>
 8015406:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015408:	2400      	movs	r4, #0
 801540a:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 801540e:	e002      	b.n	8015416 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015410:	f1ba 0a01 	subs.w	sl, sl, #1
 8015414:	d0dc      	beq.n	80153d0 <follow_path+0x8c>
		w = lfn[di - 1];
 8015416:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 801541a:	2b20      	cmp	r3, #32
 801541c:	d0f8      	beq.n	8015410 <follow_path+0xcc>
 801541e:	2b2e      	cmp	r3, #46	; 0x2e
 8015420:	d0f6      	beq.n	8015410 <follow_path+0xcc>
		*d++ = (BYTE)val;
 8015422:	2320      	movs	r3, #32
 8015424:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8015428:	2100      	movs	r1, #0
 801542a:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 801542e:	627a      	str	r2, [r7, #36]	; 0x24
 8015430:	62ba      	str	r2, [r7, #40]	; 0x28
 8015432:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8015436:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801543a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801543e:	8828      	ldrh	r0, [r5, #0]
 8015440:	282e      	cmp	r0, #46	; 0x2e
 8015442:	d002      	beq.n	801544a <follow_path+0x106>
 8015444:	4298      	cmp	r0, r3
 8015446:	f040 80e5 	bne.w	8015614 <follow_path+0x2d0>
 801544a:	462a      	mov	r2, r5
 801544c:	2300      	movs	r3, #0
 801544e:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8015452:	461c      	mov	r4, r3
 8015454:	3301      	adds	r3, #1
 8015456:	2820      	cmp	r0, #32
 8015458:	d0f9      	beq.n	801544e <follow_path+0x10a>
 801545a:	282e      	cmp	r0, #46	; 0x2e
 801545c:	d0f7      	beq.n	801544e <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
 801545e:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015460:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 8015464:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8015468:	2a2e      	cmp	r2, #46	; 0x2e
 801546a:	d002      	beq.n	8015472 <follow_path+0x12e>
 801546c:	f1ba 0a01 	subs.w	sl, sl, #1
 8015470:	d1f8      	bne.n	8015464 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
 8015472:	b3b0      	cbz	r0, 80154e2 <follow_path+0x19e>
 8015474:	2208      	movs	r2, #8
 8015476:	4641      	mov	r1, r8
 8015478:	2300      	movs	r3, #0
 801547a:	46b8      	mov	r8, r7
 801547c:	462f      	mov	r7, r5
 801547e:	4615      	mov	r5, r2
 8015480:	4699      	mov	r9, r3
 8015482:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8015484:	2820      	cmp	r0, #32
 8015486:	d003      	beq.n	8015490 <follow_path+0x14c>
 8015488:	282e      	cmp	r0, #46	; 0x2e
 801548a:	d14d      	bne.n	8015528 <follow_path+0x1e4>
 801548c:	45a2      	cmp	sl, r4
 801548e:	d04b      	beq.n	8015528 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 8015490:	f046 0603 	orr.w	r6, r6, #3
 8015494:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 8015496:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 801549a:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 801549c:	2800      	cmp	r0, #0
 801549e:	d1f1      	bne.n	8015484 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80154a0:	4647      	mov	r7, r8
 80154a2:	4690      	mov	r8, r2
 80154a4:	462a      	mov	r2, r5
 80154a6:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80154aa:	29e5      	cmp	r1, #229	; 0xe5
 80154ac:	d102      	bne.n	80154b4 <follow_path+0x170>
 80154ae:	2105      	movs	r1, #5
 80154b0:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80154b4:	2a08      	cmp	r2, #8
 80154b6:	f000 8093 	beq.w	80155e0 <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80154ba:	f003 020c 	and.w	r2, r3, #12
 80154be:	2a0c      	cmp	r2, #12
 80154c0:	d065      	beq.n	801558e <follow_path+0x24a>
 80154c2:	f003 0303 	and.w	r3, r3, #3
 80154c6:	2b03      	cmp	r3, #3
 80154c8:	d061      	beq.n	801558e <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80154ca:	07b1      	lsls	r1, r6, #30
 80154cc:	d409      	bmi.n	80154e2 <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80154ce:	2b01      	cmp	r3, #1
 80154d0:	d102      	bne.n	80154d8 <follow_path+0x194>
 80154d2:	f046 0610 	orr.w	r6, r6, #16
 80154d6:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80154d8:	2a04      	cmp	r2, #4
 80154da:	d102      	bne.n	80154e2 <follow_path+0x19e>
 80154dc:	f046 0608 	orr.w	r6, r6, #8
 80154e0:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 80154e2:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80154e4:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80154e8:	f7ff fd86 	bl	8014ff8 <dir_find>
			ns = dp->fn[NSFLAG];
 80154ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80154f0:	2800      	cmp	r0, #0
 80154f2:	d158      	bne.n	80155a6 <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80154f4:	075a      	lsls	r2, r3, #29
 80154f6:	f53f af68 	bmi.w	80153ca <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80154fa:	79bb      	ldrb	r3, [r7, #6]
 80154fc:	06db      	lsls	r3, r3, #27
 80154fe:	f140 8097 	bpl.w	8015630 <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015502:	697a      	ldr	r2, [r7, #20]
 8015504:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8015508:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801550c:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 8015510:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015512:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 8015514:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8015516:	d102      	bne.n	801551e <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015518:	8a9b      	ldrh	r3, [r3, #20]
 801551a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801551e:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015520:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 8015522:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015526:	e725      	b.n	8015374 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8015528:	454d      	cmp	r5, r9
 801552a:	d91c      	bls.n	8015566 <follow_path+0x222>
 801552c:	ebaa 0104 	sub.w	r1, sl, r4
 8015530:	fab1 f181 	clz	r1, r1
 8015534:	0949      	lsrs	r1, r1, #5
 8015536:	b9b1      	cbnz	r1, 8015566 <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
 8015538:	287f      	cmp	r0, #127	; 0x7f
 801553a:	d83c      	bhi.n	80155b6 <follow_path+0x272>
	while (*str && *str != chr) str++;
 801553c:	212b      	movs	r1, #43	; 0x2b
 801553e:	f8df c118 	ldr.w	ip, [pc, #280]	; 8015658 <follow_path+0x314>
 8015542:	e003      	b.n	801554c <follow_path+0x208>
 8015544:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8015548:	2900      	cmp	r1, #0
 801554a:	d052      	beq.n	80155f2 <follow_path+0x2ae>
 801554c:	4281      	cmp	r1, r0
 801554e:	d1f9      	bne.n	8015544 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8015550:	f046 0603 	orr.w	r6, r6, #3
 8015554:	205f      	movs	r0, #95	; 0x5f
 8015556:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 8015558:	eb08 0109 	add.w	r1, r8, r9
 801555c:	f109 0901 	add.w	r9, r9, #1
 8015560:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8015564:	e797      	b.n	8015496 <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 8015566:	2d0b      	cmp	r5, #11
 8015568:	d064      	beq.n	8015634 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801556a:	45a2      	cmp	sl, r4
 801556c:	d003      	beq.n	8015576 <follow_path+0x232>
 801556e:	f046 0603 	orr.w	r6, r6, #3
 8015572:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 8015574:	d394      	bcc.n	80154a0 <follow_path+0x15c>
			b <<= 2; continue;
 8015576:	009b      	lsls	r3, r3, #2
 8015578:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801557a:	250b      	movs	r5, #11
 801557c:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 8015580:	b2db      	uxtb	r3, r3
 8015582:	e788      	b.n	8015496 <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
 8015584:	46a2      	mov	sl, r4
 8015586:	4498      	add	r8, r3
 8015588:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801558a:	2404      	movs	r4, #4
 801558c:	e73d      	b.n	801540a <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801558e:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 8015592:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015594:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015596:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 801559a:	f7ff fd2d 	bl	8014ff8 <dir_find>
			ns = dp->fn[NSFLAG];
 801559e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80155a2:	2800      	cmp	r0, #0
 80155a4:	d0a6      	beq.n	80154f4 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80155a6:	2804      	cmp	r0, #4
 80155a8:	f47f af0f 	bne.w	80153ca <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80155ac:	f013 0f04 	tst.w	r3, #4
 80155b0:	bf08      	it	eq
 80155b2:	2005      	moveq	r0, #5
 80155b4:	e709      	b.n	80153ca <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80155b6:	e9cd 3200 	strd	r3, r2, [sp]
 80155ba:	f7fe fc35 	bl	8013e28 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80155be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80155c2:	b918      	cbnz	r0, 80155cc <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
 80155c4:	f046 0602 	orr.w	r6, r6, #2
 80155c8:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80155ca:	e7c1      	b.n	8015550 <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80155cc:	4921      	ldr	r1, [pc, #132]	; (8015654 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 80155ce:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80155d2:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 80155d4:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80155d6:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80155da:	2800      	cmp	r0, #0
 80155dc:	d0b8      	beq.n	8015550 <follow_path+0x20c>
 80155de:	e7ad      	b.n	801553c <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
 80155e0:	009b      	lsls	r3, r3, #2
 80155e2:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80155e6:	2a0c      	cmp	r2, #12
 80155e8:	d0d1      	beq.n	801558e <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80155ea:	07b0      	lsls	r0, r6, #30
 80155ec:	f57f af74 	bpl.w	80154d8 <follow_path+0x194>
 80155f0:	e777      	b.n	80154e2 <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
 80155f2:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80155f6:	2919      	cmp	r1, #25
 80155f8:	d80f      	bhi.n	801561a <follow_path+0x2d6>
					b |= 2;
 80155fa:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 80155fe:	b2c0      	uxtb	r0, r0
 8015600:	e7aa      	b.n	8015558 <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
 8015602:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8015604:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8015606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 801560a:	b003      	add	sp, #12
 801560c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8015610:	f7ff bc38 	b.w	8014e84 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015614:	4626      	mov	r6, r4
 8015616:	2401      	movs	r4, #1
 8015618:	e722      	b.n	8015460 <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 801561a:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 801561e:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8015620:	bf9c      	itt	ls
 8015622:	3820      	subls	r0, #32
 8015624:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 8015628:	b2c0      	uxtb	r0, r0
 801562a:	e795      	b.n	8015558 <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801562c:	4690      	mov	r8, r2
 801562e:	e6e7      	b.n	8015400 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015630:	2005      	movs	r0, #5
 8015632:	e6ca      	b.n	80153ca <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 8015634:	4647      	mov	r7, r8
 8015636:	4690      	mov	r8, r2
 8015638:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801563c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 8015640:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015642:	2ae5      	cmp	r2, #229	; 0xe5
 8015644:	f47f af39 	bne.w	80154ba <follow_path+0x176>
 8015648:	2205      	movs	r2, #5
 801564a:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 801564e:	e734      	b.n	80154ba <follow_path+0x176>
 8015650:	08060850 	.word	0x08060850
 8015654:	08060864 	.word	0x08060864
 8015658:	0806085c 	.word	0x0806085c

0801565c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801565c:	2901      	cmp	r1, #1
{
 801565e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015662:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8015664:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015666:	d90f      	bls.n	8015688 <remove_chain+0x2c>
 8015668:	69ab      	ldr	r3, [r5, #24]
 801566a:	428b      	cmp	r3, r1
 801566c:	d90c      	bls.n	8015688 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801566e:	4606      	mov	r6, r0
 8015670:	4611      	mov	r1, r2
 8015672:	b962      	cbnz	r2, 801568e <remove_chain+0x32>
 8015674:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015676:	429c      	cmp	r4, r3
 8015678:	d206      	bcs.n	8015688 <remove_chain+0x2c>
		switch (fs->fs_type) {
 801567a:	783b      	ldrb	r3, [r7, #0]
 801567c:	2b02      	cmp	r3, #2
 801567e:	d072      	beq.n	8015766 <remove_chain+0x10a>
 8015680:	2b03      	cmp	r3, #3
 8015682:	d05d      	beq.n	8015740 <remove_chain+0xe4>
 8015684:	2b01      	cmp	r3, #1
 8015686:	d010      	beq.n	80156aa <remove_chain+0x4e>
 8015688:	2002      	movs	r0, #2
}
 801568a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801568e:	4293      	cmp	r3, r2
 8015690:	d9fa      	bls.n	8015688 <remove_chain+0x2c>
 8015692:	2a01      	cmp	r2, #1
 8015694:	d0f8      	beq.n	8015688 <remove_chain+0x2c>
 8015696:	f04f 32ff 	mov.w	r2, #4294967295
 801569a:	4628      	mov	r0, r5
 801569c:	f7fe ff5c 	bl	8014558 <put_fat.part.0>
		if (res != FR_OK) return res;
 80156a0:	2800      	cmp	r0, #0
 80156a2:	d1f2      	bne.n	801568a <remove_chain+0x2e>
 80156a4:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80156a6:	69bb      	ldr	r3, [r7, #24]
 80156a8:	e7e5      	b.n	8015676 <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
 80156aa:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80156ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80156b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80156b2:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80156b6:	4291      	cmp	r1, r2
 80156b8:	d006      	beq.n	80156c8 <remove_chain+0x6c>
 80156ba:	4638      	mov	r0, r7
 80156bc:	f7fe fd94 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80156c0:	2800      	cmp	r0, #0
 80156c2:	d161      	bne.n	8015788 <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80156c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80156c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80156c8:	f108 0901 	add.w	r9, r8, #1
 80156cc:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80156d0:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80156d4:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80156d6:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80156d8:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80156dc:	d004      	beq.n	80156e8 <remove_chain+0x8c>
 80156de:	4638      	mov	r0, r7
 80156e0:	f7fe fd82 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80156e4:	2800      	cmp	r0, #0
 80156e6:	d14f      	bne.n	8015788 <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80156e8:	f3c9 0908 	ubfx	r9, r9, #0, #9
 80156ec:	444f      	add	r7, r9
 80156ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80156f2:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80156f6:	07e3      	lsls	r3, r4, #31
 80156f8:	d548      	bpl.n	801578c <remove_chain+0x130>
 80156fa:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 80156fe:	f1b8 0f00 	cmp.w	r8, #0
 8015702:	d046      	beq.n	8015792 <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015704:	f1b8 0f01 	cmp.w	r8, #1
 8015708:	d0be      	beq.n	8015688 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801570a:	69ab      	ldr	r3, [r5, #24]
 801570c:	42a3      	cmp	r3, r4
 801570e:	d9bb      	bls.n	8015688 <remove_chain+0x2c>
 8015710:	2200      	movs	r2, #0
 8015712:	4621      	mov	r1, r4
 8015714:	4628      	mov	r0, r5
 8015716:	f7fe ff1f 	bl	8014558 <put_fat.part.0>
			if (res != FR_OK) return res;
 801571a:	2800      	cmp	r0, #0
 801571c:	d1b5      	bne.n	801568a <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801571e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8015722:	1e91      	subs	r1, r2, #2
 8015724:	428b      	cmp	r3, r1
 8015726:	d205      	bcs.n	8015734 <remove_chain+0xd8>
			fs->free_clst++;
 8015728:	3301      	adds	r3, #1
 801572a:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 801572c:	792b      	ldrb	r3, [r5, #4]
 801572e:	f043 0301 	orr.w	r3, r3, #1
 8015732:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015734:	4542      	cmp	r2, r8
 8015736:	d92c      	bls.n	8015792 <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015738:	6837      	ldr	r7, [r6, #0]
 801573a:	4644      	mov	r4, r8
 801573c:	69bb      	ldr	r3, [r7, #24]
 801573e:	e79a      	b.n	8015676 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015740:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015744:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015748:	4299      	cmp	r1, r3
 801574a:	d003      	beq.n	8015754 <remove_chain+0xf8>
 801574c:	4638      	mov	r0, r7
 801574e:	f7fe fd4b 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015752:	b9c8      	cbnz	r0, 8015788 <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015754:	00a3      	lsls	r3, r4, #2
 8015756:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 801575a:	441f      	add	r7, r3
 801575c:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015760:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8015764:	e7cb      	b.n	80156fe <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015766:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801576a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801576e:	4299      	cmp	r1, r3
 8015770:	d003      	beq.n	801577a <remove_chain+0x11e>
 8015772:	4638      	mov	r0, r7
 8015774:	f7fe fd38 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015778:	b930      	cbnz	r0, 8015788 <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801577a:	0063      	lsls	r3, r4, #1
 801577c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015780:	441f      	add	r7, r3
 8015782:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 8015786:	e7ba      	b.n	80156fe <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015788:	2001      	movs	r0, #1
 801578a:	e77e      	b.n	801568a <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801578c:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8015790:	e7b5      	b.n	80156fe <remove_chain+0xa2>
	return FR_OK;
 8015792:	2000      	movs	r0, #0
 8015794:	e779      	b.n	801568a <remove_chain+0x2e>
 8015796:	bf00      	nop

08015798 <dir_register>:
{
 8015798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801579c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 80157a0:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80157a2:	930a      	str	r3, [sp, #40]	; 0x28
 80157a4:	f013 03a0 	ands.w	r3, r3, #160	; 0xa0
 80157a8:	f040 835a 	bne.w	8015e60 <dir_register+0x6c8>
	FATFS *fs = dp->obj.fs;
 80157ac:	6802      	ldr	r2, [r0, #0]
 80157ae:	4682      	mov	sl, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80157b0:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	FATFS *fs = dp->obj.fs;
 80157b4:	9201      	str	r2, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80157b6:	f8bc 7000 	ldrh.w	r7, [ip]
 80157ba:	b137      	cbz	r7, 80157ca <dir_register+0x32>
 80157bc:	461f      	mov	r7, r3
 80157be:	4663      	mov	r3, ip
 80157c0:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80157c4:	3701      	adds	r7, #1
 80157c6:	2a00      	cmp	r2, #0
 80157c8:	d1fa      	bne.n	80157c0 <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 80157ca:	f10a 0524 	add.w	r5, sl, #36	; 0x24
			*d++ = *s++;
 80157ce:	ab12      	add	r3, sp, #72	; 0x48
 80157d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80157d4:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80157d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157da:	07d8      	lsls	r0, r3, #31
 80157dc:	f100 8097 	bmi.w	801590e <dir_register+0x176>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80157e0:	f013 0302 	ands.w	r3, r3, #2
 80157e4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80157e8:	f000 829b 	beq.w	8015d22 <dir_register+0x58a>
 80157ec:	4a76      	ldr	r2, [pc, #472]	; (80159c8 <dir_register+0x230>)
 80157ee:	f107 030c 	add.w	r3, r7, #12
	res = dir_sdi(dp, 0);
 80157f2:	2100      	movs	r1, #0
 80157f4:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80157f6:	fba2 2303 	umull	r2, r3, r2, r3
 80157fa:	089b      	lsrs	r3, r3, #2
 80157fc:	9302      	str	r3, [sp, #8]
 80157fe:	3301      	adds	r3, #1
 8015800:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8015802:	f7ff fb3f 	bl	8014e84 <dir_sdi>
	if (res == FR_OK) {
 8015806:	4683      	mov	fp, r0
 8015808:	2800      	cmp	r0, #0
 801580a:	f040 8295 	bne.w	8015d38 <dir_register+0x5a0>
			res = move_window(fs, dp->sect);
 801580e:	f8da 101c 	ldr.w	r1, [sl, #28]
		n = 0;
 8015812:	4680      	mov	r8, r0
						fs->wflag = 1;
 8015814:	9006      	str	r0, [sp, #24]
 8015816:	e029      	b.n	801586c <dir_register+0xd4>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015818:	fab3 f283 	clz	r2, r3
 801581c:	0952      	lsrs	r2, r2, #5
 801581e:	b3a3      	cbz	r3, 801588a <dir_register+0xf2>
				n = 0;					/* Not a blank entry. Restart to search */
 8015820:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015822:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015826:	f8da 101c 	ldr.w	r1, [sl, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801582a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801582c:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8015830:	f080 8285 	bcs.w	8015d3e <dir_register+0x5a6>
 8015834:	2900      	cmp	r1, #0
 8015836:	f000 8282 	beq.w	8015d3e <dir_register+0x5a6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801583a:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 801583e:	f8da 4000 	ldr.w	r4, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015842:	b967      	cbnz	r7, 801585e <dir_register+0xc6>
		dp->sect++;				/* Next sector */
 8015844:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
 8015846:	f8da 3018 	ldr.w	r3, [sl, #24]
		dp->sect++;				/* Next sector */
 801584a:	f8ca 101c 	str.w	r1, [sl, #28]
		if (!dp->clust) {		/* Static table */
 801584e:	2b00      	cmp	r3, #0
 8015850:	f040 82cd 	bne.w	8015dee <dir_register+0x656>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015854:	8922      	ldrh	r2, [r4, #8]
 8015856:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 801585a:	f240 83bb 	bls.w	8015fd4 <dir_register+0x83c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801585e:	f104 0634 	add.w	r6, r4, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015862:	443e      	add	r6, r7
	dp->dptr = ofs;						/* Current entry */
 8015864:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015868:	f8ca 6020 	str.w	r6, [sl, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801586c:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8015870:	428b      	cmp	r3, r1
 8015872:	d005      	beq.n	8015880 <dir_register+0xe8>
 8015874:	4648      	mov	r0, r9
 8015876:	f7fe fcb7 	bl	80141e8 <move_window.part.0>
			if (res != FR_OK) break;
 801587a:	2800      	cmp	r0, #0
 801587c:	f040 83b2 	bne.w	8015fe4 <dir_register+0x84c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015880:	f8da 3020 	ldr.w	r3, [sl, #32]
 8015884:	781b      	ldrb	r3, [r3, #0]
 8015886:	2be5      	cmp	r3, #229	; 0xe5
 8015888:	d1c6      	bne.n	8015818 <dir_register+0x80>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801588a:	f108 0801 	add.w	r8, r8, #1
 801588e:	9b03      	ldr	r3, [sp, #12]
 8015890:	4543      	cmp	r3, r8
 8015892:	d1c6      	bne.n	8015822 <dir_register+0x8a>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015894:	9b02      	ldr	r3, [sp, #8]
 8015896:	f8dd b018 	ldr.w	fp, [sp, #24]
 801589a:	2b00      	cmp	r3, #0
 801589c:	f040 82eb 	bne.w	8015e76 <dir_register+0x6de>
	if (sector != fs->winsect) {	/* Window offset changed? */
 80158a0:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
 80158a2:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80158a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158a8:	4299      	cmp	r1, r3
 80158aa:	d005      	beq.n	80158b8 <dir_register+0x120>
 80158ac:	9801      	ldr	r0, [sp, #4]
 80158ae:	f7fe fc9b 	bl	80141e8 <move_window.part.0>
		if (res == FR_OK) {
 80158b2:	2800      	cmp	r0, #0
 80158b4:	f040 82da 	bne.w	8015e6c <dir_register+0x6d4>
		*d++ = (BYTE)val;
 80158b8:	2220      	movs	r2, #32
 80158ba:	2100      	movs	r1, #0
 80158bc:	f8da 0020 	ldr.w	r0, [sl, #32]
 80158c0:	f00c fd0c 	bl	80222dc <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80158c4:	f8da 3020 	ldr.w	r3, [sl, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80158c8:	f10a 0225 	add.w	r2, sl, #37	; 0x25
 80158cc:	1a9a      	subs	r2, r3, r2
 80158ce:	2a02      	cmp	r2, #2
 80158d0:	f240 8486 	bls.w	80161e0 <dir_register+0xa48>
			*d++ = *s++;
 80158d4:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 80158d8:	601a      	str	r2, [r3, #0]
 80158da:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 80158de:	605a      	str	r2, [r3, #4]
 80158e0:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
}
 80158e4:	4658      	mov	r0, fp
			*d++ = *s++;
 80158e6:	721a      	strb	r2, [r3, #8]
 80158e8:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
 80158ec:	725a      	strb	r2, [r3, #9]
 80158ee:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 80158f2:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 80158f4:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80158f6:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
 80158fa:	f8da 1020 	ldr.w	r1, [sl, #32]
 80158fe:	f003 0318 	and.w	r3, r3, #24
 8015902:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8015904:	9b01      	ldr	r3, [sp, #4]
 8015906:	70da      	strb	r2, [r3, #3]
}
 8015908:	b013      	add	sp, #76	; 0x4c
 801590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801590e:	2340      	movs	r3, #64	; 0x40
			*d++ = *s++;
 8015910:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8015914:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
		for (n = 1; n < 100; n++) {
 8015918:	2601      	movs	r6, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801591a:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801591e:	f04f 0920 	mov.w	r9, #32
			*d++ = *s++;
 8015922:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8015926:	9208      	str	r2, [sp, #32]
 8015928:	9302      	str	r3, [sp, #8]
 801592a:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 801592e:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8015932:	9303      	str	r3, [sp, #12]
 8015934:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8015938:	9207      	str	r2, [sp, #28]
 801593a:	9306      	str	r3, [sp, #24]
 801593c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8015940:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8015944:	9305      	str	r3, [sp, #20]
 8015946:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801594a:	4693      	mov	fp, r2
			*d++ = *s++;
 801594c:	9109      	str	r1, [sp, #36]	; 0x24
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801594e:	4661      	mov	r1, ip
			*d++ = *s++;
 8015950:	9304      	str	r3, [sp, #16]
 8015952:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015956:	970b      	str	r7, [sp, #44]	; 0x2c
			*d++ = *s++;
 8015958:	f89d 8046 	ldrb.w	r8, [sp, #70]	; 0x46
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801595c:	461f      	mov	r7, r3
				if (sr & 0x10000) sr ^= 0x11021;
 801595e:	4c1b      	ldr	r4, [pc, #108]	; (80159cc <dir_register+0x234>)
			*d++ = *s++;
 8015960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015962:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8015964:	2e05      	cmp	r6, #5
			*d++ = *s++;
 8015966:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
 801596a:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
 801596e:	9b02      	ldr	r3, [sp, #8]
 8015970:	f88a 802e 	strb.w	r8, [sl, #46]	; 0x2e
 8015974:	f363 0207 	bfi	r2, r3, #0, #8
 8015978:	9b03      	ldr	r3, [sp, #12]
 801597a:	f363 220f 	bfi	r2, r3, #8, #8
 801597e:	9b06      	ldr	r3, [sp, #24]
 8015980:	f363 4217 	bfi	r2, r3, #16, #8
 8015984:	9b05      	ldr	r3, [sp, #20]
 8015986:	f363 621f 	bfi	r2, r3, #24, #8
 801598a:	9b04      	ldr	r3, [sp, #16]
 801598c:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 8015990:	f04f 0200 	mov.w	r2, #0
 8015994:	f363 0207 	bfi	r2, r3, #0, #8
 8015998:	9b08      	ldr	r3, [sp, #32]
 801599a:	f367 220f 	bfi	r2, r7, #8, #8
 801599e:	f363 4217 	bfi	r2, r3, #16, #8
 80159a2:	9b07      	ldr	r3, [sp, #28]
 80159a4:	f363 621f 	bfi	r2, r3, #24, #8
 80159a8:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80159ac:	f240 8135 	bls.w	8015c1a <dir_register+0x482>
		while (*lfn) {	/* Create a CRC */
 80159b0:	880a      	ldrh	r2, [r1, #0]
 80159b2:	2a00      	cmp	r2, #0
 80159b4:	f000 8131 	beq.w	8015c1a <dir_register+0x482>
				sr = (sr << 1) + (wc & 1);
 80159b8:	468c      	mov	ip, r1
 80159ba:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 80159be:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 80159c0:	eb01 0146 	add.w	r1, r1, r6, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80159c4:	e00e      	b.n	80159e4 <dir_register+0x24c>
 80159c6:	bf00      	nop
 80159c8:	4ec4ec4f 	.word	0x4ec4ec4f
 80159cc:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
 80159d0:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80159d4:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 80159d8:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 80159dc:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80159e0:	bf18      	it	ne
 80159e2:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 80159e4:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 80159e8:	0893      	lsrs	r3, r2, #2
 80159ea:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 80159ec:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80159f0:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 80159f2:	f003 0301 	and.w	r3, r3, #1
 80159f6:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80159fa:	bf48      	it	mi
 80159fc:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
 8015a00:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 8015a02:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015a06:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 8015a0a:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015a0e:	bf18      	it	ne
 8015a10:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
 8015a12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015a16:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8015a18:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8015a1c:	bf48      	it	mi
 8015a1e:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8015a20:	f003 0301 	and.w	r3, r3, #1
 8015a24:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015a28:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8015a2a:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8015a2e:	bf48      	it	mi
 8015a30:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8015a32:	f000 0001 	and.w	r0, r0, #1
 8015a36:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015a3a:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8015a3c:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8015a40:	bf48      	it	mi
 8015a42:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8015a44:	f001 0101 	and.w	r1, r1, #1
 8015a48:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015a4c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8015a4e:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 8015a52:	bf48      	it	mi
 8015a54:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8015a56:	f003 0301 	and.w	r3, r3, #1
 8015a5a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015a5e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8015a60:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8015a64:	bf48      	it	mi
 8015a66:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8015a68:	f000 0001 	and.w	r0, r0, #1
 8015a6c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015a70:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8015a72:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8015a76:	bf48      	it	mi
 8015a78:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8015a7a:	f001 0101 	and.w	r1, r1, #1
 8015a7e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015a82:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8015a84:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8015a88:	bf48      	it	mi
 8015a8a:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8015a8c:	f003 0301 	and.w	r3, r3, #1
 8015a90:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015a94:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8015a96:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8015a9a:	bf48      	it	mi
 8015a9c:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8015a9e:	f000 0001 	and.w	r0, r0, #1
 8015aa2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015aa6:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8015aa8:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8015aac:	bf48      	it	mi
 8015aae:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8015ab0:	f001 0101 	and.w	r1, r1, #1
 8015ab4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015ab8:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8015aba:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 8015abe:	bf48      	it	mi
 8015ac0:	4060      	eormi	r0, r4
				wc >>= 1;
 8015ac2:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
 8015ac4:	f003 0301 	and.w	r3, r3, #1
 8015ac8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015acc:	0400      	lsls	r0, r0, #16
 8015ace:	bf48      	it	mi
 8015ad0:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8015ad2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015ad6:	0408      	lsls	r0, r1, #16
 8015ad8:	bf48      	it	mi
 8015ada:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8015adc:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015ae0:	0419      	lsls	r1, r3, #16
		while (*lfn) {	/* Create a CRC */
 8015ae2:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8015ae6:	bf48      	it	mi
 8015ae8:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
 8015aec:	2a00      	cmp	r2, #0
 8015aee:	f47f af6f 	bne.w	80159d0 <dir_register+0x238>
		c = (BYTE)((seq % 16) + '0');
 8015af2:	f00e 010f 	and.w	r1, lr, #15
 8015af6:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8015afa:	2a39      	cmp	r2, #57	; 0x39
 8015afc:	bf88      	it	hi
 8015afe:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8015b02:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 8015b06:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 8015b0a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
 8015b0e:	f240 8153 	bls.w	8015db8 <dir_register+0x620>
		c = (BYTE)((seq % 16) + '0');
 8015b12:	f001 000f 	and.w	r0, r1, #15
 8015b16:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8015b1a:	2a39      	cmp	r2, #57	; 0x39
 8015b1c:	bf88      	it	hi
 8015b1e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8015b22:	290f      	cmp	r1, #15
		seq /= 16;
 8015b24:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 8015b28:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
 8015b2c:	f240 814a 	bls.w	8015dc4 <dir_register+0x62c>
		c = (BYTE)((seq % 16) + '0');
 8015b30:	f000 010f 	and.w	r1, r0, #15
 8015b34:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8015b38:	2a39      	cmp	r2, #57	; 0x39
 8015b3a:	bf88      	it	hi
 8015b3c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8015b40:	280f      	cmp	r0, #15
		seq /= 16;
 8015b42:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 8015b46:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
 8015b4a:	f240 814a 	bls.w	8015de2 <dir_register+0x64a>
		c = (BYTE)((seq % 16) + '0');
 8015b4e:	f001 000f 	and.w	r0, r1, #15
 8015b52:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8015b56:	2a39      	cmp	r2, #57	; 0x39
 8015b58:	bf88      	it	hi
 8015b5a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8015b5e:	290f      	cmp	r1, #15
		seq /= 16;
 8015b60:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 8015b64:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
 8015b68:	f240 8168 	bls.w	8015e3c <dir_register+0x6a4>
		c = (BYTE)((seq % 16) + '0');
 8015b6c:	f000 010f 	and.w	r1, r0, #15
 8015b70:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8015b74:	2a39      	cmp	r2, #57	; 0x39
 8015b76:	bf88      	it	hi
 8015b78:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8015b7c:	280f      	cmp	r0, #15
		seq /= 16;
 8015b7e:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 8015b82:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
 8015b86:	f240 815f 	bls.w	8015e48 <dir_register+0x6b0>
		c = (BYTE)((seq % 16) + '0');
 8015b8a:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 8015b8e:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 8015b92:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8015b96:	2a39      	cmp	r2, #57	; 0x39
 8015b98:	bf88      	it	hi
 8015b9a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8015b9e:	290f      	cmp	r1, #15
		ns[i--] = c;
 8015ba0:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
 8015ba4:	f240 8156 	bls.w	8015e54 <dir_register+0x6bc>
		c = (BYTE)((seq % 16) + '0');
 8015ba8:	f00e 010f 	and.w	r1, lr, #15
 8015bac:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8015bb0:	2a39      	cmp	r2, #57	; 0x39
 8015bb2:	bf88      	it	hi
 8015bb4:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8015bb8:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 8015bbc:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
 8015bc0:	f240 8106 	bls.w	8015dd0 <dir_register+0x638>
		ns[i--] = c;
 8015bc4:	f04f 3cff 	mov.w	ip, #4294967295
 8015bc8:	f10a 0123 	add.w	r1, sl, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015bcc:	2200      	movs	r2, #0
 8015bce:	e002      	b.n	8015bd6 <dir_register+0x43e>
 8015bd0:	3201      	adds	r2, #1
 8015bd2:	4562      	cmp	r2, ip
 8015bd4:	d003      	beq.n	8015bde <dir_register+0x446>
 8015bd6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015bda:	2b20      	cmp	r3, #32
 8015bdc:	d1f8      	bne.n	8015bd0 <dir_register+0x438>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015bde:	f1bc 0f07 	cmp.w	ip, #7
 8015be2:	d91c      	bls.n	8015c1e <dir_register+0x486>
 8015be4:	1c50      	adds	r0, r2, #1
 8015be6:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
 8015bea:	2807      	cmp	r0, #7
 8015bec:	d809      	bhi.n	8015c02 <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015bee:	1c42      	adds	r2, r0, #1
 8015bf0:	2120      	movs	r1, #32
 8015bf2:	2a08      	cmp	r2, #8
 8015bf4:	f1c0 0208 	rsb	r2, r0, #8
 8015bf8:	4428      	add	r0, r5
 8015bfa:	bf88      	it	hi
 8015bfc:	2201      	movhi	r2, #1
 8015bfe:	f00c fb6d 	bl	80222dc <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015c02:	4650      	mov	r0, sl
 8015c04:	f7ff f9f8 	bl	8014ff8 <dir_find>
			if (res != FR_OK) break;
 8015c08:	2800      	cmp	r0, #0
 8015c0a:	d17d      	bne.n	8015d08 <dir_register+0x570>
		for (n = 1; n < 100; n++) {
 8015c0c:	3601      	adds	r6, #1
 8015c0e:	2e64      	cmp	r6, #100	; 0x64
 8015c10:	f000 8095 	beq.w	8015d3e <dir_register+0x5a6>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8015c14:	9b01      	ldr	r3, [sp, #4]
 8015c16:	68d9      	ldr	r1, [r3, #12]
 8015c18:	e6a2      	b.n	8015960 <dir_register+0x1c8>
 8015c1a:	46b6      	mov	lr, r6
 8015c1c:	e769      	b.n	8015af2 <dir_register+0x35a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c1e:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 8015c22:	f10c 0c01 	add.w	ip, ip, #1
 8015c26:	eb0d 0103 	add.w	r1, sp, r3
 8015c2a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8015c2e:	54a9      	strb	r1, [r5, r2]
 8015c30:	3201      	adds	r2, #1
	} while (j < 8);
 8015c32:	2a07      	cmp	r2, #7
 8015c34:	d8e5      	bhi.n	8015c02 <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c36:	f1bc 0f08 	cmp.w	ip, #8
 8015c3a:	f000 8086 	beq.w	8015d4a <dir_register+0x5b2>
 8015c3e:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
 8015c42:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c44:	f102 0001 	add.w	r0, r2, #1
 8015c48:	eb0d 0103 	add.w	r1, sp, r3
 8015c4c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8015c50:	54a9      	strb	r1, [r5, r2]
 8015c52:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 8015c56:	d0d4      	beq.n	8015c02 <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c58:	2908      	cmp	r1, #8
 8015c5a:	d07e      	beq.n	8015d5a <dir_register+0x5c2>
 8015c5c:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
 8015c60:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c62:	eb0d 0103 	add.w	r1, sp, r3
 8015c66:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8015c6a:	5429      	strb	r1, [r5, r0]
 8015c6c:	f10c 0102 	add.w	r1, ip, #2
 8015c70:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8015c74:	d0c5      	beq.n	8015c02 <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c76:	2908      	cmp	r1, #8
 8015c78:	d077      	beq.n	8015d6a <dir_register+0x5d2>
 8015c7a:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
 8015c7e:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c80:	eb0d 0103 	add.w	r1, sp, r3
 8015c84:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8015c88:	5429      	strb	r1, [r5, r0]
 8015c8a:	f10c 0103 	add.w	r1, ip, #3
 8015c8e:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8015c92:	d0b6      	beq.n	8015c02 <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c94:	2908      	cmp	r1, #8
 8015c96:	d070      	beq.n	8015d7a <dir_register+0x5e2>
 8015c98:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
 8015c9c:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c9e:	eb0d 0103 	add.w	r1, sp, r3
 8015ca2:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8015ca6:	5429      	strb	r1, [r5, r0]
 8015ca8:	f10c 0104 	add.w	r1, ip, #4
 8015cac:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8015cb0:	d0a7      	beq.n	8015c02 <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015cb2:	2908      	cmp	r1, #8
 8015cb4:	d069      	beq.n	8015d8a <dir_register+0x5f2>
 8015cb6:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
 8015cba:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015cbc:	eb0d 0103 	add.w	r1, sp, r3
 8015cc0:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8015cc4:	5429      	strb	r1, [r5, r0]
 8015cc6:	f10c 0105 	add.w	r1, ip, #5
 8015cca:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8015cce:	d098      	beq.n	8015c02 <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015cd0:	2908      	cmp	r1, #8
 8015cd2:	d062      	beq.n	8015d9a <dir_register+0x602>
 8015cd4:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
 8015cd8:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015cda:	eb0d 0103 	add.w	r1, sp, r3
 8015cde:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8015ce2:	5429      	strb	r1, [r5, r0]
 8015ce4:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 8015ce8:	d08b      	beq.n	8015c02 <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015cea:	f1bc 0f01 	cmp.w	ip, #1
 8015cee:	d15c      	bne.n	8015daa <dir_register+0x612>
 8015cf0:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
 8015cf4:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015cf6:	546a      	strb	r2, [r5, r1]
	} while (j < 8);
 8015cf8:	d183      	bne.n	8015c02 <dir_register+0x46a>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015cfa:	4650      	mov	r0, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015cfc:	f88a 902b 	strb.w	r9, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015d00:	f7ff f97a 	bl	8014ff8 <dir_find>
			if (res != FR_OK) break;
 8015d04:	2800      	cmp	r0, #0
 8015d06:	d081      	beq.n	8015c0c <dir_register+0x474>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015d08:	2804      	cmp	r0, #4
 8015d0a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8015d0c:	4683      	mov	fp, r0
 8015d0e:	d118      	bne.n	8015d42 <dir_register+0x5aa>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	FATFS *fs = dp->obj.fs;
 8015d12:	f8da 9000 	ldr.w	r9, [sl]
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015d16:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015d1a:	f013 0302 	ands.w	r3, r3, #2
 8015d1e:	f47f ad65 	bne.w	80157ec <dir_register+0x54>
 8015d22:	9302      	str	r3, [sp, #8]
 8015d24:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
 8015d26:	2100      	movs	r1, #0
 8015d28:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015d2a:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8015d2c:	f7ff f8aa 	bl	8014e84 <dir_sdi>
	if (res == FR_OK) {
 8015d30:	4683      	mov	fp, r0
 8015d32:	2800      	cmp	r0, #0
 8015d34:	f43f ad6b 	beq.w	801580e <dir_register+0x76>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015d38:	f1bb 0f04 	cmp.w	fp, #4
 8015d3c:	d101      	bne.n	8015d42 <dir_register+0x5aa>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015d3e:	f04f 0b07 	mov.w	fp, #7
}
 8015d42:	4658      	mov	r0, fp
 8015d44:	b013      	add	sp, #76	; 0x4c
 8015d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 8015d4a:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015d4c:	f102 0001 	add.w	r0, r2, #1
 8015d50:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
 8015d54:	f47f af4b 	bne.w	8015bee <dir_register+0x456>
 8015d58:	e753      	b.n	8015c02 <dir_register+0x46a>
 8015d5a:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015d5c:	f805 9000 	strb.w	r9, [r5, r0]
 8015d60:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8015d64:	f47f af43 	bne.w	8015bee <dir_register+0x456>
 8015d68:	e74b      	b.n	8015c02 <dir_register+0x46a>
 8015d6a:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015d6c:	f805 9000 	strb.w	r9, [r5, r0]
 8015d70:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8015d74:	f47f af3b 	bne.w	8015bee <dir_register+0x456>
 8015d78:	e743      	b.n	8015c02 <dir_register+0x46a>
 8015d7a:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015d7c:	f805 9000 	strb.w	r9, [r5, r0]
 8015d80:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8015d84:	f47f af33 	bne.w	8015bee <dir_register+0x456>
 8015d88:	e73b      	b.n	8015c02 <dir_register+0x46a>
 8015d8a:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015d8c:	f805 9000 	strb.w	r9, [r5, r0]
 8015d90:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8015d94:	f47f af2b 	bne.w	8015bee <dir_register+0x456>
 8015d98:	e733      	b.n	8015c02 <dir_register+0x46a>
 8015d9a:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015d9c:	f805 9000 	strb.w	r9, [r5, r0]
 8015da0:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 8015da4:	f47f af23 	bne.w	8015bee <dir_register+0x456>
 8015da8:	e72b      	b.n	8015c02 <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015daa:	f805 9001 	strb.w	r9, [r5, r1]
	} while (j < 8);
 8015dae:	2a00      	cmp	r2, #0
 8015db0:	f47f af27 	bne.w	8015c02 <dir_register+0x46a>
 8015db4:	2007      	movs	r0, #7
 8015db6:	e71a      	b.n	8015bee <dir_register+0x456>
	ns[i] = '~';
 8015db8:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8015dba:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 8015dbe:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015dc2:	e701      	b.n	8015bc8 <dir_register+0x430>
	ns[i] = '~';
 8015dc4:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8015dc6:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 8015dca:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015dce:	e6fb      	b.n	8015bc8 <dir_register+0x430>
	ns[i] = '~';
 8015dd0:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015dd2:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8015dd6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015dda:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
 8015dde:	4662      	mov	r2, ip
 8015de0:	e72d      	b.n	8015c3e <dir_register+0x4a6>
	ns[i] = '~';
 8015de2:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8015de4:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 8015de8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015dec:	e6ec      	b.n	8015bc8 <dir_register+0x430>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015dee:	8962      	ldrh	r2, [r4, #10]
 8015df0:	3a01      	subs	r2, #1
 8015df2:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8015df6:	f47f ad32 	bne.w	801585e <dir_register+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015dfa:	4619      	mov	r1, r3
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	f7fe fc45 	bl	801468c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015e02:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015e04:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015e06:	f240 8205 	bls.w	8016214 <dir_register+0xa7c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015e0a:	1c42      	adds	r2, r0, #1
 8015e0c:	f000 80dc 	beq.w	8015fc8 <dir_register+0x830>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015e10:	69a3      	ldr	r3, [r4, #24]
 8015e12:	4602      	mov	r2, r0
 8015e14:	4298      	cmp	r0, r3
 8015e16:	f080 80e7 	bcs.w	8015fe8 <dir_register+0x850>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015e1a:	3b02      	subs	r3, #2
	clst -= 2;
 8015e1c:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015e20:	f104 0634 	add.w	r6, r4, #52	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015e24:	455b      	cmp	r3, fp
				dp->clust = clst;		/* Initialize data for new cluster */
 8015e26:	f8ca 2018 	str.w	r2, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015e2a:	f240 813b 	bls.w	80160a4 <dir_register+0x90c>
	return clst * fs->csize + fs->database;
 8015e2e:	8963      	ldrh	r3, [r4, #10]
 8015e30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015e32:	fb0b 1103 	mla	r1, fp, r3, r1
				dp->sect = clust2sect(fs, clst);
 8015e36:	f8ca 101c 	str.w	r1, [sl, #28]
 8015e3a:	e512      	b.n	8015862 <dir_register+0xca>
	ns[i] = '~';
 8015e3c:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8015e3e:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 8015e42:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015e46:	e6bf      	b.n	8015bc8 <dir_register+0x430>
	ns[i] = '~';
 8015e48:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8015e4a:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 8015e4e:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015e52:	e6b9      	b.n	8015bc8 <dir_register+0x430>
	ns[i] = '~';
 8015e54:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8015e56:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8015e5a:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015e5e:	e6b3      	b.n	8015bc8 <dir_register+0x430>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015e60:	f04f 0b06 	mov.w	fp, #6
}
 8015e64:	4658      	mov	r0, fp
 8015e66:	b013      	add	sp, #76	; 0x4c
 8015e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e6c:	4683      	mov	fp, r0
 8015e6e:	4658      	mov	r0, fp
 8015e70:	b013      	add	sp, #76	; 0x4c
 8015e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015e76:	f8da 1014 	ldr.w	r1, [sl, #20]
 8015e7a:	4650      	mov	r0, sl
 8015e7c:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 8015e80:	f7ff f800 	bl	8014e84 <dir_sdi>
		if (res == FR_OK) {
 8015e84:	4605      	mov	r5, r0
 8015e86:	2800      	cmp	r0, #0
 8015e88:	f040 810a 	bne.w	80160a0 <dir_register+0x908>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015e8c:	f89a 1024 	ldrb.w	r1, [sl, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015e90:	f04f 090f 	mov.w	r9, #15
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015e94:	f89a 4025 	ldrb.w	r4, [sl, #37]	; 0x25
 8015e98:	01cb      	lsls	r3, r1, #7
 8015e9a:	f89a 0026 	ldrb.w	r0, [sl, #38]	; 0x26
 8015e9e:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
 8015ea2:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
 8015ea6:	f89a 8028 	ldrb.w	r8, [sl, #40]	; 0x28
 8015eaa:	f89a e029 	ldrb.w	lr, [sl, #41]	; 0x29
 8015eae:	1919      	adds	r1, r3, r4
 8015eb0:	f89a c02a 	ldrb.w	ip, [sl, #42]	; 0x2a
 8015eb4:	f89a 702b 	ldrb.w	r7, [sl, #43]	; 0x2b
	*ptr++ = (BYTE)val; val >>= 8;
 8015eb8:	f64f 74ff 	movw	r4, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015ebc:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8015ec0:	f89a 602c 	ldrb.w	r6, [sl, #44]	; 0x2c
 8015ec4:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8015ec8:	fa50 f383 	uxtab	r3, r0, r3
 8015ecc:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
 8015ed0:	f3c3 0146 	ubfx	r1, r3, #1, #7
 8015ed4:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 8015ed8:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
 8015edc:	fa52 f283 	uxtab	r2, r2, r3
 8015ee0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015ee4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015ee8:	fa58 f883 	uxtab	r8, r8, r3
 8015eec:	f3c8 0346 	ubfx	r3, r8, #1, #7
 8015ef0:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
 8015ef4:	fa5e fe83 	uxtab	lr, lr, r3
 8015ef8:	f3ce 0346 	ubfx	r3, lr, #1, #7
 8015efc:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
 8015f00:	fa5c fc83 	uxtab	ip, ip, r3
 8015f04:	f3cc 0346 	ubfx	r3, ip, #1, #7
 8015f08:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
 8015f0c:	fa57 f783 	uxtab	r7, r7, r3
 8015f10:	f3c7 0346 	ubfx	r3, r7, #1, #7
 8015f14:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8015f18:	fa56 f683 	uxtab	r6, r6, r3
 8015f1c:	f3c6 0346 	ubfx	r3, r6, #1, #7
 8015f20:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
 8015f24:	9e01      	ldr	r6, [sp, #4]
 8015f26:	fa50 f083 	uxtab	r0, r0, r3
 8015f2a:	f3c0 0346 	ubfx	r3, r0, #1, #7
 8015f2e:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8015f32:	fa51 f180 	uxtab	r1, r1, r0
 8015f36:	fa5f f881 	uxtb.w	r8, r1
				res = move_window(fs, dp->sect);
 8015f3a:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015f3e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8015f40:	4299      	cmp	r1, r3
 8015f42:	d004      	beq.n	8015f4e <dir_register+0x7b6>
 8015f44:	4630      	mov	r0, r6
 8015f46:	f7fe f94f 	bl	80141e8 <move_window.part.0>
				if (res != FR_OK) break;
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	d18e      	bne.n	8015e6c <dir_register+0x6d4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015f4e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8015f52:	68f1      	ldr	r1, [r6, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015f54:	1e42      	subs	r2, r0, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015f56:	f8da 3020 	ldr.w	r3, [sl, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015f5a:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015f5e:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015f62:	f883 900b 	strb.w	r9, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015f66:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	dir[LDIR_Type] = 0;
 8015f6a:	731d      	strb	r5, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8015f6c:	769d      	strb	r5, [r3, #26]
	*ptr++ = (BYTE)val;
 8015f6e:	76dd      	strb	r5, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015f70:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8015f74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015f78:	705f      	strb	r7, [r3, #1]
	*ptr++ = (BYTE)val;
 8015f7a:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015f7e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015f82:	2f00      	cmp	r7, #0
 8015f84:	f040 8090 	bne.w	80160a8 <dir_register+0x910>
	*ptr++ = (BYTE)val; val >>= 8;
 8015f88:	f8a3 4003 	strh.w	r4, [r3, #3]
 8015f8c:	f8a3 4005 	strh.w	r4, [r3, #5]
 8015f90:	f8a3 4007 	strh.w	r4, [r3, #7]
 8015f94:	f8a3 4009 	strh.w	r4, [r3, #9]
 8015f98:	81dc      	strh	r4, [r3, #14]
 8015f9a:	821c      	strh	r4, [r3, #16]
 8015f9c:	825c      	strh	r4, [r3, #18]
 8015f9e:	829c      	strh	r4, [r3, #20]
 8015fa0:	82dc      	strh	r4, [r3, #22]
 8015fa2:	831c      	strh	r4, [r3, #24]
 8015fa4:	839c      	strh	r4, [r3, #28]
 8015fa6:	83dc      	strh	r4, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015fa8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8015fac:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 8015fae:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8015fb0:	4650      	mov	r0, sl
				fs->wflag = 1;
 8015fb2:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015fb4:	f7fe fbca 	bl	801474c <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8015fb8:	2800      	cmp	r0, #0
 8015fba:	f47f af57 	bne.w	8015e6c <dir_register+0x6d4>
 8015fbe:	9b02      	ldr	r3, [sp, #8]
 8015fc0:	3b01      	subs	r3, #1
 8015fc2:	9302      	str	r3, [sp, #8]
 8015fc4:	d1b9      	bne.n	8015f3a <dir_register+0x7a2>
 8015fc6:	e46b      	b.n	80158a0 <dir_register+0x108>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015fc8:	f04f 0b01 	mov.w	fp, #1
}
 8015fcc:	4658      	mov	r0, fp
 8015fce:	b013      	add	sp, #76	; 0x4c
 8015fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015fd4:	f04f 0b07 	mov.w	fp, #7
				dp->sect = 0; return FR_NO_FILE;
 8015fd8:	f8ca 301c 	str.w	r3, [sl, #28]
}
 8015fdc:	4658      	mov	r0, fp
 8015fde:	b013      	add	sp, #76	; 0x4c
 8015fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fe4:	4683      	mov	fp, r0
 8015fe6:	e6a7      	b.n	8015d38 <dir_register+0x5a0>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015fe8:	f8da 1018 	ldr.w	r1, [sl, #24]
 8015fec:	4650      	mov	r0, sl
 8015fee:	f7fe fe79 	bl	8014ce4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	9004      	str	r0, [sp, #16]
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	f43f aea1 	beq.w	8015d3e <dir_register+0x5a6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015ffc:	2801      	cmp	r0, #1
 8015ffe:	f000 8109 	beq.w	8016214 <dir_register+0xa7c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016002:	3301      	adds	r3, #1
 8016004:	d0e0      	beq.n	8015fc8 <dir_register+0x830>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016006:	78e3      	ldrb	r3, [r4, #3]
 8016008:	2b00      	cmp	r3, #0
 801600a:	f040 8111 	bne.w	8016230 <dir_register+0xa98>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801600e:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8016012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016016:	2100      	movs	r1, #0
 8016018:	4630      	mov	r0, r6
 801601a:	f00c f95f 	bl	80222dc <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801601e:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
 8016020:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016022:	3b02      	subs	r3, #2
	return clst * fs->csize + fs->database;
 8016024:	8961      	ldrh	r1, [r4, #10]
	clst -= 2;
 8016026:	f1a2 0b02 	sub.w	fp, r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801602a:	459b      	cmp	fp, r3
 801602c:	f080 80fe 	bcs.w	801622c <dir_register+0xa94>
	return clst * fs->csize + fs->database;
 8016030:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016032:	fb0b 2201 	mla	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016036:	6322      	str	r2, [r4, #48]	; 0x30
 8016038:	2900      	cmp	r1, #0
 801603a:	f000 80f4 	beq.w	8016226 <dir_register+0xa8e>
 801603e:	2300      	movs	r3, #0
 8016040:	e9cd 5707 	strd	r5, r7, [sp, #28]
 8016044:	4637      	mov	r7, r6
 8016046:	4616      	mov	r6, r2
 8016048:	9305      	str	r3, [sp, #20]
						fs->wflag = 1;
 801604a:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801604e:	4632      	mov	r2, r6
 8016050:	4639      	mov	r1, r7
 8016052:	7860      	ldrb	r0, [r4, #1]
						fs->wflag = 1;
 8016054:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016056:	2301      	movs	r3, #1
 8016058:	f7fd ff78 	bl	8013f4c <disk_write>
 801605c:	2800      	cmp	r0, #0
 801605e:	d1b3      	bne.n	8015fc8 <dir_register+0x830>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016060:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
 8016062:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016064:	1af0      	subs	r0, r6, r3
 8016066:	69e3      	ldr	r3, [r4, #28]
 8016068:	4298      	cmp	r0, r3
 801606a:	d20e      	bcs.n	801608a <dir_register+0x8f2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801606c:	78a5      	ldrb	r5, [r4, #2]
 801606e:	2d01      	cmp	r5, #1
 8016070:	d801      	bhi.n	8016076 <dir_register+0x8de>
 8016072:	e00a      	b.n	801608a <dir_register+0x8f2>
					wsect += fs->fsize;
 8016074:	69e3      	ldr	r3, [r4, #28]
 8016076:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016078:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801607a:	2301      	movs	r3, #1
 801607c:	4639      	mov	r1, r7
 801607e:	4632      	mov	r2, r6
 8016080:	7860      	ldrb	r0, [r4, #1]
 8016082:	f7fd ff63 	bl	8013f4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016086:	2d01      	cmp	r5, #1
 8016088:	d1f4      	bne.n	8016074 <dir_register+0x8dc>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801608a:	9a05      	ldr	r2, [sp, #20]
 801608c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801608e:	1c50      	adds	r0, r2, #1
 8016090:	8965      	ldrh	r5, [r4, #10]
 8016092:	1c5e      	adds	r6, r3, #1
 8016094:	42a8      	cmp	r0, r5
 8016096:	6326      	str	r6, [r4, #48]	; 0x30
 8016098:	f080 80bf 	bcs.w	801621a <dir_register+0xa82>
 801609c:	9005      	str	r0, [sp, #20]
 801609e:	e7d4      	b.n	801604a <dir_register+0x8b2>
 80160a0:	4683      	mov	fp, r0
 80160a2:	e64e      	b.n	8015d42 <dir_register+0x5aa>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80160a4:	2100      	movs	r1, #0
 80160a6:	e6c6      	b.n	8015e36 <dir_register+0x69e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80160a8:	42a7      	cmp	r7, r4
 80160aa:	f43f af6d 	beq.w	8015f88 <dir_register+0x7f0>
 80160ae:	3201      	adds	r2, #1
 80160b0:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
 80160b4:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80160b6:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 80160ba:	70df      	strb	r7, [r3, #3]
	*ptr++ = (BYTE)val;
 80160bc:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80160c0:	2f00      	cmp	r7, #0
 80160c2:	f43f af63 	beq.w	8015f8c <dir_register+0x7f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80160c6:	42a7      	cmp	r7, r4
 80160c8:	f43f af60 	beq.w	8015f8c <dir_register+0x7f4>
 80160cc:	440a      	add	r2, r1
 80160ce:	8857      	ldrh	r7, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80160d0:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 80160d4:	715f      	strb	r7, [r3, #5]
	*ptr++ = (BYTE)val;
 80160d6:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80160da:	2f00      	cmp	r7, #0
 80160dc:	f43f af58 	beq.w	8015f90 <dir_register+0x7f8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80160e0:	42a7      	cmp	r7, r4
 80160e2:	f43f af55 	beq.w	8015f90 <dir_register+0x7f8>
 80160e6:	8897      	ldrh	r7, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80160e8:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 80160ec:	71df      	strb	r7, [r3, #7]
	*ptr++ = (BYTE)val;
 80160ee:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80160f2:	2f00      	cmp	r7, #0
 80160f4:	f43f af4e 	beq.w	8015f94 <dir_register+0x7fc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80160f8:	42a7      	cmp	r7, r4
 80160fa:	f43f af4b 	beq.w	8015f94 <dir_register+0x7fc>
 80160fe:	88d7      	ldrh	r7, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8016100:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8016104:	725f      	strb	r7, [r3, #9]
	*ptr++ = (BYTE)val;
 8016106:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801610a:	2f00      	cmp	r7, #0
 801610c:	f43f af44 	beq.w	8015f98 <dir_register+0x800>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016110:	42a7      	cmp	r7, r4
 8016112:	f43f af41 	beq.w	8015f98 <dir_register+0x800>
 8016116:	8917      	ldrh	r7, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8016118:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 801611c:	739f      	strb	r7, [r3, #14]
	*ptr++ = (BYTE)val;
 801611e:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016122:	2f00      	cmp	r7, #0
 8016124:	f43f af39 	beq.w	8015f9a <dir_register+0x802>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016128:	42a7      	cmp	r7, r4
 801612a:	f43f af36 	beq.w	8015f9a <dir_register+0x802>
 801612e:	8957      	ldrh	r7, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8016130:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8016134:	741f      	strb	r7, [r3, #16]
	*ptr++ = (BYTE)val;
 8016136:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801613a:	2f00      	cmp	r7, #0
 801613c:	f43f af2e 	beq.w	8015f9c <dir_register+0x804>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016140:	42a7      	cmp	r7, r4
 8016142:	f43f af2b 	beq.w	8015f9c <dir_register+0x804>
 8016146:	8997      	ldrh	r7, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8016148:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 801614c:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
 801614e:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016152:	2f00      	cmp	r7, #0
 8016154:	f43f af23 	beq.w	8015f9e <dir_register+0x806>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016158:	42a7      	cmp	r7, r4
 801615a:	f43f af20 	beq.w	8015f9e <dir_register+0x806>
 801615e:	89d7      	ldrh	r7, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8016160:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8016164:	751f      	strb	r7, [r3, #20]
	*ptr++ = (BYTE)val;
 8016166:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801616a:	2f00      	cmp	r7, #0
 801616c:	f43f af18 	beq.w	8015fa0 <dir_register+0x808>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016170:	42a7      	cmp	r7, r4
 8016172:	f43f af15 	beq.w	8015fa0 <dir_register+0x808>
 8016176:	8a17      	ldrh	r7, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8016178:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 801617c:	759f      	strb	r7, [r3, #22]
	*ptr++ = (BYTE)val;
 801617e:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016182:	2f00      	cmp	r7, #0
 8016184:	f43f af0d 	beq.w	8015fa2 <dir_register+0x80a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016188:	42a7      	cmp	r7, r4
 801618a:	f43f af0a 	beq.w	8015fa2 <dir_register+0x80a>
 801618e:	8a57      	ldrh	r7, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8016190:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8016194:	761f      	strb	r7, [r3, #24]
	*ptr++ = (BYTE)val;
 8016196:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801619a:	2f00      	cmp	r7, #0
 801619c:	f43f af02 	beq.w	8015fa4 <dir_register+0x80c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80161a0:	42a7      	cmp	r7, r4
 80161a2:	f43f aeff 	beq.w	8015fa4 <dir_register+0x80c>
 80161a6:	8a97      	ldrh	r7, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 80161a8:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 80161ac:	771f      	strb	r7, [r3, #28]
	*ptr++ = (BYTE)val;
 80161ae:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80161b2:	2f00      	cmp	r7, #0
 80161b4:	f43f aef7 	beq.w	8015fa6 <dir_register+0x80e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80161b8:	42a7      	cmp	r7, r4
 80161ba:	f43f aef4 	beq.w	8015fa6 <dir_register+0x80e>
 80161be:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80161c0:	1e57      	subs	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80161c2:	779a      	strb	r2, [r3, #30]
 80161c4:	0a12      	lsrs	r2, r2, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80161c6:	b2bf      	uxth	r7, r7
	*ptr++ = (BYTE)val;
 80161c8:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80161ca:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80161ce:	4297      	cmp	r7, r2
 80161d0:	f63f aeea 	bhi.w	8015fa8 <dir_register+0x810>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80161d4:	4461      	add	r1, ip
 80161d6:	8b4a      	ldrh	r2, [r1, #26]
 80161d8:	2a00      	cmp	r2, #0
 80161da:	f47f aee7 	bne.w	8015fac <dir_register+0x814>
 80161de:	e6e3      	b.n	8015fa8 <dir_register+0x810>
			*d++ = *s++;
 80161e0:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 80161e4:	701a      	strb	r2, [r3, #0]
 80161e6:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
 80161ea:	705a      	strb	r2, [r3, #1]
 80161ec:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
 80161f0:	709a      	strb	r2, [r3, #2]
 80161f2:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
 80161f6:	70da      	strb	r2, [r3, #3]
 80161f8:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80161fc:	711a      	strb	r2, [r3, #4]
 80161fe:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8016202:	715a      	strb	r2, [r3, #5]
 8016204:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
 8016208:	719a      	strb	r2, [r3, #6]
 801620a:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
 801620e:	71da      	strb	r2, [r3, #7]
 8016210:	f7ff bb66 	b.w	80158e0 <dir_register+0x148>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016214:	f04f 0b02 	mov.w	fp, #2
 8016218:	e593      	b.n	8015d42 <dir_register+0x5aa>
					fs->winsect -= n;							/* Restore window offset */
 801621a:	1a9a      	subs	r2, r3, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801621c:	69a3      	ldr	r3, [r4, #24]
					fs->winsect -= n;							/* Restore window offset */
 801621e:	463e      	mov	r6, r7
 8016220:	9d07      	ldr	r5, [sp, #28]
 8016222:	9f08      	ldr	r7, [sp, #32]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016224:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8016226:	6322      	str	r2, [r4, #48]	; 0x30
 8016228:	9a04      	ldr	r2, [sp, #16]
 801622a:	e5fb      	b.n	8015e24 <dir_register+0x68c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801622c:	2200      	movs	r2, #0
 801622e:	e702      	b.n	8016036 <dir_register+0x89e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016230:	f104 0634 	add.w	r6, r4, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
 8016234:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016236:	2301      	movs	r3, #1
 8016238:	7860      	ldrb	r0, [r4, #1]
 801623a:	4631      	mov	r1, r6
 801623c:	9205      	str	r2, [sp, #20]
 801623e:	f7fd fe85 	bl	8013f4c <disk_write>
 8016242:	2800      	cmp	r0, #0
 8016244:	f47f aec0 	bne.w	8015fc8 <dir_register+0x830>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801624a:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
 801624c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801624e:	1ad1      	subs	r1, r2, r3
 8016250:	69e3      	ldr	r3, [r4, #28]
 8016252:	4299      	cmp	r1, r3
 8016254:	f4bf aedd 	bcs.w	8016012 <dir_register+0x87a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016258:	f894 b002 	ldrb.w	fp, [r4, #2]
 801625c:	f1bb 0f01 	cmp.w	fp, #1
 8016260:	f67f aed7 	bls.w	8016012 <dir_register+0x87a>
 8016264:	4631      	mov	r1, r6
 8016266:	462e      	mov	r6, r5
 8016268:	4625      	mov	r5, r4
 801626a:	4614      	mov	r4, r2
 801626c:	e000      	b.n	8016270 <dir_register+0xad8>
					wsect += fs->fsize;
 801626e:	69eb      	ldr	r3, [r5, #28]
 8016270:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016272:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8016276:	2301      	movs	r3, #1
 8016278:	7868      	ldrb	r0, [r5, #1]
 801627a:	4622      	mov	r2, r4
 801627c:	9105      	str	r1, [sp, #20]
 801627e:	f7fd fe65 	bl	8013f4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016282:	f1bb 0f01 	cmp.w	fp, #1
 8016286:	9905      	ldr	r1, [sp, #20]
 8016288:	d1f1      	bne.n	801626e <dir_register+0xad6>
 801628a:	462c      	mov	r4, r5
 801628c:	4635      	mov	r5, r6
 801628e:	460e      	mov	r6, r1
 8016290:	e6bf      	b.n	8016012 <dir_register+0x87a>
 8016292:	bf00      	nop

08016294 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016294:	b510      	push	{r4, lr}
 8016296:	b082      	sub	sp, #8
 8016298:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 801629c:	b1b1      	cbz	r1, 80162cc <f_mount+0x38>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801629e:	f891 c000 	ldrb.w	ip, [r1]
 80162a2:	f1bc 0f1f 	cmp.w	ip, #31
 80162a6:	d914      	bls.n	80162d2 <f_mount+0x3e>
 80162a8:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 80162ac:	d011      	beq.n	80162d2 <f_mount+0x3e>
 80162ae:	4608      	mov	r0, r1
 80162b0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80162b4:	2b1f      	cmp	r3, #31
 80162b6:	d90e      	bls.n	80162d6 <f_mount+0x42>
 80162b8:	2b3a      	cmp	r3, #58	; 0x3a
 80162ba:	d1f9      	bne.n	80162b0 <f_mount+0x1c>
			i = *tp++ - '0';
 80162bc:	3101      	adds	r1, #1
 80162be:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80162c2:	4288      	cmp	r0, r1
 80162c4:	d102      	bne.n	80162cc <f_mount+0x38>
 80162c6:	f1bc 0f01 	cmp.w	ip, #1
 80162ca:	d908      	bls.n	80162de <f_mount+0x4a>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 80162cc:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80162ce:	b002      	add	sp, #8
 80162d0:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80162d2:	4663      	mov	r3, ip
 80162d4:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80162d6:	2b3a      	cmp	r3, #58	; 0x3a
 80162d8:	d0f0      	beq.n	80162bc <f_mount+0x28>
		vol = 0;		/* Drive 0 */
 80162da:	f04f 0c00 	mov.w	ip, #0
	cfs = FatFs[vol];					/* Pointer to fs object */
 80162de:	4c1d      	ldr	r4, [pc, #116]	; (8016354 <f_mount+0xc0>)
 80162e0:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
	if (cfs) {
 80162e4:	b173      	cbz	r3, 8016304 <f_mount+0x70>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80162e6:	491c      	ldr	r1, [pc, #112]	; (8016358 <f_mount+0xc4>)
 80162e8:	6808      	ldr	r0, [r1, #0]
 80162ea:	4283      	cmp	r3, r0
 80162ec:	d021      	beq.n	8016332 <f_mount+0x9e>
 80162ee:	6908      	ldr	r0, [r1, #16]
 80162f0:	4298      	cmp	r0, r3
 80162f2:	d023      	beq.n	801633c <f_mount+0xa8>
 80162f4:	6a08      	ldr	r0, [r1, #32]
 80162f6:	4283      	cmp	r3, r0
 80162f8:	d025      	beq.n	8016346 <f_mount+0xb2>
 80162fa:	6b08      	ldr	r0, [r1, #48]	; 0x30
 80162fc:	4298      	cmp	r0, r3
 80162fe:	d015      	beq.n	801632c <f_mount+0x98>
		cfs->fs_type = 0;				/* Clear old fs object */
 8016300:	2100      	movs	r1, #0
 8016302:	7019      	strb	r1, [r3, #0]
	if (fs) {
 8016304:	9b01      	ldr	r3, [sp, #4]
 8016306:	b163      	cbz	r3, 8016322 <f_mount+0x8e>
		fs->fs_type = 0;				/* Clear new fs object */
 8016308:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801630a:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 801630c:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8016310:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016312:	d1dc      	bne.n	80162ce <f_mount+0x3a>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016314:	4602      	mov	r2, r0
 8016316:	a901      	add	r1, sp, #4
 8016318:	4668      	mov	r0, sp
 801631a:	f7fd ff9f 	bl	801425c <find_volume>
}
 801631e:	b002      	add	sp, #8
 8016320:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016322:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8016324:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
}
 8016328:	b002      	add	sp, #8
 801632a:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 801632c:	2000      	movs	r0, #0
 801632e:	6308      	str	r0, [r1, #48]	; 0x30
 8016330:	e7e6      	b.n	8016300 <f_mount+0x6c>
 8016332:	2000      	movs	r0, #0
 8016334:	6008      	str	r0, [r1, #0]
 8016336:	6908      	ldr	r0, [r1, #16]
 8016338:	4298      	cmp	r0, r3
 801633a:	d1db      	bne.n	80162f4 <f_mount+0x60>
 801633c:	2000      	movs	r0, #0
 801633e:	6108      	str	r0, [r1, #16]
 8016340:	6a08      	ldr	r0, [r1, #32]
 8016342:	4283      	cmp	r3, r0
 8016344:	d1d9      	bne.n	80162fa <f_mount+0x66>
 8016346:	2000      	movs	r0, #0
 8016348:	6208      	str	r0, [r1, #32]
 801634a:	6b08      	ldr	r0, [r1, #48]	; 0x30
 801634c:	4298      	cmp	r0, r3
 801634e:	d1d7      	bne.n	8016300 <f_mount+0x6c>
 8016350:	e7ec      	b.n	801632c <f_mount+0x98>
 8016352:	bf00      	nop
 8016354:	200071cc 	.word	0x200071cc
 8016358:	200071d4 	.word	0x200071d4

0801635c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016360:	b091      	sub	sp, #68	; 0x44
 8016362:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016364:	2800      	cmp	r0, #0
 8016366:	f000 80c8 	beq.w	80164fa <f_open+0x19e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801636a:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 801636e:	4616      	mov	r6, r2
 8016370:	4604      	mov	r4, r0
 8016372:	a902      	add	r1, sp, #8
 8016374:	a801      	add	r0, sp, #4
 8016376:	463a      	mov	r2, r7
 8016378:	f7fd ff70 	bl	801425c <find_volume>
	if (res == FR_OK) {
 801637c:	4605      	mov	r5, r0
 801637e:	b128      	cbz	r0, 801638c <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016380:	2300      	movs	r3, #0
 8016382:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8016384:	4628      	mov	r0, r5
 8016386:	b011      	add	sp, #68	; 0x44
 8016388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 801638c:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
 801638e:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 8016392:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8016394:	f001 fc72 	bl	8017c7c <ff_memalloc>
 8016398:	4680      	mov	r8, r0
 801639a:	2800      	cmp	r0, #0
 801639c:	f000 80b2 	beq.w	8016504 <f_open+0x1a8>
 80163a0:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 80163a2:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 80163a4:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80163a6:	a803      	add	r0, sp, #12
 80163a8:	f7fe ffcc 	bl	8015344 <follow_path>
		if (res == FR_OK) {
 80163ac:	bba0      	cbnz	r0, 8016418 <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80163ae:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	f2c0 8125 	blt.w	8016602 <f_open+0x2a6>
		if (Files[i].fs) {	/* Existing entry */
 80163b8:	4bac      	ldr	r3, [pc, #688]	; (801666c <f_open+0x310>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80163ba:	f027 0c01 	bic.w	ip, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80163be:	9a03      	ldr	r2, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 80163c0:	6818      	ldr	r0, [r3, #0]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80163c2:	4661      	mov	r1, ip
				Files[i].clu == dp->obj.sclust &&
 80163c4:	f8dd e014 	ldr.w	lr, [sp, #20]
				Files[i].ofs == dp->dptr) break;
 80163c8:	f8dd a020 	ldr.w	sl, [sp, #32]
		if (Files[i].fs) {	/* Existing entry */
 80163cc:	2800      	cmp	r0, #0
 80163ce:	f000 809b 	beq.w	8016508 <f_open+0x1ac>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80163d2:	4290      	cmp	r0, r2
 80163d4:	f000 809b 	beq.w	801650e <f_open+0x1b2>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80163d8:	46a9      	mov	r9, r5
		if (Files[i].fs) {	/* Existing entry */
 80163da:	6918      	ldr	r0, [r3, #16]
 80163dc:	2800      	cmp	r0, #0
 80163de:	f000 812a 	beq.w	8016636 <f_open+0x2da>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80163e2:	4290      	cmp	r0, r2
 80163e4:	f000 814e 	beq.w	8016684 <f_open+0x328>
		if (Files[i].fs) {	/* Existing entry */
 80163e8:	6a18      	ldr	r0, [r3, #32]
 80163ea:	2800      	cmp	r0, #0
 80163ec:	f000 8126 	beq.w	801663c <f_open+0x2e0>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80163f0:	4290      	cmp	r0, r2
 80163f2:	f000 813d 	beq.w	8016670 <f_open+0x314>
		if (Files[i].fs) {	/* Existing entry */
 80163f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80163f8:	2800      	cmp	r0, #0
 80163fa:	f000 809a 	beq.w	8016532 <f_open+0x1d6>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80163fe:	4290      	cmp	r0, r2
 8016400:	f000 80a4 	beq.w	801654c <f_open+0x1f0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016404:	f1b9 0f00 	cmp.w	r9, #0
 8016408:	f040 8093 	bne.w	8016532 <f_open+0x1d6>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801640c:	2012      	movs	r0, #18
		FREE_NAMBUF();
 801640e:	4605      	mov	r5, r0
 8016410:	4640      	mov	r0, r8
 8016412:	f001 fc35 	bl	8017c80 <ff_memfree>
 8016416:	e7b3      	b.n	8016380 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016418:	f016 0f1c 	tst.w	r6, #28
 801641c:	d0f7      	beq.n	801640e <f_open+0xb2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801641e:	2804      	cmp	r0, #4
 8016420:	d1f5      	bne.n	801640e <f_open+0xb2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016422:	4b92      	ldr	r3, [pc, #584]	; (801666c <f_open+0x310>)
 8016424:	681a      	ldr	r2, [r3, #0]
 8016426:	b132      	cbz	r2, 8016436 <f_open+0xda>
 8016428:	691a      	ldr	r2, [r3, #16]
 801642a:	b122      	cbz	r2, 8016436 <f_open+0xda>
 801642c:	6a1a      	ldr	r2, [r3, #32]
 801642e:	b112      	cbz	r2, 8016436 <f_open+0xda>
 8016430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016432:	2b00      	cmp	r3, #0
 8016434:	d1ea      	bne.n	801640c <f_open+0xb0>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016436:	a803      	add	r0, sp, #12
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016438:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801643c:	f7ff f9ac 	bl	8015798 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016440:	2800      	cmp	r0, #0
 8016442:	d1e4      	bne.n	801640e <f_open+0xb2>
				dw = GET_FATTIME();
 8016444:	f7fd fd9c 	bl	8013f80 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 801644a:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801644e:	f3c0 4107 	ubfx	r1, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8016452:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016456:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
 801645a:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801645c:	73d6      	strb	r6, [r2, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 801645e:	f882 c00e 	strb.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8016462:	7411      	strb	r1, [r2, #16]
	*ptr++ = (BYTE)val;
 8016464:	7450      	strb	r0, [r2, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016466:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016468:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801646a:	75d6      	strb	r6, [r2, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 801646c:	f882 c016 	strb.w	ip, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8016470:	7611      	strb	r1, [r2, #24]
	*ptr++ = (BYTE)val;
 8016472:	7650      	strb	r0, [r2, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016474:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016476:	f882 e00b 	strb.w	lr, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
 801647a:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801647c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 801647e:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8016480:	8b56      	ldrh	r6, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 8016482:	d102      	bne.n	801648a <f_open+0x12e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016484:	8a91      	ldrh	r1, [r2, #20]
 8016486:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 801648a:	2100      	movs	r1, #0
 801648c:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 801648e:	7818      	ldrb	r0, [r3, #0]
 8016490:	2803      	cmp	r0, #3
 8016492:	d100      	bne.n	8016496 <f_open+0x13a>
	*ptr++ = (BYTE)val; val >>= 8;
 8016494:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8016496:	990b      	ldr	r1, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8016498:	2200      	movs	r2, #0
 801649a:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 801649c:	2101      	movs	r1, #1
 801649e:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80164a0:	b1ae      	cbz	r6, 80164ce <f_open+0x172>
						res = remove_chain(&dj.obj, cl, 0);
 80164a2:	4631      	mov	r1, r6
 80164a4:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 80164a6:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 80164aa:	f7ff f8d7 	bl	801565c <remove_chain>
						if (res == FR_OK) {
 80164ae:	2800      	cmp	r0, #0
 80164b0:	d1ad      	bne.n	801640e <f_open+0xb2>
							res = move_window(fs, dw);
 80164b2:	9b02      	ldr	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80164b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80164b6:	4591      	cmp	r9, r2
 80164b8:	f000 8111 	beq.w	80166de <f_open+0x382>
 80164bc:	4618      	mov	r0, r3
 80164be:	4649      	mov	r1, r9
 80164c0:	f7fd fe92 	bl	80141e8 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80164c4:	3e01      	subs	r6, #1
 80164c6:	9b02      	ldr	r3, [sp, #8]
 80164c8:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 80164ca:	2800      	cmp	r0, #0
 80164cc:	d19f      	bne.n	801640e <f_open+0xb2>
				mode |= FA_MODIFIED;
 80164ce:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80164d2:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80164d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80164d8:	3900      	subs	r1, #0
 80164da:	a803      	add	r0, sp, #12
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80164dc:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80164de:	bf18      	it	ne
 80164e0:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 80164e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164e4:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80164e6:	f7fd fd4d 	bl	8013f84 <inc_lock>
 80164ea:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80164ec:	2800      	cmp	r0, #0
 80164ee:	d137      	bne.n	8016560 <f_open+0x204>
		FREE_NAMBUF();
 80164f0:	4640      	mov	r0, r8
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80164f2:	2502      	movs	r5, #2
		FREE_NAMBUF();
 80164f4:	f001 fbc4 	bl	8017c80 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80164f8:	e742      	b.n	8016380 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80164fa:	2509      	movs	r5, #9
}
 80164fc:	4628      	mov	r0, r5
 80164fe:	b011      	add	sp, #68	; 0x44
 8016500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 8016504:	2511      	movs	r5, #17
 8016506:	e73d      	b.n	8016384 <f_open+0x28>
			be = 1;
 8016508:	f04f 0901 	mov.w	r9, #1
 801650c:	e765      	b.n	80163da <f_open+0x7e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801650e:	6858      	ldr	r0, [r3, #4]
 8016510:	4570      	cmp	r0, lr
 8016512:	f47f af61 	bne.w	80163d8 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8016516:	6898      	ldr	r0, [r3, #8]
 8016518:	4550      	cmp	r0, sl
 801651a:	f47f af5d 	bne.w	80163d8 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801651e:	462a      	mov	r2, r5
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016520:	f1bc 0f00 	cmp.w	ip, #0
 8016524:	d178      	bne.n	8016618 <f_open+0x2bc>
 8016526:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801652a:	899b      	ldrh	r3, [r3, #12]
 801652c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016530:	d072      	beq.n	8016618 <f_open+0x2bc>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016532:	f016 0f1c 	tst.w	r6, #28
 8016536:	d057      	beq.n	80165e8 <f_open+0x28c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016538:	f89d 3012 	ldrb.w	r3, [sp, #18]
 801653c:	f013 0f11 	tst.w	r3, #17
 8016540:	f040 8091 	bne.w	8016666 <f_open+0x30a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016544:	0773      	lsls	r3, r6, #29
 8016546:	d569      	bpl.n	801661c <f_open+0x2c0>
 8016548:	2008      	movs	r0, #8
 801654a:	e760      	b.n	801640e <f_open+0xb2>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801654c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801654e:	4572      	cmp	r2, lr
 8016550:	f47f af58 	bne.w	8016404 <f_open+0xa8>
				Files[i].clu == dp->obj.sclust &&
 8016554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016556:	4552      	cmp	r2, sl
 8016558:	f47f af54 	bne.w	8016404 <f_open+0xa8>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801655c:	2203      	movs	r2, #3
 801655e:	e7df      	b.n	8016520 <f_open+0x1c4>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016560:	f8dd b008 	ldr.w	fp, [sp, #8]
 8016564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 8016566:	f89b 2000 	ldrb.w	r2, [fp]
	cl = ld_word(dir + DIR_FstClusLO);
 801656a:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801656c:	2a03      	cmp	r2, #3
 801656e:	d102      	bne.n	8016576 <f_open+0x21a>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016570:	8a9a      	ldrh	r2, [r3, #20]
 8016572:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016576:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016578:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801657a:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	rv = rv << 8 | ptr[0];
 801657e:	f8d3 901c 	ldr.w	r9, [r3, #28]
			fp->obj.id = fs->id;
 8016582:	f8bb 3006 	ldrh.w	r3, [fp, #6]
		*d++ = (BYTE)val;
 8016586:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->flag = mode;		/* Set file access mode */
 801658a:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 801658c:	4650      	mov	r0, sl
			fp->obj.fs = fs;	 	/* Validate the file object */
 801658e:	f8c4 b000 	str.w	fp, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016592:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016596:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 8016598:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
 801659a:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801659c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801659e:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 80165a0:	f00b fe9c 	bl	80222dc <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80165a4:	f017 0720 	ands.w	r7, r7, #32
 80165a8:	d02d      	beq.n	8016606 <f_open+0x2aa>
 80165aa:	f1b9 0f00 	cmp.w	r9, #0
 80165ae:	d02f      	beq.n	8016610 <f_open+0x2b4>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80165b0:	f8bb 300a 	ldrh.w	r3, [fp, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80165b4:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80165b8:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80165bc:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80165c0:	d806      	bhi.n	80165d0 <f_open+0x274>
 80165c2:	e069      	b.n	8016698 <f_open+0x33c>
 80165c4:	1c43      	adds	r3, r0, #1
 80165c6:	f000 808d 	beq.w	80166e4 <f_open+0x388>
 80165ca:	454f      	cmp	r7, r9
 80165cc:	f080 808a 	bcs.w	80166e4 <f_open+0x388>
					clst = get_fat(&fp->obj, clst);
 80165d0:	4631      	mov	r1, r6
 80165d2:	6820      	ldr	r0, [r4, #0]
 80165d4:	f7fe f85a 	bl	801468c <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80165d8:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80165da:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 80165de:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 80165e0:	d8f0      	bhi.n	80165c4 <f_open+0x268>
 80165e2:	2002      	movs	r0, #2
				fp->clust = clst;
 80165e4:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80165e6:	e712      	b.n	801640e <f_open+0xb2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80165e8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80165ec:	06da      	lsls	r2, r3, #27
 80165ee:	d435      	bmi.n	801665c <f_open+0x300>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80165f0:	07b1      	lsls	r1, r6, #30
 80165f2:	d518      	bpl.n	8016626 <f_open+0x2ca>
 80165f4:	07da      	lsls	r2, r3, #31
 80165f6:	d516      	bpl.n	8016626 <f_open+0x2ca>
		FREE_NAMBUF();
 80165f8:	4640      	mov	r0, r8
						res = FR_DENIED;
 80165fa:	2507      	movs	r5, #7
		FREE_NAMBUF();
 80165fc:	f001 fb40 	bl	8017c80 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016600:	e6be      	b.n	8016380 <f_open+0x24>
				res = FR_INVALID_NAME;
 8016602:	2006      	movs	r0, #6
 8016604:	e703      	b.n	801640e <f_open+0xb2>
		FREE_NAMBUF();
 8016606:	4640      	mov	r0, r8
 8016608:	463d      	mov	r5, r7
 801660a:	f001 fb39 	bl	8017c80 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801660e:	e6b9      	b.n	8016384 <f_open+0x28>
		FREE_NAMBUF();
 8016610:	4640      	mov	r0, r8
 8016612:	f001 fb35 	bl	8017c80 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016616:	e6b5      	b.n	8016384 <f_open+0x28>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016618:	2010      	movs	r0, #16
 801661a:	e6f8      	b.n	801640e <f_open+0xb2>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801661c:	0730      	lsls	r0, r6, #28
 801661e:	f53f af11 	bmi.w	8016444 <f_open+0xe8>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016622:	9b02      	ldr	r3, [sp, #8]
 8016624:	e757      	b.n	80164d6 <f_open+0x17a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016626:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801662a:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801662c:	2e00      	cmp	r6, #0
 801662e:	f47f af4e 	bne.w	80164ce <f_open+0x172>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016632:	4661      	mov	r1, ip
 8016634:	e74f      	b.n	80164d6 <f_open+0x17a>
			be = 1;
 8016636:	f04f 0901 	mov.w	r9, #1
 801663a:	e6d5      	b.n	80163e8 <f_open+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 801663c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801663e:	2800      	cmp	r0, #0
 8016640:	f43f af77 	beq.w	8016532 <f_open+0x1d6>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016644:	4290      	cmp	r0, r2
 8016646:	f47f af74 	bne.w	8016532 <f_open+0x1d6>
 801664a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801664c:	4596      	cmp	lr, r2
 801664e:	f47f af70 	bne.w	8016532 <f_open+0x1d6>
				Files[i].clu == dp->obj.sclust &&
 8016652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016654:	4552      	cmp	r2, sl
 8016656:	f47f af6c 	bne.w	8016532 <f_open+0x1d6>
 801665a:	e77f      	b.n	801655c <f_open+0x200>
		FREE_NAMBUF();
 801665c:	4640      	mov	r0, r8
					res = FR_NO_FILE;
 801665e:	2504      	movs	r5, #4
		FREE_NAMBUF();
 8016660:	f001 fb0e 	bl	8017c80 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016664:	e68c      	b.n	8016380 <f_open+0x24>
					res = FR_DENIED;
 8016666:	2007      	movs	r0, #7
 8016668:	e6d1      	b.n	801640e <f_open+0xb2>
 801666a:	bf00      	nop
 801666c:	200071d4 	.word	0x200071d4
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016670:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016672:	4570      	cmp	r0, lr
 8016674:	f47f aebf 	bne.w	80163f6 <f_open+0x9a>
				Files[i].clu == dp->obj.sclust &&
 8016678:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801667a:	4550      	cmp	r0, sl
 801667c:	f47f aebb 	bne.w	80163f6 <f_open+0x9a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016680:	2202      	movs	r2, #2
 8016682:	e74d      	b.n	8016520 <f_open+0x1c4>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016684:	6958      	ldr	r0, [r3, #20]
 8016686:	4570      	cmp	r0, lr
 8016688:	f47f aeae 	bne.w	80163e8 <f_open+0x8c>
				Files[i].clu == dp->obj.sclust &&
 801668c:	6998      	ldr	r0, [r3, #24]
 801668e:	4582      	cmp	sl, r0
 8016690:	f47f aeaa 	bne.w	80163e8 <f_open+0x8c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016694:	2201      	movs	r2, #1
 8016696:	e743      	b.n	8016520 <f_open+0x1c4>
				fp->clust = clst;
 8016698:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801669a:	f3c9 0308 	ubfx	r3, r9, #0, #9
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d0b6      	beq.n	8016610 <f_open+0x2b4>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80166a2:	9802      	ldr	r0, [sp, #8]
	clst -= 2;
 80166a4:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80166a6:	6983      	ldr	r3, [r0, #24]
 80166a8:	3b02      	subs	r3, #2
 80166aa:	429e      	cmp	r6, r3
 80166ac:	f4bf af20 	bcs.w	80164f0 <f_open+0x194>
	return clst * fs->csize + fs->database;
 80166b0:	8942      	ldrh	r2, [r0, #10]
 80166b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80166b4:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 80166b8:	2a00      	cmp	r2, #0
 80166ba:	f43f af19 	beq.w	80164f0 <f_open+0x194>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80166be:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80166c2:	4651      	mov	r1, sl
 80166c4:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80166c6:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80166c8:	7840      	ldrb	r0, [r0, #1]
 80166ca:	f7fd fc31 	bl	8013f30 <disk_read>
 80166ce:	4605      	mov	r5, r0
		FREE_NAMBUF();
 80166d0:	4640      	mov	r0, r8
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80166d2:	2d00      	cmp	r5, #0
 80166d4:	d09d      	beq.n	8016612 <f_open+0x2b6>
 80166d6:	2501      	movs	r5, #1
		FREE_NAMBUF();
 80166d8:	f001 fad2 	bl	8017c80 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80166dc:	e650      	b.n	8016380 <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80166de:	3e01      	subs	r6, #1
 80166e0:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 80166e2:	e6f4      	b.n	80164ce <f_open+0x172>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80166e4:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
 80166e6:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80166e8:	bf0c      	ite	eq
 80166ea:	2001      	moveq	r0, #1
 80166ec:	2000      	movne	r0, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80166ee:	f43f ae8e 	beq.w	801640e <f_open+0xb2>
 80166f2:	e7d2      	b.n	801669a <f_open+0x33e>

080166f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80166f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f8:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80166fa:	2300      	movs	r3, #0
{
 80166fc:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 80166fe:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016700:	b150      	cbz	r0, 8016718 <f_read+0x24>
 8016702:	6803      	ldr	r3, [r0, #0]
 8016704:	4604      	mov	r4, r0
 8016706:	b13b      	cbz	r3, 8016718 <f_read+0x24>
 8016708:	4617      	mov	r7, r2
 801670a:	781a      	ldrb	r2, [r3, #0]
 801670c:	b122      	cbz	r2, 8016718 <f_read+0x24>
 801670e:	460d      	mov	r5, r1
 8016710:	88da      	ldrh	r2, [r3, #6]
 8016712:	8881      	ldrh	r1, [r0, #4]
 8016714:	4291      	cmp	r1, r2
 8016716:	d005      	beq.n	8016724 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8016718:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 801671c:	4640      	mov	r0, r8
 801671e:	b005      	add	sp, #20
 8016720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016724:	7858      	ldrb	r0, [r3, #1]
 8016726:	f7fd fbe7 	bl	8013ef8 <disk_status>
 801672a:	07c2      	lsls	r2, r0, #31
 801672c:	d4f4      	bmi.n	8016718 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801672e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8016732:	f1b8 0f00 	cmp.w	r8, #0
 8016736:	d1f1      	bne.n	801671c <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8016738:	7d23      	ldrb	r3, [r4, #20]
 801673a:	f013 0301 	ands.w	r3, r3, #1
 801673e:	9300      	str	r3, [sp, #0]
 8016740:	f000 80d8 	beq.w	80168f4 <f_read+0x200>
	remain = fp->obj.objsize - fp->fptr;
 8016744:	69a0      	ldr	r0, [r4, #24]
 8016746:	68e3      	ldr	r3, [r4, #12]
 8016748:	1a1b      	subs	r3, r3, r0
 801674a:	429f      	cmp	r7, r3
 801674c:	bf28      	it	cs
 801674e:	461f      	movcs	r7, r3
	for ( ;  btr;								/* Repeat until all data read */
 8016750:	2f00      	cmp	r7, #0
 8016752:	d0e3      	beq.n	801671c <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016754:	46a2      	mov	sl, r4
 8016756:	f104 0331 	add.w	r3, r4, #49	; 0x31
 801675a:	f8cd 8008 	str.w	r8, [sp, #8]
 801675e:	f85a 9b30 	ldr.w	r9, [sl], #48
 8016762:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016764:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8016768:	2b00      	cmp	r3, #0
 801676a:	d158      	bne.n	801681e <f_read+0x12a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801676c:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8016770:	0a43      	lsrs	r3, r0, #9
 8016772:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8016774:	ea12 2250 	ands.w	r2, r2, r0, lsr #9
 8016778:	f000 8081 	beq.w	801687e <f_read+0x18a>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801677c:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801677e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8016782:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016784:	3b02      	subs	r3, #2
 8016786:	4298      	cmp	r0, r3
 8016788:	f080 8087 	bcs.w	801689a <f_read+0x1a6>
	return clst * fs->csize + fs->database;
 801678c:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8016790:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8016794:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016798:	2800      	cmp	r0, #0
 801679a:	d07e      	beq.n	801689a <f_read+0x1a6>
			if (cc) {							/* Read maximum contiguous sectors directly */
 801679c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 80167a0:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 80167a4:	d325      	bcc.n	80167f2 <f_read+0xfe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80167a6:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80167aa:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80167ae:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80167b0:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 80167b4:	bf88      	it	hi
 80167b6:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80167ba:	465a      	mov	r2, fp
 80167bc:	4629      	mov	r1, r5
 80167be:	4643      	mov	r3, r8
 80167c0:	f7fd fbb6 	bl	8013f30 <disk_read>
 80167c4:	2800      	cmp	r0, #0
 80167c6:	f040 8083 	bne.w	80168d0 <f_read+0x1dc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80167ca:	f994 2014 	ldrsb.w	r2, [r4, #20]
 80167ce:	2a00      	cmp	r2, #0
 80167d0:	f2c0 80a7 	blt.w	8016922 <f_read+0x22e>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80167d4:	ea4f 2c48 	mov.w	ip, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80167d8:	69a0      	ldr	r0, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 80167da:	ebb7 070c 	subs.w	r7, r7, ip
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80167de:	6833      	ldr	r3, [r6, #0]
 80167e0:	4465      	add	r5, ip
 80167e2:	4460      	add	r0, ip
 80167e4:	4463      	add	r3, ip
 80167e6:	61a0      	str	r0, [r4, #24]
 80167e8:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 80167ea:	d1bb      	bne.n	8016764 <f_read+0x70>
 80167ec:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80167f0:	e794      	b.n	801671c <f_read+0x28>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80167f2:	6a22      	ldr	r2, [r4, #32]
 80167f4:	455a      	cmp	r2, fp
 80167f6:	d00d      	beq.n	8016814 <f_read+0x120>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80167f8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	f2c0 8083 	blt.w	8016908 <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8016802:	2301      	movs	r3, #1
 8016804:	465a      	mov	r2, fp
 8016806:	4651      	mov	r1, sl
 8016808:	f899 0001 	ldrb.w	r0, [r9, #1]
 801680c:	f7fd fb90 	bl	8013f30 <disk_read>
 8016810:	2800      	cmp	r0, #0
 8016812:	d15d      	bne.n	80168d0 <f_read+0x1dc>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016814:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 8016816:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801681a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801681e:	1c59      	adds	r1, r3, #1
 8016820:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8016824:	4453      	add	r3, sl
 8016826:	4451      	add	r1, sl
 8016828:	45bc      	cmp	ip, r7
 801682a:	eba5 0101 	sub.w	r1, r5, r1
 801682e:	bf28      	it	cs
 8016830:	46bc      	movcs	ip, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016832:	2902      	cmp	r1, #2
 8016834:	f10c 3bff 	add.w	fp, ip, #4294967295
 8016838:	d952      	bls.n	80168e0 <f_read+0x1ec>
 801683a:	f1bb 0f07 	cmp.w	fp, #7
 801683e:	d94f      	bls.n	80168e0 <f_read+0x1ec>
 8016840:	f02c 0e03 	bic.w	lr, ip, #3
 8016844:	462a      	mov	r2, r5
 8016846:	4619      	mov	r1, r3
 8016848:	44ae      	add	lr, r5
			*d++ = *s++;
 801684a:	f851 0b04 	ldr.w	r0, [r1], #4
 801684e:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8016852:	4596      	cmp	lr, r2
 8016854:	d1f9      	bne.n	801684a <f_read+0x156>
 8016856:	f02c 0203 	bic.w	r2, ip, #3
 801685a:	4594      	cmp	ip, r2
 801685c:	eb05 0102 	add.w	r1, r5, r2
 8016860:	eb03 0002 	add.w	r0, r3, r2
 8016864:	d0b8      	beq.n	80167d8 <f_read+0xe4>
			*d++ = *s++;
 8016866:	5c9b      	ldrb	r3, [r3, r2]
 8016868:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 801686a:	ebbb 0202 	subs.w	r2, fp, r2
 801686e:	d0b3      	beq.n	80167d8 <f_read+0xe4>
			*d++ = *s++;
 8016870:	7843      	ldrb	r3, [r0, #1]
		} while (--cnt);
 8016872:	2a01      	cmp	r2, #1
			*d++ = *s++;
 8016874:	704b      	strb	r3, [r1, #1]
		} while (--cnt);
 8016876:	d0af      	beq.n	80167d8 <f_read+0xe4>
			*d++ = *s++;
 8016878:	7883      	ldrb	r3, [r0, #2]
 801687a:	708b      	strb	r3, [r1, #2]
		} while (--cnt);
 801687c:	e7ac      	b.n	80167d8 <f_read+0xe4>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801687e:	b998      	cbnz	r0, 80168a8 <f_read+0x1b4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8016880:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8016882:	2801      	cmp	r0, #1
 8016884:	d909      	bls.n	801689a <f_read+0x1a6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016886:	1c43      	adds	r3, r0, #1
 8016888:	d022      	beq.n	80168d0 <f_read+0x1dc>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801688a:	f8d9 3018 	ldr.w	r3, [r9, #24]
				fp->clust = clst;				/* Update current cluster */
 801688e:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 8016890:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016892:	3b02      	subs	r3, #2
 8016894:	4298      	cmp	r0, r3
 8016896:	f4ff af79 	bcc.w	801678c <f_read+0x98>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801689a:	2302      	movs	r3, #2
 801689c:	4698      	mov	r8, r3
 801689e:	7563      	strb	r3, [r4, #21]
}
 80168a0:	4640      	mov	r0, r8
 80168a2:	b005      	add	sp, #20
 80168a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80168a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80168aa:	b330      	cbz	r0, 80168fa <f_read+0x206>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80168ac:	6821      	ldr	r1, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80168ae:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80168b0:	8949      	ldrh	r1, [r1, #10]
 80168b2:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80168b6:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80168b8:	b929      	cbnz	r1, 80168c6 <f_read+0x1d2>
 80168ba:	e7ee      	b.n	801689a <f_read+0x1a6>
		cl -= ncl; tbl++;		/* Next fragment */
 80168bc:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80168be:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80168c2:	2900      	cmp	r1, #0
 80168c4:	d0e9      	beq.n	801689a <f_read+0x1a6>
		if (cl < ncl) break;	/* In this fragment? */
 80168c6:	4299      	cmp	r1, r3
 80168c8:	d9f8      	bls.n	80168bc <f_read+0x1c8>
	return cl + *tbl;	/* Return the cluster number */
 80168ca:	6840      	ldr	r0, [r0, #4]
 80168cc:	4418      	add	r0, r3
 80168ce:	e7d8      	b.n	8016882 <f_read+0x18e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80168d0:	f8dd 8000 	ldr.w	r8, [sp]
 80168d4:	2301      	movs	r3, #1
}
 80168d6:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80168d8:	7563      	strb	r3, [r4, #21]
}
 80168da:	b005      	add	sp, #20
 80168dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168e0:	1e6a      	subs	r2, r5, #1
 80168e2:	eb03 000c 	add.w	r0, r3, ip
			*d++ = *s++;
 80168e6:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 80168ea:	4283      	cmp	r3, r0
			*d++ = *s++;
 80168ec:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 80168f0:	d1f9      	bne.n	80168e6 <f_read+0x1f2>
 80168f2:	e771      	b.n	80167d8 <f_read+0xe4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80168f4:	f04f 0807 	mov.w	r8, #7
 80168f8:	e710      	b.n	801671c <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80168fa:	69e1      	ldr	r1, [r4, #28]
 80168fc:	6820      	ldr	r0, [r4, #0]
 80168fe:	9203      	str	r2, [sp, #12]
 8016900:	f7fd fec4 	bl	801468c <get_fat.isra.0>
 8016904:	9a03      	ldr	r2, [sp, #12]
 8016906:	e7bc      	b.n	8016882 <f_read+0x18e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016908:	2301      	movs	r3, #1
 801690a:	4651      	mov	r1, sl
 801690c:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016910:	f7fd fb1c 	bl	8013f4c <disk_write>
 8016914:	2800      	cmp	r0, #0
 8016916:	d1db      	bne.n	80168d0 <f_read+0x1dc>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016918:	7d23      	ldrb	r3, [r4, #20]
 801691a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801691e:	7523      	strb	r3, [r4, #20]
 8016920:	e76f      	b.n	8016802 <f_read+0x10e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8016922:	6a22      	ldr	r2, [r4, #32]
 8016924:	eba2 0b0b 	sub.w	fp, r2, fp
 8016928:	45c3      	cmp	fp, r8
 801692a:	f4bf af53 	bcs.w	80167d4 <f_read+0xe0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801692e:	eb05 224b 	add.w	r2, r5, fp, lsl #9
 8016932:	9b01      	ldr	r3, [sp, #4]
 8016934:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016936:	1ad0      	subs	r0, r2, r3
 8016938:	2802      	cmp	r0, #2
 801693a:	d908      	bls.n	801694e <f_read+0x25a>
 801693c:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8016940:	f851 3b04 	ldr.w	r3, [r1], #4
 8016944:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 8016948:	4562      	cmp	r2, ip
 801694a:	d1f9      	bne.n	8016940 <f_read+0x24c>
 801694c:	e742      	b.n	80167d4 <f_read+0xe0>
 801694e:	3a01      	subs	r2, #1
 8016950:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 8016954:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8016958:	458c      	cmp	ip, r1
			*d++ = *s++;
 801695a:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 801695e:	d1f9      	bne.n	8016954 <f_read+0x260>
 8016960:	e738      	b.n	80167d4 <f_read+0xe0>
 8016962:	bf00      	nop

08016964 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016968:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 801696a:	2300      	movs	r3, #0
{
 801696c:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 801696e:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016970:	b150      	cbz	r0, 8016988 <f_write+0x24>
 8016972:	6803      	ldr	r3, [r0, #0]
 8016974:	4604      	mov	r4, r0
 8016976:	b13b      	cbz	r3, 8016988 <f_write+0x24>
 8016978:	4616      	mov	r6, r2
 801697a:	781a      	ldrb	r2, [r3, #0]
 801697c:	b122      	cbz	r2, 8016988 <f_write+0x24>
 801697e:	460d      	mov	r5, r1
 8016980:	88da      	ldrh	r2, [r3, #6]
 8016982:	8881      	ldrh	r1, [r0, #4]
 8016984:	4291      	cmp	r1, r2
 8016986:	d005      	beq.n	8016994 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8016988:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 801698c:	4640      	mov	r0, r8
 801698e:	b005      	add	sp, #20
 8016990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016994:	7858      	ldrb	r0, [r3, #1]
 8016996:	f7fd faaf 	bl	8013ef8 <disk_status>
 801699a:	07c0      	lsls	r0, r0, #31
 801699c:	d4f4      	bmi.n	8016988 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801699e:	f894 8015 	ldrb.w	r8, [r4, #21]
 80169a2:	f1b8 0f00 	cmp.w	r8, #0
 80169a6:	d1f1      	bne.n	801698c <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80169a8:	7d22      	ldrb	r2, [r4, #20]
 80169aa:	0791      	lsls	r1, r2, #30
 80169ac:	f140 80f0 	bpl.w	8016b90 <f_write+0x22c>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80169b0:	69a3      	ldr	r3, [r4, #24]
 80169b2:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80169b4:	bf28      	it	cs
 80169b6:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
 80169b8:	2e00      	cmp	r6, #0
 80169ba:	d066      	beq.n	8016a8a <f_write+0x126>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80169bc:	46a2      	mov	sl, r4
 80169be:	f504 720c 	add.w	r2, r4, #560	; 0x230
 80169c2:	f85a 9b30 	ldr.w	r9, [sl], #48
 80169c6:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80169c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80169cc:	2a00      	cmp	r2, #0
 80169ce:	d16b      	bne.n	8016aa8 <f_write+0x144>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80169d0:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 80169d4:	0a5a      	lsrs	r2, r3, #9
 80169d6:	f10b 3bff 	add.w	fp, fp, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 80169da:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
 80169de:	d110      	bne.n	8016a02 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	f040 80a0 	bne.w	8016b26 <f_write+0x1c2>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80169e6:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80169e8:	2800      	cmp	r0, #0
 80169ea:	f000 80dc 	beq.w	8016ba6 <f_write+0x242>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80169ee:	2801      	cmp	r0, #1
 80169f0:	f000 8092 	beq.w	8016b18 <f_write+0x1b4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80169f4:	1c43      	adds	r3, r0, #1
 80169f6:	f000 80ba 	beq.w	8016b6e <f_write+0x20a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80169fa:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80169fc:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80169fe:	b903      	cbnz	r3, 8016a02 <f_write+0x9e>
 8016a00:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016a02:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	f2c0 80a4 	blt.w	8016b54 <f_write+0x1f0>
	clst -= 2;
 8016a0c:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016a0e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8016a12:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016a14:	3b02      	subs	r3, #2
 8016a16:	429a      	cmp	r2, r3
 8016a18:	d27e      	bcs.n	8016b18 <f_write+0x1b4>
	return clst * fs->csize + fs->database;
 8016a1a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8016a1e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8016a22:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016a26:	2a00      	cmp	r2, #0
 8016a28:	d076      	beq.n	8016b18 <f_write+0x1b4>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016a2a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8016a2e:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016a30:	d32f      	bcc.n	8016a92 <f_write+0x12e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016a32:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016a36:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016a38:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016a3a:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8016a3e:	bf88      	it	hi
 8016a40:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016a44:	4629      	mov	r1, r5
 8016a46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016a4a:	f7fd fa7f 	bl	8013f4c <disk_write>
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	f040 808d 	bne.w	8016b6e <f_write+0x20a>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016a54:	6a21      	ldr	r1, [r4, #32]
 8016a56:	9a02      	ldr	r2, [sp, #8]
 8016a58:	9b03      	ldr	r3, [sp, #12]
 8016a5a:	1a8a      	subs	r2, r1, r2
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	f0c0 80b6 	bcc.w	8016bce <f_write+0x26a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016a62:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 8016a66:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016a6a:	69a3      	ldr	r3, [r4, #24]
 8016a6c:	4615      	mov	r5, r2
 8016a6e:	68e2      	ldr	r2, [r4, #12]
 8016a70:	4463      	add	r3, ip
 8016a72:	429a      	cmp	r2, r3
 8016a74:	61a3      	str	r3, [r4, #24]
 8016a76:	bf38      	it	cc
 8016a78:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 8016a7a:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016a7e:	60e2      	str	r2, [r4, #12]
 8016a80:	683a      	ldr	r2, [r7, #0]
 8016a82:	4462      	add	r2, ip
 8016a84:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8016a86:	d19f      	bne.n	80169c8 <f_write+0x64>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016a88:	7d22      	ldrb	r2, [r4, #20]
 8016a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016a8e:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8016a90:	e77c      	b.n	801698c <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016a92:	6a23      	ldr	r3, [r4, #32]
 8016a94:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 8016a96:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016a98:	d003      	beq.n	8016aa2 <f_write+0x13e>
 8016a9a:	68e1      	ldr	r1, [r4, #12]
 8016a9c:	428b      	cmp	r3, r1
 8016a9e:	f0c0 808a 	bcc.w	8016bb6 <f_write+0x252>
			fp->sect = sect;
 8016aa2:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016aa8:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016aac:	eb0a 0302 	add.w	r3, sl, r2
 8016ab0:	1c6a      	adds	r2, r5, #1
 8016ab2:	45b4      	cmp	ip, r6
 8016ab4:	eba3 0202 	sub.w	r2, r3, r2
 8016ab8:	bf28      	it	cs
 8016aba:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016abc:	2a02      	cmp	r2, #2
 8016abe:	f10c 3bff 	add.w	fp, ip, #4294967295
 8016ac2:	d95b      	bls.n	8016b7c <f_write+0x218>
 8016ac4:	f1bb 0f07 	cmp.w	fp, #7
 8016ac8:	d958      	bls.n	8016b7c <f_write+0x218>
 8016aca:	f02c 0e03 	bic.w	lr, ip, #3
 8016ace:	461a      	mov	r2, r3
 8016ad0:	4629      	mov	r1, r5
 8016ad2:	449e      	add	lr, r3
			*d++ = *s++;
 8016ad4:	f851 0b04 	ldr.w	r0, [r1], #4
 8016ad8:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8016adc:	4572      	cmp	r2, lr
 8016ade:	d1f9      	bne.n	8016ad4 <f_write+0x170>
 8016ae0:	f02c 0103 	bic.w	r1, ip, #3
 8016ae4:	458c      	cmp	ip, r1
 8016ae6:	eb03 0001 	add.w	r0, r3, r1
 8016aea:	eb05 0201 	add.w	r2, r5, r1
 8016aee:	d00e      	beq.n	8016b0e <f_write+0x1aa>
			*d++ = *s++;
 8016af0:	f815 e001 	ldrb.w	lr, [r5, r1]
 8016af4:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 8016af8:	ebbb 0101 	subs.w	r1, fp, r1
 8016afc:	d005      	beq.n	8016b0a <f_write+0x1a6>
			*d++ = *s++;
 8016afe:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 8016b00:	2901      	cmp	r1, #1
			*d++ = *s++;
 8016b02:	7043      	strb	r3, [r0, #1]
 8016b04:	bf1c      	itt	ne
 8016b06:	7893      	ldrbne	r3, [r2, #2]
 8016b08:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 8016b0a:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 8016b0e:	7d23      	ldrb	r3, [r4, #20]
 8016b10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016b14:	7523      	strb	r3, [r4, #20]
 8016b16:	e7a8      	b.n	8016a6a <f_write+0x106>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016b18:	2302      	movs	r3, #2
 8016b1a:	4698      	mov	r8, r3
 8016b1c:	7563      	strb	r3, [r4, #21]
}
 8016b1e:	4640      	mov	r0, r8
 8016b20:	b005      	add	sp, #20
 8016b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8016b26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016b28:	b3a9      	cbz	r1, 8016b96 <f_write+0x232>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016b2a:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016b2c:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016b2e:	895b      	ldrh	r3, [r3, #10]
 8016b30:	fbb2 f3f3 	udiv	r3, r2, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016b34:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016b36:	b92a      	cbnz	r2, 8016b44 <f_write+0x1e0>
 8016b38:	e7a6      	b.n	8016a88 <f_write+0x124>
		cl -= ncl; tbl++;		/* Next fragment */
 8016b3a:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016b3c:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016b40:	2a00      	cmp	r2, #0
 8016b42:	d0a1      	beq.n	8016a88 <f_write+0x124>
		if (cl < ncl) break;	/* In this fragment? */
 8016b44:	4293      	cmp	r3, r2
 8016b46:	d2f8      	bcs.n	8016b3a <f_write+0x1d6>
	return cl + *tbl;	/* Return the cluster number */
 8016b48:	6848      	ldr	r0, [r1, #4]
 8016b4a:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	f47f af4e 	bne.w	80169ee <f_write+0x8a>
 8016b52:	e799      	b.n	8016a88 <f_write+0x124>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016b54:	2301      	movs	r3, #1
 8016b56:	6a22      	ldr	r2, [r4, #32]
 8016b58:	4651      	mov	r1, sl
 8016b5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016b5e:	f7fd f9f5 	bl	8013f4c <disk_write>
 8016b62:	b920      	cbnz	r0, 8016b6e <f_write+0x20a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016b64:	7d23      	ldrb	r3, [r4, #20]
 8016b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b6a:	7523      	strb	r3, [r4, #20]
 8016b6c:	e74e      	b.n	8016a0c <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016b6e:	2301      	movs	r3, #1
 8016b70:	4698      	mov	r8, r3
 8016b72:	7563      	strb	r3, [r4, #21]
}
 8016b74:	4640      	mov	r0, r8
 8016b76:	b005      	add	sp, #20
 8016b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b7c:	3b01      	subs	r3, #1
 8016b7e:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 8016b82:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 8016b86:	4295      	cmp	r5, r2
			*d++ = *s++;
 8016b88:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 8016b8c:	d1f9      	bne.n	8016b82 <f_write+0x21e>
 8016b8e:	e7be      	b.n	8016b0e <f_write+0x1aa>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016b90:	f04f 0807 	mov.w	r8, #7
 8016b94:	e6fa      	b.n	801698c <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016b96:	69e1      	ldr	r1, [r4, #28]
 8016b98:	4620      	mov	r0, r4
 8016b9a:	f7fe f8a3 	bl	8014ce4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016b9e:	2800      	cmp	r0, #0
 8016ba0:	f47f af25 	bne.w	80169ee <f_write+0x8a>
 8016ba4:	e770      	b.n	8016a88 <f_write+0x124>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016ba6:	4659      	mov	r1, fp
 8016ba8:	4620      	mov	r0, r4
 8016baa:	f7fe f89b 	bl	8014ce4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016bae:	2800      	cmp	r0, #0
 8016bb0:	f47f af1d 	bne.w	80169ee <f_write+0x8a>
 8016bb4:	e768      	b.n	8016a88 <f_write+0x124>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	4651      	mov	r1, sl
 8016bba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016bbe:	9202      	str	r2, [sp, #8]
 8016bc0:	f7fd f9b6 	bl	8013f30 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	d1d2      	bne.n	8016b6e <f_write+0x20a>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016bc8:	69a3      	ldr	r3, [r4, #24]
 8016bca:	9a02      	ldr	r2, [sp, #8]
 8016bcc:	e769      	b.n	8016aa2 <f_write+0x13e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016bce:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 8016bd2:	1c42      	adds	r2, r0, #1
 8016bd4:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016bd6:	ebaa 0202 	sub.w	r2, sl, r2
 8016bda:	2a02      	cmp	r2, #2
 8016bdc:	d90d      	bls.n	8016bfa <f_write+0x296>
 8016bde:	4652      	mov	r2, sl
 8016be0:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 8016be4:	f851 0b04 	ldr.w	r0, [r1], #4
 8016be8:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8016bec:	4562      	cmp	r2, ip
 8016bee:	d1f9      	bne.n	8016be4 <f_write+0x280>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016bf0:	7d22      	ldrb	r2, [r4, #20]
 8016bf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016bf6:	7522      	strb	r2, [r4, #20]
 8016bf8:	e733      	b.n	8016a62 <f_write+0xfe>
 8016bfa:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 8016bfe:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 8016c02:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 8016c06:	458c      	cmp	ip, r1
			*d++ = *s++;
 8016c08:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8016c0c:	d1f9      	bne.n	8016c02 <f_write+0x29e>
 8016c0e:	e7ef      	b.n	8016bf0 <f_write+0x28c>

08016c10 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016c10:	b158      	cbz	r0, 8016c2a <f_close+0x1a>
 8016c12:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016c14:	b570      	push	{r4, r5, r6, lr}
 8016c16:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016c18:	b12b      	cbz	r3, 8016c26 <f_close+0x16>
 8016c1a:	781a      	ldrb	r2, [r3, #0]
 8016c1c:	b11a      	cbz	r2, 8016c26 <f_close+0x16>
 8016c1e:	8881      	ldrh	r1, [r0, #4]
 8016c20:	88da      	ldrh	r2, [r3, #6]
 8016c22:	4291      	cmp	r1, r2
 8016c24:	d003      	beq.n	8016c2e <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8016c26:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8016c28:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8016c2a:	2009      	movs	r0, #9
}
 8016c2c:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016c2e:	7858      	ldrb	r0, [r3, #1]
 8016c30:	f7fd f962 	bl	8013ef8 <disk_status>
 8016c34:	07c1      	lsls	r1, r0, #31
 8016c36:	d4f6      	bmi.n	8016c26 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016c38:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016c3a:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016c3c:	065a      	lsls	r2, r3, #25
 8016c3e:	d53c      	bpl.n	8016cba <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016c40:	061b      	lsls	r3, r3, #24
 8016c42:	d45d      	bmi.n	8016d00 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 8016c44:	f7fd f99c 	bl	8013f80 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8016c48:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016c4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 8016c4c:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016c4e:	4299      	cmp	r1, r3
 8016c50:	d004      	beq.n	8016c5c <f_close+0x4c>
 8016c52:	4628      	mov	r0, r5
 8016c54:	f7fd fac8 	bl	80141e8 <move_window.part.0>
				if (res == FR_OK) {
 8016c58:	2800      	cmp	r0, #0
 8016c5a:	d1e5      	bne.n	8016c28 <f_close+0x18>
					dir = fp->dir_ptr;
 8016c5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016c5e:	7ad3      	ldrb	r3, [r2, #11]
 8016c60:	f043 0320 	orr.w	r3, r3, #32
 8016c64:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8016c66:	68a3      	ldr	r3, [r4, #8]
 8016c68:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016c6a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8016c6e:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
 8016c70:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8016c72:	7809      	ldrb	r1, [r1, #0]
 8016c74:	2903      	cmp	r1, #3
 8016c76:	d103      	bne.n	8016c80 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016c78:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8016c7a:	7513      	strb	r3, [r2, #20]
 8016c7c:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8016c7e:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8016c80:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016c82:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8016c84:	7596      	strb	r6, [r2, #22]
 8016c86:	0a19      	lsrs	r1, r3, #8
 8016c88:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8016c8a:	7751      	strb	r1, [r2, #29]
 8016c8c:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8016c8e:	0e1b      	lsrs	r3, r3, #24
 8016c90:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 8016c92:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8016c94:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8016c96:	75d3      	strb	r3, [r2, #23]
 8016c98:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8016c9a:	0e36      	lsrs	r6, r6, #24
 8016c9c:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 8016c9e:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 8016ca0:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8016ca2:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
 8016ca4:	2301      	movs	r3, #1
 8016ca6:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016ca8:	f7fd ffac 	bl	8014c04 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016cac:	7d23      	ldrb	r3, [r4, #20]
 8016cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016cb2:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8016cb4:	2800      	cmp	r0, #0
 8016cb6:	d1b7      	bne.n	8016c28 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016cb8:	6825      	ldr	r5, [r4, #0]
 8016cba:	2d00      	cmp	r5, #0
 8016cbc:	d0b3      	beq.n	8016c26 <f_close+0x16>
 8016cbe:	782b      	ldrb	r3, [r5, #0]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d0b0      	beq.n	8016c26 <f_close+0x16>
 8016cc4:	88a2      	ldrh	r2, [r4, #4]
 8016cc6:	88eb      	ldrh	r3, [r5, #6]
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	d1ac      	bne.n	8016c26 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016ccc:	7868      	ldrb	r0, [r5, #1]
 8016cce:	f7fd f913 	bl	8013ef8 <disk_status>
 8016cd2:	f010 0001 	ands.w	r0, r0, #1
 8016cd6:	d1a6      	bne.n	8016c26 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016cd8:	6923      	ldr	r3, [r4, #16]
 8016cda:	3b01      	subs	r3, #1
 8016cdc:	2b03      	cmp	r3, #3
 8016cde:	d820      	bhi.n	8016d22 <f_close+0x112>
		n = Files[i].ctr;
 8016ce0:	4912      	ldr	r1, [pc, #72]	; (8016d2c <f_close+0x11c>)
 8016ce2:	011d      	lsls	r5, r3, #4
 8016ce4:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8016ce8:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016cea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8016cee:	d014      	beq.n	8016d1a <f_close+0x10a>
		if (n > 0) n--;				/* Decrement read mode open count */
 8016cf0:	b1a2      	cbz	r2, 8016d1c <f_close+0x10c>
 8016cf2:	3a01      	subs	r2, #1
 8016cf4:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8016cf6:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016cf8:	b182      	cbz	r2, 8016d1c <f_close+0x10c>
				fp->obj.fs = 0;			/* Invalidate file object */
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	6023      	str	r3, [r4, #0]
}
 8016cfe:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016d00:	2301      	movs	r3, #1
 8016d02:	6a22      	ldr	r2, [r4, #32]
 8016d04:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016d08:	7868      	ldrb	r0, [r5, #1]
 8016d0a:	f7fd f91f 	bl	8013f4c <disk_write>
 8016d0e:	b950      	cbnz	r0, 8016d26 <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016d10:	7d23      	ldrb	r3, [r4, #20]
 8016d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016d16:	7523      	strb	r3, [r4, #20]
 8016d18:	e794      	b.n	8016c44 <f_close+0x34>
		Files[i].ctr = n;
 8016d1a:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8016d20:	e7eb      	b.n	8016cfa <f_close+0xea>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016d22:	2002      	movs	r0, #2
}
 8016d24:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016d26:	2001      	movs	r0, #1
}
 8016d28:	bd70      	pop	{r4, r5, r6, pc}
 8016d2a:	bf00      	nop
 8016d2c:	200071d4 	.word	0x200071d4

08016d30 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8016d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d34:	b087      	sub	sp, #28
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016d36:	b148      	cbz	r0, 8016d4c <f_lseek+0x1c>
 8016d38:	6803      	ldr	r3, [r0, #0]
 8016d3a:	4604      	mov	r4, r0
 8016d3c:	b133      	cbz	r3, 8016d4c <f_lseek+0x1c>
 8016d3e:	781a      	ldrb	r2, [r3, #0]
 8016d40:	b122      	cbz	r2, 8016d4c <f_lseek+0x1c>
 8016d42:	460d      	mov	r5, r1
 8016d44:	88da      	ldrh	r2, [r3, #6]
 8016d46:	8881      	ldrh	r1, [r0, #4]
 8016d48:	4291      	cmp	r1, r2
 8016d4a:	d005      	beq.n	8016d58 <f_lseek+0x28>
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 8016d4c:	f04f 0809 	mov.w	r8, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8016d50:	4640      	mov	r0, r8
 8016d52:	b007      	add	sp, #28
 8016d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016d58:	7858      	ldrb	r0, [r3, #1]
 8016d5a:	f7fd f8cd 	bl	8013ef8 <disk_status>
 8016d5e:	07c7      	lsls	r7, r0, #31
 8016d60:	d4f4      	bmi.n	8016d4c <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8016d62:	f894 8015 	ldrb.w	r8, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016d66:	f8d4 a000 	ldr.w	sl, [r4]
	if (res != FR_OK) LEAVE_FF(fs, res);
 8016d6a:	f1b8 0f00 	cmp.w	r8, #0
 8016d6e:	d1ef      	bne.n	8016d50 <f_lseek+0x20>
	if (fp->cltbl) {	/* Fast seek */
 8016d70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016d72:	2800      	cmp	r0, #0
 8016d74:	d049      	beq.n	8016e0a <f_lseek+0xda>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8016d76:	1c6e      	adds	r6, r5, #1
 8016d78:	f000 8094 	beq.w	8016ea4 <f_lseek+0x174>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8016d7c:	68e1      	ldr	r1, [r4, #12]
 8016d7e:	428d      	cmp	r5, r1
 8016d80:	bf28      	it	cs
 8016d82:	460d      	movcs	r5, r1
			fp->fptr = ofs;				/* Set file pointer */
 8016d84:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 8016d86:	2d00      	cmp	r5, #0
 8016d88:	d0e2      	beq.n	8016d50 <f_lseek+0x20>
				fp->clust = clmt_clust(fp, ofs - 1);
 8016d8a:	1e6e      	subs	r6, r5, #1
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016d8c:	f8ba 100a 	ldrh.w	r1, [sl, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016d90:	6843      	ldr	r3, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016d92:	1d02      	adds	r2, r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016d94:	0a76      	lsrs	r6, r6, #9
 8016d96:	fbb6 f0f1 	udiv	r0, r6, r1
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016d9a:	b933      	cbnz	r3, 8016daa <f_lseek+0x7a>
 8016d9c:	e116      	b.n	8016fcc <f_lseek+0x29c>
		cl -= ncl; tbl++;		/* Next fragment */
 8016d9e:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016da0:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	f000 8111 	beq.w	8016fcc <f_lseek+0x29c>
		if (cl < ncl) break;	/* In this fragment? */
 8016daa:	4298      	cmp	r0, r3
 8016dac:	d2f7      	bcs.n	8016d9e <f_lseek+0x6e>
	return cl + *tbl;	/* Return the cluster number */
 8016dae:	6853      	ldr	r3, [r2, #4]
 8016db0:	4403      	add	r3, r0
	clst -= 2;
 8016db2:	1e9a      	subs	r2, r3, #2
				fp->clust = clmt_clust(fp, ofs - 1);
 8016db4:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016db6:	f8da 3018 	ldr.w	r3, [sl, #24]
 8016dba:	3b02      	subs	r3, #2
 8016dbc:	4293      	cmp	r3, r2
 8016dbe:	f240 80d2 	bls.w	8016f66 <f_lseek+0x236>
	return clst * fs->csize + fs->database;
 8016dc2:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8016dc6:	fb02 3301 	mla	r3, r2, r1, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	f000 80cb 	beq.w	8016f66 <f_lseek+0x236>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8016dd0:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8016dd4:	2d00      	cmp	r5, #0
 8016dd6:	d0bb      	beq.n	8016d50 <f_lseek+0x20>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8016dd8:	3901      	subs	r1, #1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8016dda:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8016ddc:	400e      	ands	r6, r1
 8016dde:	441e      	add	r6, r3
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8016de0:	42b2      	cmp	r2, r6
 8016de2:	d0b5      	beq.n	8016d50 <f_lseek+0x20>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8016de4:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016de8:	f104 0130 	add.w	r1, r4, #48	; 0x30
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	f2c0 8123 	blt.w	8017038 <f_lseek+0x308>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8016df2:	2301      	movs	r3, #1
 8016df4:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8016df8:	4632      	mov	r2, r6
 8016dfa:	f7fd f899 	bl	8013f30 <disk_read>
 8016dfe:	4680      	mov	r8, r0
 8016e00:	2800      	cmp	r0, #0
 8016e02:	f040 80ac 	bne.w	8016f5e <f_lseek+0x22e>
			fp->sect = nsect;
 8016e06:	6226      	str	r6, [r4, #32]
 8016e08:	e7a2      	b.n	8016d50 <f_lseek+0x20>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8016e0a:	68e3      	ldr	r3, [r4, #12]
 8016e0c:	42ab      	cmp	r3, r5
 8016e0e:	d204      	bcs.n	8016e1a <f_lseek+0xea>
 8016e10:	7d22      	ldrb	r2, [r4, #20]
 8016e12:	f012 0f02 	tst.w	r2, #2
 8016e16:	bf08      	it	eq
 8016e18:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8016e1a:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8016e1c:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 8016e1e:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 8016e20:	2d00      	cmp	r5, #0
 8016e22:	d095      	beq.n	8016d50 <f_lseek+0x20>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8016e24:	f8ba 700a 	ldrh.w	r7, [sl, #10]
 8016e28:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d033      	beq.n	8016e96 <f_lseek+0x166>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8016e2e:	3b01      	subs	r3, #1
 8016e30:	1e6a      	subs	r2, r5, #1
 8016e32:	fbb3 f1f7 	udiv	r1, r3, r7
 8016e36:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8016e3a:	428a      	cmp	r2, r1
 8016e3c:	d32b      	bcc.n	8016e96 <f_lseek+0x166>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8016e3e:	427a      	negs	r2, r7
				clst = fp->clust;
 8016e40:	69e6      	ldr	r6, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8016e42:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 8016e44:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8016e46:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 8016e48:	2e00      	cmp	r6, #0
 8016e4a:	f000 80d0 	beq.w	8016fee <f_lseek+0x2be>
				while (ofs > bcs) {						/* Cluster following loop */
 8016e4e:	42bd      	cmp	r5, r7
 8016e50:	f240 8115 	bls.w	801707e <f_lseek+0x34e>
 8016e54:	4631      	mov	r1, r6
 8016e56:	e012      	b.n	8016e7e <f_lseek+0x14e>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8016e58:	f7fd ff44 	bl	8014ce4 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8016e5c:	4601      	mov	r1, r0
 8016e5e:	2800      	cmp	r0, #0
 8016e60:	f000 80c3 	beq.w	8016fea <f_lseek+0x2ba>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016e64:	1c4b      	adds	r3, r1, #1
 8016e66:	d07a      	beq.n	8016f5e <f_lseek+0x22e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8016e68:	2901      	cmp	r1, #1
 8016e6a:	d97c      	bls.n	8016f66 <f_lseek+0x236>
 8016e6c:	f8da 3018 	ldr.w	r3, [sl, #24]
 8016e70:	428b      	cmp	r3, r1
 8016e72:	d978      	bls.n	8016f66 <f_lseek+0x236>
				while (ofs > bcs) {						/* Cluster following loop */
 8016e74:	42af      	cmp	r7, r5
					fp->clust = clst;
 8016e76:	61e1      	str	r1, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8016e78:	f080 80ff 	bcs.w	801707a <f_lseek+0x34a>
					ofs -= bcs; fp->fptr += bcs;
 8016e7c:	69a3      	ldr	r3, [r4, #24]
 8016e7e:	443b      	add	r3, r7
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8016e80:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 8016e82:	1bed      	subs	r5, r5, r7
 8016e84:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8016e86:	7d23      	ldrb	r3, [r4, #20]
 8016e88:	079a      	lsls	r2, r3, #30
 8016e8a:	d4e5      	bmi.n	8016e58 <f_lseek+0x128>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8016e8c:	6820      	ldr	r0, [r4, #0]
 8016e8e:	f7fd fbfd 	bl	801468c <get_fat.isra.0>
 8016e92:	4601      	mov	r1, r0
 8016e94:	e7e6      	b.n	8016e64 <f_lseek+0x134>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8016e96:	68a6      	ldr	r6, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8016e98:	2e00      	cmp	r6, #0
 8016e9a:	f000 809a 	beq.w	8016fd2 <f_lseek+0x2a2>
 8016e9e:	2300      	movs	r3, #0
				fp->clust = clst;
 8016ea0:	61e6      	str	r6, [r4, #28]
 8016ea2:	e7d1      	b.n	8016e48 <f_lseek+0x118>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016ea4:	4683      	mov	fp, r0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8016ea6:	68a2      	ldr	r2, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016ea8:	f85b 3b04 	ldr.w	r3, [fp], #4
 8016eac:	9301      	str	r3, [sp, #4]
			if (cl) {
 8016eae:	2a00      	cmp	r2, #0
 8016eb0:	f000 8084 	beq.w	8016fbc <f_lseek+0x28c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016eb4:	2702      	movs	r7, #2
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016eb6:	4656      	mov	r6, sl
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016eb8:	f8cd 8010 	str.w	r8, [sp, #16]
 8016ebc:	e9cd ba02 	strd	fp, sl, [sp, #8]
 8016ec0:	46ba      	mov	sl, r7
 8016ec2:	46a3      	mov	fp, r4
 8016ec4:	4617      	mov	r7, r2
 8016ec6:	463d      	mov	r5, r7
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8016ec8:	2400      	movs	r4, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016eca:	2d01      	cmp	r5, #1
						pcl = cl; ncl++;
 8016ecc:	f104 0401 	add.w	r4, r4, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016ed0:	d902      	bls.n	8016ed8 <f_lseek+0x1a8>
 8016ed2:	69b3      	ldr	r3, [r6, #24]
 8016ed4:	429d      	cmp	r5, r3
 8016ed6:	d304      	bcc.n	8016ee2 <f_lseek+0x1b2>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8016ed8:	2302      	movs	r3, #2
 8016eda:	4698      	mov	r8, r3
 8016edc:	f88b 3015 	strb.w	r3, [fp, #21]
 8016ee0:	e736      	b.n	8016d50 <f_lseek+0x20>
		switch (fs->fs_type) {
 8016ee2:	7833      	ldrb	r3, [r6, #0]
 8016ee4:	2b02      	cmp	r3, #2
 8016ee6:	d02f      	beq.n	8016f48 <f_lseek+0x218>
 8016ee8:	2b03      	cmp	r3, #3
 8016eea:	d043      	beq.n	8016f74 <f_lseek+0x244>
 8016eec:	2b01      	cmp	r3, #1
 8016eee:	d1f3      	bne.n	8016ed8 <f_lseek+0x1a8>
			bc = (UINT)clst; bc += bc / 2;
 8016ef0:	eb05 0855 	add.w	r8, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016ef4:	6a72      	ldr	r2, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016ef6:	6b30      	ldr	r0, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016ef8:	eb02 2158 	add.w	r1, r2, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016efc:	4281      	cmp	r1, r0
 8016efe:	d005      	beq.n	8016f0c <f_lseek+0x1dc>
 8016f00:	4630      	mov	r0, r6
 8016f02:	f7fd f971 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016f06:	bb48      	cbnz	r0, 8016f5c <f_lseek+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016f08:	6a72      	ldr	r2, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016f0a:	6b30      	ldr	r0, [r6, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8016f0c:	f108 0301 	add.w	r3, r8, #1
 8016f10:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016f14:	eb02 2153 	add.w	r1, r2, r3, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8016f18:	44b0      	add	r8, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016f1a:	4281      	cmp	r1, r0
			wc = fs->win[bc++ % SS(fs)];
 8016f1c:	f898 9034 	ldrb.w	r9, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016f20:	d005      	beq.n	8016f2e <f_lseek+0x1fe>
 8016f22:	4630      	mov	r0, r6
 8016f24:	9305      	str	r3, [sp, #20]
 8016f26:	f7fd f95f 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016f2a:	9b05      	ldr	r3, [sp, #20]
 8016f2c:	b9b0      	cbnz	r0, 8016f5c <f_lseek+0x22c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016f32:	07e8      	lsls	r0, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8016f34:	441e      	add	r6, r3
 8016f36:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8016f3a:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016f3e:	f140 808c 	bpl.w	801705a <f_lseek+0x32a>
 8016f42:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8016f46:	e028      	b.n	8016f9a <f_lseek+0x26a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016f48:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016f4a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016f4c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016f50:	4299      	cmp	r1, r3
 8016f52:	d02c      	beq.n	8016fae <f_lseek+0x27e>
 8016f54:	4630      	mov	r0, r6
 8016f56:	f7fd f947 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016f5a:	b340      	cbz	r0, 8016fae <f_lseek+0x27e>
 8016f5c:	465c      	mov	r4, fp
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016f5e:	2301      	movs	r3, #1
 8016f60:	4698      	mov	r8, r3
 8016f62:	7563      	strb	r3, [r4, #21]
 8016f64:	e6f4      	b.n	8016d50 <f_lseek+0x20>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8016f66:	2302      	movs	r3, #2
 8016f68:	4698      	mov	r8, r3
 8016f6a:	7563      	strb	r3, [r4, #21]
}
 8016f6c:	4640      	mov	r0, r8
 8016f6e:	b007      	add	sp, #28
 8016f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016f74:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016f76:	6b33      	ldr	r3, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016f78:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016f7c:	4299      	cmp	r1, r3
 8016f7e:	d004      	beq.n	8016f8a <f_lseek+0x25a>
 8016f80:	4630      	mov	r0, r6
 8016f82:	f7fd f931 	bl	80141e8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016f86:	2800      	cmp	r0, #0
 8016f88:	d1e8      	bne.n	8016f5c <f_lseek+0x22c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016f8a:	00ab      	lsls	r3, r5, #2
 8016f8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8016f90:	441e      	add	r6, r3
 8016f92:	f8d6 9034 	ldr.w	r9, [r6, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016f96:	f029 4970 	bic.w	r9, r9, #4026531840	; 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8016f9a:	f1b9 0f01 	cmp.w	r9, #1
 8016f9e:	d99b      	bls.n	8016ed8 <f_lseek+0x1a8>
					} while (cl == pcl + 1);
 8016fa0:	3501      	adds	r5, #1
 8016fa2:	454d      	cmp	r5, r9
 8016fa4:	d135      	bne.n	8017012 <f_lseek+0x2e2>
 8016fa6:	464d      	mov	r5, r9
 8016fa8:	f8db 6000 	ldr.w	r6, [fp]
 8016fac:	e78d      	b.n	8016eca <f_lseek+0x19a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016fae:	006b      	lsls	r3, r5, #1
 8016fb0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016fb4:	441e      	add	r6, r3
 8016fb6:	f8b6 9034 	ldrh.w	r9, [r6, #52]	; 0x34
			break;
 8016fba:	e7ee      	b.n	8016f9a <f_lseek+0x26a>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8016fbc:	2702      	movs	r7, #2
			if (ulen <= tlen) {
 8016fbe:	429f      	cmp	r7, r3
			*fp->cltbl = ulen;	/* Number of items used */
 8016fc0:	6007      	str	r7, [r0, #0]
			if (ulen <= tlen) {
 8016fc2:	d847      	bhi.n	8017054 <f_lseek+0x324>
				*tbl = 0;		/* Terminate table */
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	f8cb 3000 	str.w	r3, [fp]
 8016fca:	e6c1      	b.n	8016d50 <f_lseek+0x20>
 8016fcc:	f06f 0201 	mvn.w	r2, #1
 8016fd0:	e6f0      	b.n	8016db4 <f_lseek+0x84>
					clst = create_chain(&fp->obj, 0);
 8016fd2:	4631      	mov	r1, r6
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	f7fd fe85 	bl	8014ce4 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016fda:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 8016fdc:	4606      	mov	r6, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016fde:	d0c2      	beq.n	8016f66 <f_lseek+0x236>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016fe0:	1c41      	adds	r1, r0, #1
 8016fe2:	d0bc      	beq.n	8016f5e <f_lseek+0x22e>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8016fe4:	69a3      	ldr	r3, [r4, #24]
					fp->obj.sclust = clst;
 8016fe6:	60a0      	str	r0, [r4, #8]
 8016fe8:	e75a      	b.n	8016ea0 <f_lseek+0x170>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8016fea:	4606      	mov	r6, r0
 8016fec:	69a3      	ldr	r3, [r4, #24]
 8016fee:	68e2      	ldr	r2, [r4, #12]
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d264      	bcs.n	80170be <f_lseek+0x38e>
			fp->flag |= FA_MODIFIED;
 8016ff4:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 8016ff6:	60e3      	str	r3, [r4, #12]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8016ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
 8016ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017000:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8017002:	2b00      	cmp	r3, #0
 8017004:	f43f aea4 	beq.w	8016d50 <f_lseek+0x20>
 8017008:	6a22      	ldr	r2, [r4, #32]
 801700a:	42b2      	cmp	r2, r6
 801700c:	f47f aeea 	bne.w	8016de4 <f_lseek+0xb4>
 8017010:	e69e      	b.n	8016d50 <f_lseek+0x20>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8017012:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8017016:	9b01      	ldr	r3, [sp, #4]
 8017018:	4553      	cmp	r3, sl
 801701a:	d321      	bcc.n	8017060 <f_lseek+0x330>
						*tbl++ = ncl; *tbl++ = tcl;
 801701c:	9b02      	ldr	r3, [sp, #8]
 801701e:	4619      	mov	r1, r3
 8017020:	f841 4b08 	str.w	r4, [r1], #8
 8017024:	605f      	str	r7, [r3, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8017026:	9b03      	ldr	r3, [sp, #12]
 8017028:	699a      	ldr	r2, [r3, #24]
 801702a:	454a      	cmp	r2, r9
 801702c:	d941      	bls.n	80170b2 <f_lseek+0x382>
						*tbl++ = ncl; *tbl++ = tcl;
 801702e:	9102      	str	r1, [sp, #8]
{
 8017030:	464f      	mov	r7, r9
 8017032:	f8db 6000 	ldr.w	r6, [fp]
 8017036:	e746      	b.n	8016ec6 <f_lseek+0x196>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017038:	2301      	movs	r3, #1
 801703a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801703e:	9101      	str	r1, [sp, #4]
 8017040:	f7fc ff84 	bl	8013f4c <disk_write>
 8017044:	2800      	cmp	r0, #0
 8017046:	d18a      	bne.n	8016f5e <f_lseek+0x22e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017048:	7d23      	ldrb	r3, [r4, #20]
 801704a:	9901      	ldr	r1, [sp, #4]
 801704c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017050:	7523      	strb	r3, [r4, #20]
 8017052:	e6ce      	b.n	8016df2 <f_lseek+0xc2>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8017054:	f04f 0811 	mov.w	r8, #17
 8017058:	e67a      	b.n	8016d50 <f_lseek+0x20>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801705a:	f3c9 090b 	ubfx	r9, r9, #0, #12
 801705e:	e79c      	b.n	8016f9a <f_lseek+0x26a>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8017060:	9b03      	ldr	r3, [sp, #12]
 8017062:	699a      	ldr	r2, [r3, #24]
 8017064:	454a      	cmp	r2, r9
 8017066:	d8e3      	bhi.n	8017030 <f_lseek+0x300>
 8017068:	465c      	mov	r4, fp
 801706a:	4657      	mov	r7, sl
 801706c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017070:	f8dd b008 	ldr.w	fp, [sp, #8]
			*fp->cltbl = ulen;	/* Number of items used */
 8017074:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017076:	9b01      	ldr	r3, [sp, #4]
 8017078:	e7a1      	b.n	8016fbe <f_lseek+0x28e>
				fp->fptr += ofs;
 801707a:	460e      	mov	r6, r1
 801707c:	69a3      	ldr	r3, [r4, #24]
 801707e:	442b      	add	r3, r5
				if (ofs % SS(fs)) {
 8017080:	f3c5 0208 	ubfx	r2, r5, #0, #9
				fp->fptr += ofs;
 8017084:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8017086:	b192      	cbz	r2, 80170ae <f_lseek+0x37e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017088:	f8da 2018 	ldr.w	r2, [sl, #24]
	clst -= 2;
 801708c:	1eb1      	subs	r1, r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801708e:	3a02      	subs	r2, #2
 8017090:	4291      	cmp	r1, r2
 8017092:	f4bf af68 	bcs.w	8016f66 <f_lseek+0x236>
	return clst * fs->csize + fs->database;
 8017096:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 801709a:	f8da 602c 	ldr.w	r6, [sl, #44]	; 0x2c
 801709e:	fb01 6602 	mla	r6, r1, r2, r6
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80170a2:	2e00      	cmp	r6, #0
 80170a4:	f43f af5f 	beq.w	8016f66 <f_lseek+0x236>
					nsect += (DWORD)(ofs / SS(fs));
 80170a8:	eb06 2655 	add.w	r6, r6, r5, lsr #9
 80170ac:	e79f      	b.n	8016fee <f_lseek+0x2be>
		fp->fptr = nsect = 0;
 80170ae:	4616      	mov	r6, r2
 80170b0:	e79d      	b.n	8016fee <f_lseek+0x2be>
						*tbl++ = ncl; *tbl++ = tcl;
 80170b2:	465c      	mov	r4, fp
 80170b4:	4657      	mov	r7, sl
 80170b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80170ba:	468b      	mov	fp, r1
 80170bc:	e7da      	b.n	8017074 <f_lseek+0x344>
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80170be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80170c2:	e79e      	b.n	8017002 <f_lseek+0x2d2>

080170c4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80170c4:	b570      	push	{r4, r5, r6, lr}
 80170c6:	b084      	sub	sp, #16
 80170c8:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80170ca:	2800      	cmp	r0, #0
 80170cc:	d044      	beq.n	8017158 <f_opendir+0x94>

	/* Get logical drive */
	obj = &dp->obj;
 80170ce:	4605      	mov	r5, r0
	res = find_volume(&path, &fs, 0);
 80170d0:	2200      	movs	r2, #0
 80170d2:	a903      	add	r1, sp, #12
 80170d4:	a801      	add	r0, sp, #4
 80170d6:	f7fd f8c1 	bl	801425c <find_volume>
	if (res == FR_OK) {
 80170da:	4604      	mov	r4, r0
 80170dc:	b120      	cbz	r0, 80170e8 <f_opendir+0x24>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80170de:	2300      	movs	r3, #0
 80170e0:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 80170e2:	4620      	mov	r0, r4
 80170e4:	b004      	add	sp, #16
 80170e6:	bd70      	pop	{r4, r5, r6, pc}
		obj->fs = fs;
 80170e8:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 80170ea:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 80170ee:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 80170f0:	f000 fdc4 	bl	8017c7c <ff_memalloc>
 80170f4:	4606      	mov	r6, r0
 80170f6:	2800      	cmp	r0, #0
 80170f8:	d032      	beq.n	8017160 <f_opendir+0x9c>
 80170fa:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80170fc:	4628      	mov	r0, r5
 80170fe:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8017100:	60de      	str	r6, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8017102:	f7fe f91f 	bl	8015344 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8017106:	4604      	mov	r4, r0
 8017108:	b9f8      	cbnz	r0, 801714a <f_opendir+0x86>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801710a:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 801710e:	2b00      	cmp	r3, #0
 8017110:	db2d      	blt.n	801716e <f_opendir+0xaa>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8017112:	79ab      	ldrb	r3, [r5, #6]
 8017114:	06db      	lsls	r3, r3, #27
 8017116:	d525      	bpl.n	8017164 <f_opendir+0xa0>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8017118:	9b03      	ldr	r3, [sp, #12]
 801711a:	6a29      	ldr	r1, [r5, #32]
	if (fs->fs_type == FS_FAT32) {
 801711c:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 801711e:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8017120:	2803      	cmp	r0, #3
 8017122:	d102      	bne.n	801712a <f_opendir+0x66>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017124:	8a89      	ldrh	r1, [r1, #20]
 8017126:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801712a:	60aa      	str	r2, [r5, #8]
				obj->id = fs->id;
 801712c:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801712e:	2100      	movs	r1, #0
 8017130:	4628      	mov	r0, r5
				obj->id = fs->id;
 8017132:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8017134:	f7fd fea6 	bl	8014e84 <dir_sdi>
				if (res == FR_OK) {
 8017138:	4604      	mov	r4, r0
 801713a:	b930      	cbnz	r0, 801714a <f_opendir+0x86>
					if (obj->sclust) {
 801713c:	68ab      	ldr	r3, [r5, #8]
 801713e:	b9c3      	cbnz	r3, 8017172 <f_opendir+0xae>
		FREE_NAMBUF();
 8017140:	4630      	mov	r0, r6
						obj->lockid = 0;	/* Root directory need not to be locked */
 8017142:	612c      	str	r4, [r5, #16]
		FREE_NAMBUF();
 8017144:	f000 fd9c 	bl	8017c80 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017148:	e7cb      	b.n	80170e2 <f_opendir+0x1e>
		FREE_NAMBUF();
 801714a:	4630      	mov	r0, r6
 801714c:	f000 fd98 	bl	8017c80 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8017150:	2c04      	cmp	r4, #4
 8017152:	bf08      	it	eq
 8017154:	2405      	moveq	r4, #5
 8017156:	e7c2      	b.n	80170de <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
 8017158:	2409      	movs	r4, #9
}
 801715a:	4620      	mov	r0, r4
 801715c:	b004      	add	sp, #16
 801715e:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(fs);
 8017160:	2411      	movs	r4, #17
 8017162:	e7be      	b.n	80170e2 <f_opendir+0x1e>
		FREE_NAMBUF();
 8017164:	4630      	mov	r0, r6
					res = FR_NO_PATH;
 8017166:	2405      	movs	r4, #5
		FREE_NAMBUF();
 8017168:	f000 fd8a 	bl	8017c80 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801716c:	e7b7      	b.n	80170de <f_opendir+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801716e:	9b03      	ldr	r3, [sp, #12]
 8017170:	e7dc      	b.n	801712c <f_opendir+0x68>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8017172:	4601      	mov	r1, r0
 8017174:	4628      	mov	r0, r5
 8017176:	f7fc ff05 	bl	8013f84 <inc_lock>
 801717a:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801717c:	b920      	cbnz	r0, 8017188 <f_opendir+0xc4>
		FREE_NAMBUF();
 801717e:	4630      	mov	r0, r6
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8017180:	2412      	movs	r4, #18
		FREE_NAMBUF();
 8017182:	f000 fd7d 	bl	8017c80 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017186:	e7aa      	b.n	80170de <f_opendir+0x1a>
		FREE_NAMBUF();
 8017188:	4630      	mov	r0, r6
 801718a:	f000 fd79 	bl	8017c80 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801718e:	e7a8      	b.n	80170e2 <f_opendir+0x1e>

08017190 <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017190:	b338      	cbz	r0, 80171e2 <f_closedir+0x52>
 8017192:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8017194:	b510      	push	{r4, lr}
 8017196:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017198:	b12b      	cbz	r3, 80171a6 <f_closedir+0x16>
 801719a:	781a      	ldrb	r2, [r3, #0]
 801719c:	b11a      	cbz	r2, 80171a6 <f_closedir+0x16>
 801719e:	8881      	ldrh	r1, [r0, #4]
 80171a0:	88da      	ldrh	r2, [r3, #6]
 80171a2:	4291      	cmp	r1, r2
 80171a4:	d001      	beq.n	80171aa <f_closedir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 80171a6:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 80171a8:	bd10      	pop	{r4, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80171aa:	7858      	ldrb	r0, [r3, #1]
 80171ac:	f7fc fea4 	bl	8013ef8 <disk_status>
 80171b0:	f010 0001 	ands.w	r0, r0, #1
 80171b4:	d1f7      	bne.n	80171a6 <f_closedir+0x16>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80171b6:	6923      	ldr	r3, [r4, #16]
 80171b8:	b183      	cbz	r3, 80171dc <f_closedir+0x4c>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80171ba:	3b01      	subs	r3, #1
 80171bc:	2b03      	cmp	r3, #3
 80171be:	d817      	bhi.n	80171f0 <f_closedir+0x60>
		n = Files[i].ctr;
 80171c0:	490c      	ldr	r1, [pc, #48]	; (80171f4 <f_closedir+0x64>)
 80171c2:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 80171c6:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 80171ca:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80171cc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80171d0:	d009      	beq.n	80171e6 <f_closedir+0x56>
		if (n > 0) n--;				/* Decrement read mode open count */
 80171d2:	b14a      	cbz	r2, 80171e8 <f_closedir+0x58>
 80171d4:	3a01      	subs	r2, #1
 80171d6:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 80171d8:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80171da:	b12a      	cbz	r2, 80171e8 <f_closedir+0x58>
			dp->obj.fs = 0;			/* Invalidate directory object */
 80171dc:	2300      	movs	r3, #0
 80171de:	6023      	str	r3, [r4, #0]
}
 80171e0:	bd10      	pop	{r4, pc}
	FRESULT res = FR_INVALID_OBJECT;
 80171e2:	2009      	movs	r0, #9
}
 80171e4:	4770      	bx	lr
		Files[i].ctr = n;
 80171e6:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80171e8:	2300      	movs	r3, #0
 80171ea:	f841 300c 	str.w	r3, [r1, ip]
		if (res == FR_OK)
 80171ee:	e7f5      	b.n	80171dc <f_closedir+0x4c>
		res = FR_INT_ERR;			/* Invalid index nunber */
 80171f0:	2002      	movs	r0, #2
}
 80171f2:	bd10      	pop	{r4, pc}
 80171f4:	200071d4 	.word	0x200071d4

080171f8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80171f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80171fa:	b148      	cbz	r0, 8017210 <f_readdir+0x18>
 80171fc:	6803      	ldr	r3, [r0, #0]
 80171fe:	4604      	mov	r4, r0
 8017200:	b133      	cbz	r3, 8017210 <f_readdir+0x18>
 8017202:	781a      	ldrb	r2, [r3, #0]
 8017204:	b122      	cbz	r2, 8017210 <f_readdir+0x18>
 8017206:	460e      	mov	r6, r1
 8017208:	88da      	ldrh	r2, [r3, #6]
 801720a:	8881      	ldrh	r1, [r0, #4]
 801720c:	4291      	cmp	r1, r2
 801720e:	d002      	beq.n	8017216 <f_readdir+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8017210:	2509      	movs	r5, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8017212:	4628      	mov	r0, r5
 8017214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017216:	7858      	ldrb	r0, [r3, #1]
 8017218:	f7fc fe6e 	bl	8013ef8 <disk_status>
 801721c:	07c3      	lsls	r3, r0, #31
 801721e:	d4f7      	bmi.n	8017210 <f_readdir+0x18>
		if (!fno) {
 8017220:	b1f6      	cbz	r6, 8017260 <f_readdir+0x68>
			INIT_NAMBUF(fs);
 8017222:	f44f 7000 	mov.w	r0, #512	; 0x200
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017226:	6825      	ldr	r5, [r4, #0]
			INIT_NAMBUF(fs);
 8017228:	f000 fd28 	bl	8017c7c <ff_memalloc>
 801722c:	4607      	mov	r7, r0
 801722e:	b1e8      	cbz	r0, 801726c <f_readdir+0x74>
 8017230:	60ef      	str	r7, [r5, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8017232:	4620      	mov	r0, r4
 8017234:	f7fd face 	bl	80147d4 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 8017238:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 801723c:	4605      	mov	r5, r0
			if (res == FR_OK) {				/* A valid entry is found */
 801723e:	d10a      	bne.n	8017256 <f_readdir+0x5e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8017240:	4631      	mov	r1, r6
 8017242:	4620      	mov	r0, r4
 8017244:	f7fc ff0e 	bl	8014064 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8017248:	4620      	mov	r0, r4
 801724a:	f7fd fa7f 	bl	801474c <dir_next.constprop.0>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801724e:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
 8017250:	4605      	mov	r5, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8017252:	bf08      	it	eq
 8017254:	2500      	moveq	r5, #0
			FREE_NAMBUF();
 8017256:	4638      	mov	r0, r7
 8017258:	f000 fd12 	bl	8017c80 <ff_memfree>
}
 801725c:	4628      	mov	r0, r5
 801725e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8017260:	4631      	mov	r1, r6
 8017262:	4620      	mov	r0, r4
}
 8017264:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8017268:	f7fd be0c 	b.w	8014e84 <dir_sdi>
			INIT_NAMBUF(fs);
 801726c:	2511      	movs	r5, #17
 801726e:	e7d0      	b.n	8017212 <f_readdir+0x1a>

08017270 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8017270:	b570      	push	{r4, r5, r6, lr}
 8017272:	b090      	sub	sp, #64	; 0x40
 8017274:	460d      	mov	r5, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8017276:	2200      	movs	r2, #0
{
 8017278:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &dj.obj.fs, 0);
 801727a:	a903      	add	r1, sp, #12
 801727c:	a801      	add	r0, sp, #4
 801727e:	f7fc ffed 	bl	801425c <find_volume>
	if (res == FR_OK) {
 8017282:	4604      	mov	r4, r0
 8017284:	b110      	cbz	r0, 801728c <f_stat+0x1c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 8017286:	4620      	mov	r0, r4
 8017288:	b010      	add	sp, #64	; 0x40
 801728a:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 801728c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017290:	f000 fcf4 	bl	8017c7c <ff_memalloc>
 8017294:	4606      	mov	r6, r0
 8017296:	b1b0      	cbz	r0, 80172c6 <f_stat+0x56>
 8017298:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801729a:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(dj.obj.fs);
 801729c:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801729e:	a803      	add	r0, sp, #12
 80172a0:	f7fe f850 	bl	8015344 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 80172a4:	4604      	mov	r4, r0
 80172a6:	b940      	cbnz	r0, 80172ba <f_stat+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80172a8:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	db0c      	blt.n	80172ca <f_stat+0x5a>
				if (fno) get_fileinfo(&dj, fno);
 80172b0:	b11d      	cbz	r5, 80172ba <f_stat+0x4a>
 80172b2:	4629      	mov	r1, r5
 80172b4:	a803      	add	r0, sp, #12
 80172b6:	f7fc fed5 	bl	8014064 <get_fileinfo>
		FREE_NAMBUF();
 80172ba:	4630      	mov	r0, r6
 80172bc:	f000 fce0 	bl	8017c80 <ff_memfree>
}
 80172c0:	4620      	mov	r0, r4
 80172c2:	b010      	add	sp, #64	; 0x40
 80172c4:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 80172c6:	2411      	movs	r4, #17
 80172c8:	e7dd      	b.n	8017286 <f_stat+0x16>
				res = FR_INVALID_NAME;
 80172ca:	2406      	movs	r4, #6
 80172cc:	e7f5      	b.n	80172ba <f_stat+0x4a>
 80172ce:	bf00      	nop

080172d0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80172d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172d4:	b097      	sub	sp, #92	; 0x5c
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80172d6:	2202      	movs	r2, #2
{
 80172d8:	9007      	str	r0, [sp, #28]
	res = find_volume(&path, &fs, FA_WRITE);
 80172da:	a908      	add	r1, sp, #32
 80172dc:	a807      	add	r0, sp, #28
 80172de:	f7fc ffbd 	bl	801425c <find_volume>
	dj.obj.fs = fs;
 80172e2:	9b08      	ldr	r3, [sp, #32]
	if (res == FR_OK) {
 80172e4:	4606      	mov	r6, r0
	dj.obj.fs = fs;
 80172e6:	9309      	str	r3, [sp, #36]	; 0x24
	if (res == FR_OK) {
 80172e8:	b118      	cbz	r0, 80172f2 <f_mkdir+0x22>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 80172ea:	4630      	mov	r0, r6
 80172ec:	b017      	add	sp, #92	; 0x5c
 80172ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 80172f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80172f6:	f000 fcc1 	bl	8017c7c <ff_memalloc>
 80172fa:	4604      	mov	r4, r0
 80172fc:	b190      	cbz	r0, 8017324 <f_mkdir+0x54>
		res = follow_path(&dj, path);			/* Follow the file path */
 80172fe:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
		INIT_NAMBUF(fs);
 8017302:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 8017304:	a809      	add	r0, sp, #36	; 0x24
 8017306:	f7fe f81d 	bl	8015344 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801730a:	b148      	cbz	r0, 8017320 <f_mkdir+0x50>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801730c:	2804      	cmp	r0, #4
 801730e:	d00b      	beq.n	8017328 <f_mkdir+0x58>
 8017310:	4606      	mov	r6, r0
		FREE_NAMBUF();
 8017312:	4620      	mov	r0, r4
 8017314:	f000 fcb4 	bl	8017c80 <ff_memfree>
}
 8017318:	4630      	mov	r0, r6
 801731a:	b017      	add	sp, #92	; 0x5c
 801731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8017320:	2608      	movs	r6, #8
 8017322:	e7f6      	b.n	8017312 <f_mkdir+0x42>
		INIT_NAMBUF(fs);
 8017324:	2611      	movs	r6, #17
 8017326:	e7e0      	b.n	80172ea <f_mkdir+0x1a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8017328:	4631      	mov	r1, r6
 801732a:	a809      	add	r0, sp, #36	; 0x24
 801732c:	f7fd fcda 	bl	8014ce4 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017330:	9d08      	ldr	r5, [sp, #32]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017332:	4680      	mov	r8, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017334:	896b      	ldrh	r3, [r5, #10]
 8017336:	025b      	lsls	r3, r3, #9
 8017338:	930c      	str	r3, [sp, #48]	; 0x30
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801733a:	2800      	cmp	r0, #0
 801733c:	f000 80fe 	beq.w	801753c <f_mkdir+0x26c>
			if (dcl == 1) res = FR_INT_ERR;
 8017340:	2801      	cmp	r0, #1
 8017342:	f000 80ff 	beq.w	8017544 <f_mkdir+0x274>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017346:	f1b0 3fff 	cmp.w	r0, #4294967295
 801734a:	f000 8106 	beq.w	801755a <f_mkdir+0x28a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801734e:	78eb      	ldrb	r3, [r5, #3]
 8017350:	2b00      	cmp	r3, #0
 8017352:	f040 8104 	bne.w	801755e <f_mkdir+0x28e>
			tm = GET_FATTIME();
 8017356:	f7fc fe13 	bl	8013f80 <get_fattime>
				dsc = clust2sect(fs, dcl);
 801735a:	f8dd 9020 	ldr.w	r9, [sp, #32]
	clst -= 2;
 801735e:	f1a8 0202 	sub.w	r2, r8, #2
			tm = GET_FATTIME();
 8017362:	4605      	mov	r5, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017364:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8017368:	3b02      	subs	r3, #2
 801736a:	429a      	cmp	r2, r3
 801736c:	f080 80f3 	bcs.w	8017556 <f_mkdir+0x286>
	return clst * fs->csize + fs->database;
 8017370:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8017374:	f8d9 702c 	ldr.w	r7, [r9, #44]	; 0x2c
 8017378:	fb02 7703 	mla	r7, r2, r3, r7
				dir = fs->win;
 801737c:	f109 0a34 	add.w	sl, r9, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8017380:	b2eb      	uxtb	r3, r5
		*d++ = (BYTE)val;
 8017382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017386:	2100      	movs	r1, #0
 8017388:	4650      	mov	r0, sl
	*ptr++ = (BYTE)val; val >>= 8;
 801738a:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 801738c:	f00a ffa6 	bl	80222dc <memset>
 8017390:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	*ptr++ = (BYTE)val;
 8017394:	0e2a      	lsrs	r2, r5, #24
		*d++ = (BYTE)val;
 8017396:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 801739a:	f8ca 3004 	str.w	r3, [sl, #4]
 801739e:	f8ca 3007 	str.w	r3, [sl, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 80173a2:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val;
 80173a4:	9206      	str	r2, [sp, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 80173a6:	f889 304a 	strb.w	r3, [r9, #74]	; 0x4a
					dir[DIR_Name] = '.';
 80173aa:	232e      	movs	r3, #46	; 0x2e
	*ptr++ = (BYTE)val;
 80173ac:	f889 204d 	strb.w	r2, [r9, #77]	; 0x4d
					dir[DIR_Name] = '.';
 80173b0:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
					dir[DIR_Attr] = AM_DIR;
 80173b4:	2310      	movs	r3, #16
 80173b6:	f889 303f 	strb.w	r3, [r9, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 80173ba:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80173be:	9304      	str	r3, [sp, #16]
 80173c0:	f889 304b 	strb.w	r3, [r9, #75]	; 0x4b
	*ptr++ = (BYTE)val; val >>= 8;
 80173c4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80173c8:	9305      	str	r3, [sp, #20]
 80173ca:	f889 304c 	strb.w	r3, [r9, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 80173ce:	fa5f f388 	uxtb.w	r3, r8
 80173d2:	9302      	str	r3, [sp, #8]
 80173d4:	f889 304e 	strb.w	r3, [r9, #78]	; 0x4e
	*ptr++ = (BYTE)val;
 80173d8:	f3c8 2307 	ubfx	r3, r8, #8, #8
 80173dc:	9303      	str	r3, [sp, #12]
 80173de:	f889 304f 	strb.w	r3, [r9, #79]	; 0x4f
	if (fs->fs_type == FS_FAT32) {
 80173e2:	f899 3000 	ldrb.w	r3, [r9]
 80173e6:	2b03      	cmp	r3, #3
 80173e8:	d106      	bne.n	80173f8 <f_mkdir+0x128>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80173ea:	ea4f 4318 	mov.w	r3, r8, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 80173ee:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
 80173f2:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 80173f4:	f889 3049 	strb.w	r3, [r9, #73]	; 0x49
			*d++ = *s++;
 80173f8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80173fc:	9d08      	ldr	r5, [sp, #32]
			*d++ = *s++;
 80173fe:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
 8017402:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8017406:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
 801740a:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 801740e:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
 8017412:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8017416:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
 801741a:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 801741e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8017422:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8017426:	f8c9 3068 	str.w	r3, [r9, #104]	; 0x68
 801742a:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 801742e:	f8c9 306c 	str.w	r3, [r9, #108]	; 0x6c
 8017432:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 8017436:	f8c9 3070 	str.w	r3, [r9, #112]	; 0x70
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801743a:	232e      	movs	r3, #46	; 0x2e
 801743c:	f889 3055 	strb.w	r3, [r9, #85]	; 0x55
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017440:	782a      	ldrb	r2, [r5, #0]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017444:	2a03      	cmp	r2, #3
 8017446:	d07f      	beq.n	8017548 <f_mkdir+0x278>
	*ptr++ = (BYTE)val; val >>= 8;
 8017448:	b2de      	uxtb	r6, r3
	*ptr++ = (BYTE)val;
 801744a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801744e:	f889 606e 	strb.w	r6, [r9, #110]	; 0x6e
	*ptr++ = (BYTE)val;
 8017452:	f889 206f 	strb.w	r2, [r9, #111]	; 0x6f
	if (fs->fs_type == FS_FAT32) {
 8017456:	782a      	ldrb	r2, [r5, #0]
 8017458:	2a03      	cmp	r2, #3
 801745a:	d105      	bne.n	8017468 <f_mkdir+0x198>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801745c:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801745e:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
 8017462:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8017464:	f889 3069 	strb.w	r3, [r9, #105]	; 0x69
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017468:	896b      	ldrh	r3, [r5, #10]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d03a      	beq.n	80174e4 <f_mkdir+0x214>
 801746e:	3b01      	subs	r3, #1
					fs->wflag = 1;
 8017470:	9400      	str	r4, [sp, #0]
 8017472:	443b      	add	r3, r7
 8017474:	469b      	mov	fp, r3
 8017476:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801747a:	f105 0434 	add.w	r4, r5, #52	; 0x34
 801747e:	463a      	mov	r2, r7
 8017480:	7868      	ldrb	r0, [r5, #1]
					fs->wflag = 1;
 8017482:	70eb      	strb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017484:	4621      	mov	r1, r4
 8017486:	2301      	movs	r3, #1
					fs->winsect = dsc++;
 8017488:	632f      	str	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801748a:	f7fc fd5f 	bl	8013f4c <disk_write>
 801748e:	bb00      	cbnz	r0, 80174d2 <f_mkdir+0x202>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017490:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			fs->wflag = 0;
 8017492:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017494:	1afa      	subs	r2, r7, r3
 8017496:	69eb      	ldr	r3, [r5, #28]
 8017498:	429a      	cmp	r2, r3
 801749a:	d20f      	bcs.n	80174bc <f_mkdir+0x1ec>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801749c:	78ae      	ldrb	r6, [r5, #2]
 801749e:	2e01      	cmp	r6, #1
 80174a0:	d90c      	bls.n	80174bc <f_mkdir+0x1ec>
 80174a2:	46b9      	mov	r9, r7
 80174a4:	e000      	b.n	80174a8 <f_mkdir+0x1d8>
					wsect += fs->fsize;
 80174a6:	69eb      	ldr	r3, [r5, #28]
 80174a8:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80174aa:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80174ac:	2301      	movs	r3, #1
 80174ae:	4621      	mov	r1, r4
 80174b0:	464a      	mov	r2, r9
 80174b2:	7868      	ldrb	r0, [r5, #1]
 80174b4:	f7fc fd4a 	bl	8013f4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80174b8:	2e01      	cmp	r6, #1
 80174ba:	d1f4      	bne.n	80174a6 <f_mkdir+0x1d6>
		*d++ = (BYTE)val;
 80174bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80174c0:	2100      	movs	r1, #0
 80174c2:	4650      	mov	r0, sl
 80174c4:	f00a ff0a 	bl	80222dc <memset>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80174c8:	45bb      	cmp	fp, r7
 80174ca:	d00a      	beq.n	80174e2 <f_mkdir+0x212>
 80174cc:	3701      	adds	r7, #1
					fs->winsect = dsc++;
 80174ce:	9d08      	ldr	r5, [sp, #32]
 80174d0:	e7d1      	b.n	8017476 <f_mkdir+0x1a6>
			res = FR_DISK_ERR;
 80174d2:	9c00      	ldr	r4, [sp, #0]
 80174d4:	2601      	movs	r6, #1
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80174d6:	2200      	movs	r2, #0
 80174d8:	4641      	mov	r1, r8
 80174da:	a809      	add	r0, sp, #36	; 0x24
 80174dc:	f7fe f8be 	bl	801565c <remove_chain>
 80174e0:	e717      	b.n	8017312 <f_mkdir+0x42>
 80174e2:	9c00      	ldr	r4, [sp, #0]
				res = dir_register(&dj);	/* Register the object to the directoy */
 80174e4:	a809      	add	r0, sp, #36	; 0x24
 80174e6:	f7fe f957 	bl	8015798 <dir_register>
			if (res == FR_OK) {
 80174ea:	4606      	mov	r6, r0
 80174ec:	2800      	cmp	r0, #0
 80174ee:	d1f2      	bne.n	80174d6 <f_mkdir+0x206>
	*ptr++ = (BYTE)val; val >>= 8;
 80174f0:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80174f2:	9a02      	ldr	r2, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80174f4:	f363 0607 	bfi	r6, r3, #0, #8
 80174f8:	9b04      	ldr	r3, [sp, #16]
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80174fa:	9808      	ldr	r0, [sp, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 80174fc:	f363 260f 	bfi	r6, r3, #8, #8
 8017500:	9b05      	ldr	r3, [sp, #20]
 8017502:	f363 4617 	bfi	r6, r3, #16, #8
 8017506:	9b06      	ldr	r3, [sp, #24]
 8017508:	f363 661f 	bfi	r6, r3, #24, #8
					dir = dj.dir;
 801750c:	9b11      	ldr	r3, [sp, #68]	; 0x44
	*ptr++ = (BYTE)val; val >>= 8;
 801750e:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8017510:	9a03      	ldr	r2, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8017512:	f8c3 6016 	str.w	r6, [r3, #22]
	*ptr++ = (BYTE)val;
 8017516:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8017518:	7802      	ldrb	r2, [r0, #0]
 801751a:	2a03      	cmp	r2, #3
 801751c:	d106      	bne.n	801752c <f_mkdir+0x25c>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801751e:	ea4f 4818 	mov.w	r8, r8, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017522:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8017526:	f883 8014 	strb.w	r8, [r3, #20]
	*ptr++ = (BYTE)val;
 801752a:	755a      	strb	r2, [r3, #21]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801752c:	2110      	movs	r1, #16
					fs->wflag = 1;
 801752e:	2201      	movs	r2, #1
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8017530:	72d9      	strb	r1, [r3, #11]
					fs->wflag = 1;
 8017532:	70c2      	strb	r2, [r0, #3]
					res = sync_fs(fs);
 8017534:	f7fd fb66 	bl	8014c04 <sync_fs>
 8017538:	4606      	mov	r6, r0
 801753a:	e6ea      	b.n	8017312 <f_mkdir+0x42>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801753c:	2607      	movs	r6, #7
			tm = GET_FATTIME();
 801753e:	f7fc fd1f 	bl	8013f80 <get_fattime>
			if (res == FR_OK) {					/* Initialize the new directory table */
 8017542:	e7c8      	b.n	80174d6 <f_mkdir+0x206>
			if (dcl == 1) res = FR_INT_ERR;
 8017544:	2602      	movs	r6, #2
 8017546:	e7fa      	b.n	801753e <f_mkdir+0x26e>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017548:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801754a:	429a      	cmp	r2, r3
 801754c:	f47f af7c 	bne.w	8017448 <f_mkdir+0x178>
 8017550:	2200      	movs	r2, #0
 8017552:	4613      	mov	r3, r2
 8017554:	e77b      	b.n	801744e <f_mkdir+0x17e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017556:	2700      	movs	r7, #0
 8017558:	e710      	b.n	801737c <f_mkdir+0xac>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801755a:	2601      	movs	r6, #1
 801755c:	e7ef      	b.n	801753e <f_mkdir+0x26e>
		wsect = fs->winsect;	/* Current sector number */
 801755e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017560:	f105 0a34 	add.w	sl, r5, #52	; 0x34
 8017564:	2301      	movs	r3, #1
 8017566:	7868      	ldrb	r0, [r5, #1]
 8017568:	463a      	mov	r2, r7
 801756a:	4651      	mov	r1, sl
 801756c:	f7fc fcee 	bl	8013f4c <disk_write>
 8017570:	2800      	cmp	r0, #0
 8017572:	d1f2      	bne.n	801755a <f_mkdir+0x28a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017574:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			fs->wflag = 0;
 8017576:	70ee      	strb	r6, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017578:	1afa      	subs	r2, r7, r3
 801757a:	69eb      	ldr	r3, [r5, #28]
 801757c:	429a      	cmp	r2, r3
 801757e:	f4bf aeea 	bcs.w	8017356 <f_mkdir+0x86>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017582:	f895 9002 	ldrb.w	r9, [r5, #2]
 8017586:	f1b9 0f01 	cmp.w	r9, #1
 801758a:	d801      	bhi.n	8017590 <f_mkdir+0x2c0>
 801758c:	e6e3      	b.n	8017356 <f_mkdir+0x86>
 801758e:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8017590:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017592:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8017596:	2301      	movs	r3, #1
 8017598:	4651      	mov	r1, sl
 801759a:	463a      	mov	r2, r7
 801759c:	7868      	ldrb	r0, [r5, #1]
 801759e:	f7fc fcd5 	bl	8013f4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80175a2:	f1b9 0f01 	cmp.w	r9, #1
 80175a6:	d1f2      	bne.n	801758e <f_mkdir+0x2be>
 80175a8:	e6d5      	b.n	8017356 <f_mkdir+0x86>
 80175aa:	bf00      	nop

080175ac <f_putc>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80175ac:	b171      	cbz	r1, 80175cc <f_putc+0x20>
 80175ae:	680b      	ldr	r3, [r1, #0]

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 80175b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175b4:	460c      	mov	r4, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80175b6:	b12b      	cbz	r3, 80175c4 <f_putc+0x18>
 80175b8:	781a      	ldrb	r2, [r3, #0]
 80175ba:	b11a      	cbz	r2, 80175c4 <f_putc+0x18>
 80175bc:	8889      	ldrh	r1, [r1, #4]
 80175be:	88da      	ldrh	r2, [r3, #6]
 80175c0:	4291      	cmp	r1, r2
 80175c2:	d006      	beq.n	80175d2 <f_putc+0x26>
	return EOF;
 80175c4:	f04f 30ff 	mov.w	r0, #4294967295


	putc_init(&pb, fp);
	putc_bfd(&pb, c);	/* Put the character */
	return putc_flush(&pb);
}
 80175c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return EOF;
 80175cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80175d0:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80175d2:	4605      	mov	r5, r0
 80175d4:	7858      	ldrb	r0, [r3, #1]
 80175d6:	f7fc fc8f 	bl	8013ef8 <disk_status>
 80175da:	07c2      	lsls	r2, r0, #31
 80175dc:	d4f2      	bmi.n	80175c4 <f_putc+0x18>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80175de:	7d63      	ldrb	r3, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80175e0:	6826      	ldr	r6, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d1ee      	bne.n	80175c4 <f_putc+0x18>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80175e6:	7d20      	ldrb	r0, [r4, #20]
 80175e8:	0783      	lsls	r3, r0, #30
 80175ea:	d5eb      	bpl.n	80175c4 <f_putc+0x18>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80175ec:	69a1      	ldr	r1, [r4, #24]
 80175ee:	1c4f      	adds	r7, r1, #1
 80175f0:	d042      	beq.n	8017678 <f_putc+0xcc>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80175f2:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d179      	bne.n	80176ee <f_putc+0x142>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80175fa:	8972      	ldrh	r2, [r6, #10]
 80175fc:	0a4b      	lsrs	r3, r1, #9
 80175fe:	1e57      	subs	r7, r2, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8017600:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8017604:	d10d      	bne.n	8017622 <f_putc+0x76>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017606:	2900      	cmp	r1, #0
 8017608:	d140      	bne.n	801768c <f_putc+0xe0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801760a:	68a3      	ldr	r3, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 801760c:	2b00      	cmp	r3, #0
 801760e:	d067      	beq.n	80176e0 <f_putc+0x134>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017610:	2b01      	cmp	r3, #1
 8017612:	d035      	beq.n	8017680 <f_putc+0xd4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017614:	1c5a      	adds	r2, r3, #1
 8017616:	d075      	beq.n	8017704 <f_putc+0x158>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017618:	68a2      	ldr	r2, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 801761a:	61e3      	str	r3, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801761c:	b902      	cbnz	r2, 8017620 <f_putc+0x74>
 801761e:	60a3      	str	r3, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017620:	7d20      	ldrb	r0, [r4, #20]
 8017622:	0603      	lsls	r3, r0, #24
 8017624:	d44a      	bmi.n	80176bc <f_putc+0x110>
	clst -= 2;
 8017626:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017628:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 801762a:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801762c:	3b02      	subs	r3, #2
 801762e:	429a      	cmp	r2, r3
 8017630:	d226      	bcs.n	8017680 <f_putc+0xd4>
	return clst * fs->csize + fs->database;
 8017632:	8971      	ldrh	r1, [r6, #10]
 8017634:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8017636:	fb02 3201 	mla	r2, r2, r1, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 801763a:	b30a      	cbz	r2, 8017680 <f_putc+0xd4>
			sect += csect;
 801763c:	4417      	add	r7, r2
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801763e:	6a23      	ldr	r3, [r4, #32]
 8017640:	429f      	cmp	r7, r3
 8017642:	d048      	beq.n	80176d6 <f_putc+0x12a>
				fp->fptr < fp->obj.objsize &&
 8017644:	69a3      	ldr	r3, [r4, #24]
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017646:	f104 0830 	add.w	r8, r4, #48	; 0x30
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801764a:	68e2      	ldr	r2, [r4, #12]
 801764c:	4293      	cmp	r3, r2
 801764e:	d351      	bcc.n	80176f4 <f_putc+0x148>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017650:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 8017654:	6227      	str	r7, [r4, #32]
			*d++ = *s++;
 8017656:	f808 5003 	strb.w	r5, [r8, r3]
		&& (UINT)pb->idx == nw) return pb->nchr;
 801765a:	2001      	movs	r0, #1
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801765c:	69a3      	ldr	r3, [r4, #24]
 801765e:	68e2      	ldr	r2, [r4, #12]
 8017660:	3301      	adds	r3, #1
		fp->flag |= FA_DIRTY;
 8017662:	7d21      	ldrb	r1, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017664:	429a      	cmp	r2, r3
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017666:	f061 013f 	orn	r1, r1, #63	; 0x3f
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801766a:	61a3      	str	r3, [r4, #24]
 801766c:	bf38      	it	cc
 801766e:	461a      	movcc	r2, r3
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017670:	7521      	strb	r1, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017672:	60e2      	str	r2, [r4, #12]
}
 8017674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017678:	f040 0340 	orr.w	r3, r0, #64	; 0x40
 801767c:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 801767e:	e7a1      	b.n	80175c4 <f_putc+0x18>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017680:	2302      	movs	r3, #2
	return EOF;
 8017682:	f04f 30ff 	mov.w	r0, #4294967295
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017686:	7563      	strb	r3, [r4, #21]
}
 8017688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (fp->cltbl) {
 801768c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801768e:	b331      	cbz	r1, 80176de <f_putc+0x132>
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017690:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017692:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017696:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017698:	b92a      	cbnz	r2, 80176a6 <f_putc+0xfa>
 801769a:	e7ed      	b.n	8017678 <f_putc+0xcc>
		cl -= ncl; tbl++;		/* Next fragment */
 801769c:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801769e:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80176a2:	2a00      	cmp	r2, #0
 80176a4:	d0e8      	beq.n	8017678 <f_putc+0xcc>
		if (cl < ncl) break;	/* In this fragment? */
 80176a6:	429a      	cmp	r2, r3
 80176a8:	d9f8      	bls.n	801769c <f_putc+0xf0>
	return cl + *tbl;	/* Return the cluster number */
 80176aa:	684a      	ldr	r2, [r1, #4]
 80176ac:	4413      	add	r3, r2
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d1ae      	bne.n	8017610 <f_putc+0x64>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80176b2:	7d23      	ldrb	r3, [r4, #20]
 80176b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176b8:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80176ba:	e783      	b.n	80175c4 <f_putc+0x18>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80176bc:	2301      	movs	r3, #1
 80176be:	6a22      	ldr	r2, [r4, #32]
 80176c0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80176c4:	7870      	ldrb	r0, [r6, #1]
 80176c6:	f7fc fc41 	bl	8013f4c <disk_write>
 80176ca:	b9d8      	cbnz	r0, 8017704 <f_putc+0x158>
				fp->flag &= (BYTE)~FA_DIRTY;
 80176cc:	7d23      	ldrb	r3, [r4, #20]
 80176ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80176d2:	7523      	strb	r3, [r4, #20]
 80176d4:	e7a7      	b.n	8017626 <f_putc+0x7a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80176d6:	f104 0830 	add.w	r8, r4, #48	; 0x30
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80176da:	69a3      	ldr	r3, [r4, #24]
 80176dc:	e7b8      	b.n	8017650 <f_putc+0xa4>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80176de:	69e1      	ldr	r1, [r4, #28]
 80176e0:	4620      	mov	r0, r4
 80176e2:	f7fd faff 	bl	8014ce4 <create_chain>
 80176e6:	4603      	mov	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d191      	bne.n	8017610 <f_putc+0x64>
 80176ec:	e7e1      	b.n	80176b2 <f_putc+0x106>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80176ee:	f104 0830 	add.w	r8, r4, #48	; 0x30
 80176f2:	e7b0      	b.n	8017656 <f_putc+0xaa>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80176f4:	7870      	ldrb	r0, [r6, #1]
 80176f6:	2301      	movs	r3, #1
 80176f8:	463a      	mov	r2, r7
 80176fa:	4641      	mov	r1, r8
 80176fc:	f7fc fc18 	bl	8013f30 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8017700:	2800      	cmp	r0, #0
 8017702:	d0ea      	beq.n	80176da <f_putc+0x12e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017704:	2301      	movs	r3, #1
	return EOF;
 8017706:	f04f 30ff 	mov.w	r0, #4294967295
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801770a:	7563      	strb	r3, [r4, #21]
 801770c:	e75c      	b.n	80175c8 <f_putc+0x1c>
 801770e:	bf00      	nop

08017710 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8017710:	b40e      	push	{r1, r2, r3}
 8017712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017716:	b0a0      	sub	sp, #128	; 0x80
	pb->nchr = pb->idx = 0;
 8017718:	2100      	movs	r1, #0
{
 801771a:	ab29      	add	r3, sp, #164	; 0xa4
	pb->nchr = pb->idx = 0;
 801771c:	910f      	str	r1, [sp, #60]	; 0x3c
{
 801771e:	f853 6b04 	ldr.w	r6, [r3], #4
	putc_init(&pb, fp);

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
 8017722:	4634      	mov	r4, r6
	va_start(arp, fmt);
 8017724:	9303      	str	r3, [sp, #12]
		c = *fmt++;
 8017726:	f814 3b01 	ldrb.w	r3, [r4], #1
	pb->fp = fp;
 801772a:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
		if (c == 0) break;			/* End of string */
 801772e:	b9bb      	cbnz	r3, 8017760 <f_printf+0x50>
 8017730:	e26d      	b.n	8017c0e <f_printf+0x4fe>
	if (i < 0) return;
 8017732:	2900      	cmp	r1, #0
 8017734:	f2c0 81cd 	blt.w	8017ad2 <f_printf+0x3c2>
	pb->buf[i++] = (BYTE)c;
 8017738:	f101 0280 	add.w	r2, r1, #128	; 0x80
 801773c:	1c4d      	adds	r5, r1, #1
 801773e:	446a      	add	r2, sp
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017740:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017742:	f802 3c40 	strb.w	r3, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017746:	f300 81c6 	bgt.w	8017ad6 <f_printf+0x3c6>
	pb->nchr++;
 801774a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801774c:	4629      	mov	r1, r5
 801774e:	4626      	mov	r6, r4
	pb->idx = i;
 8017750:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 8017752:	3301      	adds	r3, #1
 8017754:	930f      	str	r3, [sp, #60]	; 0x3c
		c = *fmt++;
 8017756:	4634      	mov	r4, r6
 8017758:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (c == 0) break;			/* End of string */
 801775c:	2b00      	cmp	r3, #0
 801775e:	d063      	beq.n	8017828 <f_printf+0x118>
		if (c != '%') {				/* Non escape character */
 8017760:	2b25      	cmp	r3, #37	; 0x25
 8017762:	d1e6      	bne.n	8017732 <f_printf+0x22>
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
 8017764:	7873      	ldrb	r3, [r6, #1]
		if (c == '0') {				/* Flag: '0' padding */
 8017766:	2b30      	cmp	r3, #48	; 0x30
 8017768:	f000 81ab 	beq.w	8017ac2 <f_printf+0x3b2>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 801776c:	2b2d      	cmp	r3, #45	; 0x2d
 801776e:	f000 81be 	beq.w	8017aee <f_printf+0x3de>
		c = *fmt++;
 8017772:	f04f 0b00 	mov.w	fp, #0
 8017776:	3602      	adds	r6, #2
 8017778:	2004      	movs	r0, #4
		w = f = 0;
 801777a:	46da      	mov	sl, fp
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801777c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017780:	2400      	movs	r4, #0
 8017782:	2a09      	cmp	r2, #9
 8017784:	d80a      	bhi.n	801779c <f_printf+0x8c>
			w = w * 10 + c - '0';
 8017786:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801778a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
			c = *fmt++;
 801778e:	f816 3b01 	ldrb.w	r3, [r6], #1
		while (IsDigit(c)) {		/* Precision */
 8017792:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
			w = w * 10 + c - '0';
 8017796:	3c30      	subs	r4, #48	; 0x30
		while (IsDigit(c)) {		/* Precision */
 8017798:	2a09      	cmp	r2, #9
 801779a:	d9f4      	bls.n	8017786 <f_printf+0x76>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801779c:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 80177a0:	2a4c      	cmp	r2, #76	; 0x4c
 80177a2:	f040 818a 	bne.w	8017aba <f_printf+0x3aa>
			f |= 4; c = *fmt++;
 80177a6:	4682      	mov	sl, r0
 80177a8:	2704      	movs	r7, #4
 80177aa:	f816 3b01 	ldrb.w	r3, [r6], #1
		}
		if (!c) break;
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d03a      	beq.n	8017828 <f_printf+0x118>
		d = c;
		if (IsLower(d)) d -= 0x20;
 80177b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80177b6:	2a19      	cmp	r2, #25
 80177b8:	f200 8181 	bhi.w	8017abe <f_printf+0x3ae>
 80177bc:	f1a3 0520 	sub.w	r5, r3, #32
 80177c0:	b2ed      	uxtb	r5, r5
		switch (d) {				/* Type is... */
 80177c2:	f1a5 0242 	sub.w	r2, r5, #66	; 0x42
 80177c6:	2a16      	cmp	r2, #22
 80177c8:	d818      	bhi.n	80177fc <f_printf+0xec>
 80177ca:	e8df f012 	tbh	[pc, r2, lsl #1]
 80177ce:	019f      	.short	0x019f
 80177d0:	00440057 	.word	0x00440057
 80177d4:	00170017 	.word	0x00170017
 80177d8:	00170017 	.word	0x00170017
 80177dc:	00170017 	.word	0x00170017
 80177e0:	00170017 	.word	0x00170017
 80177e4:	00170017 	.word	0x00170017
 80177e8:	001700ae 	.word	0x001700ae
 80177ec:	00170017 	.word	0x00170017
 80177f0:	00170060 	.word	0x00170060
 80177f4:	00170044 	.word	0x00170044
 80177f8:	01a10017 	.word	0x01a10017
	if (i < 0) return;
 80177fc:	2900      	cmp	r1, #0
 80177fe:	dbaa      	blt.n	8017756 <f_printf+0x46>
	pb->buf[i++] = (BYTE)c;
 8017800:	1c4c      	adds	r4, r1, #1
 8017802:	f101 0280 	add.w	r2, r1, #128	; 0x80
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017806:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017808:	eb0d 0102 	add.w	r1, sp, r2
 801780c:	f801 3c40 	strb.w	r3, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017810:	f300 81a4 	bgt.w	8017b5c <f_printf+0x44c>
	pb->nchr++;
 8017814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017816:	4621      	mov	r1, r4
	pb->idx = i;
 8017818:	940e      	str	r4, [sp, #56]	; 0x38
		c = *fmt++;
 801781a:	4634      	mov	r4, r6
	pb->nchr++;
 801781c:	3301      	adds	r3, #1
 801781e:	930f      	str	r3, [sp, #60]	; 0x3c
		c = *fmt++;
 8017820:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (c == 0) break;			/* End of string */
 8017824:	2b00      	cmp	r3, #0
 8017826:	d19b      	bne.n	8017760 <f_printf+0x50>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8017828:	2900      	cmp	r1, #0
 801782a:	f2c0 81e2 	blt.w	8017bf2 <f_printf+0x4e2>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801782e:	460a      	mov	r2, r1
 8017830:	ab04      	add	r3, sp, #16
 8017832:	a910      	add	r1, sp, #64	; 0x40
 8017834:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017836:	f7ff f895 	bl	8016964 <f_write>
 801783a:	2800      	cmp	r0, #0
 801783c:	f040 81d9 	bne.w	8017bf2 <f_printf+0x4e2>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8017840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017842:	9b04      	ldr	r3, [sp, #16]
 8017844:	429a      	cmp	r2, r3
 8017846:	f040 81d4 	bne.w	8017bf2 <f_printf+0x4e2>
 801784a:	980f      	ldr	r0, [sp, #60]	; 0x3c
	}

	va_end(arp);

	return putc_flush(&pb);
}
 801784c:	b020      	add	sp, #128	; 0x80
 801784e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017852:	b003      	add	sp, #12
 8017854:	4770      	bx	lr
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8017856:	2f00      	cmp	r7, #0
 8017858:	f040 815c 	bne.w	8017b14 <f_printf+0x404>
 801785c:	2d44      	cmp	r5, #68	; 0x44
 801785e:	f040 814d 	bne.w	8017afc <f_printf+0x3ec>
 8017862:	9a03      	ldr	r2, [sp, #12]
		if (d == 'D' && (v & 0x80000000)) {
 8017864:	2d44      	cmp	r5, #68	; 0x44
 8017866:	f04f 000a 	mov.w	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801786a:	f102 0704 	add.w	r7, r2, #4
 801786e:	9703      	str	r7, [sp, #12]
 8017870:	6817      	ldr	r7, [r2, #0]
 8017872:	463a      	mov	r2, r7
		if (d == 'D' && (v & 0x80000000)) {
 8017874:	d065      	beq.n	8017942 <f_printf+0x232>
 8017876:	2500      	movs	r5, #0
 8017878:	9501      	str	r5, [sp, #4]
 801787a:	e06d      	b.n	8017958 <f_printf+0x248>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801787c:	9b03      	ldr	r3, [sp, #12]
	if (i < 0) return;
 801787e:	2900      	cmp	r1, #0
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8017880:	f103 0204 	add.w	r2, r3, #4
 8017884:	9203      	str	r2, [sp, #12]
	if (i < 0) return;
 8017886:	f6ff af66 	blt.w	8017756 <f_printf+0x46>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	e7b8      	b.n	8017800 <f_printf+0xf0>
			p = va_arg(arp, TCHAR*);
 801788e:	9b03      	ldr	r3, [sp, #12]
 8017890:	681d      	ldr	r5, [r3, #0]
 8017892:	3304      	adds	r3, #4
			for (j = 0; p[j]; j++) ;
 8017894:	782a      	ldrb	r2, [r5, #0]
			p = va_arg(arp, TCHAR*);
 8017896:	9303      	str	r3, [sp, #12]
			for (j = 0; p[j]; j++) ;
 8017898:	2a00      	cmp	r2, #0
 801789a:	f000 81b1 	beq.w	8017c00 <f_printf+0x4f0>
 801789e:	462b      	mov	r3, r5
 80178a0:	f1c5 0c01 	rsb	ip, r5, #1
 80178a4:	eb0c 0703 	add.w	r7, ip, r3
 80178a8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80178ac:	2800      	cmp	r0, #0
 80178ae:	d1f9      	bne.n	80178a4 <f_printf+0x194>
			if (!(f & 2)) {
 80178b0:	f1bb 0f00 	cmp.w	fp, #0
 80178b4:	f000 815e 	beq.w	8017b74 <f_printf+0x464>
			while (j++ < w) putc_bfd(&pb, ' ');
 80178b8:	f107 0801 	add.w	r8, r7, #1
 80178bc:	3501      	adds	r5, #1
	pb->buf[i++] = (BYTE)c;
 80178be:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 80178c2:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 80178c4:	f101 0901 	add.w	r9, r1, #1
 80178c8:	eb0d 0003 	add.w	r0, sp, r3
			while (*p) putc_bfd(&pb, *p++);
 80178cc:	462b      	mov	r3, r5
	if (i < 0) return;
 80178ce:	f2c0 8123 	blt.w	8017b18 <f_printf+0x408>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80178d2:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
 80178d6:	4649      	mov	r1, r9
	pb->buf[i++] = (BYTE)c;
 80178d8:	f800 2c40 	strb.w	r2, [r0, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80178dc:	f300 8125 	bgt.w	8017b2a <f_printf+0x41a>
	pb->nchr++;
 80178e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	pb->idx = i;
 80178e2:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 80178e4:	3301      	adds	r3, #1
 80178e6:	930f      	str	r3, [sp, #60]	; 0x3c
			while (*p) putc_bfd(&pb, *p++);
 80178e8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80178ec:	2a00      	cmp	r2, #0
 80178ee:	d1e6      	bne.n	80178be <f_printf+0x1ae>
			while (j++ < w) putc_bfd(&pb, ' ');
 80178f0:	42a7      	cmp	r7, r4
 80178f2:	f4bf af30 	bcs.w	8017756 <f_printf+0x46>
	pb->buf[i++] = (BYTE)c;
 80178f6:	2720      	movs	r7, #32
 80178f8:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 80178fc:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 80178fe:	f101 0501 	add.w	r5, r1, #1
 8017902:	446b      	add	r3, sp
	if (i < 0) return;
 8017904:	f6ff af27 	blt.w	8017756 <f_printf+0x46>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017908:	2d3c      	cmp	r5, #60	; 0x3c
 801790a:	4629      	mov	r1, r5
	pb->buf[i++] = (BYTE)c;
 801790c:	f803 7c40 	strb.w	r7, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017910:	f300 8118 	bgt.w	8017b44 <f_printf+0x434>
	pb->nchr++;
 8017914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			while (j++ < w) putc_bfd(&pb, ' ');
 8017916:	f108 0201 	add.w	r2, r8, #1
 801791a:	4544      	cmp	r4, r8
	pb->idx = i;
 801791c:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 801791e:	f103 0301 	add.w	r3, r3, #1
			while (j++ < w) putc_bfd(&pb, ' ');
 8017922:	4690      	mov	r8, r2
	pb->nchr++;
 8017924:	930f      	str	r3, [sp, #60]	; 0x3c
			while (j++ < w) putc_bfd(&pb, ' ');
 8017926:	d8e7      	bhi.n	80178f8 <f_printf+0x1e8>
 8017928:	e715      	b.n	8017756 <f_printf+0x46>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801792a:	2008      	movs	r0, #8
 801792c:	2f00      	cmp	r7, #0
 801792e:	f000 80e6 	beq.w	8017afe <f_printf+0x3ee>
 8017932:	9a03      	ldr	r2, [sp, #12]
		if (d == 'D' && (v & 0x80000000)) {
 8017934:	2d44      	cmp	r5, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8017936:	f102 0704 	add.w	r7, r2, #4
 801793a:	9703      	str	r7, [sp, #12]
 801793c:	6817      	ldr	r7, [r2, #0]
 801793e:	463a      	mov	r2, r7
		if (d == 'D' && (v & 0x80000000)) {
 8017940:	d199      	bne.n	8017876 <f_printf+0x166>
 8017942:	2f00      	cmp	r7, #0
 8017944:	da97      	bge.n	8017876 <f_printf+0x166>
			f |= 8;
 8017946:	f04a 0508 	orr.w	r5, sl, #8
 801794a:	f00a 0b02 	and.w	fp, sl, #2
			v = 0 - v;
 801794e:	427a      	negs	r2, r7
			f |= 8;
 8017950:	fa5f fa85 	uxtb.w	sl, r5
 8017954:	2508      	movs	r5, #8
 8017956:	9501      	str	r5, [sp, #4]
		i = 0;
 8017958:	2b78      	cmp	r3, #120	; 0x78
 801795a:	f10d 0c14 	add.w	ip, sp, #20
 801795e:	f04f 0e00 	mov.w	lr, #0
 8017962:	bf0c      	ite	eq
 8017964:	f04f 0927 	moveq.w	r9, #39	; 0x27
 8017968:	f04f 0907 	movne.w	r9, #7
 801796c:	e000      	b.n	8017970 <f_printf+0x260>
		} while (v && i < sizeof str / sizeof str[0]);
 801796e:	46ae      	mov	lr, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8017970:	4617      	mov	r7, r2
			str[i++] = d + '0';
 8017972:	f10e 0501 	add.w	r5, lr, #1
			d = (TCHAR)(v % r); v /= r;
 8017976:	fbb2 f3f0 	udiv	r3, r2, r0
 801797a:	fb00 2813 	mls	r8, r0, r3, r2
 801797e:	461a      	mov	r2, r3
 8017980:	fa5f f388 	uxtb.w	r3, r8
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8017984:	f1b8 0f09 	cmp.w	r8, #9
 8017988:	eb09 0803 	add.w	r8, r9, r3
 801798c:	bf88      	it	hi
 801798e:	fa5f f388 	uxtbhi.w	r3, r8
		} while (v && i < sizeof str / sizeof str[0]);
 8017992:	4287      	cmp	r7, r0
			str[i++] = d + '0';
 8017994:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8017998:	f80c 3b01 	strb.w	r3, [ip], #1
		} while (v && i < sizeof str / sizeof str[0]);
 801799c:	d301      	bcc.n	80179a2 <f_printf+0x292>
 801799e:	2d1f      	cmp	r5, #31
 80179a0:	d9e5      	bls.n	801796e <f_printf+0x25e>
		if (f & 8) str[i++] = '-';
 80179a2:	9b01      	ldr	r3, [sp, #4]
 80179a4:	b13b      	cbz	r3, 80179b6 <f_printf+0x2a6>
 80179a6:	f105 0380 	add.w	r3, r5, #128	; 0x80
 80179aa:	222d      	movs	r2, #45	; 0x2d
 80179ac:	f10e 0502 	add.w	r5, lr, #2
 80179b0:	446b      	add	r3, sp
 80179b2:	f803 2c6c 	strb.w	r2, [r3, #-108]
		j = i; d = (f & 1) ? '0' : ' ';
 80179b6:	f01a 0f01 	tst.w	sl, #1
 80179ba:	bf0c      	ite	eq
 80179bc:	f04f 0820 	moveq.w	r8, #32
 80179c0:	f04f 0830 	movne.w	r8, #48	; 0x30
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80179c4:	f1bb 0f00 	cmp.w	fp, #0
 80179c8:	f040 810f 	bne.w	8017bea <f_printf+0x4da>
 80179cc:	42a5      	cmp	r5, r4
 80179ce:	f105 0a01 	add.w	sl, r5, #1
 80179d2:	f080 810c 	bcs.w	8017bee <f_printf+0x4de>
 80179d6:	f104 0901 	add.w	r9, r4, #1
	pb->buf[i++] = (BYTE)c;
 80179da:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 80179de:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 80179e0:	f101 0701 	add.w	r7, r1, #1
 80179e4:	446b      	add	r3, sp
	if (i < 0) return;
 80179e6:	db0e      	blt.n	8017a06 <f_printf+0x2f6>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80179e8:	2f3c      	cmp	r7, #60	; 0x3c
 80179ea:	4639      	mov	r1, r7
	pb->buf[i++] = (BYTE)c;
 80179ec:	f803 8c40 	strb.w	r8, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80179f0:	dc4c      	bgt.n	8017a8c <f_printf+0x37c>
	pb->nchr++;
 80179f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80179f4:	f10a 0201 	add.w	r2, sl, #1
 80179f8:	4554      	cmp	r4, sl
	pb->idx = i;
 80179fa:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 80179fc:	f103 0301 	add.w	r3, r3, #1
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8017a00:	4692      	mov	sl, r2
	pb->nchr++;
 8017a02:	930f      	str	r3, [sp, #60]	; 0x3c
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8017a04:	d1e9      	bne.n	80179da <f_printf+0x2ca>
 8017a06:	3d01      	subs	r5, #1
 8017a08:	ab05      	add	r3, sp, #20
 8017a0a:	eb03 0a05 	add.w	sl, r3, r5
 8017a0e:	e00e      	b.n	8017a2e <f_printf+0x31e>
	pb->buf[i++] = (BYTE)c;
 8017a10:	f89a 2000 	ldrb.w	r2, [sl]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017a14:	2f3c      	cmp	r7, #60	; 0x3c
 8017a16:	f10a 3aff 	add.w	sl, sl, #4294967295
	pb->buf[i++] = (BYTE)c;
 8017a1a:	f803 2c40 	strb.w	r2, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017a1e:	dc29      	bgt.n	8017a74 <f_printf+0x364>
	pb->nchr++;
 8017a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		} while (i);
 8017a22:	4639      	mov	r1, r7
	pb->idx = i;
 8017a24:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 8017a26:	3301      	adds	r3, #1
 8017a28:	930f      	str	r3, [sp, #60]	; 0x3c
		} while (i);
 8017a2a:	b13d      	cbz	r5, 8017a3c <f_printf+0x32c>
 8017a2c:	3d01      	subs	r5, #1
	pb->buf[i++] = (BYTE)c;
 8017a2e:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 8017a32:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 8017a34:	f101 0701 	add.w	r7, r1, #1
 8017a38:	446b      	add	r3, sp
	if (i < 0) return;
 8017a3a:	dae9      	bge.n	8017a10 <f_printf+0x300>
		while (j++ < w) putc_bfd(&pb, d);
 8017a3c:	454c      	cmp	r4, r9
 8017a3e:	f109 0501 	add.w	r5, r9, #1
 8017a42:	f67f ae88 	bls.w	8017756 <f_printf+0x46>
	pb->buf[i++] = (BYTE)c;
 8017a46:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 8017a4a:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 8017a4c:	f101 0201 	add.w	r2, r1, #1
 8017a50:	446b      	add	r3, sp
	if (i < 0) return;
 8017a52:	f6ff ae80 	blt.w	8017756 <f_printf+0x46>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017a56:	293c      	cmp	r1, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017a58:	f803 8c40 	strb.w	r8, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017a5c:	4611      	mov	r1, r2
 8017a5e:	d021      	beq.n	8017aa4 <f_printf+0x394>
	pb->nchr++;
 8017a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		while (j++ < w) putc_bfd(&pb, d);
 8017a62:	1c6a      	adds	r2, r5, #1
 8017a64:	42ac      	cmp	r4, r5
	pb->idx = i;
 8017a66:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 8017a68:	f103 0301 	add.w	r3, r3, #1
		while (j++ < w) putc_bfd(&pb, d);
 8017a6c:	4615      	mov	r5, r2
	pb->nchr++;
 8017a6e:	930f      	str	r3, [sp, #60]	; 0x3c
		while (j++ < w) putc_bfd(&pb, d);
 8017a70:	d1e9      	bne.n	8017a46 <f_printf+0x336>
 8017a72:	e670      	b.n	8017756 <f_printf+0x46>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017a74:	463a      	mov	r2, r7
 8017a76:	ab04      	add	r3, sp, #16
 8017a78:	a910      	add	r1, sp, #64	; 0x40
 8017a7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017a7c:	f7fe ff72 	bl	8016964 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017a80:	9b04      	ldr	r3, [sp, #16]
 8017a82:	1bdf      	subs	r7, r3, r7
 8017a84:	bf18      	it	ne
 8017a86:	f04f 37ff 	movne.w	r7, #4294967295
 8017a8a:	e7c9      	b.n	8017a20 <f_printf+0x310>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017a8c:	a910      	add	r1, sp, #64	; 0x40
 8017a8e:	ab04      	add	r3, sp, #16
 8017a90:	463a      	mov	r2, r7
 8017a92:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017a94:	f7fe ff66 	bl	8016964 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017a98:	9904      	ldr	r1, [sp, #16]
 8017a9a:	1bc9      	subs	r1, r1, r7
 8017a9c:	bf18      	it	ne
 8017a9e:	f04f 31ff 	movne.w	r1, #4294967295
 8017aa2:	e7a6      	b.n	80179f2 <f_printf+0x2e2>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017aa4:	a910      	add	r1, sp, #64	; 0x40
 8017aa6:	ab04      	add	r3, sp, #16
 8017aa8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017aaa:	f7fe ff5b 	bl	8016964 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017aae:	9904      	ldr	r1, [sp, #16]
 8017ab0:	393d      	subs	r1, #61	; 0x3d
 8017ab2:	bf18      	it	ne
 8017ab4:	f04f 31ff 	movne.w	r1, #4294967295
 8017ab8:	e7d2      	b.n	8017a60 <f_printf+0x350>
 8017aba:	2700      	movs	r7, #0
 8017abc:	e677      	b.n	80177ae <f_printf+0x9e>
 8017abe:	461d      	mov	r5, r3
 8017ac0:	e67f      	b.n	80177c2 <f_printf+0xb2>
			f = 1; c = *fmt++;
 8017ac2:	78b3      	ldrb	r3, [r6, #2]
 8017ac4:	f04f 0b00 	mov.w	fp, #0
 8017ac8:	3603      	adds	r6, #3
 8017aca:	2005      	movs	r0, #5
 8017acc:	f04f 0a01 	mov.w	sl, #1
 8017ad0:	e654      	b.n	801777c <f_printf+0x6c>
	if (i < 0) return;
 8017ad2:	4626      	mov	r6, r4
 8017ad4:	e63f      	b.n	8017756 <f_printf+0x46>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017ad6:	462a      	mov	r2, r5
 8017ad8:	ab04      	add	r3, sp, #16
 8017ada:	a910      	add	r1, sp, #64	; 0x40
 8017adc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017ade:	f7fe ff41 	bl	8016964 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017ae2:	9b04      	ldr	r3, [sp, #16]
 8017ae4:	1b5d      	subs	r5, r3, r5
 8017ae6:	bf18      	it	ne
 8017ae8:	f04f 35ff 	movne.w	r5, #4294967295
 8017aec:	e62d      	b.n	801774a <f_printf+0x3a>
				f = 2; c = *fmt++;
 8017aee:	f04f 0b02 	mov.w	fp, #2
 8017af2:	78b3      	ldrb	r3, [r6, #2]
 8017af4:	2006      	movs	r0, #6
 8017af6:	3603      	adds	r6, #3
 8017af8:	46da      	mov	sl, fp
 8017afa:	e63f      	b.n	801777c <f_printf+0x6c>
 8017afc:	200a      	movs	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8017afe:	9a03      	ldr	r2, [sp, #12]
 8017b00:	2500      	movs	r5, #0
 8017b02:	9501      	str	r5, [sp, #4]
 8017b04:	1d15      	adds	r5, r2, #4
 8017b06:	6812      	ldr	r2, [r2, #0]
 8017b08:	9503      	str	r5, [sp, #12]
 8017b0a:	e725      	b.n	8017958 <f_printf+0x248>
		switch (d) {				/* Type is... */
 8017b0c:	2002      	movs	r0, #2
 8017b0e:	e70d      	b.n	801792c <f_printf+0x21c>
 8017b10:	2010      	movs	r0, #16
 8017b12:	e70b      	b.n	801792c <f_printf+0x21c>
 8017b14:	200a      	movs	r0, #10
 8017b16:	e70c      	b.n	8017932 <f_printf+0x222>
			while (*p) putc_bfd(&pb, *p++);
 8017b18:	782a      	ldrb	r2, [r5, #0]
 8017b1a:	2a00      	cmp	r2, #0
 8017b1c:	f43f aee8 	beq.w	80178f0 <f_printf+0x1e0>
 8017b20:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8017b24:	2a00      	cmp	r2, #0
 8017b26:	d1fb      	bne.n	8017b20 <f_printf+0x410>
 8017b28:	e6e2      	b.n	80178f0 <f_printf+0x1e0>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017b2a:	a910      	add	r1, sp, #64	; 0x40
 8017b2c:	ab04      	add	r3, sp, #16
 8017b2e:	464a      	mov	r2, r9
 8017b30:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017b32:	f7fe ff17 	bl	8016964 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017b36:	9904      	ldr	r1, [sp, #16]
 8017b38:	ebb1 0109 	subs.w	r1, r1, r9
 8017b3c:	bf18      	it	ne
 8017b3e:	f04f 31ff 	movne.w	r1, #4294967295
 8017b42:	e6cd      	b.n	80178e0 <f_printf+0x1d0>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017b44:	a910      	add	r1, sp, #64	; 0x40
 8017b46:	ab04      	add	r3, sp, #16
 8017b48:	462a      	mov	r2, r5
 8017b4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017b4c:	f7fe ff0a 	bl	8016964 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017b50:	9904      	ldr	r1, [sp, #16]
 8017b52:	1b49      	subs	r1, r1, r5
 8017b54:	bf18      	it	ne
 8017b56:	f04f 31ff 	movne.w	r1, #4294967295
 8017b5a:	e6db      	b.n	8017914 <f_printf+0x204>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017b5c:	4622      	mov	r2, r4
 8017b5e:	ab04      	add	r3, sp, #16
 8017b60:	a910      	add	r1, sp, #64	; 0x40
 8017b62:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017b64:	f7fe fefe 	bl	8016964 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017b68:	9b04      	ldr	r3, [sp, #16]
 8017b6a:	1b1c      	subs	r4, r3, r4
 8017b6c:	bf18      	it	ne
 8017b6e:	f04f 34ff 	movne.w	r4, #4294967295
 8017b72:	e64f      	b.n	8017814 <f_printf+0x104>
				while (j++ < w) putc_bfd(&pb, ' ');
 8017b74:	42bc      	cmp	r4, r7
 8017b76:	f107 0901 	add.w	r9, r7, #1
 8017b7a:	f107 0802 	add.w	r8, r7, #2
 8017b7e:	d948      	bls.n	8017c12 <f_printf+0x502>
 8017b80:	464f      	mov	r7, r9
	pb->buf[i++] = (BYTE)c;
 8017b82:	f04f 0820 	mov.w	r8, #32
 8017b86:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 8017b8a:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 8017b8c:	f101 0a01 	add.w	sl, r1, #1
 8017b90:	446b      	add	r3, sp
	if (i < 0) return;
 8017b92:	db0e      	blt.n	8017bb2 <f_printf+0x4a2>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017b94:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
 8017b98:	4651      	mov	r1, sl
	pb->buf[i++] = (BYTE)c;
 8017b9a:	f803 8c40 	strb.w	r8, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017b9e:	dc17      	bgt.n	8017bd0 <f_printf+0x4c0>
	pb->nchr++;
 8017ba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
				while (j++ < w) putc_bfd(&pb, ' ');
 8017ba2:	1c7a      	adds	r2, r7, #1
 8017ba4:	42bc      	cmp	r4, r7
	pb->idx = i;
 8017ba6:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 8017ba8:	f103 0301 	add.w	r3, r3, #1
				while (j++ < w) putc_bfd(&pb, ' ');
 8017bac:	4617      	mov	r7, r2
	pb->nchr++;
 8017bae:	930f      	str	r3, [sp, #60]	; 0x3c
				while (j++ < w) putc_bfd(&pb, ' ');
 8017bb0:	d8e9      	bhi.n	8017b86 <f_printf+0x476>
 8017bb2:	eba4 0709 	sub.w	r7, r4, r9
			while (*p) putc_bfd(&pb, *p++);
 8017bb6:	782a      	ldrb	r2, [r5, #0]
				while (j++ < w) putc_bfd(&pb, ' ');
 8017bb8:	454c      	cmp	r4, r9
 8017bba:	bf38      	it	cc
 8017bbc:	2700      	movcc	r7, #0
 8017bbe:	f109 0901 	add.w	r9, r9, #1
 8017bc2:	444f      	add	r7, r9
			while (j++ < w) putc_bfd(&pb, ' ');
 8017bc4:	f107 0801 	add.w	r8, r7, #1
			while (*p) putc_bfd(&pb, *p++);
 8017bc8:	2a00      	cmp	r2, #0
 8017bca:	f47f ae77 	bne.w	80178bc <f_printf+0x1ac>
 8017bce:	e68f      	b.n	80178f0 <f_printf+0x1e0>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017bd0:	a910      	add	r1, sp, #64	; 0x40
 8017bd2:	ab04      	add	r3, sp, #16
 8017bd4:	4652      	mov	r2, sl
 8017bd6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017bd8:	f7fe fec4 	bl	8016964 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017bdc:	9904      	ldr	r1, [sp, #16]
 8017bde:	ebb1 010a 	subs.w	r1, r1, sl
 8017be2:	bf18      	it	ne
 8017be4:	f04f 31ff 	movne.w	r1, #4294967295
 8017be8:	e7da      	b.n	8017ba0 <f_printf+0x490>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8017bea:	46a9      	mov	r9, r5
 8017bec:	e70b      	b.n	8017a06 <f_printf+0x2f6>
 8017bee:	46d1      	mov	r9, sl
 8017bf0:	e709      	b.n	8017a06 <f_printf+0x2f6>
	return EOF;
 8017bf2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017bf6:	b020      	add	sp, #128	; 0x80
 8017bf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bfc:	b003      	add	sp, #12
 8017bfe:	4770      	bx	lr
			if (!(f & 2)) {
 8017c00:	f1bb 0f00 	cmp.w	fp, #0
 8017c04:	d007      	beq.n	8017c16 <f_printf+0x506>
			for (j = 0; p[j]; j++) ;
 8017c06:	4617      	mov	r7, r2
			if (!(f & 2)) {
 8017c08:	f04f 0801 	mov.w	r8, #1
 8017c0c:	e670      	b.n	80178f0 <f_printf+0x1e0>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8017c0e:	4619      	mov	r1, r3
 8017c10:	e60d      	b.n	801782e <f_printf+0x11e>
				while (j++ < w) putc_bfd(&pb, ' ');
 8017c12:	464f      	mov	r7, r9
 8017c14:	e652      	b.n	80178bc <f_printf+0x1ac>
 8017c16:	2c00      	cmp	r4, #0
 8017c18:	f43f ad9d 	beq.w	8017756 <f_printf+0x46>
 8017c1c:	f04f 0901 	mov.w	r9, #1
 8017c20:	e7ae      	b.n	8017b80 <f_printf+0x470>
 8017c22:	bf00      	nop

08017c24 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8017c24:	4b14      	ldr	r3, [pc, #80]	; (8017c78 <FATFS_LinkDriver+0x54>)
 8017c26:	7b9a      	ldrb	r2, [r3, #14]
 8017c28:	2a01      	cmp	r2, #1
 8017c2a:	d901      	bls.n	8017c30 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 8017c2c:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8017c2e:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 8017c30:	f893 c00e 	ldrb.w	ip, [r3, #14]
 8017c34:	2200      	movs	r2, #0
 8017c36:	fa5f fc8c 	uxtb.w	ip, ip
 8017c3a:	f803 200c 	strb.w	r2, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8017c3e:	f893 c00e 	ldrb.w	ip, [r3, #14]
 8017c42:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8017c46:	f8cc 0004 	str.w	r0, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8017c4a:	f893 c00e 	ldrb.w	ip, [r3, #14]
    DiskNum = disk.nbr++;
 8017c4e:	7b98      	ldrb	r0, [r3, #14]
    disk.lun[disk.nbr] = lun;
 8017c50:	449c      	add	ip, r3
 8017c52:	f88c 200c 	strb.w	r2, [ip, #12]
    DiskNum = disk.nbr++;
 8017c56:	f100 0c01 	add.w	ip, r0, #1
    path[0] = DiskNum + '0';
 8017c5a:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 8017c5c:	fa5f fc8c 	uxtb.w	ip, ip
 8017c60:	f883 c00e 	strb.w	ip, [r3, #14]
    path[1] = ':';
 8017c64:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    path[2] = '/';
 8017c68:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8017c6a:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 8017c6c:	f881 c001 	strb.w	ip, [r1, #1]
    path[3] = 0;
 8017c70:	4610      	mov	r0, r2
    path[2] = '/';
 8017c72:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8017c74:	70ca      	strb	r2, [r1, #3]
  return ret;
 8017c76:	4770      	bx	lr
 8017c78:	20007218 	.word	0x20007218

08017c7c <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8017c7c:	f00a baf6 	b.w	802226c <malloc>

08017c80 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8017c80:	f00a bafc 	b.w	802227c <free>

08017c84 <Init_DataMemoryLayout>:
  AIContext->nn_input_buffer = NULL;
  #else
  AIContext->nn_input_buffer = ai_fp_global_memory + AI_ACTIVATION_BUFFER_SIZE;
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 8017c84:	4a08      	ldr	r2, [pc, #32]	; (8017ca8 <Init_DataMemoryLayout+0x24>)
  AiContext_TypeDef *AIContext = App_Context_Ptr->Ai_ContextPtr;
 8017c86:	6b81      	ldr	r1, [r0, #56]	; 0x38
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8017c88:	f502 3316 	add.w	r3, r2, #153600	; 0x25800
{
 8017c8c:	b470      	push	{r4, r5, r6}
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 8017c8e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
  #else /* MEMORY_SCHEME == FULL_EXTERNAL */
  /* Bottom camera_frame_buff buffer and resize_output_buff buffer */
  #define  RESIZE_OUTPUT_BUFFER_OFFSET (CAM_FRAME_BUFFER_SIZE - RESIZE_OUTPUT_BUFFER_SIZE)
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 8017c90:	f502 2686 	add.w	r6, r2, #274432	; 0x43000
  AIContext->activation_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  #ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
  AIContext->nn_input_buffer = NULL;
 8017c94:	2500      	movs	r5, #0
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8017c96:	e9c4 2300 	strd	r2, r3, [r4]
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8017c9a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 8017c9c:	6496      	str	r6, [r2, #72]	; 0x48
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 8017c9e:	6293      	str	r3, [r2, #40]	; 0x28
  AIContext->nn_input_buffer = NULL;
 8017ca0:	e9c1 5301 	strd	r5, r3, [r1, #4]
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
  #endif /* MEMORY_SCHEME == SPLIT_INT_EXT */
#else
  #error "Please check definition of MEMORY_SCHEME define"
#endif /* MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT */
}
 8017ca4:	bc70      	pop	{r4, r5, r6}
 8017ca6:	4770      	bx	lr
 8017ca8:	24000000 	.word	0x24000000

08017cac <Run_Preprocessing>:
    /*********************************************************************************************/
    UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer), CAM_FRAME_BUFFER_SIZE, INVALIDATE);
  }
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8017cac:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8017cae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8017cb2:	6859      	ldr	r1, [r3, #4]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 8017cb4:	f44f 3316 	mov.w	r3, #153600	; 0x25800
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8017cb8:	6b44      	ldr	r4, [r0, #52]	; 0x34
{
 8017cba:	4605      	mov	r5, r0
  PreprocContext_TypeDef* PreprocCtxt_Ptr=App_Context_Ptr->Preproc_ContextPtr;
 8017cbc:	6a86      	ldr	r6, [r0, #40]	; 0x28
  TestRunCtxt_Ptr->PerformCapture=1;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
  TestRunCtxt_Ptr->rb_swap=0;
 8017cbe:	2700      	movs	r7, #0
  TestRunCtxt_Ptr->PerformCapture=1;
 8017cc0:	f04f 0901 	mov.w	r9, #1
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 8017cc4:	f04f 0b02 	mov.w	fp, #2
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 8017cc8:	f8c4 35ac 	str.w	r3, [r4, #1452]	; 0x5ac
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 8017ccc:	f44f 7aa0 	mov.w	sl, #320	; 0x140
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 8017cd0:	4b60      	ldr	r3, [pc, #384]	; (8017e54 <Run_Preprocessing+0x1a8>)
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 8017cd2:	f04f 08f0 	mov.w	r8, #240	; 0xf0
{
 8017cd6:	b083      	sub	sp, #12
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 8017cd8:	f8c4 a5a0 	str.w	sl, [r4, #1440]	; 0x5a0
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 8017cdc:	f8c4 359c 	str.w	r3, [r4, #1436]	; 0x59c
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017ce0:	4620      	mov	r0, r4
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 8017ce2:	f8c4 85a4 	str.w	r8, [r4, #1444]	; 0x5a4
  TestRunCtxt_Ptr->PerformCapture=1;
 8017ce6:	f8c4 95b0 	str.w	r9, [r4, #1456]	; 0x5b0
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8017cea:	f884 95b4 	strb.w	r9, [r4, #1460]	; 0x5b4
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8017cee:	f8c4 1598 	str.w	r1, [r4, #1432]	; 0x598
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 8017cf2:	f8c4 b5a8 	str.w	fp, [r4, #1448]	; 0x5a8
  TestRunCtxt_Ptr->rb_swap=0;
 8017cf6:	f8c4 75b8 	str.w	r7, [r4, #1464]	; 0x5b8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017cfa:	7829      	ldrb	r1, [r5, #0]
 8017cfc:	f7ec f866 	bl	8003dcc <TEST_Run>
  
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017d00:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017d02:	f7ed f87f 	bl	8004e04 <UTILS_GetTimeStamp>
  
  /**********************/
  /****Image resizing****/
  /**********************/
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8017d06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017d08:	9000      	str	r0, [sp, #0]
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8017d0a:	685b      	ldr	r3, [r3, #4]
  PreprocCtxt_Ptr->Resize_Src_Img.w=CAM_RES_WIDTH;
  PreprocCtxt_Ptr->Resize_Src_Img.h=CAM_RES_HEIGHT;
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8017d0c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  PreprocCtxt_Ptr->Resize_Src_Img.h=CAM_RES_HEIGHT;
 8017d0e:	e9c6 a80b 	strd	sl, r8, [r6, #44]	; 0x2c
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
 8017d12:	e9c6 b30d 	strd	fp, r3, [r6, #52]	; 0x34
  PreprocCtxt_Ptr->Resize_Dst_Img.w=AI_NETWORK_WIDTH;
 8017d16:	f04f 0880 	mov.w	r8, #128	; 0x80
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8017d1a:	6c83      	ldr	r3, [r0, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Dst_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Resize_Dst_Img.bpp=IMAGE_BPP_RGB565;
 8017d1c:	f8c6 b044 	str.w	fp, [r6, #68]	; 0x44
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8017d20:	64b3      	str	r3, [r6, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Dst_Img.h=AI_NETWORK_HEIGHT;
 8017d22:	e9c6 880f 	strd	r8, r8, [r6, #60]	; 0x3c
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 8017d26:	f7e9 fe25 	bl	8001974 <PREPROC_ImageResize>
  
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017d2a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017d2c:	f7ed f86a 	bl	8004e04 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC
  /******************************************************************************************/
  /****Coherency purpose: clean the source buffer area in L1 D-Cache before DMA2D reading****/
  /******************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 8017d30:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8017d32:	465a      	mov	r2, fp
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017d34:	4682      	mov	sl, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 8017d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8017d3a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8017d3c:	f7ed f910 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 8017d40:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8017d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8017d44:	f884 95b4 	strb.w	r9, [r4, #1460]	; 0x5b4
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 8017d48:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 8017d4c:	4b41      	ldr	r3, [pc, #260]	; (8017e54 <Run_Preprocessing+0x1a8>)
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8017d4e:	f8c4 85a0 	str.w	r8, [r4, #1440]	; 0x5a0
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 8017d52:	3320      	adds	r3, #32
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8017d54:	f8c4 85a4 	str.w	r8, [r4, #1444]	; 0x5a4
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017d58:	6b68      	ldr	r0, [r5, #52]	; 0x34
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 8017d5a:	f8c4 359c 	str.w	r3, [r4, #1436]	; 0x59c
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 8017d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 8017d62:	f8c4 b5a8 	str.w	fp, [r4, #1448]	; 0x5a8
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 8017d66:	f8c4 35ac 	str.w	r3, [r4, #1452]	; 0x5ac
  TestRunCtxt_Ptr->PerformCapture=0;
 8017d6a:	f8c4 75b0 	str.w	r7, [r4, #1456]	; 0x5b0
  TestRunCtxt_Ptr->rb_swap=0;
 8017d6e:	f8c4 75b8 	str.w	r7, [r4, #1464]	; 0x5b8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017d72:	7829      	ldrb	r1, [r5, #0]
 8017d74:	f7ec f82a 	bl	8003dcc <TEST_Run>
  
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017d78:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017d7a:	f7ed f843 	bl	8004e04 <UTILS_GetTimeStamp>
 8017d7e:	9001      	str	r0, [sp, #4]
  
  /*************************************/
  /****Image Pixel Format Conversion****/
  /*************************************/
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8017d80:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017d82:	6c81      	ldr	r1, [r0, #72]	; 0x48
  PreprocCtxt_Ptr->Pfc_Src_Img.w=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->Pfc_Src_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Pfc_Src_Img.bpp=IMAGE_BPP_RGB565;
  PreprocCtxt_Ptr->Pfc_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data;
 8017d84:	6a82      	ldr	r2, [r0, #40]	; 0x28
  PreprocCtxt_Ptr->Pfc_Dst_Img.w=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->Pfc_Dst_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Dma2dcfg.x=0;
  PreprocCtxt_Ptr->Dma2dcfg.y=0;
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->red_blue_swap=1;
 8017d86:	f8c6 9008 	str.w	r9, [r6, #8]
  PreprocCtxt_Ptr->Pfc_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data;
 8017d8a:	62b2      	str	r2, [r6, #40]	; 0x28
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8017d8c:	e9c6 b105 	strd	fp, r1, [r6, #20]
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=AI_NETWORK_WIDTH;
 8017d90:	e9c6 7800 	strd	r7, r8, [r6]
  PreprocCtxt_Ptr->Pfc_Src_Img.h=AI_NETWORK_HEIGHT;
 8017d94:	e9c6 8803 	strd	r8, r8, [r6, #12]
  PreprocCtxt_Ptr->Pfc_Dst_Img.h=AI_NETWORK_HEIGHT;
 8017d98:	e9c6 8807 	strd	r8, r8, [r6, #28]
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 8017d9c:	f7e9 fdfe 	bl	800199c <PREPROC_PixelFormatConversion>
  
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017da0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017da2:	f7ed f82f 	bl	8004e04 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC 
  /**************************************************************************************/
  /****Coherency purpose: invalidate the source area in L1 D-Cache before CPU reading****/  
  /**************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data), 
 8017da6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017da8:	4606      	mov	r6, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data), 
 8017daa:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8017dae:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8017db0:	464a      	mov	r2, r9
 8017db2:	f7ed f8d5 	bl	8004f60 <UTILS_DCache_Coherency_Maintenance>
                                     PFC_OUTPUT_BUFFER_SIZE, 
                                     INVALIDATE);
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 8017db6:	4b27      	ldr	r3, [pc, #156]	; (8017e54 <Run_Preprocessing+0x1a8>)
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 8017db8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 8017dba:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 8017dbe:	f103 0240 	add.w	r2, r3, #64	; 0x40
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 8017dc2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 8017dc4:	f8c4 259c 	str.w	r2, [r4, #1436]	; 0x59c
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
 8017dc8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 8017dca:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
 8017dce:	f8c4 25a8 	str.w	r2, [r4, #1448]	; 0x5a8
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8017dd2:	f884 95b4 	strb.w	r9, [r4, #1460]	; 0x5b4
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 8017dd6:	f8c4 05ac 	str.w	r0, [r4, #1452]	; 0x5ac
  TestRunCtxt_Ptr->rb_swap=1;
 8017dda:	f8c4 95b8 	str.w	r9, [r4, #1464]	; 0x5b8
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8017dde:	f8c4 85a0 	str.w	r8, [r4, #1440]	; 0x5a0
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8017de2:	f8c4 85a4 	str.w	r8, [r4, #1444]	; 0x5a4
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017de6:	6b68      	ldr	r0, [r5, #52]	; 0x34
  TestRunCtxt_Ptr->PerformCapture=0;
 8017de8:	f8c4 75b0 	str.w	r7, [r4, #1456]	; 0x5b0
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017dec:	7829      	ldrb	r1, [r5, #0]
 8017dee:	f7eb ffed 	bl	8003dcc <TEST_Run>

  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017df2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017df4:	f7ed f806 	bl	8004e04 <UTILS_GetTimeStamp>
#ifdef OBJECTDETECT
  AI_PixelValueConversion(App_Context_Ptr->People_ContextPtr,
                                      (void*)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data));
#else
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr,
                                      (void*)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data));
 8017df8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017dfa:	4681      	mov	r9, r0
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr,
 8017dfc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8017dfe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8017e00:	f7e8 feb2 	bl	8000b68 <AI_PixelValueConversion>
#endif /* OBJECTDETECT */

  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017e04:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017e06:	f7ec fffd 	bl	8004e04 <UTILS_GetTimeStamp>
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
  TestRunCtxt_Ptr->src_buff_name="";
 8017e0a:	4a13      	ldr	r2, [pc, #76]	; (8017e58 <Run_Preprocessing+0x1ac>)
  TestRunCtxt_Ptr->src_width_size=0;
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=0;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 8017e0c:	f884 75b4 	strb.w	r7, [r4, #1460]	; 0x5b4
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8017e10:	4680      	mov	r8, r0
  TestRunCtxt_Ptr->src_buff_name="";
 8017e12:	f8c4 259c 	str.w	r2, [r4, #1436]	; 0x59c
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017e16:	6b68      	ldr	r0, [r5, #52]	; 0x34
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
 8017e18:	f8c4 7598 	str.w	r7, [r4, #1432]	; 0x598
  TestRunCtxt_Ptr->src_width_size=0;
 8017e1c:	f8c4 75a0 	str.w	r7, [r4, #1440]	; 0x5a0
  TestRunCtxt_Ptr->src_height_size=0;
 8017e20:	f8c4 75a4 	str.w	r7, [r4, #1444]	; 0x5a4
  TestRunCtxt_Ptr->src_size=0;
 8017e24:	f8c4 75ac 	str.w	r7, [r4, #1452]	; 0x5ac
  TestRunCtxt_Ptr->PerformCapture=0;
 8017e28:	f8c4 75b0 	str.w	r7, [r4, #1456]	; 0x5b0
  TestRunCtxt_Ptr->rb_swap=0;
 8017e2c:	f8c4 75b8 	str.w	r7, [r4, #1464]	; 0x5b8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8017e30:	7829      	ldrb	r1, [r5, #0]
 8017e32:	f7eb ffcb 	bl	8003dcc <TEST_Run>
  
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 8017e36:	9a00      	ldr	r2, [sp, #0]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 8017e38:	9b01      	ldr	r3, [sp, #4]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 8017e3a:	eba8 0009 	sub.w	r0, r8, r9
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 8017e3e:	ebaa 0102 	sub.w	r1, sl, r2
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 8017e42:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017e44:	1af3      	subs	r3, r6, r3
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 8017e46:	6051      	str	r1, [r2, #4]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 8017e48:	6093      	str	r3, [r2, #8]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 8017e4a:	60d0      	str	r0, [r2, #12]
}
 8017e4c:	b003      	add	sp, #12
 8017e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e52:	bf00      	nop
 8017e54:	2000001c 	.word	0x2000001c
 8017e58:	08025e00 	.word	0x08025e00

08017e5c <Image_CheckResizeMemoryLayout>:

bool Image_CheckResizeMemoryLayout(image_t *src_img, image_t *dst_img)
{
 8017e5c:	b570      	push	{r4, r5, r6, lr}
 8017e5e:	460c      	mov	r4, r1
 8017e60:	4606      	mov	r6, r0
  uint32_t src_size = STM32Ipl_ImageDataSize(src_img);
 8017e62:	f000 f84d 	bl	8017f00 <STM32Ipl_ImageDataSize>
 8017e66:	4605      	mov	r5, r0
  uint32_t dst_size = STM32Ipl_ImageDataSize(dst_img);
 8017e68:	4620      	mov	r0, r4
 8017e6a:	f000 f849 	bl	8017f00 <STM32Ipl_ImageDataSize>
  uint32_t src_start = (uint32_t)src_img->data;
  uint32_t dst_start = (uint32_t)dst_img->data;
  uint32_t src_end = src_start + src_size - 1;
 8017e6e:	68f2      	ldr	r2, [r6, #12]
  uint32_t dst_start = (uint32_t)dst_img->data;
 8017e70:	68e1      	ldr	r1, [r4, #12]
  uint32_t src_end = src_start + src_size - 1;
 8017e72:	3a01      	subs	r2, #1
 8017e74:	4415      	add	r5, r2
  uint32_t dst_end = dst_start + dst_size - 1;
 8017e76:	1e4a      	subs	r2, r1, #1
 8017e78:	4410      	add	r0, r2
  {
    reverse = false; /* ((src_start >= dst_start) || (src_end <= dst_start)) */
  }

  return reverse;
}
 8017e7a:	4285      	cmp	r5, r0
 8017e7c:	bf98      	it	ls
 8017e7e:	42a9      	cmpls	r1, r5
 8017e80:	bf34      	ite	cc
 8017e82:	2001      	movcc	r0, #1
 8017e84:	2000      	movcs	r0, #0
 8017e86:	bd70      	pop	{r4, r5, r6, pc}

08017e88 <STM32Ipl_InitLib>:
 * @param memAddr	Address of the memory buffer allocated to STM32IPL for its internal purposes.
 * @param memSize	Size of the memory buffer (bytes).
 * @return			void.
 */
void STM32Ipl_InitLib(void *memAddr, uint32_t memSize)
{
 8017e88:	b508      	push	{r3, lr}
	umm_init(memAddr, memSize);
 8017e8a:	f002 f82b 	bl	8019ee4 <umm_init>
	fb_init();
}
 8017e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	fb_init();
 8017e92:	f001 bdb9 	b.w	8019a08 <fb_init>
 8017e96:	bf00      	nop

08017e98 <STM32Ipl_Init>:
 * @param data		Pointer to the pixel data assigned to image.
 * @return			void.
 */
void STM32Ipl_Init(image_t *img, uint32_t width, uint32_t height, image_bpp_t format, void *data)
{
	if (img) {
 8017e98:	b120      	cbz	r0, 8017ea4 <STM32Ipl_Init+0xc>
		img->w = width;
		img->h = height;
		img->bpp = format;
 8017e9a:	6083      	str	r3, [r0, #8]
		img->data = data;
 8017e9c:	9b00      	ldr	r3, [sp, #0]
		img->h = height;
 8017e9e:	e9c0 1200 	strd	r1, r2, [r0]
		img->data = data;
 8017ea2:	60c3      	str	r3, [r0, #12]
	}
}
 8017ea4:	4770      	bx	lr
 8017ea6:	bf00      	nop

08017ea8 <STM32Ipl_ReleaseData>:
 * @param img	Image.
 * @return		void.
 */
void STM32Ipl_ReleaseData(image_t *img)
{
	if (img) {
 8017ea8:	b150      	cbz	r0, 8017ec0 <STM32Ipl_ReleaseData+0x18>
{
 8017eaa:	b510      	push	{r4, lr}
 8017eac:	4604      	mov	r4, r0
		xfree(img->data);
 8017eae:	68c0      	ldr	r0, [r0, #12]
 8017eb0:	f001 fda8 	bl	8019a04 <xfree>
		img->w = width;
 8017eb4:	2300      	movs	r3, #0
		img->h = height;
 8017eb6:	e9c4 3300 	strd	r3, r3, [r4]
		img->data = data;
 8017eba:	e9c4 3302 	strd	r3, r3, [r4, #8]
		STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
	}
}
 8017ebe:	bd10      	pop	{r4, pc}
 8017ec0:	4770      	bx	lr
 8017ec2:	bf00      	nop

08017ec4 <STM32Ipl_DataSize>:
 * @param height	Image height.
 * @param format	Image format.
 * @return			Size of the image data buffer (bytes), 0 in case of wrong/unsupported arguments.
 */
uint32_t STM32Ipl_DataSize(uint32_t width, uint32_t height, image_bpp_t format)
{
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	4608      	mov	r0, r1
	switch ((uint32_t)format) {
 8017ec8:	2a04      	cmp	r2, #4
 8017eca:	d817      	bhi.n	8017efc <STM32Ipl_DataSize+0x38>
 8017ecc:	e8df f002 	tbb	[pc, r2]
 8017ed0:	030d0306 	.word	0x030d0306
 8017ed4:	11          	.byte	0x11
 8017ed5:	00          	.byte	0x00
		case IMAGE_BPP_BINARY:
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);

		case IMAGE_BPP_GRAYSCALE:
			return width * height * sizeof(uint8_t);
 8017ed6:	fb03 f000 	mul.w	r0, r3, r0
 8017eda:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8017edc:	f103 021f 	add.w	r2, r3, #31
 8017ee0:	0952      	lsrs	r2, r2, #5
 8017ee2:	fb02 f000 	mul.w	r0, r2, r0
 8017ee6:	0080      	lsls	r0, r0, #2
 8017ee8:	4770      	bx	lr

		case IMAGE_BPP_RGB565:
			return width * height * sizeof(uint16_t);
 8017eea:	fb03 f000 	mul.w	r0, r3, r0
 8017eee:	0040      	lsls	r0, r0, #1
 8017ef0:	4770      	bx	lr

		case IMAGE_BPP_BAYER:
			return width * height * sizeof(uint8_t);

		case IMAGE_BPP_RGB888:
			return width * height * 3;
 8017ef2:	fb03 f000 	mul.w	r0, r3, r0
 8017ef6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017efa:	4770      	bx	lr
	switch ((uint32_t)format) {
 8017efc:	2000      	movs	r0, #0
	}

	return 0;
}
 8017efe:	4770      	bx	lr

08017f00 <STM32Ipl_ImageDataSize>:
 * @param img	Image.
 * @return		Size of the image data buffer (bytes), 0 in case of wrong/unsupported argument.
 */
uint32_t STM32Ipl_ImageDataSize(const image_t *img)
{
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 8017f00:	b150      	cbz	r0, 8017f18 <STM32Ipl_ImageDataSize+0x18>
	switch ((uint32_t)format) {
 8017f02:	7a02      	ldrb	r2, [r0, #8]
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 8017f04:	e9d0 3000 	ldrd	r3, r0, [r0]
	switch ((uint32_t)format) {
 8017f08:	2a04      	cmp	r2, #4
 8017f0a:	d804      	bhi.n	8017f16 <STM32Ipl_ImageDataSize+0x16>
 8017f0c:	e8df f002 	tbb	[pc, r2]
 8017f10:	050e0508 	.word	0x050e0508
 8017f14:	12          	.byte	0x12
 8017f15:	00          	.byte	0x00
 8017f16:	2000      	movs	r0, #0
}
 8017f18:	4770      	bx	lr
			return width * height * sizeof(uint8_t);
 8017f1a:	fb03 f000 	mul.w	r0, r3, r0
 8017f1e:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8017f20:	331f      	adds	r3, #31
 8017f22:	095b      	lsrs	r3, r3, #5
 8017f24:	fb03 f000 	mul.w	r0, r3, r0
 8017f28:	0080      	lsls	r0, r0, #2
 8017f2a:	4770      	bx	lr
			return width * height * sizeof(uint16_t);
 8017f2c:	fb03 f000 	mul.w	r0, r3, r0
 8017f30:	0040      	lsls	r0, r0, #1
 8017f32:	4770      	bx	lr
			return width * height * 3;
 8017f34:	fb03 f000 	mul.w	r0, r3, r0
 8017f38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017f3c:	4770      	bx	lr
 8017f3e:	bf00      	nop

08017f40 <STM32Ipl_ImageFormatSupported>:
 */
bool STM32Ipl_ImageFormatSupported(const image_t *img, uint32_t formats)
{
	stm32ipl_if_t format;

	switch (img->bpp) {
 8017f40:	6883      	ldr	r3, [r0, #8]
 8017f42:	2b04      	cmp	r3, #4
 8017f44:	d810      	bhi.n	8017f68 <STM32Ipl_ImageFormatSupported+0x28>
 8017f46:	e8df f003 	tbb	[pc, r3]
 8017f4a:	0d03      	.short	0x0d03
 8017f4c:	0f0b      	.short	0x0f0b
 8017f4e:	09          	.byte	0x09
 8017f4f:	00          	.byte	0x00
 8017f50:	2301      	movs	r3, #1

		default:
			return false;
	}

	return (format & formats);
 8017f52:	4219      	tst	r1, r3
 8017f54:	bf14      	ite	ne
 8017f56:	2001      	movne	r0, #1
 8017f58:	2000      	moveq	r0, #0
 8017f5a:	4770      	bx	lr
			break;
 8017f5c:	2308      	movs	r3, #8
 8017f5e:	e7f8      	b.n	8017f52 <STM32Ipl_ImageFormatSupported+0x12>
			break;
 8017f60:	2304      	movs	r3, #4
 8017f62:	e7f6      	b.n	8017f52 <STM32Ipl_ImageFormatSupported+0x12>
	switch (img->bpp) {
 8017f64:	2302      	movs	r3, #2
 8017f66:	e7f4      	b.n	8017f52 <STM32Ipl_ImageFormatSupported+0x12>
 8017f68:	2000      	movs	r0, #0
}
 8017f6a:	4770      	bx	lr

08017f6c <STM32Ipl_CopyData>:
 * @param dst   Destination image; if it is not valid, an error is returned.
 * @return		stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_CopyData(const image_t *src, image_t *dst)
{
	STM32IPL_CHECK_VALID_IMAGE(src)
 8017f6c:	2800      	cmp	r0, #0
 8017f6e:	d033      	beq.n	8017fd8 <STM32Ipl_CopyData+0x6c>
{
 8017f70:	b570      	push	{r4, r5, r6, lr}
	STM32IPL_CHECK_VALID_IMAGE(src)
 8017f72:	68c5      	ldr	r5, [r0, #12]
	STM32IPL_CHECK_VALID_IMAGE(dst)
 8017f74:	b36d      	cbz	r5, 8017fd2 <STM32Ipl_CopyData+0x66>
 8017f76:	b361      	cbz	r1, 8017fd2 <STM32Ipl_CopyData+0x66>
 8017f78:	68cc      	ldr	r4, [r1, #12]
 8017f7a:	b354      	cbz	r4, 8017fd2 <STM32Ipl_CopyData+0x66>
	STM32IPL_CHECK_SAME_SIZE(src, dst)
 8017f7c:	680b      	ldr	r3, [r1, #0]
 8017f7e:	6802      	ldr	r2, [r0, #0]
 8017f80:	429a      	cmp	r2, r3
 8017f82:	d126      	bne.n	8017fd2 <STM32Ipl_CopyData+0x66>
 8017f84:	684b      	ldr	r3, [r1, #4]
 8017f86:	6846      	ldr	r6, [r0, #4]
 8017f88:	429e      	cmp	r6, r3
 8017f8a:	d122      	bne.n	8017fd2 <STM32Ipl_CopyData+0x66>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 8017f8c:	6889      	ldr	r1, [r1, #8]
 8017f8e:	6883      	ldr	r3, [r0, #8]
 8017f90:	428b      	cmp	r3, r1
 8017f92:	d11e      	bne.n	8017fd2 <STM32Ipl_CopyData+0x66>
	switch ((uint32_t)format) {
 8017f94:	b2db      	uxtb	r3, r3
 8017f96:	2b04      	cmp	r3, #4
 8017f98:	d821      	bhi.n	8017fde <STM32Ipl_CopyData+0x72>
 8017f9a:	e8df f003 	tbb	[pc, r3]
 8017f9e:	030b      	.short	0x030b
 8017fa0:	0311      	.short	0x0311
 8017fa2:	15          	.byte	0x15
 8017fa3:	00          	.byte	0x00
			return width * height * sizeof(uint8_t);
 8017fa4:	fb06 f202 	mul.w	r2, r6, r2

	memcpy(dst->data, src->data, STM32Ipl_ImageDataSize(dst));
 8017fa8:	4629      	mov	r1, r5
 8017faa:	4620      	mov	r0, r4
 8017fac:	f00a f96e 	bl	802228c <memcpy>

	return stm32ipl_err_Ok;
 8017fb0:	2000      	movs	r0, #0
}
 8017fb2:	bd70      	pop	{r4, r5, r6, pc}
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8017fb4:	321f      	adds	r2, #31
 8017fb6:	0952      	lsrs	r2, r2, #5
 8017fb8:	fb06 f202 	mul.w	r2, r6, r2
 8017fbc:	0092      	lsls	r2, r2, #2
 8017fbe:	e7f3      	b.n	8017fa8 <STM32Ipl_CopyData+0x3c>
			return width * height * sizeof(uint16_t);
 8017fc0:	fb06 f202 	mul.w	r2, r6, r2
 8017fc4:	0052      	lsls	r2, r2, #1
 8017fc6:	e7ef      	b.n	8017fa8 <STM32Ipl_CopyData+0x3c>
			return width * height * 3;
 8017fc8:	fb06 f202 	mul.w	r2, r6, r2
 8017fcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017fd0:	e7ea      	b.n	8017fa8 <STM32Ipl_CopyData+0x3c>
	STM32IPL_CHECK_VALID_IMAGE(src)
 8017fd2:	f06f 0001 	mvn.w	r0, #1
}
 8017fd6:	bd70      	pop	{r4, r5, r6, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 8017fd8:	f06f 0001 	mvn.w	r0, #1
}
 8017fdc:	4770      	bx	lr
	switch ((uint32_t)format) {
 8017fde:	2200      	movs	r2, #0
 8017fe0:	e7e2      	b.n	8017fa8 <STM32Ipl_CopyData+0x3c>
 8017fe2:	bf00      	nop

08017fe4 <writeBmpHeader>:
 * paletteColorUsed	The number of palette items used.
 * return stm32ipl_err_Ok on success, errors otherwise.
 */
static stm32ipl_err_t writeBmpHeader(FIL *fp, uint32_t width, uint32_t height, uint32_t dataOffset, uint32_t lineSize,
		uint32_t bitsPP, uint32_t compression, uint32_t paletteColorUsed)
{
 8017fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fe8:	b090      	sub	sp, #64	; 0x40
 8017fea:	4614      	mov	r4, r2
 8017fec:	460d      	mov	r5, r1
 8017fee:	4606      	mov	r6, r0
	uint8_t header[54];
	uint32_t fileSize;
	uint32_t imageSize;
	UINT bytesWritten;

	memset(&header, 0, 54);
 8017ff0:	2232      	movs	r2, #50	; 0x32
 8017ff2:	2100      	movs	r1, #0
 8017ff4:	a803      	add	r0, sp, #12
{
 8017ff6:	4698      	mov	r8, r3
 8017ff8:	9f19      	ldr	r7, [sp, #100]	; 0x64
	memset(&header, 0, 54);
 8017ffa:	f00a f96f 	bl	80222dc <memset>

	/* biPlanes. */
	header[26] = 1;

	/* biBitCount. */
	header[28] = (uint8_t)((bitsPP & 0XFF));
 8017ffe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	header[49] = (uint8_t)((paletteColorUsed >> 24) & 0xFF);

	/* biClrImportant. */
	//header[50] = 0;
	/* Write header */
	res = f_write(fp, header, 14, &bytesWritten);
 8018000:	a902      	add	r1, sp, #8
	header[46] = (uint8_t)((paletteColorUsed & 0XFF));
 8018002:	f88d 7036 	strb.w	r7, [sp, #54]	; 0x36
	header[47] = (uint8_t)((paletteColorUsed >> 8) & 0xFF);
 8018006:	0a3f      	lsrs	r7, r7, #8
	header[28] = (uint8_t)((bitsPP & 0XFF));
 8018008:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	header[30] = (uint8_t)compression;
 801800c:	9b18      	ldr	r3, [sp, #96]	; 0x60
	header[10] = (uint8_t)((dataOffset & 0XFF));
 801800e:	f88d 8012 	strb.w	r8, [sp, #18]
	header[30] = (uint8_t)compression;
 8018012:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	imageSize = lineSize * height;
 8018016:	9b16      	ldr	r3, [sp, #88]	; 0x58
	header[18] = (uint8_t)((width & 0XFF));
 8018018:	f88d 501a 	strb.w	r5, [sp, #26]
	imageSize = lineSize * height;
 801801c:	fb04 f203 	mul.w	r2, r4, r3
	header[22] = (uint8_t)((height & 0XFF));
 8018020:	f88d 401e 	strb.w	r4, [sp, #30]
	fileSize = dataOffset + imageSize;
 8018024:	eb02 0008 	add.w	r0, r2, r8
	header[34] = (uint8_t)((imageSize & 0XFF));
 8018028:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
	header[47] = (uint8_t)((paletteColorUsed >> 8) & 0xFF);
 801802c:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
	header[11] = (uint8_t)((dataOffset >> 8) & 0XFF);
 8018030:	ea4f 2818 	mov.w	r8, r8, lsr #8
	header[3] = (uint8_t)((fileSize >> 8) & 0XFF);
 8018034:	0a03      	lsrs	r3, r0, #8
	header[2] = (uint8_t)((fileSize & 0XFF));
 8018036:	f88d 000a 	strb.w	r0, [sp, #10]
	header[14] = 40;
 801803a:	2728      	movs	r7, #40	; 0x28
	header[11] = (uint8_t)((dataOffset >> 8) & 0XFF);
 801803c:	f88d 8013 	strb.w	r8, [sp, #19]
	header[3] = (uint8_t)((fileSize >> 8) & 0XFF);
 8018040:	f88d 300b 	strb.w	r3, [sp, #11]
	header[4] = (uint8_t)((fileSize >> 16) & 0xFF);
 8018044:	0c03      	lsrs	r3, r0, #16
	header[5] = (uint8_t)((fileSize >> 24) & 0xFF);
 8018046:	0e00      	lsrs	r0, r0, #24
	header[14] = 40;
 8018048:	f88d 7016 	strb.w	r7, [sp, #22]
	header[4] = (uint8_t)((fileSize >> 16) & 0xFF);
 801804c:	f88d 300c 	strb.w	r3, [sp, #12]
	header[35] = (uint8_t)((imageSize >> 8) & 0xFF);
 8018050:	0a13      	lsrs	r3, r2, #8
	header[5] = (uint8_t)((fileSize >> 24) & 0xFF);
 8018052:	f88d 000d 	strb.w	r0, [sp, #13]
	res = f_write(fp, header, 14, &bytesWritten);
 8018056:	4630      	mov	r0, r6
	header[35] = (uint8_t)((imageSize >> 8) & 0xFF);
 8018058:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	header[36] = (uint8_t)((imageSize >> 16) & 0xFF);
 801805c:	0c13      	lsrs	r3, r2, #16
	header[37] = (uint8_t)((imageSize >> 24) & 0xFF);
 801805e:	0e12      	lsrs	r2, r2, #24
	header[36] = (uint8_t)((imageSize >> 16) & 0xFF);
 8018060:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	header[38] = (uint8_t)((2835 & 0XFF));
 8018064:	2313      	movs	r3, #19
	header[37] = (uint8_t)((imageSize >> 24) & 0xFF);
 8018066:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
	res = f_write(fp, header, 14, &bytesWritten);
 801806a:	220e      	movs	r2, #14
	header[38] = (uint8_t)((2835 & 0XFF));
 801806c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	header[42] = (uint8_t)((2835 & 0XFF));
 8018070:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	header[39] = (uint8_t)((2835 >> 8) & 0xFF);
 8018074:	230b      	movs	r3, #11
 8018076:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	header[43] = (uint8_t)((2835 >> 8) & 0xFF);
 801807a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	header[0] = 'B';
 801807e:	2342      	movs	r3, #66	; 0x42
 8018080:	f88d 3008 	strb.w	r3, [sp, #8]
	header[1] = 'M';
 8018084:	234d      	movs	r3, #77	; 0x4d
 8018086:	f88d 3009 	strb.w	r3, [sp, #9]
	header[19] = (uint8_t)((width >> 8) & 0xFF);
 801808a:	0a2b      	lsrs	r3, r5, #8
 801808c:	f88d 301b 	strb.w	r3, [sp, #27]
	header[20] = (uint8_t)((width >> 16) & 0xFF);
 8018090:	0c2b      	lsrs	r3, r5, #16
	header[21] = (uint8_t)((width >> 24) & 0xFF);
 8018092:	0e2d      	lsrs	r5, r5, #24
	header[20] = (uint8_t)((width >> 16) & 0xFF);
 8018094:	f88d 301c 	strb.w	r3, [sp, #28]
	header[23] = (uint8_t)((height >> 8) & 0xFF);
 8018098:	0a23      	lsrs	r3, r4, #8
	header[21] = (uint8_t)((width >> 24) & 0xFF);
 801809a:	f88d 501d 	strb.w	r5, [sp, #29]
	header[23] = (uint8_t)((height >> 8) & 0xFF);
 801809e:	f88d 301f 	strb.w	r3, [sp, #31]
	header[24] = (uint8_t)((height >> 16) & 0xFF);
 80180a2:	0c23      	lsrs	r3, r4, #16
	header[25] = (uint8_t)((height >> 24) & 0xFF);
 80180a4:	0e24      	lsrs	r4, r4, #24
	header[24] = (uint8_t)((height >> 16) & 0xFF);
 80180a6:	f88d 3020 	strb.w	r3, [sp, #32]
	header[26] = 1;
 80180aa:	2301      	movs	r3, #1
	header[25] = (uint8_t)((height >> 24) & 0xFF);
 80180ac:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
	header[26] = 1;
 80180b0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	res = f_write(fp, header, 14, &bytesWritten);
 80180b4:	ab01      	add	r3, sp, #4
 80180b6:	f7fe fc55 	bl	8016964 <f_write>
	if (res != FR_OK || bytesWritten != 14)
 80180ba:	b980      	cbnz	r0, 80180de <writeBmpHeader+0xfa>
 80180bc:	9b01      	ldr	r3, [sp, #4]
 80180be:	2b0e      	cmp	r3, #14
 80180c0:	d10d      	bne.n	80180de <writeBmpHeader+0xfa>
		return stm32ipl_err_WritingFile;

	res = f_write(fp, header + 14, 40, &bytesWritten);
 80180c2:	ab01      	add	r3, sp, #4
 80180c4:	463a      	mov	r2, r7
 80180c6:	f10d 0116 	add.w	r1, sp, #22
 80180ca:	4630      	mov	r0, r6
 80180cc:	f7fe fc4a 	bl	8016964 <f_write>
	if (res != FR_OK || bytesWritten != 40)
 80180d0:	b928      	cbnz	r0, 80180de <writeBmpHeader+0xfa>
 80180d2:	9b01      	ldr	r3, [sp, #4]
 80180d4:	42bb      	cmp	r3, r7
 80180d6:	d102      	bne.n	80180de <writeBmpHeader+0xfa>
		return stm32ipl_err_WritingFile;

	return stm32ipl_err_Ok;
}
 80180d8:	b010      	add	sp, #64	; 0x40
 80180da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return stm32ipl_err_WritingFile;
 80180de:	f06f 0008 	mvn.w	r0, #8
 80180e2:	e7f9      	b.n	80180d8 <writeBmpHeader+0xf4>

080180e4 <saveBmp>:
 * img		Image to be saved.
 * filename	Name of the output file.
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
static stm32ipl_err_t saveBmp(const image_t *img, const char *filename)
{
 80180e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180e8:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 80180ec:	4605      	mov	r5, r0
	UINT bytesWritten;

	width = img->w;
	height = img->h;

	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 80180ee:	220a      	movs	r2, #10
 80180f0:	a808      	add	r0, sp, #32
	height = img->h;
 80180f2:	e9d5 6900 	ldrd	r6, r9, [r5]
	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 80180f6:	f7fe f931 	bl	801635c <f_open>
 80180fa:	2800      	cmp	r0, #0
 80180fc:	f040 81a5 	bne.w	801844a <saveBmp+0x366>
		return stm32ipl_err_OpeningFile;

	switch (img->bpp) {
 8018100:	68ab      	ldr	r3, [r5, #8]
 8018102:	2b04      	cmp	r3, #4
 8018104:	f200 815d 	bhi.w	80183c2 <saveBmp+0x2de>
 8018108:	e8df f013 	tbh	[pc, r3, lsl #1]
 801810c:	00b20048 	.word	0x00b20048
 8018110:	015b00e9 	.word	0x015b00e9
 8018114:	0005      	.short	0x0005

			break;
		}

		case IMAGE_BPP_RGB888: {
			uint32_t dataLen = width * 3;
 8018116:	eb06 0846 	add.w	r8, r6, r6, lsl #1
			lineSize = (((width * 24) + 31) / 32) * 4;
			padding = lineSize - dataLen;

			/* Header. */
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 801811a:	2300      	movs	r3, #0
 801811c:	4631      	mov	r1, r6
 801811e:	464a      	mov	r2, r9
			lineSize = (((width * 24) + 31) / 32) * 4;
 8018120:	ea4f 07c8 	mov.w	r7, r8, lsl #3
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 8018124:	a808      	add	r0, sp, #32
			lineSize = (((width * 24) + 31) / 32) * 4;
 8018126:	371f      	adds	r7, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 8018128:	e9cd 3302 	strd	r3, r3, [sp, #8]
			lineSize = (((width * 24) + 31) / 32) * 4;
 801812c:	097f      	lsrs	r7, r7, #5
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 801812e:	2318      	movs	r3, #24
 8018130:	9301      	str	r3, [sp, #4]
			lineSize = (((width * 24) + 31) / 32) * 4;
 8018132:	00bb      	lsls	r3, r7, #2
			padding = lineSize - dataLen;
 8018134:	ebc8 0787 	rsb	r7, r8, r7, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 8018138:	9300      	str	r3, [sp, #0]
 801813a:	2336      	movs	r3, #54	; 0x36
 801813c:	f7ff ff52 	bl	8017fe4 <writeBmpHeader>
 8018140:	bb18      	cbnz	r0, 801818a <saveBmp+0xa6>
				f_close(&fp);
				return stm32ipl_err_WritingFile;
			}

			for (int32_t i = height - 1; i >= 0; i--) {
 8018142:	f1b9 0601 	subs.w	r6, r9, #1
 8018146:	f100 808e 	bmi.w	8018266 <saveBmp+0x182>
 801814a:	fb08 f906 	mul.w	r9, r8, r6
 801814e:	f10d 0a18 	add.w	sl, sp, #24
				uint8_t *data = img->data + i * dataLen;
 8018152:	68e9      	ldr	r1, [r5, #12]

				/* Image data. */
				res = f_write(&fp, data, dataLen, &bytesWritten);
 8018154:	4653      	mov	r3, sl
 8018156:	4642      	mov	r2, r8
 8018158:	a808      	add	r0, sp, #32
 801815a:	4449      	add	r1, r9
 801815c:	f7fe fc02 	bl	8016964 <f_write>
				if (res != FR_OK || bytesWritten != dataLen) {
 8018160:	b998      	cbnz	r0, 801818a <saveBmp+0xa6>
 8018162:	f8da 3000 	ldr.w	r3, [sl]
 8018166:	4543      	cmp	r3, r8
 8018168:	d10f      	bne.n	801818a <saveBmp+0xa6>
					f_close(&fp);
					return stm32ipl_err_WritingFile;
				}

				/* Padding. */
				for (uint32_t j = 0; j < padding; j++) {
 801816a:	2f00      	cmp	r7, #0
 801816c:	f000 8132 	beq.w	80183d4 <saveBmp+0x2f0>
 8018170:	4604      	mov	r4, r0
 8018172:	e002      	b.n	801817a <saveBmp+0x96>
 8018174:	42a7      	cmp	r7, r4
 8018176:	f000 812d 	beq.w	80183d4 <saveBmp+0x2f0>
					if (1 != f_putc(0, &fp)) {
 801817a:	a908      	add	r1, sp, #32
 801817c:	2000      	movs	r0, #0
 801817e:	f7ff fa15 	bl	80175ac <f_putc>
 8018182:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 8018184:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 8018188:	d0f4      	beq.n	8018174 <saveBmp+0x90>
				f_close(&fp);
 801818a:	a808      	add	r0, sp, #32
 801818c:	f7fe fd40 	bl	8016c10 <f_close>
				return stm32ipl_err_WritingFile;
 8018190:	f06f 0008 	mvn.w	r0, #8
	};

	f_close(&fp);

	return stm32ipl_err_Ok;
}
 8018194:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8018198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint32_t palette = 0;
 801819c:	2300      	movs	r3, #0
			lineSize = (((width) + 31) / 32) * 4;
 801819e:	f106 081f 	add.w	r8, r6, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 80181a2:	4631      	mov	r1, r6
 80181a4:	464a      	mov	r2, r9
			lineSize = (((width) + 31) / 32) * 4;
 80181a6:	ea4f 1858 	mov.w	r8, r8, lsr #5
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 80181aa:	9302      	str	r3, [sp, #8]
			uint32_t palette = 0;
 80181ac:	9307      	str	r3, [sp, #28]
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 80181ae:	2302      	movs	r3, #2
			lineSize = (((width) + 31) / 32) * 4;
 80181b0:	ea4f 0888 	mov.w	r8, r8, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 80181b4:	a808      	add	r0, sp, #32
 80181b6:	9303      	str	r3, [sp, #12]
 80181b8:	2301      	movs	r3, #1
 80181ba:	f8cd 8000 	str.w	r8, [sp]
 80181be:	9301      	str	r3, [sp, #4]
 80181c0:	233e      	movs	r3, #62	; 0x3e
 80181c2:	f7ff ff0f 	bl	8017fe4 <writeBmpHeader>
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d1df      	bne.n	801818a <saveBmp+0xa6>
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 80181ca:	f10d 0a18 	add.w	sl, sp, #24
 80181ce:	2204      	movs	r2, #4
 80181d0:	a907      	add	r1, sp, #28
 80181d2:	a808      	add	r0, sp, #32
 80181d4:	4653      	mov	r3, sl
 80181d6:	f7fe fbc5 	bl	8016964 <f_write>
			if (res != FR_OK || bytesWritten != sizeof(palette)) {
 80181da:	2800      	cmp	r0, #0
 80181dc:	d1d5      	bne.n	801818a <saveBmp+0xa6>
 80181de:	f8da 2000 	ldr.w	r2, [sl]
 80181e2:	2a04      	cmp	r2, #4
 80181e4:	d1d1      	bne.n	801818a <saveBmp+0xa6>
			palette = 0xFFFFFF;
 80181e6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 80181ea:	a907      	add	r1, sp, #28
 80181ec:	a808      	add	r0, sp, #32
			palette = 0xFFFFFF;
 80181ee:	9307      	str	r3, [sp, #28]
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 80181f0:	4653      	mov	r3, sl
 80181f2:	f7fe fbb7 	bl	8016964 <f_write>
			if (res != FR_OK || bytesWritten != sizeof(palette)) {
 80181f6:	2800      	cmp	r0, #0
 80181f8:	d1c7      	bne.n	801818a <saveBmp+0xa6>
 80181fa:	f8da 3000 	ldr.w	r3, [sl]
 80181fe:	2b04      	cmp	r3, #4
 8018200:	d1c3      	bne.n	801818a <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 8018202:	f1b9 0601 	subs.w	r6, r9, #1
 8018206:	d42e      	bmi.n	8018266 <saveBmp+0x182>
 8018208:	fb08 f906 	mul.w	r9, r8, r6
				uint8_t *srcData = img->data + offset;
 801820c:	68ec      	ldr	r4, [r5, #12]
				for (uint32_t j = 0; j < lineSize; j++) {
 801820e:	f1b8 0f00 	cmp.w	r8, #0
 8018212:	d023      	beq.n	801825c <saveBmp+0x178>
 8018214:	eb04 0708 	add.w	r7, r4, r8
 8018218:	444c      	add	r4, r9
 801821a:	444f      	add	r7, r9
					uint8_t dstData = reverse8(*(srcData + j));
 801821c:	f814 2b01 	ldrb.w	r2, [r4], #1
	int size = sizeof(val) * CHAR_BIT - 1;
 8018220:	2107      	movs	r1, #7
	for (val >>= 1; val; val >>= 1) {
 8018222:	0853      	lsrs	r3, r2, #1
 8018224:	d008      	beq.n	8018238 <saveBmp+0x154>
		rev |= val & 1;
 8018226:	f003 0001 	and.w	r0, r3, #1
	for (val >>= 1; val; val >>= 1) {
 801822a:	085b      	lsrs	r3, r3, #1
		size--;
 801822c:	f101 31ff 	add.w	r1, r1, #4294967295
		rev |= val & 1;
 8018230:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
 8018234:	b2d2      	uxtb	r2, r2
	for (val >>= 1; val; val >>= 1) {
 8018236:	d1f6      	bne.n	8018226 <saveBmp+0x142>
	rev <<= size;
 8018238:	408a      	lsls	r2, r1
					res = f_write(&fp, &dstData, 1, &bytesWritten);
 801823a:	4653      	mov	r3, sl
 801823c:	f10d 0117 	add.w	r1, sp, #23
 8018240:	a808      	add	r0, sp, #32
	rev <<= size;
 8018242:	f88d 2017 	strb.w	r2, [sp, #23]
					res = f_write(&fp, &dstData, 1, &bytesWritten);
 8018246:	2201      	movs	r2, #1
 8018248:	f7fe fb8c 	bl	8016964 <f_write>
					if (res != FR_OK || bytesWritten != 1) {
 801824c:	2800      	cmp	r0, #0
 801824e:	d19c      	bne.n	801818a <saveBmp+0xa6>
 8018250:	f8da 3000 	ldr.w	r3, [sl]
 8018254:	2b01      	cmp	r3, #1
 8018256:	d198      	bne.n	801818a <saveBmp+0xa6>
				for (uint32_t j = 0; j < lineSize; j++) {
 8018258:	42bc      	cmp	r4, r7
 801825a:	d1df      	bne.n	801821c <saveBmp+0x138>
			for (int32_t i = height - 1; i >= 0; i--) {
 801825c:	3e01      	subs	r6, #1
 801825e:	eba9 0908 	sub.w	r9, r9, r8
 8018262:	1c70      	adds	r0, r6, #1
 8018264:	d1d2      	bne.n	801820c <saveBmp+0x128>
	f_close(&fp);
 8018266:	a808      	add	r0, sp, #32
 8018268:	f7fe fcd2 	bl	8016c10 <f_close>
	return stm32ipl_err_Ok;
 801826c:	2000      	movs	r0, #0
 801826e:	e791      	b.n	8018194 <saveBmp+0xb0>
			lineSize = (((width * 8) + 31) / 32) * 4;
 8018270:	ea4f 08c6 	mov.w	r8, r6, lsl #3
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8018274:	2300      	movs	r3, #0
 8018276:	f44f 7180 	mov.w	r1, #256	; 0x100
 801827a:	464a      	mov	r2, r9
			lineSize = (((width * 8) + 31) / 32) * 4;
 801827c:	f108 081f 	add.w	r8, r8, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8018280:	a808      	add	r0, sp, #32
			lineSize = (((width * 8) + 31) / 32) * 4;
 8018282:	ea4f 1858 	mov.w	r8, r8, lsr #5
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8018286:	e9cd 3102 	strd	r3, r1, [sp, #8]
			lineSize = (((width * 8) + 31) / 32) * 4;
 801828a:	ea4f 0888 	mov.w	r8, r8, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 801828e:	2308      	movs	r3, #8
 8018290:	4631      	mov	r1, r6
 8018292:	9301      	str	r3, [sp, #4]
 8018294:	f240 4336 	movw	r3, #1078	; 0x436
 8018298:	f8cd 8000 	str.w	r8, [sp]
 801829c:	f7ff fea2 	bl	8017fe4 <writeBmpHeader>
 80182a0:	2800      	cmp	r0, #0
 80182a2:	f47f af72 	bne.w	801818a <saveBmp+0xa6>
			for (uint32_t i = 0; i < 256; i++) {
 80182a6:	4604      	mov	r4, r0
 80182a8:	f10d 0a18 	add.w	sl, sp, #24
 80182ac:	e008      	b.n	80182c0 <saveBmp+0x1dc>
				if (res != FR_OK || bytesWritten != 4) {
 80182ae:	f8da 3000 	ldr.w	r3, [sl]
 80182b2:	2b04      	cmp	r3, #4
 80182b4:	f47f af69 	bne.w	801818a <saveBmp+0xa6>
			for (uint32_t i = 0; i < 256; i++) {
 80182b8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80182bc:	f000 8098 	beq.w	80183f0 <saveBmp+0x30c>
				uint32_t value = (i << 16) | (i << 8) | i;
 80182c0:	0427      	lsls	r7, r4, #16
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 80182c2:	4653      	mov	r3, sl
 80182c4:	2204      	movs	r2, #4
 80182c6:	a907      	add	r1, sp, #28
				uint32_t value = (i << 16) | (i << 8) | i;
 80182c8:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 80182cc:	a808      	add	r0, sp, #32
				uint32_t value = (i << 16) | (i << 8) | i;
 80182ce:	4327      	orrs	r7, r4
			for (uint32_t i = 0; i < 256; i++) {
 80182d0:	3401      	adds	r4, #1
				uint32_t value = (i << 16) | (i << 8) | i;
 80182d2:	9707      	str	r7, [sp, #28]
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 80182d4:	f7fe fb46 	bl	8016964 <f_write>
				if (res != FR_OK || bytesWritten != 4) {
 80182d8:	2800      	cmp	r0, #0
 80182da:	d0e8      	beq.n	80182ae <saveBmp+0x1ca>
 80182dc:	e755      	b.n	801818a <saveBmp+0xa6>
			lineSize = (((width * 16) + 31) / 32) * 4;
 80182de:	0137      	lsls	r7, r6, #4
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80182e0:	2303      	movs	r3, #3
 80182e2:	2200      	movs	r2, #0
 80182e4:	4631      	mov	r1, r6
			lineSize = (((width * 16) + 31) / 32) * 4;
 80182e6:	371f      	adds	r7, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80182e8:	a808      	add	r0, sp, #32
			uint32_t dataLen = width << 1;
 80182ea:	ea4f 0b46 	mov.w	fp, r6, lsl #1
			lineSize = (((width * 16) + 31) / 32) * 4;
 80182ee:	097f      	lsrs	r7, r7, #5
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80182f0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			lineSize = (((width * 16) + 31) / 32) * 4;
 80182f4:	00bf      	lsls	r7, r7, #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 80182f6:	2310      	movs	r3, #16
 80182f8:	464a      	mov	r2, r9
 80182fa:	9700      	str	r7, [sp, #0]
			padding = lineSize - dataLen;
 80182fc:	eba7 0746 	sub.w	r7, r7, r6, lsl #1
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 8018300:	9301      	str	r3, [sp, #4]
 8018302:	2342      	movs	r3, #66	; 0x42
 8018304:	f7ff fe6e 	bl	8017fe4 <writeBmpHeader>
 8018308:	2800      	cmp	r0, #0
 801830a:	f47f af3e 	bne.w	801818a <saveBmp+0xa6>
			mask = 0xF800;
 801830e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018312:	f10d 0a18 	add.w	sl, sp, #24
 8018316:	2204      	movs	r2, #4
 8018318:	a907      	add	r1, sp, #28
			mask = 0xF800;
 801831a:	9307      	str	r3, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 801831c:	a808      	add	r0, sp, #32
 801831e:	4653      	mov	r3, sl
 8018320:	f7fe fb20 	bl	8016964 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 8018324:	2800      	cmp	r0, #0
 8018326:	f47f af30 	bne.w	801818a <saveBmp+0xa6>
 801832a:	f8da 2000 	ldr.w	r2, [sl]
 801832e:	2a04      	cmp	r2, #4
 8018330:	f47f af2b 	bne.w	801818a <saveBmp+0xa6>
			mask = 0x7E0;
 8018334:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018338:	a907      	add	r1, sp, #28
 801833a:	a808      	add	r0, sp, #32
			mask = 0x7E0;
 801833c:	9307      	str	r3, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 801833e:	4653      	mov	r3, sl
 8018340:	f7fe fb10 	bl	8016964 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 8018344:	2800      	cmp	r0, #0
 8018346:	f47f af20 	bne.w	801818a <saveBmp+0xa6>
 801834a:	f8da 2000 	ldr.w	r2, [sl]
 801834e:	2a04      	cmp	r2, #4
 8018350:	f47f af1b 	bne.w	801818a <saveBmp+0xa6>
			mask = 0x1F;
 8018354:	231f      	movs	r3, #31
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018356:	a907      	add	r1, sp, #28
 8018358:	a808      	add	r0, sp, #32
			mask = 0x1F;
 801835a:	9307      	str	r3, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 801835c:	4653      	mov	r3, sl
 801835e:	f7fe fb01 	bl	8016964 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 8018362:	2800      	cmp	r0, #0
 8018364:	f47f af11 	bne.w	801818a <saveBmp+0xa6>
 8018368:	f8da 3000 	ldr.w	r3, [sl]
 801836c:	2b04      	cmp	r3, #4
 801836e:	f47f af0c 	bne.w	801818a <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 8018372:	f1b9 0901 	subs.w	r9, r9, #1
 8018376:	f53f af76 	bmi.w	8018266 <saveBmp+0x182>
 801837a:	fb06 f809 	mul.w	r8, r6, r9
 801837e:	ebc6 73c6 	rsb	r3, r6, r6, lsl #31
 8018382:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018386:	005e      	lsls	r6, r3, #1
				res = f_write(&fp, ((uint16_t*)img->data) + offset, dataLen, &bytesWritten);
 8018388:	68e9      	ldr	r1, [r5, #12]
 801838a:	4653      	mov	r3, sl
 801838c:	465a      	mov	r2, fp
 801838e:	a808      	add	r0, sp, #32
 8018390:	4441      	add	r1, r8
 8018392:	f7fe fae7 	bl	8016964 <f_write>
				if (res != FR_OK || bytesWritten != dataLen) {
 8018396:	2800      	cmp	r0, #0
 8018398:	f47f aef7 	bne.w	801818a <saveBmp+0xa6>
 801839c:	f8da 3000 	ldr.w	r3, [sl]
 80183a0:	455b      	cmp	r3, fp
 80183a2:	f47f aef2 	bne.w	801818a <saveBmp+0xa6>
				for (uint32_t j = 0; j < padding; j++) {
 80183a6:	b1e7      	cbz	r7, 80183e2 <saveBmp+0x2fe>
 80183a8:	4604      	mov	r4, r0
 80183aa:	e001      	b.n	80183b0 <saveBmp+0x2cc>
 80183ac:	42a7      	cmp	r7, r4
 80183ae:	d018      	beq.n	80183e2 <saveBmp+0x2fe>
					if (1 != f_putc(0, &fp)) {
 80183b0:	a908      	add	r1, sp, #32
 80183b2:	2000      	movs	r0, #0
 80183b4:	f7ff f8fa 	bl	80175ac <f_putc>
 80183b8:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 80183ba:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 80183be:	d0f5      	beq.n	80183ac <saveBmp+0x2c8>
 80183c0:	e6e3      	b.n	801818a <saveBmp+0xa6>
			f_close(&fp);
 80183c2:	a808      	add	r0, sp, #32
 80183c4:	f7fe fc24 	bl	8016c10 <f_close>
			return stm32ipl_err_InvalidParameter;
 80183c8:	f06f 0001 	mvn.w	r0, #1
}
 80183cc:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 80183d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (int32_t i = height - 1; i >= 0; i--) {
 80183d4:	3e01      	subs	r6, #1
 80183d6:	eba9 0908 	sub.w	r9, r9, r8
 80183da:	1c73      	adds	r3, r6, #1
 80183dc:	f47f aeb9 	bne.w	8018152 <saveBmp+0x6e>
 80183e0:	e741      	b.n	8018266 <saveBmp+0x182>
			for (int32_t i = height - 1; i >= 0; i--) {
 80183e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80183e6:	44b0      	add	r8, r6
 80183e8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80183ec:	d1cc      	bne.n	8018388 <saveBmp+0x2a4>
 80183ee:	e73a      	b.n	8018266 <saveBmp+0x182>
			for (int32_t i = height - 1; i >= 0; i--) {
 80183f0:	f1b9 0901 	subs.w	r9, r9, #1
 80183f4:	f53f af37 	bmi.w	8018266 <saveBmp+0x182>
			padding = lineSize - width;
 80183f8:	eba8 0706 	sub.w	r7, r8, r6
 80183fc:	fb06 f809 	mul.w	r8, r6, r9
				res = f_write(&fp, img->data + offset, width, &bytesWritten);
 8018400:	68e9      	ldr	r1, [r5, #12]
 8018402:	4653      	mov	r3, sl
 8018404:	4632      	mov	r2, r6
 8018406:	a808      	add	r0, sp, #32
 8018408:	4441      	add	r1, r8
 801840a:	f7fe faab 	bl	8016964 <f_write>
				if (res != FR_OK || bytesWritten != width) {
 801840e:	2800      	cmp	r0, #0
 8018410:	f47f aebb 	bne.w	801818a <saveBmp+0xa6>
 8018414:	f8da 3000 	ldr.w	r3, [sl]
 8018418:	42b3      	cmp	r3, r6
 801841a:	f47f aeb6 	bne.w	801818a <saveBmp+0xa6>
				for (uint32_t j = 0; j < padding; j++) {
 801841e:	b167      	cbz	r7, 801843a <saveBmp+0x356>
 8018420:	4604      	mov	r4, r0
 8018422:	e001      	b.n	8018428 <saveBmp+0x344>
 8018424:	42a7      	cmp	r7, r4
 8018426:	d008      	beq.n	801843a <saveBmp+0x356>
					if (1 != f_putc(0, &fp)) {
 8018428:	a908      	add	r1, sp, #32
 801842a:	2000      	movs	r0, #0
 801842c:	f7ff f8be 	bl	80175ac <f_putc>
 8018430:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 8018432:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 8018436:	d0f5      	beq.n	8018424 <saveBmp+0x340>
 8018438:	e6a7      	b.n	801818a <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 801843a:	f109 39ff 	add.w	r9, r9, #4294967295
 801843e:	eba8 0806 	sub.w	r8, r8, r6
 8018442:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018446:	d1db      	bne.n	8018400 <saveBmp+0x31c>
 8018448:	e70d      	b.n	8018266 <saveBmp+0x182>
		return stm32ipl_err_OpeningFile;
 801844a:	f06f 0005 	mvn.w	r0, #5
 801844e:	e6a1      	b.n	8018194 <saveBmp+0xb0>

08018450 <savePnm>:
 * filename	Name of the output file.
 * format	Format of the PNM file (6 if the input image is RGB565 or RGB888, 5 if it's Grayscale).
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
static stm32ipl_err_t savePnm(const image_t *img, const char *filename, uint8_t format)
{
 8018450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char text[64];
	UINT bytesWritten;
	uint32_t offset;

	width = img->w;
	height = img->h;
 8018454:	e9d0 4900 	ldrd	r4, r9, [r0]
{
 8018458:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 801845c:	460d      	mov	r5, r1
 801845e:	4613      	mov	r3, r2

	/* Write header. */
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8018460:	2140      	movs	r1, #64	; 0x40
 8018462:	4a56      	ldr	r2, [pc, #344]	; (80185bc <savePnm+0x16c>)
{
 8018464:	4606      	mov	r6, r0
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8018466:	a804      	add	r0, sp, #16
 8018468:	e9cd 4900 	strd	r4, r9, [sp]
 801846c:	f00a fc72 	bl	8022d54 <sniprintf>

	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8018470:	4629      	mov	r1, r5
 8018472:	220a      	movs	r2, #10
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8018474:	4605      	mov	r5, r0
	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8018476:	a814      	add	r0, sp, #80	; 0x50
 8018478:	f7fd ff70 	bl	801635c <f_open>
 801847c:	2800      	cmp	r0, #0
 801847e:	f040 8099 	bne.w	80185b4 <savePnm+0x164>
		return stm32ipl_err_OpeningFile;

	res = f_write(&fp, text, size, &bytesWritten);
 8018482:	a904      	add	r1, sp, #16
 8018484:	462a      	mov	r2, r5
 8018486:	a814      	add	r0, sp, #80	; 0x50
 8018488:	ab03      	add	r3, sp, #12
 801848a:	f7fe fa6b 	bl	8016964 <f_write>
	if (res != FR_OK || bytesWritten != size) {
 801848e:	2800      	cmp	r0, #0
 8018490:	d147      	bne.n	8018522 <savePnm+0xd2>
 8018492:	9b03      	ldr	r3, [sp, #12]
 8018494:	42ab      	cmp	r3, r5
 8018496:	d144      	bne.n	8018522 <savePnm+0xd2>
		f_close(&fp);
		return stm32ipl_err_WritingFile;
	}

	switch (img->bpp) {
 8018498:	68b3      	ldr	r3, [r6, #8]
 801849a:	2b02      	cmp	r3, #2
 801849c:	d00c      	beq.n	80184b8 <savePnm+0x68>
 801849e:	2b04      	cmp	r3, #4
 80184a0:	d05d      	beq.n	801855e <savePnm+0x10e>
 80184a2:	2b01      	cmp	r3, #1
 80184a4:	d046      	beq.n	8018534 <savePnm+0xe4>

			break;
		}

		default: {
			f_close(&fp);
 80184a6:	a814      	add	r0, sp, #80	; 0x50
 80184a8:	f7fe fbb2 	bl	8016c10 <f_close>
			return stm32ipl_err_UnsupportedFormat;
 80184ac:	f06f 0004 	mvn.w	r0, #4
	}

	f_close(&fp);

	return stm32ipl_err_Ok;
}
 80184b0:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 80184b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (uint32_t i = 0; i < height; i++) {
 80184b8:	f1b9 0f00 	cmp.w	r9, #0
 80184bc:	d047      	beq.n	801854e <savePnm+0xfe>
				offset = i * width;
 80184be:	4680      	mov	r8, r0
			for (uint32_t i = 0; i < height; i++) {
 80184c0:	4682      	mov	sl, r0
				for (uint32_t j = 0; j < width; j++) {
 80184c2:	2c00      	cmp	r4, #0
 80184c4:	d070      	beq.n	80185a8 <savePnm+0x158>
 80184c6:	ea4f 0548 	mov.w	r5, r8, lsl #1
 80184ca:	2700      	movs	r7, #0
 80184cc:	e004      	b.n	80184d8 <savePnm+0x88>
					if (res != FR_OK || bytesWritten != 3) {
 80184ce:	9b03      	ldr	r3, [sp, #12]
 80184d0:	2b03      	cmp	r3, #3
 80184d2:	d126      	bne.n	8018522 <savePnm+0xd2>
				for (uint32_t j = 0; j < width; j++) {
 80184d4:	42bc      	cmp	r4, r7
 80184d6:	d067      	beq.n	80185a8 <savePnm+0x158>
					uint16_t rgb565 = *(((uint16_t*)img->data) + offset + j);
 80184d8:	68f1      	ldr	r1, [r6, #12]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 80184da:	2203      	movs	r2, #3
 80184dc:	ab03      	add	r3, sp, #12
 80184de:	a814      	add	r0, sp, #80	; 0x50
					uint16_t rgb565 = *(((uint16_t*)img->data) + offset + j);
 80184e0:	f831 c005 	ldrh.w	ip, [r1, r5]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 80184e4:	a902      	add	r1, sp, #8
				for (uint32_t j = 0; j < width; j++) {
 80184e6:	3701      	adds	r7, #1
 80184e8:	3502      	adds	r5, #2
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 80184ea:	f3cc 0b82 	ubfx	fp, ip, #2, #3
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 80184ee:	fa2c fe02 	lsr.w	lr, ip, r2
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 80184f2:	ea4b 0bcc 	orr.w	fp, fp, ip, lsl #3
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 80184f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 80184fa:	f88d b00a 	strb.w	fp, [sp, #10]
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 80184fe:	f00e 0bfc 	and.w	fp, lr, #252	; 0xfc
 8018502:	f3ce 1e81 	ubfx	lr, lr, #6, #2
 8018506:	ea4b 0e0e 	orr.w	lr, fp, lr
 801850a:	f88d e009 	strb.w	lr, [sp, #9]
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 801850e:	f00c 0ef8 	and.w	lr, ip, #248	; 0xf8
 8018512:	ea4e 1c5c 	orr.w	ip, lr, ip, lsr #5
 8018516:	f88d c008 	strb.w	ip, [sp, #8]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 801851a:	f7fe fa23 	bl	8016964 <f_write>
					if (res != FR_OK || bytesWritten != 3) {
 801851e:	2800      	cmp	r0, #0
 8018520:	d0d5      	beq.n	80184ce <savePnm+0x7e>
					f_close(&fp);
 8018522:	a814      	add	r0, sp, #80	; 0x50
 8018524:	f7fe fb74 	bl	8016c10 <f_close>
					return stm32ipl_err_WritingFile;
 8018528:	f06f 0008 	mvn.w	r0, #8
}
 801852c:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8018530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = width * height;
 8018534:	fb09 f404 	mul.w	r4, r9, r4
			res = f_write(&fp, img->data, size, &bytesWritten);
 8018538:	ab03      	add	r3, sp, #12
 801853a:	68f1      	ldr	r1, [r6, #12]
 801853c:	a814      	add	r0, sp, #80	; 0x50
 801853e:	4622      	mov	r2, r4
 8018540:	f7fe fa10 	bl	8016964 <f_write>
			if (res != FR_OK || bytesWritten != size) {
 8018544:	2800      	cmp	r0, #0
 8018546:	d1ec      	bne.n	8018522 <savePnm+0xd2>
 8018548:	9b03      	ldr	r3, [sp, #12]
 801854a:	42a3      	cmp	r3, r4
 801854c:	d1e9      	bne.n	8018522 <savePnm+0xd2>
	f_close(&fp);
 801854e:	a814      	add	r0, sp, #80	; 0x50
 8018550:	f7fe fb5e 	bl	8016c10 <f_close>
	return stm32ipl_err_Ok;
 8018554:	2000      	movs	r0, #0
}
 8018556:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 801855a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = width * height;
 801855e:	fb09 f404 	mul.w	r4, r9, r4
			uint8_t *data = img->data;
 8018562:	68f5      	ldr	r5, [r6, #12]
			for (uint32_t i = 0; i < size; i++) {
 8018564:	2c00      	cmp	r4, #0
 8018566:	d0f2      	beq.n	801854e <savePnm+0xfe>
 8018568:	3503      	adds	r5, #3
 801856a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801856e:	442c      	add	r4, r5
 8018570:	e004      	b.n	801857c <savePnm+0x12c>
				if (res != FR_OK || bytesWritten != 3) {
 8018572:	9b03      	ldr	r3, [sp, #12]
 8018574:	2b03      	cmp	r3, #3
 8018576:	d1d4      	bne.n	8018522 <savePnm+0xd2>
			for (uint32_t i = 0; i < size; i++) {
 8018578:	42ac      	cmp	r4, r5
 801857a:	d0e8      	beq.n	801854e <savePnm+0xfe>
				rgb888.r = *data++;
 801857c:	f815 1c03 	ldrb.w	r1, [r5, #-3]
			for (uint32_t i = 0; i < size; i++) {
 8018580:	3503      	adds	r5, #3
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8018582:	ab03      	add	r3, sp, #12
 8018584:	2203      	movs	r2, #3
				rgb888.r = *data++;
 8018586:	f88d 100a 	strb.w	r1, [sp, #10]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 801858a:	a814      	add	r0, sp, #80	; 0x50
				rgb888.g = *data++;
 801858c:	f815 6c05 	ldrb.w	r6, [r5, #-5]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8018590:	a902      	add	r1, sp, #8
				rgb888.g = *data++;
 8018592:	f88d 6009 	strb.w	r6, [sp, #9]
				rgb888.b = *data++;
 8018596:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 801859a:	f88d 6008 	strb.w	r6, [sp, #8]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 801859e:	f7fe f9e1 	bl	8016964 <f_write>
				if (res != FR_OK || bytesWritten != 3) {
 80185a2:	2800      	cmp	r0, #0
 80185a4:	d0e5      	beq.n	8018572 <savePnm+0x122>
 80185a6:	e7bc      	b.n	8018522 <savePnm+0xd2>
			for (uint32_t i = 0; i < height; i++) {
 80185a8:	f10a 0a01 	add.w	sl, sl, #1
 80185ac:	44a0      	add	r8, r4
 80185ae:	45ca      	cmp	sl, r9
 80185b0:	d187      	bne.n	80184c2 <savePnm+0x72>
 80185b2:	e7cc      	b.n	801854e <savePnm+0xfe>
		return stm32ipl_err_OpeningFile;
 80185b4:	f06f 0005 	mvn.w	r0, #5
 80185b8:	e77a      	b.n	80184b0 <savePnm+0x60>
 80185ba:	bf00      	nop
 80185bc:	080608f4 	.word	0x080608f4

080185c0 <STM32Ipl_ReadImage>:
{
 80185c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t bytesRead = 0;
 80185c4:	2200      	movs	r2, #0
{
 80185c6:	ed2d 8b02 	vpush	{d8}
 80185ca:	f2ad 6ddc 	subw	sp, sp, #1756	; 0x6dc
	uint32_t bytesRead = 0;
 80185ce:	921a      	str	r2, [sp, #104]	; 0x68
	const uint8_t bmp[2] = { 0x42, 0x4D }; /* BM */
 80185d0:	f644 5242 	movw	r2, #19778	; 0x4d42
	if (!img || !filename)
 80185d4:	9003      	str	r0, [sp, #12]
	const uint8_t bmp[2] = { 0x42, 0x4D }; /* BM */
 80185d6:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
	const uint8_t p2[2] = { 0x50, 0x32 }; /* P2 */
 80185da:	f243 2250 	movw	r2, #12880	; 0x3250
 80185de:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
	const uint8_t p3[2] = { 0x50, 0x33 }; /* P3 */
 80185e2:	f243 3250 	movw	r2, #13136	; 0x3350
 80185e6:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
	const uint8_t p5[2] = { 0x50, 0x35 }; /* P5 */
 80185ea:	f243 5250 	movw	r2, #13648	; 0x3550
 80185ee:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
	const uint8_t p6[2] = { 0x50, 0x36 }; /* P6 */
 80185f2:	f243 6250 	movw	r2, #13904	; 0x3650
 80185f6:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
	if (!img || !filename)
 80185fa:	2800      	cmp	r0, #0
 80185fc:	f000 85d8 	beq.w	80191b0 <STM32Ipl_ReadImage+0xbf0>
 8018600:	2900      	cmp	r1, #0
 8018602:	f000 85d5 	beq.w	80191b0 <STM32Ipl_ReadImage+0xbf0>
	if (f_open(&fp, (const TCHAR*)filename, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 8018606:	2201      	movs	r2, #1
 8018608:	a82a      	add	r0, sp, #168	; 0xa8
 801860a:	f7fd fea7 	bl	801635c <f_open>
 801860e:	2800      	cmp	r0, #0
 8018610:	f040 86da 	bne.w	80193c8 <STM32Ipl_ReadImage+0xe08>
	if ((f_read(&fp, magic, 2, (UINT*)&bytesRead) != FR_OK) || bytesRead != 2) {
 8018614:	ab1a      	add	r3, sp, #104	; 0x68
 8018616:	2202      	movs	r2, #2
 8018618:	a82a      	add	r0, sp, #168	; 0xa8
 801861a:	a914      	add	r1, sp, #80	; 0x50
 801861c:	f7fe f86a 	bl	80166f4 <f_read>
 8018620:	4604      	mov	r4, r0
 8018622:	2800      	cmp	r0, #0
 8018624:	f040 8598 	bne.w	8019158 <STM32Ipl_ReadImage+0xb98>
 8018628:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801862a:	2b02      	cmp	r3, #2
 801862c:	f040 8594 	bne.w	8019158 <STM32Ipl_ReadImage+0xb98>
	if (memcmp(bmp, magic, 2) == 0)
 8018630:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018634:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018638:	429a      	cmp	r2, r3
 801863a:	d066      	beq.n	801870a <STM32Ipl_ReadImage+0x14a>
		if ((memcmp(p2, magic, 1) == 0)
 801863c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8018640:	2a50      	cmp	r2, #80	; 0x50
 8018642:	d00b      	beq.n	801865c <STM32Ipl_ReadImage+0x9c>
				res = stm32ipl_err_UnsupportedFormat;
 8018644:	f06f 0404 	mvn.w	r4, #4
	f_close(&fp);
 8018648:	a82a      	add	r0, sp, #168	; 0xa8
 801864a:	f7fe fae1 	bl	8016c10 <f_close>
}
 801864e:	4620      	mov	r0, r4
 8018650:	f20d 6ddc 	addw	sp, sp, #1756	; 0x6dc
 8018654:	ecbd 8b02 	vpop	{d8}
 8018658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((memcmp(p2, magic, 2) == 0) || (memcmp(p3, magic, 2) == 0) || (memcmp(p5, magic, 2) == 0)
 801865c:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8018660:	429a      	cmp	r2, r3
 8018662:	d00d      	beq.n	8018680 <STM32Ipl_ReadImage+0xc0>
 8018664:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8018668:	429a      	cmp	r2, r3
 801866a:	d009      	beq.n	8018680 <STM32Ipl_ReadImage+0xc0>
 801866c:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 8018670:	429a      	cmp	r2, r3
 8018672:	d005      	beq.n	8018680 <STM32Ipl_ReadImage+0xc0>
						|| (memcmp(p6, magic, 2) == 0)))
 8018674:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8018678:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801867c:	429a      	cmp	r2, r3
 801867e:	d1e1      	bne.n	8018644 <STM32Ipl_ReadImage+0x84>
	STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
 8018680:	2100      	movs	r1, #0
 8018682:	9803      	ldr	r0, [sp, #12]
 8018684:	460b      	mov	r3, r1
 8018686:	460a      	mov	r2, r1
 8018688:	9100      	str	r1, [sp, #0]
 801868a:	f7ff fc05 	bl	8017e98 <STM32Ipl_Init>
	if (f_lseek(fp, 0) != FR_OK)
 801868e:	2100      	movs	r1, #0
 8018690:	a82a      	add	r0, sp, #168	; 0xa8
 8018692:	f7fe fb4d 	bl	8016d30 <f_lseek>
 8018696:	2800      	cmp	r0, #0
 8018698:	f040 81c4 	bne.w	8018a24 <STM32Ipl_ReadImage+0x464>
	if ((f_read(fp, sector, 2, (UINT*)&bytesRead) != FR_OK) || bytesRead != 2)
 801869c:	ac1c      	add	r4, sp, #112	; 0x70
 801869e:	adb6      	add	r5, sp, #728	; 0x2d8
 80186a0:	2202      	movs	r2, #2
 80186a2:	a82a      	add	r0, sp, #168	; 0xa8
 80186a4:	4623      	mov	r3, r4
 80186a6:	4629      	mov	r1, r5
 80186a8:	f7fe f824 	bl	80166f4 <f_read>
 80186ac:	4680      	mov	r8, r0
 80186ae:	2800      	cmp	r0, #0
 80186b0:	f040 81b5 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 80186b4:	6823      	ldr	r3, [r4, #0]
 80186b6:	2b02      	cmp	r3, #2
 80186b8:	f040 81b1 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
	number_ppm = sector[1];
 80186bc:	786b      	ldrb	r3, [r5, #1]
	if ((number_ppm != '2') && (number_ppm != '3') && (number_ppm != '5') && (number_ppm != '6'))
 80186be:	f1a3 0732 	sub.w	r7, r3, #50	; 0x32
 80186c2:	b2fa      	uxtb	r2, r7
 80186c4:	2a01      	cmp	r2, #1
 80186c6:	d902      	bls.n	80186ce <STM32Ipl_ReadImage+0x10e>
 80186c8:	3b35      	subs	r3, #53	; 0x35
 80186ca:	2b01      	cmp	r3, #1
 80186cc:	d8ba      	bhi.n	8018644 <STM32Ipl_ReadImage+0x84>
 80186ce:	2600      	movs	r6, #0
		if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 80186d0:	4623      	mov	r3, r4
 80186d2:	2201      	movs	r2, #1
 80186d4:	4629      	mov	r1, r5
 80186d6:	a82a      	add	r0, sp, #168	; 0xa8
 80186d8:	f7fe f80c 	bl	80166f4 <f_read>
 80186dc:	2800      	cmp	r0, #0
 80186de:	f040 819e 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 80186e2:	6822      	ldr	r2, [r4, #0]
 80186e4:	2a01      	cmp	r2, #1
 80186e6:	f040 819a 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
		if (mode == EAT_WHITESPACE) {
 80186ea:	f1b8 0f00 	cmp.w	r8, #0
 80186ee:	f040 819c 	bne.w	8018a2a <STM32Ipl_ReadImage+0x46a>
			if (sector[0] == '#') {
 80186f2:	7828      	ldrb	r0, [r5, #0]
 80186f4:	2823      	cmp	r0, #35	; 0x23
 80186f6:	f000 81a8 	beq.w	8018a4a <STM32Ipl_ReadImage+0x48a>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80186fa:	3830      	subs	r0, #48	; 0x30
 80186fc:	b2c3      	uxtb	r3, r0
 80186fe:	2b09      	cmp	r3, #9
 8018700:	d8e6      	bhi.n	80186d0 <STM32Ipl_ReadImage+0x110>
					number = sector[0] - '0';
 8018702:	4606      	mov	r6, r0
					mode = EAT_NUMBER;
 8018704:	f04f 0802 	mov.w	r8, #2
 8018708:	e7e2      	b.n	80186d0 <STM32Ipl_ReadImage+0x110>
	STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
 801870a:	4601      	mov	r1, r0
 801870c:	4603      	mov	r3, r0
 801870e:	4602      	mov	r2, r0
 8018710:	9000      	str	r0, [sp, #0]
 8018712:	9803      	ldr	r0, [sp, #12]
 8018714:	f7ff fbc0 	bl	8017e98 <STM32Ipl_Init>
	if (f_lseek(fp, 0) != FR_OK)
 8018718:	4621      	mov	r1, r4
 801871a:	a82a      	add	r0, sp, #168	; 0xa8
 801871c:	f7fe fb08 	bl	8016d30 <f_lseek>
 8018720:	2800      	cmp	r0, #0
 8018722:	f040 817f 	bne.w	8018a24 <STM32Ipl_ReadImage+0x464>
	if ((f_read(fp, header, sizeof(header), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(header))
 8018726:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 801872a:	ac1c      	add	r4, sp, #112	; 0x70
 801872c:	2236      	movs	r2, #54	; 0x36
 801872e:	a82a      	add	r0, sp, #168	; 0xa8
 8018730:	464b      	mov	r3, r9
 8018732:	4621      	mov	r1, r4
 8018734:	f7fd ffde 	bl	80166f4 <f_read>
 8018738:	2800      	cmp	r0, #0
 801873a:	f040 8170 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 801873e:	f8d9 3000 	ldr.w	r3, [r9]
 8018742:	2b36      	cmp	r3, #54	; 0x36
 8018744:	f040 816b 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8018748:	7be2      	ldrb	r2, [r4, #15]
 801874a:	7ba3      	ldrb	r3, [r4, #14]
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 801874c:	7ae1      	ldrb	r1, [r4, #11]
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 801874e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8018752:	7aa2      	ldrb	r2, [r4, #10]
 8018754:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8018758:	7c21      	ldrb	r1, [r4, #16]
 801875a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 801875e:	7b21      	ldrb	r1, [r4, #12]
 8018760:	eb02 4201 	add.w	r2, r2, r1, lsl #16
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 8018764:	7c61      	ldrb	r1, [r4, #17]
 8018766:	eb03 6301 	add.w	r3, r3, r1, lsl #24
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 801876a:	7b61      	ldrb	r1, [r4, #13]
	if ((infoHeaderSize != 40) /* BITMAPINFOHEADER */
 801876c:	2b34      	cmp	r3, #52	; 0x34
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 801876e:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 8018772:	9204      	str	r2, [sp, #16]
	if ((infoHeaderSize != 40) /* BITMAPINFOHEADER */
 8018774:	f023 0210 	bic.w	r2, r3, #16
 8018778:	d004      	beq.n	8018784 <STM32Ipl_ReadImage+0x1c4>
 801877a:	2a28      	cmp	r2, #40	; 0x28
 801877c:	d002      	beq.n	8018784 <STM32Ipl_ReadImage+0x1c4>
	&& (infoHeaderSize != 124)) /* BITMAPV5HEADER */
 801877e:	2a6c      	cmp	r2, #108	; 0x6c
 8018780:	f47f af60 	bne.w	8018644 <STM32Ipl_ReadImage+0x84>
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 8018784:	7ce3      	ldrb	r3, [r4, #19]
 8018786:	f894 b012 	ldrb.w	fp, [r4, #18]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 801878a:	7da2      	ldrb	r2, [r4, #22]
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 801878c:	eb0b 2b03 	add.w	fp, fp, r3, lsl #8
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8018790:	7de3      	ldrb	r3, [r4, #23]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8018792:	7f61      	ldrb	r1, [r4, #29]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8018794:	eb02 2203 	add.w	r2, r2, r3, lsl #8
	bitCount = pHeader[28] + (pHeader[29] << 8);
 8018798:	7f23      	ldrb	r3, [r4, #28]
 801879a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 801879e:	7d21      	ldrb	r1, [r4, #20]
 80187a0:	eb0b 4b01 	add.w	fp, fp, r1, lsl #16
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 80187a4:	7e21      	ldrb	r1, [r4, #24]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 80187a6:	b29b      	uxth	r3, r3
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 80187a8:	eb02 4201 	add.w	r2, r2, r1, lsl #16
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 80187ac:	7d61      	ldrb	r1, [r4, #21]
	if ((bitCount != 1) && (bitCount != 4) && (bitCount != 8) && (bitCount != 16) && (bitCount != 24))
 80187ae:	2b18      	cmp	r3, #24
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 80187b0:	eb0b 6b01 	add.w	fp, fp, r1, lsl #24
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 80187b4:	7e61      	ldrb	r1, [r4, #25]
 80187b6:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 80187ba:	9205      	str	r2, [sp, #20]
	if ((bitCount != 1) && (bitCount != 4) && (bitCount != 8) && (bitCount != 16) && (bitCount != 24))
 80187bc:	f63f af42 	bhi.w	8018644 <STM32Ipl_ReadImage+0x84>
 80187c0:	4ac6      	ldr	r2, [pc, #792]	; (8018adc <STM32Ipl_ReadImage+0x51c>)
 80187c2:	40da      	lsrs	r2, r3
 80187c4:	07d2      	lsls	r2, r2, #31
 80187c6:	f57f af3d 	bpl.w	8018644 <STM32Ipl_ReadImage+0x84>
	compression = pHeader[30] + (pHeader[31] << 8) + (pHeader[32] << 16) + (pHeader[33] << 24);
 80187ca:	7fe1      	ldrb	r1, [r4, #31]
 80187cc:	7fa2      	ldrb	r2, [r4, #30]
 80187ce:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80187d2:	f894 1020 	ldrb.w	r1, [r4, #32]
 80187d6:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 80187da:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
	if (compression != BI_RGB && compression != BI_BITFIELDS)
 80187de:	eb12 6201 	adds.w	r2, r2, r1, lsl #24
 80187e2:	bf14      	ite	ne
 80187e4:	2701      	movne	r7, #1
 80187e6:	2700      	moveq	r7, #0
 80187e8:	2a03      	cmp	r2, #3
 80187ea:	d002      	beq.n	80187f2 <STM32Ipl_ReadImage+0x232>
 80187ec:	2f00      	cmp	r7, #0
 80187ee:	f47f af29 	bne.w	8018644 <STM32Ipl_ReadImage+0x84>
	colorUsed = pHeader[46] + (pHeader[47] << 8) + (pHeader[48] << 16) + (pHeader[49] << 24);
 80187f2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 80187f6:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80187fa:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80187fe:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8018802:	f894 4031 	ldrb.w	r4, [r4, #49]	; 0x31
 8018806:	eb01 4100 	add.w	r1, r1, r0, lsl #16
	if (colorUsed == 0)
 801880a:	eb11 6404 	adds.w	r4, r1, r4, lsl #24
 801880e:	d101      	bne.n	8018814 <STM32Ipl_ReadImage+0x254>
		colorUsed = 1 << bitCount;
 8018810:	2401      	movs	r4, #1
 8018812:	409c      	lsls	r4, r3
	lineSize = (((width * bitCount) + 31) / 32) * 4;
 8018814:	fb03 f00b 	mul.w	r0, r3, fp
 8018818:	f110 011f 	adds.w	r1, r0, #31
 801881c:	bf48      	it	mi
 801881e:	f100 013e 	addmi.w	r1, r0, #62	; 0x3e
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 8018822:	2a03      	cmp	r2, #3
	lineSize = (((width * bitCount) + 31) / 32) * 4;
 8018824:	ea4f 1161 	mov.w	r1, r1, asr #5
 8018828:	ea4f 0a81 	mov.w	sl, r1, lsl #2
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 801882c:	f040 811e 	bne.w	8018a6c <STM32Ipl_ReadImage+0x4ac>
 8018830:	2b10      	cmp	r3, #16
 8018832:	f040 811b 	bne.w	8018a6c <STM32Ipl_ReadImage+0x4ac>
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8018836:	464b      	mov	r3, r9
 8018838:	2204      	movs	r2, #4
 801883a:	a82a      	add	r0, sp, #168	; 0xa8
 801883c:	a9b6      	add	r1, sp, #728	; 0x2d8
 801883e:	f7fd ff59 	bl	80166f4 <f_read>
 8018842:	2800      	cmp	r0, #0
 8018844:	f040 80eb 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 8018848:	f8d9 2000 	ldr.w	r2, [r9]
 801884c:	2a04      	cmp	r2, #4
 801884e:	f040 80e6 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8018852:	f89d 32d9 	ldrb.w	r3, [sp, #729]	; 0x2d9
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8018856:	a9b6      	add	r1, sp, #728	; 0x2d8
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8018858:	f89d 62d8 	ldrb.w	r6, [sp, #728]	; 0x2d8
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 801885c:	a82a      	add	r0, sp, #168	; 0xa8
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 801885e:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8018862:	f89d 32da 	ldrb.w	r3, [sp, #730]	; 0x2da
 8018866:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 801886a:	f89d 32db 	ldrb.w	r3, [sp, #731]	; 0x2db
 801886e:	eb06 6603 	add.w	r6, r6, r3, lsl #24
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8018872:	464b      	mov	r3, r9
 8018874:	f7fd ff3e 	bl	80166f4 <f_read>
 8018878:	2800      	cmp	r0, #0
 801887a:	f040 80d0 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 801887e:	f8d9 2000 	ldr.w	r2, [r9]
 8018882:	2a04      	cmp	r2, #4
 8018884:	f040 80cb 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8018888:	f89d 32d9 	ldrb.w	r3, [sp, #729]	; 0x2d9
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 801888c:	a9b6      	add	r1, sp, #728	; 0x2d8
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 801888e:	f89d 52d8 	ldrb.w	r5, [sp, #728]	; 0x2d8
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 8018892:	a82a      	add	r0, sp, #168	; 0xa8
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8018894:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8018898:	f89d 32da 	ldrb.w	r3, [sp, #730]	; 0x2da
 801889c:	eb05 4503 	add.w	r5, r5, r3, lsl #16
 80188a0:	f89d 32db 	ldrb.w	r3, [sp, #731]	; 0x2db
 80188a4:	eb05 6503 	add.w	r5, r5, r3, lsl #24
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 80188a8:	464b      	mov	r3, r9
 80188aa:	f7fd ff23 	bl	80166f4 <f_read>
 80188ae:	2800      	cmp	r0, #0
 80188b0:	f040 80b5 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 80188b4:	f8d9 3000 	ldr.w	r3, [r9]
 80188b8:	2b04      	cmp	r3, #4
 80188ba:	f040 80b0 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
		bMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 80188be:	f89d 32d9 	ldrb.w	r3, [sp, #729]	; 0x2d9
 80188c2:	f89d 42d8 	ldrb.w	r4, [sp, #728]	; 0x2d8
 80188c6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 80188ca:	f89d 32da 	ldrb.w	r3, [sp, #730]	; 0x2da
 80188ce:	eb04 4403 	add.w	r4, r4, r3, lsl #16
 80188d2:	f89d 32db 	ldrb.w	r3, [sp, #731]	; 0x2db
 80188d6:	eb04 6403 	add.w	r4, r4, r3, lsl #24
			if (f_lseek(fp, dataOffset) != FR_OK)
 80188da:	9904      	ldr	r1, [sp, #16]
 80188dc:	a82a      	add	r0, sp, #168	; 0xa8
 80188de:	f7fe fa27 	bl	8016d30 <f_lseek>
 80188e2:	2800      	cmp	r0, #0
 80188e4:	f040 809e 	bne.w	8018a24 <STM32Ipl_ReadImage+0x464>
			outData = xalloc(width * abs(height) * 2);
 80188e8:	9a05      	ldr	r2, [sp, #20]
 80188ea:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80188ee:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80188f2:	fb03 f00b 	mul.w	r0, r3, fp
 80188f6:	9308      	str	r3, [sp, #32]
 80188f8:	0040      	lsls	r0, r0, #1
 80188fa:	f001 f875 	bl	80199e8 <xalloc>
			if (!outData)
 80188fe:	900f      	str	r0, [sp, #60]	; 0x3c
 8018900:	2800      	cmp	r0, #0
 8018902:	f000 8585 	beq.w	8019410 <STM32Ipl_ReadImage+0xe50>
			lineData = xalloc(lineSize);
 8018906:	4650      	mov	r0, sl
 8018908:	f001 f86e 	bl	80199e8 <xalloc>
			if (!lineData) {
 801890c:	4680      	mov	r8, r0
 801890e:	2800      	cmp	r0, #0
 8018910:	f000 87b3 	beq.w	801987a <STM32Ipl_ReadImage+0x12ba>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018914:	9b05      	ldr	r3, [sp, #20]
 8018916:	2b00      	cmp	r3, #0
 8018918:	f340 855a 	ble.w	80193d0 <STM32Ipl_ReadImage+0xe10>
 801891c:	3b01      	subs	r3, #1
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801891e:	9a04      	ldr	r2, [sp, #16]
 8018920:	fb0a 2303 	mla	r3, sl, r3, r2
 8018924:	4619      	mov	r1, r3
 8018926:	9306      	str	r3, [sp, #24]
			if (f_lseek(fp, line) != FR_OK) {
 8018928:	a82a      	add	r0, sp, #168	; 0xa8
 801892a:	f7fe fa01 	bl	8016d30 <f_lseek>
 801892e:	2800      	cmp	r0, #0
 8018930:	f040 8787 	bne.w	8019842 <STM32Ipl_ReadImage+0x1282>
			for (uint32_t i = 0; i < abs(height); i++) {
 8018934:	9b08      	ldr	r3, [sp, #32]
 8018936:	9313      	str	r3, [sp, #76]	; 0x4c
 8018938:	9b05      	ldr	r3, [sp, #20]
 801893a:	2b00      	cmp	r3, #0
 801893c:	f000 873a 	beq.w	80197b4 <STM32Ipl_ReadImage+0x11f4>
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8018940:	463b      	mov	r3, r7
							&& (bMask == RGB565_BLUE_MASK))
 8018942:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
			for (uint32_t i = 0; i < abs(height); i++) {
 8018944:	9007      	str	r0, [sp, #28]
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8018946:	f5b6 4f78 	cmp.w	r6, #63488	; 0xf800
 801894a:	bf14      	ite	ne
 801894c:	2300      	movne	r3, #0
 801894e:	f003 0301 	andeq.w	r3, r3, #1
							&& (bMask == RGB565_BLUE_MASK))
 8018952:	f5b5 6ffc 	cmp.w	r5, #2016	; 0x7e0
 8018956:	bf08      	it	eq
 8018958:	2c1f      	cmpeq	r4, #31
 801895a:	bf0c      	ite	eq
 801895c:	2201      	moveq	r2, #1
 801895e:	2200      	movne	r2, #0
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8018960:	930b      	str	r3, [sp, #44]	; 0x2c
 8018962:	f02b 0301 	bic.w	r3, fp, #1
							&& (bMask == RGB565_BLUE_MASK))
 8018966:	920d      	str	r2, [sp, #52]	; 0x34
 8018968:	ea4f 025b 	mov.w	r2, fp, lsr #1
 801896c:	9311      	str	r3, [sp, #68]	; 0x44
 801896e:	9212      	str	r2, [sp, #72]	; 0x48
 8018970:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8018974:	920c      	str	r2, [sp, #48]	; 0x30
 8018976:	005a      	lsls	r2, r3, #1
 8018978:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801897c:	9209      	str	r2, [sp, #36]	; 0x24
 801897e:	930a      	str	r3, [sp, #40]	; 0x28
 8018980:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018984:	930e      	str	r3, [sp, #56]	; 0x38
 8018986:	f108 0302 	add.w	r3, r8, #2
 801898a:	9310      	str	r3, [sp, #64]	; 0x40
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 801898c:	4623      	mov	r3, r4
 801898e:	465c      	mov	r4, fp
 8018990:	469b      	mov	fp, r3
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018992:	464b      	mov	r3, r9
 8018994:	4652      	mov	r2, sl
 8018996:	4641      	mov	r1, r8
 8018998:	a82a      	add	r0, sp, #168	; 0xa8
 801899a:	f7fd feab 	bl	80166f4 <f_read>
 801899e:	2800      	cmp	r0, #0
 80189a0:	f040 83ae 	bne.w	8019100 <STM32Ipl_ReadImage+0xb40>
 80189a4:	f8d9 3000 	ldr.w	r3, [r9]
 80189a8:	459a      	cmp	sl, r3
 80189aa:	f040 83a9 	bne.w	8019100 <STM32Ipl_ReadImage+0xb40>
				for (uint32_t j = 0; j < width; j++) {
 80189ae:	b1b4      	cbz	r4, 80189de <STM32Ipl_ReadImage+0x41e>
 80189b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80189b2:	2900      	cmp	r1, #0
 80189b4:	f040 82f3 	bne.w	8018f9e <STM32Ipl_ReadImage+0x9de>
 80189b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80189bc:	4638      	mov	r0, r7
					uint16_t value = *inPixel;
 80189be:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 80189c2:	ea46 0205 	orr.w	r2, r6, r5
				for (uint32_t j = 0; j < width; j++) {
 80189c6:	3101      	adds	r1, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 80189c8:	401a      	ands	r2, r3
 80189ca:	ea03 030b 	and.w	r3, r3, fp
				for (uint32_t j = 0; j < width; j++) {
 80189ce:	428c      	cmp	r4, r1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 80189d0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80189d4:	f820 3b02 	strh.w	r3, [r0], #2
				for (uint32_t j = 0; j < width; j++) {
 80189d8:	d1f1      	bne.n	80189be <STM32Ipl_ReadImage+0x3fe>
 80189da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189dc:	441f      	add	r7, r3
				if (height > 0) {
 80189de:	9b05      	ldr	r3, [sp, #20]
 80189e0:	2b00      	cmp	r3, #0
					line -= lineSize;
 80189e2:	9b06      	ldr	r3, [sp, #24]
				if (height > 0) {
 80189e4:	f340 82f3 	ble.w	8018fce <STM32Ipl_ReadImage+0xa0e>
					line -= lineSize;
 80189e8:	eba3 030a 	sub.w	r3, r3, sl
					if (line >= dataOffset) {
 80189ec:	9a04      	ldr	r2, [sp, #16]
 80189ee:	429a      	cmp	r2, r3
					line -= lineSize;
 80189f0:	9306      	str	r3, [sp, #24]
					if (line >= dataOffset) {
 80189f2:	f240 830b 	bls.w	801900c <STM32Ipl_ReadImage+0xa4c>
			for (uint32_t i = 0; i < abs(height); i++) {
 80189f6:	9b07      	ldr	r3, [sp, #28]
 80189f8:	9a08      	ldr	r2, [sp, #32]
 80189fa:	3301      	adds	r3, #1
 80189fc:	4293      	cmp	r3, r2
 80189fe:	9307      	str	r3, [sp, #28]
 8018a00:	d1c7      	bne.n	8018992 <STM32Ipl_ReadImage+0x3d2>
 8018a02:	46a3      	mov	fp, r4
			xfree(lineData);
 8018a04:	4640      	mov	r0, r8
	return stm32ipl_err_Ok;
 8018a06:	2400      	movs	r4, #0
			xfree(lineData);
 8018a08:	f000 fffc 	bl	8019a04 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 8018a0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018a10:	4659      	mov	r1, fp
 8018a12:	9300      	str	r3, [sp, #0]
 8018a14:	2302      	movs	r3, #2
 8018a16:	9803      	ldr	r0, [sp, #12]
 8018a18:	f7ff fa3e 	bl	8017e98 <STM32Ipl_Init>
			break;
 8018a1c:	e614      	b.n	8018648 <STM32Ipl_ReadImage+0x88>
									return stm32ipl_err_ReadingFile;
 8018a1e:	f06f 0407 	mvn.w	r4, #7
 8018a22:	e611      	b.n	8018648 <STM32Ipl_ReadImage+0x88>
		return stm32ipl_err_SeekingFile;
 8018a24:	f06f 0409 	mvn.w	r4, #9
 8018a28:	e60e      	b.n	8018648 <STM32Ipl_ReadImage+0x88>
			if (mode == EAT_COMMENT) {
 8018a2a:	f1b8 0f01 	cmp.w	r8, #1
 8018a2e:	d00e      	beq.n	8018a4e <STM32Ipl_ReadImage+0x48e>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8018a30:	782b      	ldrb	r3, [r5, #0]
 8018a32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8018a36:	b2d1      	uxtb	r1, r2
 8018a38:	2909      	cmp	r1, #9
 8018a3a:	d851      	bhi.n	8018ae0 <STM32Ipl_ReadImage+0x520>
						number = (number * 10) + sector[0] - '0';
 8018a3c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8018a40:	f04f 0802 	mov.w	r8, #2
 8018a44:	eb02 0646 	add.w	r6, r2, r6, lsl #1
	} while (!valid);
 8018a48:	e642      	b.n	80186d0 <STM32Ipl_ReadImage+0x110>
				mode = EAT_COMMENT;
 8018a4a:	4690      	mov	r8, r2
 8018a4c:	e640      	b.n	80186d0 <STM32Ipl_ReadImage+0x110>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8018a4e:	f895 8000 	ldrb.w	r8, [r5]
 8018a52:	f1b8 0f0d 	cmp.w	r8, #13
 8018a56:	bf18      	it	ne
 8018a58:	f1b8 0f0a 	cmpne.w	r8, #10
 8018a5c:	bf0c      	ite	eq
 8018a5e:	f04f 0801 	moveq.w	r8, #1
 8018a62:	f04f 0800 	movne.w	r8, #0
				mode = EAT_COMMENT;
 8018a66:	f088 0801 	eor.w	r8, r8, #1
 8018a6a:	e631      	b.n	80186d0 <STM32Ipl_ReadImage+0x110>
	switch (bitCount) {
 8018a6c:	3b01      	subs	r3, #1
 8018a6e:	2b17      	cmp	r3, #23
 8018a70:	f63f ade8 	bhi.w	8018644 <STM32Ipl_ReadImage+0x84>
 8018a74:	a201      	add	r2, pc, #4	; (adr r2, 8018a7c <STM32Ipl_ReadImage+0x4bc>)
 8018a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a7a:	bf00      	nop
 8018a7c:	08018e5f 	.word	0x08018e5f
 8018a80:	08018645 	.word	0x08018645
 8018a84:	08018645 	.word	0x08018645
 8018a88:	08018d49 	.word	0x08018d49
 8018a8c:	08018645 	.word	0x08018645
 8018a90:	08018645 	.word	0x08018645
 8018a94:	08018645 	.word	0x08018645
 8018a98:	08018c15 	.word	0x08018c15
 8018a9c:	08018645 	.word	0x08018645
 8018aa0:	08018645 	.word	0x08018645
 8018aa4:	08018645 	.word	0x08018645
 8018aa8:	08018645 	.word	0x08018645
 8018aac:	08018645 	.word	0x08018645
 8018ab0:	08018645 	.word	0x08018645
 8018ab4:	08018645 	.word	0x08018645
 8018ab8:	08018f93 	.word	0x08018f93
 8018abc:	08018645 	.word	0x08018645
 8018ac0:	08018645 	.word	0x08018645
 8018ac4:	08018645 	.word	0x08018645
 8018ac8:	08018645 	.word	0x08018645
 8018acc:	08018645 	.word	0x08018645
 8018ad0:	08018645 	.word	0x08018645
 8018ad4:	08018645 	.word	0x08018645
 8018ad8:	08018b4b 	.word	0x08018b4b
 8018adc:	01010112 	.word	0x01010112
	number = 0;
 8018ae0:	46b0      	mov	r8, r6
 8018ae2:	4606      	mov	r6, r0
 8018ae4:	4682      	mov	sl, r0
 8018ae6:	461a      	mov	r2, r3
		if (mode == EAT_WHITESPACE) {
 8018ae8:	b9ae      	cbnz	r6, 8018b16 <STM32Ipl_ReadImage+0x556>
			if (sector[0] == '#') {
 8018aea:	2a23      	cmp	r2, #35	; 0x23
 8018aec:	d022      	beq.n	8018b34 <STM32Ipl_ReadImage+0x574>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8018aee:	3a30      	subs	r2, #48	; 0x30
 8018af0:	b2d3      	uxtb	r3, r2
 8018af2:	2b09      	cmp	r3, #9
 8018af4:	d801      	bhi.n	8018afa <STM32Ipl_ReadImage+0x53a>
					number = sector[0] - '0';
 8018af6:	4692      	mov	sl, r2
					mode = EAT_NUMBER;
 8018af8:	2602      	movs	r6, #2
			if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8018afa:	4623      	mov	r3, r4
 8018afc:	2201      	movs	r2, #1
 8018afe:	4629      	mov	r1, r5
 8018b00:	a82a      	add	r0, sp, #168	; 0xa8
 8018b02:	f7fd fdf7 	bl	80166f4 <f_read>
 8018b06:	2800      	cmp	r0, #0
 8018b08:	d189      	bne.n	8018a1e <STM32Ipl_ReadImage+0x45e>
 8018b0a:	6823      	ldr	r3, [r4, #0]
 8018b0c:	2b01      	cmp	r3, #1
 8018b0e:	d186      	bne.n	8018a1e <STM32Ipl_ReadImage+0x45e>
			if (sector[0] == '#') {
 8018b10:	782a      	ldrb	r2, [r5, #0]
		if (mode == EAT_WHITESPACE) {
 8018b12:	2e00      	cmp	r6, #0
 8018b14:	d0e9      	beq.n	8018aea <STM32Ipl_ReadImage+0x52a>
			if (mode == EAT_COMMENT) {
 8018b16:	2e01      	cmp	r6, #1
 8018b18:	d00e      	beq.n	8018b38 <STM32Ipl_ReadImage+0x578>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8018b1a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8018b1e:	2b09      	cmp	r3, #9
 8018b20:	f200 8285 	bhi.w	801902e <STM32Ipl_ReadImage+0xa6e>
						number = (number * 10) + sector[0] - '0';
 8018b24:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8018b28:	2602      	movs	r6, #2
 8018b2a:	eb02 024a 	add.w	r2, r2, sl, lsl #1
 8018b2e:	f1a2 0a30 	sub.w	sl, r2, #48	; 0x30
	} while (!valid);
 8018b32:	e7e2      	b.n	8018afa <STM32Ipl_ReadImage+0x53a>
				mode = EAT_COMMENT;
 8018b34:	2601      	movs	r6, #1
 8018b36:	e7e0      	b.n	8018afa <STM32Ipl_ReadImage+0x53a>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8018b38:	2a0d      	cmp	r2, #13
 8018b3a:	bf18      	it	ne
 8018b3c:	2a0a      	cmpne	r2, #10
 8018b3e:	bf0c      	ite	eq
 8018b40:	2201      	moveq	r2, #1
 8018b42:	2200      	movne	r2, #0
				mode = EAT_COMMENT;
 8018b44:	f082 0601 	eor.w	r6, r2, #1
 8018b48:	e7d7      	b.n	8018afa <STM32Ipl_ReadImage+0x53a>
			if (f_lseek(fp, dataOffset) != FR_OK)
 8018b4a:	9904      	ldr	r1, [sp, #16]
 8018b4c:	a82a      	add	r0, sp, #168	; 0xa8
			uint32_t outLineSize = width * 3;
 8018b4e:	eb0b 074b 	add.w	r7, fp, fp, lsl #1
			if (f_lseek(fp, dataOffset) != FR_OK)
 8018b52:	f7fe f8ed 	bl	8016d30 <f_lseek>
 8018b56:	2800      	cmp	r0, #0
 8018b58:	f47f af64 	bne.w	8018a24 <STM32Ipl_ReadImage+0x464>
			outData = xalloc(outLineSize * abs(height));
 8018b5c:	9a05      	ldr	r2, [sp, #20]
 8018b5e:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8018b62:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8018b66:	fb03 f007 	mul.w	r0, r3, r7
 8018b6a:	9307      	str	r3, [sp, #28]
 8018b6c:	f000 ff3c 	bl	80199e8 <xalloc>
			if (!outData)
 8018b70:	9006      	str	r0, [sp, #24]
 8018b72:	2800      	cmp	r0, #0
 8018b74:	f000 844c 	beq.w	8019410 <STM32Ipl_ReadImage+0xe50>
			lineData = xalloc(lineSize);
 8018b78:	4650      	mov	r0, sl
 8018b7a:	f000 ff35 	bl	80199e8 <xalloc>
			if (!lineData) {
 8018b7e:	4605      	mov	r5, r0
 8018b80:	2800      	cmp	r0, #0
 8018b82:	f000 866f 	beq.w	8019864 <STM32Ipl_ReadImage+0x12a4>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018b86:	9b05      	ldr	r3, [sp, #20]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	f340 8426 	ble.w	80193da <STM32Ipl_ReadImage+0xe1a>
 8018b8e:	1e5e      	subs	r6, r3, #1
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018b90:	9b04      	ldr	r3, [sp, #16]
 8018b92:	fb0a 3606 	mla	r6, sl, r6, r3
			if (f_lseek(fp, line) != FR_OK) {
 8018b96:	4631      	mov	r1, r6
 8018b98:	a82a      	add	r0, sp, #168	; 0xa8
 8018b9a:	f7fe f8c9 	bl	8016d30 <f_lseek>
 8018b9e:	bb80      	cbnz	r0, 8018c02 <STM32Ipl_ReadImage+0x642>
			for (uint32_t i = 0; i < abs(height); i++) {
 8018ba0:	9b05      	ldr	r3, [sp, #20]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	f000 841e 	beq.w	80193e4 <STM32Ipl_ReadImage+0xe24>
 8018ba8:	4604      	mov	r4, r0
 8018baa:	f340 8282 	ble.w	80190b2 <STM32Ipl_ReadImage+0xaf2>
 8018bae:	f8cd b014 	str.w	fp, [sp, #20]
 8018bb2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8018bb6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8018bba:	e002      	b.n	8018bc2 <STM32Ipl_ReadImage+0x602>
 8018bbc:	45a3      	cmp	fp, r4
 8018bbe:	f000 840f 	beq.w	80193e0 <STM32Ipl_ReadImage+0xe20>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018bc2:	464b      	mov	r3, r9
 8018bc4:	4652      	mov	r2, sl
 8018bc6:	4629      	mov	r1, r5
 8018bc8:	a82a      	add	r0, sp, #168	; 0xa8
					line -= lineSize;
 8018bca:	eba6 060a 	sub.w	r6, r6, sl
			for (uint32_t i = 0; i < abs(height); i++) {
 8018bce:	3401      	adds	r4, #1
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018bd0:	f7fd fd90 	bl	80166f4 <f_read>
 8018bd4:	2800      	cmp	r0, #0
 8018bd6:	f040 8289 	bne.w	80190ec <STM32Ipl_ReadImage+0xb2c>
 8018bda:	f8d9 3000 	ldr.w	r3, [r9]
 8018bde:	459a      	cmp	sl, r3
 8018be0:	f040 8284 	bne.w	80190ec <STM32Ipl_ReadImage+0xb2c>
				memcpy(outPixel, lineData, outLineSize);
 8018be4:	4640      	mov	r0, r8
 8018be6:	463a      	mov	r2, r7
 8018be8:	4629      	mov	r1, r5
				outPixel += outLineSize;
 8018bea:	44b8      	add	r8, r7
				memcpy(outPixel, lineData, outLineSize);
 8018bec:	f009 fb4e 	bl	802228c <memcpy>
					if (line >= dataOffset) {
 8018bf0:	9b04      	ldr	r3, [sp, #16]
 8018bf2:	42b3      	cmp	r3, r6
 8018bf4:	d8e2      	bhi.n	8018bbc <STM32Ipl_ReadImage+0x5fc>
						if (f_lseek(fp, line) != FR_OK) {
 8018bf6:	4631      	mov	r1, r6
 8018bf8:	a82a      	add	r0, sp, #168	; 0xa8
 8018bfa:	f7fe f899 	bl	8016d30 <f_lseek>
 8018bfe:	2800      	cmp	r0, #0
 8018c00:	d0dc      	beq.n	8018bbc <STM32Ipl_ReadImage+0x5fc>
							xfree(lineData);
 8018c02:	4628      	mov	r0, r5
							return stm32ipl_err_SeekingFile;
 8018c04:	f06f 0409 	mvn.w	r4, #9
							xfree(lineData);
 8018c08:	f000 fefc 	bl	8019a04 <xfree>
							xfree(outData);
 8018c0c:	9806      	ldr	r0, [sp, #24]
 8018c0e:	f000 fef9 	bl	8019a04 <xfree>
							return stm32ipl_err_SeekingFile;
 8018c12:	e519      	b.n	8018648 <STM32Ipl_ReadImage+0x88>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018c14:	9b04      	ldr	r3, [sp, #16]
 8018c16:	a82a      	add	r0, sp, #168	; 0xa8
			paletteSize = colorUsed * sizeof(uint32_t);
 8018c18:	00a6      	lsls	r6, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018c1a:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 8018c1e:	f7fe f887 	bl	8016d30 <f_lseek>
 8018c22:	2800      	cmp	r0, #0
 8018c24:	f47f aefe 	bne.w	8018a24 <STM32Ipl_ReadImage+0x464>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 8018c28:	adb6      	add	r5, sp, #728	; 0x2d8
 8018c2a:	464b      	mov	r3, r9
 8018c2c:	4632      	mov	r2, r6
 8018c2e:	a82a      	add	r0, sp, #168	; 0xa8
 8018c30:	4629      	mov	r1, r5
 8018c32:	f7fd fd5f 	bl	80166f4 <f_read>
 8018c36:	2800      	cmp	r0, #0
 8018c38:	f47f aef1 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 8018c3c:	f8d9 3000 	ldr.w	r3, [r9]
 8018c40:	429e      	cmp	r6, r3
 8018c42:	f47f aeec 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
	for (uint32_t i = 0; i < colorUsed; i++) {
 8018c46:	4602      	mov	r2, r0
 8018c48:	4628      	mov	r0, r5
		uint8_t b = palette[i];
 8018c4a:	f850 3b04 	ldr.w	r3, [r0], #4
	for (uint32_t i = 0; i < colorUsed; i++) {
 8018c4e:	3201      	adds	r2, #1
		uint8_t b = palette[i];
 8018c50:	b2de      	uxtb	r6, r3
		if ((b != g) | (b != r))
 8018c52:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8018c56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018c5a:	42b3      	cmp	r3, r6
 8018c5c:	f040 8503 	bne.w	8019666 <STM32Ipl_ReadImage+0x10a6>
 8018c60:	1b89      	subs	r1, r1, r6
 8018c62:	bf18      	it	ne
 8018c64:	2101      	movne	r1, #1
 8018c66:	2900      	cmp	r1, #0
 8018c68:	f040 84fd 	bne.w	8019666 <STM32Ipl_ReadImage+0x10a6>
	for (uint32_t i = 0; i < colorUsed; i++) {
 8018c6c:	4294      	cmp	r4, r2
 8018c6e:	d1ec      	bne.n	8018c4a <STM32Ipl_ReadImage+0x68a>
				outData = xalloc(width * abs(height));
 8018c70:	9a05      	ldr	r2, [sp, #20]
 8018c72:	4688      	mov	r8, r1
 8018c74:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8018c78:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8018c7c:	fb03 f00b 	mul.w	r0, r3, fp
 8018c80:	9306      	str	r3, [sp, #24]
 8018c82:	f000 feb1 	bl	80199e8 <xalloc>
				if (!outData)
 8018c86:	ee08 0a10 	vmov	s16, r0
 8018c8a:	2800      	cmp	r0, #0
 8018c8c:	f000 83c0 	beq.w	8019410 <STM32Ipl_ReadImage+0xe50>
				lineData = xalloc(lineSize);
 8018c90:	4650      	mov	r0, sl
 8018c92:	f000 fea9 	bl	80199e8 <xalloc>
				if (!lineData) {
 8018c96:	4606      	mov	r6, r0
 8018c98:	2800      	cmp	r0, #0
 8018c9a:	f000 85ba 	beq.w	8019812 <STM32Ipl_ReadImage+0x1252>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018c9e:	9b05      	ldr	r3, [sp, #20]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	dd03      	ble.n	8018cac <STM32Ipl_ReadImage+0x6ec>
 8018ca4:	f103 38ff 	add.w	r8, r3, #4294967295
 8018ca8:	fb0a f808 	mul.w	r8, sl, r8
 8018cac:	9b04      	ldr	r3, [sp, #16]
				if (f_lseek(fp, line) != FR_OK) {
 8018cae:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018cb0:	eb03 0708 	add.w	r7, r3, r8
				if (f_lseek(fp, line) != FR_OK) {
 8018cb4:	4639      	mov	r1, r7
 8018cb6:	f7fe f83b 	bl	8016d30 <f_lseek>
 8018cba:	2800      	cmp	r0, #0
 8018cbc:	f040 8426 	bne.w	801950c <STM32Ipl_ReadImage+0xf4c>
				for (uint32_t i = 0; i < abs(height); i++) {
 8018cc0:	9b06      	ldr	r3, [sp, #24]
 8018cc2:	9307      	str	r3, [sp, #28]
 8018cc4:	9b05      	ldr	r3, [sp, #20]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	f000 85de 	beq.w	8019888 <STM32Ipl_ReadImage+0x12c8>
					for (uint32_t j = 0; j < width; j++)
 8018ccc:	464b      	mov	r3, r9
				for (uint32_t i = 0; i < abs(height); i++) {
 8018cce:	4680      	mov	r8, r0
					for (uint32_t j = 0; j < width; j++)
 8018cd0:	46d1      	mov	r9, sl
 8018cd2:	ee18 4a10 	vmov	r4, s16
 8018cd6:	469a      	mov	sl, r3
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018cd8:	4653      	mov	r3, sl
 8018cda:	464a      	mov	r2, r9
 8018cdc:	4631      	mov	r1, r6
 8018cde:	a82a      	add	r0, sp, #168	; 0xa8
 8018ce0:	f7fd fd08 	bl	80166f4 <f_read>
 8018ce4:	2800      	cmp	r0, #0
 8018ce6:	f040 8584 	bne.w	80197f2 <STM32Ipl_ReadImage+0x1232>
 8018cea:	f8da 1000 	ldr.w	r1, [sl]
 8018cee:	4589      	cmp	r9, r1
 8018cf0:	f040 857f 	bne.w	80197f2 <STM32Ipl_ReadImage+0x1232>
					for (uint32_t j = 0; j < width; j++)
 8018cf4:	f1bb 0f00 	cmp.w	fp, #0
 8018cf8:	d00a      	beq.n	8018d10 <STM32Ipl_ReadImage+0x750>
 8018cfa:	eb04 0c0b 	add.w	ip, r4, fp
 8018cfe:	4631      	mov	r1, r6
						*outPixel++ = palette[*ptr++];
 8018d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d04:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8018d08:	f804 3b01 	strb.w	r3, [r4], #1
					for (uint32_t j = 0; j < width; j++)
 8018d0c:	4564      	cmp	r4, ip
 8018d0e:	d1f7      	bne.n	8018d00 <STM32Ipl_ReadImage+0x740>
					if (height > 0) {
 8018d10:	9b05      	ldr	r3, [sp, #20]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	f340 837a 	ble.w	801940c <STM32Ipl_ReadImage+0xe4c>
						line -= lineSize;
 8018d18:	eba7 0709 	sub.w	r7, r7, r9
						if (line >= dataOffset) {
 8018d1c:	9b04      	ldr	r3, [sp, #16]
 8018d1e:	42bb      	cmp	r3, r7
 8018d20:	f240 83ed 	bls.w	80194fe <STM32Ipl_ReadImage+0xf3e>
				for (uint32_t i = 0; i < abs(height); i++) {
 8018d24:	f108 0801 	add.w	r8, r8, #1
 8018d28:	9b06      	ldr	r3, [sp, #24]
 8018d2a:	4598      	cmp	r8, r3
 8018d2c:	d1d4      	bne.n	8018cd8 <STM32Ipl_ReadImage+0x718>
				xfree(lineData);
 8018d2e:	4630      	mov	r0, r6
 8018d30:	f000 fe68 	bl	8019a04 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_GRAYSCALE, outData);
 8018d34:	9a07      	ldr	r2, [sp, #28]
 8018d36:	4659      	mov	r1, fp
 8018d38:	9803      	ldr	r0, [sp, #12]
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	ed8d 8a00 	vstr	s16, [sp]
 8018d40:	f7ff f8aa 	bl	8017e98 <STM32Ipl_Init>
	return stm32ipl_err_Ok;
 8018d44:	2400      	movs	r4, #0
			break;
 8018d46:	e47f      	b.n	8018648 <STM32Ipl_ReadImage+0x88>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018d48:	9b04      	ldr	r3, [sp, #16]
 8018d4a:	a82a      	add	r0, sp, #168	; 0xa8
 8018d4c:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
			paletteSize = colorUsed * sizeof(uint32_t);
 8018d50:	00a4      	lsls	r4, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018d52:	f7fd ffed 	bl	8016d30 <f_lseek>
 8018d56:	2800      	cmp	r0, #0
 8018d58:	f47f ae64 	bne.w	8018a24 <STM32Ipl_ReadImage+0x464>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 8018d5c:	adb6      	add	r5, sp, #728	; 0x2d8
 8018d5e:	464b      	mov	r3, r9
 8018d60:	4622      	mov	r2, r4
 8018d62:	a82a      	add	r0, sp, #168	; 0xa8
 8018d64:	4629      	mov	r1, r5
 8018d66:	f7fd fcc5 	bl	80166f4 <f_read>
 8018d6a:	2800      	cmp	r0, #0
 8018d6c:	f47f ae57 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 8018d70:	f8d9 3000 	ldr.w	r3, [r9]
 8018d74:	429c      	cmp	r4, r3
 8018d76:	f47f ae52 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
			outData = xalloc(width * abs(height) * 2);
 8018d7a:	9a05      	ldr	r2, [sp, #20]
 8018d7c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8018d80:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8018d84:	fb03 f00b 	mul.w	r0, r3, fp
 8018d88:	9308      	str	r3, [sp, #32]
 8018d8a:	0040      	lsls	r0, r0, #1
 8018d8c:	f000 fe2c 	bl	80199e8 <xalloc>
			if (!outData)
 8018d90:	ee08 0a10 	vmov	s16, r0
 8018d94:	2800      	cmp	r0, #0
 8018d96:	f000 833b 	beq.w	8019410 <STM32Ipl_ReadImage+0xe50>
			lineData = xalloc(lineSize);
 8018d9a:	4650      	mov	r0, sl
 8018d9c:	f000 fe24 	bl	80199e8 <xalloc>
			if (!lineData) {
 8018da0:	4680      	mov	r8, r0
 8018da2:	2800      	cmp	r0, #0
 8018da4:	f000 8535 	beq.w	8019812 <STM32Ipl_ReadImage+0x1252>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018da8:	9b05      	ldr	r3, [sp, #20]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	f340 852c 	ble.w	8019808 <STM32Ipl_ReadImage+0x1248>
 8018db0:	3b01      	subs	r3, #1
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018db2:	9a04      	ldr	r2, [sp, #16]
 8018db4:	fb0a 2303 	mla	r3, sl, r3, r2
 8018db8:	4619      	mov	r1, r3
 8018dba:	9306      	str	r3, [sp, #24]
			if (f_lseek(fp, line) != FR_OK) {
 8018dbc:	a82a      	add	r0, sp, #168	; 0xa8
 8018dbe:	f7fd ffb7 	bl	8016d30 <f_lseek>
 8018dc2:	2800      	cmp	r0, #0
 8018dc4:	f040 837d 	bne.w	80194c2 <STM32Ipl_ReadImage+0xf02>
			for (uint32_t i = 0; i < abs(height); i++) {
 8018dc8:	9b08      	ldr	r3, [sp, #32]
 8018dca:	9309      	str	r3, [sp, #36]	; 0x24
 8018dcc:	9b05      	ldr	r3, [sp, #20]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	f000 854f 	beq.w	8019872 <STM32Ipl_ReadImage+0x12b2>
				for (uint32_t j = 0; j < width;) {
 8018dd4:	ee18 4a10 	vmov	r4, s16
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018dd8:	4eb7      	ldr	r6, [pc, #732]	; (80190b8 <STM32Ipl_ReadImage+0xaf8>)
 8018dda:	465f      	mov	r7, fp
			for (uint32_t i = 0; i < abs(height); i++) {
 8018ddc:	9007      	str	r0, [sp, #28]
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018dde:	464b      	mov	r3, r9
 8018de0:	4652      	mov	r2, sl
 8018de2:	4641      	mov	r1, r8
 8018de4:	a82a      	add	r0, sp, #168	; 0xa8
 8018de6:	f7fd fc85 	bl	80166f4 <f_read>
 8018dea:	2800      	cmp	r0, #0
 8018dec:	f040 84f6 	bne.w	80197dc <STM32Ipl_ReadImage+0x121c>
 8018df0:	f8d9 3000 	ldr.w	r3, [r9]
 8018df4:	459a      	cmp	sl, r3
 8018df6:	f040 84f1 	bne.w	80197dc <STM32Ipl_ReadImage+0x121c>
				for (uint32_t j = 0; j < width;) {
 8018dfa:	2f00      	cmp	r7, #0
 8018dfc:	f000 818a 	beq.w	8019114 <STM32Ipl_ReadImage+0xb54>
 8018e00:	4603      	mov	r3, r0
 8018e02:	46c6      	mov	lr, r8
 8018e04:	e004      	b.n	8018e10 <STM32Ipl_ReadImage+0x850>
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018e06:	3402      	adds	r4, #2
					j++;
 8018e08:	3302      	adds	r3, #2
				for (uint32_t j = 0; j < width;) {
 8018e0a:	42bb      	cmp	r3, r7
 8018e0c:	f080 8182 	bcs.w	8019114 <STM32Ipl_ReadImage+0xb54>
					uint8_t value = (*ptr++);
 8018e10:	f81e 0b01 	ldrb.w	r0, [lr], #1
					if (j < width) {
 8018e14:	f103 0c01 	add.w	ip, r3, #1
					uint8_t r = palette[index] >> 16;
 8018e18:	0902      	lsrs	r2, r0, #4
					if (j < width) {
 8018e1a:	4567      	cmp	r7, ip
						r = palette[index] >> 16;
 8018e1c:	f000 000f 	and.w	r0, r0, #15
					uint8_t r = palette[index] >> 16;
 8018e20:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018e24:	ea06 2112 	and.w	r1, r6, r2, lsr #8
 8018e28:	f3c2 0bc4 	ubfx	fp, r2, #3, #5
 8018e2c:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8018e30:	ea4b 0101 	orr.w	r1, fp, r1
 8018e34:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018e38:	ea41 0102 	orr.w	r1, r1, r2
 8018e3c:	8021      	strh	r1, [r4, #0]
					if (j < width) {
 8018e3e:	d9e2      	bls.n	8018e06 <STM32Ipl_ReadImage+0x846>
						r = palette[index] >> 16;
 8018e40:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018e44:	3404      	adds	r4, #4
 8018e46:	ea06 2012 	and.w	r0, r6, r2, lsr #8
 8018e4a:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 8018e4e:	0952      	lsrs	r2, r2, #5
 8018e50:	4301      	orrs	r1, r0
 8018e52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018e56:	430a      	orrs	r2, r1
 8018e58:	f824 2c02 	strh.w	r2, [r4, #-2]
 8018e5c:	e7d4      	b.n	8018e08 <STM32Ipl_ReadImage+0x848>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018e5e:	9b04      	ldr	r3, [sp, #16]
 8018e60:	a82a      	add	r0, sp, #168	; 0xa8
 8018e62:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
			paletteSize = colorUsed * sizeof(uint32_t);
 8018e66:	00a4      	lsls	r4, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8018e68:	f7fd ff62 	bl	8016d30 <f_lseek>
 8018e6c:	2800      	cmp	r0, #0
 8018e6e:	f47f add9 	bne.w	8018a24 <STM32Ipl_ReadImage+0x464>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 8018e72:	adb6      	add	r5, sp, #728	; 0x2d8
 8018e74:	464b      	mov	r3, r9
 8018e76:	4622      	mov	r2, r4
 8018e78:	a82a      	add	r0, sp, #168	; 0xa8
 8018e7a:	4629      	mov	r1, r5
 8018e7c:	f7fd fc3a 	bl	80166f4 <f_read>
 8018e80:	2800      	cmp	r0, #0
 8018e82:	f47f adcc 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 8018e86:	f8d9 3000 	ldr.w	r3, [r9]
 8018e8a:	429c      	cmp	r4, r3
 8018e8c:	f47f adc7 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 8018e90:	682b      	ldr	r3, [r5, #0]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	f040 8345 	bne.w	8019522 <STM32Ipl_ReadImage+0xf62>
 8018e98:	686a      	ldr	r2, [r5, #4]
 8018e9a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	f000 8348 	beq.w	8019534 <STM32Ipl_ReadImage+0xf74>
				outData = xalloc(width * abs(height) * 2);
 8018ea4:	9a05      	ldr	r2, [sp, #20]
 8018ea6:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8018eaa:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8018eae:	fb03 f00b 	mul.w	r0, r3, fp
 8018eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8018eb4:	0040      	lsls	r0, r0, #1
 8018eb6:	f000 fd97 	bl	80199e8 <xalloc>
				if (!outData)
 8018eba:	ee08 0a10 	vmov	s16, r0
 8018ebe:	2800      	cmp	r0, #0
 8018ec0:	f000 82a6 	beq.w	8019410 <STM32Ipl_ReadImage+0xe50>
				lineData = xalloc(lineSize);
 8018ec4:	4650      	mov	r0, sl
 8018ec6:	f000 fd8f 	bl	80199e8 <xalloc>
				if (!lineData) {
 8018eca:	ee08 0a90 	vmov	s17, r0
 8018ece:	2800      	cmp	r0, #0
 8018ed0:	f000 849f 	beq.w	8019812 <STM32Ipl_ReadImage+0x1252>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018ed4:	9b05      	ldr	r3, [sp, #20]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	f340 847b 	ble.w	80197d2 <STM32Ipl_ReadImage+0x1212>
 8018edc:	3b01      	subs	r3, #1
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8018ede:	9a04      	ldr	r2, [sp, #16]
 8018ee0:	fb0a 2303 	mla	r3, sl, r3, r2
 8018ee4:	4619      	mov	r1, r3
 8018ee6:	9307      	str	r3, [sp, #28]
				if (f_lseek(fp, line) != FR_OK) {
 8018ee8:	a82a      	add	r0, sp, #168	; 0xa8
 8018eea:	f7fd ff21 	bl	8016d30 <f_lseek>
 8018eee:	2800      	cmp	r0, #0
 8018ef0:	f040 82f9 	bne.w	80194e6 <STM32Ipl_ReadImage+0xf26>
				for (uint32_t i = 0; i < abs(height); i++) {
 8018ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ef8:	9b05      	ldr	r3, [sp, #20]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	f000 84b0 	beq.w	8019860 <STM32Ipl_ReadImage+0x12a0>
 8018f00:	ea4f 034b 	mov.w	r3, fp, lsl #1
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018f04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80190b8 <STM32Ipl_ReadImage+0xaf8>
 8018f08:	465e      	mov	r6, fp
 8018f0a:	ee18 7a90 	vmov	r7, s17
				for (uint32_t i = 0; i < abs(height); i++) {
 8018f0e:	9008      	str	r0, [sp, #32]
 8018f10:	930a      	str	r3, [sp, #40]	; 0x28
					for (uint32_t j = 0; j < width; k--, j++) {
 8018f12:	ed8d 8a06 	vstr	s16, [sp, #24]
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8018f16:	464b      	mov	r3, r9
 8018f18:	4652      	mov	r2, sl
 8018f1a:	4639      	mov	r1, r7
 8018f1c:	a82a      	add	r0, sp, #168	; 0xa8
 8018f1e:	f7fd fbe9 	bl	80166f4 <f_read>
 8018f22:	2800      	cmp	r0, #0
 8018f24:	f040 8449 	bne.w	80197ba <STM32Ipl_ReadImage+0x11fa>
 8018f28:	f8d9 3000 	ldr.w	r3, [r9]
 8018f2c:	459a      	cmp	sl, r3
 8018f2e:	f040 8444 	bne.w	80197ba <STM32Ipl_ReadImage+0x11fa>
					for (uint32_t j = 0; j < width; k--, j++) {
 8018f32:	2e00      	cmp	r6, #0
 8018f34:	f000 811b 	beq.w	801916e <STM32Ipl_ReadImage+0xbae>
					uint8_t value = 0;
 8018f38:	4686      	mov	lr, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 8018f3a:	9a06      	ldr	r2, [sp, #24]
 8018f3c:	46bc      	mov	ip, r7
 8018f3e:	4603      	mov	r3, r0
 8018f40:	e01a      	b.n	8018f78 <STM32Ipl_ReadImage+0x9b8>
						index = (value >> k) & 0x1;
 8018f42:	4601      	mov	r1, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 8018f44:	fa5f f08b 	uxtb.w	r0, fp
						index = (value >> k) & 0x1;
 8018f48:	fa4e f101 	asr.w	r1, lr, r1
					for (uint32_t j = 0; j < width; k--, j++) {
 8018f4c:	3301      	adds	r3, #1
						r = palette[index] >> 16;
 8018f4e:	f001 0101 	and.w	r1, r1, #1
					for (uint32_t j = 0; j < width; k--, j++) {
 8018f52:	42b3      	cmp	r3, r6
						r = palette[index] >> 16;
 8018f54:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8018f58:	ea08 2411 	and.w	r4, r8, r1, lsr #8
 8018f5c:	f3c1 0bc4 	ubfx	fp, r1, #3, #5
 8018f60:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8018f64:	ea4b 0404 	orr.w	r4, fp, r4
 8018f68:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018f6c:	ea41 0104 	orr.w	r1, r1, r4
 8018f70:	f822 1b02 	strh.w	r1, [r2], #2
					for (uint32_t j = 0; j < width; k--, j++) {
 8018f74:	f000 80f7 	beq.w	8019166 <STM32Ipl_ReadImage+0xba6>
						if (!(j % 8)) {
 8018f78:	f013 0f07 	tst.w	r3, #7
							value = (*ptr++);
 8018f7c:	4664      	mov	r4, ip
					for (uint32_t j = 0; j < width; k--, j++) {
 8018f7e:	f100 3bff 	add.w	fp, r0, #4294967295
							value = (*ptr++);
 8018f82:	f04f 0107 	mov.w	r1, #7
						if (!(j % 8)) {
 8018f86:	d1dc      	bne.n	8018f42 <STM32Ipl_ReadImage+0x982>
							value = (*ptr++);
 8018f88:	f814 eb01 	ldrb.w	lr, [r4], #1
 8018f8c:	2006      	movs	r0, #6
 8018f8e:	46a4      	mov	ip, r4
 8018f90:	e7da      	b.n	8018f48 <STM32Ipl_ReadImage+0x988>
	switch (bitCount) {
 8018f92:	241f      	movs	r4, #31
 8018f94:	f44f 7578 	mov.w	r5, #992	; 0x3e0
 8018f98:	f44f 46f8 	mov.w	r6, #31744	; 0x7c00
 8018f9c:	e49d      	b.n	80188da <STM32Ipl_ReadImage+0x31a>
 8018f9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018fa0:	b9c2      	cbnz	r2, 8018fd4 <STM32Ipl_ReadImage+0xa14>
 8018fa2:	f1a8 0c02 	sub.w	ip, r8, #2
				for (uint32_t j = 0; j < width; j++) {
 8018fa6:	4638      	mov	r0, r7
					uint16_t value = *inPixel;
 8018fa8:	f83c 1f02 	ldrh.w	r1, [ip, #2]!
				for (uint32_t j = 0; j < width; j++) {
 8018fac:	3201      	adds	r2, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8018fae:	4b43      	ldr	r3, [pc, #268]	; (80190bc <STM32Ipl_ReadImage+0xafc>)
 8018fb0:	ea01 0e05 	and.w	lr, r1, r5
				for (uint32_t j = 0; j < width; j++) {
 8018fb4:	4294      	cmp	r4, r2
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8018fb6:	ea03 0341 	and.w	r3, r3, r1, lsl #1
 8018fba:	ea01 010b 	and.w	r1, r1, fp
 8018fbe:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 8018fc2:	ea43 0301 	orr.w	r3, r3, r1
 8018fc6:	f820 3b02 	strh.w	r3, [r0], #2
				for (uint32_t j = 0; j < width; j++) {
 8018fca:	d1ed      	bne.n	8018fa8 <STM32Ipl_ReadImage+0x9e8>
 8018fcc:	e505      	b.n	80189da <STM32Ipl_ReadImage+0x41a>
					line += lineSize;
 8018fce:	4453      	add	r3, sl
 8018fd0:	9306      	str	r3, [sp, #24]
 8018fd2:	e510      	b.n	80189f6 <STM32Ipl_ReadImage+0x436>
 8018fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fd6:	2b09      	cmp	r3, #9
 8018fd8:	f240 81e9 	bls.w	80193ae <STM32Ipl_ReadImage+0xdee>
 8018fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018fde:	429f      	cmp	r7, r3
 8018fe0:	f000 81e5 	beq.w	80193ae <STM32Ipl_ReadImage+0xdee>
 8018fe4:	463a      	mov	r2, r7
 8018fe6:	4643      	mov	r3, r8
 8018fe8:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
					uint16_t value = *inPixel;
 8018fec:	3001      	adds	r0, #1
 8018fee:	f853 1b04 	ldr.w	r1, [r3], #4
						*outPixel++ = value;
 8018ff2:	4560      	cmp	r0, ip
 8018ff4:	f842 1b04 	str.w	r1, [r2], #4
				for (uint32_t j = 0; j < width; j++) {
 8018ff8:	d1f8      	bne.n	8018fec <STM32Ipl_ReadImage+0xa2c>
 8018ffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018ffc:	429c      	cmp	r4, r3
 8018ffe:	f43f acec 	beq.w	80189da <STM32Ipl_ReadImage+0x41a>
					uint16_t value = *inPixel;
 8019002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019006:	881b      	ldrh	r3, [r3, #0]
						*outPixel++ = value;
 8019008:	52bb      	strh	r3, [r7, r2]
				for (uint32_t j = 0; j < width; j++) {
 801900a:	e4e6      	b.n	80189da <STM32Ipl_ReadImage+0x41a>
						if (f_lseek(fp, line) != FR_OK) {
 801900c:	4619      	mov	r1, r3
 801900e:	a82a      	add	r0, sp, #168	; 0xa8
 8019010:	f7fd fe8e 	bl	8016d30 <f_lseek>
 8019014:	2800      	cmp	r0, #0
 8019016:	f43f acee 	beq.w	80189f6 <STM32Ipl_ReadImage+0x436>
							xfree(lineData);
 801901a:	4640      	mov	r0, r8
							return stm32ipl_err_SeekingFile;
 801901c:	f06f 0409 	mvn.w	r4, #9
							xfree(lineData);
 8019020:	f000 fcf0 	bl	8019a04 <xfree>
							xfree(outData);
 8019024:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019026:	f000 fced 	bl	8019a04 <xfree>
							return stm32ipl_err_SeekingFile;
 801902a:	f7ff bb0d 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
	if (height == 0 || width == 0)
 801902e:	4646      	mov	r6, r8
 8019030:	f1ba 0f00 	cmp.w	sl, #0
 8019034:	f000 840c 	beq.w	8019850 <STM32Ipl_ReadImage+0x1290>
 8019038:	fab8 f888 	clz	r8, r8
 801903c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019040:	2e00      	cmp	r6, #0
 8019042:	f000 8405 	beq.w	8019850 <STM32Ipl_ReadImage+0x1290>
 8019046:	46a1      	mov	r9, r4
			if (sector[0] == '#') {
 8019048:	2a23      	cmp	r2, #35	; 0x23
 801904a:	d026      	beq.n	801909a <STM32Ipl_ReadImage+0xada>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801904c:	3a30      	subs	r2, #48	; 0x30
 801904e:	b2d3      	uxtb	r3, r2
					number = sector[0] - '0';
 8019050:	2b09      	cmp	r3, #9
 8019052:	bf96      	itet	ls
 8019054:	4690      	movls	r8, r2
 8019056:	2400      	movhi	r4, #0
 8019058:	2402      	movls	r4, #2
			if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 801905a:	464b      	mov	r3, r9
 801905c:	2201      	movs	r2, #1
 801905e:	4629      	mov	r1, r5
 8019060:	a82a      	add	r0, sp, #168	; 0xa8
 8019062:	f7fd fb47 	bl	80166f4 <f_read>
 8019066:	2800      	cmp	r0, #0
 8019068:	f47f acd9 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 801906c:	f8d9 3000 	ldr.w	r3, [r9]
 8019070:	2b01      	cmp	r3, #1
 8019072:	f47f acd4 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
		if (mode == EAT_WHITESPACE) {
 8019076:	b174      	cbz	r4, 8019096 <STM32Ipl_ReadImage+0xad6>
			if (mode == EAT_COMMENT) {
 8019078:	2c01      	cmp	r4, #1
						number = (number * 10) + sector[0] - '0';
 801907a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 801907e:	f04f 0402 	mov.w	r4, #2
			if (mode == EAT_COMMENT) {
 8019082:	d00c      	beq.n	801909e <STM32Ipl_ReadImage+0xade>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019084:	782a      	ldrb	r2, [r5, #0]
 8019086:	3a30      	subs	r2, #48	; 0x30
 8019088:	b2d1      	uxtb	r1, r2
 801908a:	2909      	cmp	r1, #9
 801908c:	f200 8094 	bhi.w	80191b8 <STM32Ipl_ReadImage+0xbf8>
						number = (number * 10) + sector[0] - '0';
 8019090:	eb02 0843 	add.w	r8, r2, r3, lsl #1
	} while (!valid);
 8019094:	e7e1      	b.n	801905a <STM32Ipl_ReadImage+0xa9a>
			if (sector[0] == '#') {
 8019096:	782a      	ldrb	r2, [r5, #0]
 8019098:	e7d6      	b.n	8019048 <STM32Ipl_ReadImage+0xa88>
				mode = EAT_COMMENT;
 801909a:	2401      	movs	r4, #1
 801909c:	e7dd      	b.n	801905a <STM32Ipl_ReadImage+0xa9a>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 801909e:	782c      	ldrb	r4, [r5, #0]
 80190a0:	2c0d      	cmp	r4, #13
 80190a2:	bf18      	it	ne
 80190a4:	2c0a      	cmpne	r4, #10
 80190a6:	bf0c      	ite	eq
 80190a8:	2401      	moveq	r4, #1
 80190aa:	2400      	movne	r4, #0
					mode = EAT_NUMBER;
 80190ac:	f084 0401 	eor.w	r4, r4, #1
 80190b0:	e7d3      	b.n	801905a <STM32Ipl_ReadImage+0xa9a>
			for (uint32_t i = 0; i < abs(height); i++) {
 80190b2:	e9dd 6806 	ldrd	r6, r8, [sp, #24]
 80190b6:	e010      	b.n	80190da <STM32Ipl_ReadImage+0xb1a>
 80190b8:	fffff800 	.word	0xfffff800
 80190bc:	fffff000 	.word	0xfffff000
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 80190c0:	f8d9 3000 	ldr.w	r3, [r9]
 80190c4:	459a      	cmp	sl, r3
 80190c6:	d111      	bne.n	80190ec <STM32Ipl_ReadImage+0xb2c>
				memcpy(outPixel, lineData, outLineSize);
 80190c8:	4630      	mov	r0, r6
 80190ca:	463a      	mov	r2, r7
 80190cc:	4629      	mov	r1, r5
				outPixel += outLineSize;
 80190ce:	443e      	add	r6, r7
				memcpy(outPixel, lineData, outLineSize);
 80190d0:	f009 f8dc 	bl	802228c <memcpy>
			for (uint32_t i = 0; i < abs(height); i++) {
 80190d4:	45a0      	cmp	r8, r4
 80190d6:	f000 8185 	beq.w	80193e4 <STM32Ipl_ReadImage+0xe24>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 80190da:	464b      	mov	r3, r9
 80190dc:	4652      	mov	r2, sl
 80190de:	4629      	mov	r1, r5
 80190e0:	a82a      	add	r0, sp, #168	; 0xa8
			for (uint32_t i = 0; i < abs(height); i++) {
 80190e2:	3401      	adds	r4, #1
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 80190e4:	f7fd fb06 	bl	80166f4 <f_read>
 80190e8:	2800      	cmp	r0, #0
 80190ea:	d0e9      	beq.n	80190c0 <STM32Ipl_ReadImage+0xb00>
					xfree(lineData);
 80190ec:	4628      	mov	r0, r5
					return stm32ipl_err_ReadingFile;
 80190ee:	f06f 0407 	mvn.w	r4, #7
					xfree(lineData);
 80190f2:	f000 fc87 	bl	8019a04 <xfree>
					xfree(outData);
 80190f6:	9806      	ldr	r0, [sp, #24]
 80190f8:	f000 fc84 	bl	8019a04 <xfree>
					return stm32ipl_err_ReadingFile;
 80190fc:	f7ff baa4 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
					xfree(lineData);
 8019100:	4640      	mov	r0, r8
					return stm32ipl_err_ReadingFile;
 8019102:	f06f 0407 	mvn.w	r4, #7
					xfree(lineData);
 8019106:	f000 fc7d 	bl	8019a04 <xfree>
					xfree(outData);
 801910a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801910c:	f000 fc7a 	bl	8019a04 <xfree>
					return stm32ipl_err_ReadingFile;
 8019110:	f7ff ba9a 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
				if (height > 0) {
 8019114:	9b05      	ldr	r3, [sp, #20]
 8019116:	2b00      	cmp	r3, #0
					line -= lineSize;
 8019118:	9b06      	ldr	r3, [sp, #24]
				if (height > 0) {
 801911a:	f340 8171 	ble.w	8019400 <STM32Ipl_ReadImage+0xe40>
					line -= lineSize;
 801911e:	eba3 030a 	sub.w	r3, r3, sl
					if (line >= dataOffset) {
 8019122:	9a04      	ldr	r2, [sp, #16]
 8019124:	429a      	cmp	r2, r3
					line -= lineSize;
 8019126:	9306      	str	r3, [sp, #24]
					if (line >= dataOffset) {
 8019128:	f240 81c4 	bls.w	80194b4 <STM32Ipl_ReadImage+0xef4>
			for (uint32_t i = 0; i < abs(height); i++) {
 801912c:	9b07      	ldr	r3, [sp, #28]
 801912e:	9a08      	ldr	r2, [sp, #32]
 8019130:	3301      	adds	r3, #1
 8019132:	4293      	cmp	r3, r2
 8019134:	9307      	str	r3, [sp, #28]
 8019136:	f47f ae52 	bne.w	8018dde <STM32Ipl_ReadImage+0x81e>
 801913a:	46bb      	mov	fp, r7
			xfree(lineData);
 801913c:	4640      	mov	r0, r8
	return stm32ipl_err_Ok;
 801913e:	2400      	movs	r4, #0
			xfree(lineData);
 8019140:	f000 fc60 	bl	8019a04 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 8019144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019146:	4659      	mov	r1, fp
 8019148:	9803      	ldr	r0, [sp, #12]
 801914a:	2302      	movs	r3, #2
 801914c:	ed8d 8a00 	vstr	s16, [sp]
 8019150:	f7fe fea2 	bl	8017e98 <STM32Ipl_Init>
			break;
 8019154:	f7ff ba78 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
		f_close(&fp);
 8019158:	a82a      	add	r0, sp, #168	; 0xa8
		return stm32ipl_err_ReadingFile;
 801915a:	f06f 0407 	mvn.w	r4, #7
		f_close(&fp);
 801915e:	f7fd fd57 	bl	8016c10 <f_close>
		return stm32ipl_err_ReadingFile;
 8019162:	f7ff ba74 	b.w	801864e <STM32Ipl_ReadImage+0x8e>
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8019166:	9b06      	ldr	r3, [sp, #24]
 8019168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801916a:	4413      	add	r3, r2
 801916c:	9306      	str	r3, [sp, #24]
					if (height > 0) {
 801916e:	9b05      	ldr	r3, [sp, #20]
 8019170:	2b00      	cmp	r3, #0
						line -= lineSize;
 8019172:	9b07      	ldr	r3, [sp, #28]
					if (height > 0) {
 8019174:	f340 8147 	ble.w	8019406 <STM32Ipl_ReadImage+0xe46>
						line -= lineSize;
 8019178:	eba3 030a 	sub.w	r3, r3, sl
						if (line >= dataOffset) {
 801917c:	9a04      	ldr	r2, [sp, #16]
 801917e:	429a      	cmp	r2, r3
						line -= lineSize;
 8019180:	9307      	str	r3, [sp, #28]
						if (line >= dataOffset) {
 8019182:	f240 81a9 	bls.w	80194d8 <STM32Ipl_ReadImage+0xf18>
				for (uint32_t i = 0; i < abs(height); i++) {
 8019186:	9b08      	ldr	r3, [sp, #32]
 8019188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801918a:	3301      	adds	r3, #1
 801918c:	4293      	cmp	r3, r2
 801918e:	9308      	str	r3, [sp, #32]
 8019190:	f47f aec1 	bne.w	8018f16 <STM32Ipl_ReadImage+0x956>
 8019194:	46b3      	mov	fp, r6
				xfree(lineData);
 8019196:	ee18 0a90 	vmov	r0, s17
 801919a:	f000 fc33 	bl	8019a04 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 801919e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 80191a0:	4659      	mov	r1, fp
 80191a2:	9803      	ldr	r0, [sp, #12]
 80191a4:	2302      	movs	r3, #2
 80191a6:	ed8d 8a00 	vstr	s16, [sp]
 80191aa:	f7fe fe75 	bl	8017e98 <STM32Ipl_Init>
 80191ae:	e5c9      	b.n	8018d44 <STM32Ipl_ReadImage+0x784>
		return stm32ipl_err_InvalidParameter;
 80191b0:	f06f 0401 	mvn.w	r4, #1
 80191b4:	f7ff ba4b 	b.w	801864e <STM32Ipl_ReadImage+0x8e>
	if (number > 255)
 80191b8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80191bc:	464c      	mov	r4, r9
 80191be:	f200 834b 	bhi.w	8019858 <STM32Ipl_ReadImage+0x1298>
	switch (number_ppm) {
 80191c2:	2f04      	cmp	r7, #4
 80191c4:	f63f aa3e 	bhi.w	8018644 <STM32Ipl_ReadImage+0x84>
 80191c8:	a301      	add	r3, pc, #4	; (adr r3, 80191d0 <STM32Ipl_ReadImage+0xc10>)
 80191ca:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80191ce:	bf00      	nop
 80191d0:	08019305 	.word	0x08019305
 80191d4:	0801927f 	.word	0x0801927f
 80191d8:	08018645 	.word	0x08018645
 80191dc:	0801923b 	.word	0x0801923b
 80191e0:	080191e5 	.word	0x080191e5
			size = width * height * 3;
 80191e4:	fb0a f706 	mul.w	r7, sl, r6
 80191e8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
			outData = xalloc(size);
 80191ec:	4638      	mov	r0, r7
 80191ee:	f000 fbfb 	bl	80199e8 <xalloc>
			if (!outData)
 80191f2:	4605      	mov	r5, r0
 80191f4:	2800      	cmp	r0, #0
 80191f6:	f000 810b 	beq.w	8019410 <STM32Ipl_ReadImage+0xe50>
			if ((f_read(fp, outData, size, &bytesRead) != FR_OK) || bytesRead != size)
 80191fa:	464b      	mov	r3, r9
 80191fc:	4601      	mov	r1, r0
 80191fe:	463a      	mov	r2, r7
 8019200:	a82a      	add	r0, sp, #168	; 0xa8
 8019202:	f7fd fa77 	bl	80166f4 <f_read>
 8019206:	4603      	mov	r3, r0
 8019208:	2800      	cmp	r0, #0
 801920a:	f47f ac08 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 801920e:	f8d9 2000 	ldr.w	r2, [r9]
 8019212:	4297      	cmp	r7, r2
 8019214:	f47f ac03 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
			for (uint32_t i = 0; i < size; i += 3) {
 8019218:	b13f      	cbz	r7, 801922a <STM32Ipl_ReadImage+0xc6a>
 801921a:	1caa      	adds	r2, r5, #2
				uint8_t tmp = outData[i];
 801921c:	5ce9      	ldrb	r1, [r5, r3]
				outData[i] = outData[i + 2];
 801921e:	5cd0      	ldrb	r0, [r2, r3]
 8019220:	54e8      	strb	r0, [r5, r3]
				outData[i + 2] = tmp;
 8019222:	54d1      	strb	r1, [r2, r3]
			for (uint32_t i = 0; i < size; i += 3) {
 8019224:	3303      	adds	r3, #3
 8019226:	429f      	cmp	r7, r3
 8019228:	d8f8      	bhi.n	801921c <STM32Ipl_ReadImage+0xc5c>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 801922a:	4652      	mov	r2, sl
 801922c:	4631      	mov	r1, r6
 801922e:	9803      	ldr	r0, [sp, #12]
 8019230:	2304      	movs	r3, #4
 8019232:	9500      	str	r5, [sp, #0]
 8019234:	f7fe fe30 	bl	8017e98 <STM32Ipl_Init>
 8019238:	e584      	b.n	8018d44 <STM32Ipl_ReadImage+0x784>
			size = width * height;
 801923a:	fb0a f806 	mul.w	r8, sl, r6
			outData = xalloc(size);
 801923e:	4640      	mov	r0, r8
 8019240:	f000 fbd2 	bl	80199e8 <xalloc>
			if (!outData)
 8019244:	4605      	mov	r5, r0
 8019246:	2800      	cmp	r0, #0
 8019248:	f000 80e2 	beq.w	8019410 <STM32Ipl_ReadImage+0xe50>
			if ((f_read(fp, outData, size, &bytesRead) != FR_OK) || bytesRead != size)
 801924c:	4601      	mov	r1, r0
 801924e:	464b      	mov	r3, r9
 8019250:	4642      	mov	r2, r8
 8019252:	a82a      	add	r0, sp, #168	; 0xa8
 8019254:	f7fd fa4e 	bl	80166f4 <f_read>
 8019258:	4607      	mov	r7, r0
 801925a:	2800      	cmp	r0, #0
 801925c:	f47f abdf 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 8019260:	f8d9 3000 	ldr.w	r3, [r9]
 8019264:	4598      	cmp	r8, r3
 8019266:	f47f abda 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 801926a:	4652      	mov	r2, sl
 801926c:	4631      	mov	r1, r6
 801926e:	9803      	ldr	r0, [sp, #12]
 8019270:	2301      	movs	r3, #1
 8019272:	9500      	str	r5, [sp, #0]
	return stm32ipl_err_Ok;
 8019274:	463c      	mov	r4, r7
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 8019276:	f7fe fe0f 	bl	8017e98 <STM32Ipl_Init>
			break;
 801927a:	f7ff b9e5 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
			outData = xalloc(width * height * 3);
 801927e:	fb0a f006 	mul.w	r0, sl, r6
 8019282:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019286:	f000 fbaf 	bl	80199e8 <xalloc>
			if (!outData)
 801928a:	4602      	mov	r2, r0
 801928c:	9007      	str	r0, [sp, #28]
 801928e:	2800      	cmp	r0, #0
 8019290:	f000 80be 	beq.w	8019410 <STM32Ipl_ReadImage+0xe50>
			for (uint32_t i = 0; i < height; i++) {
 8019294:	2300      	movs	r3, #0
 8019296:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 801929a:	e9cd 6a05 	strd	r6, sl, [sp, #20]
 801929e:	4626      	mov	r6, r4
 80192a0:	9304      	str	r3, [sp, #16]
				for (uint32_t j = 0; j < width; j++) {
 80192a2:	f102 0b03 	add.w	fp, r2, #3
 80192a6:	f04f 0a00 	mov.w	sl, #0
								if (sector[0] == '#') {
 80192aa:	782b      	ldrb	r3, [r5, #0]
 80192ac:	46c8      	mov	r8, r9
						number = 0;
 80192ae:	2700      	movs	r7, #0
								if (sector[0] == '#') {
 80192b0:	2b23      	cmp	r3, #35	; 0x23
 80192b2:	d064      	beq.n	801937e <STM32Ipl_ReadImage+0xdbe>
									if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80192b4:	3b30      	subs	r3, #48	; 0x30
 80192b6:	b2da      	uxtb	r2, r3
										number = sector[0] - '0';
 80192b8:	2a09      	cmp	r2, #9
 80192ba:	bf96      	itet	ls
 80192bc:	461f      	movls	r7, r3
 80192be:	2400      	movhi	r4, #0
 80192c0:	2402      	movls	r4, #2
								if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 80192c2:	4633      	mov	r3, r6
 80192c4:	2201      	movs	r2, #1
 80192c6:	4629      	mov	r1, r5
 80192c8:	a82a      	add	r0, sp, #168	; 0xa8
 80192ca:	f7fd fa13 	bl	80166f4 <f_read>
 80192ce:	2800      	cmp	r0, #0
 80192d0:	f47f aba5 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 80192d4:	6833      	ldr	r3, [r6, #0]
 80192d6:	2b01      	cmp	r3, #1
 80192d8:	f47f aba1 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
							if (mode == EAT_WHITESPACE) {
 80192dc:	2c00      	cmp	r4, #0
 80192de:	d04c      	beq.n	801937a <STM32Ipl_ReadImage+0xdba>
								if (mode == EAT_COMMENT) {
 80192e0:	2c01      	cmp	r4, #1
											number = (number * 10) + sector[0] - '0';
 80192e2:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 80192e6:	f04f 0402 	mov.w	r4, #2
								if (mode == EAT_COMMENT) {
 80192ea:	d04a      	beq.n	8019382 <STM32Ipl_ReadImage+0xdc2>
										if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80192ec:	782b      	ldrb	r3, [r5, #0]
 80192ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80192f2:	fa5f fc81 	uxtb.w	ip, r1
 80192f6:	f1bc 0f09 	cmp.w	ip, #9
 80192fa:	f200 80aa 	bhi.w	8019452 <STM32Ipl_ReadImage+0xe92>
											number = (number * 10) + sector[0] - '0';
 80192fe:	eb01 0742 	add.w	r7, r1, r2, lsl #1
						} while (!valid);
 8019302:	e7de      	b.n	80192c2 <STM32Ipl_ReadImage+0xd02>
			outData = xalloc(width * height);
 8019304:	fb0a f006 	mul.w	r0, sl, r6
 8019308:	f000 fb6e 	bl	80199e8 <xalloc>
			if (!outData)
 801930c:	9004      	str	r0, [sp, #16]
 801930e:	2800      	cmp	r0, #0
 8019310:	d07e      	beq.n	8019410 <STM32Ipl_ReadImage+0xe50>
 8019312:	f04f 0b00 	mov.w	fp, #0
 8019316:	4243      	negs	r3, r0
			for (uint32_t i = 0; i < height; i++) {
 8019318:	464f      	mov	r7, r9
 801931a:	e9cd 3b05 	strd	r3, fp, [sp, #20]
				for (uint32_t j = 0; j < width; j++) {
 801931e:	9b04      	ldr	r3, [sp, #16]
 8019320:	eb03 090b 	add.w	r9, r3, fp
					number = 0;
 8019324:	f04f 0800 	mov.w	r8, #0
							if (sector[0] == '#') {
 8019328:	782b      	ldrb	r3, [r5, #0]
 801932a:	2b23      	cmp	r3, #35	; 0x23
 801932c:	d03d      	beq.n	80193aa <STM32Ipl_ReadImage+0xdea>
								if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801932e:	3b30      	subs	r3, #48	; 0x30
 8019330:	b2da      	uxtb	r2, r3
									number = sector[0] - '0';
 8019332:	2a09      	cmp	r2, #9
 8019334:	bf96      	itet	ls
 8019336:	4698      	movls	r8, r3
 8019338:	2400      	movhi	r4, #0
 801933a:	2402      	movls	r4, #2
							if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 801933c:	463b      	mov	r3, r7
 801933e:	2201      	movs	r2, #1
 8019340:	4629      	mov	r1, r5
 8019342:	a82a      	add	r0, sp, #168	; 0xa8
 8019344:	f7fd f9d6 	bl	80166f4 <f_read>
 8019348:	2800      	cmp	r0, #0
 801934a:	f47f ab68 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
 801934e:	683a      	ldr	r2, [r7, #0]
 8019350:	2a01      	cmp	r2, #1
 8019352:	f47f ab64 	bne.w	8018a1e <STM32Ipl_ReadImage+0x45e>
						if (mode == EAT_WHITESPACE) {
 8019356:	2c00      	cmp	r4, #0
 8019358:	d0e6      	beq.n	8019328 <STM32Ipl_ReadImage+0xd68>
							if (mode == EAT_COMMENT) {
 801935a:	2c01      	cmp	r4, #1
										number = (number * 10) + sector[0] - '0';
 801935c:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8019360:	f04f 0402 	mov.w	r4, #2
							if (mode == EAT_COMMENT) {
 8019364:	d017      	beq.n	8019396 <STM32Ipl_ReadImage+0xdd6>
									if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019366:	7829      	ldrb	r1, [r5, #0]
 8019368:	3930      	subs	r1, #48	; 0x30
 801936a:	fa5f fc81 	uxtb.w	ip, r1
 801936e:	f1bc 0f09 	cmp.w	ip, #9
 8019372:	d851      	bhi.n	8019418 <STM32Ipl_ReadImage+0xe58>
										number = (number * 10) + sector[0] - '0';
 8019374:	eb01 0843 	add.w	r8, r1, r3, lsl #1
					} while (!valid);
 8019378:	e7e0      	b.n	801933c <STM32Ipl_ReadImage+0xd7c>
								if (sector[0] == '#') {
 801937a:	782b      	ldrb	r3, [r5, #0]
 801937c:	e798      	b.n	80192b0 <STM32Ipl_ReadImage+0xcf0>
									mode = EAT_COMMENT;
 801937e:	2401      	movs	r4, #1
 8019380:	e79f      	b.n	80192c2 <STM32Ipl_ReadImage+0xd02>
									if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8019382:	782c      	ldrb	r4, [r5, #0]
 8019384:	2c0d      	cmp	r4, #13
 8019386:	bf18      	it	ne
 8019388:	2c0a      	cmpne	r4, #10
 801938a:	bf0c      	ite	eq
 801938c:	2401      	moveq	r4, #1
 801938e:	2400      	movne	r4, #0
										mode = EAT_NUMBER;
 8019390:	f084 0401 	eor.w	r4, r4, #1
 8019394:	e795      	b.n	80192c2 <STM32Ipl_ReadImage+0xd02>
								if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8019396:	782c      	ldrb	r4, [r5, #0]
 8019398:	2c0d      	cmp	r4, #13
 801939a:	bf18      	it	ne
 801939c:	2c0a      	cmpne	r4, #10
 801939e:	bf0c      	ite	eq
 80193a0:	2401      	moveq	r4, #1
 80193a2:	2400      	movne	r4, #0
									mode = EAT_NUMBER;
 80193a4:	f084 0401 	eor.w	r4, r4, #1
 80193a8:	e7c8      	b.n	801933c <STM32Ipl_ReadImage+0xd7c>
								mode = EAT_COMMENT;
 80193aa:	2401      	movs	r4, #1
 80193ac:	e7c6      	b.n	801933c <STM32Ipl_ReadImage+0xd7c>
 80193ae:	f1a8 0102 	sub.w	r1, r8, #2
				for (uint32_t j = 0; j < width; j++) {
 80193b2:	463a      	mov	r2, r7
 80193b4:	2300      	movs	r3, #0
 80193b6:	3301      	adds	r3, #1
					uint16_t value = *inPixel;
 80193b8:	f831 0f02 	ldrh.w	r0, [r1, #2]!
				for (uint32_t j = 0; j < width; j++) {
 80193bc:	429c      	cmp	r4, r3
 80193be:	f822 0b02 	strh.w	r0, [r2], #2
 80193c2:	d1f8      	bne.n	80193b6 <STM32Ipl_ReadImage+0xdf6>
 80193c4:	f7ff bb09 	b.w	80189da <STM32Ipl_ReadImage+0x41a>
		return stm32ipl_err_OpeningFile;
 80193c8:	f06f 0405 	mvn.w	r4, #5
 80193cc:	f7ff b93f 	b.w	801864e <STM32Ipl_ReadImage+0x8e>
 80193d0:	9b04      	ldr	r3, [sp, #16]
 80193d2:	4619      	mov	r1, r3
 80193d4:	9306      	str	r3, [sp, #24]
 80193d6:	f7ff baa7 	b.w	8018928 <STM32Ipl_ReadImage+0x368>
 80193da:	9e04      	ldr	r6, [sp, #16]
 80193dc:	f7ff bbdb 	b.w	8018b96 <STM32Ipl_ReadImage+0x5d6>
 80193e0:	f8dd b014 	ldr.w	fp, [sp, #20]
			xfree(lineData);
 80193e4:	4628      	mov	r0, r5
	return stm32ipl_err_Ok;
 80193e6:	2400      	movs	r4, #0
			xfree(lineData);
 80193e8:	f000 fb0c 	bl	8019a04 <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB888, outData);
 80193ec:	9b06      	ldr	r3, [sp, #24]
 80193ee:	9a07      	ldr	r2, [sp, #28]
 80193f0:	4659      	mov	r1, fp
 80193f2:	9300      	str	r3, [sp, #0]
 80193f4:	2304      	movs	r3, #4
 80193f6:	9803      	ldr	r0, [sp, #12]
 80193f8:	f7fe fd4e 	bl	8017e98 <STM32Ipl_Init>
			break;
 80193fc:	f7ff b924 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
					line += lineSize;
 8019400:	4453      	add	r3, sl
 8019402:	9306      	str	r3, [sp, #24]
 8019404:	e692      	b.n	801912c <STM32Ipl_ReadImage+0xb6c>
						line += lineSize;
 8019406:	4453      	add	r3, sl
 8019408:	9307      	str	r3, [sp, #28]
 801940a:	e6bc      	b.n	8019186 <STM32Ipl_ReadImage+0xbc6>
						line += lineSize;
 801940c:	444f      	add	r7, r9
 801940e:	e489      	b.n	8018d24 <STM32Ipl_ReadImage+0x764>
					return stm32ipl_err_OutOfMemory;
 8019410:	f06f 0402 	mvn.w	r4, #2
 8019414:	f7ff b918 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
				for (uint32_t j = 0; j < width; j++) {
 8019418:	9b05      	ldr	r3, [sp, #20]
					outData[offset + j] = (uint8_t)number;
 801941a:	f809 8b01 	strb.w	r8, [r9], #1
				for (uint32_t j = 0; j < width; j++) {
 801941e:	444b      	add	r3, r9
 8019420:	429e      	cmp	r6, r3
 8019422:	f63f af7f 	bhi.w	8019324 <STM32Ipl_ReadImage+0xd64>
			for (uint32_t i = 0; i < height; i++) {
 8019426:	9b06      	ldr	r3, [sp, #24]
 8019428:	44b3      	add	fp, r6
 801942a:	9905      	ldr	r1, [sp, #20]
 801942c:	3301      	adds	r3, #1
 801942e:	1b89      	subs	r1, r1, r6
 8019430:	4553      	cmp	r3, sl
 8019432:	9306      	str	r3, [sp, #24]
 8019434:	9105      	str	r1, [sp, #20]
 8019436:	f4ff af72 	bcc.w	801931e <STM32Ipl_ReadImage+0xd5e>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 801943a:	4613      	mov	r3, r2
 801943c:	9a04      	ldr	r2, [sp, #16]
 801943e:	4607      	mov	r7, r0
 8019440:	4631      	mov	r1, r6
 8019442:	9200      	str	r2, [sp, #0]
 8019444:	4652      	mov	r2, sl
 8019446:	9803      	ldr	r0, [sp, #12]
	return stm32ipl_err_Ok;
 8019448:	463c      	mov	r4, r7
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 801944a:	f7fe fd25 	bl	8017e98 <STM32Ipl_Init>
			break;
 801944e:	f7ff b8fb 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
					for (uint8_t counter = 0; counter < 3; counter++) {
 8019452:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
						pixel[counter] = number;
 8019456:	f808 7b01 	strb.w	r7, [r8], #1
					for (uint8_t counter = 0; counter < 3; counter++) {
 801945a:	4542      	cmp	r2, r8
 801945c:	f47f af27 	bne.w	80192ae <STM32Ipl_ReadImage+0xcee>
					*outPixel++ = pixel[2];
 8019460:	f899 3002 	ldrb.w	r3, [r9, #2]
				for (uint32_t j = 0; j < width; j++) {
 8019464:	f10a 0a01 	add.w	sl, sl, #1
 8019468:	465a      	mov	r2, fp
 801946a:	f10b 0b03 	add.w	fp, fp, #3
					*outPixel++ = pixel[2];
 801946e:	f80b 3c06 	strb.w	r3, [fp, #-6]
					*outPixel++ = pixel[1];
 8019472:	f899 3001 	ldrb.w	r3, [r9, #1]
 8019476:	f80b 3c05 	strb.w	r3, [fp, #-5]
					*outPixel++ = pixel[0];
 801947a:	f899 3000 	ldrb.w	r3, [r9]
 801947e:	f80b 3c04 	strb.w	r3, [fp, #-4]
				for (uint32_t j = 0; j < width; j++) {
 8019482:	9b05      	ldr	r3, [sp, #20]
 8019484:	4553      	cmp	r3, sl
 8019486:	f63f af10 	bhi.w	80192aa <STM32Ipl_ReadImage+0xcea>
			for (uint32_t i = 0; i < height; i++) {
 801948a:	9b04      	ldr	r3, [sp, #16]
 801948c:	9906      	ldr	r1, [sp, #24]
 801948e:	3301      	adds	r3, #1
 8019490:	428b      	cmp	r3, r1
 8019492:	9304      	str	r3, [sp, #16]
 8019494:	f4ff af05 	bcc.w	80192a2 <STM32Ipl_ReadImage+0xce2>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 8019498:	4603      	mov	r3, r0
 801949a:	9a07      	ldr	r2, [sp, #28]
 801949c:	9803      	ldr	r0, [sp, #12]
	return stm32ipl_err_Ok;
 801949e:	461c      	mov	r4, r3
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 80194a0:	9200      	str	r2, [sp, #0]
 80194a2:	2304      	movs	r3, #4
 80194a4:	e9dd 6a05 	ldrd	r6, sl, [sp, #20]
 80194a8:	4652      	mov	r2, sl
 80194aa:	4631      	mov	r1, r6
 80194ac:	f7fe fcf4 	bl	8017e98 <STM32Ipl_Init>
			break;
 80194b0:	f7ff b8ca 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
						if (f_lseek(fp, line) != FR_OK) {
 80194b4:	4619      	mov	r1, r3
 80194b6:	a82a      	add	r0, sp, #168	; 0xa8
 80194b8:	f7fd fc3a 	bl	8016d30 <f_lseek>
 80194bc:	2800      	cmp	r0, #0
 80194be:	f43f ae35 	beq.w	801912c <STM32Ipl_ReadImage+0xb6c>
							xfree(lineData);
 80194c2:	4640      	mov	r0, r8
							return stm32ipl_err_SeekingFile;
 80194c4:	f06f 0409 	mvn.w	r4, #9
							xfree(lineData);
 80194c8:	f000 fa9c 	bl	8019a04 <xfree>
							xfree(outData);
 80194cc:	ee18 0a10 	vmov	r0, s16
 80194d0:	f000 fa98 	bl	8019a04 <xfree>
							return stm32ipl_err_SeekingFile;
 80194d4:	f7ff b8b8 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
							if (f_lseek(fp, line) != FR_OK) {
 80194d8:	4619      	mov	r1, r3
 80194da:	a82a      	add	r0, sp, #168	; 0xa8
 80194dc:	f7fd fc28 	bl	8016d30 <f_lseek>
 80194e0:	2800      	cmp	r0, #0
 80194e2:	f43f ae50 	beq.w	8019186 <STM32Ipl_ReadImage+0xbc6>
								xfree(lineData);
 80194e6:	ee18 0a90 	vmov	r0, s17
								return stm32ipl_err_SeekingFile;
 80194ea:	f06f 0409 	mvn.w	r4, #9
								xfree(lineData);
 80194ee:	f000 fa89 	bl	8019a04 <xfree>
								xfree(outData);
 80194f2:	ee18 0a10 	vmov	r0, s16
 80194f6:	f000 fa85 	bl	8019a04 <xfree>
								return stm32ipl_err_SeekingFile;
 80194fa:	f7ff b8a5 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
							if (f_lseek(fp, line) != FR_OK) {
 80194fe:	4639      	mov	r1, r7
 8019500:	a82a      	add	r0, sp, #168	; 0xa8
 8019502:	f7fd fc15 	bl	8016d30 <f_lseek>
 8019506:	2800      	cmp	r0, #0
 8019508:	f43f ac0c 	beq.w	8018d24 <STM32Ipl_ReadImage+0x764>
								xfree(lineData);
 801950c:	4630      	mov	r0, r6
								return stm32ipl_err_SeekingFile;
 801950e:	f06f 0409 	mvn.w	r4, #9
								xfree(lineData);
 8019512:	f000 fa77 	bl	8019a04 <xfree>
								xfree(outData);
 8019516:	ee18 0a10 	vmov	r0, s16
 801951a:	f000 fa73 	bl	8019a04 <xfree>
								return stm32ipl_err_SeekingFile;
 801951e:	f7ff b893 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 8019522:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019526:	4293      	cmp	r3, r2
 8019528:	f47f acbc 	bne.w	8018ea4 <STM32Ipl_ReadImage+0x8e4>
 801952c:	686b      	ldr	r3, [r5, #4]
 801952e:	2b00      	cmp	r3, #0
 8019530:	f47f acb8 	bne.w	8018ea4 <STM32Ipl_ReadImage+0x8e4>
				outData = xalloc0(STM32Ipl_DataSize(width, abs(height), IMAGE_BPP_BINARY));
 8019534:	9a05      	ldr	r2, [sp, #20]
 8019536:	4658      	mov	r0, fp
 8019538:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 801953c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8019540:	2200      	movs	r2, #0
 8019542:	4619      	mov	r1, r3
 8019544:	9308      	str	r3, [sp, #32]
 8019546:	f7fe fcbd 	bl	8017ec4 <STM32Ipl_DataSize>
 801954a:	f000 fa4f 	bl	80199ec <xalloc0>
				if (!outData)
 801954e:	ee08 0a90 	vmov	s17, r0
 8019552:	2800      	cmp	r0, #0
 8019554:	f43f af5c 	beq.w	8019410 <STM32Ipl_ReadImage+0xe50>
				lineData = xalloc(lineSize);
 8019558:	4650      	mov	r0, sl
 801955a:	f000 fa45 	bl	80199e8 <xalloc>
				if (!lineData) {
 801955e:	ee08 0a10 	vmov	s16, r0
 8019562:	2800      	cmp	r0, #0
 8019564:	f000 8193 	beq.w	801988e <STM32Ipl_ReadImage+0x12ce>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8019568:	9b05      	ldr	r3, [sp, #20]
 801956a:	2b00      	cmp	r3, #0
 801956c:	f340 8167 	ble.w	801983e <STM32Ipl_ReadImage+0x127e>
 8019570:	3b01      	subs	r3, #1
 8019572:	fb0a f303 	mul.w	r3, sl, r3
 8019576:	9a04      	ldr	r2, [sp, #16]
				if (f_lseek(fp, line) != FR_OK) {
 8019578:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801957a:	18d3      	adds	r3, r2, r3
				if (f_lseek(fp, line) != FR_OK) {
 801957c:	4619      	mov	r1, r3
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801957e:	461e      	mov	r6, r3
				if (f_lseek(fp, line) != FR_OK) {
 8019580:	f7fd fbd6 	bl	8016d30 <f_lseek>
 8019584:	2800      	cmp	r0, #0
 8019586:	f040 80fe 	bne.w	8019786 <STM32Ipl_ReadImage+0x11c6>
				for (uint32_t i = 0; i < abs(height); i++) {
 801958a:	9b05      	ldr	r3, [sp, #20]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d05a      	beq.n	8019646 <STM32Ipl_ReadImage+0x1086>
 8019590:	ee18 4a90 	vmov	r4, s17
 8019594:	46b0      	mov	r8, r6
 8019596:	9006      	str	r0, [sp, #24]
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8019598:	464b      	mov	r3, r9
 801959a:	4652      	mov	r2, sl
 801959c:	ee18 1a10 	vmov	r1, s16
 80195a0:	a82a      	add	r0, sp, #168	; 0xa8
 80195a2:	f7fd f8a7 	bl	80166f4 <f_read>
 80195a6:	2800      	cmp	r0, #0
 80195a8:	f040 813d 	bne.w	8019826 <STM32Ipl_ReadImage+0x1266>
 80195ac:	f8d9 3000 	ldr.w	r3, [r9]
 80195b0:	459a      	cmp	sl, r3
 80195b2:	f040 8138 	bne.w	8019826 <STM32Ipl_ReadImage+0x1266>
					for (uint32_t j = 0; j < width; k--, j++) {
 80195b6:	f1bb 0f00 	cmp.w	fp, #0
 80195ba:	d034      	beq.n	8019626 <STM32Ipl_ReadImage+0x1066>
					value = 0;
 80195bc:	4684      	mov	ip, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 80195be:	ee18 2a10 	vmov	r2, s16
 80195c2:	4606      	mov	r6, r0
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 80195c4:	f04f 0e01 	mov.w	lr, #1
 80195c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80195cc:	e01c      	b.n	8019608 <STM32Ipl_ReadImage+0x1048>
 80195ce:	4603      	mov	r3, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 80195d0:	b2f8      	uxtb	r0, r7
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 80195d2:	fa4c f303 	asr.w	r3, ip, r3
 80195d6:	f006 011f 	and.w	r1, r6, #31
 80195da:	ea4f 1a56 	mov.w	sl, r6, lsr #5
					for (uint32_t j = 0; j < width; k--, j++) {
 80195de:	3601      	adds	r6, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 80195e0:	f003 0301 	and.w	r3, r3, #1
 80195e4:	f854 702a 	ldr.w	r7, [r4, sl, lsl #2]
					for (uint32_t j = 0; j < width; k--, j++) {
 80195e8:	45b3      	cmp	fp, r6
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 80195ea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80195ee:	f003 0301 	and.w	r3, r3, #1
 80195f2:	fa03 f301 	lsl.w	r3, r3, r1
 80195f6:	fa0e f101 	lsl.w	r1, lr, r1
 80195fa:	ea27 0101 	bic.w	r1, r7, r1
 80195fe:	ea43 0301 	orr.w	r3, r3, r1
 8019602:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
					for (uint32_t j = 0; j < width; k--, j++) {
 8019606:	d00c      	beq.n	8019622 <STM32Ipl_ReadImage+0x1062>
						if (!(j % 8)) {
 8019608:	f016 0f07 	tst.w	r6, #7
							value = (*inData++);
 801960c:	4611      	mov	r1, r2
					for (uint32_t j = 0; j < width; k--, j++) {
 801960e:	f100 37ff 	add.w	r7, r0, #4294967295
							value = (*inData++);
 8019612:	f04f 0307 	mov.w	r3, #7
						if (!(j % 8)) {
 8019616:	d1da      	bne.n	80195ce <STM32Ipl_ReadImage+0x100e>
							value = (*inData++);
 8019618:	f811 cb01 	ldrb.w	ip, [r1], #1
 801961c:	2006      	movs	r0, #6
 801961e:	460a      	mov	r2, r1
 8019620:	e7d7      	b.n	80195d2 <STM32Ipl_ReadImage+0x1012>
 8019622:	f8dd a01c 	ldr.w	sl, [sp, #28]
					if (height > 0) {
 8019626:	9b05      	ldr	r3, [sp, #20]
					outRow += offset;
 8019628:	4454      	add	r4, sl
					if (height > 0) {
 801962a:	2b00      	cmp	r3, #0
 801962c:	dd19      	ble.n	8019662 <STM32Ipl_ReadImage+0x10a2>
						line -= lineSize;
 801962e:	eba8 080a 	sub.w	r8, r8, sl
						if (line >= dataOffset) {
 8019632:	9b04      	ldr	r3, [sp, #16]
 8019634:	4543      	cmp	r3, r8
 8019636:	f240 809f 	bls.w	8019778 <STM32Ipl_ReadImage+0x11b8>
				for (uint32_t i = 0; i < abs(height); i++) {
 801963a:	9b06      	ldr	r3, [sp, #24]
 801963c:	9a08      	ldr	r2, [sp, #32]
 801963e:	3301      	adds	r3, #1
 8019640:	429a      	cmp	r2, r3
 8019642:	9306      	str	r3, [sp, #24]
 8019644:	d1a8      	bne.n	8019598 <STM32Ipl_ReadImage+0xfd8>
				xfree(lineData);
 8019646:	ee18 0a10 	vmov	r0, s16
 801964a:	f000 f9db 	bl	8019a04 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_BINARY, outData);
 801964e:	9a08      	ldr	r2, [sp, #32]
 8019650:	4659      	mov	r1, fp
 8019652:	9803      	ldr	r0, [sp, #12]
 8019654:	2300      	movs	r3, #0
 8019656:	edcd 8a00 	vstr	s17, [sp]
 801965a:	f7fe fc1d 	bl	8017e98 <STM32Ipl_Init>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 801965e:	f7ff bb71 	b.w	8018d44 <STM32Ipl_ReadImage+0x784>
						line += lineSize;
 8019662:	44d0      	add	r8, sl
 8019664:	e7e9      	b.n	801963a <STM32Ipl_ReadImage+0x107a>
				outData = xalloc(width * abs(height) * 2);
 8019666:	9a05      	ldr	r2, [sp, #20]
 8019668:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 801966c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8019670:	fb03 f00b 	mul.w	r0, r3, fp
 8019674:	9307      	str	r3, [sp, #28]
 8019676:	0040      	lsls	r0, r0, #1
 8019678:	f000 f9b6 	bl	80199e8 <xalloc>
				if (!outData)
 801967c:	ee08 0a10 	vmov	s16, r0
 8019680:	2800      	cmp	r0, #0
 8019682:	f43f aec5 	beq.w	8019410 <STM32Ipl_ReadImage+0xe50>
				lineData = xalloc(lineSize);
 8019686:	4650      	mov	r0, sl
 8019688:	f000 f9ae 	bl	80199e8 <xalloc>
				if (!lineData) {
 801968c:	4607      	mov	r7, r0
 801968e:	2800      	cmp	r0, #0
 8019690:	f000 80bf 	beq.w	8019812 <STM32Ipl_ReadImage+0x1252>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8019694:	9b05      	ldr	r3, [sp, #20]
 8019696:	2b00      	cmp	r3, #0
 8019698:	f340 80c3 	ble.w	8019822 <STM32Ipl_ReadImage+0x1262>
 801969c:	3b01      	subs	r3, #1
 801969e:	fb0a f303 	mul.w	r3, sl, r3
 80196a2:	9a04      	ldr	r2, [sp, #16]
				if (f_lseek(fp, line) != FR_OK) {
 80196a4:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80196a6:	18d3      	adds	r3, r2, r3
				if (f_lseek(fp, line) != FR_OK) {
 80196a8:	4619      	mov	r1, r3
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80196aa:	9306      	str	r3, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 80196ac:	f7fd fb40 	bl	8016d30 <f_lseek>
 80196b0:	2800      	cmp	r0, #0
 80196b2:	d156      	bne.n	8019762 <STM32Ipl_ReadImage+0x11a2>
				for (uint32_t i = 0; i < abs(height); i++) {
 80196b4:	9b07      	ldr	r3, [sp, #28]
 80196b6:	930a      	str	r3, [sp, #40]	; 0x28
 80196b8:	9b05      	ldr	r3, [sp, #20]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	f000 80db 	beq.w	8019876 <STM32Ipl_ReadImage+0x12b6>
 80196c0:	ea4f 034b 	mov.w	r3, fp, lsl #1
 80196c4:	eb07 060b 	add.w	r6, r7, fp
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 80196c8:	f8cd b020 	str.w	fp, [sp, #32]
 80196cc:	4680      	mov	r8, r0
 80196ce:	46cb      	mov	fp, r9
 80196d0:	4c73      	ldr	r4, [pc, #460]	; (80198a0 <STM32Ipl_ReadImage+0x12e0>)
 80196d2:	ee18 9a10 	vmov	r9, s16
 80196d6:	9309      	str	r3, [sp, #36]	; 0x24
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 80196d8:	465b      	mov	r3, fp
 80196da:	4652      	mov	r2, sl
 80196dc:	4639      	mov	r1, r7
 80196de:	a82a      	add	r0, sp, #168	; 0xa8
 80196e0:	f7fd f808 	bl	80166f4 <f_read>
 80196e4:	2800      	cmp	r0, #0
 80196e6:	d15a      	bne.n	801979e <STM32Ipl_ReadImage+0x11de>
 80196e8:	f8db 2000 	ldr.w	r2, [fp]
 80196ec:	4592      	cmp	sl, r2
 80196ee:	d156      	bne.n	801979e <STM32Ipl_ReadImage+0x11de>
					for (uint32_t j = 0; j < width; j++) {
 80196f0:	9b08      	ldr	r3, [sp, #32]
 80196f2:	b1bb      	cbz	r3, 8019724 <STM32Ipl_ReadImage+0x1164>
 80196f4:	46cc      	mov	ip, r9
 80196f6:	4638      	mov	r0, r7
						uint8_t r = palette[index] >> 16;
 80196f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80196fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
					for (uint32_t j = 0; j < width; j++) {
 8019700:	42b0      	cmp	r0, r6
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8019702:	ea04 2113 	and.w	r1, r4, r3, lsr #8
 8019706:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 801970a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 801970e:	ea42 0201 	orr.w	r2, r2, r1
 8019712:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019716:	ea43 0302 	orr.w	r3, r3, r2
 801971a:	f82c 3b02 	strh.w	r3, [ip], #2
					for (uint32_t j = 0; j < width; j++) {
 801971e:	d1eb      	bne.n	80196f8 <STM32Ipl_ReadImage+0x1138>
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8019720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019722:	4499      	add	r9, r3
					if (height > 0) {
 8019724:	9b05      	ldr	r3, [sp, #20]
 8019726:	2b00      	cmp	r3, #0
						line -= lineSize;
 8019728:	9b06      	ldr	r3, [sp, #24]
					if (height > 0) {
 801972a:	dd11      	ble.n	8019750 <STM32Ipl_ReadImage+0x1190>
						line -= lineSize;
 801972c:	eba3 030a 	sub.w	r3, r3, sl
						if (line >= dataOffset) {
 8019730:	9a04      	ldr	r2, [sp, #16]
 8019732:	429a      	cmp	r2, r3
						line -= lineSize;
 8019734:	9306      	str	r3, [sp, #24]
						if (line >= dataOffset) {
 8019736:	d90e      	bls.n	8019756 <STM32Ipl_ReadImage+0x1196>
				for (uint32_t i = 0; i < abs(height); i++) {
 8019738:	f108 0801 	add.w	r8, r8, #1
 801973c:	9b07      	ldr	r3, [sp, #28]
 801973e:	4598      	cmp	r8, r3
 8019740:	d1ca      	bne.n	80196d8 <STM32Ipl_ReadImage+0x1118>
 8019742:	f8dd b020 	ldr.w	fp, [sp, #32]
				xfree(lineData);
 8019746:	4638      	mov	r0, r7
 8019748:	f000 f95c 	bl	8019a04 <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 801974c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801974e:	e527      	b.n	80191a0 <STM32Ipl_ReadImage+0xbe0>
						line += lineSize;
 8019750:	4453      	add	r3, sl
 8019752:	9306      	str	r3, [sp, #24]
 8019754:	e7f0      	b.n	8019738 <STM32Ipl_ReadImage+0x1178>
							if (f_lseek(fp, line) != FR_OK) {
 8019756:	4619      	mov	r1, r3
 8019758:	a82a      	add	r0, sp, #168	; 0xa8
 801975a:	f7fd fae9 	bl	8016d30 <f_lseek>
 801975e:	2800      	cmp	r0, #0
 8019760:	d0ea      	beq.n	8019738 <STM32Ipl_ReadImage+0x1178>
								xfree(lineData);
 8019762:	4638      	mov	r0, r7
								return stm32ipl_err_SeekingFile;
 8019764:	f06f 0409 	mvn.w	r4, #9
								xfree(lineData);
 8019768:	f000 f94c 	bl	8019a04 <xfree>
								xfree(outData);
 801976c:	ee18 0a10 	vmov	r0, s16
 8019770:	f000 f948 	bl	8019a04 <xfree>
								return stm32ipl_err_SeekingFile;
 8019774:	f7fe bf68 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
							if (f_lseek(fp, line) != FR_OK) {
 8019778:	4641      	mov	r1, r8
 801977a:	a82a      	add	r0, sp, #168	; 0xa8
 801977c:	f7fd fad8 	bl	8016d30 <f_lseek>
 8019780:	2800      	cmp	r0, #0
 8019782:	f43f af5a 	beq.w	801963a <STM32Ipl_ReadImage+0x107a>
								xfree(lineData);
 8019786:	ee18 0a10 	vmov	r0, s16
								return stm32ipl_err_SeekingFile;
 801978a:	f06f 0409 	mvn.w	r4, #9
								xfree(lineData);
 801978e:	f000 f939 	bl	8019a04 <xfree>
								xfree(outData);
 8019792:	ee18 0a90 	vmov	r0, s17
 8019796:	f000 f935 	bl	8019a04 <xfree>
								return stm32ipl_err_SeekingFile;
 801979a:	f7fe bf55 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
						xfree(lineData);
 801979e:	4638      	mov	r0, r7
						return stm32ipl_err_ReadingFile;
 80197a0:	f06f 0407 	mvn.w	r4, #7
						xfree(lineData);
 80197a4:	f000 f92e 	bl	8019a04 <xfree>
						xfree(outData);
 80197a8:	ee18 0a10 	vmov	r0, s16
 80197ac:	f000 f92a 	bl	8019a04 <xfree>
						return stm32ipl_err_ReadingFile;
 80197b0:	f7fe bf4a 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
			for (uint32_t i = 0; i < abs(height); i++) {
 80197b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80197b6:	f7ff b925 	b.w	8018a04 <STM32Ipl_ReadImage+0x444>
						xfree(lineData);
 80197ba:	ee18 0a90 	vmov	r0, s17
						return stm32ipl_err_ReadingFile;
 80197be:	f06f 0407 	mvn.w	r4, #7
						xfree(lineData);
 80197c2:	f000 f91f 	bl	8019a04 <xfree>
						xfree(outData);
 80197c6:	ee18 0a10 	vmov	r0, s16
 80197ca:	f000 f91b 	bl	8019a04 <xfree>
						return stm32ipl_err_ReadingFile;
 80197ce:	f7fe bf3b 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
 80197d2:	9b04      	ldr	r3, [sp, #16]
 80197d4:	4619      	mov	r1, r3
 80197d6:	9307      	str	r3, [sp, #28]
 80197d8:	f7ff bb86 	b.w	8018ee8 <STM32Ipl_ReadImage+0x928>
					xfree(lineData);
 80197dc:	4640      	mov	r0, r8
					return stm32ipl_err_ReadingFile;
 80197de:	f06f 0407 	mvn.w	r4, #7
					xfree(lineData);
 80197e2:	f000 f90f 	bl	8019a04 <xfree>
					xfree(outData);
 80197e6:	ee18 0a10 	vmov	r0, s16
 80197ea:	f000 f90b 	bl	8019a04 <xfree>
					return stm32ipl_err_ReadingFile;
 80197ee:	f7fe bf2b 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
						xfree(lineData);
 80197f2:	4630      	mov	r0, r6
						return stm32ipl_err_ReadingFile;
 80197f4:	f06f 0407 	mvn.w	r4, #7
						xfree(lineData);
 80197f8:	f000 f904 	bl	8019a04 <xfree>
						xfree(outData);
 80197fc:	ee18 0a10 	vmov	r0, s16
 8019800:	f000 f900 	bl	8019a04 <xfree>
						return stm32ipl_err_ReadingFile;
 8019804:	f7fe bf20 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
 8019808:	9b04      	ldr	r3, [sp, #16]
 801980a:	4619      	mov	r1, r3
 801980c:	9306      	str	r3, [sp, #24]
 801980e:	f7ff bad5 	b.w	8018dbc <STM32Ipl_ReadImage+0x7fc>
					xfree(outData);
 8019812:	ee18 0a10 	vmov	r0, s16
					return stm32ipl_err_OutOfMemory;
 8019816:	f06f 0402 	mvn.w	r4, #2
					xfree(outData);
 801981a:	f000 f8f3 	bl	8019a04 <xfree>
					return stm32ipl_err_OutOfMemory;
 801981e:	f7fe bf13 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8019822:	2300      	movs	r3, #0
 8019824:	e73d      	b.n	80196a2 <STM32Ipl_ReadImage+0x10e2>
						xfree(lineData);
 8019826:	ee18 0a10 	vmov	r0, s16
						return stm32ipl_err_ReadingFile;
 801982a:	f06f 0407 	mvn.w	r4, #7
						xfree(lineData);
 801982e:	f000 f8e9 	bl	8019a04 <xfree>
						xfree(outData);
 8019832:	ee18 0a90 	vmov	r0, s17
 8019836:	f000 f8e5 	bl	8019a04 <xfree>
						return stm32ipl_err_ReadingFile;
 801983a:	f7fe bf05 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801983e:	2300      	movs	r3, #0
 8019840:	e699      	b.n	8019576 <STM32Ipl_ReadImage+0xfb6>
				xfree(outData);
 8019842:	980f      	ldr	r0, [sp, #60]	; 0x3c
				return stm32ipl_err_SeekingFile;
 8019844:	f06f 0409 	mvn.w	r4, #9
				xfree(outData);
 8019848:	f000 f8dc 	bl	8019a04 <xfree>
				return stm32ipl_err_SeekingFile;
 801984c:	f7fe befc 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
		return stm32ipl_err_InvalidParameter;
 8019850:	f06f 0401 	mvn.w	r4, #1
 8019854:	f7fe bef8 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
		return stm32ipl_err_Generic;
 8019858:	f04f 34ff 	mov.w	r4, #4294967295
 801985c:	f7fe bef4 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
				for (uint32_t i = 0; i < abs(height); i++) {
 8019860:	930b      	str	r3, [sp, #44]	; 0x2c
 8019862:	e498      	b.n	8019196 <STM32Ipl_ReadImage+0xbd6>
				xfree(outData);
 8019864:	9806      	ldr	r0, [sp, #24]
				return stm32ipl_err_OutOfMemory;
 8019866:	f06f 0402 	mvn.w	r4, #2
				xfree(outData);
 801986a:	f000 f8cb 	bl	8019a04 <xfree>
				return stm32ipl_err_OutOfMemory;
 801986e:	f7fe beeb 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
			for (uint32_t i = 0; i < abs(height); i++) {
 8019872:	9309      	str	r3, [sp, #36]	; 0x24
 8019874:	e462      	b.n	801913c <STM32Ipl_ReadImage+0xb7c>
				for (uint32_t i = 0; i < abs(height); i++) {
 8019876:	930a      	str	r3, [sp, #40]	; 0x28
 8019878:	e765      	b.n	8019746 <STM32Ipl_ReadImage+0x1186>
				xfree(outData);
 801987a:	980f      	ldr	r0, [sp, #60]	; 0x3c
				return stm32ipl_err_OutOfMemory;
 801987c:	f06f 0402 	mvn.w	r4, #2
				xfree(outData);
 8019880:	f000 f8c0 	bl	8019a04 <xfree>
				return stm32ipl_err_OutOfMemory;
 8019884:	f7fe bee0 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
				for (uint32_t i = 0; i < abs(height); i++) {
 8019888:	9307      	str	r3, [sp, #28]
 801988a:	f7ff ba50 	b.w	8018d2e <STM32Ipl_ReadImage+0x76e>
					xfree(outData);
 801988e:	ee18 0a90 	vmov	r0, s17
					return stm32ipl_err_OutOfMemory;
 8019892:	f06f 0402 	mvn.w	r4, #2
					xfree(outData);
 8019896:	f000 f8b5 	bl	8019a04 <xfree>
					return stm32ipl_err_OutOfMemory;
 801989a:	f7fe bed5 	b.w	8018648 <STM32Ipl_ReadImage+0x88>
 801989e:	bf00      	nop
 80198a0:	fffff800 	.word	0xfffff800

080198a4 <STM32Ipl_WriteImage>:
 * filename	Name of the output file; if it is not valid, an error is returned.
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_WriteImage(const image_t *img, const char *filename)
{
	if (!img || !img->data || !filename)
 80198a4:	2800      	cmp	r0, #0
 80198a6:	f000 809a 	beq.w	80199de <STM32Ipl_WriteImage+0x13a>
{
 80198aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!img || !img->data || !filename)
 80198ac:	68c3      	ldr	r3, [r0, #12]
 80198ae:	4604      	mov	r4, r0
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	f000 8091 	beq.w	80199d8 <STM32Ipl_WriteImage+0x134>
 80198b6:	460d      	mov	r5, r1
 80198b8:	2900      	cmp	r1, #0
 80198ba:	f000 808d 	beq.w	80199d8 <STM32Ipl_WriteImage+0x134>
		return stm32ipl_err_InvalidParameter;

	if (img->bpp != IMAGE_BPP_BINARY && img->bpp != IMAGE_BPP_GRAYSCALE && img->bpp != IMAGE_BPP_RGB565
 80198be:	6883      	ldr	r3, [r0, #8]
 80198c0:	2b02      	cmp	r3, #2
 80198c2:	d901      	bls.n	80198c8 <STM32Ipl_WriteImage+0x24>
 80198c4:	2b04      	cmp	r3, #4
 80198c6:	d12a      	bne.n	801991e <STM32Ipl_WriteImage+0x7a>
	len = strlen(filename);
 80198c8:	4628      	mov	r0, r5
 80198ca:	f7e6 fd13 	bl	80002f4 <strlen>
 80198ce:	4607      	mov	r7, r0
	upFilename = xalloc(len);
 80198d0:	f000 f88a 	bl	80199e8 <xalloc>
	strcpy(upFilename, filename);
 80198d4:	4629      	mov	r1, r5
	upFilename = xalloc(len);
 80198d6:	4606      	mov	r6, r0
	strcpy(upFilename, filename);
 80198d8:	f009 fa99 	bl	8022e0e <strcpy>
	for (size_t i = 0; i < len; i++)
 80198dc:	b1e7      	cbz	r7, 8019918 <STM32Ipl_WriteImage+0x74>
 80198de:	f107 3eff 	add.w	lr, r7, #4294967295
 80198e2:	1e72      	subs	r2, r6, #1
 80198e4:	493f      	ldr	r1, [pc, #252]	; (80199e4 <STM32Ipl_WriteImage+0x140>)
 80198e6:	44b6      	add	lr, r6
		upFilename[i] = toupper(upFilename[i]);
 80198e8:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80198ec:	f811 300c 	ldrb.w	r3, [r1, ip]
 80198f0:	f003 0303 	and.w	r3, r3, #3
 80198f4:	2b02      	cmp	r3, #2
 80198f6:	d015      	beq.n	8019924 <STM32Ipl_WriteImage+0x80>
	for (size_t i = 0; i < len; i++)
 80198f8:	4596      	cmp	lr, r2
 80198fa:	d1f5      	bne.n	80198e8 <STM32Ipl_WriteImage+0x44>
	if (len >= 5) {
 80198fc:	2f04      	cmp	r7, #4
	ptr = upFilename + len;
 80198fe:	eb06 0307 	add.w	r3, r6, r7
	if (len >= 5) {
 8019902:	d919      	bls.n	8019938 <STM32Ipl_WriteImage+0x94>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'E') && (ptr[-3] == 'P') && (ptr[-4] == 'J') && (ptr[-5] == '.'))
 8019904:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8019908:	2a47      	cmp	r2, #71	; 0x47
 801990a:	d038      	beq.n	801997e <STM32Ipl_WriteImage+0xda>
			if ((ptr[-1] == 'P') && (ptr[-2] == 'M') && (ptr[-3] == 'B') && (ptr[-4] == '.'))
 801990c:	2a50      	cmp	r2, #80	; 0x50
 801990e:	d119      	bne.n	8019944 <STM32Ipl_WriteImage+0xa0>
 8019910:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8019914:	2a4d      	cmp	r2, #77	; 0x4d
 8019916:	d037      	beq.n	8019988 <STM32Ipl_WriteImage+0xe4>
	xfree(upFilename);
 8019918:	4630      	mov	r0, r6
 801991a:	f000 f873 	bl	8019a04 <xfree>

		default:
			break;
	}

	return stm32ipl_err_UnsupportedFormat;
 801991e:	f06f 0004 	mvn.w	r0, #4
}
 8019922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		upFilename[i] = toupper(upFilename[i]);
 8019924:	f1ac 0c20 	sub.w	ip, ip, #32
	for (size_t i = 0; i < len; i++)
 8019928:	4596      	cmp	lr, r2
		upFilename[i] = toupper(upFilename[i]);
 801992a:	f882 c000 	strb.w	ip, [r2]
	for (size_t i = 0; i < len; i++)
 801992e:	d1db      	bne.n	80198e8 <STM32Ipl_WriteImage+0x44>
	if (len >= 5) {
 8019930:	2f04      	cmp	r7, #4
	ptr = upFilename + len;
 8019932:	eb06 0307 	add.w	r3, r6, r7
	if (len >= 5) {
 8019936:	d8e5      	bhi.n	8019904 <STM32Ipl_WriteImage+0x60>
	if (len >= 4) {
 8019938:	d1ee      	bne.n	8019918 <STM32Ipl_WriteImage+0x74>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'P') && (ptr[-3] == 'J') && (ptr[-4] == '.'))
 801993a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 801993e:	2a47      	cmp	r2, #71	; 0x47
 8019940:	d1e4      	bne.n	801990c <STM32Ipl_WriteImage+0x68>
 8019942:	e7e9      	b.n	8019918 <STM32Ipl_WriteImage+0x74>
				if ((ptr[-1] == 'M') && (ptr[-2] == 'P') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 8019944:	2a4d      	cmp	r2, #77	; 0x4d
 8019946:	d1e7      	bne.n	8019918 <STM32Ipl_WriteImage+0x74>
 8019948:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801994c:	2a50      	cmp	r2, #80	; 0x50
 801994e:	d02c      	beq.n	80199aa <STM32Ipl_WriteImage+0x106>
					if ((ptr[-1] == 'M') && (ptr[-2] == 'G') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 8019950:	2a47      	cmp	r2, #71	; 0x47
 8019952:	d1e1      	bne.n	8019918 <STM32Ipl_WriteImage+0x74>
 8019954:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8019958:	2a50      	cmp	r2, #80	; 0x50
 801995a:	d1dd      	bne.n	8019918 <STM32Ipl_WriteImage+0x74>
 801995c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8019960:	2b2e      	cmp	r3, #46	; 0x2e
 8019962:	d1d9      	bne.n	8019918 <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 8019964:	4630      	mov	r0, r6
 8019966:	f000 f84d 	bl	8019a04 <xfree>
	switch (img->bpp) {
 801996a:	68a3      	ldr	r3, [r4, #8]
 801996c:	2b01      	cmp	r3, #1
 801996e:	d1d6      	bne.n	801991e <STM32Ipl_WriteImage+0x7a>
	return savePnm(img, filename, format);
 8019970:	4629      	mov	r1, r5
 8019972:	4620      	mov	r0, r4
 8019974:	2205      	movs	r2, #5
}
 8019976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return savePnm(img, filename, format);
 801997a:	f7fe bd69 	b.w	8018450 <savePnm>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'E') && (ptr[-3] == 'P') && (ptr[-4] == 'J') && (ptr[-5] == '.'))
 801997e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8019982:	2a45      	cmp	r2, #69	; 0x45
 8019984:	d0c8      	beq.n	8019918 <STM32Ipl_WriteImage+0x74>
 8019986:	e7c7      	b.n	8019918 <STM32Ipl_WriteImage+0x74>
			if ((ptr[-1] == 'P') && (ptr[-2] == 'M') && (ptr[-3] == 'B') && (ptr[-4] == '.'))
 8019988:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801998c:	2a42      	cmp	r2, #66	; 0x42
 801998e:	d1c3      	bne.n	8019918 <STM32Ipl_WriteImage+0x74>
 8019990:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8019994:	2b2e      	cmp	r3, #46	; 0x2e
 8019996:	d1bf      	bne.n	8019918 <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 8019998:	4630      	mov	r0, r6
 801999a:	f000 f833 	bl	8019a04 <xfree>
			return saveBmp(img, filename);
 801999e:	4629      	mov	r1, r5
 80199a0:	4620      	mov	r0, r4
}
 80199a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			return saveBmp(img, filename);
 80199a6:	f7fe bb9d 	b.w	80180e4 <saveBmp>
				if ((ptr[-1] == 'M') && (ptr[-2] == 'P') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 80199aa:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80199ae:	2a50      	cmp	r2, #80	; 0x50
 80199b0:	d1b2      	bne.n	8019918 <STM32Ipl_WriteImage+0x74>
 80199b2:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80199b6:	2b2e      	cmp	r3, #46	; 0x2e
 80199b8:	d1ae      	bne.n	8019918 <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 80199ba:	4630      	mov	r0, r6
 80199bc:	f000 f822 	bl	8019a04 <xfree>
	switch (img->bpp) {
 80199c0:	68a3      	ldr	r3, [r4, #8]
 80199c2:	2b02      	cmp	r3, #2
 80199c4:	d001      	beq.n	80199ca <STM32Ipl_WriteImage+0x126>
 80199c6:	2b04      	cmp	r3, #4
 80199c8:	d1a9      	bne.n	801991e <STM32Ipl_WriteImage+0x7a>
	return savePnm(img, filename, format);
 80199ca:	4629      	mov	r1, r5
 80199cc:	4620      	mov	r0, r4
 80199ce:	2206      	movs	r2, #6
}
 80199d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return savePnm(img, filename, format);
 80199d4:	f7fe bd3c 	b.w	8018450 <savePnm>
		return stm32ipl_err_InvalidParameter;
 80199d8:	f06f 0001 	mvn.w	r0, #1
}
 80199dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return stm32ipl_err_InvalidParameter;
 80199de:	f06f 0001 	mvn.w	r0, #1
}
 80199e2:	4770      	bx	lr
 80199e4:	0806372d 	.word	0x0806372d

080199e8 <xalloc>:
 * @param size	Size of the memory buffer to be allocated (bytes).
 * @return		The allocated memory buffer, null in case of errors.
 */
void* xalloc(uint32_t size)
{
	return umm_malloc(size);
 80199e8:	f000 bb04 	b.w	8019ff4 <umm_malloc>

080199ec <xalloc0>:
 * Such buffer must be released with xfree().
 * @param size	Size of the memory buffer to be allocated (bytes).
 * @return		The allocated memory buffer, null in case of errors.
 */
void* xalloc0(uint32_t size)
{
 80199ec:	b538      	push	{r3, r4, r5, lr}
 80199ee:	4605      	mov	r5, r0
	void *mem = umm_malloc(size);
 80199f0:	f000 fb00 	bl	8019ff4 <umm_malloc>

	if (mem == NULL)
 80199f4:	4604      	mov	r4, r0
 80199f6:	b118      	cbz	r0, 8019a00 <xalloc0+0x14>
		return NULL;

	memset(mem, 0, size);
 80199f8:	462a      	mov	r2, r5
 80199fa:	2100      	movs	r1, #0
 80199fc:	f008 fc6e 	bl	80222dc <memset>

	return mem;
}
 8019a00:	4620      	mov	r0, r4
 8019a02:	bd38      	pop	{r3, r4, r5, pc}

08019a04 <xfree>:
 * @param mem	Pointer to the the memory buffer to be released.
 * @return		void
 */
void xfree(void *mem)
{
	umm_free(mem);
 8019a04:	f000 ba98 	b.w	8019f38 <umm_free>

08019a08 <fb_init>:
 * hood, uses heap memory .
 * @return		void.
 */
void fb_init(void)
{
	memset(g_fb_alloc_stack, 0, sizeof(uint32_t) * FB_ALLOC_MAX_ENTRY);
 8019a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019a0c:	2100      	movs	r1, #0
 8019a0e:	4805      	ldr	r0, [pc, #20]	; (8019a24 <fb_init+0x1c>)
{
 8019a10:	b508      	push	{r3, lr}
	memset(g_fb_alloc_stack, 0, sizeof(uint32_t) * FB_ALLOC_MAX_ENTRY);
 8019a12:	f008 fc63 	bl	80222dc <memset>
	g_fb_alloc_inext = 0;
 8019a16:	2300      	movs	r3, #0
 8019a18:	4903      	ldr	r1, [pc, #12]	; (8019a28 <fb_init+0x20>)
	g_fb_alloc_imark = 0;
 8019a1a:	4a04      	ldr	r2, [pc, #16]	; (8019a2c <fb_init+0x24>)
	g_fb_alloc_inext = 0;
 8019a1c:	600b      	str	r3, [r1, #0]
	g_fb_alloc_imark = 0;
 8019a1e:	6013      	str	r3, [r2, #0]
}
 8019a20:	bd08      	pop	{r3, pc}
 8019a22:	bf00      	nop
 8019a24:	20007230 	.word	0x20007230
 8019a28:	2000722c 	.word	0x2000722c
 8019a2c:	20007228 	.word	0x20007228

08019a30 <STM32Ipl_Downscale>:
	int32_t dstW;
	int32_t dstH;
	int32_t wRatio;
	int32_t hRatio;

	STM32IPL_CHECK_VALID_IMAGE(src)
 8019a30:	2800      	cmp	r0, #0
 8019a32:	f000 81d6 	beq.w	8019de2 <STM32Ipl_Downscale+0x3b2>
 8019a36:	68c3      	ldr	r3, [r0, #12]
{
 8019a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a3c:	4607      	mov	r7, r0
 8019a3e:	b087      	sub	sp, #28
	STM32IPL_CHECK_VALID_IMAGE(dst)
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	f000 81cb 	beq.w	8019ddc <STM32Ipl_Downscale+0x3ac>
 8019a46:	460e      	mov	r6, r1
 8019a48:	2900      	cmp	r1, #0
 8019a4a:	f000 81c7 	beq.w	8019ddc <STM32Ipl_Downscale+0x3ac>
 8019a4e:	68cb      	ldr	r3, [r1, #12]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	f000 81c3 	beq.w	8019ddc <STM32Ipl_Downscale+0x3ac>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 8019a56:	210f      	movs	r1, #15
 8019a58:	4690      	mov	r8, r2
 8019a5a:	f7fe fa71 	bl	8017f40 <STM32Ipl_ImageFormatSupported>
 8019a5e:	2800      	cmp	r0, #0
 8019a60:	f000 81b7 	beq.w	8019dd2 <STM32Ipl_Downscale+0x3a2>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 8019a64:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8019a68:	68b3      	ldr	r3, [r6, #8]
 8019a6a:	459a      	cmp	sl, r3
 8019a6c:	f040 81b6 	bne.w	8019ddc <STM32Ipl_Downscale+0x3ac>

	if ((dst->w < 1) || (dst->h < 1))
 8019a70:	6835      	ldr	r5, [r6, #0]
 8019a72:	2d00      	cmp	r5, #0
 8019a74:	f340 81b2 	ble.w	8019ddc <STM32Ipl_Downscale+0x3ac>
 8019a78:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8019a7c:	f1bb 0f00 	cmp.w	fp, #0
 8019a80:	f340 81ac 	ble.w	8019ddc <STM32Ipl_Downscale+0x3ac>

	dstW = dst->w;
	dstH = dst->h;

	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 8019a84:	e9d7 4300 	ldrd	r4, r3, [r7]
 8019a88:	041b      	lsls	r3, r3, #16
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 8019a8a:	ea4f 4c04 	mov.w	ip, r4, lsl #16
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 8019a8e:	fb93 f3fb 	sdiv	r3, r3, fp
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 8019a92:	fb9c fcf5 	sdiv	ip, ip, r5
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 8019a96:	3301      	adds	r3, #1
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 8019a98:	f10c 0c01 	add.w	ip, ip, #1
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 8019a9c:	9300      	str	r3, [sp, #0]

	if (reversed) {
 8019a9e:	f1b8 0f00 	cmp.w	r8, #0
 8019aa2:	d00a      	beq.n	8019aba <STM32Ipl_Downscale+0x8a>
		switch (src->bpp) {
 8019aa4:	f1ba 0f04 	cmp.w	sl, #4
 8019aa8:	f200 8193 	bhi.w	8019dd2 <STM32Ipl_Downscale+0x3a2>
 8019aac:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8019ab0:	00820094 	.word	0x00820094
 8019ab4:	01910051 	.word	0x01910051
 8019ab8:	0010      	.short	0x0010

			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	} else {
		switch (src->bpp) {
 8019aba:	f1ba 0f04 	cmp.w	sl, #4
 8019abe:	f200 8188 	bhi.w	8019dd2 <STM32Ipl_Downscale+0x3a2>
 8019ac2:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8019ac6:	0146      	.short	0x0146
 8019ac8:	00ff0124 	.word	0x00ff0124
 8019acc:	00d00186 	.word	0x00d00186
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019ad0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019ad4:	68f2      	ldr	r2, [r6, #12]
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019ad6:	f105 39ff 	add.w	r9, r5, #4294967295
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019ada:	68fe      	ldr	r6, [r7, #12]
 8019adc:	fb0b f305 	mul.w	r3, fp, r5
 8019ae0:	fb0c f909 	mul.w	r9, ip, r9
 8019ae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ae8:	eb02 0e03 	add.w	lr, r2, r3
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019aec:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 8019af0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019af4:	005b      	lsls	r3, r3, #1
 8019af6:	9201      	str	r2, [sp, #4]
 8019af8:	9302      	str	r3, [sp, #8]
 8019afa:	9b00      	ldr	r3, [sp, #0]
 8019afc:	fb0b f803 	mul.w	r8, fp, r3
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019b00:	9b01      	ldr	r3, [sp, #4]
 8019b02:	ea4f 4728 	mov.w	r7, r8, asr #16
 8019b06:	4649      	mov	r1, r9
 8019b08:	eb03 0a0e 	add.w	sl, r3, lr
 8019b0c:	fb04 f707 	mul.w	r7, r4, r7
 8019b10:	4652      	mov	r2, sl
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 8019b12:	eb07 4321 	add.w	r3, r7, r1, asr #16
 8019b16:	1ed0      	subs	r0, r2, #3
 8019b18:	eba1 010c 	sub.w	r1, r1, ip
 8019b1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					for (int x = dstW - 1; x >= 0; x--)
 8019b20:	4586      	cmp	lr, r0
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 8019b22:	5af5      	ldrh	r5, [r6, r3]
 8019b24:	4433      	add	r3, r6
 8019b26:	789b      	ldrb	r3, [r3, #2]
 8019b28:	f822 5c03 	strh.w	r5, [r2, #-3]
 8019b2c:	f802 3c01 	strb.w	r3, [r2, #-1]
					for (int x = dstW - 1; x >= 0; x--)
 8019b30:	4602      	mov	r2, r0
 8019b32:	d1ee      	bne.n	8019b12 <STM32Ipl_Downscale+0xe2>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019b34:	9b00      	ldr	r3, [sp, #0]
 8019b36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019b3a:	eba8 0803 	sub.w	r8, r8, r3
 8019b3e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8019b42:	9b02      	ldr	r3, [sp, #8]
 8019b44:	eb03 0e0a 	add.w	lr, r3, sl
 8019b48:	d1da      	bne.n	8019b00 <STM32Ipl_Downscale+0xd0>
			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	}

	return stm32ipl_err_Ok;
 8019b4a:	2000      	movs	r0, #0
}
 8019b4c:	b007      	add	sp, #28
 8019b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019b52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019b56:	68f6      	ldr	r6, [r6, #12]
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019b58:	f105 3aff 	add.w	sl, r5, #4294967295
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019b5c:	ebc5 7985 	rsb	r9, r5, r5, lsl #30
 8019b60:	fb0b f305 	mul.w	r3, fp, r5
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019b64:	68ff      	ldr	r7, [r7, #12]
 8019b66:	fb0c fa0a 	mul.w	sl, ip, sl
 8019b6a:	006d      	lsls	r5, r5, #1
 8019b6c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019b70:	9b00      	ldr	r3, [sp, #0]
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019b72:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8019b76:	fb0b fe03 	mul.w	lr, fp, r3
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019b7a:	ea4f 402e 	mov.w	r0, lr, asr #16
 8019b7e:	eb05 0806 	add.w	r8, r5, r6
 8019b82:	4652      	mov	r2, sl
 8019b84:	fb04 f000 	mul.w	r0, r4, r0
 8019b88:	4643      	mov	r3, r8
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 8019b8a:	eb00 4122 	add.w	r1, r0, r2, asr #16
 8019b8e:	eba2 020c 	sub.w	r2, r2, ip
 8019b92:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8019b96:	f823 1d02 	strh.w	r1, [r3, #-2]!
					for (int x = dstW - 1; x >= 0; x--)
 8019b9a:	429e      	cmp	r6, r3
 8019b9c:	d1f5      	bne.n	8019b8a <STM32Ipl_Downscale+0x15a>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019b9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019ba2:	9b00      	ldr	r3, [sp, #0]
 8019ba4:	eb09 0608 	add.w	r6, r9, r8
 8019ba8:	f1bb 3fff 	cmp.w	fp, #4294967295
 8019bac:	ebae 0e03 	sub.w	lr, lr, r3
 8019bb0:	d1e3      	bne.n	8019b7a <STM32Ipl_Downscale+0x14a>
 8019bb2:	e7ca      	b.n	8019b4a <STM32Ipl_Downscale+0x11a>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019bb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019bb8:	4628      	mov	r0, r5
 8019bba:	e000      	b.n	8019bbe <STM32Ipl_Downscale+0x18e>
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 8019bbc:	6830      	ldr	r0, [r6, #0]
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 8019bbe:	68f3      	ldr	r3, [r6, #12]
 8019bc0:	462a      	mov	r2, r5
 8019bc2:	2100      	movs	r1, #0
 8019bc4:	fb00 300b 	mla	r0, r0, fp, r3
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019bc8:	f10b 3bff 	add.w	fp, fp, #4294967295
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 8019bcc:	f008 fb86 	bl	80222dc <memset>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019bd0:	f1bb 3fff 	cmp.w	fp, #4294967295
 8019bd4:	d1f2      	bne.n	8019bbc <STM32Ipl_Downscale+0x18c>
 8019bd6:	e7b8      	b.n	8019b4a <STM32Ipl_Downscale+0x11a>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019bd8:	341f      	adds	r4, #31
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019bda:	f10b 3bff 	add.w	fp, fp, #4294967295
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019bde:	1e6a      	subs	r2, r5, #1
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019be0:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8019be4:	0963      	lsrs	r3, r4, #5
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019be6:	68f6      	ldr	r6, [r6, #12]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019be8:	f04f 0901 	mov.w	r9, #1
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019bec:	9204      	str	r2, [sp, #16]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019bee:	9302      	str	r3, [sp, #8]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019bf0:	f105 031f 	add.w	r3, r5, #31
 8019bf4:	095c      	lsrs	r4, r3, #5
 8019bf6:	9b00      	ldr	r3, [sp, #0]
 8019bf8:	fb04 fe0b 	mul.w	lr, r4, fp
 8019bfc:	fb0b fa03 	mul.w	sl, fp, r3
 8019c00:	fb02 f30c 	mul.w	r3, r2, ip
 8019c04:	9303      	str	r3, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019c06:	ea4f 472a 	mov.w	r7, sl, asr #16
 8019c0a:	9b02      	ldr	r3, [sp, #8]
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019c0c:	9401      	str	r4, [sp, #4]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019c0e:	fb03 f707 	mul.w	r7, r3, r7
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019c12:	e9dd 0203 	ldrd	r0, r2, [sp, #12]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019c16:	eb07 5360 	add.w	r3, r7, r0, asr #21
 8019c1a:	f3c0 4104 	ubfx	r1, r0, #16, #5
 8019c1e:	eb0e 1562 	add.w	r5, lr, r2, asr #5
 8019c22:	eba0 000c 	sub.w	r0, r0, ip
 8019c26:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8019c2a:	f856 4025 	ldr.w	r4, [r6, r5, lsl #2]
 8019c2e:	40cb      	lsrs	r3, r1
 8019c30:	f002 011f 	and.w	r1, r2, #31
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019c34:	3a01      	subs	r2, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019c36:	f003 0301 	and.w	r3, r3, #1
 8019c3a:	408b      	lsls	r3, r1
 8019c3c:	fa09 f101 	lsl.w	r1, r9, r1
 8019c40:	ea24 0101 	bic.w	r1, r4, r1
 8019c44:	430b      	orrs	r3, r1
 8019c46:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
					for (int32_t x = dstW - 1; x >= 0; x--)
 8019c4a:	1c53      	adds	r3, r2, #1
 8019c4c:	d1e3      	bne.n	8019c16 <STM32Ipl_Downscale+0x1e6>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 8019c4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019c52:	9c01      	ldr	r4, [sp, #4]
 8019c54:	9b00      	ldr	r3, [sp, #0]
 8019c56:	f1bb 3fff 	cmp.w	fp, #4294967295
 8019c5a:	ebae 0e04 	sub.w	lr, lr, r4
 8019c5e:	ebaa 0a03 	sub.w	sl, sl, r3
 8019c62:	d1d0      	bne.n	8019c06 <STM32Ipl_Downscale+0x1d6>
 8019c64:	e771      	b.n	8019b4a <STM32Ipl_Downscale+0x11a>
 8019c66:	68f3      	ldr	r3, [r6, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019c68:	f04f 0800 	mov.w	r8, #0
 8019c6c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019c70:	68f8      	ldr	r0, [r7, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019c72:	46c2      	mov	sl, r8
				for (int32_t y = 0; y < dstH; y++) {
 8019c74:	46c1      	mov	r9, r8
 8019c76:	eb03 0e02 	add.w	lr, r3, r2
 8019c7a:	9301      	str	r3, [sp, #4]
 8019c7c:	9202      	str	r2, [sp, #8]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019c7e:	ea4f 472a 	mov.w	r7, sl, asr #16
 8019c82:	9b01      	ldr	r3, [sp, #4]
 8019c84:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8019c88:	2100      	movs	r1, #0
 8019c8a:	fb04 f707 	mul.w	r7, r4, r7
					for (int32_t x = 0; x < dstW; x++)
 8019c8e:	441a      	add	r2, r3
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 8019c90:	eb07 4321 	add.w	r3, r7, r1, asr #16
					for (int32_t x = 0; x < dstW; x++)
 8019c94:	3203      	adds	r2, #3
 8019c96:	4461      	add	r1, ip
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 8019c98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					for (int32_t x = 0; x < dstW; x++)
 8019c9c:	4596      	cmp	lr, r2
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 8019c9e:	eb00 0603 	add.w	r6, r0, r3
 8019ca2:	5ac3      	ldrh	r3, [r0, r3]
 8019ca4:	78b6      	ldrb	r6, [r6, #2]
 8019ca6:	f822 3c03 	strh.w	r3, [r2, #-3]
 8019caa:	f802 6c01 	strb.w	r6, [r2, #-1]
					for (int32_t x = 0; x < dstW; x++)
 8019cae:	d1ef      	bne.n	8019c90 <STM32Ipl_Downscale+0x260>
				for (int32_t y = 0; y < dstH; y++) {
 8019cb0:	9b00      	ldr	r3, [sp, #0]
 8019cb2:	f109 0901 	add.w	r9, r9, #1
 8019cb6:	44a8      	add	r8, r5
 8019cb8:	449a      	add	sl, r3
 8019cba:	45cb      	cmp	fp, r9
 8019cbc:	9b02      	ldr	r3, [sp, #8]
 8019cbe:	449e      	add	lr, r3
 8019cc0:	d1dd      	bne.n	8019c7e <STM32Ipl_Downscale+0x24e>
 8019cc2:	e742      	b.n	8019b4a <STM32Ipl_Downscale+0x11a>
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 8019cc4:	f04f 0e00 	mov.w	lr, #0
 8019cc8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8019ccc:	006b      	lsls	r3, r5, #1
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019cce:	68ff      	ldr	r7, [r7, #12]
 8019cd0:	eb0a 0645 	add.w	r6, sl, r5, lsl #1
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 8019cd4:	46f1      	mov	r9, lr
				for (int32_t y = 0; y < dstH; y++) {
 8019cd6:	46f0      	mov	r8, lr
 8019cd8:	9301      	str	r3, [sp, #4]
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019cda:	ea4f 4029 	mov.w	r0, r9, asr #16
 8019cde:	2300      	movs	r3, #0
 8019ce0:	eb0a 024e 	add.w	r2, sl, lr, lsl #1
 8019ce4:	fb04 f000 	mul.w	r0, r4, r0
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 8019ce8:	eb00 4123 	add.w	r1, r0, r3, asr #16
					for (int32_t x = 0; x < dstW; x++)
 8019cec:	4463      	add	r3, ip
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 8019cee:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8019cf2:	f822 1b02 	strh.w	r1, [r2], #2
					for (int32_t x = 0; x < dstW; x++)
 8019cf6:	4296      	cmp	r6, r2
 8019cf8:	d1f6      	bne.n	8019ce8 <STM32Ipl_Downscale+0x2b8>
				for (int32_t y = 0; y < dstH; y++) {
 8019cfa:	9b00      	ldr	r3, [sp, #0]
 8019cfc:	f108 0801 	add.w	r8, r8, #1
 8019d00:	44ae      	add	lr, r5
 8019d02:	4499      	add	r9, r3
 8019d04:	45c3      	cmp	fp, r8
 8019d06:	9b01      	ldr	r3, [sp, #4]
 8019d08:	441e      	add	r6, r3
 8019d0a:	d1e6      	bne.n	8019cda <STM32Ipl_Downscale+0x2aa>
 8019d0c:	e71d      	b.n	8019b4a <STM32Ipl_Downscale+0x11a>
		switch (src->bpp) {
 8019d0e:	f04f 0e00 	mov.w	lr, #0
 8019d12:	4629      	mov	r1, r5
 8019d14:	f8dd 8000 	ldr.w	r8, [sp]
				for (int32_t y = 0; y < dstH; y++) {
 8019d18:	4670      	mov	r0, lr
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 8019d1a:	68f3      	ldr	r3, [r6, #12]
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019d1c:	ea4f 492e 	mov.w	r9, lr, asr #16
 8019d20:	68fa      	ldr	r2, [r7, #12]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 8019d22:	fb00 f101 	mul.w	r1, r0, r1
					for (int32_t x = 0; x < dstW; x++)
 8019d26:	fb04 2909 	mla	r9, r4, r9, r2
 8019d2a:	195c      	adds	r4, r3, r5
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 8019d2c:	2200      	movs	r2, #0
 8019d2e:	440b      	add	r3, r1
 8019d30:	440c      	add	r4, r1
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 8019d32:	1411      	asrs	r1, r2, #16
					for (int32_t x = 0; x < dstW; x++)
 8019d34:	4462      	add	r2, ip
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 8019d36:	f819 1001 	ldrb.w	r1, [r9, r1]
 8019d3a:	f803 1b01 	strb.w	r1, [r3], #1
					for (int32_t x = 0; x < dstW; x++)
 8019d3e:	429c      	cmp	r4, r3
 8019d40:	d1f7      	bne.n	8019d32 <STM32Ipl_Downscale+0x302>
				for (int32_t y = 0; y < dstH; y++) {
 8019d42:	3001      	adds	r0, #1
 8019d44:	44c6      	add	lr, r8
 8019d46:	4583      	cmp	fp, r0
 8019d48:	f43f aeff 	beq.w	8019b4a <STM32Ipl_Downscale+0x11a>
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019d4c:	683c      	ldr	r4, [r7, #0]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 8019d4e:	6831      	ldr	r1, [r6, #0]
 8019d50:	e7e3      	b.n	8019d1a <STM32Ipl_Downscale+0x2ea>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019d52:	341f      	adds	r4, #31
 8019d54:	f8d7 900c 	ldr.w	r9, [r7, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019d58:	2700      	movs	r7, #0
 8019d5a:	68f2      	ldr	r2, [r6, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019d5c:	0963      	lsrs	r3, r4, #5
				for (int32_t y = 0; y < dstH; y++) {
 8019d5e:	4656      	mov	r6, sl
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019d60:	f04f 0801 	mov.w	r8, #1
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019d64:	9302      	str	r3, [sp, #8]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 8019d66:	f105 031f 	add.w	r3, r5, #31
 8019d6a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8019d6e:	095b      	lsrs	r3, r3, #5
 8019d70:	46bb      	mov	fp, r7
 8019d72:	9303      	str	r3, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019d74:	ea4f 4a2b 	mov.w	sl, fp, asr #16
 8019d78:	9b02      	ldr	r3, [sp, #8]
					for (int32_t x = 0; x < dstW; x++)
 8019d7a:	9904      	ldr	r1, [sp, #16]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 8019d7c:	2400      	movs	r4, #0
 8019d7e:	fb03 fa0a 	mul.w	sl, r3, sl
 8019d82:	9601      	str	r6, [sp, #4]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019d84:	eb0a 5364 	add.w	r3, sl, r4, asr #21
 8019d88:	f3c4 4004 	ubfx	r0, r4, #16, #5
 8019d8c:	eb07 1e61 	add.w	lr, r7, r1, asr #5
					for (int32_t x = 0; x < dstW; x++)
 8019d90:	4464      	add	r4, ip
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019d92:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019d96:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 8019d9a:	40c3      	lsrs	r3, r0
 8019d9c:	f001 001f 	and.w	r0, r1, #31
					for (int32_t x = 0; x < dstW; x++)
 8019da0:	3101      	adds	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019da2:	f003 0301 	and.w	r3, r3, #1
					for (int32_t x = 0; x < dstW; x++)
 8019da6:	428d      	cmp	r5, r1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 8019da8:	fa03 f300 	lsl.w	r3, r3, r0
 8019dac:	fa08 f000 	lsl.w	r0, r8, r0
 8019db0:	ea26 0000 	bic.w	r0, r6, r0
 8019db4:	ea43 0300 	orr.w	r3, r3, r0
 8019db8:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 8019dbc:	d1e2      	bne.n	8019d84 <STM32Ipl_Downscale+0x354>
				for (int32_t y = 0; y < dstH; y++) {
 8019dbe:	9b00      	ldr	r3, [sp, #0]
 8019dc0:	9e01      	ldr	r6, [sp, #4]
 8019dc2:	449b      	add	fp, r3
 8019dc4:	9b03      	ldr	r3, [sp, #12]
 8019dc6:	3601      	adds	r6, #1
 8019dc8:	441f      	add	r7, r3
 8019dca:	9b05      	ldr	r3, [sp, #20]
 8019dcc:	42b3      	cmp	r3, r6
 8019dce:	d1d1      	bne.n	8019d74 <STM32Ipl_Downscale+0x344>
 8019dd0:	e6bb      	b.n	8019b4a <STM32Ipl_Downscale+0x11a>
		switch (src->bpp) {
 8019dd2:	f06f 0004 	mvn.w	r0, #4
}
 8019dd6:	b007      	add	sp, #28
 8019dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 8019ddc:	f06f 0001 	mvn.w	r0, #1
 8019de0:	e6b4      	b.n	8019b4c <STM32Ipl_Downscale+0x11c>
 8019de2:	f06f 0001 	mvn.w	r0, #1
}
 8019de6:	4770      	bx	lr

08019de8 <umm_malloc_core>:
   * When a block removed from the free list, the space used by the free
   * pointers is available for data. That's what the first calculation
   * of size is doing.
   */

  if( size <= (sizeof(((umm_block *)0)->body)) )
 8019de8:	287c      	cmp	r0, #124	; 0x7c
/* ------------------------------------------------------------------------
 * Must be called only from within critical sections guarded by
 * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
 */

static void *umm_malloc_core( size_t size ) {
 8019dea:	b530      	push	{r4, r5, lr}
  if( size <= (sizeof(((umm_block *)0)->body)) )
 8019dec:	d972      	bls.n	8019ed4 <umm_malloc_core+0xec>
  size -= ( 1 + (sizeof(((umm_block *)0)->body)) );
 8019dee:	f1a0 0c7d 	sub.w	ip, r0, #125	; 0x7d
  return( 2 + size/(sizeof(umm_block)) );
 8019df2:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 8019df6:	f10c 0c02 	add.w	ip, ip, #2
 8019dfa:	fa1f fc8c 	uxth.w	ip, ip
   *
   * This part may be customized to be a best-fit, worst-fit, or first-fit
   * algorithm
   */

  cf = UMM_NFREE(0);
 8019dfe:	4b37      	ldr	r3, [pc, #220]	; (8019edc <umm_malloc_core+0xf4>)
 8019e00:	6819      	ldr	r1, [r3, #0]
 8019e02:	888d      	ldrh	r5, [r1, #4]

  bestBlock = UMM_NFREE(0);
  bestSize  = 0x7FFF;

  while( cf ) {
 8019e04:	2d00      	cmp	r5, #0
 8019e06:	d057      	beq.n	8019eb8 <umm_malloc_core+0xd0>
 8019e08:	462a      	mov	r2, r5
  bestSize  = 0x7FFF;
 8019e0a:	f647 7eff 	movw	lr, #32767	; 0x7fff
    blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) - cf;
 8019e0e:	01d3      	lsls	r3, r2, #7
 8019e10:	eb01 10c2 	add.w	r0, r1, r2, lsl #7
 8019e14:	5acb      	ldrh	r3, [r1, r3]
 8019e16:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8019e1a:	1a9b      	subs	r3, r3, r2
 8019e1c:	b29b      	uxth	r3, r3

    DBGLOG_TRACE( "Looking at block %6i size %6i\n", cf, blockSize );

#if defined UMM_BEST_FIT
    if( (blockSize >= blocks) && (blockSize < bestSize) ) {
 8019e1e:	459c      	cmp	ip, r3
 8019e20:	bf8c      	ite	hi
 8019e22:	2400      	movhi	r4, #0
 8019e24:	2401      	movls	r4, #1
 8019e26:	4573      	cmp	r3, lr
 8019e28:	d202      	bcs.n	8019e30 <umm_malloc_core+0x48>
 8019e2a:	b10c      	cbz	r4, 8019e30 <umm_malloc_core+0x48>
 8019e2c:	4615      	mov	r5, r2
 8019e2e:	469e      	mov	lr, r3
      break;
#else
#  error "No UMM_*_FIT is defined - check umm_malloc_cfg.h"
#endif

    cf = UMM_NFREE(cf);
 8019e30:	8882      	ldrh	r2, [r0, #4]
  while( cf ) {
 8019e32:	2a00      	cmp	r2, #0
 8019e34:	d1eb      	bne.n	8019e0e <umm_malloc_core+0x26>
  }

  if( 0x7FFF != bestSize ) {
 8019e36:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019e3a:	4596      	cmp	lr, r2
 8019e3c:	d040      	beq.n	8019ec0 <umm_malloc_core+0xd8>
    cf        = bestBlock;
    blockSize = bestSize;
  }

  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks ) {
 8019e3e:	eb01 10c5 	add.w	r0, r1, r5, lsl #7
 8019e42:	45f4      	cmp	ip, lr
 8019e44:	8803      	ldrh	r3, [r0, #0]
 8019e46:	bf8c      	ite	hi
 8019e48:	2400      	movhi	r4, #0
 8019e4a:	2401      	movls	r4, #1
 8019e4c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8019e50:	2a00      	cmp	r2, #0
 8019e52:	d03d      	beq.n	8019ed0 <umm_malloc_core+0xe8>
 8019e54:	2c00      	cmp	r4, #0
 8019e56:	d03b      	beq.n	8019ed0 <umm_malloc_core+0xe8>
     * what we need, unlink it from the free list and mark it as in use, and
     * link the rest of the block back into the freelist as if it was a new
     * block on the free list...
     */

    if( blockSize == blocks ) {
 8019e58:	45e6      	cmp	lr, ip
 8019e5a:	d021      	beq.n	8019ea0 <umm_malloc_core+0xb8>
  UMM_NBLOCK(c+blocks) = (UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) | new_freemask;
 8019e5c:	44ac      	add	ip, r5
 8019e5e:	4c20      	ldr	r4, [pc, #128]	; (8019ee0 <umm_malloc_core+0xf8>)
 8019e60:	eb01 12cc 	add.w	r2, r1, ip, lsl #7
 8019e64:	431c      	orrs	r4, r3
 8019e66:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 8019e6a:	52cc      	strh	r4, [r1, r3]
  UMM_PBLOCK(c+blocks) = c;
 8019e6c:	8055      	strh	r5, [r2, #2]
  UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (c+blocks);
 8019e6e:	8803      	ldrh	r3, [r0, #0]
 8019e70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8019e74:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 8019e78:	f8a3 c002 	strh.w	ip, [r3, #2]
       * free block from `cf` to `cf + blocks`. So we have to adjust pointers
       * to and from adjacent free blocks.
       */

      /* previous free block */
      UMM_NFREE( UMM_PFREE(cf) ) = cf + blocks;
 8019e7c:	88c4      	ldrh	r4, [r0, #6]
  UMM_NBLOCK(c)                                = (c+blocks);
 8019e7e:	f8a0 c000 	strh.w	ip, [r0]
      UMM_NFREE( UMM_PFREE(cf) ) = cf + blocks;
 8019e82:	b2a3      	uxth	r3, r4
 8019e84:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 8019e88:	f8a3 c004 	strh.w	ip, [r3, #4]
      UMM_PFREE( cf + blocks ) = UMM_PFREE(cf);
 8019e8c:	80d4      	strh	r4, [r2, #6]

      /* next free block */
      UMM_PFREE( UMM_NFREE(cf) ) = cf + blocks;
 8019e8e:	8883      	ldrh	r3, [r0, #4]
 8019e90:	b29c      	uxth	r4, r3
 8019e92:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
 8019e96:	f8a1 c006 	strh.w	ip, [r1, #6]
      UMM_NFREE( cf + blocks ) = UMM_NFREE(cf);
 8019e9a:	8093      	strh	r3, [r2, #4]
    DBGLOG_DEBUG(  "Can't allocate %5i blocks\n", blocks );

    return( (void *)NULL );
  }

  return( (void *)&UMM_DATA(cf) );
 8019e9c:	3004      	adds	r0, #4
}
 8019e9e:	bd30      	pop	{r4, r5, pc}
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 8019ea0:	88c4      	ldrh	r4, [r0, #6]
 8019ea2:	8885      	ldrh	r5, [r0, #4]
 8019ea4:	b2a3      	uxth	r3, r4
 8019ea6:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 8019eaa:	809d      	strh	r5, [r3, #4]
  UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 8019eac:	8883      	ldrh	r3, [r0, #4]
 8019eae:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
 8019eb2:	80cc      	strh	r4, [r1, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 8019eb4:	8002      	strh	r2, [r0, #0]
}
 8019eb6:	e7f1      	b.n	8019e9c <umm_malloc_core+0xb4>
  if( 0x7FFF != bestSize ) {
 8019eb8:	fabc f48c 	clz	r4, ip
  uint16_t blockSize = 0;
 8019ebc:	462b      	mov	r3, r5
 8019ebe:	0964      	lsrs	r4, r4, #5
 8019ec0:	4608      	mov	r0, r1
 8019ec2:	469e      	mov	lr, r3
 8019ec4:	2500      	movs	r5, #0
  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks ) {
 8019ec6:	8803      	ldrh	r3, [r0, #0]
 8019ec8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8019ecc:	2a00      	cmp	r2, #0
 8019ece:	d1c1      	bne.n	8019e54 <umm_malloc_core+0x6c>
    return( (void *)NULL );
 8019ed0:	2000      	movs	r0, #0
}
 8019ed2:	bd30      	pop	{r4, r5, pc}
    return( 1 );
 8019ed4:	f04f 0c01 	mov.w	ip, #1
 8019ed8:	e791      	b.n	8019dfe <umm_malloc_core+0x16>
 8019eda:	bf00      	nop
 8019edc:	20007330 	.word	0x20007330
 8019ee0:	ffff8000 	.word	0xffff8000

08019ee4 <umm_init>:
void umm_init( void *UMM_MALLOC_CFG_HEAP_ADDR, uint32_t UMM_MALLOC_CFG_HEAP_SIZE ) {
 8019ee4:	460a      	mov	r2, r1
  memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZE);
 8019ee6:	2100      	movs	r1, #0
void umm_init( void *UMM_MALLOC_CFG_HEAP_ADDR, uint32_t UMM_MALLOC_CFG_HEAP_SIZE ) {
 8019ee8:	b538      	push	{r3, r4, r5, lr}
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 8019eea:	09d3      	lsrs	r3, r2, #7
  umm_heap = (umm_block *)UMM_MALLOC_CFG_HEAP_ADDR;
 8019eec:	4c0f      	ldr	r4, [pc, #60]	; (8019f2c <umm_init+0x48>)
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 8019eee:	4d10      	ldr	r5, [pc, #64]	; (8019f30 <umm_init+0x4c>)
  umm_heap = (umm_block *)UMM_MALLOC_CFG_HEAP_ADDR;
 8019ef0:	6020      	str	r0, [r4, #0]
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 8019ef2:	802b      	strh	r3, [r5, #0]
  memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZE);
 8019ef4:	f008 f9f2 	bl	80222dc <memset>
    UMM_NBLOCK(0) = 1;
 8019ef8:	6822      	ldr	r2, [r4, #0]
    UMM_NFREE(0)  = 1;
 8019efa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8019efe:	8829      	ldrh	r1, [r5, #0]
    UMM_NBLOCK(0) = 1;
 8019f00:	2000      	movs	r0, #0
    UMM_NFREE(0)  = 1;
 8019f02:	6053      	str	r3, [r2, #4]
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8019f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8019f08:	1e4c      	subs	r4, r1, #1
    UMM_NBLOCK(0) = 1;
 8019f0a:	f04f 0c01 	mov.w	ip, #1
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8019f0e:	440b      	add	r3, r1
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8019f10:	4908      	ldr	r1, [pc, #32]	; (8019f34 <umm_init+0x50>)
    UMM_NBLOCK(0) = 1;
 8019f12:	7050      	strb	r0, [r2, #1]
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8019f14:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8019f18:	4321      	orrs	r1, r4
    UMM_NBLOCK(0) = 1;
 8019f1a:	f882 c000 	strb.w	ip, [r2]
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 8019f1e:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 8019f22:	f883 c002 	strb.w	ip, [r3, #2]
 8019f26:	70d8      	strb	r0, [r3, #3]
}
 8019f28:	bd38      	pop	{r3, r4, r5, pc}
 8019f2a:	bf00      	nop
 8019f2c:	20007330 	.word	0x20007330
 8019f30:	20007334 	.word	0x20007334
 8019f34:	ffff8000 	.word	0xffff8000

08019f38 <umm_free>:
  if (umm_heap == NULL) {
 8019f38:	4b2c      	ldr	r3, [pc, #176]	; (8019fec <umm_free+0xb4>)
 8019f3a:	681b      	ldr	r3, [r3, #0]
  if( (void *)0 == ptr ) {
 8019f3c:	2800      	cmp	r0, #0
 8019f3e:	d054      	beq.n	8019fea <umm_free+0xb2>
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d052      	beq.n	8019fea <umm_free+0xb2>
  c = (((uint8_t *)ptr)-(uint8_t *)(&(umm_heap[0])))/sizeof(umm_block);
 8019f44:	1ac0      	subs	r0, r0, r3
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8019f46:	f3c0 12cf 	ubfx	r2, r0, #7, #16
void umm_free( void *ptr ) {
 8019f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8019f4c:	ea4f 1ec2 	mov.w	lr, r2, lsl #7
  c = (((uint8_t *)ptr)-(uint8_t *)(&(umm_heap[0])))/sizeof(umm_block);
 8019f50:	4610      	mov	r0, r2
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 8019f52:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8019f56:	f833 100e 	ldrh.w	r1, [r3, lr]
 8019f5a:	01cc      	lsls	r4, r1, #7
 8019f5c:	eb03 16c1 	add.w	r6, r3, r1, lsl #7
 8019f60:	f833 c004 	ldrh.w	ip, [r3, r4]
 8019f64:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8019f68:	fa1f f58c 	uxth.w	r5, ip
 8019f6c:	d121      	bne.n	8019fb2 <umm_free+0x7a>
  if( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MASK ) {
 8019f6e:	8854      	ldrh	r4, [r2, #2]
 8019f70:	fa1f fc84 	uxth.w	ip, r4
 8019f74:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 8019f78:	f933 500c 	ldrsh.w	r5, [r3, ip]
 8019f7c:	2d00      	cmp	r5, #0
 8019f7e:	db0e      	blt.n	8019f9e <umm_free+0x66>
    UMM_PFREE(UMM_NFREE(0)) = c;
 8019f80:	889d      	ldrh	r5, [r3, #4]
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 8019f82:	4c1b      	ldr	r4, [pc, #108]	; (8019ff0 <umm_free+0xb8>)
 8019f84:	430c      	orrs	r4, r1
    UMM_PFREE(UMM_NFREE(0)) = c;
 8019f86:	b2a9      	uxth	r1, r5
 8019f88:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8019f8c:	80c8      	strh	r0, [r1, #6]
    UMM_PFREE(c)            = 0;
 8019f8e:	2100      	movs	r1, #0
    UMM_NFREE(c)            = UMM_NFREE(0);
 8019f90:	8095      	strh	r5, [r2, #4]
    UMM_PFREE(c)            = 0;
 8019f92:	7191      	strb	r1, [r2, #6]
 8019f94:	71d1      	strb	r1, [r2, #7]
    UMM_NFREE(0)            = c;
 8019f96:	8098      	strh	r0, [r3, #4]
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 8019f98:	f823 400e 	strh.w	r4, [r3, lr]
}
 8019f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UMM_NBLOCK(UMM_PBLOCK(c)) = UMM_NBLOCK(c) | freemask;
 8019f9e:	4a14      	ldr	r2, [pc, #80]	; (8019ff0 <umm_free+0xb8>)
 8019fa0:	430a      	orrs	r2, r1
 8019fa2:	f823 200c 	strh.w	r2, [r3, ip]
  UMM_PBLOCK(UMM_NBLOCK(c)) = UMM_PBLOCK(c);
 8019fa6:	f833 200e 	ldrh.w	r2, [r3, lr]
 8019faa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8019fae:	805c      	strh	r4, [r3, #2]
}
 8019fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 8019fb2:	f8b6 c006 	ldrh.w	ip, [r6, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 8019fb6:	f3c5 050e 	ubfx	r5, r5, #0, #15
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 8019fba:	88b7      	ldrh	r7, [r6, #4]
 8019fbc:	fa1f f18c 	uxth.w	r1, ip
 8019fc0:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8019fc4:	808f      	strh	r7, [r1, #4]
  UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 8019fc6:	88b1      	ldrh	r1, [r6, #4]
 8019fc8:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8019fcc:	f8a1 c006 	strh.w	ip, [r1, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 8019fd0:	531d      	strh	r5, [r3, r4]
    UMM_PBLOCK(UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK) = c;
 8019fd2:	f833 100e 	ldrh.w	r1, [r3, lr]
 8019fd6:	01c9      	lsls	r1, r1, #7
 8019fd8:	5a59      	ldrh	r1, [r3, r1]
 8019fda:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8019fde:	eb03 14c1 	add.w	r4, r3, r1, lsl #7
 8019fe2:	8060      	strh	r0, [r4, #2]
    UMM_NBLOCK(c) = UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK;
 8019fe4:	f823 100e 	strh.w	r1, [r3, lr]
 8019fe8:	e7c1      	b.n	8019f6e <umm_free+0x36>
 8019fea:	4770      	bx	lr
 8019fec:	20007330 	.word	0x20007330
 8019ff0:	ffff8000 	.word	0xffff8000

08019ff4 <umm_malloc>:

void *umm_malloc( size_t size ) {

  void *ptr = NULL;

  if (umm_heap == NULL) {
 8019ff4:	4b03      	ldr	r3, [pc, #12]	; (801a004 <umm_malloc+0x10>)
 8019ff6:	681a      	ldr	r2, [r3, #0]
   * a size of 0 - and if we are we'll simply return a null pointer. if not
   * then reduce the size by 1 byte so that the subsequent calculations on
   * the number of blocks to allocate are easier...
   */

  if( 0 == size ) {
 8019ff8:	b112      	cbz	r2, 801a000 <umm_malloc+0xc>
 8019ffa:	b108      	cbz	r0, 801a000 <umm_malloc+0xc>

  /* Allocate the memory withing a protected critical section */

  UMM_CRITICAL_ENTRY();

  ptr = umm_malloc_core( size );
 8019ffc:	f7ff bef4 	b.w	8019de8 <umm_malloc_core>

  UMM_CRITICAL_EXIT();

  return( ptr );
}
 801a000:	2000      	movs	r0, #0
 801a002:	4770      	bx	lr
 801a004:	20007330 	.word	0x20007330

0801a008 <UTIL_LCD_SetFuncDriver>:
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801a008:	6803      	ldr	r3, [r0, #0]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
  FuncDriver.FillRect       = pDrv->FillRect;
  FuncDriver.GetPixel       = pDrv->GetPixel;
  FuncDriver.SetPixel       = pDrv->SetPixel;
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801a00a:	6a02      	ldr	r2, [r0, #32]
{
 801a00c:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801a00e:	4c14      	ldr	r4, [pc, #80]	; (801a060 <UTIL_LCD_SetFuncDriver+0x58>)
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 801a010:	2500      	movs	r5, #0
 801a012:	4e14      	ldr	r6, [pc, #80]	; (801a064 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801a014:	6023      	str	r3, [r4, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801a016:	6843      	ldr	r3, [r0, #4]
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801a018:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801a01c:	6222      	str	r2, [r4, #32]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801a01e:	6063      	str	r3, [r4, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 801a020:	6883      	ldr	r3, [r0, #8]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801a022:	6a42      	ldr	r2, [r0, #36]	; 0x24
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 801a024:	60a3      	str	r3, [r4, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801a026:	68c3      	ldr	r3, [r0, #12]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801a028:	6262      	str	r2, [r4, #36]	; 0x24
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801a02a:	60e3      	str	r3, [r4, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 801a02c:	6903      	ldr	r3, [r0, #16]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801a02e:	6a82      	ldr	r2, [r0, #40]	; 0x28
  FuncDriver.FillRect       = pDrv->FillRect;
 801a030:	6123      	str	r3, [r4, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 801a032:	6943      	ldr	r3, [r0, #20]
  DrawProp->LcdLayer = 0;
 801a034:	60f5      	str	r5, [r6, #12]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 801a036:	6163      	str	r3, [r4, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801a038:	6983      	ldr	r3, [r0, #24]
  DrawProp->LcdDevice = 0;
 801a03a:	6135      	str	r5, [r6, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801a03c:	61a3      	str	r3, [r4, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801a03e:	69c3      	ldr	r3, [r0, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801a040:	4628      	mov	r0, r5
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801a042:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801a044:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801a046:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 801a048:	f106 0118 	add.w	r1, r6, #24
 801a04c:	6a23      	ldr	r3, [r4, #32]
 801a04e:	4628      	mov	r0, r5
 801a050:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801a052:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a054:	f106 011c 	add.w	r1, r6, #28
 801a058:	4628      	mov	r0, r5
}
 801a05a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801a05e:	4718      	bx	r3
 801a060:	20007378 	.word	0x20007378
 801a064:	20007338 	.word	0x20007338

0801a068 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 801a068:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 801a06a:	4b05      	ldr	r3, [pc, #20]	; (801a080 <UTIL_LCD_SetLayer+0x18>)
 801a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a06e:	b133      	cbz	r3, 801a07e <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 801a070:	4d04      	ldr	r5, [pc, #16]	; (801a084 <UTIL_LCD_SetLayer+0x1c>)
 801a072:	4604      	mov	r4, r0
 801a074:	4601      	mov	r1, r0
 801a076:	6928      	ldr	r0, [r5, #16]
 801a078:	4798      	blx	r3
 801a07a:	b900      	cbnz	r0, 801a07e <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 801a07c:	60ec      	str	r4, [r5, #12]
    }
  }
}
 801a07e:	bd38      	pop	{r3, r4, r5, pc}
 801a080:	20007378 	.word	0x20007378
 801a084:	20007338 	.word	0x20007338

0801a088 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 801a088:	4a02      	ldr	r2, [pc, #8]	; (801a094 <UTIL_LCD_SetTextColor+0xc>)
 801a08a:	68d3      	ldr	r3, [r2, #12]
 801a08c:	015b      	lsls	r3, r3, #5
 801a08e:	50d0      	str	r0, [r2, r3]
}
 801a090:	4770      	bx	lr
 801a092:	bf00      	nop
 801a094:	20007338 	.word	0x20007338

0801a098 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 801a098:	4b02      	ldr	r3, [pc, #8]	; (801a0a4 <UTIL_LCD_SetBackColor+0xc>)
 801a09a:	68da      	ldr	r2, [r3, #12]
 801a09c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801a0a0:	6058      	str	r0, [r3, #4]
}
 801a0a2:	4770      	bx	lr
 801a0a4:	20007338 	.word	0x20007338

0801a0a8 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 801a0a8:	4b02      	ldr	r3, [pc, #8]	; (801a0b4 <UTIL_LCD_SetFont+0xc>)
 801a0aa:	68da      	ldr	r2, [r3, #12]
 801a0ac:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801a0b0:	6098      	str	r0, [r3, #8]
}
 801a0b2:	4770      	bx	lr
 801a0b4:	20007338 	.word	0x20007338

0801a0b8 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 801a0b8:	4b02      	ldr	r3, [pc, #8]	; (801a0c4 <UTIL_LCD_GetFont+0xc>)
 801a0ba:	68da      	ldr	r2, [r3, #12]
 801a0bc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 801a0c0:	6898      	ldr	r0, [r3, #8]
 801a0c2:	4770      	bx	lr
 801a0c4:	20007338 	.word	0x20007338

0801a0c8 <UTIL_LCD_Clear>:
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801a0c8:	4914      	ldr	r1, [pc, #80]	; (801a11c <UTIL_LCD_Clear+0x54>)
{
 801a0ca:	4602      	mov	r2, r0
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a0cc:	69c8      	ldr	r0, [r1, #28]
 801a0ce:	2802      	cmp	r0, #2
{
 801a0d0:	b530      	push	{r4, r5, lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801a0d2:	e9d1 3405 	ldrd	r3, r4, [r1, #20]
{
 801a0d6:	b083      	sub	sp, #12
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a0d8:	d009      	beq.n	801a0ee <UTIL_LCD_Clear+0x26>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801a0da:	6908      	ldr	r0, [r1, #16]
 801a0dc:	4d10      	ldr	r5, [pc, #64]	; (801a120 <UTIL_LCD_Clear+0x58>)
 801a0de:	9201      	str	r2, [sp, #4]
 801a0e0:	2200      	movs	r2, #0
 801a0e2:	692d      	ldr	r5, [r5, #16]
 801a0e4:	4611      	mov	r1, r2
 801a0e6:	9400      	str	r4, [sp, #0]
 801a0e8:	47a8      	blx	r5
}
 801a0ea:	b003      	add	sp, #12
 801a0ec:	bd30      	pop	{r4, r5, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801a0ee:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 801a0f2:	480b      	ldr	r0, [pc, #44]	; (801a120 <UTIL_LCD_Clear+0x58>)
 801a0f4:	9400      	str	r4, [sp, #0]
 801a0f6:	6904      	ldr	r4, [r0, #16]
 801a0f8:	6908      	ldr	r0, [r1, #16]
 801a0fa:	f40c 61fc 	and.w	r1, ip, #2016	; 0x7e0
 801a0fe:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801a102:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a106:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a10a:	ea41 010c 	orr.w	r1, r1, ip
 801a10e:	4311      	orrs	r1, r2
 801a110:	2200      	movs	r2, #0
 801a112:	9101      	str	r1, [sp, #4]
 801a114:	4611      	mov	r1, r2
 801a116:	47a0      	blx	r4
}
 801a118:	b003      	add	sp, #12
 801a11a:	bd30      	pop	{r4, r5, pc}
 801a11c:	20007338 	.word	0x20007338
 801a120:	20007378 	.word	0x20007378

0801a124 <UTIL_LCD_DisplayChar>:
{
 801a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801a128:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801a2a4 <UTIL_LCD_DisplayChar+0x180>
 801a12c:	3a20      	subs	r2, #32
 801a12e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801a132:	eb09 1443 	add.w	r4, r9, r3, lsl #5
{
 801a136:	ed2d 8b02 	vpush	{d8}
 801a13a:	ee08 0a10 	vmov	s16, r0
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801a13e:	0158      	lsls	r0, r3, #5
 801a140:	68a3      	ldr	r3, [r4, #8]
{
 801a142:	b0ab      	sub	sp, #172	; 0xac
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801a144:	889d      	ldrh	r5, [r3, #4]
 801a146:	88dc      	ldrh	r4, [r3, #6]
 801a148:	f105 0807 	add.w	r8, r5, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	fb04 f202 	mul.w	r2, r4, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801a152:	ea4f 07e8 	mov.w	r7, r8, asr #3
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801a156:	f028 0607 	bic.w	r6, r8, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801a15a:	9503      	str	r5, [sp, #12]
 801a15c:	fb07 f202 	mul.w	r2, r7, r2
  offset =  8 *((width + 7)/8) -  width ;
 801a160:	9605      	str	r6, [sp, #20]

  for(i = 0; i < height; i++)
 801a162:	2c00      	cmp	r4, #0
 801a164:	f000 808b 	beq.w	801a27e <UTIL_LCD_DisplayChar+0x15a>
 801a168:	189f      	adds	r7, r3, r2
 801a16a:	190b      	adds	r3, r1, r4
 801a16c:	aa12      	add	r2, sp, #72	; 0x48
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801a16e:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 801a172:	9304      	str	r3, [sp, #16]
 801a174:	462b      	mov	r3, r5
 801a176:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801a17a:	aa06      	add	r2, sp, #24
 801a17c:	1c4e      	adds	r6, r1, #1

    switch(((width + 7)/8))
 801a17e:	f1b8 0f01 	cmp.w	r8, #1
 801a182:	eb02 0343 	add.w	r3, r2, r3, lsl #1

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 801a186:	f04f 0401 	mov.w	r4, #1
 801a18a:	46ab      	mov	fp, r5
 801a18c:	f106 32ff 	add.w	r2, r6, #4294967295
    switch(((width + 7)/8))
 801a190:	9302      	str	r3, [sp, #8]
 801a192:	d03b      	beq.n	801a20c <UTIL_LCD_DisplayChar+0xe8>
 801a194:	f1b8 0f02 	cmp.w	r8, #2
 801a198:	d07d      	beq.n	801a296 <UTIL_LCD_DisplayChar+0x172>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801a19a:	787b      	ldrb	r3, [r7, #1]
 801a19c:	7839      	ldrb	r1, [r7, #0]
 801a19e:	021b      	lsls	r3, r3, #8
 801a1a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a1a4:	78b9      	ldrb	r1, [r7, #2]
 801a1a6:	430b      	orrs	r3, r1
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a1a8:	4448      	add	r0, r9
 801a1aa:	69c1      	ldr	r1, [r0, #28]
 801a1ac:	2902      	cmp	r1, #2
      for (j = 0; j < width; j++)
 801a1ae:	9903      	ldr	r1, [sp, #12]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a1b0:	d032      	beq.n	801a218 <UTIL_LCD_DisplayChar+0xf4>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 801a1b2:	b189      	cbz	r1, 801a1d8 <UTIL_LCD_DisplayChar+0xb4>
 801a1b4:	9905      	ldr	r1, [sp, #20]
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801a1b6:	465d      	mov	r5, fp
 801a1b8:	e9d0 ea00 	ldrd	lr, sl, [r0]
 801a1bc:	1e48      	subs	r0, r1, #1
 801a1be:	a912      	add	r1, sp, #72	; 0x48
        if(line & (1 << (width- j + offset- 1)))
 801a1c0:	fa04 fc00 	lsl.w	ip, r4, r0
 801a1c4:	ea1c 0f03 	tst.w	ip, r3
 801a1c8:	d05e      	beq.n	801a288 <UTIL_LCD_DisplayChar+0x164>
 801a1ca:	f841 eb04 	str.w	lr, [r1], #4
      for (j = 0; j < width; j++)
 801a1ce:	428d      	cmp	r5, r1
 801a1d0:	f100 30ff 	add.w	r0, r0, #4294967295
 801a1d4:	d1f4      	bne.n	801a1c0 <UTIL_LCD_DisplayChar+0x9c>
 801a1d6:	46ab      	mov	fp, r5
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801a1d8:	9b03      	ldr	r3, [sp, #12]
 801a1da:	ee18 1a10 	vmov	r1, s16
 801a1de:	9401      	str	r4, [sp, #4]
  for(i = 0; i < height; i++)
 801a1e0:	4447      	add	r7, r8
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801a1e2:	9300      	str	r3, [sp, #0]
 801a1e4:	4b2e      	ldr	r3, [pc, #184]	; (801a2a0 <UTIL_LCD_DisplayChar+0x17c>)
 801a1e6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a1ea:	685b      	ldr	r3, [r3, #4]
 801a1ec:	461d      	mov	r5, r3
 801a1ee:	ab12      	add	r3, sp, #72	; 0x48
 801a1f0:	47a8      	blx	r5
  for(i = 0; i < height; i++)
 801a1f2:	9b04      	ldr	r3, [sp, #16]
 801a1f4:	429e      	cmp	r6, r3
 801a1f6:	d042      	beq.n	801a27e <UTIL_LCD_DisplayChar+0x15a>
 801a1f8:	3601      	adds	r6, #1
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a1fa:	f8d9 000c 	ldr.w	r0, [r9, #12]
    switch(((width + 7)/8))
 801a1fe:	f1b8 0f01 	cmp.w	r8, #1
 801a202:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801a206:	f106 32ff 	add.w	r2, r6, #4294967295
 801a20a:	d1c3      	bne.n	801a194 <UTIL_LCD_DisplayChar+0x70>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a20c:	4448      	add	r0, r9
      line =  pchar[0];
 801a20e:	783b      	ldrb	r3, [r7, #0]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a210:	69c1      	ldr	r1, [r0, #28]
 801a212:	2902      	cmp	r1, #2
      for (j = 0; j < width; j++)
 801a214:	9903      	ldr	r1, [sp, #12]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a216:	d1cc      	bne.n	801a1b2 <UTIL_LCD_DisplayChar+0x8e>
      for (j = 0; j < width; j++)
 801a218:	b309      	cbz	r1, 801a25e <UTIL_LCD_DisplayChar+0x13a>
 801a21a:	9905      	ldr	r1, [sp, #20]
 801a21c:	f10d 0c18 	add.w	ip, sp, #24
 801a220:	465d      	mov	r5, fp
 801a222:	f101 3eff 	add.w	lr, r1, #4294967295
        if(line & (1 << (width- j + offset- 1)))
 801a226:	fa04 f10e 	lsl.w	r1, r4, lr
      for (j = 0; j < width; j++)
 801a22a:	f10e 3eff 	add.w	lr, lr, #4294967295
        if(line & (1 << (width- j + offset- 1)))
 801a22e:	4219      	tst	r1, r3
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801a230:	bf14      	ite	ne
 801a232:	f8d0 a000 	ldrne.w	sl, [r0]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801a236:	f8d0 a004 	ldreq.w	sl, [r0, #4]
 801a23a:	ea4f 41da 	mov.w	r1, sl, lsr #19
 801a23e:	f3ca 0bc4 	ubfx	fp, sl, #3, #5
 801a242:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a246:	ea4b 21c1 	orr.w	r1, fp, r1, lsl #11
 801a24a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a24e:	ea41 010a 	orr.w	r1, r1, sl
 801a252:	f82c 1b02 	strh.w	r1, [ip], #2
      for (j = 0; j < width; j++)
 801a256:	9902      	ldr	r1, [sp, #8]
 801a258:	458c      	cmp	ip, r1
 801a25a:	d1e4      	bne.n	801a226 <UTIL_LCD_DisplayChar+0x102>
 801a25c:	46ab      	mov	fp, r5
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801a25e:	9b03      	ldr	r3, [sp, #12]
 801a260:	ee18 1a10 	vmov	r1, s16
 801a264:	9401      	str	r4, [sp, #4]
  for(i = 0; i < height; i++)
 801a266:	4447      	add	r7, r8
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801a268:	9300      	str	r3, [sp, #0]
 801a26a:	4b0d      	ldr	r3, [pc, #52]	; (801a2a0 <UTIL_LCD_DisplayChar+0x17c>)
 801a26c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a270:	685b      	ldr	r3, [r3, #4]
 801a272:	461d      	mov	r5, r3
 801a274:	ab06      	add	r3, sp, #24
 801a276:	47a8      	blx	r5
  for(i = 0; i < height; i++)
 801a278:	9b04      	ldr	r3, [sp, #16]
 801a27a:	429e      	cmp	r6, r3
 801a27c:	d1bc      	bne.n	801a1f8 <UTIL_LCD_DisplayChar+0xd4>
}
 801a27e:	b02b      	add	sp, #172	; 0xac
 801a280:	ecbd 8b02 	vpop	{d8}
 801a284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a288:	f841 ab04 	str.w	sl, [r1], #4
      for (j = 0; j < width; j++)
 801a28c:	42a9      	cmp	r1, r5
 801a28e:	f100 30ff 	add.w	r0, r0, #4294967295
 801a292:	d195      	bne.n	801a1c0 <UTIL_LCD_DisplayChar+0x9c>
 801a294:	e79f      	b.n	801a1d6 <UTIL_LCD_DisplayChar+0xb2>
      line =  (pchar[0]<< 8) | pchar[1];
 801a296:	883b      	ldrh	r3, [r7, #0]
 801a298:	ba5b      	rev16	r3, r3
 801a29a:	b29b      	uxth	r3, r3
      break;
 801a29c:	e784      	b.n	801a1a8 <UTIL_LCD_DisplayChar+0x84>
 801a29e:	bf00      	nop
 801a2a0:	20007378 	.word	0x20007378
 801a2a4:	20007338 	.word	0x20007338

0801a2a8 <UTIL_LCD_DisplayStringAt>:
{
 801a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2ac:	460f      	mov	r7, r1
  while (*ptr++) size ++ ;
 801a2ae:	4611      	mov	r1, r2
{
 801a2b0:	4614      	mov	r4, r2
 801a2b2:	4680      	mov	r8, r0
  while (*ptr++) size ++ ;
 801a2b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a2b8:	2a00      	cmp	r2, #0
 801a2ba:	d044      	beq.n	801a346 <UTIL_LCD_DisplayStringAt+0x9e>
  uint32_t size = 0, xsize = 0;
 801a2bc:	2000      	movs	r0, #0
  while (*ptr++) size ++ ;
 801a2be:	f811 5b01 	ldrb.w	r5, [r1], #1
 801a2c2:	3001      	adds	r0, #1
 801a2c4:	2d00      	cmp	r5, #0
 801a2c6:	d1fa      	bne.n	801a2be <UTIL_LCD_DisplayStringAt+0x16>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801a2c8:	4d20      	ldr	r5, [pc, #128]	; (801a34c <UTIL_LCD_DisplayStringAt+0xa4>)
  switch (Mode)
 801a2ca:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801a2cc:	68e9      	ldr	r1, [r5, #12]
 801a2ce:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 801a2d2:	6889      	ldr	r1, [r1, #8]
 801a2d4:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 801a2d8:	6969      	ldr	r1, [r5, #20]
 801a2da:	fbb1 f6fc 	udiv	r6, r1, ip
  switch (Mode)
 801a2de:	d02c      	beq.n	801a33a <UTIL_LCD_DisplayStringAt+0x92>
 801a2e0:	2b02      	cmp	r3, #2
 801a2e2:	d104      	bne.n	801a2ee <UTIL_LCD_DisplayStringAt+0x46>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801a2e4:	1a30      	subs	r0, r6, r0
 801a2e6:	fb0c f000 	mul.w	r0, ip, r0
 801a2ea:	eba0 0808 	sub.w	r8, r0, r8
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a2ee:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801a2f0:	f108 30ff 	add.w	r0, r8, #4294967295
 801a2f4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 801a2f8:	4298      	cmp	r0, r3
 801a2fa:	bf88      	it	hi
 801a2fc:	f04f 0801 	movhi.w	r8, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a300:	458c      	cmp	ip, r1
 801a302:	d818      	bhi.n	801a336 <UTIL_LCD_DisplayStringAt+0x8e>
 801a304:	b1ba      	cbz	r2, 801a336 <UTIL_LCD_DisplayStringAt+0x8e>
 801a306:	f1c4 0601 	rsb	r6, r4, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801a30a:	4640      	mov	r0, r8
 801a30c:	4639      	mov	r1, r7
 801a30e:	f7ff ff09 	bl	801a124 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801a312:	68ea      	ldr	r2, [r5, #12]
 801a314:	1930      	adds	r0, r6, r4
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a316:	696b      	ldr	r3, [r5, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801a318:	eb05 1142 	add.w	r1, r5, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a31c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801a320:	6889      	ldr	r1, [r1, #8]
 801a322:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a326:	fb00 331c 	mls	r3, r0, ip, r3
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801a32a:	44e0      	add	r8, ip
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801a32c:	b29b      	uxth	r3, r3
 801a32e:	459c      	cmp	ip, r3
 801a330:	d801      	bhi.n	801a336 <UTIL_LCD_DisplayStringAt+0x8e>
 801a332:	2a00      	cmp	r2, #0
 801a334:	d1e9      	bne.n	801a30a <UTIL_LCD_DisplayStringAt+0x62>
}
 801a336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801a33a:	1a30      	subs	r0, r6, r0
 801a33c:	fb0c f000 	mul.w	r0, ip, r0
 801a340:	eb08 0850 	add.w	r8, r8, r0, lsr #1
      break;
 801a344:	e7d3      	b.n	801a2ee <UTIL_LCD_DisplayStringAt+0x46>
  uint32_t size = 0, xsize = 0;
 801a346:	4610      	mov	r0, r2
 801a348:	e7be      	b.n	801a2c8 <UTIL_LCD_DisplayStringAt+0x20>
 801a34a:	bf00      	nop
 801a34c:	20007338 	.word	0x20007338

0801a350 <UTIL_LCD_DrawLine>:
{
 801a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801a354:	f64f 75ff 	movw	r5, #65535	; 0xffff
  x_diff = Xpos2 - Xpos1;
 801a358:	1a14      	subs	r4, r2, r0
{
 801a35a:	ed2d 8b02 	vpush	{d8}
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801a35e:	4282      	cmp	r2, r0
 801a360:	bf34      	ite	cc
 801a362:	462a      	movcc	r2, r5
 801a364:	2201      	movcs	r2, #1
{
 801a366:	b087      	sub	sp, #28
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801a368:	2c00      	cmp	r4, #0
  x = Xpos1;                       /* Start x off at the first pixel */
 801a36a:	b200      	sxth	r0, r0
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801a36c:	9203      	str	r2, [sp, #12]
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801a36e:	462a      	mov	r2, r5
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801a370:	bfb8      	it	lt
 801a372:	4264      	neglt	r4, r4
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801a374:	428b      	cmp	r3, r1
 801a376:	bf28      	it	cs
 801a378:	2201      	movcs	r2, #1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801a37a:	b224      	sxth	r4, r4
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801a37c:	9204      	str	r2, [sp, #16]
  y_diff = Ypos2 - Ypos1;
 801a37e:	1a5a      	subs	r2, r3, r1
  y = Ypos1;                       /* Start y off at the first pixel */
 801a380:	b20b      	sxth	r3, r1
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 801a382:	2a00      	cmp	r2, #0
 801a384:	bfb8      	it	lt
 801a386:	4252      	neglt	r2, r2
 801a388:	b212      	sxth	r2, r2
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 801a38a:	4294      	cmp	r4, r2
 801a38c:	db5b      	blt.n	801a446 <UTIL_LCD_DrawLine+0xf6>
    num = deltax / 2;
 801a38e:	2c00      	cmp	r4, #0
 801a390:	4625      	mov	r5, r4
 801a392:	f04f 0100 	mov.w	r1, #0
 801a396:	9f03      	ldr	r7, [sp, #12]
 801a398:	bfb8      	it	lt
 801a39a:	1c65      	addlt	r5, r4, #1
 801a39c:	4688      	mov	r8, r1
 801a39e:	9103      	str	r1, [sp, #12]
 801a3a0:	106d      	asrs	r5, r5, #1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a3a2:	2c00      	cmp	r4, #0
 801a3a4:	db40      	blt.n	801a428 <UTIL_LCD_DrawLine+0xd8>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801a3a6:	b292      	uxth	r2, r2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801a3a8:	9912      	ldr	r1, [sp, #72]	; 0x48
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801a3aa:	2600      	movs	r6, #0
 801a3ac:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801a464 <UTIL_LCD_DrawLine+0x114>
 801a3b0:	9205      	str	r2, [sp, #20]
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801a3b2:	0a09      	lsrs	r1, r1, #8
 801a3b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a3b6:	46bb      	mov	fp, r7
 801a3b8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801a3bc:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 801a468 <UTIL_LCD_DrawLine+0x118>
 801a3c0:	0952      	lsrs	r2, r2, #5
 801a3c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a3c6:	430a      	orrs	r2, r1
 801a3c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a3ca:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801a3ce:	430a      	orrs	r2, r1
 801a3d0:	ee08 2a10 	vmov	s16, r2
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a3d4:	f8d9 701c 	ldr.w	r7, [r9, #28]
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 801a3d8:	b281      	uxth	r1, r0
 801a3da:	b29a      	uxth	r2, r3
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801a3dc:	f8d9 0010 	ldr.w	r0, [r9, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a3e0:	2f02      	cmp	r7, #2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801a3e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801a3e4:	f8da 7018 	ldr.w	r7, [sl, #24]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a3e8:	f106 0601 	add.w	r6, r6, #1
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801a3ec:	bf08      	it	eq
 801a3ee:	ee18 3a10 	vmoveq	r3, s16
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801a3f2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801a3f6:	47b8      	blx	r7
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801a3f8:	9b05      	ldr	r3, [sp, #20]
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801a3fa:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801a3fe:	195f      	adds	r7, r3, r5
      x += xinc1;                             /* Change the x as appropriate */
 801a400:	9b03      	ldr	r3, [sp, #12]
 801a402:	18c8      	adds	r0, r1, r3
      y += yinc1;                             /* Change the y as appropriate */
 801a404:	9b04      	ldr	r3, [sp, #16]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801a406:	b23d      	sxth	r5, r7
    x += xinc2;                               /* Change the x as appropriate */
 801a408:	4459      	add	r1, fp
      y += yinc1;                             /* Change the y as appropriate */
 801a40a:	18d3      	adds	r3, r2, r3
    x += xinc2;                               /* Change the x as appropriate */
 801a40c:	4458      	add	r0, fp
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801a40e:	b2bf      	uxth	r7, r7
    if (num >= den)                           /* Check if numerator >= denominator */
 801a410:	42ac      	cmp	r4, r5
    y += yinc2;                               /* Change the y as appropriate */
 801a412:	4443      	add	r3, r8
 801a414:	4442      	add	r2, r8
    x += xinc2;                               /* Change the x as appropriate */
 801a416:	b200      	sxth	r0, r0
      num -= den;                             /* Calculate the new numerator value */
 801a418:	eba7 0704 	sub.w	r7, r7, r4
    y += yinc2;                               /* Change the y as appropriate */
 801a41c:	b21b      	sxth	r3, r3
    if (num >= den)                           /* Check if numerator >= denominator */
 801a41e:	dc08      	bgt.n	801a432 <UTIL_LCD_DrawLine+0xe2>
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a420:	b232      	sxth	r2, r6
      num -= den;                             /* Calculate the new numerator value */
 801a422:	b23d      	sxth	r5, r7
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a424:	42a2      	cmp	r2, r4
 801a426:	ddd5      	ble.n	801a3d4 <UTIL_LCD_DrawLine+0x84>
}
 801a428:	b007      	add	sp, #28
 801a42a:	ecbd 8b02 	vpop	{d8}
 801a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    y += yinc2;                               /* Change the y as appropriate */
 801a432:	b213      	sxth	r3, r2
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a434:	b232      	sxth	r2, r6
    x += xinc2;                               /* Change the x as appropriate */
 801a436:	b208      	sxth	r0, r1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801a438:	42a2      	cmp	r2, r4
 801a43a:	ddcb      	ble.n	801a3d4 <UTIL_LCD_DrawLine+0x84>
}
 801a43c:	b007      	add	sp, #28
 801a43e:	ecbd 8b02 	vpop	{d8}
 801a442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 801a446:	4621      	mov	r1, r4
 801a448:	2a00      	cmp	r2, #0
 801a44a:	4615      	mov	r5, r2
 801a44c:	4614      	mov	r4, r2
 801a44e:	bfb8      	it	lt
 801a450:	1c55      	addlt	r5, r2, #1
 801a452:	460a      	mov	r2, r1
 801a454:	2100      	movs	r1, #0
 801a456:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a45a:	f345 054f 	sbfx	r5, r5, #1, #16
 801a45e:	460f      	mov	r7, r1
 801a460:	9104      	str	r1, [sp, #16]
 801a462:	e79e      	b.n	801a3a2 <UTIL_LCD_DrawLine+0x52>
 801a464:	20007338 	.word	0x20007338
 801a468:	20007378 	.word	0x20007378

0801a46c <UTIL_LCD_DrawRect>:
{
 801a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a470:	4c3e      	ldr	r4, [pc, #248]	; (801a56c <UTIL_LCD_DrawRect+0x100>)
{
 801a472:	469b      	mov	fp, r3
 801a474:	b083      	sub	sp, #12
 801a476:	4682      	mov	sl, r0
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a478:	69e3      	ldr	r3, [r4, #28]
{
 801a47a:	460d      	mov	r5, r1
 801a47c:	4691      	mov	r9, r2
 801a47e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a482:	2b02      	cmp	r3, #2
 801a484:	d031      	beq.n	801a4ea <UTIL_LCD_DrawRect+0x7e>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a486:	f8cd 8000 	str.w	r8, [sp]
 801a48a:	4f39      	ldr	r7, [pc, #228]	; (801a570 <UTIL_LCD_DrawRect+0x104>)
 801a48c:	464b      	mov	r3, r9
 801a48e:	462a      	mov	r2, r5
 801a490:	4651      	mov	r1, sl
 801a492:	6920      	ldr	r0, [r4, #16]
 801a494:	68be      	ldr	r6, [r7, #8]
 801a496:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a498:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801a49a:	f10b 32ff 	add.w	r2, fp, #4294967295
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a49e:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801a4a0:	442a      	add	r2, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a4a2:	d055      	beq.n	801a550 <UTIL_LCD_DrawRect+0xe4>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a4a4:	f8cd 8000 	str.w	r8, [sp]
 801a4a8:	464b      	mov	r3, r9
 801a4aa:	4651      	mov	r1, sl
 801a4ac:	6920      	ldr	r0, [r4, #16]
 801a4ae:	68be      	ldr	r6, [r7, #8]
 801a4b0:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a4b2:	69e3      	ldr	r3, [r4, #28]
 801a4b4:	2b02      	cmp	r3, #2
 801a4b6:	d03d      	beq.n	801a534 <UTIL_LCD_DrawRect+0xc8>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a4b8:	f8cd 8000 	str.w	r8, [sp]
 801a4bc:	465b      	mov	r3, fp
 801a4be:	4651      	mov	r1, sl
 801a4c0:	462a      	mov	r2, r5
 801a4c2:	6920      	ldr	r0, [r4, #16]
 801a4c4:	68fe      	ldr	r6, [r7, #12]
 801a4c6:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a4c8:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801a4ca:	f109 31ff 	add.w	r1, r9, #4294967295
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a4ce:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801a4d0:	4451      	add	r1, sl
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801a4d2:	d018      	beq.n	801a506 <UTIL_LCD_DrawRect+0x9a>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a4d4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801a4d8:	465b      	mov	r3, fp
 801a4da:	68ff      	ldr	r7, [r7, #12]
 801a4dc:	462a      	mov	r2, r5
 801a4de:	6920      	ldr	r0, [r4, #16]
 801a4e0:	46bc      	mov	ip, r7
}
 801a4e2:	b003      	add	sp, #12
 801a4e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a4e8:	4760      	bx	ip
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801a4ea:	ea4f 1358 	mov.w	r3, r8, lsr #5
 801a4ee:	ea4f 2218 	mov.w	r2, r8, lsr #8
 801a4f2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a4f6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801a4fa:	4313      	orrs	r3, r2
 801a4fc:	f3c8 02c4 	ubfx	r2, r8, #3, #5
 801a500:	4313      	orrs	r3, r2
 801a502:	9300      	str	r3, [sp, #0]
 801a504:	e7c1      	b.n	801a48a <UTIL_LCD_DrawRect+0x1e>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801a506:	6920      	ldr	r0, [r4, #16]
 801a508:	462a      	mov	r2, r5
 801a50a:	ea4f 1458 	mov.w	r4, r8, lsr #5
 801a50e:	68ff      	ldr	r7, [r7, #12]
 801a510:	ea4f 2518 	mov.w	r5, r8, lsr #8
 801a514:	f3c8 08c4 	ubfx	r8, r8, #3, #5
 801a518:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801a51c:	465b      	mov	r3, fp
 801a51e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a522:	46bc      	mov	ip, r7
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801a524:	432c      	orrs	r4, r5
 801a526:	ea44 0408 	orr.w	r4, r4, r8
 801a52a:	940c      	str	r4, [sp, #48]	; 0x30
}
 801a52c:	b003      	add	sp, #12
 801a52e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801a532:	4760      	bx	ip
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801a534:	ea4f 1358 	mov.w	r3, r8, lsr #5
 801a538:	ea4f 2218 	mov.w	r2, r8, lsr #8
 801a53c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a540:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801a544:	4313      	orrs	r3, r2
 801a546:	f3c8 02c4 	ubfx	r2, r8, #3, #5
 801a54a:	4313      	orrs	r3, r2
 801a54c:	9300      	str	r3, [sp, #0]
 801a54e:	e7b5      	b.n	801a4bc <UTIL_LCD_DrawRect+0x50>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801a550:	ea4f 1358 	mov.w	r3, r8, lsr #5
 801a554:	ea4f 2118 	mov.w	r1, r8, lsr #8
 801a558:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a55c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801a560:	430b      	orrs	r3, r1
 801a562:	f3c8 01c4 	ubfx	r1, r8, #3, #5
 801a566:	430b      	orrs	r3, r1
 801a568:	9300      	str	r3, [sp, #0]
 801a56a:	e79d      	b.n	801a4a8 <UTIL_LCD_DrawRect+0x3c>
 801a56c:	20007338 	.word	0x20007338
 801a570:	20007378 	.word	0x20007378

0801a574 <ai_buffer_get_size>:
 801a574:	b368      	cbz	r0, 801a5d2 <ai_buffer_get_size+0x5e>
 801a576:	4b17      	ldr	r3, [pc, #92]	; (801a5d4 <ai_buffer_get_size+0x60>)
 801a578:	4a17      	ldr	r2, [pc, #92]	; (801a5d8 <ai_buffer_get_size+0x64>)
 801a57a:	b410      	push	{r4}
 801a57c:	6804      	ldr	r4, [r0, #0]
 801a57e:	4023      	ands	r3, r4
 801a580:	4293      	cmp	r3, r2
 801a582:	d123      	bne.n	801a5cc <ai_buffer_get_size+0x58>
 801a584:	b311      	cbz	r1, 801a5cc <ai_buffer_get_size+0x58>
 801a586:	6984      	ldr	r4, [r0, #24]
 801a588:	6862      	ldr	r2, [r4, #4]
 801a58a:	321f      	adds	r2, #31
 801a58c:	f022 021f 	bic.w	r2, r2, #31
 801a590:	7d03      	ldrb	r3, [r0, #20]
 801a592:	6941      	ldr	r1, [r0, #20]
 801a594:	f1a3 0301 	sub.w	r3, r3, #1
 801a598:	f3c1 2017 	ubfx	r0, r1, #8, #24
 801a59c:	fab3 f383 	clz	r3, r3
 801a5a0:	095b      	lsrs	r3, r3, #5
 801a5a2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801a5a6:	da0c      	bge.n	801a5c2 <ai_buffer_get_size+0x4e>
 801a5a8:	2b01      	cmp	r3, #1
 801a5aa:	d103      	bne.n	801a5b4 <ai_buffer_get_size+0x40>
 801a5ac:	2802      	cmp	r0, #2
 801a5ae:	f04f 0302 	mov.w	r3, #2
 801a5b2:	d006      	beq.n	801a5c2 <ai_buffer_get_size+0x4e>
 801a5b4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801a5b8:	3301      	adds	r3, #1
 801a5ba:	4298      	cmp	r0, r3
 801a5bc:	fb01 f202 	mul.w	r2, r1, r2
 801a5c0:	d1f2      	bne.n	801a5a8 <ai_buffer_get_size+0x34>
 801a5c2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801a5c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5ca:	4770      	bx	lr
 801a5cc:	6984      	ldr	r4, [r0, #24]
 801a5ce:	6862      	ldr	r2, [r4, #4]
 801a5d0:	e7de      	b.n	801a590 <ai_buffer_get_size+0x1c>
 801a5d2:	4770      	bx	lr
 801a5d4:	017fffff 	.word	0x017fffff
 801a5d8:	000400c0 	.word	0x000400c0

0801a5dc <ai_buffer_array_sane>:
 801a5dc:	b138      	cbz	r0, 801a5ee <ai_buffer_array_sane+0x12>
 801a5de:	6843      	ldr	r3, [r0, #4]
 801a5e0:	b123      	cbz	r3, 801a5ec <ai_buffer_array_sane+0x10>
 801a5e2:	8840      	ldrh	r0, [r0, #2]
 801a5e4:	3800      	subs	r0, #0
 801a5e6:	bf18      	it	ne
 801a5e8:	2001      	movne	r0, #1
 801a5ea:	4770      	bx	lr
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	4770      	bx	lr

0801a5f0 <_ai_platform_acquire_crc>:
 801a5f0:	2001      	movs	r0, #1
 801a5f2:	4770      	bx	lr

0801a5f4 <_ai_platform_release_crc>:
 801a5f4:	4770      	bx	lr
 801a5f6:	bf00      	nop

0801a5f8 <ai_platform_get_weights_map>:
 801a5f8:	2900      	cmp	r1, #0
 801a5fa:	bf18      	it	ne
 801a5fc:	2800      	cmpne	r0, #0
 801a5fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a600:	bf0c      	ite	eq
 801a602:	2401      	moveq	r4, #1
 801a604:	2400      	movne	r4, #0
 801a606:	2a00      	cmp	r2, #0
 801a608:	bf08      	it	eq
 801a60a:	f044 0401 	orreq.w	r4, r4, #1
 801a60e:	b114      	cbz	r4, 801a616 <ai_platform_get_weights_map+0x1e>
 801a610:	2400      	movs	r4, #0
 801a612:	4620      	mov	r0, r4
 801a614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a616:	4616      	mov	r6, r2
 801a618:	4b22      	ldr	r3, [pc, #136]	; (801a6a4 <ai_platform_get_weights_map+0xac>)
 801a61a:	6812      	ldr	r2, [r2, #0]
 801a61c:	4605      	mov	r5, r0
 801a61e:	460f      	mov	r7, r1
 801a620:	429a      	cmp	r2, r3
 801a622:	d022      	beq.n	801a66a <ai_platform_get_weights_map+0x72>
 801a624:	6870      	ldr	r0, [r6, #4]
 801a626:	2800      	cmp	r0, #0
 801a628:	d0f2      	beq.n	801a610 <ai_platform_get_weights_map+0x18>
 801a62a:	6806      	ldr	r6, [r0, #0]
 801a62c:	429e      	cmp	r6, r3
 801a62e:	d006      	beq.n	801a63e <ai_platform_get_weights_map+0x46>
 801a630:	f1a1 0401 	sub.w	r4, r1, #1
 801a634:	6028      	str	r0, [r5, #0]
 801a636:	fab4 f484 	clz	r4, r4
 801a63a:	0964      	lsrs	r4, r4, #5
 801a63c:	e7e9      	b.n	801a612 <ai_platform_get_weights_map+0x1a>
 801a63e:	3d04      	subs	r5, #4
 801a640:	4602      	mov	r2, r0
 801a642:	4621      	mov	r1, r4
 801a644:	e000      	b.n	801a648 <ai_platform_get_weights_map+0x50>
 801a646:	4619      	mov	r1, r3
 801a648:	f852 3f04 	ldr.w	r3, [r2, #4]!
 801a64c:	42b3      	cmp	r3, r6
 801a64e:	d025      	beq.n	801a69c <ai_platform_get_weights_map+0xa4>
 801a650:	f845 3f04 	str.w	r3, [r5, #4]!
 801a654:	1c4b      	adds	r3, r1, #1
 801a656:	429f      	cmp	r7, r3
 801a658:	d8f5      	bhi.n	801a646 <ai_platform_get_weights_map+0x4e>
 801a65a:	d1da      	bne.n	801a612 <ai_platform_get_weights_map+0x1a>
 801a65c:	3102      	adds	r1, #2
 801a65e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801a662:	42b3      	cmp	r3, r6
 801a664:	d1d5      	bne.n	801a612 <ai_platform_get_weights_map+0x1a>
 801a666:	2401      	movs	r4, #1
 801a668:	e7d3      	b.n	801a612 <ai_platform_get_weights_map+0x1a>
 801a66a:	1d30      	adds	r0, r6, #4
 801a66c:	f7ff ffb6 	bl	801a5dc <ai_buffer_array_sane>
 801a670:	2800      	cmp	r0, #0
 801a672:	d0cd      	beq.n	801a610 <ai_platform_get_weights_map+0x18>
 801a674:	88f3      	ldrh	r3, [r6, #6]
 801a676:	429f      	cmp	r7, r3
 801a678:	d1ca      	bne.n	801a610 <ai_platform_get_weights_map+0x18>
 801a67a:	3d04      	subs	r5, #4
 801a67c:	4622      	mov	r2, r4
 801a67e:	68b3      	ldr	r3, [r6, #8]
 801a680:	4423      	add	r3, r4
 801a682:	341c      	adds	r4, #28
 801a684:	685b      	ldr	r3, [r3, #4]
 801a686:	b123      	cbz	r3, 801a692 <ai_platform_get_weights_map+0x9a>
 801a688:	3201      	adds	r2, #1
 801a68a:	f845 3f04 	str.w	r3, [r5, #4]!
 801a68e:	4297      	cmp	r7, r2
 801a690:	d8f5      	bhi.n	801a67e <ai_platform_get_weights_map+0x86>
 801a692:	1abc      	subs	r4, r7, r2
 801a694:	fab4 f484 	clz	r4, r4
 801a698:	0964      	lsrs	r4, r4, #5
 801a69a:	e7ba      	b.n	801a612 <ai_platform_get_weights_map+0x1a>
 801a69c:	428f      	cmp	r7, r1
 801a69e:	d1b8      	bne.n	801a612 <ai_platform_get_weights_map+0x1a>
 801a6a0:	e7e1      	b.n	801a666 <ai_platform_get_weights_map+0x6e>
 801a6a2:	bf00      	nop
 801a6a4:	a1facade 	.word	0xa1facade

0801a6a8 <ai_platform_get_activations_map>:
 801a6a8:	2900      	cmp	r1, #0
 801a6aa:	bf18      	it	ne
 801a6ac:	2800      	cmpne	r0, #0
 801a6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6b0:	bf0c      	ite	eq
 801a6b2:	2401      	moveq	r4, #1
 801a6b4:	2400      	movne	r4, #0
 801a6b6:	2a00      	cmp	r2, #0
 801a6b8:	bf08      	it	eq
 801a6ba:	f044 0401 	orreq.w	r4, r4, #1
 801a6be:	b114      	cbz	r4, 801a6c6 <ai_platform_get_activations_map+0x1e>
 801a6c0:	2400      	movs	r4, #0
 801a6c2:	4620      	mov	r0, r4
 801a6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6c6:	4616      	mov	r6, r2
 801a6c8:	4b22      	ldr	r3, [pc, #136]	; (801a754 <ai_platform_get_activations_map+0xac>)
 801a6ca:	6812      	ldr	r2, [r2, #0]
 801a6cc:	4605      	mov	r5, r0
 801a6ce:	460f      	mov	r7, r1
 801a6d0:	429a      	cmp	r2, r3
 801a6d2:	d022      	beq.n	801a71a <ai_platform_get_activations_map+0x72>
 801a6d4:	6a30      	ldr	r0, [r6, #32]
 801a6d6:	2800      	cmp	r0, #0
 801a6d8:	d0f2      	beq.n	801a6c0 <ai_platform_get_activations_map+0x18>
 801a6da:	6806      	ldr	r6, [r0, #0]
 801a6dc:	429e      	cmp	r6, r3
 801a6de:	d006      	beq.n	801a6ee <ai_platform_get_activations_map+0x46>
 801a6e0:	f1a1 0401 	sub.w	r4, r1, #1
 801a6e4:	6028      	str	r0, [r5, #0]
 801a6e6:	fab4 f484 	clz	r4, r4
 801a6ea:	0964      	lsrs	r4, r4, #5
 801a6ec:	e7e9      	b.n	801a6c2 <ai_platform_get_activations_map+0x1a>
 801a6ee:	3d04      	subs	r5, #4
 801a6f0:	4602      	mov	r2, r0
 801a6f2:	4621      	mov	r1, r4
 801a6f4:	e000      	b.n	801a6f8 <ai_platform_get_activations_map+0x50>
 801a6f6:	4619      	mov	r1, r3
 801a6f8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 801a6fc:	42b3      	cmp	r3, r6
 801a6fe:	d026      	beq.n	801a74e <ai_platform_get_activations_map+0xa6>
 801a700:	f845 3f04 	str.w	r3, [r5, #4]!
 801a704:	1c4b      	adds	r3, r1, #1
 801a706:	429f      	cmp	r7, r3
 801a708:	d8f5      	bhi.n	801a6f6 <ai_platform_get_activations_map+0x4e>
 801a70a:	d1da      	bne.n	801a6c2 <ai_platform_get_activations_map+0x1a>
 801a70c:	3102      	adds	r1, #2
 801a70e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801a712:	42b3      	cmp	r3, r6
 801a714:	d1d5      	bne.n	801a6c2 <ai_platform_get_activations_map+0x1a>
 801a716:	2401      	movs	r4, #1
 801a718:	e7d3      	b.n	801a6c2 <ai_platform_get_activations_map+0x1a>
 801a71a:	f106 000c 	add.w	r0, r6, #12
 801a71e:	f7ff ff5d 	bl	801a5dc <ai_buffer_array_sane>
 801a722:	2800      	cmp	r0, #0
 801a724:	d0cc      	beq.n	801a6c0 <ai_platform_get_activations_map+0x18>
 801a726:	89f3      	ldrh	r3, [r6, #14]
 801a728:	429f      	cmp	r7, r3
 801a72a:	d1c9      	bne.n	801a6c0 <ai_platform_get_activations_map+0x18>
 801a72c:	3d04      	subs	r5, #4
 801a72e:	4622      	mov	r2, r4
 801a730:	6933      	ldr	r3, [r6, #16]
 801a732:	4423      	add	r3, r4
 801a734:	341c      	adds	r4, #28
 801a736:	685b      	ldr	r3, [r3, #4]
 801a738:	b123      	cbz	r3, 801a744 <ai_platform_get_activations_map+0x9c>
 801a73a:	3201      	adds	r2, #1
 801a73c:	f845 3f04 	str.w	r3, [r5, #4]!
 801a740:	4297      	cmp	r7, r2
 801a742:	d8f5      	bhi.n	801a730 <ai_platform_get_activations_map+0x88>
 801a744:	1abc      	subs	r4, r7, r2
 801a746:	fab4 f484 	clz	r4, r4
 801a74a:	0964      	lsrs	r4, r4, #5
 801a74c:	e7b9      	b.n	801a6c2 <ai_platform_get_activations_map+0x1a>
 801a74e:	428f      	cmp	r7, r1
 801a750:	d1b7      	bne.n	801a6c2 <ai_platform_get_activations_map+0x1a>
 801a752:	e7e0      	b.n	801a716 <ai_platform_get_activations_map+0x6e>
 801a754:	a1facade 	.word	0xa1facade

0801a758 <ai_platform_runtime_get_revision>:
 801a758:	b508      	push	{r3, lr}
 801a75a:	f7ff ff49 	bl	801a5f0 <_ai_platform_acquire_crc>
 801a75e:	4b39      	ldr	r3, [pc, #228]	; (801a844 <ai_platform_runtime_get_revision+0xec>)
 801a760:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a76a:	189a      	adds	r2, r3, r2
 801a76c:	2a01      	cmp	r2, #1
 801a76e:	d929      	bls.n	801a7c4 <ai_platform_runtime_get_revision+0x6c>
 801a770:	f240 4249 	movw	r2, #1097	; 0x449
 801a774:	4293      	cmp	r3, r2
 801a776:	d025      	beq.n	801a7c4 <ai_platform_runtime_get_revision+0x6c>
 801a778:	4a33      	ldr	r2, [pc, #204]	; (801a848 <ai_platform_runtime_get_revision+0xf0>)
 801a77a:	6813      	ldr	r3, [r2, #0]
 801a77c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a780:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a784:	d02b      	beq.n	801a7de <ai_platform_runtime_get_revision+0x86>
 801a786:	6813      	ldr	r3, [r2, #0]
 801a788:	f240 4183 	movw	r1, #1155	; 0x483
 801a78c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a790:	428b      	cmp	r3, r1
 801a792:	d046      	beq.n	801a822 <ai_platform_runtime_get_revision+0xca>
 801a794:	6813      	ldr	r3, [r2, #0]
 801a796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a79a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a79e:	d032      	beq.n	801a806 <ai_platform_runtime_get_revision+0xae>
 801a7a0:	6813      	ldr	r3, [r2, #0]
 801a7a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d129      	bne.n	801a7fe <ai_platform_runtime_get_revision+0xa6>
 801a7aa:	4a28      	ldr	r2, [pc, #160]	; (801a84c <ai_platform_runtime_get_revision+0xf4>)
 801a7ac:	2301      	movs	r3, #1
 801a7ae:	6093      	str	r3, [r2, #8]
 801a7b0:	6893      	ldr	r3, [r2, #8]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d1fc      	bne.n	801a7b0 <ai_platform_runtime_get_revision+0x58>
 801a7b6:	4926      	ldr	r1, [pc, #152]	; (801a850 <ai_platform_runtime_get_revision+0xf8>)
 801a7b8:	4b26      	ldr	r3, [pc, #152]	; (801a854 <ai_platform_runtime_get_revision+0xfc>)
 801a7ba:	6011      	str	r1, [r2, #0]
 801a7bc:	6812      	ldr	r2, [r2, #0]
 801a7be:	429a      	cmp	r2, r3
 801a7c0:	d01d      	beq.n	801a7fe <ai_platform_runtime_get_revision+0xa6>
 801a7c2:	e7fe      	b.n	801a7c2 <ai_platform_runtime_get_revision+0x6a>
 801a7c4:	4a21      	ldr	r2, [pc, #132]	; (801a84c <ai_platform_runtime_get_revision+0xf4>)
 801a7c6:	2301      	movs	r3, #1
 801a7c8:	6093      	str	r3, [r2, #8]
 801a7ca:	6893      	ldr	r3, [r2, #8]
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d1fc      	bne.n	801a7ca <ai_platform_runtime_get_revision+0x72>
 801a7d0:	491f      	ldr	r1, [pc, #124]	; (801a850 <ai_platform_runtime_get_revision+0xf8>)
 801a7d2:	4b20      	ldr	r3, [pc, #128]	; (801a854 <ai_platform_runtime_get_revision+0xfc>)
 801a7d4:	6011      	str	r1, [r2, #0]
 801a7d6:	6812      	ldr	r2, [r2, #0]
 801a7d8:	429a      	cmp	r2, r3
 801a7da:	d010      	beq.n	801a7fe <ai_platform_runtime_get_revision+0xa6>
 801a7dc:	e7fe      	b.n	801a7dc <ai_platform_runtime_get_revision+0x84>
 801a7de:	4a1e      	ldr	r2, [pc, #120]	; (801a858 <ai_platform_runtime_get_revision+0x100>)
 801a7e0:	2301      	movs	r3, #1
 801a7e2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801a7e6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d1fb      	bne.n	801a7e6 <ai_platform_runtime_get_revision+0x8e>
 801a7ee:	4918      	ldr	r1, [pc, #96]	; (801a850 <ai_platform_runtime_get_revision+0xf8>)
 801a7f0:	4b18      	ldr	r3, [pc, #96]	; (801a854 <ai_platform_runtime_get_revision+0xfc>)
 801a7f2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801a7f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801a7fa:	429a      	cmp	r2, r3
 801a7fc:	d110      	bne.n	801a820 <ai_platform_runtime_get_revision+0xc8>
 801a7fe:	f7ff fef9 	bl	801a5f4 <_ai_platform_release_crc>
 801a802:	4816      	ldr	r0, [pc, #88]	; (801a85c <ai_platform_runtime_get_revision+0x104>)
 801a804:	bd08      	pop	{r3, pc}
 801a806:	4a11      	ldr	r2, [pc, #68]	; (801a84c <ai_platform_runtime_get_revision+0xf4>)
 801a808:	2301      	movs	r3, #1
 801a80a:	6093      	str	r3, [r2, #8]
 801a80c:	6893      	ldr	r3, [r2, #8]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d1fc      	bne.n	801a80c <ai_platform_runtime_get_revision+0xb4>
 801a812:	490f      	ldr	r1, [pc, #60]	; (801a850 <ai_platform_runtime_get_revision+0xf8>)
 801a814:	4b0f      	ldr	r3, [pc, #60]	; (801a854 <ai_platform_runtime_get_revision+0xfc>)
 801a816:	6011      	str	r1, [r2, #0]
 801a818:	6812      	ldr	r2, [r2, #0]
 801a81a:	429a      	cmp	r2, r3
 801a81c:	d0ef      	beq.n	801a7fe <ai_platform_runtime_get_revision+0xa6>
 801a81e:	e7fe      	b.n	801a81e <ai_platform_runtime_get_revision+0xc6>
 801a820:	e7fe      	b.n	801a820 <ai_platform_runtime_get_revision+0xc8>
 801a822:	4a0d      	ldr	r2, [pc, #52]	; (801a858 <ai_platform_runtime_get_revision+0x100>)
 801a824:	2301      	movs	r3, #1
 801a826:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801a82a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d1fb      	bne.n	801a82a <ai_platform_runtime_get_revision+0xd2>
 801a832:	4907      	ldr	r1, [pc, #28]	; (801a850 <ai_platform_runtime_get_revision+0xf8>)
 801a834:	4b07      	ldr	r3, [pc, #28]	; (801a854 <ai_platform_runtime_get_revision+0xfc>)
 801a836:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801a83a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801a83e:	429a      	cmp	r2, r3
 801a840:	d0dd      	beq.n	801a7fe <ai_platform_runtime_get_revision+0xa6>
 801a842:	e7fe      	b.n	801a842 <ai_platform_runtime_get_revision+0xea>
 801a844:	e0042000 	.word	0xe0042000
 801a848:	5c001000 	.word	0x5c001000
 801a84c:	40023000 	.word	0x40023000
 801a850:	f407a5c2 	.word	0xf407a5c2
 801a854:	b5e8b5cd 	.word	0xb5e8b5cd
 801a858:	58024000 	.word	0x58024000
 801a85c:	08025e00 	.word	0x08025e00

0801a860 <ai_platform_runtime_get_version>:
 801a860:	b500      	push	{lr}
 801a862:	b083      	sub	sp, #12
 801a864:	f7ff fec4 	bl	801a5f0 <_ai_platform_acquire_crc>
 801a868:	4b42      	ldr	r3, [pc, #264]	; (801a974 <ai_platform_runtime_get_version+0x114>)
 801a86a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a874:	189a      	adds	r2, r3, r2
 801a876:	2a01      	cmp	r2, #1
 801a878:	d929      	bls.n	801a8ce <ai_platform_runtime_get_version+0x6e>
 801a87a:	f240 4249 	movw	r2, #1097	; 0x449
 801a87e:	4293      	cmp	r3, r2
 801a880:	d025      	beq.n	801a8ce <ai_platform_runtime_get_version+0x6e>
 801a882:	4a3d      	ldr	r2, [pc, #244]	; (801a978 <ai_platform_runtime_get_version+0x118>)
 801a884:	6813      	ldr	r3, [r2, #0]
 801a886:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a88a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a88e:	d02b      	beq.n	801a8e8 <ai_platform_runtime_get_version+0x88>
 801a890:	6813      	ldr	r3, [r2, #0]
 801a892:	f240 4183 	movw	r1, #1155	; 0x483
 801a896:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a89a:	428b      	cmp	r3, r1
 801a89c:	d059      	beq.n	801a952 <ai_platform_runtime_get_version+0xf2>
 801a89e:	6813      	ldr	r3, [r2, #0]
 801a8a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a8a4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a8a8:	d045      	beq.n	801a936 <ai_platform_runtime_get_version+0xd6>
 801a8aa:	6813      	ldr	r3, [r2, #0]
 801a8ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d129      	bne.n	801a908 <ai_platform_runtime_get_version+0xa8>
 801a8b4:	4a31      	ldr	r2, [pc, #196]	; (801a97c <ai_platform_runtime_get_version+0x11c>)
 801a8b6:	2301      	movs	r3, #1
 801a8b8:	6093      	str	r3, [r2, #8]
 801a8ba:	6893      	ldr	r3, [r2, #8]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d1fc      	bne.n	801a8ba <ai_platform_runtime_get_version+0x5a>
 801a8c0:	492f      	ldr	r1, [pc, #188]	; (801a980 <ai_platform_runtime_get_version+0x120>)
 801a8c2:	4b30      	ldr	r3, [pc, #192]	; (801a984 <ai_platform_runtime_get_version+0x124>)
 801a8c4:	6011      	str	r1, [r2, #0]
 801a8c6:	6812      	ldr	r2, [r2, #0]
 801a8c8:	429a      	cmp	r2, r3
 801a8ca:	d01d      	beq.n	801a908 <ai_platform_runtime_get_version+0xa8>
 801a8cc:	e7fe      	b.n	801a8cc <ai_platform_runtime_get_version+0x6c>
 801a8ce:	4a2b      	ldr	r2, [pc, #172]	; (801a97c <ai_platform_runtime_get_version+0x11c>)
 801a8d0:	2301      	movs	r3, #1
 801a8d2:	6093      	str	r3, [r2, #8]
 801a8d4:	6893      	ldr	r3, [r2, #8]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d1fc      	bne.n	801a8d4 <ai_platform_runtime_get_version+0x74>
 801a8da:	4929      	ldr	r1, [pc, #164]	; (801a980 <ai_platform_runtime_get_version+0x120>)
 801a8dc:	4b29      	ldr	r3, [pc, #164]	; (801a984 <ai_platform_runtime_get_version+0x124>)
 801a8de:	6011      	str	r1, [r2, #0]
 801a8e0:	6812      	ldr	r2, [r2, #0]
 801a8e2:	429a      	cmp	r2, r3
 801a8e4:	d010      	beq.n	801a908 <ai_platform_runtime_get_version+0xa8>
 801a8e6:	e7fe      	b.n	801a8e6 <ai_platform_runtime_get_version+0x86>
 801a8e8:	4a27      	ldr	r2, [pc, #156]	; (801a988 <ai_platform_runtime_get_version+0x128>)
 801a8ea:	2301      	movs	r3, #1
 801a8ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801a8f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d1fb      	bne.n	801a8f0 <ai_platform_runtime_get_version+0x90>
 801a8f8:	4921      	ldr	r1, [pc, #132]	; (801a980 <ai_platform_runtime_get_version+0x120>)
 801a8fa:	4b22      	ldr	r3, [pc, #136]	; (801a984 <ai_platform_runtime_get_version+0x124>)
 801a8fc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801a900:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801a904:	429a      	cmp	r2, r3
 801a906:	d123      	bne.n	801a950 <ai_platform_runtime_get_version+0xf0>
 801a908:	f7ff fe74 	bl	801a5f4 <_ai_platform_release_crc>
 801a90c:	4b1f      	ldr	r3, [pc, #124]	; (801a98c <ai_platform_runtime_get_version+0x12c>)
 801a90e:	2000      	movs	r0, #0
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	fa5f fc83 	uxtb.w	ip, r3
 801a916:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a91a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a91e:	0e1b      	lsrs	r3, r3, #24
 801a920:	f36c 0007 	bfi	r0, ip, #0, #8
 801a924:	f361 200f 	bfi	r0, r1, #8, #8
 801a928:	f362 4017 	bfi	r0, r2, #16, #8
 801a92c:	f363 601f 	bfi	r0, r3, #24, #8
 801a930:	b003      	add	sp, #12
 801a932:	f85d fb04 	ldr.w	pc, [sp], #4
 801a936:	4a11      	ldr	r2, [pc, #68]	; (801a97c <ai_platform_runtime_get_version+0x11c>)
 801a938:	2301      	movs	r3, #1
 801a93a:	6093      	str	r3, [r2, #8]
 801a93c:	6893      	ldr	r3, [r2, #8]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d1fc      	bne.n	801a93c <ai_platform_runtime_get_version+0xdc>
 801a942:	490f      	ldr	r1, [pc, #60]	; (801a980 <ai_platform_runtime_get_version+0x120>)
 801a944:	4b0f      	ldr	r3, [pc, #60]	; (801a984 <ai_platform_runtime_get_version+0x124>)
 801a946:	6011      	str	r1, [r2, #0]
 801a948:	6812      	ldr	r2, [r2, #0]
 801a94a:	429a      	cmp	r2, r3
 801a94c:	d0dc      	beq.n	801a908 <ai_platform_runtime_get_version+0xa8>
 801a94e:	e7fe      	b.n	801a94e <ai_platform_runtime_get_version+0xee>
 801a950:	e7fe      	b.n	801a950 <ai_platform_runtime_get_version+0xf0>
 801a952:	4a0d      	ldr	r2, [pc, #52]	; (801a988 <ai_platform_runtime_get_version+0x128>)
 801a954:	2301      	movs	r3, #1
 801a956:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801a95a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d1fb      	bne.n	801a95a <ai_platform_runtime_get_version+0xfa>
 801a962:	4907      	ldr	r1, [pc, #28]	; (801a980 <ai_platform_runtime_get_version+0x120>)
 801a964:	4b07      	ldr	r3, [pc, #28]	; (801a984 <ai_platform_runtime_get_version+0x124>)
 801a966:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801a96a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801a96e:	429a      	cmp	r2, r3
 801a970:	d0ca      	beq.n	801a908 <ai_platform_runtime_get_version+0xa8>
 801a972:	e7fe      	b.n	801a972 <ai_platform_runtime_get_version+0x112>
 801a974:	e0042000 	.word	0xe0042000
 801a978:	5c001000 	.word	0x5c001000
 801a97c:	40023000 	.word	0x40023000
 801a980:	f407a5c2 	.word	0xf407a5c2
 801a984:	b5e8b5cd 	.word	0xb5e8b5cd
 801a988:	58024000 	.word	0x58024000
 801a98c:	08063720 	.word	0x08063720

0801a990 <ai_platform_api_get_version>:
 801a990:	b500      	push	{lr}
 801a992:	b083      	sub	sp, #12
 801a994:	f7ff fe2c 	bl	801a5f0 <_ai_platform_acquire_crc>
 801a998:	4b42      	ldr	r3, [pc, #264]	; (801aaa4 <ai_platform_api_get_version+0x114>)
 801a99a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a9a4:	189a      	adds	r2, r3, r2
 801a9a6:	2a01      	cmp	r2, #1
 801a9a8:	d929      	bls.n	801a9fe <ai_platform_api_get_version+0x6e>
 801a9aa:	f240 4249 	movw	r2, #1097	; 0x449
 801a9ae:	4293      	cmp	r3, r2
 801a9b0:	d025      	beq.n	801a9fe <ai_platform_api_get_version+0x6e>
 801a9b2:	4a3d      	ldr	r2, [pc, #244]	; (801aaa8 <ai_platform_api_get_version+0x118>)
 801a9b4:	6813      	ldr	r3, [r2, #0]
 801a9b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a9ba:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a9be:	d02b      	beq.n	801aa18 <ai_platform_api_get_version+0x88>
 801a9c0:	6813      	ldr	r3, [r2, #0]
 801a9c2:	f240 4183 	movw	r1, #1155	; 0x483
 801a9c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a9ca:	428b      	cmp	r3, r1
 801a9cc:	d059      	beq.n	801aa82 <ai_platform_api_get_version+0xf2>
 801a9ce:	6813      	ldr	r3, [r2, #0]
 801a9d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a9d4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801a9d8:	d045      	beq.n	801aa66 <ai_platform_api_get_version+0xd6>
 801a9da:	6813      	ldr	r3, [r2, #0]
 801a9dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d129      	bne.n	801aa38 <ai_platform_api_get_version+0xa8>
 801a9e4:	4a31      	ldr	r2, [pc, #196]	; (801aaac <ai_platform_api_get_version+0x11c>)
 801a9e6:	2301      	movs	r3, #1
 801a9e8:	6093      	str	r3, [r2, #8]
 801a9ea:	6893      	ldr	r3, [r2, #8]
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d1fc      	bne.n	801a9ea <ai_platform_api_get_version+0x5a>
 801a9f0:	492f      	ldr	r1, [pc, #188]	; (801aab0 <ai_platform_api_get_version+0x120>)
 801a9f2:	4b30      	ldr	r3, [pc, #192]	; (801aab4 <ai_platform_api_get_version+0x124>)
 801a9f4:	6011      	str	r1, [r2, #0]
 801a9f6:	6812      	ldr	r2, [r2, #0]
 801a9f8:	429a      	cmp	r2, r3
 801a9fa:	d01d      	beq.n	801aa38 <ai_platform_api_get_version+0xa8>
 801a9fc:	e7fe      	b.n	801a9fc <ai_platform_api_get_version+0x6c>
 801a9fe:	4a2b      	ldr	r2, [pc, #172]	; (801aaac <ai_platform_api_get_version+0x11c>)
 801aa00:	2301      	movs	r3, #1
 801aa02:	6093      	str	r3, [r2, #8]
 801aa04:	6893      	ldr	r3, [r2, #8]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d1fc      	bne.n	801aa04 <ai_platform_api_get_version+0x74>
 801aa0a:	4929      	ldr	r1, [pc, #164]	; (801aab0 <ai_platform_api_get_version+0x120>)
 801aa0c:	4b29      	ldr	r3, [pc, #164]	; (801aab4 <ai_platform_api_get_version+0x124>)
 801aa0e:	6011      	str	r1, [r2, #0]
 801aa10:	6812      	ldr	r2, [r2, #0]
 801aa12:	429a      	cmp	r2, r3
 801aa14:	d010      	beq.n	801aa38 <ai_platform_api_get_version+0xa8>
 801aa16:	e7fe      	b.n	801aa16 <ai_platform_api_get_version+0x86>
 801aa18:	4a27      	ldr	r2, [pc, #156]	; (801aab8 <ai_platform_api_get_version+0x128>)
 801aa1a:	2301      	movs	r3, #1
 801aa1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801aa20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d1fb      	bne.n	801aa20 <ai_platform_api_get_version+0x90>
 801aa28:	4921      	ldr	r1, [pc, #132]	; (801aab0 <ai_platform_api_get_version+0x120>)
 801aa2a:	4b22      	ldr	r3, [pc, #136]	; (801aab4 <ai_platform_api_get_version+0x124>)
 801aa2c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801aa30:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801aa34:	429a      	cmp	r2, r3
 801aa36:	d123      	bne.n	801aa80 <ai_platform_api_get_version+0xf0>
 801aa38:	f7ff fddc 	bl	801a5f4 <_ai_platform_release_crc>
 801aa3c:	4b1f      	ldr	r3, [pc, #124]	; (801aabc <ai_platform_api_get_version+0x12c>)
 801aa3e:	2000      	movs	r0, #0
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	fa5f fc83 	uxtb.w	ip, r3
 801aa46:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801aa4a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801aa4e:	0e1b      	lsrs	r3, r3, #24
 801aa50:	f36c 0007 	bfi	r0, ip, #0, #8
 801aa54:	f361 200f 	bfi	r0, r1, #8, #8
 801aa58:	f362 4017 	bfi	r0, r2, #16, #8
 801aa5c:	f363 601f 	bfi	r0, r3, #24, #8
 801aa60:	b003      	add	sp, #12
 801aa62:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa66:	4a11      	ldr	r2, [pc, #68]	; (801aaac <ai_platform_api_get_version+0x11c>)
 801aa68:	2301      	movs	r3, #1
 801aa6a:	6093      	str	r3, [r2, #8]
 801aa6c:	6893      	ldr	r3, [r2, #8]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d1fc      	bne.n	801aa6c <ai_platform_api_get_version+0xdc>
 801aa72:	490f      	ldr	r1, [pc, #60]	; (801aab0 <ai_platform_api_get_version+0x120>)
 801aa74:	4b0f      	ldr	r3, [pc, #60]	; (801aab4 <ai_platform_api_get_version+0x124>)
 801aa76:	6011      	str	r1, [r2, #0]
 801aa78:	6812      	ldr	r2, [r2, #0]
 801aa7a:	429a      	cmp	r2, r3
 801aa7c:	d0dc      	beq.n	801aa38 <ai_platform_api_get_version+0xa8>
 801aa7e:	e7fe      	b.n	801aa7e <ai_platform_api_get_version+0xee>
 801aa80:	e7fe      	b.n	801aa80 <ai_platform_api_get_version+0xf0>
 801aa82:	4a0d      	ldr	r2, [pc, #52]	; (801aab8 <ai_platform_api_get_version+0x128>)
 801aa84:	2301      	movs	r3, #1
 801aa86:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801aa8a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d1fb      	bne.n	801aa8a <ai_platform_api_get_version+0xfa>
 801aa92:	4907      	ldr	r1, [pc, #28]	; (801aab0 <ai_platform_api_get_version+0x120>)
 801aa94:	4b07      	ldr	r3, [pc, #28]	; (801aab4 <ai_platform_api_get_version+0x124>)
 801aa96:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801aa9a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801aa9e:	429a      	cmp	r2, r3
 801aaa0:	d0ca      	beq.n	801aa38 <ai_platform_api_get_version+0xa8>
 801aaa2:	e7fe      	b.n	801aaa2 <ai_platform_api_get_version+0x112>
 801aaa4:	e0042000 	.word	0xe0042000
 801aaa8:	5c001000 	.word	0x5c001000
 801aaac:	40023000 	.word	0x40023000
 801aab0:	f407a5c2 	.word	0xf407a5c2
 801aab4:	b5e8b5cd 	.word	0xb5e8b5cd
 801aab8:	58024000 	.word	0x58024000
 801aabc:	08063724 	.word	0x08063724

0801aac0 <ai_platform_interface_api_get_version>:
 801aac0:	b500      	push	{lr}
 801aac2:	b083      	sub	sp, #12
 801aac4:	f7ff fd94 	bl	801a5f0 <_ai_platform_acquire_crc>
 801aac8:	4b42      	ldr	r3, [pc, #264]	; (801abd4 <ai_platform_interface_api_get_version+0x114>)
 801aaca:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aad4:	189a      	adds	r2, r3, r2
 801aad6:	2a01      	cmp	r2, #1
 801aad8:	d929      	bls.n	801ab2e <ai_platform_interface_api_get_version+0x6e>
 801aada:	f240 4249 	movw	r2, #1097	; 0x449
 801aade:	4293      	cmp	r3, r2
 801aae0:	d025      	beq.n	801ab2e <ai_platform_interface_api_get_version+0x6e>
 801aae2:	4a3d      	ldr	r2, [pc, #244]	; (801abd8 <ai_platform_interface_api_get_version+0x118>)
 801aae4:	6813      	ldr	r3, [r2, #0]
 801aae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aaea:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801aaee:	d02b      	beq.n	801ab48 <ai_platform_interface_api_get_version+0x88>
 801aaf0:	6813      	ldr	r3, [r2, #0]
 801aaf2:	f240 4183 	movw	r1, #1155	; 0x483
 801aaf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aafa:	428b      	cmp	r3, r1
 801aafc:	d059      	beq.n	801abb2 <ai_platform_interface_api_get_version+0xf2>
 801aafe:	6813      	ldr	r3, [r2, #0]
 801ab00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ab04:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801ab08:	d045      	beq.n	801ab96 <ai_platform_interface_api_get_version+0xd6>
 801ab0a:	6813      	ldr	r3, [r2, #0]
 801ab0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d129      	bne.n	801ab68 <ai_platform_interface_api_get_version+0xa8>
 801ab14:	4a31      	ldr	r2, [pc, #196]	; (801abdc <ai_platform_interface_api_get_version+0x11c>)
 801ab16:	2301      	movs	r3, #1
 801ab18:	6093      	str	r3, [r2, #8]
 801ab1a:	6893      	ldr	r3, [r2, #8]
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d1fc      	bne.n	801ab1a <ai_platform_interface_api_get_version+0x5a>
 801ab20:	492f      	ldr	r1, [pc, #188]	; (801abe0 <ai_platform_interface_api_get_version+0x120>)
 801ab22:	4b30      	ldr	r3, [pc, #192]	; (801abe4 <ai_platform_interface_api_get_version+0x124>)
 801ab24:	6011      	str	r1, [r2, #0]
 801ab26:	6812      	ldr	r2, [r2, #0]
 801ab28:	429a      	cmp	r2, r3
 801ab2a:	d01d      	beq.n	801ab68 <ai_platform_interface_api_get_version+0xa8>
 801ab2c:	e7fe      	b.n	801ab2c <ai_platform_interface_api_get_version+0x6c>
 801ab2e:	4a2b      	ldr	r2, [pc, #172]	; (801abdc <ai_platform_interface_api_get_version+0x11c>)
 801ab30:	2301      	movs	r3, #1
 801ab32:	6093      	str	r3, [r2, #8]
 801ab34:	6893      	ldr	r3, [r2, #8]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d1fc      	bne.n	801ab34 <ai_platform_interface_api_get_version+0x74>
 801ab3a:	4929      	ldr	r1, [pc, #164]	; (801abe0 <ai_platform_interface_api_get_version+0x120>)
 801ab3c:	4b29      	ldr	r3, [pc, #164]	; (801abe4 <ai_platform_interface_api_get_version+0x124>)
 801ab3e:	6011      	str	r1, [r2, #0]
 801ab40:	6812      	ldr	r2, [r2, #0]
 801ab42:	429a      	cmp	r2, r3
 801ab44:	d010      	beq.n	801ab68 <ai_platform_interface_api_get_version+0xa8>
 801ab46:	e7fe      	b.n	801ab46 <ai_platform_interface_api_get_version+0x86>
 801ab48:	4a27      	ldr	r2, [pc, #156]	; (801abe8 <ai_platform_interface_api_get_version+0x128>)
 801ab4a:	2301      	movs	r3, #1
 801ab4c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801ab50:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d1fb      	bne.n	801ab50 <ai_platform_interface_api_get_version+0x90>
 801ab58:	4921      	ldr	r1, [pc, #132]	; (801abe0 <ai_platform_interface_api_get_version+0x120>)
 801ab5a:	4b22      	ldr	r3, [pc, #136]	; (801abe4 <ai_platform_interface_api_get_version+0x124>)
 801ab5c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801ab60:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801ab64:	429a      	cmp	r2, r3
 801ab66:	d123      	bne.n	801abb0 <ai_platform_interface_api_get_version+0xf0>
 801ab68:	f7ff fd44 	bl	801a5f4 <_ai_platform_release_crc>
 801ab6c:	4b1f      	ldr	r3, [pc, #124]	; (801abec <ai_platform_interface_api_get_version+0x12c>)
 801ab6e:	2000      	movs	r0, #0
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	fa5f fc83 	uxtb.w	ip, r3
 801ab76:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801ab7a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801ab7e:	0e1b      	lsrs	r3, r3, #24
 801ab80:	f36c 0007 	bfi	r0, ip, #0, #8
 801ab84:	f361 200f 	bfi	r0, r1, #8, #8
 801ab88:	f362 4017 	bfi	r0, r2, #16, #8
 801ab8c:	f363 601f 	bfi	r0, r3, #24, #8
 801ab90:	b003      	add	sp, #12
 801ab92:	f85d fb04 	ldr.w	pc, [sp], #4
 801ab96:	4a11      	ldr	r2, [pc, #68]	; (801abdc <ai_platform_interface_api_get_version+0x11c>)
 801ab98:	2301      	movs	r3, #1
 801ab9a:	6093      	str	r3, [r2, #8]
 801ab9c:	6893      	ldr	r3, [r2, #8]
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d1fc      	bne.n	801ab9c <ai_platform_interface_api_get_version+0xdc>
 801aba2:	490f      	ldr	r1, [pc, #60]	; (801abe0 <ai_platform_interface_api_get_version+0x120>)
 801aba4:	4b0f      	ldr	r3, [pc, #60]	; (801abe4 <ai_platform_interface_api_get_version+0x124>)
 801aba6:	6011      	str	r1, [r2, #0]
 801aba8:	6812      	ldr	r2, [r2, #0]
 801abaa:	429a      	cmp	r2, r3
 801abac:	d0dc      	beq.n	801ab68 <ai_platform_interface_api_get_version+0xa8>
 801abae:	e7fe      	b.n	801abae <ai_platform_interface_api_get_version+0xee>
 801abb0:	e7fe      	b.n	801abb0 <ai_platform_interface_api_get_version+0xf0>
 801abb2:	4a0d      	ldr	r2, [pc, #52]	; (801abe8 <ai_platform_interface_api_get_version+0x128>)
 801abb4:	2301      	movs	r3, #1
 801abb6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801abba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d1fb      	bne.n	801abba <ai_platform_interface_api_get_version+0xfa>
 801abc2:	4907      	ldr	r1, [pc, #28]	; (801abe0 <ai_platform_interface_api_get_version+0x120>)
 801abc4:	4b07      	ldr	r3, [pc, #28]	; (801abe4 <ai_platform_interface_api_get_version+0x124>)
 801abc6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801abca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801abce:	429a      	cmp	r2, r3
 801abd0:	d0ca      	beq.n	801ab68 <ai_platform_interface_api_get_version+0xa8>
 801abd2:	e7fe      	b.n	801abd2 <ai_platform_interface_api_get_version+0x112>
 801abd4:	e0042000 	.word	0xe0042000
 801abd8:	5c001000 	.word	0x5c001000
 801abdc:	40023000 	.word	0x40023000
 801abe0:	f407a5c2 	.word	0xf407a5c2
 801abe4:	b5e8b5cd 	.word	0xb5e8b5cd
 801abe8:	58024000 	.word	0x58024000
 801abec:	08063728 	.word	0x08063728

0801abf0 <ai_platform_context_acquire>:
 801abf0:	b510      	push	{r4, lr}
 801abf2:	4604      	mov	r4, r0
 801abf4:	b120      	cbz	r0, 801ac00 <ai_platform_context_acquire+0x10>
 801abf6:	4b3d      	ldr	r3, [pc, #244]	; (801acec <ai_platform_context_acquire+0xfc>)
 801abf8:	6802      	ldr	r2, [r0, #0]
 801abfa:	429a      	cmp	r2, r3
 801abfc:	bf18      	it	ne
 801abfe:	2400      	movne	r4, #0
 801ac00:	f7ff fcf6 	bl	801a5f0 <_ai_platform_acquire_crc>
 801ac04:	4b3a      	ldr	r3, [pc, #232]	; (801acf0 <ai_platform_context_acquire+0x100>)
 801ac06:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ac10:	189a      	adds	r2, r3, r2
 801ac12:	2a01      	cmp	r2, #1
 801ac14:	d929      	bls.n	801ac6a <ai_platform_context_acquire+0x7a>
 801ac16:	f240 4249 	movw	r2, #1097	; 0x449
 801ac1a:	4293      	cmp	r3, r2
 801ac1c:	d025      	beq.n	801ac6a <ai_platform_context_acquire+0x7a>
 801ac1e:	4a35      	ldr	r2, [pc, #212]	; (801acf4 <ai_platform_context_acquire+0x104>)
 801ac20:	6813      	ldr	r3, [r2, #0]
 801ac22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ac26:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801ac2a:	d02b      	beq.n	801ac84 <ai_platform_context_acquire+0x94>
 801ac2c:	6813      	ldr	r3, [r2, #0]
 801ac2e:	f240 4183 	movw	r1, #1155	; 0x483
 801ac32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ac36:	428b      	cmp	r3, r1
 801ac38:	d046      	beq.n	801acc8 <ai_platform_context_acquire+0xd8>
 801ac3a:	6813      	ldr	r3, [r2, #0]
 801ac3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ac40:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801ac44:	d033      	beq.n	801acae <ai_platform_context_acquire+0xbe>
 801ac46:	6813      	ldr	r3, [r2, #0]
 801ac48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d129      	bne.n	801aca4 <ai_platform_context_acquire+0xb4>
 801ac50:	4a29      	ldr	r2, [pc, #164]	; (801acf8 <ai_platform_context_acquire+0x108>)
 801ac52:	2301      	movs	r3, #1
 801ac54:	6093      	str	r3, [r2, #8]
 801ac56:	6893      	ldr	r3, [r2, #8]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d1fc      	bne.n	801ac56 <ai_platform_context_acquire+0x66>
 801ac5c:	4927      	ldr	r1, [pc, #156]	; (801acfc <ai_platform_context_acquire+0x10c>)
 801ac5e:	4b28      	ldr	r3, [pc, #160]	; (801ad00 <ai_platform_context_acquire+0x110>)
 801ac60:	6011      	str	r1, [r2, #0]
 801ac62:	6812      	ldr	r2, [r2, #0]
 801ac64:	429a      	cmp	r2, r3
 801ac66:	d01d      	beq.n	801aca4 <ai_platform_context_acquire+0xb4>
 801ac68:	e7fe      	b.n	801ac68 <ai_platform_context_acquire+0x78>
 801ac6a:	4a23      	ldr	r2, [pc, #140]	; (801acf8 <ai_platform_context_acquire+0x108>)
 801ac6c:	2301      	movs	r3, #1
 801ac6e:	6093      	str	r3, [r2, #8]
 801ac70:	6893      	ldr	r3, [r2, #8]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d1fc      	bne.n	801ac70 <ai_platform_context_acquire+0x80>
 801ac76:	4921      	ldr	r1, [pc, #132]	; (801acfc <ai_platform_context_acquire+0x10c>)
 801ac78:	4b21      	ldr	r3, [pc, #132]	; (801ad00 <ai_platform_context_acquire+0x110>)
 801ac7a:	6011      	str	r1, [r2, #0]
 801ac7c:	6812      	ldr	r2, [r2, #0]
 801ac7e:	429a      	cmp	r2, r3
 801ac80:	d010      	beq.n	801aca4 <ai_platform_context_acquire+0xb4>
 801ac82:	e7fe      	b.n	801ac82 <ai_platform_context_acquire+0x92>
 801ac84:	4a1f      	ldr	r2, [pc, #124]	; (801ad04 <ai_platform_context_acquire+0x114>)
 801ac86:	2301      	movs	r3, #1
 801ac88:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801ac8c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d1fb      	bne.n	801ac8c <ai_platform_context_acquire+0x9c>
 801ac94:	4919      	ldr	r1, [pc, #100]	; (801acfc <ai_platform_context_acquire+0x10c>)
 801ac96:	4b1a      	ldr	r3, [pc, #104]	; (801ad00 <ai_platform_context_acquire+0x110>)
 801ac98:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801ac9c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801aca0:	429a      	cmp	r2, r3
 801aca2:	d103      	bne.n	801acac <ai_platform_context_acquire+0xbc>
 801aca4:	f7ff fca6 	bl	801a5f4 <_ai_platform_release_crc>
 801aca8:	4620      	mov	r0, r4
 801acaa:	bd10      	pop	{r4, pc}
 801acac:	e7fe      	b.n	801acac <ai_platform_context_acquire+0xbc>
 801acae:	4a12      	ldr	r2, [pc, #72]	; (801acf8 <ai_platform_context_acquire+0x108>)
 801acb0:	2301      	movs	r3, #1
 801acb2:	6093      	str	r3, [r2, #8]
 801acb4:	6893      	ldr	r3, [r2, #8]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d1fc      	bne.n	801acb4 <ai_platform_context_acquire+0xc4>
 801acba:	4910      	ldr	r1, [pc, #64]	; (801acfc <ai_platform_context_acquire+0x10c>)
 801acbc:	4b10      	ldr	r3, [pc, #64]	; (801ad00 <ai_platform_context_acquire+0x110>)
 801acbe:	6011      	str	r1, [r2, #0]
 801acc0:	6812      	ldr	r2, [r2, #0]
 801acc2:	429a      	cmp	r2, r3
 801acc4:	d0ee      	beq.n	801aca4 <ai_platform_context_acquire+0xb4>
 801acc6:	e7fe      	b.n	801acc6 <ai_platform_context_acquire+0xd6>
 801acc8:	4a0e      	ldr	r2, [pc, #56]	; (801ad04 <ai_platform_context_acquire+0x114>)
 801acca:	2301      	movs	r3, #1
 801accc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801acd0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d1fb      	bne.n	801acd0 <ai_platform_context_acquire+0xe0>
 801acd8:	4908      	ldr	r1, [pc, #32]	; (801acfc <ai_platform_context_acquire+0x10c>)
 801acda:	4b09      	ldr	r3, [pc, #36]	; (801ad00 <ai_platform_context_acquire+0x110>)
 801acdc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801ace0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801ace4:	429a      	cmp	r2, r3
 801ace6:	d0dd      	beq.n	801aca4 <ai_platform_context_acquire+0xb4>
 801ace8:	e7fe      	b.n	801ace8 <ai_platform_context_acquire+0xf8>
 801acea:	bf00      	nop
 801acec:	a1c00100 	.word	0xa1c00100
 801acf0:	e0042000 	.word	0xe0042000
 801acf4:	5c001000 	.word	0x5c001000
 801acf8:	40023000 	.word	0x40023000
 801acfc:	f407a5c2 	.word	0xf407a5c2
 801ad00:	b5e8b5cd 	.word	0xb5e8b5cd
 801ad04:	58024000 	.word	0x58024000

0801ad08 <ai_platform_network_set_error>:
 801ad08:	b110      	cbz	r0, 801ad10 <ai_platform_network_set_error+0x8>
 801ad0a:	3010      	adds	r0, #16
 801ad0c:	f001 bf1e 	b.w	801cb4c <core_set_error>
 801ad10:	4770      	bx	lr
 801ad12:	bf00      	nop

0801ad14 <ai_platform_api_get_network_report>:
 801ad14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad18:	b089      	sub	sp, #36	; 0x24
 801ad1a:	4607      	mov	r7, r0
 801ad1c:	9101      	str	r1, [sp, #4]
 801ad1e:	b120      	cbz	r0, 801ad2a <ai_platform_api_get_network_report+0x16>
 801ad20:	4b87      	ldr	r3, [pc, #540]	; (801af40 <ai_platform_api_get_network_report+0x22c>)
 801ad22:	6802      	ldr	r2, [r0, #0]
 801ad24:	429a      	cmp	r2, r3
 801ad26:	bf18      	it	ne
 801ad28:	2700      	movne	r7, #0
 801ad2a:	f7ff fc61 	bl	801a5f0 <_ai_platform_acquire_crc>
 801ad2e:	4b85      	ldr	r3, [pc, #532]	; (801af44 <ai_platform_api_get_network_report+0x230>)
 801ad30:	f46f 698a 	mvn.w	r9, #1104	; 0x450
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ad3a:	eb03 0209 	add.w	r2, r3, r9
 801ad3e:	2a01      	cmp	r2, #1
 801ad40:	d92b      	bls.n	801ad9a <ai_platform_api_get_network_report+0x86>
 801ad42:	f240 4249 	movw	r2, #1097	; 0x449
 801ad46:	4293      	cmp	r3, r2
 801ad48:	d027      	beq.n	801ad9a <ai_platform_api_get_network_report+0x86>
 801ad4a:	4a7f      	ldr	r2, [pc, #508]	; (801af48 <ai_platform_api_get_network_report+0x234>)
 801ad4c:	6813      	ldr	r3, [r2, #0]
 801ad4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ad52:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801ad56:	d02d      	beq.n	801adb4 <ai_platform_api_get_network_report+0xa0>
 801ad58:	6813      	ldr	r3, [r2, #0]
 801ad5a:	f240 4183 	movw	r1, #1155	; 0x483
 801ad5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ad62:	428b      	cmp	r3, r1
 801ad64:	f000 80c6 	beq.w	801aef4 <ai_platform_api_get_network_report+0x1e0>
 801ad68:	6813      	ldr	r3, [r2, #0]
 801ad6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ad6e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801ad72:	f000 80ab 	beq.w	801aecc <ai_platform_api_get_network_report+0x1b8>
 801ad76:	6813      	ldr	r3, [r2, #0]
 801ad78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d129      	bne.n	801add4 <ai_platform_api_get_network_report+0xc0>
 801ad80:	4a72      	ldr	r2, [pc, #456]	; (801af4c <ai_platform_api_get_network_report+0x238>)
 801ad82:	2301      	movs	r3, #1
 801ad84:	6093      	str	r3, [r2, #8]
 801ad86:	6893      	ldr	r3, [r2, #8]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d1fc      	bne.n	801ad86 <ai_platform_api_get_network_report+0x72>
 801ad8c:	4b70      	ldr	r3, [pc, #448]	; (801af50 <ai_platform_api_get_network_report+0x23c>)
 801ad8e:	6013      	str	r3, [r2, #0]
 801ad90:	4b70      	ldr	r3, [pc, #448]	; (801af54 <ai_platform_api_get_network_report+0x240>)
 801ad92:	6812      	ldr	r2, [r2, #0]
 801ad94:	429a      	cmp	r2, r3
 801ad96:	d01d      	beq.n	801add4 <ai_platform_api_get_network_report+0xc0>
 801ad98:	e7fe      	b.n	801ad98 <ai_platform_api_get_network_report+0x84>
 801ad9a:	4a6c      	ldr	r2, [pc, #432]	; (801af4c <ai_platform_api_get_network_report+0x238>)
 801ad9c:	2301      	movs	r3, #1
 801ad9e:	6093      	str	r3, [r2, #8]
 801ada0:	6893      	ldr	r3, [r2, #8]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d1fc      	bne.n	801ada0 <ai_platform_api_get_network_report+0x8c>
 801ada6:	4b6a      	ldr	r3, [pc, #424]	; (801af50 <ai_platform_api_get_network_report+0x23c>)
 801ada8:	6013      	str	r3, [r2, #0]
 801adaa:	4b6a      	ldr	r3, [pc, #424]	; (801af54 <ai_platform_api_get_network_report+0x240>)
 801adac:	6812      	ldr	r2, [r2, #0]
 801adae:	429a      	cmp	r2, r3
 801adb0:	d010      	beq.n	801add4 <ai_platform_api_get_network_report+0xc0>
 801adb2:	e7fe      	b.n	801adb2 <ai_platform_api_get_network_report+0x9e>
 801adb4:	4a68      	ldr	r2, [pc, #416]	; (801af58 <ai_platform_api_get_network_report+0x244>)
 801adb6:	2301      	movs	r3, #1
 801adb8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801adbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d1fb      	bne.n	801adbc <ai_platform_api_get_network_report+0xa8>
 801adc4:	4b62      	ldr	r3, [pc, #392]	; (801af50 <ai_platform_api_get_network_report+0x23c>)
 801adc6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801adca:	4b62      	ldr	r3, [pc, #392]	; (801af54 <ai_platform_api_get_network_report+0x240>)
 801adcc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801add0:	429a      	cmp	r2, r3
 801add2:	d16c      	bne.n	801aeae <ai_platform_api_get_network_report+0x19a>
 801add4:	f7ff fc0e 	bl	801a5f4 <_ai_platform_release_crc>
 801add8:	9801      	ldr	r0, [sp, #4]
 801adda:	2800      	cmp	r0, #0
 801addc:	bf18      	it	ne
 801adde:	2f00      	cmpne	r7, #0
 801ade0:	bf0c      	ite	eq
 801ade2:	2301      	moveq	r3, #1
 801ade4:	2300      	movne	r3, #0
 801ade6:	9302      	str	r3, [sp, #8]
 801ade8:	d07e      	beq.n	801aee8 <ai_platform_api_get_network_report+0x1d4>
 801adea:	6743      	str	r3, [r0, #116]	; 0x74
 801adec:	4619      	mov	r1, r3
 801adee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adf0:	b13b      	cbz	r3, 801ae02 <ai_platform_api_get_network_report+0xee>
 801adf2:	3101      	adds	r1, #1
 801adf4:	6741      	str	r1, [r0, #116]	; 0x74
 801adf6:	691a      	ldr	r2, [r3, #16]
 801adf8:	b11a      	cbz	r2, 801ae02 <ai_platform_api_get_network_report+0xee>
 801adfa:	429a      	cmp	r2, r3
 801adfc:	d001      	beq.n	801ae02 <ai_platform_api_get_network_report+0xee>
 801adfe:	4613      	mov	r3, r2
 801ae00:	e7f6      	b.n	801adf0 <ai_platform_api_get_network_report+0xdc>
 801ae02:	2900      	cmp	r1, #0
 801ae04:	f000 8165 	beq.w	801b0d2 <ai_platform_api_get_network_report+0x3be>
 801ae08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d050      	beq.n	801aeb0 <ai_platform_api_get_network_report+0x19c>
 801ae0e:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 801ae12:	f1b9 0f00 	cmp.w	r9, #0
 801ae16:	d04b      	beq.n	801aeb0 <ai_platform_api_get_network_report+0x19c>
 801ae18:	f04f 0a00 	mov.w	sl, #0
 801ae1c:	9703      	str	r7, [sp, #12]
 801ae1e:	4655      	mov	r5, sl
 801ae20:	e016      	b.n	801ae50 <ai_platform_api_get_network_report+0x13c>
 801ae22:	2201      	movs	r2, #1
 801ae24:	f847 200e 	str.w	r2, [r7, lr]
 801ae28:	69b2      	ldr	r2, [r6, #24]
 801ae2a:	6852      	ldr	r2, [r2, #4]
 801ae2c:	3501      	adds	r5, #1
 801ae2e:	60a3      	str	r3, [r4, #8]
 801ae30:	f04f 0301 	mov.w	r3, #1
 801ae34:	f10a 0a1c 	add.w	sl, sl, #28
 801ae38:	6122      	str	r2, [r4, #16]
 801ae3a:	7523      	strb	r3, [r4, #20]
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	f8c4 8018 	str.w	r8, [r4, #24]
 801ae42:	60e3      	str	r3, [r4, #12]
 801ae44:	6963      	ldr	r3, [r4, #20]
 801ae46:	f36b 231f 	bfi	r3, fp, #8, #24
 801ae4a:	e9c4 0100 	strd	r0, r1, [r4]
 801ae4e:	6163      	str	r3, [r4, #20]
 801ae50:	f8b9 3000 	ldrh.w	r3, [r9]
 801ae54:	b2aa      	uxth	r2, r5
 801ae56:	42ab      	cmp	r3, r5
 801ae58:	d95e      	bls.n	801af18 <ai_platform_api_get_network_report+0x204>
 801ae5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d05a      	beq.n	801af18 <ai_platform_api_get_network_report+0x204>
 801ae62:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801ae66:	2e00      	cmp	r6, #0
 801ae68:	d056      	beq.n	801af18 <ai_platform_api_get_network_report+0x204>
 801ae6a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ae6e:	69b2      	ldr	r2, [r6, #24]
 801ae70:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801ae74:	6810      	ldr	r0, [r2, #0]
 801ae76:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801ae7a:	68b3      	ldr	r3, [r6, #8]
 801ae7c:	4454      	add	r4, sl
 801ae7e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 801ae82:	f007 f92b 	bl	80220dc <ai_array_to_buffer_fmt>
 801ae86:	69b2      	ldr	r2, [r6, #24]
 801ae88:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 801ae8c:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 801ae90:	6891      	ldr	r1, [r2, #8]
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	d0c9      	beq.n	801ae2a <ai_platform_api_get_network_report+0x116>
 801ae96:	2200      	movs	r2, #0
 801ae98:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 801ae9c:	6832      	ldr	r2, [r6, #0]
 801ae9e:	605a      	str	r2, [r3, #4]
 801aea0:	b112      	cbz	r2, 801aea8 <ai_platform_api_get_network_report+0x194>
 801aea2:	8852      	ldrh	r2, [r2, #2]
 801aea4:	2a00      	cmp	r2, #0
 801aea6:	d1bc      	bne.n	801ae22 <ai_platform_api_get_network_report+0x10e>
 801aea8:	69b2      	ldr	r2, [r6, #24]
 801aeaa:	2300      	movs	r3, #0
 801aeac:	e7bd      	b.n	801ae2a <ai_platform_api_get_network_report+0x116>
 801aeae:	e7fe      	b.n	801aeae <ai_platform_api_get_network_report+0x19a>
 801aeb0:	9901      	ldr	r1, [sp, #4]
 801aeb2:	2300      	movs	r3, #0
 801aeb4:	2218      	movs	r2, #24
 801aeb6:	f107 0010 	add.w	r0, r7, #16
 801aeba:	634b      	str	r3, [r1, #52]	; 0x34
 801aebc:	860b      	strh	r3, [r1, #48]	; 0x30
 801aebe:	2112      	movs	r1, #18
 801aec0:	f001 fe44 	bl	801cb4c <core_set_error>
 801aec4:	9802      	ldr	r0, [sp, #8]
 801aec6:	b009      	add	sp, #36	; 0x24
 801aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aecc:	4a1f      	ldr	r2, [pc, #124]	; (801af4c <ai_platform_api_get_network_report+0x238>)
 801aece:	2301      	movs	r3, #1
 801aed0:	6093      	str	r3, [r2, #8]
 801aed2:	6893      	ldr	r3, [r2, #8]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d1fc      	bne.n	801aed2 <ai_platform_api_get_network_report+0x1be>
 801aed8:	4b1d      	ldr	r3, [pc, #116]	; (801af50 <ai_platform_api_get_network_report+0x23c>)
 801aeda:	6013      	str	r3, [r2, #0]
 801aedc:	4b1d      	ldr	r3, [pc, #116]	; (801af54 <ai_platform_api_get_network_report+0x240>)
 801aede:	6812      	ldr	r2, [r2, #0]
 801aee0:	429a      	cmp	r2, r3
 801aee2:	f43f af77 	beq.w	801add4 <ai_platform_api_get_network_report+0xc0>
 801aee6:	e7fe      	b.n	801aee6 <ai_platform_api_get_network_report+0x1d2>
 801aee8:	2300      	movs	r3, #0
 801aeea:	9302      	str	r3, [sp, #8]
 801aeec:	9802      	ldr	r0, [sp, #8]
 801aeee:	b009      	add	sp, #36	; 0x24
 801aef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aef4:	4a18      	ldr	r2, [pc, #96]	; (801af58 <ai_platform_api_get_network_report+0x244>)
 801aef6:	2301      	movs	r3, #1
 801aef8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801aefc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801af00:	2b00      	cmp	r3, #0
 801af02:	d1fb      	bne.n	801aefc <ai_platform_api_get_network_report+0x1e8>
 801af04:	4b12      	ldr	r3, [pc, #72]	; (801af50 <ai_platform_api_get_network_report+0x23c>)
 801af06:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801af0a:	4b12      	ldr	r3, [pc, #72]	; (801af54 <ai_platform_api_get_network_report+0x240>)
 801af0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801af10:	429a      	cmp	r2, r3
 801af12:	f43f af5f 	beq.w	801add4 <ai_platform_api_get_network_report+0xc0>
 801af16:	e7fe      	b.n	801af16 <ai_platform_api_get_network_report+0x202>
 801af18:	9f03      	ldr	r7, [sp, #12]
 801af1a:	2a00      	cmp	r2, #0
 801af1c:	d0c8      	beq.n	801aeb0 <ai_platform_api_get_network_report+0x19c>
 801af1e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801af22:	9901      	ldr	r1, [sp, #4]
 801af24:	685b      	ldr	r3, [r3, #4]
 801af26:	860a      	strh	r2, [r1, #48]	; 0x30
 801af28:	634b      	str	r3, [r1, #52]	; 0x34
 801af2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801af2c:	2b01      	cmp	r3, #1
 801af2e:	f240 80c5 	bls.w	801b0bc <ai_platform_api_get_network_report+0x3a8>
 801af32:	f04f 0a00 	mov.w	sl, #0
 801af36:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 801af3a:	9703      	str	r7, [sp, #12]
 801af3c:	4655      	mov	r5, sl
 801af3e:	e024      	b.n	801af8a <ai_platform_api_get_network_report+0x276>
 801af40:	a1c00100 	.word	0xa1c00100
 801af44:	e0042000 	.word	0xe0042000
 801af48:	5c001000 	.word	0x5c001000
 801af4c:	40023000 	.word	0x40023000
 801af50:	f407a5c2 	.word	0xf407a5c2
 801af54:	b5e8b5cd 	.word	0xb5e8b5cd
 801af58:	58024000 	.word	0x58024000
 801af5c:	2201      	movs	r2, #1
 801af5e:	f847 200e 	str.w	r2, [r7, lr]
 801af62:	69b2      	ldr	r2, [r6, #24]
 801af64:	6852      	ldr	r2, [r2, #4]
 801af66:	3501      	adds	r5, #1
 801af68:	60a3      	str	r3, [r4, #8]
 801af6a:	f04f 0301 	mov.w	r3, #1
 801af6e:	f10a 0a1c 	add.w	sl, sl, #28
 801af72:	6122      	str	r2, [r4, #16]
 801af74:	7523      	strb	r3, [r4, #20]
 801af76:	2300      	movs	r3, #0
 801af78:	f8c4 8018 	str.w	r8, [r4, #24]
 801af7c:	60e3      	str	r3, [r4, #12]
 801af7e:	6963      	ldr	r3, [r4, #20]
 801af80:	f36b 231f 	bfi	r3, fp, #8, #24
 801af84:	e9c4 0100 	strd	r0, r1, [r4]
 801af88:	6163      	str	r3, [r4, #20]
 801af8a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801af8e:	b2aa      	uxth	r2, r5
 801af90:	42ab      	cmp	r3, r5
 801af92:	d927      	bls.n	801afe4 <ai_platform_api_get_network_report+0x2d0>
 801af94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801af98:	b323      	cbz	r3, 801afe4 <ai_platform_api_get_network_report+0x2d0>
 801af9a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801af9e:	b30e      	cbz	r6, 801afe4 <ai_platform_api_get_network_report+0x2d0>
 801afa0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801afa4:	69b2      	ldr	r2, [r6, #24]
 801afa6:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801afaa:	6810      	ldr	r0, [r2, #0]
 801afac:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801afb0:	68b3      	ldr	r3, [r6, #8]
 801afb2:	4454      	add	r4, sl
 801afb4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 801afb8:	f007 f890 	bl	80220dc <ai_array_to_buffer_fmt>
 801afbc:	69b2      	ldr	r2, [r6, #24]
 801afbe:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 801afc2:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 801afc6:	6891      	ldr	r1, [r2, #8]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d0cb      	beq.n	801af64 <ai_platform_api_get_network_report+0x250>
 801afcc:	2200      	movs	r2, #0
 801afce:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 801afd2:	6832      	ldr	r2, [r6, #0]
 801afd4:	605a      	str	r2, [r3, #4]
 801afd6:	b112      	cbz	r2, 801afde <ai_platform_api_get_network_report+0x2ca>
 801afd8:	8852      	ldrh	r2, [r2, #2]
 801afda:	2a00      	cmp	r2, #0
 801afdc:	d1be      	bne.n	801af5c <ai_platform_api_get_network_report+0x248>
 801afde:	69b2      	ldr	r2, [r6, #24]
 801afe0:	2300      	movs	r3, #0
 801afe2:	e7bf      	b.n	801af64 <ai_platform_api_get_network_report+0x250>
 801afe4:	9f03      	ldr	r7, [sp, #12]
 801afe6:	2a00      	cmp	r2, #0
 801afe8:	d068      	beq.n	801b0bc <ai_platform_api_get_network_report+0x3a8>
 801afea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801afee:	f107 0524 	add.w	r5, r7, #36	; 0x24
 801aff2:	9901      	ldr	r1, [sp, #4]
 801aff4:	685b      	ldr	r3, [r3, #4]
 801aff6:	4628      	mov	r0, r5
 801aff8:	864a      	strh	r2, [r1, #50]	; 0x32
 801affa:	638b      	str	r3, [r1, #56]	; 0x38
 801affc:	f7ff faee 	bl	801a5dc <ai_buffer_array_sane>
 801b000:	9002      	str	r0, [sp, #8]
 801b002:	b960      	cbnz	r0, 801b01e <ai_platform_api_get_network_report+0x30a>
 801b004:	4628      	mov	r0, r5
 801b006:	f7ff fae9 	bl	801a5dc <ai_buffer_array_sane>
 801b00a:	b140      	cbz	r0, 801b01e <ai_platform_api_get_network_report+0x30a>
 801b00c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b00e:	b133      	cbz	r3, 801b01e <ai_platform_api_get_network_report+0x30a>
 801b010:	2213      	movs	r2, #19
 801b012:	2111      	movs	r1, #17
 801b014:	f107 0010 	add.w	r0, r7, #16
 801b018:	f001 fd98 	bl	801cb4c <core_set_error>
 801b01c:	e752      	b.n	801aec4 <ai_platform_api_get_network_report+0x1b0>
 801b01e:	f107 061c 	add.w	r6, r7, #28
 801b022:	4630      	mov	r0, r6
 801b024:	f7ff fada 	bl	801a5dc <ai_buffer_array_sane>
 801b028:	9002      	str	r0, [sp, #8]
 801b02a:	b960      	cbnz	r0, 801b046 <ai_platform_api_get_network_report+0x332>
 801b02c:	4630      	mov	r0, r6
 801b02e:	f7ff fad5 	bl	801a5dc <ai_buffer_array_sane>
 801b032:	b140      	cbz	r0, 801b046 <ai_platform_api_get_network_report+0x332>
 801b034:	8bfb      	ldrh	r3, [r7, #30]
 801b036:	b133      	cbz	r3, 801b046 <ai_platform_api_get_network_report+0x332>
 801b038:	2212      	movs	r2, #18
 801b03a:	2111      	movs	r1, #17
 801b03c:	f107 0010 	add.w	r0, r7, #16
 801b040:	f001 fd84 	bl	801cb4c <core_set_error>
 801b044:	e73e      	b.n	801aec4 <ai_platform_api_get_network_report+0x1b0>
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	f46f 688a 	mvn.w	r8, #1104	; 0x450
 801b04c:	9a01      	ldr	r2, [sp, #4]
 801b04e:	6793      	str	r3, [r2, #120]	; 0x78
 801b050:	f7ff face 	bl	801a5f0 <_ai_platform_acquire_crc>
 801b054:	4b88      	ldr	r3, [pc, #544]	; (801b278 <ai_platform_api_get_network_report+0x564>)
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b05c:	eb03 0208 	add.w	r2, r3, r8
 801b060:	2a01      	cmp	r2, #1
 801b062:	d93d      	bls.n	801b0e0 <ai_platform_api_get_network_report+0x3cc>
 801b064:	f240 4249 	movw	r2, #1097	; 0x449
 801b068:	4293      	cmp	r3, r2
 801b06a:	d039      	beq.n	801b0e0 <ai_platform_api_get_network_report+0x3cc>
 801b06c:	4b83      	ldr	r3, [pc, #524]	; (801b27c <ai_platform_api_get_network_report+0x568>)
 801b06e:	681a      	ldr	r2, [r3, #0]
 801b070:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b074:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b078:	d03f      	beq.n	801b0fa <ai_platform_api_get_network_report+0x3e6>
 801b07a:	681a      	ldr	r2, [r3, #0]
 801b07c:	f240 4183 	movw	r1, #1155	; 0x483
 801b080:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b084:	428a      	cmp	r2, r1
 801b086:	f000 80e4 	beq.w	801b252 <ai_platform_api_get_network_report+0x53e>
 801b08a:	681a      	ldr	r2, [r3, #0]
 801b08c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b090:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 801b094:	f000 814a 	beq.w	801b32c <ai_platform_api_get_network_report+0x618>
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d13c      	bne.n	801b11c <ai_platform_api_get_network_report+0x408>
 801b0a2:	4b77      	ldr	r3, [pc, #476]	; (801b280 <ai_platform_api_get_network_report+0x56c>)
 801b0a4:	2201      	movs	r2, #1
 801b0a6:	609a      	str	r2, [r3, #8]
 801b0a8:	689a      	ldr	r2, [r3, #8]
 801b0aa:	2a00      	cmp	r2, #0
 801b0ac:	d1fc      	bne.n	801b0a8 <ai_platform_api_get_network_report+0x394>
 801b0ae:	4a75      	ldr	r2, [pc, #468]	; (801b284 <ai_platform_api_get_network_report+0x570>)
 801b0b0:	601a      	str	r2, [r3, #0]
 801b0b2:	681a      	ldr	r2, [r3, #0]
 801b0b4:	4b74      	ldr	r3, [pc, #464]	; (801b288 <ai_platform_api_get_network_report+0x574>)
 801b0b6:	429a      	cmp	r2, r3
 801b0b8:	d030      	beq.n	801b11c <ai_platform_api_get_network_report+0x408>
 801b0ba:	e7fe      	b.n	801b0ba <ai_platform_api_get_network_report+0x3a6>
 801b0bc:	9901      	ldr	r1, [sp, #4]
 801b0be:	2300      	movs	r3, #0
 801b0c0:	2218      	movs	r2, #24
 801b0c2:	f107 0010 	add.w	r0, r7, #16
 801b0c6:	638b      	str	r3, [r1, #56]	; 0x38
 801b0c8:	864b      	strh	r3, [r1, #50]	; 0x32
 801b0ca:	2113      	movs	r1, #19
 801b0cc:	f001 fd3e 	bl	801cb4c <core_set_error>
 801b0d0:	e6f8      	b.n	801aec4 <ai_platform_api_get_network_report+0x1b0>
 801b0d2:	2218      	movs	r2, #24
 801b0d4:	2111      	movs	r1, #17
 801b0d6:	f107 0010 	add.w	r0, r7, #16
 801b0da:	f001 fd37 	bl	801cb4c <core_set_error>
 801b0de:	e6f1      	b.n	801aec4 <ai_platform_api_get_network_report+0x1b0>
 801b0e0:	4a67      	ldr	r2, [pc, #412]	; (801b280 <ai_platform_api_get_network_report+0x56c>)
 801b0e2:	2301      	movs	r3, #1
 801b0e4:	6093      	str	r3, [r2, #8]
 801b0e6:	6893      	ldr	r3, [r2, #8]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d1fc      	bne.n	801b0e6 <ai_platform_api_get_network_report+0x3d2>
 801b0ec:	4b65      	ldr	r3, [pc, #404]	; (801b284 <ai_platform_api_get_network_report+0x570>)
 801b0ee:	6013      	str	r3, [r2, #0]
 801b0f0:	4b65      	ldr	r3, [pc, #404]	; (801b288 <ai_platform_api_get_network_report+0x574>)
 801b0f2:	6812      	ldr	r2, [r2, #0]
 801b0f4:	429a      	cmp	r2, r3
 801b0f6:	d011      	beq.n	801b11c <ai_platform_api_get_network_report+0x408>
 801b0f8:	e7fe      	b.n	801b0f8 <ai_platform_api_get_network_report+0x3e4>
 801b0fa:	4b64      	ldr	r3, [pc, #400]	; (801b28c <ai_platform_api_get_network_report+0x578>)
 801b0fc:	2201      	movs	r2, #1
 801b0fe:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801b102:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801b106:	2a00      	cmp	r2, #0
 801b108:	d1fb      	bne.n	801b102 <ai_platform_api_get_network_report+0x3ee>
 801b10a:	4a5e      	ldr	r2, [pc, #376]	; (801b284 <ai_platform_api_get_network_report+0x570>)
 801b10c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801b110:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801b114:	4b5c      	ldr	r3, [pc, #368]	; (801b288 <ai_platform_api_get_network_report+0x574>)
 801b116:	429a      	cmp	r2, r3
 801b118:	f040 809a 	bne.w	801b250 <ai_platform_api_get_network_report+0x53c>
 801b11c:	f7ff fa6a 	bl	801a5f4 <_ai_platform_release_crc>
 801b120:	4b5b      	ldr	r3, [pc, #364]	; (801b290 <ai_platform_api_get_network_report+0x57c>)
 801b122:	9a01      	ldr	r2, [sp, #4]
 801b124:	6113      	str	r3, [r2, #16]
 801b126:	f7ff fa63 	bl	801a5f0 <_ai_platform_acquire_crc>
 801b12a:	4b53      	ldr	r3, [pc, #332]	; (801b278 <ai_platform_api_get_network_report+0x564>)
 801b12c:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b136:	eb03 020e 	add.w	r2, r3, lr
 801b13a:	2a01      	cmp	r2, #1
 801b13c:	d92b      	bls.n	801b196 <ai_platform_api_get_network_report+0x482>
 801b13e:	f240 4249 	movw	r2, #1097	; 0x449
 801b142:	4293      	cmp	r3, r2
 801b144:	d027      	beq.n	801b196 <ai_platform_api_get_network_report+0x482>
 801b146:	4b4d      	ldr	r3, [pc, #308]	; (801b27c <ai_platform_api_get_network_report+0x568>)
 801b148:	681a      	ldr	r2, [r3, #0]
 801b14a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b14e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b152:	d02d      	beq.n	801b1b0 <ai_platform_api_get_network_report+0x49c>
 801b154:	681a      	ldr	r2, [r3, #0]
 801b156:	f240 4183 	movw	r1, #1155	; 0x483
 801b15a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b15e:	428a      	cmp	r2, r1
 801b160:	f000 8111 	beq.w	801b386 <ai_platform_api_get_network_report+0x672>
 801b164:	681a      	ldr	r2, [r3, #0]
 801b166:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b16a:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 801b16e:	f000 80fc 	beq.w	801b36a <ai_platform_api_get_network_report+0x656>
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d12a      	bne.n	801b1d2 <ai_platform_api_get_network_report+0x4be>
 801b17c:	4b40      	ldr	r3, [pc, #256]	; (801b280 <ai_platform_api_get_network_report+0x56c>)
 801b17e:	2201      	movs	r2, #1
 801b180:	609a      	str	r2, [r3, #8]
 801b182:	689a      	ldr	r2, [r3, #8]
 801b184:	2a00      	cmp	r2, #0
 801b186:	d1fc      	bne.n	801b182 <ai_platform_api_get_network_report+0x46e>
 801b188:	4a3e      	ldr	r2, [pc, #248]	; (801b284 <ai_platform_api_get_network_report+0x570>)
 801b18a:	601a      	str	r2, [r3, #0]
 801b18c:	681a      	ldr	r2, [r3, #0]
 801b18e:	4b3e      	ldr	r3, [pc, #248]	; (801b288 <ai_platform_api_get_network_report+0x574>)
 801b190:	429a      	cmp	r2, r3
 801b192:	d01e      	beq.n	801b1d2 <ai_platform_api_get_network_report+0x4be>
 801b194:	e7fe      	b.n	801b194 <ai_platform_api_get_network_report+0x480>
 801b196:	4a3a      	ldr	r2, [pc, #232]	; (801b280 <ai_platform_api_get_network_report+0x56c>)
 801b198:	2301      	movs	r3, #1
 801b19a:	6093      	str	r3, [r2, #8]
 801b19c:	6893      	ldr	r3, [r2, #8]
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d1fc      	bne.n	801b19c <ai_platform_api_get_network_report+0x488>
 801b1a2:	4b38      	ldr	r3, [pc, #224]	; (801b284 <ai_platform_api_get_network_report+0x570>)
 801b1a4:	6013      	str	r3, [r2, #0]
 801b1a6:	4b38      	ldr	r3, [pc, #224]	; (801b288 <ai_platform_api_get_network_report+0x574>)
 801b1a8:	6812      	ldr	r2, [r2, #0]
 801b1aa:	429a      	cmp	r2, r3
 801b1ac:	d011      	beq.n	801b1d2 <ai_platform_api_get_network_report+0x4be>
 801b1ae:	e7fe      	b.n	801b1ae <ai_platform_api_get_network_report+0x49a>
 801b1b0:	4b36      	ldr	r3, [pc, #216]	; (801b28c <ai_platform_api_get_network_report+0x578>)
 801b1b2:	2201      	movs	r2, #1
 801b1b4:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801b1b8:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801b1bc:	2a00      	cmp	r2, #0
 801b1be:	d1fb      	bne.n	801b1b8 <ai_platform_api_get_network_report+0x4a4>
 801b1c0:	4a30      	ldr	r2, [pc, #192]	; (801b284 <ai_platform_api_get_network_report+0x570>)
 801b1c2:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801b1c6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801b1ca:	4b2f      	ldr	r3, [pc, #188]	; (801b288 <ai_platform_api_get_network_report+0x574>)
 801b1cc:	429a      	cmp	r2, r3
 801b1ce:	f040 80ac 	bne.w	801b32a <ai_platform_api_get_network_report+0x616>
 801b1d2:	f7ff fa0f 	bl	801a5f4 <_ai_platform_release_crc>
 801b1d6:	f240 3307 	movw	r3, #775	; 0x307
 801b1da:	9a01      	ldr	r2, [sp, #4]
 801b1dc:	6153      	str	r3, [r2, #20]
 801b1de:	f7ff fa07 	bl	801a5f0 <_ai_platform_acquire_crc>
 801b1e2:	4b25      	ldr	r3, [pc, #148]	; (801b278 <ai_platform_api_get_network_report+0x564>)
 801b1e4:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b1ee:	eb03 020c 	add.w	r2, r3, ip
 801b1f2:	2a01      	cmp	r2, #1
 801b1f4:	d94e      	bls.n	801b294 <ai_platform_api_get_network_report+0x580>
 801b1f6:	f240 4249 	movw	r2, #1097	; 0x449
 801b1fa:	4293      	cmp	r3, r2
 801b1fc:	d04a      	beq.n	801b294 <ai_platform_api_get_network_report+0x580>
 801b1fe:	4b1f      	ldr	r3, [pc, #124]	; (801b27c <ai_platform_api_get_network_report+0x568>)
 801b200:	681a      	ldr	r2, [r3, #0]
 801b202:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b206:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b20a:	f000 809d 	beq.w	801b348 <ai_platform_api_get_network_report+0x634>
 801b20e:	681a      	ldr	r2, [r3, #0]
 801b210:	f240 4183 	movw	r1, #1155	; 0x483
 801b214:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b218:	428a      	cmp	r2, r1
 801b21a:	f000 80fe 	beq.w	801b41a <ai_platform_api_get_network_report+0x706>
 801b21e:	681a      	ldr	r2, [r3, #0]
 801b220:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b224:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 801b228:	f000 80e9 	beq.w	801b3fe <ai_platform_api_get_network_report+0x6ea>
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b232:	2b00      	cmp	r3, #0
 801b234:	d13a      	bne.n	801b2ac <ai_platform_api_get_network_report+0x598>
 801b236:	4b12      	ldr	r3, [pc, #72]	; (801b280 <ai_platform_api_get_network_report+0x56c>)
 801b238:	2201      	movs	r2, #1
 801b23a:	609a      	str	r2, [r3, #8]
 801b23c:	689a      	ldr	r2, [r3, #8]
 801b23e:	2a00      	cmp	r2, #0
 801b240:	d1fc      	bne.n	801b23c <ai_platform_api_get_network_report+0x528>
 801b242:	4a10      	ldr	r2, [pc, #64]	; (801b284 <ai_platform_api_get_network_report+0x570>)
 801b244:	601a      	str	r2, [r3, #0]
 801b246:	681a      	ldr	r2, [r3, #0]
 801b248:	4b0f      	ldr	r3, [pc, #60]	; (801b288 <ai_platform_api_get_network_report+0x574>)
 801b24a:	429a      	cmp	r2, r3
 801b24c:	d02e      	beq.n	801b2ac <ai_platform_api_get_network_report+0x598>
 801b24e:	e7fe      	b.n	801b24e <ai_platform_api_get_network_report+0x53a>
 801b250:	e7fe      	b.n	801b250 <ai_platform_api_get_network_report+0x53c>
 801b252:	4b0e      	ldr	r3, [pc, #56]	; (801b28c <ai_platform_api_get_network_report+0x578>)
 801b254:	2201      	movs	r2, #1
 801b256:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801b25a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801b25e:	2a00      	cmp	r2, #0
 801b260:	d1fb      	bne.n	801b25a <ai_platform_api_get_network_report+0x546>
 801b262:	4a08      	ldr	r2, [pc, #32]	; (801b284 <ai_platform_api_get_network_report+0x570>)
 801b264:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801b268:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801b26c:	4b06      	ldr	r3, [pc, #24]	; (801b288 <ai_platform_api_get_network_report+0x574>)
 801b26e:	429a      	cmp	r2, r3
 801b270:	f43f af54 	beq.w	801b11c <ai_platform_api_get_network_report+0x408>
 801b274:	e7fe      	b.n	801b274 <ai_platform_api_get_network_report+0x560>
 801b276:	bf00      	nop
 801b278:	e0042000 	.word	0xe0042000
 801b27c:	5c001000 	.word	0x5c001000
 801b280:	40023000 	.word	0x40023000
 801b284:	f407a5c2 	.word	0xf407a5c2
 801b288:	b5e8b5cd 	.word	0xb5e8b5cd
 801b28c:	58024000 	.word	0x58024000
 801b290:	08025e00 	.word	0x08025e00
 801b294:	4ba5      	ldr	r3, [pc, #660]	; (801b52c <ai_platform_api_get_network_report+0x818>)
 801b296:	2201      	movs	r2, #1
 801b298:	609a      	str	r2, [r3, #8]
 801b29a:	689a      	ldr	r2, [r3, #8]
 801b29c:	2a00      	cmp	r2, #0
 801b29e:	d1fc      	bne.n	801b29a <ai_platform_api_get_network_report+0x586>
 801b2a0:	4aa3      	ldr	r2, [pc, #652]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b2a2:	601a      	str	r2, [r3, #0]
 801b2a4:	681a      	ldr	r2, [r3, #0]
 801b2a6:	4ba3      	ldr	r3, [pc, #652]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b2a8:	429a      	cmp	r2, r3
 801b2aa:	d13d      	bne.n	801b328 <ai_platform_api_get_network_report+0x614>
 801b2ac:	f7ff f9a2 	bl	801a5f4 <_ai_platform_release_crc>
 801b2b0:	f240 2301 	movw	r3, #513	; 0x201
 801b2b4:	9a01      	ldr	r2, [sp, #4]
 801b2b6:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 801b2ba:	6253      	str	r3, [r2, #36]	; 0x24
 801b2bc:	f7ff f998 	bl	801a5f0 <_ai_platform_acquire_crc>
 801b2c0:	4b9d      	ldr	r3, [pc, #628]	; (801b538 <ai_platform_api_get_network_report+0x824>)
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b2c8:	191a      	adds	r2, r3, r4
 801b2ca:	2a01      	cmp	r2, #1
 801b2cc:	d96d      	bls.n	801b3aa <ai_platform_api_get_network_report+0x696>
 801b2ce:	f240 4249 	movw	r2, #1097	; 0x449
 801b2d2:	4293      	cmp	r3, r2
 801b2d4:	d069      	beq.n	801b3aa <ai_platform_api_get_network_report+0x696>
 801b2d6:	4b99      	ldr	r3, [pc, #612]	; (801b53c <ai_platform_api_get_network_report+0x828>)
 801b2d8:	681a      	ldr	r2, [r3, #0]
 801b2da:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b2de:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b2e2:	f000 80ca 	beq.w	801b47a <ai_platform_api_get_network_report+0x766>
 801b2e6:	681a      	ldr	r2, [r3, #0]
 801b2e8:	f240 4183 	movw	r1, #1155	; 0x483
 801b2ec:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b2f0:	428a      	cmp	r2, r1
 801b2f2:	f000 80b1 	beq.w	801b458 <ai_platform_api_get_network_report+0x744>
 801b2f6:	681a      	ldr	r2, [r3, #0]
 801b2f8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b2fc:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 801b300:	f000 809d 	beq.w	801b43e <ai_platform_api_get_network_report+0x72a>
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d159      	bne.n	801b3c2 <ai_platform_api_get_network_report+0x6ae>
 801b30e:	4b87      	ldr	r3, [pc, #540]	; (801b52c <ai_platform_api_get_network_report+0x818>)
 801b310:	2201      	movs	r2, #1
 801b312:	609a      	str	r2, [r3, #8]
 801b314:	689a      	ldr	r2, [r3, #8]
 801b316:	2a00      	cmp	r2, #0
 801b318:	d1fc      	bne.n	801b314 <ai_platform_api_get_network_report+0x600>
 801b31a:	4a85      	ldr	r2, [pc, #532]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b31c:	601a      	str	r2, [r3, #0]
 801b31e:	681a      	ldr	r2, [r3, #0]
 801b320:	4b84      	ldr	r3, [pc, #528]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b322:	429a      	cmp	r2, r3
 801b324:	d04d      	beq.n	801b3c2 <ai_platform_api_get_network_report+0x6ae>
 801b326:	e7fe      	b.n	801b326 <ai_platform_api_get_network_report+0x612>
 801b328:	e7fe      	b.n	801b328 <ai_platform_api_get_network_report+0x614>
 801b32a:	e7fe      	b.n	801b32a <ai_platform_api_get_network_report+0x616>
 801b32c:	4b7f      	ldr	r3, [pc, #508]	; (801b52c <ai_platform_api_get_network_report+0x818>)
 801b32e:	2201      	movs	r2, #1
 801b330:	609a      	str	r2, [r3, #8]
 801b332:	689a      	ldr	r2, [r3, #8]
 801b334:	2a00      	cmp	r2, #0
 801b336:	d1fc      	bne.n	801b332 <ai_platform_api_get_network_report+0x61e>
 801b338:	4a7d      	ldr	r2, [pc, #500]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b33a:	601a      	str	r2, [r3, #0]
 801b33c:	681a      	ldr	r2, [r3, #0]
 801b33e:	4b7d      	ldr	r3, [pc, #500]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b340:	429a      	cmp	r2, r3
 801b342:	f43f aeeb 	beq.w	801b11c <ai_platform_api_get_network_report+0x408>
 801b346:	e7fe      	b.n	801b346 <ai_platform_api_get_network_report+0x632>
 801b348:	4b7d      	ldr	r3, [pc, #500]	; (801b540 <ai_platform_api_get_network_report+0x82c>)
 801b34a:	2201      	movs	r2, #1
 801b34c:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801b350:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801b354:	2a00      	cmp	r2, #0
 801b356:	d1fb      	bne.n	801b350 <ai_platform_api_get_network_report+0x63c>
 801b358:	4a75      	ldr	r2, [pc, #468]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b35a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801b35e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801b362:	4b74      	ldr	r3, [pc, #464]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b364:	429a      	cmp	r2, r3
 801b366:	d0a1      	beq.n	801b2ac <ai_platform_api_get_network_report+0x598>
 801b368:	e7fe      	b.n	801b368 <ai_platform_api_get_network_report+0x654>
 801b36a:	4b70      	ldr	r3, [pc, #448]	; (801b52c <ai_platform_api_get_network_report+0x818>)
 801b36c:	2201      	movs	r2, #1
 801b36e:	609a      	str	r2, [r3, #8]
 801b370:	689a      	ldr	r2, [r3, #8]
 801b372:	2a00      	cmp	r2, #0
 801b374:	d1fc      	bne.n	801b370 <ai_platform_api_get_network_report+0x65c>
 801b376:	4a6e      	ldr	r2, [pc, #440]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b378:	601a      	str	r2, [r3, #0]
 801b37a:	681a      	ldr	r2, [r3, #0]
 801b37c:	4b6d      	ldr	r3, [pc, #436]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b37e:	429a      	cmp	r2, r3
 801b380:	f43f af27 	beq.w	801b1d2 <ai_platform_api_get_network_report+0x4be>
 801b384:	e7fe      	b.n	801b384 <ai_platform_api_get_network_report+0x670>
 801b386:	4b6e      	ldr	r3, [pc, #440]	; (801b540 <ai_platform_api_get_network_report+0x82c>)
 801b388:	2201      	movs	r2, #1
 801b38a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801b38e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801b392:	2a00      	cmp	r2, #0
 801b394:	d1fb      	bne.n	801b38e <ai_platform_api_get_network_report+0x67a>
 801b396:	4a66      	ldr	r2, [pc, #408]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b398:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801b39c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801b3a0:	4b64      	ldr	r3, [pc, #400]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b3a2:	429a      	cmp	r2, r3
 801b3a4:	f43f af15 	beq.w	801b1d2 <ai_platform_api_get_network_report+0x4be>
 801b3a8:	e7fe      	b.n	801b3a8 <ai_platform_api_get_network_report+0x694>
 801b3aa:	4b60      	ldr	r3, [pc, #384]	; (801b52c <ai_platform_api_get_network_report+0x818>)
 801b3ac:	2201      	movs	r2, #1
 801b3ae:	609a      	str	r2, [r3, #8]
 801b3b0:	689a      	ldr	r2, [r3, #8]
 801b3b2:	2a00      	cmp	r2, #0
 801b3b4:	d1fc      	bne.n	801b3b0 <ai_platform_api_get_network_report+0x69c>
 801b3b6:	4a5e      	ldr	r2, [pc, #376]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b3b8:	601a      	str	r2, [r3, #0]
 801b3ba:	681a      	ldr	r2, [r3, #0]
 801b3bc:	4b5d      	ldr	r3, [pc, #372]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b3be:	429a      	cmp	r2, r3
 801b3c0:	d11c      	bne.n	801b3fc <ai_platform_api_get_network_report+0x6e8>
 801b3c2:	f7ff f917 	bl	801a5f4 <_ai_platform_release_crc>
 801b3c6:	9c01      	ldr	r4, [sp, #4]
 801b3c8:	f240 5301 	movw	r3, #1281	; 0x501
 801b3cc:	62a3      	str	r3, [r4, #40]	; 0x28
 801b3ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801b3d0:	f006 fe5c 	bl	802208c <ai_platform_version_get>
 801b3d4:	4b5b      	ldr	r3, [pc, #364]	; (801b544 <ai_platform_api_get_network_report+0x830>)
 801b3d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801b3d8:	6220      	str	r0, [r4, #32]
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	d15e      	bne.n	801b49c <ai_platform_api_get_network_report+0x788>
 801b3de:	f104 0248 	add.w	r2, r4, #72	; 0x48
 801b3e2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801b3e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b3ea:	e882 0003 	stmia.w	r2, {r0, r1}
 801b3ee:	2201      	movs	r2, #1
 801b3f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b3f4:	9202      	str	r2, [sp, #8]
 801b3f6:	e883 0003 	stmia.w	r3, {r0, r1}
 801b3fa:	e563      	b.n	801aec4 <ai_platform_api_get_network_report+0x1b0>
 801b3fc:	e7fe      	b.n	801b3fc <ai_platform_api_get_network_report+0x6e8>
 801b3fe:	4b4b      	ldr	r3, [pc, #300]	; (801b52c <ai_platform_api_get_network_report+0x818>)
 801b400:	2201      	movs	r2, #1
 801b402:	609a      	str	r2, [r3, #8]
 801b404:	689a      	ldr	r2, [r3, #8]
 801b406:	2a00      	cmp	r2, #0
 801b408:	d1fc      	bne.n	801b404 <ai_platform_api_get_network_report+0x6f0>
 801b40a:	4a49      	ldr	r2, [pc, #292]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b40c:	601a      	str	r2, [r3, #0]
 801b40e:	681a      	ldr	r2, [r3, #0]
 801b410:	4b48      	ldr	r3, [pc, #288]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b412:	429a      	cmp	r2, r3
 801b414:	f43f af4a 	beq.w	801b2ac <ai_platform_api_get_network_report+0x598>
 801b418:	e7fe      	b.n	801b418 <ai_platform_api_get_network_report+0x704>
 801b41a:	4b49      	ldr	r3, [pc, #292]	; (801b540 <ai_platform_api_get_network_report+0x82c>)
 801b41c:	2201      	movs	r2, #1
 801b41e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801b422:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801b426:	2a00      	cmp	r2, #0
 801b428:	d1fb      	bne.n	801b422 <ai_platform_api_get_network_report+0x70e>
 801b42a:	4a41      	ldr	r2, [pc, #260]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b42c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801b430:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801b434:	4b3f      	ldr	r3, [pc, #252]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b436:	429a      	cmp	r2, r3
 801b438:	f43f af38 	beq.w	801b2ac <ai_platform_api_get_network_report+0x598>
 801b43c:	e7fe      	b.n	801b43c <ai_platform_api_get_network_report+0x728>
 801b43e:	4b3b      	ldr	r3, [pc, #236]	; (801b52c <ai_platform_api_get_network_report+0x818>)
 801b440:	2201      	movs	r2, #1
 801b442:	609a      	str	r2, [r3, #8]
 801b444:	689a      	ldr	r2, [r3, #8]
 801b446:	2a00      	cmp	r2, #0
 801b448:	d1fc      	bne.n	801b444 <ai_platform_api_get_network_report+0x730>
 801b44a:	4a39      	ldr	r2, [pc, #228]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b44c:	601a      	str	r2, [r3, #0]
 801b44e:	681a      	ldr	r2, [r3, #0]
 801b450:	4b38      	ldr	r3, [pc, #224]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b452:	429a      	cmp	r2, r3
 801b454:	d0b5      	beq.n	801b3c2 <ai_platform_api_get_network_report+0x6ae>
 801b456:	e7fe      	b.n	801b456 <ai_platform_api_get_network_report+0x742>
 801b458:	4b39      	ldr	r3, [pc, #228]	; (801b540 <ai_platform_api_get_network_report+0x82c>)
 801b45a:	2201      	movs	r2, #1
 801b45c:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801b460:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801b464:	2a00      	cmp	r2, #0
 801b466:	d1fb      	bne.n	801b460 <ai_platform_api_get_network_report+0x74c>
 801b468:	4a31      	ldr	r2, [pc, #196]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b46a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801b46e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801b472:	4b30      	ldr	r3, [pc, #192]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b474:	429a      	cmp	r2, r3
 801b476:	d0a4      	beq.n	801b3c2 <ai_platform_api_get_network_report+0x6ae>
 801b478:	e7fe      	b.n	801b478 <ai_platform_api_get_network_report+0x764>
 801b47a:	4b31      	ldr	r3, [pc, #196]	; (801b540 <ai_platform_api_get_network_report+0x82c>)
 801b47c:	2201      	movs	r2, #1
 801b47e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801b482:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801b486:	2a00      	cmp	r2, #0
 801b488:	d1fb      	bne.n	801b482 <ai_platform_api_get_network_report+0x76e>
 801b48a:	4a29      	ldr	r2, [pc, #164]	; (801b530 <ai_platform_api_get_network_report+0x81c>)
 801b48c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801b490:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801b494:	4b27      	ldr	r3, [pc, #156]	; (801b534 <ai_platform_api_get_network_report+0x820>)
 801b496:	429a      	cmp	r2, r3
 801b498:	d093      	beq.n	801b3c2 <ai_platform_api_get_network_report+0x6ae>
 801b49a:	e7fe      	b.n	801b49a <ai_platform_api_get_network_report+0x786>
 801b49c:	9901      	ldr	r1, [sp, #4]
 801b49e:	2200      	movs	r2, #0
 801b4a0:	f10d 0910 	add.w	r9, sp, #16
 801b4a4:	4b28      	ldr	r3, [pc, #160]	; (801b548 <ai_platform_api_get_network_report+0x834>)
 801b4a6:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 801b4aa:	f101 0858 	add.w	r8, r1, #88	; 0x58
 801b4ae:	f8c1 9054 	str.w	r9, [r1, #84]	; 0x54
 801b4b2:	46a6      	mov	lr, r4
 801b4b4:	46c4      	mov	ip, r8
 801b4b6:	e9c1 2210 	strd	r2, r2, [r1, #64]	; 0x40
 801b4ba:	e9c1 2212 	strd	r2, r2, [r1, #72]	; 0x48
 801b4be:	4a23      	ldr	r2, [pc, #140]	; (801b54c <ai_platform_api_get_network_report+0x838>)
 801b4c0:	63ca      	str	r2, [r1, #60]	; 0x3c
 801b4c2:	f240 4201 	movw	r2, #1025	; 0x401
 801b4c6:	650a      	str	r2, [r1, #80]	; 0x50
 801b4c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b4ca:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 801b4ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b4d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b4d6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801b4da:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801b4de:	4628      	mov	r0, r5
 801b4e0:	f7ff f87c 	bl	801a5dc <ai_buffer_array_sane>
 801b4e4:	b990      	cbnz	r0, 801b50c <ai_platform_api_get_network_report+0x7f8>
 801b4e6:	4630      	mov	r0, r6
 801b4e8:	f7ff f878 	bl	801a5dc <ai_buffer_array_sane>
 801b4ec:	b910      	cbnz	r0, 801b4f4 <ai_platform_api_get_network_report+0x7e0>
 801b4ee:	2301      	movs	r3, #1
 801b4f0:	9302      	str	r3, [sp, #8]
 801b4f2:	e4e7      	b.n	801aec4 <ai_platform_api_get_network_report+0x1b0>
 801b4f4:	4630      	mov	r0, r6
 801b4f6:	f7ff f871 	bl	801a5dc <ai_buffer_array_sane>
 801b4fa:	b348      	cbz	r0, 801b550 <ai_platform_api_get_network_report+0x83c>
 801b4fc:	6a3d      	ldr	r5, [r7, #32]
 801b4fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b502:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b50a:	e7f0      	b.n	801b4ee <ai_platform_api_get_network_report+0x7da>
 801b50c:	4628      	mov	r0, r5
 801b50e:	f7ff f865 	bl	801a5dc <ai_buffer_array_sane>
 801b512:	b328      	cbz	r0, 801b560 <ai_platform_api_get_network_report+0x84c>
 801b514:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 801b518:	4645      	mov	r5, r8
 801b51a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b51e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b520:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801b524:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801b528:	e7dd      	b.n	801b4e6 <ai_platform_api_get_network_report+0x7d2>
 801b52a:	bf00      	nop
 801b52c:	40023000 	.word	0x40023000
 801b530:	f407a5c2 	.word	0xf407a5c2
 801b534:	b5e8b5cd 	.word	0xb5e8b5cd
 801b538:	e0042000 	.word	0xe0042000
 801b53c:	5c001000 	.word	0x5c001000
 801b540:	58024000 	.word	0x58024000
 801b544:	a1facade 	.word	0xa1facade
 801b548:	080257dc 	.word	0x080257dc
 801b54c:	00040440 	.word	0x00040440
 801b550:	4605      	mov	r5, r0
 801b552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b55a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b55e:	deff      	udf	#255	; 0xff
 801b560:	4604      	mov	r4, r0
 801b562:	4645      	mov	r5, r8
 801b564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b568:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801b56c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801b570:	deff      	udf	#255	; 0xff
 801b572:	bf00      	nop

0801b574 <ai_platform_network_create>:
 801b574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b578:	b083      	sub	sp, #12
 801b57a:	4604      	mov	r4, r0
 801b57c:	4615      	mov	r5, r2
 801b57e:	461e      	mov	r6, r3
 801b580:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801b584:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801b588:	f7ff f832 	bl	801a5f0 <_ai_platform_acquire_crc>
 801b58c:	2800      	cmp	r0, #0
 801b58e:	f000 80bd 	beq.w	801b70c <ai_platform_network_create+0x198>
 801b592:	4ba5      	ldr	r3, [pc, #660]	; (801b828 <ai_platform_network_create+0x2b4>)
 801b594:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 801b598:	4601      	mov	r1, r0
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b5a0:	eb03 020c 	add.w	r2, r3, ip
 801b5a4:	2a01      	cmp	r2, #1
 801b5a6:	f240 80a8 	bls.w	801b6fa <ai_platform_network_create+0x186>
 801b5aa:	f240 4249 	movw	r2, #1097	; 0x449
 801b5ae:	4293      	cmp	r3, r2
 801b5b0:	f000 80a3 	beq.w	801b6fa <ai_platform_network_create+0x186>
 801b5b4:	4a9d      	ldr	r2, [pc, #628]	; (801b82c <ai_platform_network_create+0x2b8>)
 801b5b6:	6813      	ldr	r3, [r2, #0]
 801b5b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b5bc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801b5c0:	f000 80b9 	beq.w	801b736 <ai_platform_network_create+0x1c2>
 801b5c4:	6813      	ldr	r3, [r2, #0]
 801b5c6:	f240 4c83 	movw	ip, #1155	; 0x483
 801b5ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b5ce:	4563      	cmp	r3, ip
 801b5d0:	f000 80a1 	beq.w	801b716 <ai_platform_network_create+0x1a2>
 801b5d4:	6813      	ldr	r3, [r2, #0]
 801b5d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b5da:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b5de:	f000 8153 	beq.w	801b888 <ai_platform_network_create+0x314>
 801b5e2:	6813      	ldr	r3, [r2, #0]
 801b5e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	f040 808d 	bne.w	801b708 <ai_platform_network_create+0x194>
 801b5ee:	4a90      	ldr	r2, [pc, #576]	; (801b830 <ai_platform_network_create+0x2bc>)
 801b5f0:	2318      	movs	r3, #24
 801b5f2:	6093      	str	r3, [r2, #8]
 801b5f4:	6893      	ldr	r3, [r2, #8]
 801b5f6:	2b18      	cmp	r3, #24
 801b5f8:	f040 8086 	bne.w	801b708 <ai_platform_network_create+0x194>
 801b5fc:	2301      	movs	r3, #1
 801b5fe:	6093      	str	r3, [r2, #8]
 801b600:	6893      	ldr	r3, [r2, #8]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d1fc      	bne.n	801b600 <ai_platform_network_create+0x8c>
 801b606:	4608      	mov	r0, r1
 801b608:	f7fe fff4 	bl	801a5f4 <_ai_platform_release_crc>
 801b60c:	f7fe fff0 	bl	801a5f0 <_ai_platform_acquire_crc>
 801b610:	4b85      	ldr	r3, [pc, #532]	; (801b828 <ai_platform_network_create+0x2b4>)
 801b612:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b61c:	189a      	adds	r2, r3, r2
 801b61e:	2a01      	cmp	r2, #1
 801b620:	f240 809f 	bls.w	801b762 <ai_platform_network_create+0x1ee>
 801b624:	f240 4249 	movw	r2, #1097	; 0x449
 801b628:	4293      	cmp	r3, r2
 801b62a:	f000 809a 	beq.w	801b762 <ai_platform_network_create+0x1ee>
 801b62e:	4a7f      	ldr	r2, [pc, #508]	; (801b82c <ai_platform_network_create+0x2b8>)
 801b630:	6813      	ldr	r3, [r2, #0]
 801b632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b636:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801b63a:	f000 80a0 	beq.w	801b77e <ai_platform_network_create+0x20a>
 801b63e:	6813      	ldr	r3, [r2, #0]
 801b640:	f240 4183 	movw	r1, #1155	; 0x483
 801b644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b648:	428b      	cmp	r3, r1
 801b64a:	f000 80bf 	beq.w	801b7cc <ai_platform_network_create+0x258>
 801b64e:	6813      	ldr	r3, [r2, #0]
 801b650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b654:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b658:	f000 8123 	beq.w	801b8a2 <ai_platform_network_create+0x32e>
 801b65c:	6813      	ldr	r3, [r2, #0]
 801b65e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b662:	2b00      	cmp	r3, #0
 801b664:	f000 80c4 	beq.w	801b7f0 <ai_platform_network_create+0x27c>
 801b668:	f7fe ffc4 	bl	801a5f4 <_ai_platform_release_crc>
 801b66c:	2c00      	cmp	r4, #0
 801b66e:	f000 80aa 	beq.w	801b7c6 <ai_platform_network_create+0x252>
 801b672:	4b70      	ldr	r3, [pc, #448]	; (801b834 <ai_platform_network_create+0x2c0>)
 801b674:	602b      	str	r3, [r5, #0]
 801b676:	6025      	str	r5, [r4, #0]
 801b678:	f001 fa66 	bl	801cb48 <core_init>
 801b67c:	2800      	cmp	r0, #0
 801b67e:	f000 8090 	beq.w	801b7a2 <ai_platform_network_create+0x22e>
 801b682:	f7fe ffb5 	bl	801a5f0 <_ai_platform_acquire_crc>
 801b686:	4b68      	ldr	r3, [pc, #416]	; (801b828 <ai_platform_network_create+0x2b4>)
 801b688:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b692:	185a      	adds	r2, r3, r1
 801b694:	2a01      	cmp	r2, #1
 801b696:	f240 80b9 	bls.w	801b80c <ai_platform_network_create+0x298>
 801b69a:	f240 4249 	movw	r2, #1097	; 0x449
 801b69e:	4293      	cmp	r3, r2
 801b6a0:	f000 80b4 	beq.w	801b80c <ai_platform_network_create+0x298>
 801b6a4:	4a61      	ldr	r2, [pc, #388]	; (801b82c <ai_platform_network_create+0x2b8>)
 801b6a6:	6813      	ldr	r3, [r2, #0]
 801b6a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b6ac:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801b6b0:	f000 80c8 	beq.w	801b844 <ai_platform_network_create+0x2d0>
 801b6b4:	6813      	ldr	r3, [r2, #0]
 801b6b6:	f240 4183 	movw	r1, #1155	; 0x483
 801b6ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b6be:	428b      	cmp	r3, r1
 801b6c0:	f000 8107 	beq.w	801b8d2 <ai_platform_network_create+0x35e>
 801b6c4:	6813      	ldr	r3, [r2, #0]
 801b6c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b6ca:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b6ce:	f000 8111 	beq.w	801b8f4 <ai_platform_network_create+0x380>
 801b6d2:	6813      	ldr	r3, [r2, #0]
 801b6d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	f040 80c3 	bne.w	801b864 <ai_platform_network_create+0x2f0>
 801b6de:	4b54      	ldr	r3, [pc, #336]	; (801b830 <ai_platform_network_create+0x2bc>)
 801b6e0:	2201      	movs	r2, #1
 801b6e2:	609a      	str	r2, [r3, #8]
 801b6e4:	689a      	ldr	r2, [r3, #8]
 801b6e6:	2a00      	cmp	r2, #0
 801b6e8:	d1fc      	bne.n	801b6e4 <ai_platform_network_create+0x170>
 801b6ea:	4a53      	ldr	r2, [pc, #332]	; (801b838 <ai_platform_network_create+0x2c4>)
 801b6ec:	601a      	str	r2, [r3, #0]
 801b6ee:	681a      	ldr	r2, [r3, #0]
 801b6f0:	4b52      	ldr	r3, [pc, #328]	; (801b83c <ai_platform_network_create+0x2c8>)
 801b6f2:	429a      	cmp	r2, r3
 801b6f4:	f000 80b6 	beq.w	801b864 <ai_platform_network_create+0x2f0>
 801b6f8:	e7fe      	b.n	801b6f8 <ai_platform_network_create+0x184>
 801b6fa:	4b4d      	ldr	r3, [pc, #308]	; (801b830 <ai_platform_network_create+0x2bc>)
 801b6fc:	2218      	movs	r2, #24
 801b6fe:	609a      	str	r2, [r3, #8]
 801b700:	689a      	ldr	r2, [r3, #8]
 801b702:	2a18      	cmp	r2, #24
 801b704:	d027      	beq.n	801b756 <ai_platform_network_create+0x1e2>
 801b706:	4608      	mov	r0, r1
 801b708:	f7fe ff74 	bl	801a5f4 <_ai_platform_release_crc>
 801b70c:	f244 1033 	movw	r0, #16691	; 0x4133
 801b710:	b003      	add	sp, #12
 801b712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b716:	4a4a      	ldr	r2, [pc, #296]	; (801b840 <ai_platform_network_create+0x2cc>)
 801b718:	2318      	movs	r3, #24
 801b71a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801b71e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801b722:	2b18      	cmp	r3, #24
 801b724:	d1f0      	bne.n	801b708 <ai_platform_network_create+0x194>
 801b726:	2301      	movs	r3, #1
 801b728:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801b72c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801b730:	2b00      	cmp	r3, #0
 801b732:	d1fb      	bne.n	801b72c <ai_platform_network_create+0x1b8>
 801b734:	e767      	b.n	801b606 <ai_platform_network_create+0x92>
 801b736:	4a42      	ldr	r2, [pc, #264]	; (801b840 <ai_platform_network_create+0x2cc>)
 801b738:	2318      	movs	r3, #24
 801b73a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801b73e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801b742:	2b18      	cmp	r3, #24
 801b744:	d1e0      	bne.n	801b708 <ai_platform_network_create+0x194>
 801b746:	2301      	movs	r3, #1
 801b748:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801b74c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801b750:	2b00      	cmp	r3, #0
 801b752:	d1fb      	bne.n	801b74c <ai_platform_network_create+0x1d8>
 801b754:	e757      	b.n	801b606 <ai_platform_network_create+0x92>
 801b756:	2201      	movs	r2, #1
 801b758:	609a      	str	r2, [r3, #8]
 801b75a:	689a      	ldr	r2, [r3, #8]
 801b75c:	2a00      	cmp	r2, #0
 801b75e:	d1fc      	bne.n	801b75a <ai_platform_network_create+0x1e6>
 801b760:	e751      	b.n	801b606 <ai_platform_network_create+0x92>
 801b762:	4a33      	ldr	r2, [pc, #204]	; (801b830 <ai_platform_network_create+0x2bc>)
 801b764:	2301      	movs	r3, #1
 801b766:	6093      	str	r3, [r2, #8]
 801b768:	6891      	ldr	r1, [r2, #8]
 801b76a:	2900      	cmp	r1, #0
 801b76c:	d1fc      	bne.n	801b768 <ai_platform_network_create+0x1f4>
 801b76e:	4b32      	ldr	r3, [pc, #200]	; (801b838 <ai_platform_network_create+0x2c4>)
 801b770:	6013      	str	r3, [r2, #0]
 801b772:	4b32      	ldr	r3, [pc, #200]	; (801b83c <ai_platform_network_create+0x2c8>)
 801b774:	6812      	ldr	r2, [r2, #0]
 801b776:	429a      	cmp	r2, r3
 801b778:	f43f af76 	beq.w	801b668 <ai_platform_network_create+0xf4>
 801b77c:	e7fe      	b.n	801b77c <ai_platform_network_create+0x208>
 801b77e:	4a30      	ldr	r2, [pc, #192]	; (801b840 <ai_platform_network_create+0x2cc>)
 801b780:	2301      	movs	r3, #1
 801b782:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801b786:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d1fb      	bne.n	801b786 <ai_platform_network_create+0x212>
 801b78e:	4b2a      	ldr	r3, [pc, #168]	; (801b838 <ai_platform_network_create+0x2c4>)
 801b790:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801b794:	4b29      	ldr	r3, [pc, #164]	; (801b83c <ai_platform_network_create+0x2c8>)
 801b796:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801b79a:	429a      	cmp	r2, r3
 801b79c:	f43f af64 	beq.w	801b668 <ai_platform_network_create+0xf4>
 801b7a0:	e7fe      	b.n	801b7a0 <ai_platform_network_create+0x22c>
 801b7a2:	f04f 0930 	mov.w	r9, #48	; 0x30
 801b7a6:	2300      	movs	r3, #0
 801b7a8:	6023      	str	r3, [r4, #0]
 801b7aa:	2410      	movs	r4, #16
 801b7ac:	4642      	mov	r2, r8
 801b7ae:	4639      	mov	r1, r7
 801b7b0:	4630      	mov	r0, r6
 801b7b2:	f006 fc65 	bl	8022080 <ai_version_get>
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	2000      	movs	r0, #0
 801b7ba:	64ab      	str	r3, [r5, #72]	; 0x48
 801b7bc:	f369 0007 	bfi	r0, r9, #0, #8
 801b7c0:	f364 201f 	bfi	r0, r4, #8, #24
 801b7c4:	e7a4      	b.n	801b710 <ai_platform_network_create+0x19c>
 801b7c6:	f241 0010 	movw	r0, #4112	; 0x1010
 801b7ca:	e7a1      	b.n	801b710 <ai_platform_network_create+0x19c>
 801b7cc:	4a1c      	ldr	r2, [pc, #112]	; (801b840 <ai_platform_network_create+0x2cc>)
 801b7ce:	2301      	movs	r3, #1
 801b7d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801b7d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d1fb      	bne.n	801b7d4 <ai_platform_network_create+0x260>
 801b7dc:	4b16      	ldr	r3, [pc, #88]	; (801b838 <ai_platform_network_create+0x2c4>)
 801b7de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801b7e2:	4b16      	ldr	r3, [pc, #88]	; (801b83c <ai_platform_network_create+0x2c8>)
 801b7e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801b7e8:	429a      	cmp	r2, r3
 801b7ea:	f43f af3d 	beq.w	801b668 <ai_platform_network_create+0xf4>
 801b7ee:	e7fe      	b.n	801b7ee <ai_platform_network_create+0x27a>
 801b7f0:	4a0f      	ldr	r2, [pc, #60]	; (801b830 <ai_platform_network_create+0x2bc>)
 801b7f2:	2301      	movs	r3, #1
 801b7f4:	6093      	str	r3, [r2, #8]
 801b7f6:	6893      	ldr	r3, [r2, #8]
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d1fc      	bne.n	801b7f6 <ai_platform_network_create+0x282>
 801b7fc:	4b0e      	ldr	r3, [pc, #56]	; (801b838 <ai_platform_network_create+0x2c4>)
 801b7fe:	6013      	str	r3, [r2, #0]
 801b800:	4b0e      	ldr	r3, [pc, #56]	; (801b83c <ai_platform_network_create+0x2c8>)
 801b802:	6812      	ldr	r2, [r2, #0]
 801b804:	429a      	cmp	r2, r3
 801b806:	f43f af2f 	beq.w	801b668 <ai_platform_network_create+0xf4>
 801b80a:	e7fe      	b.n	801b80a <ai_platform_network_create+0x296>
 801b80c:	4a08      	ldr	r2, [pc, #32]	; (801b830 <ai_platform_network_create+0x2bc>)
 801b80e:	2301      	movs	r3, #1
 801b810:	6093      	str	r3, [r2, #8]
 801b812:	6893      	ldr	r3, [r2, #8]
 801b814:	2b00      	cmp	r3, #0
 801b816:	d1fc      	bne.n	801b812 <ai_platform_network_create+0x29e>
 801b818:	4b07      	ldr	r3, [pc, #28]	; (801b838 <ai_platform_network_create+0x2c4>)
 801b81a:	6013      	str	r3, [r2, #0]
 801b81c:	4b07      	ldr	r3, [pc, #28]	; (801b83c <ai_platform_network_create+0x2c8>)
 801b81e:	6812      	ldr	r2, [r2, #0]
 801b820:	429a      	cmp	r2, r3
 801b822:	d01f      	beq.n	801b864 <ai_platform_network_create+0x2f0>
 801b824:	e7fe      	b.n	801b824 <ai_platform_network_create+0x2b0>
 801b826:	bf00      	nop
 801b828:	e0042000 	.word	0xe0042000
 801b82c:	5c001000 	.word	0x5c001000
 801b830:	40023000 	.word	0x40023000
 801b834:	a1c00100 	.word	0xa1c00100
 801b838:	f407a5c2 	.word	0xf407a5c2
 801b83c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b840:	58024000 	.word	0x58024000
 801b844:	4a33      	ldr	r2, [pc, #204]	; (801b914 <ai_platform_network_create+0x3a0>)
 801b846:	2301      	movs	r3, #1
 801b848:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801b84c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801b850:	2b00      	cmp	r3, #0
 801b852:	d1fb      	bne.n	801b84c <ai_platform_network_create+0x2d8>
 801b854:	4b30      	ldr	r3, [pc, #192]	; (801b918 <ai_platform_network_create+0x3a4>)
 801b856:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801b85a:	4b30      	ldr	r3, [pc, #192]	; (801b91c <ai_platform_network_create+0x3a8>)
 801b85c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801b860:	429a      	cmp	r2, r3
 801b862:	d12c      	bne.n	801b8be <ai_platform_network_create+0x34a>
 801b864:	f7fe fec6 	bl	801a5f4 <_ai_platform_release_crc>
 801b868:	2200      	movs	r2, #0
 801b86a:	4639      	mov	r1, r7
 801b86c:	4630      	mov	r0, r6
 801b86e:	f006 fc07 	bl	8022080 <ai_version_get>
 801b872:	4681      	mov	r9, r0
 801b874:	2200      	movs	r2, #0
 801b876:	2105      	movs	r1, #5
 801b878:	2001      	movs	r0, #1
 801b87a:	f006 fc01 	bl	8022080 <ai_version_get>
 801b87e:	4581      	cmp	r9, r0
 801b880:	d01e      	beq.n	801b8c0 <ai_platform_network_create+0x34c>
 801b882:	f04f 0901 	mov.w	r9, #1
 801b886:	e78e      	b.n	801b7a6 <ai_platform_network_create+0x232>
 801b888:	4b25      	ldr	r3, [pc, #148]	; (801b920 <ai_platform_network_create+0x3ac>)
 801b88a:	2218      	movs	r2, #24
 801b88c:	609a      	str	r2, [r3, #8]
 801b88e:	689a      	ldr	r2, [r3, #8]
 801b890:	2a18      	cmp	r2, #24
 801b892:	f47f af39 	bne.w	801b708 <ai_platform_network_create+0x194>
 801b896:	2201      	movs	r2, #1
 801b898:	609a      	str	r2, [r3, #8]
 801b89a:	689a      	ldr	r2, [r3, #8]
 801b89c:	2a00      	cmp	r2, #0
 801b89e:	d1fc      	bne.n	801b89a <ai_platform_network_create+0x326>
 801b8a0:	e6b1      	b.n	801b606 <ai_platform_network_create+0x92>
 801b8a2:	4a1f      	ldr	r2, [pc, #124]	; (801b920 <ai_platform_network_create+0x3ac>)
 801b8a4:	2301      	movs	r3, #1
 801b8a6:	6093      	str	r3, [r2, #8]
 801b8a8:	6893      	ldr	r3, [r2, #8]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d1fc      	bne.n	801b8a8 <ai_platform_network_create+0x334>
 801b8ae:	4b1a      	ldr	r3, [pc, #104]	; (801b918 <ai_platform_network_create+0x3a4>)
 801b8b0:	6013      	str	r3, [r2, #0]
 801b8b2:	4b1a      	ldr	r3, [pc, #104]	; (801b91c <ai_platform_network_create+0x3a8>)
 801b8b4:	6812      	ldr	r2, [r2, #0]
 801b8b6:	429a      	cmp	r2, r3
 801b8b8:	f43f aed6 	beq.w	801b668 <ai_platform_network_create+0xf4>
 801b8bc:	e7fe      	b.n	801b8bc <ai_platform_network_create+0x348>
 801b8be:	e7fe      	b.n	801b8be <ai_platform_network_create+0x34a>
 801b8c0:	4b18      	ldr	r3, [pc, #96]	; (801b924 <ai_platform_network_create+0x3b0>)
 801b8c2:	a801      	add	r0, sp, #4
 801b8c4:	9301      	str	r3, [sp, #4]
 801b8c6:	f001 ff8b 	bl	801d7e0 <ai_check_custom_types>
 801b8ca:	b300      	cbz	r0, 801b90e <ai_platform_network_create+0x39a>
 801b8cc:	2400      	movs	r4, #0
 801b8ce:	46a1      	mov	r9, r4
 801b8d0:	e76c      	b.n	801b7ac <ai_platform_network_create+0x238>
 801b8d2:	4b10      	ldr	r3, [pc, #64]	; (801b914 <ai_platform_network_create+0x3a0>)
 801b8d4:	2201      	movs	r2, #1
 801b8d6:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 801b8da:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 801b8de:	2a00      	cmp	r2, #0
 801b8e0:	d1fb      	bne.n	801b8da <ai_platform_network_create+0x366>
 801b8e2:	4a0d      	ldr	r2, [pc, #52]	; (801b918 <ai_platform_network_create+0x3a4>)
 801b8e4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 801b8e8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 801b8ec:	4b0b      	ldr	r3, [pc, #44]	; (801b91c <ai_platform_network_create+0x3a8>)
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d0b8      	beq.n	801b864 <ai_platform_network_create+0x2f0>
 801b8f2:	e7fe      	b.n	801b8f2 <ai_platform_network_create+0x37e>
 801b8f4:	4b0a      	ldr	r3, [pc, #40]	; (801b920 <ai_platform_network_create+0x3ac>)
 801b8f6:	2201      	movs	r2, #1
 801b8f8:	609a      	str	r2, [r3, #8]
 801b8fa:	689a      	ldr	r2, [r3, #8]
 801b8fc:	2a00      	cmp	r2, #0
 801b8fe:	d1fc      	bne.n	801b8fa <ai_platform_network_create+0x386>
 801b900:	4a05      	ldr	r2, [pc, #20]	; (801b918 <ai_platform_network_create+0x3a4>)
 801b902:	601a      	str	r2, [r3, #0]
 801b904:	681a      	ldr	r2, [r3, #0]
 801b906:	4b05      	ldr	r3, [pc, #20]	; (801b91c <ai_platform_network_create+0x3a8>)
 801b908:	429a      	cmp	r2, r3
 801b90a:	d0ab      	beq.n	801b864 <ai_platform_network_create+0x2f0>
 801b90c:	e7fe      	b.n	801b90c <ai_platform_network_create+0x398>
 801b90e:	f04f 0902 	mov.w	r9, #2
 801b912:	e748      	b.n	801b7a6 <ai_platform_network_create+0x232>
 801b914:	58024000 	.word	0x58024000
 801b918:	f407a5c2 	.word	0xf407a5c2
 801b91c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b920:	40023000 	.word	0x40023000
 801b924:	84048403 	.word	0x84048403

0801b928 <ai_platform_network_destroy>:
 801b928:	b510      	push	{r4, lr}
 801b92a:	4604      	mov	r4, r0
 801b92c:	2800      	cmp	r0, #0
 801b92e:	d03d      	beq.n	801b9ac <ai_platform_network_destroy+0x84>
 801b930:	4b7a      	ldr	r3, [pc, #488]	; (801bb1c <ai_platform_network_destroy+0x1f4>)
 801b932:	6802      	ldr	r2, [r0, #0]
 801b934:	429a      	cmp	r2, r3
 801b936:	d139      	bne.n	801b9ac <ai_platform_network_destroy+0x84>
 801b938:	f7fe fe5a 	bl	801a5f0 <_ai_platform_acquire_crc>
 801b93c:	4b78      	ldr	r3, [pc, #480]	; (801bb20 <ai_platform_network_destroy+0x1f8>)
 801b93e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b948:	189a      	adds	r2, r3, r2
 801b94a:	2a01      	cmp	r2, #1
 801b94c:	f240 8084 	bls.w	801ba58 <ai_platform_network_destroy+0x130>
 801b950:	f240 4249 	movw	r2, #1097	; 0x449
 801b954:	4293      	cmp	r3, r2
 801b956:	d07f      	beq.n	801ba58 <ai_platform_network_destroy+0x130>
 801b958:	4a72      	ldr	r2, [pc, #456]	; (801bb24 <ai_platform_network_destroy+0x1fc>)
 801b95a:	6813      	ldr	r3, [r2, #0]
 801b95c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b960:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801b964:	f000 8086 	beq.w	801ba74 <ai_platform_network_destroy+0x14c>
 801b968:	6813      	ldr	r3, [r2, #0]
 801b96a:	f240 4183 	movw	r1, #1155	; 0x483
 801b96e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b972:	428b      	cmp	r3, r1
 801b974:	f000 80a7 	beq.w	801bac6 <ai_platform_network_destroy+0x19e>
 801b978:	6813      	ldr	r3, [r2, #0]
 801b97a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b97e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b982:	f000 80be 	beq.w	801bb02 <ai_platform_network_destroy+0x1da>
 801b986:	6813      	ldr	r3, [r2, #0]
 801b988:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	f040 8081 	bne.w	801ba94 <ai_platform_network_destroy+0x16c>
 801b992:	4a65      	ldr	r2, [pc, #404]	; (801bb28 <ai_platform_network_destroy+0x200>)
 801b994:	2301      	movs	r3, #1
 801b996:	6093      	str	r3, [r2, #8]
 801b998:	6893      	ldr	r3, [r2, #8]
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d1fc      	bne.n	801b998 <ai_platform_network_destroy+0x70>
 801b99e:	4963      	ldr	r1, [pc, #396]	; (801bb2c <ai_platform_network_destroy+0x204>)
 801b9a0:	4b63      	ldr	r3, [pc, #396]	; (801bb30 <ai_platform_network_destroy+0x208>)
 801b9a2:	6011      	str	r1, [r2, #0]
 801b9a4:	6812      	ldr	r2, [r2, #0]
 801b9a6:	429a      	cmp	r2, r3
 801b9a8:	d074      	beq.n	801ba94 <ai_platform_network_destroy+0x16c>
 801b9aa:	e7fe      	b.n	801b9aa <ai_platform_network_destroy+0x82>
 801b9ac:	f7fe fe20 	bl	801a5f0 <_ai_platform_acquire_crc>
 801b9b0:	4b5b      	ldr	r3, [pc, #364]	; (801bb20 <ai_platform_network_destroy+0x1f8>)
 801b9b2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b9bc:	185a      	adds	r2, r3, r1
 801b9be:	2a01      	cmp	r2, #1
 801b9c0:	d929      	bls.n	801ba16 <ai_platform_network_destroy+0xee>
 801b9c2:	f240 4249 	movw	r2, #1097	; 0x449
 801b9c6:	4293      	cmp	r3, r2
 801b9c8:	d025      	beq.n	801ba16 <ai_platform_network_destroy+0xee>
 801b9ca:	4a56      	ldr	r2, [pc, #344]	; (801bb24 <ai_platform_network_destroy+0x1fc>)
 801b9cc:	6813      	ldr	r3, [r2, #0]
 801b9ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b9d2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801b9d6:	d02b      	beq.n	801ba30 <ai_platform_network_destroy+0x108>
 801b9d8:	6813      	ldr	r3, [r2, #0]
 801b9da:	f240 4183 	movw	r1, #1155	; 0x483
 801b9de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b9e2:	428b      	cmp	r3, r1
 801b9e4:	d05e      	beq.n	801baa4 <ai_platform_network_destroy+0x17c>
 801b9e6:	6813      	ldr	r3, [r2, #0]
 801b9e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b9ec:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b9f0:	d07a      	beq.n	801bae8 <ai_platform_network_destroy+0x1c0>
 801b9f2:	6813      	ldr	r3, [r2, #0]
 801b9f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d129      	bne.n	801ba50 <ai_platform_network_destroy+0x128>
 801b9fc:	4a4a      	ldr	r2, [pc, #296]	; (801bb28 <ai_platform_network_destroy+0x200>)
 801b9fe:	2301      	movs	r3, #1
 801ba00:	6093      	str	r3, [r2, #8]
 801ba02:	6893      	ldr	r3, [r2, #8]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d1fc      	bne.n	801ba02 <ai_platform_network_destroy+0xda>
 801ba08:	4948      	ldr	r1, [pc, #288]	; (801bb2c <ai_platform_network_destroy+0x204>)
 801ba0a:	4b49      	ldr	r3, [pc, #292]	; (801bb30 <ai_platform_network_destroy+0x208>)
 801ba0c:	6011      	str	r1, [r2, #0]
 801ba0e:	6812      	ldr	r2, [r2, #0]
 801ba10:	429a      	cmp	r2, r3
 801ba12:	d01d      	beq.n	801ba50 <ai_platform_network_destroy+0x128>
 801ba14:	e7fe      	b.n	801ba14 <ai_platform_network_destroy+0xec>
 801ba16:	4a44      	ldr	r2, [pc, #272]	; (801bb28 <ai_platform_network_destroy+0x200>)
 801ba18:	2301      	movs	r3, #1
 801ba1a:	6093      	str	r3, [r2, #8]
 801ba1c:	6893      	ldr	r3, [r2, #8]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d1fc      	bne.n	801ba1c <ai_platform_network_destroy+0xf4>
 801ba22:	4942      	ldr	r1, [pc, #264]	; (801bb2c <ai_platform_network_destroy+0x204>)
 801ba24:	4b42      	ldr	r3, [pc, #264]	; (801bb30 <ai_platform_network_destroy+0x208>)
 801ba26:	6011      	str	r1, [r2, #0]
 801ba28:	6812      	ldr	r2, [r2, #0]
 801ba2a:	429a      	cmp	r2, r3
 801ba2c:	d010      	beq.n	801ba50 <ai_platform_network_destroy+0x128>
 801ba2e:	e7fe      	b.n	801ba2e <ai_platform_network_destroy+0x106>
 801ba30:	4a40      	ldr	r2, [pc, #256]	; (801bb34 <ai_platform_network_destroy+0x20c>)
 801ba32:	2301      	movs	r3, #1
 801ba34:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801ba38:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d1fb      	bne.n	801ba38 <ai_platform_network_destroy+0x110>
 801ba40:	493a      	ldr	r1, [pc, #232]	; (801bb2c <ai_platform_network_destroy+0x204>)
 801ba42:	4b3b      	ldr	r3, [pc, #236]	; (801bb30 <ai_platform_network_destroy+0x208>)
 801ba44:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801ba48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801ba4c:	429a      	cmp	r2, r3
 801ba4e:	d110      	bne.n	801ba72 <ai_platform_network_destroy+0x14a>
 801ba50:	f7fe fdd0 	bl	801a5f4 <_ai_platform_release_crc>
 801ba54:	4620      	mov	r0, r4
 801ba56:	bd10      	pop	{r4, pc}
 801ba58:	4a33      	ldr	r2, [pc, #204]	; (801bb28 <ai_platform_network_destroy+0x200>)
 801ba5a:	2301      	movs	r3, #1
 801ba5c:	6093      	str	r3, [r2, #8]
 801ba5e:	6893      	ldr	r3, [r2, #8]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d1fc      	bne.n	801ba5e <ai_platform_network_destroy+0x136>
 801ba64:	4931      	ldr	r1, [pc, #196]	; (801bb2c <ai_platform_network_destroy+0x204>)
 801ba66:	4b32      	ldr	r3, [pc, #200]	; (801bb30 <ai_platform_network_destroy+0x208>)
 801ba68:	6011      	str	r1, [r2, #0]
 801ba6a:	6812      	ldr	r2, [r2, #0]
 801ba6c:	429a      	cmp	r2, r3
 801ba6e:	d011      	beq.n	801ba94 <ai_platform_network_destroy+0x16c>
 801ba70:	e7fe      	b.n	801ba70 <ai_platform_network_destroy+0x148>
 801ba72:	e7fe      	b.n	801ba72 <ai_platform_network_destroy+0x14a>
 801ba74:	4a2f      	ldr	r2, [pc, #188]	; (801bb34 <ai_platform_network_destroy+0x20c>)
 801ba76:	2301      	movs	r3, #1
 801ba78:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801ba7c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d1fb      	bne.n	801ba7c <ai_platform_network_destroy+0x154>
 801ba84:	4929      	ldr	r1, [pc, #164]	; (801bb2c <ai_platform_network_destroy+0x204>)
 801ba86:	4b2a      	ldr	r3, [pc, #168]	; (801bb30 <ai_platform_network_destroy+0x208>)
 801ba88:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801ba8c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801ba90:	429a      	cmp	r2, r3
 801ba92:	d106      	bne.n	801baa2 <ai_platform_network_destroy+0x17a>
 801ba94:	f7fe fdae 	bl	801a5f4 <_ai_platform_release_crc>
 801ba98:	4620      	mov	r0, r4
 801ba9a:	f001 ff33 	bl	801d904 <ai_layers_destroy_all>
 801ba9e:	2000      	movs	r0, #0
 801baa0:	bd10      	pop	{r4, pc}
 801baa2:	e7fe      	b.n	801baa2 <ai_platform_network_destroy+0x17a>
 801baa4:	4a23      	ldr	r2, [pc, #140]	; (801bb34 <ai_platform_network_destroy+0x20c>)
 801baa6:	2301      	movs	r3, #1
 801baa8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801baac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d1fb      	bne.n	801baac <ai_platform_network_destroy+0x184>
 801bab4:	491d      	ldr	r1, [pc, #116]	; (801bb2c <ai_platform_network_destroy+0x204>)
 801bab6:	4b1e      	ldr	r3, [pc, #120]	; (801bb30 <ai_platform_network_destroy+0x208>)
 801bab8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801babc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801bac0:	429a      	cmp	r2, r3
 801bac2:	d0c5      	beq.n	801ba50 <ai_platform_network_destroy+0x128>
 801bac4:	e7fe      	b.n	801bac4 <ai_platform_network_destroy+0x19c>
 801bac6:	4a1b      	ldr	r2, [pc, #108]	; (801bb34 <ai_platform_network_destroy+0x20c>)
 801bac8:	2301      	movs	r3, #1
 801baca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801bace:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d1fb      	bne.n	801bace <ai_platform_network_destroy+0x1a6>
 801bad6:	4915      	ldr	r1, [pc, #84]	; (801bb2c <ai_platform_network_destroy+0x204>)
 801bad8:	4b15      	ldr	r3, [pc, #84]	; (801bb30 <ai_platform_network_destroy+0x208>)
 801bada:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801bade:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801bae2:	429a      	cmp	r2, r3
 801bae4:	d0d6      	beq.n	801ba94 <ai_platform_network_destroy+0x16c>
 801bae6:	e7fe      	b.n	801bae6 <ai_platform_network_destroy+0x1be>
 801bae8:	4a0f      	ldr	r2, [pc, #60]	; (801bb28 <ai_platform_network_destroy+0x200>)
 801baea:	2301      	movs	r3, #1
 801baec:	6093      	str	r3, [r2, #8]
 801baee:	6893      	ldr	r3, [r2, #8]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d1fc      	bne.n	801baee <ai_platform_network_destroy+0x1c6>
 801baf4:	490d      	ldr	r1, [pc, #52]	; (801bb2c <ai_platform_network_destroy+0x204>)
 801baf6:	4b0e      	ldr	r3, [pc, #56]	; (801bb30 <ai_platform_network_destroy+0x208>)
 801baf8:	6011      	str	r1, [r2, #0]
 801bafa:	6812      	ldr	r2, [r2, #0]
 801bafc:	429a      	cmp	r2, r3
 801bafe:	d0a7      	beq.n	801ba50 <ai_platform_network_destroy+0x128>
 801bb00:	e7fe      	b.n	801bb00 <ai_platform_network_destroy+0x1d8>
 801bb02:	4a09      	ldr	r2, [pc, #36]	; (801bb28 <ai_platform_network_destroy+0x200>)
 801bb04:	2301      	movs	r3, #1
 801bb06:	6093      	str	r3, [r2, #8]
 801bb08:	6893      	ldr	r3, [r2, #8]
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d1fc      	bne.n	801bb08 <ai_platform_network_destroy+0x1e0>
 801bb0e:	4907      	ldr	r1, [pc, #28]	; (801bb2c <ai_platform_network_destroy+0x204>)
 801bb10:	4b07      	ldr	r3, [pc, #28]	; (801bb30 <ai_platform_network_destroy+0x208>)
 801bb12:	6011      	str	r1, [r2, #0]
 801bb14:	6812      	ldr	r2, [r2, #0]
 801bb16:	429a      	cmp	r2, r3
 801bb18:	d0bc      	beq.n	801ba94 <ai_platform_network_destroy+0x16c>
 801bb1a:	e7fe      	b.n	801bb1a <ai_platform_network_destroy+0x1f2>
 801bb1c:	a1c00100 	.word	0xa1c00100
 801bb20:	e0042000 	.word	0xe0042000
 801bb24:	5c001000 	.word	0x5c001000
 801bb28:	40023000 	.word	0x40023000
 801bb2c:	f407a5c2 	.word	0xf407a5c2
 801bb30:	b5e8b5cd 	.word	0xb5e8b5cd
 801bb34:	58024000 	.word	0x58024000

0801bb38 <ai_platform_network_init>:
 801bb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb3c:	2800      	cmp	r0, #0
 801bb3e:	d052      	beq.n	801bbe6 <ai_platform_network_init+0xae>
 801bb40:	4bab      	ldr	r3, [pc, #684]	; (801bdf0 <ai_platform_network_init+0x2b8>)
 801bb42:	4604      	mov	r4, r0
 801bb44:	6802      	ldr	r2, [r0, #0]
 801bb46:	429a      	cmp	r2, r3
 801bb48:	d14d      	bne.n	801bbe6 <ai_platform_network_init+0xae>
 801bb4a:	460d      	mov	r5, r1
 801bb4c:	f7fe fd50 	bl	801a5f0 <_ai_platform_acquire_crc>
 801bb50:	4ba8      	ldr	r3, [pc, #672]	; (801bdf4 <ai_platform_network_init+0x2bc>)
 801bb52:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bb5c:	189a      	adds	r2, r3, r2
 801bb5e:	2a01      	cmp	r2, #1
 801bb60:	f240 809b 	bls.w	801bc9a <ai_platform_network_init+0x162>
 801bb64:	f240 4249 	movw	r2, #1097	; 0x449
 801bb68:	4293      	cmp	r3, r2
 801bb6a:	f000 8096 	beq.w	801bc9a <ai_platform_network_init+0x162>
 801bb6e:	4aa2      	ldr	r2, [pc, #648]	; (801bdf8 <ai_platform_network_init+0x2c0>)
 801bb70:	6813      	ldr	r3, [r2, #0]
 801bb72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bb76:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801bb7a:	f000 809d 	beq.w	801bcb8 <ai_platform_network_init+0x180>
 801bb7e:	6813      	ldr	r3, [r2, #0]
 801bb80:	f240 4183 	movw	r1, #1155	; 0x483
 801bb84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bb88:	428b      	cmp	r3, r1
 801bb8a:	f000 80e4 	beq.w	801bd56 <ai_platform_network_init+0x21e>
 801bb8e:	6813      	ldr	r3, [r2, #0]
 801bb90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bb94:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bb98:	f000 811b 	beq.w	801bdd2 <ai_platform_network_init+0x29a>
 801bb9c:	6813      	ldr	r3, [r2, #0]
 801bb9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	f000 80f9 	beq.w	801bd9a <ai_platform_network_init+0x262>
 801bba8:	f7fe fd24 	bl	801a5f4 <_ai_platform_release_crc>
 801bbac:	2d00      	cmp	r5, #0
 801bbae:	f000 8147 	beq.w	801be40 <ai_platform_network_init+0x308>
 801bbb2:	4b92      	ldr	r3, [pc, #584]	; (801bdfc <ai_platform_network_init+0x2c4>)
 801bbb4:	682a      	ldr	r2, [r5, #0]
 801bbb6:	429a      	cmp	r2, r3
 801bbb8:	f040 8090 	bne.w	801bcdc <ai_platform_network_init+0x1a4>
 801bbbc:	692b      	ldr	r3, [r5, #16]
 801bbbe:	89ae      	ldrh	r6, [r5, #12]
 801bbc0:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 801bbc4:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 801bbc8:	62a3      	str	r3, [r4, #40]	; 0x28
 801bbca:	e9c4 1207 	strd	r1, r2, [r4, #28]
 801bbce:	2303      	movs	r3, #3
 801bbd0:	84a6      	strh	r6, [r4, #36]	; 0x24
 801bbd2:	4626      	mov	r6, r4
 801bbd4:	4620      	mov	r0, r4
 801bbd6:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 801bbda:	60e3      	str	r3, [r4, #12]
 801bbdc:	f001 fe28 	bl	801d830 <ai_layers_init_all>
 801bbe0:	4630      	mov	r0, r6
 801bbe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bbe6:	f7fe fd03 	bl	801a5f0 <_ai_platform_acquire_crc>
 801bbea:	4b82      	ldr	r3, [pc, #520]	; (801bdf4 <ai_platform_network_init+0x2bc>)
 801bbec:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bbf6:	185a      	adds	r2, r3, r1
 801bbf8:	2a01      	cmp	r2, #1
 801bbfa:	d92b      	bls.n	801bc54 <ai_platform_network_init+0x11c>
 801bbfc:	f240 4249 	movw	r2, #1097	; 0x449
 801bc00:	4293      	cmp	r3, r2
 801bc02:	d027      	beq.n	801bc54 <ai_platform_network_init+0x11c>
 801bc04:	4a7c      	ldr	r2, [pc, #496]	; (801bdf8 <ai_platform_network_init+0x2c0>)
 801bc06:	6813      	ldr	r3, [r2, #0]
 801bc08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc0c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801bc10:	d02d      	beq.n	801bc6e <ai_platform_network_init+0x136>
 801bc12:	6813      	ldr	r3, [r2, #0]
 801bc14:	f240 4183 	movw	r1, #1155	; 0x483
 801bc18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc1c:	428b      	cmp	r3, r1
 801bc1e:	f000 8089 	beq.w	801bd34 <ai_platform_network_init+0x1fc>
 801bc22:	6813      	ldr	r3, [r2, #0]
 801bc24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc28:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bc2c:	f000 80c3 	beq.w	801bdb6 <ai_platform_network_init+0x27e>
 801bc30:	6813      	ldr	r3, [r2, #0]
 801bc32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d129      	bne.n	801bc8e <ai_platform_network_init+0x156>
 801bc3a:	4a71      	ldr	r2, [pc, #452]	; (801be00 <ai_platform_network_init+0x2c8>)
 801bc3c:	2301      	movs	r3, #1
 801bc3e:	6093      	str	r3, [r2, #8]
 801bc40:	6893      	ldr	r3, [r2, #8]
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d1fc      	bne.n	801bc40 <ai_platform_network_init+0x108>
 801bc46:	496f      	ldr	r1, [pc, #444]	; (801be04 <ai_platform_network_init+0x2cc>)
 801bc48:	4b6f      	ldr	r3, [pc, #444]	; (801be08 <ai_platform_network_init+0x2d0>)
 801bc4a:	6011      	str	r1, [r2, #0]
 801bc4c:	6812      	ldr	r2, [r2, #0]
 801bc4e:	429a      	cmp	r2, r3
 801bc50:	d01d      	beq.n	801bc8e <ai_platform_network_init+0x156>
 801bc52:	e7fe      	b.n	801bc52 <ai_platform_network_init+0x11a>
 801bc54:	4a6a      	ldr	r2, [pc, #424]	; (801be00 <ai_platform_network_init+0x2c8>)
 801bc56:	2301      	movs	r3, #1
 801bc58:	6093      	str	r3, [r2, #8]
 801bc5a:	6893      	ldr	r3, [r2, #8]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d1fc      	bne.n	801bc5a <ai_platform_network_init+0x122>
 801bc60:	4968      	ldr	r1, [pc, #416]	; (801be04 <ai_platform_network_init+0x2cc>)
 801bc62:	4b69      	ldr	r3, [pc, #420]	; (801be08 <ai_platform_network_init+0x2d0>)
 801bc64:	6011      	str	r1, [r2, #0]
 801bc66:	6812      	ldr	r2, [r2, #0]
 801bc68:	429a      	cmp	r2, r3
 801bc6a:	d010      	beq.n	801bc8e <ai_platform_network_init+0x156>
 801bc6c:	e7fe      	b.n	801bc6c <ai_platform_network_init+0x134>
 801bc6e:	4a67      	ldr	r2, [pc, #412]	; (801be0c <ai_platform_network_init+0x2d4>)
 801bc70:	2301      	movs	r3, #1
 801bc72:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801bc76:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d1fb      	bne.n	801bc76 <ai_platform_network_init+0x13e>
 801bc7e:	4961      	ldr	r1, [pc, #388]	; (801be04 <ai_platform_network_init+0x2cc>)
 801bc80:	4b61      	ldr	r3, [pc, #388]	; (801be08 <ai_platform_network_init+0x2d0>)
 801bc82:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801bc86:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801bc8a:	429a      	cmp	r2, r3
 801bc8c:	d113      	bne.n	801bcb6 <ai_platform_network_init+0x17e>
 801bc8e:	2600      	movs	r6, #0
 801bc90:	f7fe fcb0 	bl	801a5f4 <_ai_platform_release_crc>
 801bc94:	4630      	mov	r0, r6
 801bc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc9a:	4a59      	ldr	r2, [pc, #356]	; (801be00 <ai_platform_network_init+0x2c8>)
 801bc9c:	2301      	movs	r3, #1
 801bc9e:	6093      	str	r3, [r2, #8]
 801bca0:	6893      	ldr	r3, [r2, #8]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d1fc      	bne.n	801bca0 <ai_platform_network_init+0x168>
 801bca6:	4b57      	ldr	r3, [pc, #348]	; (801be04 <ai_platform_network_init+0x2cc>)
 801bca8:	6013      	str	r3, [r2, #0]
 801bcaa:	4b57      	ldr	r3, [pc, #348]	; (801be08 <ai_platform_network_init+0x2d0>)
 801bcac:	6812      	ldr	r2, [r2, #0]
 801bcae:	429a      	cmp	r2, r3
 801bcb0:	f43f af7a 	beq.w	801bba8 <ai_platform_network_init+0x70>
 801bcb4:	e7fe      	b.n	801bcb4 <ai_platform_network_init+0x17c>
 801bcb6:	e7fe      	b.n	801bcb6 <ai_platform_network_init+0x17e>
 801bcb8:	4a54      	ldr	r2, [pc, #336]	; (801be0c <ai_platform_network_init+0x2d4>)
 801bcba:	2301      	movs	r3, #1
 801bcbc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801bcc0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d1fb      	bne.n	801bcc0 <ai_platform_network_init+0x188>
 801bcc8:	4b4e      	ldr	r3, [pc, #312]	; (801be04 <ai_platform_network_init+0x2cc>)
 801bcca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801bcce:	4b4e      	ldr	r3, [pc, #312]	; (801be08 <ai_platform_network_init+0x2d0>)
 801bcd0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801bcd4:	429a      	cmp	r2, r3
 801bcd6:	f43f af67 	beq.w	801bba8 <ai_platform_network_init+0x70>
 801bcda:	e7fe      	b.n	801bcda <ai_platform_network_init+0x1a2>
 801bcdc:	2101      	movs	r1, #1
 801bcde:	4628      	mov	r0, r5
 801bce0:	f105 081c 	add.w	r8, r5, #28
 801bce4:	686e      	ldr	r6, [r5, #4]
 801bce6:	f7fe fc45 	bl	801a574 <ai_buffer_get_size>
 801bcea:	4607      	mov	r7, r0
 801bcec:	2101      	movs	r1, #1
 801bcee:	4640      	mov	r0, r8
 801bcf0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801bcf4:	f7fe fc3e 	bl	801a574 <ai_buffer_get_size>
 801bcf8:	2f00      	cmp	r7, #0
 801bcfa:	d13e      	bne.n	801bd7a <ai_platform_network_init+0x242>
 801bcfc:	2800      	cmp	r0, #0
 801bcfe:	f000 808e 	beq.w	801be1e <ai_platform_network_init+0x2e6>
 801bd02:	f1b9 0f00 	cmp.w	r9, #0
 801bd06:	f000 8094 	beq.w	801be32 <ai_platform_network_init+0x2fa>
 801bd0a:	f04f 0c01 	mov.w	ip, #1
 801bd0e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801bd10:	2600      	movs	r6, #0
 801bd12:	83e7      	strh	r7, [r4, #30]
 801bd14:	4563      	cmp	r3, ip
 801bd16:	83a6      	strh	r6, [r4, #28]
 801bd18:	d37a      	bcc.n	801be10 <ai_platform_network_init+0x2d8>
 801bd1a:	f1bc 0f00 	cmp.w	ip, #0
 801bd1e:	f000 809c 	beq.w	801be5a <ai_platform_network_init+0x322>
 801bd22:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801bd24:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 801bd28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd2a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801bd2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801bd32:	e74c      	b.n	801bbce <ai_platform_network_init+0x96>
 801bd34:	4a35      	ldr	r2, [pc, #212]	; (801be0c <ai_platform_network_init+0x2d4>)
 801bd36:	2301      	movs	r3, #1
 801bd38:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801bd3c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d1fb      	bne.n	801bd3c <ai_platform_network_init+0x204>
 801bd44:	492f      	ldr	r1, [pc, #188]	; (801be04 <ai_platform_network_init+0x2cc>)
 801bd46:	4b30      	ldr	r3, [pc, #192]	; (801be08 <ai_platform_network_init+0x2d0>)
 801bd48:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801bd4c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801bd50:	429a      	cmp	r2, r3
 801bd52:	d09c      	beq.n	801bc8e <ai_platform_network_init+0x156>
 801bd54:	e7fe      	b.n	801bd54 <ai_platform_network_init+0x21c>
 801bd56:	4a2d      	ldr	r2, [pc, #180]	; (801be0c <ai_platform_network_init+0x2d4>)
 801bd58:	2301      	movs	r3, #1
 801bd5a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801bd5e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d1fb      	bne.n	801bd5e <ai_platform_network_init+0x226>
 801bd66:	4b27      	ldr	r3, [pc, #156]	; (801be04 <ai_platform_network_init+0x2cc>)
 801bd68:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801bd6c:	4b26      	ldr	r3, [pc, #152]	; (801be08 <ai_platform_network_init+0x2d0>)
 801bd6e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801bd72:	429a      	cmp	r2, r3
 801bd74:	f43f af18 	beq.w	801bba8 <ai_platform_network_init+0x70>
 801bd78:	e7fe      	b.n	801bd78 <ai_platform_network_init+0x240>
 801bd7a:	2800      	cmp	r0, #0
 801bd7c:	d153      	bne.n	801be26 <ai_platform_network_init+0x2ee>
 801bd7e:	4680      	mov	r8, r0
 801bd80:	4684      	mov	ip, r0
 801bd82:	2e00      	cmp	r6, #0
 801bd84:	d063      	beq.n	801be4e <ai_platform_network_init+0x316>
 801bd86:	8be6      	ldrh	r6, [r4, #30]
 801bd88:	2e00      	cmp	r6, #0
 801bd8a:	d168      	bne.n	801be5e <ai_platform_network_init+0x326>
 801bd8c:	2212      	movs	r2, #18
 801bd8e:	2116      	movs	r1, #22
 801bd90:	f104 0010 	add.w	r0, r4, #16
 801bd94:	f000 feda 	bl	801cb4c <core_set_error>
 801bd98:	e77c      	b.n	801bc94 <ai_platform_network_init+0x15c>
 801bd9a:	4a19      	ldr	r2, [pc, #100]	; (801be00 <ai_platform_network_init+0x2c8>)
 801bd9c:	2301      	movs	r3, #1
 801bd9e:	6093      	str	r3, [r2, #8]
 801bda0:	6893      	ldr	r3, [r2, #8]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d1fc      	bne.n	801bda0 <ai_platform_network_init+0x268>
 801bda6:	4b17      	ldr	r3, [pc, #92]	; (801be04 <ai_platform_network_init+0x2cc>)
 801bda8:	6013      	str	r3, [r2, #0]
 801bdaa:	4b17      	ldr	r3, [pc, #92]	; (801be08 <ai_platform_network_init+0x2d0>)
 801bdac:	6812      	ldr	r2, [r2, #0]
 801bdae:	429a      	cmp	r2, r3
 801bdb0:	f43f aefa 	beq.w	801bba8 <ai_platform_network_init+0x70>
 801bdb4:	e7fe      	b.n	801bdb4 <ai_platform_network_init+0x27c>
 801bdb6:	4a12      	ldr	r2, [pc, #72]	; (801be00 <ai_platform_network_init+0x2c8>)
 801bdb8:	2301      	movs	r3, #1
 801bdba:	6093      	str	r3, [r2, #8]
 801bdbc:	6893      	ldr	r3, [r2, #8]
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d1fc      	bne.n	801bdbc <ai_platform_network_init+0x284>
 801bdc2:	4910      	ldr	r1, [pc, #64]	; (801be04 <ai_platform_network_init+0x2cc>)
 801bdc4:	4b10      	ldr	r3, [pc, #64]	; (801be08 <ai_platform_network_init+0x2d0>)
 801bdc6:	6011      	str	r1, [r2, #0]
 801bdc8:	6812      	ldr	r2, [r2, #0]
 801bdca:	429a      	cmp	r2, r3
 801bdcc:	f43f af5f 	beq.w	801bc8e <ai_platform_network_init+0x156>
 801bdd0:	e7fe      	b.n	801bdd0 <ai_platform_network_init+0x298>
 801bdd2:	4a0b      	ldr	r2, [pc, #44]	; (801be00 <ai_platform_network_init+0x2c8>)
 801bdd4:	2301      	movs	r3, #1
 801bdd6:	6093      	str	r3, [r2, #8]
 801bdd8:	6893      	ldr	r3, [r2, #8]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d1fc      	bne.n	801bdd8 <ai_platform_network_init+0x2a0>
 801bdde:	4b09      	ldr	r3, [pc, #36]	; (801be04 <ai_platform_network_init+0x2cc>)
 801bde0:	6013      	str	r3, [r2, #0]
 801bde2:	4b09      	ldr	r3, [pc, #36]	; (801be08 <ai_platform_network_init+0x2d0>)
 801bde4:	6812      	ldr	r2, [r2, #0]
 801bde6:	429a      	cmp	r2, r3
 801bde8:	f43f aede 	beq.w	801bba8 <ai_platform_network_init+0x70>
 801bdec:	e7fe      	b.n	801bdec <ai_platform_network_init+0x2b4>
 801bdee:	bf00      	nop
 801bdf0:	a1c00100 	.word	0xa1c00100
 801bdf4:	e0042000 	.word	0xe0042000
 801bdf8:	5c001000 	.word	0x5c001000
 801bdfc:	a1facade 	.word	0xa1facade
 801be00:	40023000 	.word	0x40023000
 801be04:	f407a5c2 	.word	0xf407a5c2
 801be08:	b5e8b5cd 	.word	0xb5e8b5cd
 801be0c:	58024000 	.word	0x58024000
 801be10:	2213      	movs	r2, #19
 801be12:	2116      	movs	r1, #22
 801be14:	f104 0010 	add.w	r0, r4, #16
 801be18:	f000 fe98 	bl	801cb4c <core_set_error>
 801be1c:	e73a      	b.n	801bc94 <ai_platform_network_init+0x15c>
 801be1e:	4607      	mov	r7, r0
 801be20:	4680      	mov	r8, r0
 801be22:	4684      	mov	ip, r0
 801be24:	e773      	b.n	801bd0e <ai_platform_network_init+0x1d6>
 801be26:	f1b9 0f00 	cmp.w	r9, #0
 801be2a:	d002      	beq.n	801be32 <ai_platform_network_init+0x2fa>
 801be2c:	f04f 0c01 	mov.w	ip, #1
 801be30:	e7a7      	b.n	801bd82 <ai_platform_network_init+0x24a>
 801be32:	2110      	movs	r1, #16
 801be34:	2213      	movs	r2, #19
 801be36:	2600      	movs	r6, #0
 801be38:	1860      	adds	r0, r4, r1
 801be3a:	f000 fe87 	bl	801cb4c <core_set_error>
 801be3e:	e729      	b.n	801bc94 <ai_platform_network_init+0x15c>
 801be40:	2110      	movs	r1, #16
 801be42:	2211      	movs	r2, #17
 801be44:	462e      	mov	r6, r5
 801be46:	1860      	adds	r0, r4, r1
 801be48:	f000 fe80 	bl	801cb4c <core_set_error>
 801be4c:	e722      	b.n	801bc94 <ai_platform_network_init+0x15c>
 801be4e:	2110      	movs	r1, #16
 801be50:	2212      	movs	r2, #18
 801be52:	1860      	adds	r0, r4, r1
 801be54:	f000 fe7a 	bl	801cb4c <core_set_error>
 801be58:	e71c      	b.n	801bc94 <ai_platform_network_init+0x15c>
 801be5a:	4666      	mov	r6, ip
 801be5c:	e6b7      	b.n	801bbce <ai_platform_network_init+0x96>
 801be5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be60:	6a26      	ldr	r6, [r4, #32]
 801be62:	2701      	movs	r7, #1
 801be64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801be66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801be6a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801be6e:	e74e      	b.n	801bd0e <ai_platform_network_init+0x1d6>

0801be70 <ai_platform_network_post_init>:
 801be70:	b538      	push	{r3, r4, r5, lr}
 801be72:	2800      	cmp	r0, #0
 801be74:	d04e      	beq.n	801bf14 <ai_platform_network_post_init+0xa4>
 801be76:	4b8c      	ldr	r3, [pc, #560]	; (801c0a8 <ai_platform_network_post_init+0x238>)
 801be78:	4604      	mov	r4, r0
 801be7a:	6802      	ldr	r2, [r0, #0]
 801be7c:	429a      	cmp	r2, r3
 801be7e:	d149      	bne.n	801bf14 <ai_platform_network_post_init+0xa4>
 801be80:	f7fe fbb6 	bl	801a5f0 <_ai_platform_acquire_crc>
 801be84:	4b89      	ldr	r3, [pc, #548]	; (801c0ac <ai_platform_network_post_init+0x23c>)
 801be86:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801be90:	189a      	adds	r2, r3, r2
 801be92:	2a01      	cmp	r2, #1
 801be94:	f240 8095 	bls.w	801bfc2 <ai_platform_network_post_init+0x152>
 801be98:	f240 4249 	movw	r2, #1097	; 0x449
 801be9c:	4293      	cmp	r3, r2
 801be9e:	f000 8090 	beq.w	801bfc2 <ai_platform_network_post_init+0x152>
 801bea2:	4a83      	ldr	r2, [pc, #524]	; (801c0b0 <ai_platform_network_post_init+0x240>)
 801bea4:	6813      	ldr	r3, [r2, #0]
 801bea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801beaa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801beae:	f000 8096 	beq.w	801bfde <ai_platform_network_post_init+0x16e>
 801beb2:	6813      	ldr	r3, [r2, #0]
 801beb4:	f240 4183 	movw	r1, #1155	; 0x483
 801beb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bebc:	428b      	cmp	r3, r1
 801bebe:	f000 80b8 	beq.w	801c032 <ai_platform_network_post_init+0x1c2>
 801bec2:	6813      	ldr	r3, [r2, #0]
 801bec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bec8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801becc:	f000 80de 	beq.w	801c08c <ai_platform_network_post_init+0x21c>
 801bed0:	6813      	ldr	r3, [r2, #0]
 801bed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	f000 80bd 	beq.w	801c056 <ai_platform_network_post_init+0x1e6>
 801bedc:	f7fe fb8a 	bl	801a5f4 <_ai_platform_release_crc>
 801bee0:	68e3      	ldr	r3, [r4, #12]
 801bee2:	f013 0502 	ands.w	r5, r3, #2
 801bee6:	f000 808c 	beq.w	801c002 <ai_platform_network_post_init+0x192>
 801beea:	4620      	mov	r0, r4
 801beec:	f001 fcae 	bl	801d84c <ai_layers_post_init_all>
 801bef0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bef2:	b16b      	cbz	r3, 801bf10 <ai_platform_network_post_init+0xa0>
 801bef4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801bef6:	e007      	b.n	801bf08 <ai_platform_network_post_init+0x98>
 801bef8:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 801befc:	4798      	blx	r3
 801befe:	692b      	ldr	r3, [r5, #16]
 801bf00:	b133      	cbz	r3, 801bf10 <ai_platform_network_post_init+0xa0>
 801bf02:	42ab      	cmp	r3, r5
 801bf04:	461d      	mov	r5, r3
 801bf06:	d003      	beq.n	801bf10 <ai_platform_network_post_init+0xa0>
 801bf08:	4629      	mov	r1, r5
 801bf0a:	2000      	movs	r0, #0
 801bf0c:	2d00      	cmp	r5, #0
 801bf0e:	d1f3      	bne.n	801bef8 <ai_platform_network_post_init+0x88>
 801bf10:	2001      	movs	r0, #1
 801bf12:	bd38      	pop	{r3, r4, r5, pc}
 801bf14:	f7fe fb6c 	bl	801a5f0 <_ai_platform_acquire_crc>
 801bf18:	4b64      	ldr	r3, [pc, #400]	; (801c0ac <ai_platform_network_post_init+0x23c>)
 801bf1a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bf24:	185a      	adds	r2, r3, r1
 801bf26:	2a01      	cmp	r2, #1
 801bf28:	d92a      	bls.n	801bf80 <ai_platform_network_post_init+0x110>
 801bf2a:	f240 4249 	movw	r2, #1097	; 0x449
 801bf2e:	4293      	cmp	r3, r2
 801bf30:	d026      	beq.n	801bf80 <ai_platform_network_post_init+0x110>
 801bf32:	4a5f      	ldr	r2, [pc, #380]	; (801c0b0 <ai_platform_network_post_init+0x240>)
 801bf34:	6813      	ldr	r3, [r2, #0]
 801bf36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bf3a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801bf3e:	d02c      	beq.n	801bf9a <ai_platform_network_post_init+0x12a>
 801bf40:	6813      	ldr	r3, [r2, #0]
 801bf42:	f240 4183 	movw	r1, #1155	; 0x483
 801bf46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bf4a:	428b      	cmp	r3, r1
 801bf4c:	d060      	beq.n	801c010 <ai_platform_network_post_init+0x1a0>
 801bf4e:	6813      	ldr	r3, [r2, #0]
 801bf50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bf54:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bf58:	f000 808b 	beq.w	801c072 <ai_platform_network_post_init+0x202>
 801bf5c:	6813      	ldr	r3, [r2, #0]
 801bf5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d129      	bne.n	801bfba <ai_platform_network_post_init+0x14a>
 801bf66:	4a53      	ldr	r2, [pc, #332]	; (801c0b4 <ai_platform_network_post_init+0x244>)
 801bf68:	2301      	movs	r3, #1
 801bf6a:	6093      	str	r3, [r2, #8]
 801bf6c:	6893      	ldr	r3, [r2, #8]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d1fc      	bne.n	801bf6c <ai_platform_network_post_init+0xfc>
 801bf72:	4951      	ldr	r1, [pc, #324]	; (801c0b8 <ai_platform_network_post_init+0x248>)
 801bf74:	4b51      	ldr	r3, [pc, #324]	; (801c0bc <ai_platform_network_post_init+0x24c>)
 801bf76:	6011      	str	r1, [r2, #0]
 801bf78:	6812      	ldr	r2, [r2, #0]
 801bf7a:	429a      	cmp	r2, r3
 801bf7c:	d01d      	beq.n	801bfba <ai_platform_network_post_init+0x14a>
 801bf7e:	e7fe      	b.n	801bf7e <ai_platform_network_post_init+0x10e>
 801bf80:	4a4c      	ldr	r2, [pc, #304]	; (801c0b4 <ai_platform_network_post_init+0x244>)
 801bf82:	2301      	movs	r3, #1
 801bf84:	6093      	str	r3, [r2, #8]
 801bf86:	6893      	ldr	r3, [r2, #8]
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d1fc      	bne.n	801bf86 <ai_platform_network_post_init+0x116>
 801bf8c:	494a      	ldr	r1, [pc, #296]	; (801c0b8 <ai_platform_network_post_init+0x248>)
 801bf8e:	4b4b      	ldr	r3, [pc, #300]	; (801c0bc <ai_platform_network_post_init+0x24c>)
 801bf90:	6011      	str	r1, [r2, #0]
 801bf92:	6812      	ldr	r2, [r2, #0]
 801bf94:	429a      	cmp	r2, r3
 801bf96:	d010      	beq.n	801bfba <ai_platform_network_post_init+0x14a>
 801bf98:	e7fe      	b.n	801bf98 <ai_platform_network_post_init+0x128>
 801bf9a:	4a49      	ldr	r2, [pc, #292]	; (801c0c0 <ai_platform_network_post_init+0x250>)
 801bf9c:	2301      	movs	r3, #1
 801bf9e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801bfa2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d1fb      	bne.n	801bfa2 <ai_platform_network_post_init+0x132>
 801bfaa:	4943      	ldr	r1, [pc, #268]	; (801c0b8 <ai_platform_network_post_init+0x248>)
 801bfac:	4b43      	ldr	r3, [pc, #268]	; (801c0bc <ai_platform_network_post_init+0x24c>)
 801bfae:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801bfb2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801bfb6:	429a      	cmp	r2, r3
 801bfb8:	d110      	bne.n	801bfdc <ai_platform_network_post_init+0x16c>
 801bfba:	f7fe fb1b 	bl	801a5f4 <_ai_platform_release_crc>
 801bfbe:	2000      	movs	r0, #0
 801bfc0:	bd38      	pop	{r3, r4, r5, pc}
 801bfc2:	4a3c      	ldr	r2, [pc, #240]	; (801c0b4 <ai_platform_network_post_init+0x244>)
 801bfc4:	2301      	movs	r3, #1
 801bfc6:	6093      	str	r3, [r2, #8]
 801bfc8:	6893      	ldr	r3, [r2, #8]
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d1fc      	bne.n	801bfc8 <ai_platform_network_post_init+0x158>
 801bfce:	493a      	ldr	r1, [pc, #232]	; (801c0b8 <ai_platform_network_post_init+0x248>)
 801bfd0:	4b3a      	ldr	r3, [pc, #232]	; (801c0bc <ai_platform_network_post_init+0x24c>)
 801bfd2:	6011      	str	r1, [r2, #0]
 801bfd4:	6812      	ldr	r2, [r2, #0]
 801bfd6:	429a      	cmp	r2, r3
 801bfd8:	d080      	beq.n	801bedc <ai_platform_network_post_init+0x6c>
 801bfda:	e7fe      	b.n	801bfda <ai_platform_network_post_init+0x16a>
 801bfdc:	e7fe      	b.n	801bfdc <ai_platform_network_post_init+0x16c>
 801bfde:	4a38      	ldr	r2, [pc, #224]	; (801c0c0 <ai_platform_network_post_init+0x250>)
 801bfe0:	2301      	movs	r3, #1
 801bfe2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801bfe6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d1fb      	bne.n	801bfe6 <ai_platform_network_post_init+0x176>
 801bfee:	4932      	ldr	r1, [pc, #200]	; (801c0b8 <ai_platform_network_post_init+0x248>)
 801bff0:	4b32      	ldr	r3, [pc, #200]	; (801c0bc <ai_platform_network_post_init+0x24c>)
 801bff2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801bff6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801bffa:	429a      	cmp	r2, r3
 801bffc:	f43f af6e 	beq.w	801bedc <ai_platform_network_post_init+0x6c>
 801c000:	e7fe      	b.n	801c000 <ai_platform_network_post_init+0x190>
 801c002:	2210      	movs	r2, #16
 801c004:	2111      	movs	r1, #17
 801c006:	18a0      	adds	r0, r4, r2
 801c008:	f000 fda0 	bl	801cb4c <core_set_error>
 801c00c:	4628      	mov	r0, r5
 801c00e:	bd38      	pop	{r3, r4, r5, pc}
 801c010:	4a2b      	ldr	r2, [pc, #172]	; (801c0c0 <ai_platform_network_post_init+0x250>)
 801c012:	2301      	movs	r3, #1
 801c014:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801c018:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d1fb      	bne.n	801c018 <ai_platform_network_post_init+0x1a8>
 801c020:	4925      	ldr	r1, [pc, #148]	; (801c0b8 <ai_platform_network_post_init+0x248>)
 801c022:	4b26      	ldr	r3, [pc, #152]	; (801c0bc <ai_platform_network_post_init+0x24c>)
 801c024:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801c028:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801c02c:	429a      	cmp	r2, r3
 801c02e:	d0c4      	beq.n	801bfba <ai_platform_network_post_init+0x14a>
 801c030:	e7fe      	b.n	801c030 <ai_platform_network_post_init+0x1c0>
 801c032:	4a23      	ldr	r2, [pc, #140]	; (801c0c0 <ai_platform_network_post_init+0x250>)
 801c034:	2301      	movs	r3, #1
 801c036:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801c03a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d1fb      	bne.n	801c03a <ai_platform_network_post_init+0x1ca>
 801c042:	491d      	ldr	r1, [pc, #116]	; (801c0b8 <ai_platform_network_post_init+0x248>)
 801c044:	4b1d      	ldr	r3, [pc, #116]	; (801c0bc <ai_platform_network_post_init+0x24c>)
 801c046:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 801c04a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801c04e:	429a      	cmp	r2, r3
 801c050:	f43f af44 	beq.w	801bedc <ai_platform_network_post_init+0x6c>
 801c054:	e7fe      	b.n	801c054 <ai_platform_network_post_init+0x1e4>
 801c056:	4a17      	ldr	r2, [pc, #92]	; (801c0b4 <ai_platform_network_post_init+0x244>)
 801c058:	2301      	movs	r3, #1
 801c05a:	6093      	str	r3, [r2, #8]
 801c05c:	6893      	ldr	r3, [r2, #8]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d1fc      	bne.n	801c05c <ai_platform_network_post_init+0x1ec>
 801c062:	4915      	ldr	r1, [pc, #84]	; (801c0b8 <ai_platform_network_post_init+0x248>)
 801c064:	4b15      	ldr	r3, [pc, #84]	; (801c0bc <ai_platform_network_post_init+0x24c>)
 801c066:	6011      	str	r1, [r2, #0]
 801c068:	6812      	ldr	r2, [r2, #0]
 801c06a:	429a      	cmp	r2, r3
 801c06c:	f43f af36 	beq.w	801bedc <ai_platform_network_post_init+0x6c>
 801c070:	e7fe      	b.n	801c070 <ai_platform_network_post_init+0x200>
 801c072:	4a10      	ldr	r2, [pc, #64]	; (801c0b4 <ai_platform_network_post_init+0x244>)
 801c074:	2301      	movs	r3, #1
 801c076:	6093      	str	r3, [r2, #8]
 801c078:	6893      	ldr	r3, [r2, #8]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d1fc      	bne.n	801c078 <ai_platform_network_post_init+0x208>
 801c07e:	490e      	ldr	r1, [pc, #56]	; (801c0b8 <ai_platform_network_post_init+0x248>)
 801c080:	4b0e      	ldr	r3, [pc, #56]	; (801c0bc <ai_platform_network_post_init+0x24c>)
 801c082:	6011      	str	r1, [r2, #0]
 801c084:	6812      	ldr	r2, [r2, #0]
 801c086:	429a      	cmp	r2, r3
 801c088:	d097      	beq.n	801bfba <ai_platform_network_post_init+0x14a>
 801c08a:	e7fe      	b.n	801c08a <ai_platform_network_post_init+0x21a>
 801c08c:	4a09      	ldr	r2, [pc, #36]	; (801c0b4 <ai_platform_network_post_init+0x244>)
 801c08e:	2301      	movs	r3, #1
 801c090:	6093      	str	r3, [r2, #8]
 801c092:	6893      	ldr	r3, [r2, #8]
 801c094:	2b00      	cmp	r3, #0
 801c096:	d1fc      	bne.n	801c092 <ai_platform_network_post_init+0x222>
 801c098:	4907      	ldr	r1, [pc, #28]	; (801c0b8 <ai_platform_network_post_init+0x248>)
 801c09a:	4b08      	ldr	r3, [pc, #32]	; (801c0bc <ai_platform_network_post_init+0x24c>)
 801c09c:	6011      	str	r1, [r2, #0]
 801c09e:	6812      	ldr	r2, [r2, #0]
 801c0a0:	429a      	cmp	r2, r3
 801c0a2:	f43f af1b 	beq.w	801bedc <ai_platform_network_post_init+0x6c>
 801c0a6:	e7fe      	b.n	801c0a6 <ai_platform_network_post_init+0x236>
 801c0a8:	a1c00100 	.word	0xa1c00100
 801c0ac:	e0042000 	.word	0xe0042000
 801c0b0:	5c001000 	.word	0x5c001000
 801c0b4:	40023000 	.word	0x40023000
 801c0b8:	f407a5c2 	.word	0xf407a5c2
 801c0bc:	b5e8b5cd 	.word	0xb5e8b5cd
 801c0c0:	58024000 	.word	0x58024000

0801c0c4 <ai_platform_network_process>:
 801c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0c8:	b085      	sub	sp, #20
 801c0ca:	460e      	mov	r6, r1
 801c0cc:	4605      	mov	r5, r0
 801c0ce:	9201      	str	r2, [sp, #4]
 801c0d0:	b120      	cbz	r0, 801c0dc <ai_platform_network_process+0x18>
 801c0d2:	4b24      	ldr	r3, [pc, #144]	; (801c164 <ai_platform_network_process+0xa0>)
 801c0d4:	6802      	ldr	r2, [r0, #0]
 801c0d6:	429a      	cmp	r2, r3
 801c0d8:	bf18      	it	ne
 801c0da:	2500      	movne	r5, #0
 801c0dc:	f7fe fa88 	bl	801a5f0 <_ai_platform_acquire_crc>
 801c0e0:	4b21      	ldr	r3, [pc, #132]	; (801c168 <ai_platform_network_process+0xa4>)
 801c0e2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c0ec:	185a      	adds	r2, r3, r1
 801c0ee:	2a01      	cmp	r2, #1
 801c0f0:	d92b      	bls.n	801c14a <ai_platform_network_process+0x86>
 801c0f2:	f240 4249 	movw	r2, #1097	; 0x449
 801c0f6:	4293      	cmp	r3, r2
 801c0f8:	d027      	beq.n	801c14a <ai_platform_network_process+0x86>
 801c0fa:	4a1c      	ldr	r2, [pc, #112]	; (801c16c <ai_platform_network_process+0xa8>)
 801c0fc:	6813      	ldr	r3, [r2, #0]
 801c0fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c102:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801c106:	d039      	beq.n	801c17c <ai_platform_network_process+0xb8>
 801c108:	6813      	ldr	r3, [r2, #0]
 801c10a:	f240 4183 	movw	r1, #1155	; 0x483
 801c10e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c112:	428b      	cmp	r3, r1
 801c114:	f000 819c 	beq.w	801c450 <ai_platform_network_process+0x38c>
 801c118:	6813      	ldr	r3, [r2, #0]
 801c11a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c11e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c122:	f000 8179 	beq.w	801c418 <ai_platform_network_process+0x354>
 801c126:	6813      	ldr	r3, [r2, #0]
 801c128:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d136      	bne.n	801c19e <ai_platform_network_process+0xda>
 801c130:	4a0f      	ldr	r2, [pc, #60]	; (801c170 <ai_platform_network_process+0xac>)
 801c132:	2301      	movs	r3, #1
 801c134:	6093      	str	r3, [r2, #8]
 801c136:	6893      	ldr	r3, [r2, #8]
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d1fc      	bne.n	801c136 <ai_platform_network_process+0x72>
 801c13c:	4b0d      	ldr	r3, [pc, #52]	; (801c174 <ai_platform_network_process+0xb0>)
 801c13e:	6013      	str	r3, [r2, #0]
 801c140:	4b0d      	ldr	r3, [pc, #52]	; (801c178 <ai_platform_network_process+0xb4>)
 801c142:	6812      	ldr	r2, [r2, #0]
 801c144:	429a      	cmp	r2, r3
 801c146:	d02a      	beq.n	801c19e <ai_platform_network_process+0xda>
 801c148:	e7fe      	b.n	801c148 <ai_platform_network_process+0x84>
 801c14a:	4a09      	ldr	r2, [pc, #36]	; (801c170 <ai_platform_network_process+0xac>)
 801c14c:	2301      	movs	r3, #1
 801c14e:	6093      	str	r3, [r2, #8]
 801c150:	6893      	ldr	r3, [r2, #8]
 801c152:	2b00      	cmp	r3, #0
 801c154:	d1fc      	bne.n	801c150 <ai_platform_network_process+0x8c>
 801c156:	4b07      	ldr	r3, [pc, #28]	; (801c174 <ai_platform_network_process+0xb0>)
 801c158:	6013      	str	r3, [r2, #0]
 801c15a:	4b07      	ldr	r3, [pc, #28]	; (801c178 <ai_platform_network_process+0xb4>)
 801c15c:	6812      	ldr	r2, [r2, #0]
 801c15e:	429a      	cmp	r2, r3
 801c160:	d01d      	beq.n	801c19e <ai_platform_network_process+0xda>
 801c162:	e7fe      	b.n	801c162 <ai_platform_network_process+0x9e>
 801c164:	a1c00100 	.word	0xa1c00100
 801c168:	e0042000 	.word	0xe0042000
 801c16c:	5c001000 	.word	0x5c001000
 801c170:	40023000 	.word	0x40023000
 801c174:	f407a5c2 	.word	0xf407a5c2
 801c178:	b5e8b5cd 	.word	0xb5e8b5cd
 801c17c:	4ab0      	ldr	r2, [pc, #704]	; (801c440 <ai_platform_network_process+0x37c>)
 801c17e:	2301      	movs	r3, #1
 801c180:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801c184:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d1fb      	bne.n	801c184 <ai_platform_network_process+0xc0>
 801c18c:	4bad      	ldr	r3, [pc, #692]	; (801c444 <ai_platform_network_process+0x380>)
 801c18e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801c192:	4bad      	ldr	r3, [pc, #692]	; (801c448 <ai_platform_network_process+0x384>)
 801c194:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801c198:	429a      	cmp	r2, r3
 801c19a:	f040 812b 	bne.w	801c3f4 <ai_platform_network_process+0x330>
 801c19e:	f7fe fa29 	bl	801a5f4 <_ai_platform_release_crc>
 801c1a2:	2d00      	cmp	r5, #0
 801c1a4:	f000 8172 	beq.w	801c48c <ai_platform_network_process+0x3c8>
 801c1a8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	f000 8123 	beq.w	801c3f6 <ai_platform_network_process+0x332>
 801c1b0:	68eb      	ldr	r3, [r5, #12]
 801c1b2:	2200      	movs	r2, #0
 801c1b4:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c1b8:	f003 0303 	and.w	r3, r3, #3
 801c1bc:	616a      	str	r2, [r5, #20]
 801c1be:	2b03      	cmp	r3, #3
 801c1c0:	f040 811f 	bne.w	801c402 <ai_platform_network_process+0x33e>
 801c1c4:	2e00      	cmp	r6, #0
 801c1c6:	f000 8156 	beq.w	801c476 <ai_platform_network_process+0x3b2>
 801c1ca:	fab8 f788 	clz	r7, r8
 801c1ce:	097f      	lsrs	r7, r7, #5
 801c1d0:	f1b8 0f00 	cmp.w	r8, #0
 801c1d4:	f000 814f 	beq.w	801c476 <ai_platform_network_process+0x3b2>
 801c1d8:	f8b8 3000 	ldrh.w	r3, [r8]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	f000 814a 	beq.w	801c476 <ai_platform_network_process+0x3b2>
 801c1e2:	69b3      	ldr	r3, [r6, #24]
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	e9cd 3502 	strd	r3, r5, [sp, #8]
 801c1ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d072      	beq.n	801c2d8 <ai_platform_network_process+0x214>
 801c1f2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 801c1f6:	2c00      	cmp	r4, #0
 801c1f8:	d06e      	beq.n	801c2d8 <ai_platform_network_process+0x214>
 801c1fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c1fe:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801c202:	f8d3 a000 	ldr.w	sl, [r3]
 801c206:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 801c20a:	f000 8133 	beq.w	801c474 <ai_platform_network_process+0x3b0>
 801c20e:	69a3      	ldr	r3, [r4, #24]
 801c210:	2101      	movs	r1, #1
 801c212:	4630      	mov	r0, r6
 801c214:	685d      	ldr	r5, [r3, #4]
 801c216:	f7fe f9ad 	bl	801a574 <ai_buffer_get_size>
 801c21a:	4285      	cmp	r5, r0
 801c21c:	f0c0 8138 	bcc.w	801c490 <ai_platform_network_process+0x3cc>
 801c220:	68e0      	ldr	r0, [r4, #12]
 801c222:	69b1      	ldr	r1, [r6, #24]
 801c224:	68c2      	ldr	r2, [r0, #12]
 801c226:	68cb      	ldr	r3, [r1, #12]
 801c228:	429a      	cmp	r2, r3
 801c22a:	f040 8131 	bne.w	801c490 <ai_platform_network_process+0x3cc>
 801c22e:	6882      	ldr	r2, [r0, #8]
 801c230:	688b      	ldr	r3, [r1, #8]
 801c232:	429a      	cmp	r2, r3
 801c234:	f040 812c 	bne.w	801c490 <ai_platform_network_process+0x3cc>
 801c238:	6842      	ldr	r2, [r0, #4]
 801c23a:	684b      	ldr	r3, [r1, #4]
 801c23c:	429a      	cmp	r2, r3
 801c23e:	f040 8127 	bne.w	801c490 <ai_platform_network_process+0x3cc>
 801c242:	69a3      	ldr	r3, [r4, #24]
 801c244:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c248:	f005 ffdc 	bl	8022204 <ai_array_get_data_byte_size>
 801c24c:	4605      	mov	r5, r0
 801c24e:	4620      	mov	r0, r4
 801c250:	f005 ff2e 	bl	80220b0 <get_tensor_byte_size>
 801c254:	4285      	cmp	r5, r0
 801c256:	f0c0 811b 	bcc.w	801c490 <ai_platform_network_process+0x3cc>
 801c25a:	69a3      	ldr	r3, [r4, #24]
 801c25c:	6818      	ldr	r0, [r3, #0]
 801c25e:	f005 ff3d 	bl	80220dc <ai_array_to_buffer_fmt>
 801c262:	6833      	ldr	r3, [r6, #0]
 801c264:	4058      	eors	r0, r3
 801c266:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 801c26a:	f040 81ca 	bne.w	801c602 <ai_platform_network_process+0x53e>
 801c26e:	6873      	ldr	r3, [r6, #4]
 801c270:	2b00      	cmp	r3, #0
 801c272:	f000 81bd 	beq.w	801c5f0 <ai_platform_network_process+0x52c>
 801c276:	69b3      	ldr	r3, [r6, #24]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	f000 81ca 	beq.w	801c614 <ai_platform_network_process+0x550>
 801c280:	9a02      	ldr	r2, [sp, #8]
 801c282:	4620      	mov	r0, r4
 801c284:	3701      	adds	r7, #1
 801c286:	361c      	adds	r6, #28
 801c288:	429a      	cmp	r2, r3
 801c28a:	bf38      	it	cc
 801c28c:	461a      	movcc	r2, r3
 801c28e:	9202      	str	r2, [sp, #8]
 801c290:	f005 ff0e 	bl	80220b0 <get_tensor_byte_size>
 801c294:	f8c9 0008 	str.w	r0, [r9, #8]
 801c298:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	fb00 f303 	mul.w	r3, r0, r3
 801c2a2:	f8c9 300c 	str.w	r3, [r9, #12]
 801c2a6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 801c2aa:	440b      	add	r3, r1
 801c2ac:	f8c9 1004 	str.w	r1, [r9, #4]
 801c2b0:	f84a 300b 	str.w	r3, [sl, fp]
 801c2b4:	69a0      	ldr	r0, [r4, #24]
 801c2b6:	6803      	ldr	r3, [r0, #0]
 801c2b8:	009a      	lsls	r2, r3, #2
 801c2ba:	f100 80bb 	bmi.w	801c434 <ai_platform_network_process+0x370>
 801c2be:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801c2c2:	1a9b      	subs	r3, r3, r2
 801c2c4:	4419      	add	r1, r3
 801c2c6:	6081      	str	r1, [r0, #8]
 801c2c8:	69a3      	ldr	r3, [r4, #24]
 801c2ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801c2ce:	60da      	str	r2, [r3, #12]
 801c2d0:	f8b8 3000 	ldrh.w	r3, [r8]
 801c2d4:	42bb      	cmp	r3, r7
 801c2d6:	d888      	bhi.n	801c1ea <ai_platform_network_process+0x126>
 801c2d8:	9d03      	ldr	r5, [sp, #12]
 801c2da:	9b01      	ldr	r3, [sp, #4]
 801c2dc:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	f000 81a1 	beq.w	801c626 <ai_platform_network_process+0x562>
 801c2e4:	2a01      	cmp	r2, #1
 801c2e6:	f240 817b 	bls.w	801c5e0 <ai_platform_network_process+0x51c>
 801c2ea:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 801c2ee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	f000 8174 	beq.w	801c5e0 <ai_platform_network_process+0x51c>
 801c2f8:	9e01      	ldr	r6, [sp, #4]
 801c2fa:	2700      	movs	r7, #0
 801c2fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c300:	2b00      	cmp	r3, #0
 801c302:	f000 80d3 	beq.w	801c4ac <ai_platform_network_process+0x3e8>
 801c306:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 801c30a:	2c00      	cmp	r4, #0
 801c30c:	f000 80ce 	beq.w	801c4ac <ai_platform_network_process+0x3e8>
 801c310:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801c314:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 801c318:	f8d3 8000 	ldr.w	r8, [r3]
 801c31c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 801c320:	f000 819f 	beq.w	801c662 <ai_platform_network_process+0x59e>
 801c324:	69a3      	ldr	r3, [r4, #24]
 801c326:	2101      	movs	r1, #1
 801c328:	4630      	mov	r0, r6
 801c32a:	685b      	ldr	r3, [r3, #4]
 801c32c:	9301      	str	r3, [sp, #4]
 801c32e:	f7fe f921 	bl	801a574 <ai_buffer_get_size>
 801c332:	9b01      	ldr	r3, [sp, #4]
 801c334:	4283      	cmp	r3, r0
 801c336:	f0c0 8153 	bcc.w	801c5e0 <ai_platform_network_process+0x51c>
 801c33a:	68e0      	ldr	r0, [r4, #12]
 801c33c:	69b1      	ldr	r1, [r6, #24]
 801c33e:	68c2      	ldr	r2, [r0, #12]
 801c340:	68cb      	ldr	r3, [r1, #12]
 801c342:	429a      	cmp	r2, r3
 801c344:	f040 814c 	bne.w	801c5e0 <ai_platform_network_process+0x51c>
 801c348:	6882      	ldr	r2, [r0, #8]
 801c34a:	688b      	ldr	r3, [r1, #8]
 801c34c:	429a      	cmp	r2, r3
 801c34e:	f040 8147 	bne.w	801c5e0 <ai_platform_network_process+0x51c>
 801c352:	6842      	ldr	r2, [r0, #4]
 801c354:	684b      	ldr	r3, [r1, #4]
 801c356:	429a      	cmp	r2, r3
 801c358:	f040 8142 	bne.w	801c5e0 <ai_platform_network_process+0x51c>
 801c35c:	69a3      	ldr	r3, [r4, #24]
 801c35e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c362:	f005 ff4f 	bl	8022204 <ai_array_get_data_byte_size>
 801c366:	9001      	str	r0, [sp, #4]
 801c368:	4620      	mov	r0, r4
 801c36a:	f005 fea1 	bl	80220b0 <get_tensor_byte_size>
 801c36e:	9b01      	ldr	r3, [sp, #4]
 801c370:	4283      	cmp	r3, r0
 801c372:	f0c0 8135 	bcc.w	801c5e0 <ai_platform_network_process+0x51c>
 801c376:	69a3      	ldr	r3, [r4, #24]
 801c378:	6818      	ldr	r0, [r3, #0]
 801c37a:	f005 feaf 	bl	80220dc <ai_array_to_buffer_fmt>
 801c37e:	6833      	ldr	r3, [r6, #0]
 801c380:	4058      	eors	r0, r3
 801c382:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 801c386:	f040 815c 	bne.w	801c642 <ai_platform_network_process+0x57e>
 801c38a:	6873      	ldr	r3, [r6, #4]
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	f000 8150 	beq.w	801c632 <ai_platform_network_process+0x56e>
 801c392:	69b3      	ldr	r3, [r6, #24]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	2b00      	cmp	r3, #0
 801c398:	f000 815b 	beq.w	801c652 <ai_platform_network_process+0x58e>
 801c39c:	9a02      	ldr	r2, [sp, #8]
 801c39e:	4620      	mov	r0, r4
 801c3a0:	3701      	adds	r7, #1
 801c3a2:	361c      	adds	r6, #28
 801c3a4:	429a      	cmp	r2, r3
 801c3a6:	bf38      	it	cc
 801c3a8:	461a      	movcc	r2, r3
 801c3aa:	9202      	str	r2, [sp, #8]
 801c3ac:	f005 fe80 	bl	80220b0 <get_tensor_byte_size>
 801c3b0:	f8ca 0008 	str.w	r0, [sl, #8]
 801c3b4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	fb00 f303 	mul.w	r3, r0, r3
 801c3be:	f8ca 300c 	str.w	r3, [sl, #12]
 801c3c2:	f856 1c18 	ldr.w	r1, [r6, #-24]
 801c3c6:	440b      	add	r3, r1
 801c3c8:	f8ca 1004 	str.w	r1, [sl, #4]
 801c3cc:	f848 300b 	str.w	r3, [r8, fp]
 801c3d0:	69a0      	ldr	r0, [r4, #24]
 801c3d2:	6803      	ldr	r3, [r0, #0]
 801c3d4:	009b      	lsls	r3, r3, #2
 801c3d6:	d464      	bmi.n	801c4a2 <ai_platform_network_process+0x3de>
 801c3d8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801c3dc:	1a9b      	subs	r3, r3, r2
 801c3de:	4419      	add	r1, r3
 801c3e0:	6081      	str	r1, [r0, #8]
 801c3e2:	69a3      	ldr	r3, [r4, #24]
 801c3e4:	f8da 2004 	ldr.w	r2, [sl, #4]
 801c3e8:	60da      	str	r2, [r3, #12]
 801c3ea:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c3ee:	429f      	cmp	r7, r3
 801c3f0:	d384      	bcc.n	801c2fc <ai_platform_network_process+0x238>
 801c3f2:	e05b      	b.n	801c4ac <ai_platform_network_process+0x3e8>
 801c3f4:	e7fe      	b.n	801c3f4 <ai_platform_network_process+0x330>
 801c3f6:	68ea      	ldr	r2, [r5, #12]
 801c3f8:	616b      	str	r3, [r5, #20]
 801c3fa:	f002 0203 	and.w	r2, r2, #3
 801c3fe:	2a03      	cmp	r2, #3
 801c400:	d039      	beq.n	801c476 <ai_platform_network_process+0x3b2>
 801c402:	2230      	movs	r2, #48	; 0x30
 801c404:	2111      	movs	r1, #17
 801c406:	f105 0010 	add.w	r0, r5, #16
 801c40a:	2400      	movs	r4, #0
 801c40c:	f000 fb9e 	bl	801cb4c <core_set_error>
 801c410:	4620      	mov	r0, r4
 801c412:	b005      	add	sp, #20
 801c414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c418:	4a0c      	ldr	r2, [pc, #48]	; (801c44c <ai_platform_network_process+0x388>)
 801c41a:	2301      	movs	r3, #1
 801c41c:	6093      	str	r3, [r2, #8]
 801c41e:	6893      	ldr	r3, [r2, #8]
 801c420:	2b00      	cmp	r3, #0
 801c422:	d1fc      	bne.n	801c41e <ai_platform_network_process+0x35a>
 801c424:	4b07      	ldr	r3, [pc, #28]	; (801c444 <ai_platform_network_process+0x380>)
 801c426:	6013      	str	r3, [r2, #0]
 801c428:	4b07      	ldr	r3, [pc, #28]	; (801c448 <ai_platform_network_process+0x384>)
 801c42a:	6812      	ldr	r2, [r2, #0]
 801c42c:	429a      	cmp	r2, r3
 801c42e:	f43f aeb6 	beq.w	801c19e <ai_platform_network_process+0xda>
 801c432:	e7fe      	b.n	801c432 <ai_platform_network_process+0x36e>
 801c434:	f8b8 3000 	ldrh.w	r3, [r8]
 801c438:	429f      	cmp	r7, r3
 801c43a:	f4ff aed6 	bcc.w	801c1ea <ai_platform_network_process+0x126>
 801c43e:	e74b      	b.n	801c2d8 <ai_platform_network_process+0x214>
 801c440:	58024000 	.word	0x58024000
 801c444:	f407a5c2 	.word	0xf407a5c2
 801c448:	b5e8b5cd 	.word	0xb5e8b5cd
 801c44c:	40023000 	.word	0x40023000
 801c450:	4a88      	ldr	r2, [pc, #544]	; (801c674 <ai_platform_network_process+0x5b0>)
 801c452:	2301      	movs	r3, #1
 801c454:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801c458:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d1fb      	bne.n	801c458 <ai_platform_network_process+0x394>
 801c460:	4b85      	ldr	r3, [pc, #532]	; (801c678 <ai_platform_network_process+0x5b4>)
 801c462:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 801c466:	4b85      	ldr	r3, [pc, #532]	; (801c67c <ai_platform_network_process+0x5b8>)
 801c468:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801c46c:	429a      	cmp	r2, r3
 801c46e:	f43f ae96 	beq.w	801c19e <ai_platform_network_process+0xda>
 801c472:	e7fe      	b.n	801c472 <ai_platform_network_process+0x3ae>
 801c474:	9d03      	ldr	r5, [sp, #12]
 801c476:	2400      	movs	r4, #0
 801c478:	2217      	movs	r2, #23
 801c47a:	2112      	movs	r1, #18
 801c47c:	f105 0010 	add.w	r0, r5, #16
 801c480:	f000 fb64 	bl	801cb4c <core_set_error>
 801c484:	4620      	mov	r0, r4
 801c486:	b005      	add	sp, #20
 801c488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c48c:	462c      	mov	r4, r5
 801c48e:	e7bf      	b.n	801c410 <ai_platform_network_process+0x34c>
 801c490:	9d03      	ldr	r5, [sp, #12]
 801c492:	2218      	movs	r2, #24
 801c494:	2112      	movs	r1, #18
 801c496:	2400      	movs	r4, #0
 801c498:	f105 0010 	add.w	r0, r5, #16
 801c49c:	f000 fb56 	bl	801cb4c <core_set_error>
 801c4a0:	e7b6      	b.n	801c410 <ai_platform_network_process+0x34c>
 801c4a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c4a6:	429f      	cmp	r7, r3
 801c4a8:	f4ff af28 	bcc.w	801c2fc <ai_platform_network_process+0x238>
 801c4ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c4b0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 801c4b2:	82ab      	strh	r3, [r5, #20]
 801c4b4:	2a00      	cmp	r2, #0
 801c4b6:	f040 808d 	bne.w	801c5d4 <ai_platform_network_process+0x510>
 801c4ba:	4616      	mov	r6, r2
 801c4bc:	4617      	mov	r7, r2
 801c4be:	8aec      	ldrh	r4, [r5, #22]
 801c4c0:	429c      	cmp	r4, r3
 801c4c2:	d2a5      	bcs.n	801c410 <ai_platform_network_process+0x34c>
 801c4c4:	46ab      	mov	fp, r5
 801c4c6:	2e00      	cmp	r6, #0
 801c4c8:	d030      	beq.n	801c52c <ai_platform_network_process+0x468>
 801c4ca:	f04f 0800 	mov.w	r8, #0
 801c4ce:	e014      	b.n	801c4fa <ai_platform_network_process+0x436>
 801c4d0:	6882      	ldr	r2, [r0, #8]
 801c4d2:	68c5      	ldr	r5, [r0, #12]
 801c4d4:	6863      	ldr	r3, [r4, #4]
 801c4d6:	1b52      	subs	r2, r2, r5
 801c4d8:	4413      	add	r3, r2
 801c4da:	6083      	str	r3, [r0, #8]
 801c4dc:	698b      	ldr	r3, [r1, #24]
 801c4de:	6862      	ldr	r2, [r4, #4]
 801c4e0:	60da      	str	r2, [r3, #12]
 801c4e2:	f859 200a 	ldr.w	r2, [r9, sl]
 801c4e6:	f108 0801 	add.w	r8, r8, #1
 801c4ea:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801c4ee:	440b      	add	r3, r1
 801c4f0:	4293      	cmp	r3, r2
 801c4f2:	d301      	bcc.n	801c4f8 <ai_platform_network_process+0x434>
 801c4f4:	68e3      	ldr	r3, [r4, #12]
 801c4f6:	1ad3      	subs	r3, r2, r3
 801c4f8:	6063      	str	r3, [r4, #4]
 801c4fa:	8833      	ldrh	r3, [r6, #0]
 801c4fc:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801c500:	4543      	cmp	r3, r8
 801c502:	d913      	bls.n	801c52c <ai_platform_network_process+0x468>
 801c504:	6873      	ldr	r3, [r6, #4]
 801c506:	b18b      	cbz	r3, 801c52c <ai_platform_network_process+0x468>
 801c508:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 801c50c:	b171      	cbz	r1, 801c52c <ai_platform_network_process+0x468>
 801c50e:	6988      	ldr	r0, [r1, #24]
 801c510:	68b2      	ldr	r2, [r6, #8]
 801c512:	6803      	ldr	r3, [r0, #0]
 801c514:	f8d2 9000 	ldr.w	r9, [r2]
 801c518:	009d      	lsls	r5, r3, #2
 801c51a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801c51e:	d5d7      	bpl.n	801c4d0 <ai_platform_network_process+0x40c>
 801c520:	6880      	ldr	r0, [r0, #8]
 801c522:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801c526:	f005 feb1 	bl	802228c <memcpy>
 801c52a:	e7da      	b.n	801c4e2 <ai_platform_network_process+0x41e>
 801c52c:	4658      	mov	r0, fp
 801c52e:	f001 f9a1 	bl	801d874 <ai_layers_forward_all>
 801c532:	2f00      	cmp	r7, #0
 801c534:	d03f      	beq.n	801c5b6 <ai_platform_network_process+0x4f2>
 801c536:	2400      	movs	r4, #0
 801c538:	e016      	b.n	801c568 <ai_platform_network_process+0x4a4>
 801c53a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 801c53e:	f859 100a 	ldr.w	r1, [r9, sl]
 801c542:	4413      	add	r3, r2
 801c544:	428b      	cmp	r3, r1
 801c546:	d302      	bcc.n	801c54e <ai_platform_network_process+0x48a>
 801c548:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c54c:	1acb      	subs	r3, r1, r3
 801c54e:	f8c8 3004 	str.w	r3, [r8, #4]
 801c552:	6981      	ldr	r1, [r0, #24]
 801c554:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 801c558:	1b52      	subs	r2, r2, r5
 801c55a:	4413      	add	r3, r2
 801c55c:	608b      	str	r3, [r1, #8]
 801c55e:	6983      	ldr	r3, [r0, #24]
 801c560:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c564:	60da      	str	r2, [r3, #12]
 801c566:	3401      	adds	r4, #1
 801c568:	883b      	ldrh	r3, [r7, #0]
 801c56a:	42a3      	cmp	r3, r4
 801c56c:	d923      	bls.n	801c5b6 <ai_platform_network_process+0x4f2>
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	b30b      	cbz	r3, 801c5b6 <ai_platform_network_process+0x4f2>
 801c572:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801c576:	b1f0      	cbz	r0, 801c5b6 <ai_platform_network_process+0x4f2>
 801c578:	68ba      	ldr	r2, [r7, #8]
 801c57a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801c57e:	6983      	ldr	r3, [r0, #24]
 801c580:	f8d2 9000 	ldr.w	r9, [r2]
 801c584:	681a      	ldr	r2, [r3, #0]
 801c586:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801c58a:	0092      	lsls	r2, r2, #2
 801c58c:	d5d5      	bpl.n	801c53a <ai_platform_network_process+0x476>
 801c58e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801c592:	6899      	ldr	r1, [r3, #8]
 801c594:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c598:	f005 fe78 	bl	802228c <memcpy>
 801c59c:	f859 200a 	ldr.w	r2, [r9, sl]
 801c5a0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 801c5a4:	440b      	add	r3, r1
 801c5a6:	4293      	cmp	r3, r2
 801c5a8:	d302      	bcc.n	801c5b0 <ai_platform_network_process+0x4ec>
 801c5aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c5ae:	1ad3      	subs	r3, r2, r3
 801c5b0:	f8c8 3004 	str.w	r3, [r8, #4]
 801c5b4:	e7d7      	b.n	801c566 <ai_platform_network_process+0x4a2>
 801c5b6:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 801c5ba:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801c5be:	3401      	adds	r4, #1
 801c5c0:	b2a4      	uxth	r4, r4
 801c5c2:	42a3      	cmp	r3, r4
 801c5c4:	f8ab 4016 	strh.w	r4, [fp, #22]
 801c5c8:	f63f af7d 	bhi.w	801c4c6 <ai_platform_network_process+0x402>
 801c5cc:	4620      	mov	r0, r4
 801c5ce:	b005      	add	sp, #20
 801c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5d4:	2a01      	cmp	r2, #1
 801c5d6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 801c5d8:	d029      	beq.n	801c62e <ai_platform_network_process+0x56a>
 801c5da:	f106 070c 	add.w	r7, r6, #12
 801c5de:	e76e      	b.n	801c4be <ai_platform_network_process+0x3fa>
 801c5e0:	2218      	movs	r2, #24
 801c5e2:	2113      	movs	r1, #19
 801c5e4:	f105 0010 	add.w	r0, r5, #16
 801c5e8:	2400      	movs	r4, #0
 801c5ea:	f000 faaf 	bl	801cb4c <core_set_error>
 801c5ee:	e70f      	b.n	801c410 <ai_platform_network_process+0x34c>
 801c5f0:	9d03      	ldr	r5, [sp, #12]
 801c5f2:	4604      	mov	r4, r0
 801c5f4:	2217      	movs	r2, #23
 801c5f6:	2112      	movs	r1, #18
 801c5f8:	f105 0010 	add.w	r0, r5, #16
 801c5fc:	f000 faa6 	bl	801cb4c <core_set_error>
 801c600:	e706      	b.n	801c410 <ai_platform_network_process+0x34c>
 801c602:	9d03      	ldr	r5, [sp, #12]
 801c604:	2219      	movs	r2, #25
 801c606:	2112      	movs	r1, #18
 801c608:	2400      	movs	r4, #0
 801c60a:	f105 0010 	add.w	r0, r5, #16
 801c60e:	f000 fa9d 	bl	801cb4c <core_set_error>
 801c612:	e6fd      	b.n	801c410 <ai_platform_network_process+0x34c>
 801c614:	9d03      	ldr	r5, [sp, #12]
 801c616:	4604      	mov	r4, r0
 801c618:	2221      	movs	r2, #33	; 0x21
 801c61a:	2112      	movs	r1, #18
 801c61c:	f105 0010 	add.w	r0, r5, #16
 801c620:	f000 fa94 	bl	801cb4c <core_set_error>
 801c624:	e6f4      	b.n	801c410 <ai_platform_network_process+0x34c>
 801c626:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c62a:	82ab      	strh	r3, [r5, #20]
 801c62c:	e742      	b.n	801c4b4 <ai_platform_network_process+0x3f0>
 801c62e:	2700      	movs	r7, #0
 801c630:	e745      	b.n	801c4be <ai_platform_network_process+0x3fa>
 801c632:	4604      	mov	r4, r0
 801c634:	2217      	movs	r2, #23
 801c636:	2113      	movs	r1, #19
 801c638:	f105 0010 	add.w	r0, r5, #16
 801c63c:	f000 fa86 	bl	801cb4c <core_set_error>
 801c640:	e6e6      	b.n	801c410 <ai_platform_network_process+0x34c>
 801c642:	2219      	movs	r2, #25
 801c644:	2113      	movs	r1, #19
 801c646:	f105 0010 	add.w	r0, r5, #16
 801c64a:	2400      	movs	r4, #0
 801c64c:	f000 fa7e 	bl	801cb4c <core_set_error>
 801c650:	e6de      	b.n	801c410 <ai_platform_network_process+0x34c>
 801c652:	4604      	mov	r4, r0
 801c654:	2221      	movs	r2, #33	; 0x21
 801c656:	2113      	movs	r1, #19
 801c658:	f105 0010 	add.w	r0, r5, #16
 801c65c:	f000 fa76 	bl	801cb4c <core_set_error>
 801c660:	e6d6      	b.n	801c410 <ai_platform_network_process+0x34c>
 801c662:	2217      	movs	r2, #23
 801c664:	2113      	movs	r1, #19
 801c666:	f105 0010 	add.w	r0, r5, #16
 801c66a:	4654      	mov	r4, sl
 801c66c:	f000 fa6e 	bl	801cb4c <core_set_error>
 801c670:	e6ce      	b.n	801c410 <ai_platform_network_process+0x34c>
 801c672:	bf00      	nop
 801c674:	58024000 	.word	0x58024000
 801c678:	f407a5c2 	.word	0xf407a5c2
 801c67c:	b5e8b5cd 	.word	0xb5e8b5cd

0801c680 <node_convert>:
 801c680:	6982      	ldr	r2, [r0, #24]
 801c682:	8813      	ldrh	r3, [r2, #0]
 801c684:	2b00      	cmp	r3, #0
 801c686:	d04a      	beq.n	801c71e <node_convert+0x9e>
 801c688:	6852      	ldr	r2, [r2, #4]
 801c68a:	6850      	ldr	r0, [r2, #4]
 801c68c:	b100      	cbz	r0, 801c690 <node_convert+0x10>
 801c68e:	6800      	ldr	r0, [r0, #0]
 801c690:	2b01      	cmp	r3, #1
 801c692:	f000 813d 	beq.w	801c910 <node_convert+0x290>
 801c696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c69a:	6915      	ldr	r5, [r2, #16]
 801c69c:	b105      	cbz	r5, 801c6a0 <node_convert+0x20>
 801c69e:	682d      	ldr	r5, [r5, #0]
 801c6a0:	6883      	ldr	r3, [r0, #8]
 801c6a2:	0a1b      	lsrs	r3, r3, #8
 801c6a4:	f000 80ee 	beq.w	801c884 <node_convert+0x204>
 801c6a8:	68c1      	ldr	r1, [r0, #12]
 801c6aa:	2401      	movs	r4, #1
 801c6ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c6b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c6b4:	4299      	cmp	r1, r3
 801c6b6:	fb02 f404 	mul.w	r4, r2, r4
 801c6ba:	d1f9      	bne.n	801c6b0 <node_convert+0x30>
 801c6bc:	6982      	ldr	r2, [r0, #24]
 801c6be:	69af      	ldr	r7, [r5, #24]
 801c6c0:	6813      	ldr	r3, [r2, #0]
 801c6c2:	f3c3 4143 	ubfx	r1, r3, #17, #4
 801c6c6:	2901      	cmp	r1, #1
 801c6c8:	d02b      	beq.n	801c722 <node_convert+0xa2>
 801c6ca:	6801      	ldr	r1, [r0, #0]
 801c6cc:	68bd      	ldr	r5, [r7, #8]
 801c6ce:	2900      	cmp	r1, #0
 801c6d0:	d069      	beq.n	801c7a6 <node_convert+0x126>
 801c6d2:	684e      	ldr	r6, [r1, #4]
 801c6d4:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 801c6d8:	6892      	ldr	r2, [r2, #8]
 801c6da:	2e00      	cmp	r6, #0
 801c6dc:	f000 80b8 	beq.w	801c850 <node_convert+0x1d0>
 801c6e0:	884b      	ldrh	r3, [r1, #2]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	f000 8089 	beq.w	801c7fa <node_convert+0x17a>
 801c6e8:	6833      	ldr	r3, [r6, #0]
 801c6ea:	ed93 7a00 	vldr	s14, [r3]
 801c6ee:	6873      	ldr	r3, [r6, #4]
 801c6f0:	2800      	cmp	r0, #0
 801c6f2:	f000 80c5 	beq.w	801c880 <node_convert+0x200>
 801c6f6:	f993 0000 	ldrsb.w	r0, [r3]
 801c6fa:	b174      	cbz	r4, 801c71a <node_convert+0x9a>
 801c6fc:	4629      	mov	r1, r5
 801c6fe:	4414      	add	r4, r2
 801c700:	f912 3b01 	ldrsb.w	r3, [r2], #1
 801c704:	1a1b      	subs	r3, r3, r0
 801c706:	42a2      	cmp	r2, r4
 801c708:	ee07 3a90 	vmov	s15, r3
 801c70c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c710:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c714:	ece1 7a01 	vstmia	r1!, {s15}
 801c718:	d1f2      	bne.n	801c700 <node_convert+0x80>
 801c71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c71e:	685b      	ldr	r3, [r3, #4]
 801c720:	deff      	udf	#255	; 0xff
 801c722:	682e      	ldr	r6, [r5, #0]
 801c724:	6895      	ldr	r5, [r2, #8]
 801c726:	2e00      	cmp	r6, #0
 801c728:	f000 80ae 	beq.w	801c888 <node_convert+0x208>
 801c72c:	683b      	ldr	r3, [r7, #0]
 801c72e:	6871      	ldr	r1, [r6, #4]
 801c730:	68ba      	ldr	r2, [r7, #8]
 801c732:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 801c736:	2900      	cmp	r1, #0
 801c738:	d064      	beq.n	801c804 <node_convert+0x184>
 801c73a:	8870      	ldrh	r0, [r6, #2]
 801c73c:	2800      	cmp	r0, #0
 801c73e:	d067      	beq.n	801c810 <node_convert+0x190>
 801c740:	6808      	ldr	r0, [r1, #0]
 801c742:	edd0 7a00 	vldr	s15, [r0]
 801c746:	2b00      	cmp	r3, #0
 801c748:	f000 80d7 	beq.w	801c8fa <node_convert+0x27a>
 801c74c:	684b      	ldr	r3, [r1, #4]
 801c74e:	f993 3000 	ldrsb.w	r3, [r3]
 801c752:	ee06 3a90 	vmov	s13, r3
 801c756:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c75a:	2c00      	cmp	r4, #0
 801c75c:	d0dd      	beq.n	801c71a <node_convert+0x9a>
 801c75e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c762:	4414      	add	r4, r2
 801c764:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801c768:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 801c918 <node_convert+0x298>
 801c76c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801c770:	ecb5 7a01 	vldmia	r5!, {s14}
 801c774:	eef0 7a66 	vmov.f32	s15, s13
 801c778:	eee7 7a06 	vfma.f32	s15, s14, s12
 801c77c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c784:	bfac      	ite	ge
 801c786:	ee77 7aa5 	vaddge.f32	s15, s15, s11
 801c78a:	ee77 7ac5 	vsublt.f32	s15, s15, s10
 801c78e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c792:	ee17 3a90 	vmov	r3, s15
 801c796:	f303 0307 	ssat	r3, #8, r3
 801c79a:	f802 3b01 	strb.w	r3, [r2], #1
 801c79e:	42a2      	cmp	r2, r4
 801c7a0:	d1e6      	bne.n	801c770 <node_convert+0xf0>
 801c7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7a6:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 801c7aa:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 801c7ae:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 801c7b2:	6890      	ldr	r0, [r2, #8]
 801c7b4:	1b8e      	subs	r6, r1, r6
 801c7b6:	2908      	cmp	r1, #8
 801c7b8:	4622      	mov	r2, r4
 801c7ba:	4629      	mov	r1, r5
 801c7bc:	f106 0640 	add.w	r6, r6, #64	; 0x40
 801c7c0:	eba6 0603 	sub.w	r6, r6, r3
 801c7c4:	f000 808b 	beq.w	801c8de <node_convert+0x25e>
 801c7c8:	f005 fb90 	bl	8021eec <st_dsp_arm_q15_to_float>
 801c7cc:	2e00      	cmp	r6, #0
 801c7ce:	d0a4      	beq.n	801c71a <node_convert+0x9a>
 801c7d0:	ee07 6a90 	vmov	s15, r6
 801c7d4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801c7d8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801c7dc:	f008 fdd8 	bl	8025390 <powf>
 801c7e0:	2c00      	cmp	r4, #0
 801c7e2:	d09a      	beq.n	801c71a <node_convert+0x9a>
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	ecf5 7a01 	vldmia	r5!, {s15}
 801c7ea:	3301      	adds	r3, #1
 801c7ec:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c7f0:	429c      	cmp	r4, r3
 801c7f2:	ed45 7a01 	vstr	s15, [r5, #-4]
 801c7f6:	d1f6      	bne.n	801c7e6 <node_convert+0x166>
 801c7f8:	e78f      	b.n	801c71a <node_convert+0x9a>
 801c7fa:	b358      	cbz	r0, 801c854 <node_convert+0x1d4>
 801c7fc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801c91c <node_convert+0x29c>
 801c800:	4618      	mov	r0, r3
 801c802:	e77a      	b.n	801c6fa <node_convert+0x7a>
 801c804:	b133      	cbz	r3, 801c814 <node_convert+0x194>
 801c806:	eddf 6a45 	vldr	s13, [pc, #276]	; 801c91c <node_convert+0x29c>
 801c80a:	eef0 7a66 	vmov.f32	s15, s13
 801c80e:	e7a4      	b.n	801c75a <node_convert+0xda>
 801c810:	2b00      	cmp	r3, #0
 801c812:	d1f8      	bne.n	801c806 <node_convert+0x186>
 801c814:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801c818:	eddf 7a40 	vldr	s15, [pc, #256]	; 801c91c <node_convert+0x29c>
 801c81c:	2c00      	cmp	r4, #0
 801c81e:	f43f af7c 	beq.w	801c71a <node_convert+0x9a>
 801c822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c826:	4414      	add	r4, r2
 801c828:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801c82c:	ecb5 7a01 	vldmia	r5!, {s14}
 801c830:	eef0 7a66 	vmov.f32	s15, s13
 801c834:	eee7 7a06 	vfma.f32	s15, s14, s12
 801c838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c83c:	ee17 3a90 	vmov	r3, s15
 801c840:	f383 0308 	usat	r3, #8, r3
 801c844:	f802 3b01 	strb.w	r3, [r2], #1
 801c848:	42a2      	cmp	r2, r4
 801c84a:	d1ef      	bne.n	801c82c <node_convert+0x1ac>
 801c84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c850:	2800      	cmp	r0, #0
 801c852:	d147      	bne.n	801c8e4 <node_convert+0x264>
 801c854:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801c91c <node_convert+0x29c>
 801c858:	2c00      	cmp	r4, #0
 801c85a:	f43f af5e 	beq.w	801c71a <node_convert+0x9a>
 801c85e:	4629      	mov	r1, r5
 801c860:	4414      	add	r4, r2
 801c862:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c866:	1a1b      	subs	r3, r3, r0
 801c868:	42a2      	cmp	r2, r4
 801c86a:	ee07 3a90 	vmov	s15, r3
 801c86e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c872:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c876:	ece1 7a01 	vstmia	r1!, {s15}
 801c87a:	d1f2      	bne.n	801c862 <node_convert+0x1e2>
 801c87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c880:	7818      	ldrb	r0, [r3, #0]
 801c882:	e7e9      	b.n	801c858 <node_convert+0x1d8>
 801c884:	2401      	movs	r4, #1
 801c886:	e719      	b.n	801c6bc <node_convert+0x3c>
 801c888:	683a      	ldr	r2, [r7, #0]
 801c88a:	f3c2 18c6 	ubfx	r8, r2, #7, #7
 801c88e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 801c892:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 801c896:	eba8 0303 	sub.w	r3, r8, r3
 801c89a:	3340      	adds	r3, #64	; 0x40
 801c89c:	1a9b      	subs	r3, r3, r2
 801c89e:	d014      	beq.n	801c8ca <node_convert+0x24a>
 801c8a0:	425b      	negs	r3, r3
 801c8a2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801c8a6:	ee00 3a90 	vmov	s1, r3
 801c8aa:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c8ae:	f008 fd6f 	bl	8025390 <powf>
 801c8b2:	b154      	cbz	r4, 801c8ca <node_convert+0x24a>
 801c8b4:	4633      	mov	r3, r6
 801c8b6:	462a      	mov	r2, r5
 801c8b8:	ecf2 7a01 	vldmia	r2!, {s15}
 801c8bc:	3301      	adds	r3, #1
 801c8be:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c8c2:	42a3      	cmp	r3, r4
 801c8c4:	ed42 7a01 	vstr	s15, [r2, #-4]
 801c8c8:	d1f6      	bne.n	801c8b8 <node_convert+0x238>
 801c8ca:	f1b8 0f08 	cmp.w	r8, #8
 801c8ce:	d00d      	beq.n	801c8ec <node_convert+0x26c>
 801c8d0:	4622      	mov	r2, r4
 801c8d2:	68b9      	ldr	r1, [r7, #8]
 801c8d4:	4628      	mov	r0, r5
 801c8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c8da:	f005 b985 	b.w	8021be8 <st_dsp_arm_float_to_q15>
 801c8de:	f005 fb6b 	bl	8021fb8 <st_dsp_arm_q7_to_float>
 801c8e2:	e773      	b.n	801c7cc <node_convert+0x14c>
 801c8e4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801c91c <node_convert+0x29c>
 801c8e8:	4630      	mov	r0, r6
 801c8ea:	e706      	b.n	801c6fa <node_convert+0x7a>
 801c8ec:	4622      	mov	r2, r4
 801c8ee:	68b9      	ldr	r1, [r7, #8]
 801c8f0:	4628      	mov	r0, r5
 801c8f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c8f6:	f005 ba2d 	b.w	8021d54 <st_dsp_arm_float_to_q7>
 801c8fa:	684b      	ldr	r3, [r1, #4]
 801c8fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c900:	781b      	ldrb	r3, [r3, #0]
 801c902:	ee06 3a90 	vmov	s13, r3
 801c906:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801c90a:	ee76 6a87 	vadd.f32	s13, s13, s14
 801c90e:	e785      	b.n	801c81c <node_convert+0x19c>
 801c910:	2300      	movs	r3, #0
 801c912:	685b      	ldr	r3, [r3, #4]
 801c914:	deff      	udf	#255	; 0xff
 801c916:	bf00      	nop
 801c918:	3efffffc 	.word	0x3efffffc
 801c91c:	00000000 	.word	0x00000000

0801c920 <node_convert_integer>:
 801c920:	6982      	ldr	r2, [r0, #24]
 801c922:	8813      	ldrh	r3, [r2, #0]
 801c924:	2b00      	cmp	r3, #0
 801c926:	d058      	beq.n	801c9da <node_convert_integer+0xba>
 801c928:	b570      	push	{r4, r5, r6, lr}
 801c92a:	6852      	ldr	r2, [r2, #4]
 801c92c:	b082      	sub	sp, #8
 801c92e:	6856      	ldr	r6, [r2, #4]
 801c930:	b106      	cbz	r6, 801c934 <node_convert_integer+0x14>
 801c932:	6836      	ldr	r6, [r6, #0]
 801c934:	2b01      	cmp	r3, #1
 801c936:	f000 8100 	beq.w	801cb3a <node_convert_integer+0x21a>
 801c93a:	6915      	ldr	r5, [r2, #16]
 801c93c:	b105      	cbz	r5, 801c940 <node_convert_integer+0x20>
 801c93e:	682d      	ldr	r5, [r5, #0]
 801c940:	68b3      	ldr	r3, [r6, #8]
 801c942:	0a1b      	lsrs	r3, r3, #8
 801c944:	f000 80d3 	beq.w	801caee <node_convert_integer+0x1ce>
 801c948:	68f0      	ldr	r0, [r6, #12]
 801c94a:	2201      	movs	r2, #1
 801c94c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801c950:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c954:	4298      	cmp	r0, r3
 801c956:	fb01 f202 	mul.w	r2, r1, r2
 801c95a:	d1f9      	bne.n	801c950 <node_convert_integer+0x30>
 801c95c:	6833      	ldr	r3, [r6, #0]
 801c95e:	682c      	ldr	r4, [r5, #0]
 801c960:	b17b      	cbz	r3, 801c982 <node_convert_integer+0x62>
 801c962:	6859      	ldr	r1, [r3, #4]
 801c964:	b169      	cbz	r1, 801c982 <node_convert_integer+0x62>
 801c966:	8858      	ldrh	r0, [r3, #2]
 801c968:	b158      	cbz	r0, 801c982 <node_convert_integer+0x62>
 801c96a:	6809      	ldr	r1, [r1, #0]
 801c96c:	ed91 7a00 	vldr	s14, [r1]
 801c970:	b15c      	cbz	r4, 801c98a <node_convert_integer+0x6a>
 801c972:	6861      	ldr	r1, [r4, #4]
 801c974:	b149      	cbz	r1, 801c98a <node_convert_integer+0x6a>
 801c976:	8860      	ldrh	r0, [r4, #2]
 801c978:	b138      	cbz	r0, 801c98a <node_convert_integer+0x6a>
 801c97a:	6809      	ldr	r1, [r1, #0]
 801c97c:	edd1 7a00 	vldr	s15, [r1]
 801c980:	e005      	b.n	801c98e <node_convert_integer+0x6e>
 801c982:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 801cb40 <node_convert_integer+0x220>
 801c986:	2c00      	cmp	r4, #0
 801c988:	d1f3      	bne.n	801c972 <node_convert_integer+0x52>
 801c98a:	eddf 7a6d 	vldr	s15, [pc, #436]	; 801cb40 <node_convert_integer+0x220>
 801c98e:	69b0      	ldr	r0, [r6, #24]
 801c990:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801c994:	69ad      	ldr	r5, [r5, #24]
 801c996:	6806      	ldr	r6, [r0, #0]
 801c998:	6829      	ldr	r1, [r5, #0]
 801c99a:	0236      	lsls	r6, r6, #8
 801c99c:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 801c9a0:	d41d      	bmi.n	801c9de <node_convert_integer+0xbe>
 801c9a2:	2900      	cmp	r1, #0
 801c9a4:	f040 8081 	bne.w	801caaa <node_convert_integer+0x18a>
 801c9a8:	6880      	ldr	r0, [r0, #8]
 801c9aa:	68a9      	ldr	r1, [r5, #8]
 801c9ac:	b13b      	cbz	r3, 801c9be <node_convert_integer+0x9e>
 801c9ae:	685d      	ldr	r5, [r3, #4]
 801c9b0:	2d00      	cmp	r5, #0
 801c9b2:	f000 80a7 	beq.w	801cb04 <node_convert_integer+0x1e4>
 801c9b6:	885b      	ldrh	r3, [r3, #2]
 801c9b8:	b10b      	cbz	r3, 801c9be <node_convert_integer+0x9e>
 801c9ba:	686b      	ldr	r3, [r5, #4]
 801c9bc:	781b      	ldrb	r3, [r3, #0]
 801c9be:	b13c      	cbz	r4, 801c9d0 <node_convert_integer+0xb0>
 801c9c0:	6865      	ldr	r5, [r4, #4]
 801c9c2:	2d00      	cmp	r5, #0
 801c9c4:	f000 80ad 	beq.w	801cb22 <node_convert_integer+0x202>
 801c9c8:	8864      	ldrh	r4, [r4, #2]
 801c9ca:	b10c      	cbz	r4, 801c9d0 <node_convert_integer+0xb0>
 801c9cc:	686c      	ldr	r4, [r5, #4]
 801c9ce:	7824      	ldrb	r4, [r4, #0]
 801c9d0:	9400      	str	r4, [sp, #0]
 801c9d2:	f001 fa3d 	bl	801de50 <forward_lite_node_convert_integer_iu8ou8>
 801c9d6:	b002      	add	sp, #8
 801c9d8:	bd70      	pop	{r4, r5, r6, pc}
 801c9da:	685b      	ldr	r3, [r3, #4]
 801c9dc:	deff      	udf	#255	; 0xff
 801c9de:	2900      	cmp	r1, #0
 801c9e0:	d042      	beq.n	801ca68 <node_convert_integer+0x148>
 801c9e2:	6886      	ldr	r6, [r0, #8]
 801c9e4:	68a9      	ldr	r1, [r5, #8]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d07f      	beq.n	801caea <node_convert_integer+0x1ca>
 801c9ea:	6858      	ldr	r0, [r3, #4]
 801c9ec:	2800      	cmp	r0, #0
 801c9ee:	f000 8092 	beq.w	801cb16 <node_convert_integer+0x1f6>
 801c9f2:	885d      	ldrh	r5, [r3, #2]
 801c9f4:	b115      	cbz	r5, 801c9fc <node_convert_integer+0xdc>
 801c9f6:	6843      	ldr	r3, [r0, #4]
 801c9f8:	f993 5000 	ldrsb.w	r5, [r3]
 801c9fc:	2c00      	cmp	r4, #0
 801c9fe:	d078      	beq.n	801caf2 <node_convert_integer+0x1d2>
 801ca00:	6863      	ldr	r3, [r4, #4]
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	d07b      	beq.n	801cafe <node_convert_integer+0x1de>
 801ca06:	8860      	ldrh	r0, [r4, #2]
 801ca08:	2800      	cmp	r0, #0
 801ca0a:	d075      	beq.n	801caf8 <node_convert_integer+0x1d8>
 801ca0c:	685b      	ldr	r3, [r3, #4]
 801ca0e:	f993 3000 	ldrsb.w	r3, [r3]
 801ca12:	ee06 3a90 	vmov	s13, r3
 801ca16:	2a00      	cmp	r2, #0
 801ca18:	d0dd      	beq.n	801c9d6 <node_convert_integer+0xb6>
 801ca1a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ca1e:	4432      	add	r2, r6
 801ca20:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801ca24:	eddf 5a47 	vldr	s11, [pc, #284]	; 801cb44 <node_convert_integer+0x224>
 801ca28:	f916 3b01 	ldrsb.w	r3, [r6], #1
 801ca2c:	1b5b      	subs	r3, r3, r5
 801ca2e:	ee07 3a90 	vmov	s15, r3
 801ca32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ca36:	eef0 7a66 	vmov.f32	s15, s13
 801ca3a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801ca3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ca42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca46:	bfcc      	ite	gt
 801ca48:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 801ca4c:	ee77 7ae5 	vsuble.f32	s15, s15, s11
 801ca50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ca54:	ee17 3a90 	vmov	r3, s15
 801ca58:	f303 0307 	ssat	r3, #8, r3
 801ca5c:	4296      	cmp	r6, r2
 801ca5e:	f801 3b01 	strb.w	r3, [r1], #1
 801ca62:	d1e1      	bne.n	801ca28 <node_convert_integer+0x108>
 801ca64:	b002      	add	sp, #8
 801ca66:	bd70      	pop	{r4, r5, r6, pc}
 801ca68:	6880      	ldr	r0, [r0, #8]
 801ca6a:	68a9      	ldr	r1, [r5, #8]
 801ca6c:	b13b      	cbz	r3, 801ca7e <node_convert_integer+0x15e>
 801ca6e:	685d      	ldr	r5, [r3, #4]
 801ca70:	2d00      	cmp	r5, #0
 801ca72:	d04c      	beq.n	801cb0e <node_convert_integer+0x1ee>
 801ca74:	885b      	ldrh	r3, [r3, #2]
 801ca76:	b113      	cbz	r3, 801ca7e <node_convert_integer+0x15e>
 801ca78:	686b      	ldr	r3, [r5, #4]
 801ca7a:	f993 3000 	ldrsb.w	r3, [r3]
 801ca7e:	b134      	cbz	r4, 801ca8e <node_convert_integer+0x16e>
 801ca80:	6865      	ldr	r5, [r4, #4]
 801ca82:	2d00      	cmp	r5, #0
 801ca84:	d04b      	beq.n	801cb1e <node_convert_integer+0x1fe>
 801ca86:	8864      	ldrh	r4, [r4, #2]
 801ca88:	b10c      	cbz	r4, 801ca8e <node_convert_integer+0x16e>
 801ca8a:	686c      	ldr	r4, [r5, #4]
 801ca8c:	7824      	ldrb	r4, [r4, #0]
 801ca8e:	eeb4 7a67 	vcmp.f32	s14, s15
 801ca92:	9400      	str	r4, [sp, #0]
 801ca94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca98:	d103      	bne.n	801caa2 <node_convert_integer+0x182>
 801ca9a:	f103 0580 	add.w	r5, r3, #128	; 0x80
 801ca9e:	42a5      	cmp	r5, r4
 801caa0:	d048      	beq.n	801cb34 <node_convert_integer+0x214>
 801caa2:	f001 fa77 	bl	801df94 <forward_lite_node_convert_integer_is8ou8>
 801caa6:	b002      	add	sp, #8
 801caa8:	bd70      	pop	{r4, r5, r6, pc}
 801caaa:	b133      	cbz	r3, 801caba <node_convert_integer+0x19a>
 801caac:	6859      	ldr	r1, [r3, #4]
 801caae:	2900      	cmp	r1, #0
 801cab0:	d039      	beq.n	801cb26 <node_convert_integer+0x206>
 801cab2:	885b      	ldrh	r3, [r3, #2]
 801cab4:	b10b      	cbz	r3, 801caba <node_convert_integer+0x19a>
 801cab6:	684b      	ldr	r3, [r1, #4]
 801cab8:	781b      	ldrb	r3, [r3, #0]
 801caba:	b134      	cbz	r4, 801caca <node_convert_integer+0x1aa>
 801cabc:	6861      	ldr	r1, [r4, #4]
 801cabe:	b361      	cbz	r1, 801cb1a <node_convert_integer+0x1fa>
 801cac0:	8864      	ldrh	r4, [r4, #2]
 801cac2:	b114      	cbz	r4, 801caca <node_convert_integer+0x1aa>
 801cac4:	6849      	ldr	r1, [r1, #4]
 801cac6:	f991 4000 	ldrsb.w	r4, [r1]
 801caca:	eeb4 7a67 	vcmp.f32	s14, s15
 801cace:	6880      	ldr	r0, [r0, #8]
 801cad0:	68a9      	ldr	r1, [r5, #8]
 801cad2:	9400      	str	r4, [sp, #0]
 801cad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cad8:	d103      	bne.n	801cae2 <node_convert_integer+0x1c2>
 801cada:	f104 0580 	add.w	r5, r4, #128	; 0x80
 801cade:	42ab      	cmp	r3, r5
 801cae0:	d025      	beq.n	801cb2e <node_convert_integer+0x20e>
 801cae2:	f001 f9df 	bl	801dea4 <forward_lite_node_convert_integer_iu8os8>
 801cae6:	b002      	add	sp, #8
 801cae8:	bd70      	pop	{r4, r5, r6, pc}
 801caea:	461d      	mov	r5, r3
 801caec:	e786      	b.n	801c9fc <node_convert_integer+0xdc>
 801caee:	2201      	movs	r2, #1
 801caf0:	e734      	b.n	801c95c <node_convert_integer+0x3c>
 801caf2:	ee06 4a90 	vmov	s13, r4
 801caf6:	e78e      	b.n	801ca16 <node_convert_integer+0xf6>
 801caf8:	ee06 0a90 	vmov	s13, r0
 801cafc:	e78b      	b.n	801ca16 <node_convert_integer+0xf6>
 801cafe:	ee06 3a90 	vmov	s13, r3
 801cb02:	e788      	b.n	801ca16 <node_convert_integer+0xf6>
 801cb04:	462b      	mov	r3, r5
 801cb06:	2c00      	cmp	r4, #0
 801cb08:	f47f af5a 	bne.w	801c9c0 <node_convert_integer+0xa0>
 801cb0c:	e760      	b.n	801c9d0 <node_convert_integer+0xb0>
 801cb0e:	462b      	mov	r3, r5
 801cb10:	2c00      	cmp	r4, #0
 801cb12:	d1b5      	bne.n	801ca80 <node_convert_integer+0x160>
 801cb14:	e7bb      	b.n	801ca8e <node_convert_integer+0x16e>
 801cb16:	4605      	mov	r5, r0
 801cb18:	e770      	b.n	801c9fc <node_convert_integer+0xdc>
 801cb1a:	460c      	mov	r4, r1
 801cb1c:	e7d5      	b.n	801caca <node_convert_integer+0x1aa>
 801cb1e:	462c      	mov	r4, r5
 801cb20:	e7b5      	b.n	801ca8e <node_convert_integer+0x16e>
 801cb22:	462c      	mov	r4, r5
 801cb24:	e754      	b.n	801c9d0 <node_convert_integer+0xb0>
 801cb26:	460b      	mov	r3, r1
 801cb28:	2c00      	cmp	r4, #0
 801cb2a:	d1c7      	bne.n	801cabc <node_convert_integer+0x19c>
 801cb2c:	e7cd      	b.n	801caca <node_convert_integer+0x1aa>
 801cb2e:	f001 f9f9 	bl	801df24 <forward_lite_node_convert_integer_iu8os8_fast>
 801cb32:	e750      	b.n	801c9d6 <node_convert_integer+0xb6>
 801cb34:	f001 fa58 	bl	801dfe8 <forward_lite_node_convert_integer_is8ou8_fast>
 801cb38:	e74d      	b.n	801c9d6 <node_convert_integer+0xb6>
 801cb3a:	2300      	movs	r3, #0
 801cb3c:	685b      	ldr	r3, [r3, #4]
 801cb3e:	deff      	udf	#255	; 0xff
 801cb40:	00000000 	.word	0x00000000
 801cb44:	3efffffc 	.word	0x3efffffc

0801cb48 <core_init>:
 801cb48:	2001      	movs	r0, #1
 801cb4a:	4770      	bx	lr

0801cb4c <core_set_error>:
 801cb4c:	4603      	mov	r3, r0
 801cb4e:	7800      	ldrb	r0, [r0, #0]
 801cb50:	b108      	cbz	r0, 801cb56 <core_set_error+0xa>
 801cb52:	2000      	movs	r0, #0
 801cb54:	4770      	bx	lr
 801cb56:	7019      	strb	r1, [r3, #0]
 801cb58:	2001      	movs	r0, #1
 801cb5a:	6819      	ldr	r1, [r3, #0]
 801cb5c:	f362 211f 	bfi	r1, r2, #8, #24
 801cb60:	6019      	str	r1, [r3, #0]
 801cb62:	4770      	bx	lr

0801cb64 <forward_dense_integer_SSSA>:
 801cb64:	6982      	ldr	r2, [r0, #24]
 801cb66:	8813      	ldrh	r3, [r2, #0]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	f000 80c8 	beq.w	801ccfe <forward_dense_integer_SSSA+0x19a>
 801cb6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb72:	6852      	ldr	r2, [r2, #4]
 801cb74:	b093      	sub	sp, #76	; 0x4c
 801cb76:	6854      	ldr	r4, [r2, #4]
 801cb78:	b104      	cbz	r4, 801cb7c <forward_dense_integer_SSSA+0x18>
 801cb7a:	6824      	ldr	r4, [r4, #0]
 801cb7c:	2b01      	cmp	r3, #1
 801cb7e:	f000 8161 	beq.w	801ce44 <forward_dense_integer_SSSA+0x2e0>
 801cb82:	6911      	ldr	r1, [r2, #16]
 801cb84:	b101      	cbz	r1, 801cb88 <forward_dense_integer_SSSA+0x24>
 801cb86:	6809      	ldr	r1, [r1, #0]
 801cb88:	2b02      	cmp	r3, #2
 801cb8a:	f000 815e 	beq.w	801ce4a <forward_dense_integer_SSSA+0x2e6>
 801cb8e:	69d5      	ldr	r5, [r2, #28]
 801cb90:	2d00      	cmp	r5, #0
 801cb92:	f000 8108 	beq.w	801cda6 <forward_dense_integer_SSSA+0x242>
 801cb96:	8b16      	ldrh	r6, [r2, #24]
 801cb98:	6828      	ldr	r0, [r5, #0]
 801cb9a:	2e01      	cmp	r6, #1
 801cb9c:	f240 812d 	bls.w	801cdfa <forward_dense_integer_SSSA+0x296>
 801cba0:	686d      	ldr	r5, [r5, #4]
 801cba2:	2b03      	cmp	r3, #3
 801cba4:	f000 8154 	beq.w	801ce50 <forward_dense_integer_SSSA+0x2ec>
 801cba8:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 801cbac:	69ab      	ldr	r3, [r5, #24]
 801cbae:	f1b9 0f00 	cmp.w	r9, #0
 801cbb2:	f000 810f 	beq.w	801cdd4 <forward_dense_integer_SSSA+0x270>
 801cbb6:	689b      	ldr	r3, [r3, #8]
 801cbb8:	68e2      	ldr	r2, [r4, #12]
 801cbba:	930b      	str	r3, [sp, #44]	; 0x2c
 801cbbc:	68cb      	ldr	r3, [r1, #12]
 801cbbe:	6856      	ldr	r6, [r2, #4]
 801cbc0:	f8d9 9000 	ldr.w	r9, [r9]
 801cbc4:	f8d4 e018 	ldr.w	lr, [r4, #24]
 801cbc8:	698d      	ldr	r5, [r1, #24]
 801cbca:	960f      	str	r6, [sp, #60]	; 0x3c
 801cbcc:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 801cbd0:	68db      	ldr	r3, [r3, #12]
 801cbd2:	fb03 f302 	mul.w	r3, r3, r2
 801cbd6:	b2b2      	uxth	r2, r6
 801cbd8:	930c      	str	r3, [sp, #48]	; 0x30
 801cbda:	fa1f f38a 	uxth.w	r3, sl
 801cbde:	f1b9 0f00 	cmp.w	r9, #0
 801cbe2:	d003      	beq.n	801cbec <forward_dense_integer_SSSA+0x88>
 801cbe4:	f8d9 6018 	ldr.w	r6, [r9, #24]
 801cbe8:	f8d6 9008 	ldr.w	r9, [r6, #8]
 801cbec:	6827      	ldr	r7, [r4, #0]
 801cbee:	f8d0 b000 	ldr.w	fp, [r0]
 801cbf2:	680c      	ldr	r4, [r1, #0]
 801cbf4:	6981      	ldr	r1, [r0, #24]
 801cbf6:	2f00      	cmp	r7, #0
 801cbf8:	f000 8083 	beq.w	801cd02 <forward_dense_integer_SSSA+0x19e>
 801cbfc:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801cc00:	f1bc 0f00 	cmp.w	ip, #0
 801cc04:	f000 80b1 	beq.w	801cd6a <forward_dense_integer_SSSA+0x206>
 801cc08:	8878      	ldrh	r0, [r7, #2]
 801cc0a:	2800      	cmp	r0, #0
 801cc0c:	f000 809c 	beq.w	801cd48 <forward_dense_integer_SSSA+0x1e4>
 801cc10:	f8dc 6000 	ldr.w	r6, [ip]
 801cc14:	edd6 7a00 	vldr	s15, [r6]
 801cc18:	2c00      	cmp	r4, #0
 801cc1a:	f000 809a 	beq.w	801cd52 <forward_dense_integer_SSSA+0x1ee>
 801cc1e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801cc22:	f1b8 0f00 	cmp.w	r8, #0
 801cc26:	f000 80a9 	beq.w	801cd7c <forward_dense_integer_SSSA+0x218>
 801cc2a:	8860      	ldrh	r0, [r4, #2]
 801cc2c:	2800      	cmp	r0, #0
 801cc2e:	d074      	beq.n	801cd1a <forward_dense_integer_SSSA+0x1b6>
 801cc30:	68ae      	ldr	r6, [r5, #8]
 801cc32:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cc36:	6889      	ldr	r1, [r1, #8]
 801cc38:	950d      	str	r5, [sp, #52]	; 0x34
 801cc3a:	f8d8 5000 	ldr.w	r5, [r8]
 801cc3e:	ed95 0a00 	vldr	s0, [r5]
 801cc42:	f1bc 0f00 	cmp.w	ip, #0
 801cc46:	d076      	beq.n	801cd36 <forward_dense_integer_SSSA+0x1d2>
 801cc48:	8878      	ldrh	r0, [r7, #2]
 801cc4a:	2800      	cmp	r0, #0
 801cc4c:	f000 80a3 	beq.w	801cd96 <forward_dense_integer_SSSA+0x232>
 801cc50:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801cc54:	f990 7000 	ldrsb.w	r7, [r0]
 801cc58:	2c00      	cmp	r4, #0
 801cc5a:	f000 80eb 	beq.w	801ce34 <forward_dense_integer_SSSA+0x2d0>
 801cc5e:	f1b8 0f00 	cmp.w	r8, #0
 801cc62:	f000 809d 	beq.w	801cda0 <forward_dense_integer_SSSA+0x23c>
 801cc66:	8860      	ldrh	r0, [r4, #2]
 801cc68:	2800      	cmp	r0, #0
 801cc6a:	d167      	bne.n	801cd3c <forward_dense_integer_SSSA+0x1d8>
 801cc6c:	900a      	str	r0, [sp, #40]	; 0x28
 801cc6e:	910e      	str	r1, [sp, #56]	; 0x38
 801cc70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cc74:	f1bb 0f00 	cmp.w	fp, #0
 801cc78:	f000 80de 	beq.w	801ce38 <forward_dense_integer_SSSA+0x2d4>
 801cc7c:	f8db 0004 	ldr.w	r0, [fp, #4]
 801cc80:	2800      	cmp	r0, #0
 801cc82:	f000 80d9 	beq.w	801ce38 <forward_dense_integer_SSSA+0x2d4>
 801cc86:	6800      	ldr	r0, [r0, #0]
 801cc88:	2400      	movs	r4, #0
 801cc8a:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 801cc8e:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 801cc92:	9411      	str	r4, [sp, #68]	; 0x44
 801cc94:	ed90 7a00 	vldr	s14, [r0]
 801cc98:	4640      	mov	r0, r8
 801cc9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cc9e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801cca2:	f002 fa21 	bl	801f0e8 <align_factor>
 801cca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cca8:	9011      	str	r0, [sp, #68]	; 0x44
 801ccaa:	b32b      	cbz	r3, 801ccf8 <forward_dense_integer_SSSA+0x194>
 801ccac:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801ccb0:	4699      	mov	r9, r3
 801ccb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccb4:	fa1f fa8a 	uxth.w	sl, sl
 801ccb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ccba:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 801ccbe:	970d      	str	r7, [sp, #52]	; 0x34
 801ccc0:	461f      	mov	r7, r3
 801ccc2:	9a08      	ldr	r2, [sp, #32]
 801ccc4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ccc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ccc8:	3401      	adds	r4, #1
 801ccca:	4628      	mov	r0, r5
 801cccc:	9605      	str	r6, [sp, #20]
 801ccce:	9306      	str	r3, [sp, #24]
 801ccd0:	4456      	add	r6, sl
 801ccd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ccd4:	445d      	add	r5, fp
 801ccd6:	9304      	str	r3, [sp, #16]
 801ccd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccda:	9303      	str	r3, [sp, #12]
 801ccdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ccde:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801cce2:	ab11      	add	r3, sp, #68	; 0x44
 801cce4:	9300      	str	r3, [sp, #0]
 801cce6:	463b      	mov	r3, r7
 801cce8:	e9cd 1208 	strd	r1, r2, [sp, #32]
 801ccec:	f002 fb42 	bl	801f374 <st_sssa8_fully_connected>
 801ccf0:	454c      	cmp	r4, r9
 801ccf2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801ccf6:	d1e6      	bne.n	801ccc6 <forward_dense_integer_SSSA+0x162>
 801ccf8:	b013      	add	sp, #76	; 0x4c
 801ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccfe:	685b      	ldr	r3, [r3, #4]
 801cd00:	deff      	udf	#255	; 0xff
 801cd02:	2c00      	cmp	r4, #0
 801cd04:	d056      	beq.n	801cdb4 <forward_dense_integer_SSSA+0x250>
 801cd06:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801cd0a:	f1b8 0f00 	cmp.w	r8, #0
 801cd0e:	d05d      	beq.n	801cdcc <forward_dense_integer_SSSA+0x268>
 801cd10:	8860      	ldrh	r0, [r4, #2]
 801cd12:	2800      	cmp	r0, #0
 801cd14:	d173      	bne.n	801cdfe <forward_dense_integer_SSSA+0x29a>
 801cd16:	eddf 7a50 	vldr	s15, [pc, #320]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801cd1a:	68ae      	ldr	r6, [r5, #8]
 801cd1c:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cd20:	6889      	ldr	r1, [r1, #8]
 801cd22:	950d      	str	r5, [sp, #52]	; 0x34
 801cd24:	2f00      	cmp	r7, #0
 801cd26:	d041      	beq.n	801cdac <forward_dense_integer_SSSA+0x248>
 801cd28:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801cd2c:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801cd30:	f1bc 0f00 	cmp.w	ip, #0
 801cd34:	d188      	bne.n	801cc48 <forward_dense_integer_SSSA+0xe4>
 801cd36:	4667      	mov	r7, ip
 801cd38:	2800      	cmp	r0, #0
 801cd3a:	d097      	beq.n	801cc6c <forward_dense_integer_SSSA+0x108>
 801cd3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cd40:	f990 0000 	ldrsb.w	r0, [r0]
 801cd44:	900a      	str	r0, [sp, #40]	; 0x28
 801cd46:	e792      	b.n	801cc6e <forward_dense_integer_SSSA+0x10a>
 801cd48:	eddf 7a43 	vldr	s15, [pc, #268]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801cd4c:	2c00      	cmp	r4, #0
 801cd4e:	f47f af66 	bne.w	801cc1e <forward_dense_integer_SSSA+0xba>
 801cd52:	68ae      	ldr	r6, [r5, #8]
 801cd54:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cd58:	6889      	ldr	r1, [r1, #8]
 801cd5a:	950d      	str	r5, [sp, #52]	; 0x34
 801cd5c:	2800      	cmp	r0, #0
 801cd5e:	d15a      	bne.n	801ce16 <forward_dense_integer_SSSA+0x2b2>
 801cd60:	4607      	mov	r7, r0
 801cd62:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801cd66:	900a      	str	r0, [sp, #40]	; 0x28
 801cd68:	e781      	b.n	801cc6e <forward_dense_integer_SSSA+0x10a>
 801cd6a:	b31c      	cbz	r4, 801cdb4 <forward_dense_integer_SSSA+0x250>
 801cd6c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801cd70:	eddf 7a39 	vldr	s15, [pc, #228]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801cd74:	f1b8 0f00 	cmp.w	r8, #0
 801cd78:	f47f af57 	bne.w	801cc2a <forward_dense_integer_SSSA+0xc6>
 801cd7c:	f8de 0008 	ldr.w	r0, [lr, #8]
 801cd80:	68ae      	ldr	r6, [r5, #8]
 801cd82:	6889      	ldr	r1, [r1, #8]
 801cd84:	900d      	str	r0, [sp, #52]	; 0x34
 801cd86:	f1bc 0f00 	cmp.w	ip, #0
 801cd8a:	d00e      	beq.n	801cdaa <forward_dense_integer_SSSA+0x246>
 801cd8c:	8878      	ldrh	r0, [r7, #2]
 801cd8e:	2800      	cmp	r0, #0
 801cd90:	d149      	bne.n	801ce26 <forward_dense_integer_SSSA+0x2c2>
 801cd92:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801cd96:	2700      	movs	r7, #0
 801cd98:	f1b8 0f00 	cmp.w	r8, #0
 801cd9c:	f47f af63 	bne.w	801cc66 <forward_dense_integer_SSSA+0x102>
 801cda0:	2000      	movs	r0, #0
 801cda2:	900a      	str	r0, [sp, #40]	; 0x28
 801cda4:	e763      	b.n	801cc6e <forward_dense_integer_SSSA+0x10a>
 801cda6:	4628      	mov	r0, r5
 801cda8:	e6fb      	b.n	801cba2 <forward_dense_integer_SSSA+0x3e>
 801cdaa:	4667      	mov	r7, ip
 801cdac:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801cdb0:	970a      	str	r7, [sp, #40]	; 0x28
 801cdb2:	e75c      	b.n	801cc6e <forward_dense_integer_SSSA+0x10a>
 801cdb4:	eddf 7a28 	vldr	s15, [pc, #160]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801cdb8:	4627      	mov	r7, r4
 801cdba:	f8de 0008 	ldr.w	r0, [lr, #8]
 801cdbe:	eeb0 0a67 	vmov.f32	s0, s15
 801cdc2:	68ae      	ldr	r6, [r5, #8]
 801cdc4:	6889      	ldr	r1, [r1, #8]
 801cdc6:	900d      	str	r0, [sp, #52]	; 0x34
 801cdc8:	970a      	str	r7, [sp, #40]	; 0x28
 801cdca:	e750      	b.n	801cc6e <forward_dense_integer_SSSA+0x10a>
 801cdcc:	eddf 7a22 	vldr	s15, [pc, #136]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801cdd0:	4647      	mov	r7, r8
 801cdd2:	e7f2      	b.n	801cdba <forward_dense_integer_SSSA+0x256>
 801cdd4:	689b      	ldr	r3, [r3, #8]
 801cdd6:	68e2      	ldr	r2, [r4, #12]
 801cdd8:	930b      	str	r3, [sp, #44]	; 0x2c
 801cdda:	68cb      	ldr	r3, [r1, #12]
 801cddc:	6856      	ldr	r6, [r2, #4]
 801cdde:	f8d4 e018 	ldr.w	lr, [r4, #24]
 801cde2:	698d      	ldr	r5, [r1, #24]
 801cde4:	960f      	str	r6, [sp, #60]	; 0x3c
 801cde6:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 801cdea:	68db      	ldr	r3, [r3, #12]
 801cdec:	fb03 f302 	mul.w	r3, r3, r2
 801cdf0:	b2b2      	uxth	r2, r6
 801cdf2:	930c      	str	r3, [sp, #48]	; 0x30
 801cdf4:	fa1f f38a 	uxth.w	r3, sl
 801cdf8:	e6f8      	b.n	801cbec <forward_dense_integer_SSSA+0x88>
 801cdfa:	2500      	movs	r5, #0
 801cdfc:	e6d1      	b.n	801cba2 <forward_dense_integer_SSSA+0x3e>
 801cdfe:	f8de 0008 	ldr.w	r0, [lr, #8]
 801ce02:	68ae      	ldr	r6, [r5, #8]
 801ce04:	900d      	str	r0, [sp, #52]	; 0x34
 801ce06:	f8d8 0000 	ldr.w	r0, [r8]
 801ce0a:	6889      	ldr	r1, [r1, #8]
 801ce0c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801ce10:	ed90 0a00 	vldr	s0, [r0]
 801ce14:	e792      	b.n	801cd3c <forward_dense_integer_SSSA+0x1d8>
 801ce16:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801ce1a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801ce1e:	f990 7000 	ldrsb.w	r7, [r0]
 801ce22:	940a      	str	r4, [sp, #40]	; 0x28
 801ce24:	e723      	b.n	801cc6e <forward_dense_integer_SSSA+0x10a>
 801ce26:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801ce2a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801ce58 <forward_dense_integer_SSSA+0x2f4>
 801ce2e:	f990 7000 	ldrsb.w	r7, [r0]
 801ce32:	e7b5      	b.n	801cda0 <forward_dense_integer_SSSA+0x23c>
 801ce34:	940a      	str	r4, [sp, #40]	; 0x28
 801ce36:	e71a      	b.n	801cc6e <forward_dense_integer_SSSA+0x10a>
 801ce38:	2300      	movs	r3, #0
 801ce3a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ce3e:	9311      	str	r3, [sp, #68]	; 0x44
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	deff      	udf	#255	; 0xff
 801ce44:	2300      	movs	r3, #0
 801ce46:	685b      	ldr	r3, [r3, #4]
 801ce48:	deff      	udf	#255	; 0xff
 801ce4a:	2300      	movs	r3, #0
 801ce4c:	685b      	ldr	r3, [r3, #4]
 801ce4e:	deff      	udf	#255	; 0xff
 801ce50:	2300      	movs	r3, #0
 801ce52:	685b      	ldr	r3, [r3, #4]
 801ce54:	deff      	udf	#255	; 0xff
 801ce56:	bf00      	nop
 801ce58:	00000000 	.word	0x00000000

0801ce5c <forward_sm>:
 801ce5c:	6982      	ldr	r2, [r0, #24]
 801ce5e:	8813      	ldrh	r3, [r2, #0]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d078      	beq.n	801cf56 <forward_sm+0xfa>
 801ce64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce68:	ed2d 8b04 	vpush	{d8-d9}
 801ce6c:	6852      	ldr	r2, [r2, #4]
 801ce6e:	b085      	sub	sp, #20
 801ce70:	6854      	ldr	r4, [r2, #4]
 801ce72:	b104      	cbz	r4, 801ce76 <forward_sm+0x1a>
 801ce74:	6824      	ldr	r4, [r4, #0]
 801ce76:	2b01      	cmp	r3, #1
 801ce78:	d072      	beq.n	801cf60 <forward_sm+0x104>
 801ce7a:	6913      	ldr	r3, [r2, #16]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d072      	beq.n	801cf66 <forward_sm+0x10a>
 801ce80:	681e      	ldr	r6, [r3, #0]
 801ce82:	68a3      	ldr	r3, [r4, #8]
 801ce84:	68e0      	ldr	r0, [r4, #12]
 801ce86:	68f2      	ldr	r2, [r6, #12]
 801ce88:	0a1b      	lsrs	r3, r3, #8
 801ce8a:	6845      	ldr	r5, [r0, #4]
 801ce8c:	6857      	ldr	r7, [r2, #4]
 801ce8e:	d064      	beq.n	801cf5a <forward_sm+0xfe>
 801ce90:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801ce94:	2201      	movs	r2, #1
 801ce96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ce9a:	4298      	cmp	r0, r3
 801ce9c:	fb01 f202 	mul.w	r2, r1, r2
 801cea0:	d1f9      	bne.n	801ce96 <forward_sm+0x3a>
 801cea2:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801cea6:	69a2      	ldr	r2, [r4, #24]
 801cea8:	69b3      	ldr	r3, [r6, #24]
 801ceaa:	6892      	ldr	r2, [r2, #8]
 801ceac:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801ceb0:	eb02 0309 	add.w	r3, r2, r9
 801ceb4:	429a      	cmp	r2, r3
 801ceb6:	9301      	str	r3, [sp, #4]
 801ceb8:	d248      	bcs.n	801cf4c <forward_sm+0xf0>
 801ceba:	00bb      	lsls	r3, r7, #2
 801cebc:	2d01      	cmp	r5, #1
 801cebe:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 801cec2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801cec6:	9303      	str	r3, [sp, #12]
 801cec8:	ea4f 0385 	mov.w	r3, r5, lsl #2
 801cecc:	463e      	mov	r6, r7
 801cece:	ed92 8a00 	vldr	s16, [r2]
 801ced2:	9302      	str	r3, [sp, #8]
 801ced4:	d937      	bls.n	801cf46 <forward_sm+0xea>
 801ced6:	1d13      	adds	r3, r2, #4
 801ced8:	ecf3 7a01 	vldmia	r3!, {s15}
 801cedc:	429e      	cmp	r6, r3
 801cede:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 801cee2:	d1f9      	bne.n	801ced8 <forward_sm+0x7c>
 801cee4:	4692      	mov	sl, r2
 801cee6:	46c3      	mov	fp, r8
 801cee8:	46c1      	mov	r9, r8
 801ceea:	eddf 8a20 	vldr	s17, [pc, #128]	; 801cf6c <forward_sm+0x110>
 801ceee:	2400      	movs	r4, #0
 801cef0:	ecba 0a01 	vldmia	sl!, {s0}
 801cef4:	3401      	adds	r4, #1
 801cef6:	ee30 0a48 	vsub.f32	s0, s0, s16
 801cefa:	f008 f9bd 	bl	8025278 <expf>
 801cefe:	42a5      	cmp	r5, r4
 801cf00:	ee78 8a80 	vadd.f32	s17, s17, s0
 801cf04:	eca9 0a01 	vstmia	r9!, {s0}
 801cf08:	d8f2      	bhi.n	801cef0 <forward_sm+0x94>
 801cf0a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801cf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf12:	d00b      	beq.n	801cf2c <forward_sm+0xd0>
 801cf14:	ee89 7a28 	vdiv.f32	s14, s18, s17
 801cf18:	2300      	movs	r3, #0
 801cf1a:	eddb 7a00 	vldr	s15, [fp]
 801cf1e:	3301      	adds	r3, #1
 801cf20:	429d      	cmp	r5, r3
 801cf22:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cf26:	eceb 7a01 	vstmia	fp!, {s15}
 801cf2a:	d8f6      	bhi.n	801cf1a <forward_sm+0xbe>
 801cf2c:	9b03      	ldr	r3, [sp, #12]
 801cf2e:	463a      	mov	r2, r7
 801cf30:	9901      	ldr	r1, [sp, #4]
 801cf32:	4498      	add	r8, r3
 801cf34:	9b02      	ldr	r3, [sp, #8]
 801cf36:	42b9      	cmp	r1, r7
 801cf38:	441e      	add	r6, r3
 801cf3a:	d907      	bls.n	801cf4c <forward_sm+0xf0>
 801cf3c:	2d01      	cmp	r5, #1
 801cf3e:	441f      	add	r7, r3
 801cf40:	ed92 8a00 	vldr	s16, [r2]
 801cf44:	d8c7      	bhi.n	801ced6 <forward_sm+0x7a>
 801cf46:	2d00      	cmp	r5, #0
 801cf48:	d0f0      	beq.n	801cf2c <forward_sm+0xd0>
 801cf4a:	e7cb      	b.n	801cee4 <forward_sm+0x88>
 801cf4c:	b005      	add	sp, #20
 801cf4e:	ecbd 8b04 	vpop	{d8-d9}
 801cf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf56:	685b      	ldr	r3, [r3, #4]
 801cf58:	deff      	udf	#255	; 0xff
 801cf5a:	f04f 0904 	mov.w	r9, #4
 801cf5e:	e7a2      	b.n	801cea6 <forward_sm+0x4a>
 801cf60:	2300      	movs	r3, #0
 801cf62:	685b      	ldr	r3, [r3, #4]
 801cf64:	deff      	udf	#255	; 0xff
 801cf66:	68db      	ldr	r3, [r3, #12]
 801cf68:	deff      	udf	#255	; 0xff
 801cf6a:	bf00      	nop
 801cf6c:	00000000 	.word	0x00000000

0801cf70 <forward_pad>:
 801cf70:	6982      	ldr	r2, [r0, #24]
 801cf72:	8813      	ldrh	r3, [r2, #0]
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	d052      	beq.n	801d01e <forward_pad+0xae>
 801cf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf7c:	ed2d 8b02 	vpush	{d8}
 801cf80:	6852      	ldr	r2, [r2, #4]
 801cf82:	b091      	sub	sp, #68	; 0x44
 801cf84:	6857      	ldr	r7, [r2, #4]
 801cf86:	b107      	cbz	r7, 801cf8a <forward_pad+0x1a>
 801cf88:	683f      	ldr	r7, [r7, #0]
 801cf8a:	2b01      	cmp	r3, #1
 801cf8c:	f000 81e7 	beq.w	801d35e <forward_pad+0x3ee>
 801cf90:	6913      	ldr	r3, [r2, #16]
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	f000 81e1 	beq.w	801d35a <forward_pad+0x3ea>
 801cf98:	681d      	ldr	r5, [r3, #0]
 801cf9a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 801cf9e:	68aa      	ldr	r2, [r5, #8]
 801cfa0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cfa2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 801cfa6:	f8de 100c 	ldr.w	r1, [lr, #12]
 801cfaa:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801cfae:	bf38      	it	cc
 801cfb0:	2201      	movcc	r2, #1
 801cfb2:	9102      	str	r1, [sp, #8]
 801cfb4:	bf28      	it	cs
 801cfb6:	f8da 2010 	ldrcs.w	r2, [sl, #16]
 801cfba:	f9b6 1000 	ldrsh.w	r1, [r6]
 801cfbe:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 801cfc2:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801cfc6:	9103      	str	r1, [sp, #12]
 801cfc8:	9201      	str	r2, [sp, #4]
 801cfca:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 801cfce:	7f03      	ldrb	r3, [r0, #28]
 801cfd0:	e9d5 6205 	ldrd	r6, r2, [r5, #20]
 801cfd4:	2b01      	cmp	r3, #1
 801cfd6:	6895      	ldr	r5, [r2, #8]
 801cfd8:	f8d6 b008 	ldr.w	fp, [r6, #8]
 801cfdc:	e9d7 2c05 	ldrd	r2, ip, [r7, #20]
 801cfe0:	68f7      	ldr	r7, [r6, #12]
 801cfe2:	f8dc 8008 	ldr.w	r8, [ip, #8]
 801cfe6:	fb07 f404 	mul.w	r4, r7, r4
 801cfea:	463e      	mov	r6, r7
 801cfec:	9708      	str	r7, [sp, #32]
 801cfee:	9f03      	ldr	r7, [sp, #12]
 801cff0:	940d      	str	r4, [sp, #52]	; 0x34
 801cff2:	fb06 f607 	mul.w	r6, r6, r7
 801cff6:	68d4      	ldr	r4, [r2, #12]
 801cff8:	fb0b f709 	mul.w	r7, fp, r9
 801cffc:	9405      	str	r4, [sp, #20]
 801cffe:	960c      	str	r6, [sp, #48]	; 0x30
 801d000:	6894      	ldr	r4, [r2, #8]
 801d002:	fb0b f601 	mul.w	r6, fp, r1
 801d006:	d00c      	beq.n	801d022 <forward_pad+0xb2>
 801d008:	2b02      	cmp	r3, #2
 801d00a:	f000 8106 	beq.w	801d21a <forward_pad+0x2aa>
 801d00e:	2b00      	cmp	r3, #0
 801d010:	f000 80a8 	beq.w	801d164 <forward_pad+0x1f4>
 801d014:	b011      	add	sp, #68	; 0x44
 801d016:	ecbd 8b02 	vpop	{d8}
 801d01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d01e:	685b      	ldr	r3, [r3, #4]
 801d020:	deff      	udf	#255	; 0xff
 801d022:	f8da 300c 	ldr.w	r3, [sl, #12]
 801d026:	930e      	str	r3, [sp, #56]	; 0x38
 801d028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d02a:	eb05 0903 	add.w	r9, r5, r3
 801d02e:	9b02      	ldr	r3, [sp, #8]
 801d030:	2b00      	cmp	r3, #0
 801d032:	dd6a      	ble.n	801d10a <forward_pad+0x19a>
 801d034:	f8de 3008 	ldr.w	r3, [lr, #8]
 801d038:	ee08 8a10 	vmov	s16, r8
 801d03c:	9805      	ldr	r0, [sp, #20]
 801d03e:	4419      	add	r1, r3
 801d040:	f8da 2008 	ldr.w	r2, [sl, #8]
 801d044:	4407      	add	r7, r0
 801d046:	9801      	ldr	r0, [sp, #4]
 801d048:	950f      	str	r5, [sp, #60]	; 0x3c
 801d04a:	fb01 f000 	mul.w	r0, r1, r0
 801d04e:	4601      	mov	r1, r0
 801d050:	9007      	str	r0, [sp, #28]
 801d052:	19b8      	adds	r0, r7, r6
 801d054:	900a      	str	r0, [sp, #40]	; 0x28
 801d056:	eb09 0006 	add.w	r0, r9, r6
 801d05a:	9e03      	ldr	r6, [sp, #12]
 801d05c:	9001      	str	r0, [sp, #4]
 801d05e:	4608      	mov	r0, r1
 801d060:	4611      	mov	r1, r2
 801d062:	fb02 0206 	mla	r2, r2, r6, r0
 801d066:	460f      	mov	r7, r1
 801d068:	fb0b 5202 	mla	r2, fp, r2, r5
 801d06c:	9204      	str	r2, [sp, #16]
 801d06e:	1e9a      	subs	r2, r3, #2
 801d070:	fb04 f303 	mul.w	r3, r4, r3
 801d074:	930b      	str	r3, [sp, #44]	; 0x2c
 801d076:	fb04 8302 	mla	r3, r4, r2, r8
 801d07a:	9303      	str	r3, [sp, #12]
 801d07c:	fb0b f301 	mul.w	r3, fp, r1
 801d080:	9309      	str	r3, [sp, #36]	; 0x24
 801d082:	2300      	movs	r3, #0
 801d084:	9306      	str	r3, [sp, #24]
 801d086:	f1cb 0300 	rsb	r3, fp, #0
 801d08a:	4698      	mov	r8, r3
 801d08c:	9b01      	ldr	r3, [sp, #4]
 801d08e:	454b      	cmp	r3, r9
 801d090:	d00b      	beq.n	801d0aa <forward_pad+0x13a>
 801d092:	ee18 5a10 	vmov	r5, s16
 801d096:	4443      	add	r3, r8
 801d098:	4425      	add	r5, r4
 801d09a:	4622      	mov	r2, r4
 801d09c:	4618      	mov	r0, r3
 801d09e:	4629      	mov	r1, r5
 801d0a0:	f005 f8f4 	bl	802228c <memcpy>
 801d0a4:	4548      	cmp	r0, r9
 801d0a6:	4603      	mov	r3, r0
 801d0a8:	d1f5      	bne.n	801d096 <forward_pad+0x126>
 801d0aa:	ee18 3a10 	vmov	r3, s16
 801d0ae:	9a05      	ldr	r2, [sp, #20]
 801d0b0:	ee18 1a10 	vmov	r1, s16
 801d0b4:	9801      	ldr	r0, [sp, #4]
 801d0b6:	4413      	add	r3, r2
 801d0b8:	ee08 3a10 	vmov	s16, r3
 801d0bc:	f005 f8e6 	bl	802228c <memcpy>
 801d0c0:	9b07      	ldr	r3, [sp, #28]
 801d0c2:	429f      	cmp	r7, r3
 801d0c4:	dd0d      	ble.n	801d0e2 <forward_pad+0x172>
 801d0c6:	461d      	mov	r5, r3
 801d0c8:	e9dd a603 	ldrd	sl, r6, [sp, #12]
 801d0cc:	3501      	adds	r5, #1
 801d0ce:	4651      	mov	r1, sl
 801d0d0:	4630      	mov	r0, r6
 801d0d2:	4622      	mov	r2, r4
 801d0d4:	f005 f8da 	bl	802228c <memcpy>
 801d0d8:	42af      	cmp	r7, r5
 801d0da:	ebaa 0a04 	sub.w	sl, sl, r4
 801d0de:	445e      	add	r6, fp
 801d0e0:	d1f4      	bne.n	801d0cc <forward_pad+0x15c>
 801d0e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d0e4:	9901      	ldr	r1, [sp, #4]
 801d0e6:	4491      	add	r9, r2
 801d0e8:	9b06      	ldr	r3, [sp, #24]
 801d0ea:	4411      	add	r1, r2
 801d0ec:	9a04      	ldr	r2, [sp, #16]
 801d0ee:	3301      	adds	r3, #1
 801d0f0:	9101      	str	r1, [sp, #4]
 801d0f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d0f4:	9306      	str	r3, [sp, #24]
 801d0f6:	440a      	add	r2, r1
 801d0f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d0fa:	9204      	str	r2, [sp, #16]
 801d0fc:	9a03      	ldr	r2, [sp, #12]
 801d0fe:	440a      	add	r2, r1
 801d100:	9203      	str	r2, [sp, #12]
 801d102:	9a02      	ldr	r2, [sp, #8]
 801d104:	429a      	cmp	r2, r3
 801d106:	d1c1      	bne.n	801d08c <forward_pad+0x11c>
 801d108:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d10c:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 801d110:	42a5      	cmp	r5, r4
 801d112:	d00c      	beq.n	801d12e <forward_pad+0x1be>
 801d114:	9b08      	ldr	r3, [sp, #32]
 801d116:	462e      	mov	r6, r5
 801d118:	425f      	negs	r7, r3
 801d11a:	4698      	mov	r8, r3
 801d11c:	4621      	mov	r1, r4
 801d11e:	4630      	mov	r0, r6
 801d120:	443c      	add	r4, r7
 801d122:	4446      	add	r6, r8
 801d124:	4642      	mov	r2, r8
 801d126:	f005 f8b1 	bl	802228c <memcpy>
 801d12a:	42a6      	cmp	r6, r4
 801d12c:	d1f6      	bne.n	801d11c <forward_pad+0x1ac>
 801d12e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d130:	9a08      	ldr	r2, [sp, #32]
 801d132:	3b01      	subs	r3, #1
 801d134:	fb02 5503 	mla	r5, r2, r3, r5
 801d138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d13a:	eba5 0443 	sub.w	r4, r5, r3, lsl #1
 801d13e:	42a5      	cmp	r5, r4
 801d140:	f43f af68 	beq.w	801d014 <forward_pad+0xa4>
 801d144:	4617      	mov	r7, r2
 801d146:	4256      	negs	r6, r2
 801d148:	4621      	mov	r1, r4
 801d14a:	4628      	mov	r0, r5
 801d14c:	443c      	add	r4, r7
 801d14e:	4435      	add	r5, r6
 801d150:	463a      	mov	r2, r7
 801d152:	f005 f89b 	bl	802228c <memcpy>
 801d156:	42a5      	cmp	r5, r4
 801d158:	d1f6      	bne.n	801d148 <forward_pad+0x1d8>
 801d15a:	b011      	add	sp, #68	; 0x44
 801d15c:	ecbd 8b02 	vpop	{d8}
 801d160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d164:	f8dc 1000 	ldr.w	r1, [ip]
 801d168:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801d16a:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 801d16e:	2908      	cmp	r1, #8
 801d170:	f000 80b5 	beq.w	801d2de <forward_pad+0x36e>
 801d174:	f8d2 9004 	ldr.w	r9, [r2, #4]
 801d178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d17a:	2a00      	cmp	r2, #0
 801d17c:	dd0a      	ble.n	801d194 <forward_pad+0x224>
 801d17e:	4693      	mov	fp, r2
 801d180:	469a      	mov	sl, r3
 801d182:	44ca      	add	sl, r9
 801d184:	4628      	mov	r0, r5
 801d186:	464a      	mov	r2, r9
 801d188:	68a1      	ldr	r1, [r4, #8]
 801d18a:	f005 f87f 	bl	802228c <memcpy>
 801d18e:	45d3      	cmp	fp, sl
 801d190:	444d      	add	r5, r9
 801d192:	dcf6      	bgt.n	801d182 <forward_pad+0x212>
 801d194:	9b02      	ldr	r3, [sp, #8]
 801d196:	2b00      	cmp	r3, #0
 801d198:	dd2c      	ble.n	801d1f4 <forward_pad+0x284>
 801d19a:	f04f 0a00 	mov.w	sl, #0
 801d19e:	f8dd b014 	ldr.w	fp, [sp, #20]
 801d1a2:	f8cd a004 	str.w	sl, [sp, #4]
 801d1a6:	2e00      	cmp	r6, #0
 801d1a8:	dd0a      	ble.n	801d1c0 <forward_pad+0x250>
 801d1aa:	f04f 0a00 	mov.w	sl, #0
 801d1ae:	44ca      	add	sl, r9
 801d1b0:	4628      	mov	r0, r5
 801d1b2:	464a      	mov	r2, r9
 801d1b4:	68a1      	ldr	r1, [r4, #8]
 801d1b6:	f005 f869 	bl	802228c <memcpy>
 801d1ba:	4556      	cmp	r6, sl
 801d1bc:	444d      	add	r5, r9
 801d1be:	dcf6      	bgt.n	801d1ae <forward_pad+0x23e>
 801d1c0:	4641      	mov	r1, r8
 801d1c2:	4628      	mov	r0, r5
 801d1c4:	465a      	mov	r2, fp
 801d1c6:	44d8      	add	r8, fp
 801d1c8:	f005 f860 	bl	802228c <memcpy>
 801d1cc:	2f00      	cmp	r7, #0
 801d1ce:	445d      	add	r5, fp
 801d1d0:	dd0a      	ble.n	801d1e8 <forward_pad+0x278>
 801d1d2:	f04f 0a00 	mov.w	sl, #0
 801d1d6:	44ca      	add	sl, r9
 801d1d8:	4628      	mov	r0, r5
 801d1da:	464a      	mov	r2, r9
 801d1dc:	68a1      	ldr	r1, [r4, #8]
 801d1de:	f005 f855 	bl	802228c <memcpy>
 801d1e2:	4557      	cmp	r7, sl
 801d1e4:	444d      	add	r5, r9
 801d1e6:	dcf6      	bgt.n	801d1d6 <forward_pad+0x266>
 801d1e8:	9b01      	ldr	r3, [sp, #4]
 801d1ea:	9a02      	ldr	r2, [sp, #8]
 801d1ec:	3301      	adds	r3, #1
 801d1ee:	429a      	cmp	r2, r3
 801d1f0:	9301      	str	r3, [sp, #4]
 801d1f2:	d1d8      	bne.n	801d1a6 <forward_pad+0x236>
 801d1f4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d1f6:	2f00      	cmp	r7, #0
 801d1f8:	f77f af0c 	ble.w	801d014 <forward_pad+0xa4>
 801d1fc:	2600      	movs	r6, #0
 801d1fe:	444e      	add	r6, r9
 801d200:	4628      	mov	r0, r5
 801d202:	464a      	mov	r2, r9
 801d204:	68a1      	ldr	r1, [r4, #8]
 801d206:	f005 f841 	bl	802228c <memcpy>
 801d20a:	42b7      	cmp	r7, r6
 801d20c:	444d      	add	r5, r9
 801d20e:	dcf6      	bgt.n	801d1fe <forward_pad+0x28e>
 801d210:	b011      	add	sp, #68	; 0x44
 801d212:	ecbd 8b02 	vpop	{d8}
 801d216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d21a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d21c:	9b02      	ldr	r3, [sp, #8]
 801d21e:	442f      	add	r7, r5
 801d220:	2b00      	cmp	r3, #0
 801d222:	9706      	str	r7, [sp, #24]
 801d224:	dd32      	ble.n	801d28c <forward_pad+0x31c>
 801d226:	fb04 f309 	mul.w	r3, r4, r9
 801d22a:	9507      	str	r5, [sp, #28]
 801d22c:	9304      	str	r3, [sp, #16]
 801d22e:	2300      	movs	r3, #0
 801d230:	9301      	str	r3, [sp, #4]
 801d232:	2e00      	cmp	r6, #0
 801d234:	dd09      	ble.n	801d24a <forward_pad+0x2da>
 801d236:	2500      	movs	r5, #0
 801d238:	4425      	add	r5, r4
 801d23a:	4638      	mov	r0, r7
 801d23c:	4622      	mov	r2, r4
 801d23e:	4641      	mov	r1, r8
 801d240:	f005 f824 	bl	802228c <memcpy>
 801d244:	42ae      	cmp	r6, r5
 801d246:	4427      	add	r7, r4
 801d248:	dcf6      	bgt.n	801d238 <forward_pad+0x2c8>
 801d24a:	9b05      	ldr	r3, [sp, #20]
 801d24c:	4641      	mov	r1, r8
 801d24e:	4638      	mov	r0, r7
 801d250:	461a      	mov	r2, r3
 801d252:	4498      	add	r8, r3
 801d254:	441f      	add	r7, r3
 801d256:	f005 f819 	bl	802228c <memcpy>
 801d25a:	f1b9 0f00 	cmp.w	r9, #0
 801d25e:	eba8 0a04 	sub.w	sl, r8, r4
 801d262:	dd0c      	ble.n	801d27e <forward_pad+0x30e>
 801d264:	46bb      	mov	fp, r7
 801d266:	2500      	movs	r5, #0
 801d268:	3501      	adds	r5, #1
 801d26a:	4658      	mov	r0, fp
 801d26c:	4622      	mov	r2, r4
 801d26e:	4651      	mov	r1, sl
 801d270:	f005 f80c 	bl	802228c <memcpy>
 801d274:	45a9      	cmp	r9, r5
 801d276:	44a3      	add	fp, r4
 801d278:	d1f6      	bne.n	801d268 <forward_pad+0x2f8>
 801d27a:	9b04      	ldr	r3, [sp, #16]
 801d27c:	441f      	add	r7, r3
 801d27e:	9b01      	ldr	r3, [sp, #4]
 801d280:	9a02      	ldr	r2, [sp, #8]
 801d282:	3301      	adds	r3, #1
 801d284:	429a      	cmp	r2, r3
 801d286:	9301      	str	r3, [sp, #4]
 801d288:	d1d3      	bne.n	801d232 <forward_pad+0x2c2>
 801d28a:	9d07      	ldr	r5, [sp, #28]
 801d28c:	9b06      	ldr	r3, [sp, #24]
 801d28e:	429d      	cmp	r5, r3
 801d290:	d00a      	beq.n	801d2a8 <forward_pad+0x338>
 801d292:	461f      	mov	r7, r3
 801d294:	462c      	mov	r4, r5
 801d296:	9e08      	ldr	r6, [sp, #32]
 801d298:	4620      	mov	r0, r4
 801d29a:	4434      	add	r4, r6
 801d29c:	4632      	mov	r2, r6
 801d29e:	4639      	mov	r1, r7
 801d2a0:	f004 fff4 	bl	802228c <memcpy>
 801d2a4:	42a7      	cmp	r7, r4
 801d2a6:	d1f7      	bne.n	801d298 <forward_pad+0x328>
 801d2a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d2aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d2ae:	4413      	add	r3, r2
 801d2b0:	9a08      	ldr	r2, [sp, #32]
 801d2b2:	3b01      	subs	r3, #1
 801d2b4:	fb02 5503 	mla	r5, r2, r3, r5
 801d2b8:	442c      	add	r4, r5
 801d2ba:	42a5      	cmp	r5, r4
 801d2bc:	f43f aeaa 	beq.w	801d014 <forward_pad+0xa4>
 801d2c0:	4617      	mov	r7, r2
 801d2c2:	4256      	negs	r6, r2
 801d2c4:	4620      	mov	r0, r4
 801d2c6:	4434      	add	r4, r6
 801d2c8:	463a      	mov	r2, r7
 801d2ca:	4629      	mov	r1, r5
 801d2cc:	f004 ffde 	bl	802228c <memcpy>
 801d2d0:	42a5      	cmp	r5, r4
 801d2d2:	d1f7      	bne.n	801d2c4 <forward_pad+0x354>
 801d2d4:	b011      	add	sp, #68	; 0x44
 801d2d6:	ecbd 8b02 	vpop	{d8}
 801d2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2de:	68a2      	ldr	r2, [r4, #8]
 801d2e0:	4629      	mov	r1, r5
 801d2e2:	9301      	str	r3, [sp, #4]
 801d2e4:	f992 9000 	ldrsb.w	r9, [r2]
 801d2e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d2ea:	4648      	mov	r0, r9
 801d2ec:	18ac      	adds	r4, r5, r2
 801d2ee:	9403      	str	r4, [sp, #12]
 801d2f0:	f003 fc52 	bl	8020b98 <st_int8_fill>
 801d2f4:	9b02      	ldr	r3, [sp, #8]
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	dd25      	ble.n	801d346 <forward_pad+0x3d6>
 801d2fa:	9b01      	ldr	r3, [sp, #4]
 801d2fc:	eb06 0a07 	add.w	sl, r6, r7
 801d300:	4625      	mov	r5, r4
 801d302:	9601      	str	r6, [sp, #4]
 801d304:	469b      	mov	fp, r3
 801d306:	9b05      	ldr	r3, [sp, #20]
 801d308:	4434      	add	r4, r6
 801d30a:	449a      	add	sl, r3
 801d30c:	461e      	mov	r6, r3
 801d30e:	4629      	mov	r1, r5
 801d310:	9a01      	ldr	r2, [sp, #4]
 801d312:	4648      	mov	r0, r9
 801d314:	f10b 0b01 	add.w	fp, fp, #1
 801d318:	f003 fc3e 	bl	8020b98 <st_int8_fill>
 801d31c:	4621      	mov	r1, r4
 801d31e:	4640      	mov	r0, r8
 801d320:	4632      	mov	r2, r6
 801d322:	f003 fca1 	bl	8020c68 <st_int8_copy>
 801d326:	19a1      	adds	r1, r4, r6
 801d328:	463a      	mov	r2, r7
 801d32a:	4648      	mov	r0, r9
 801d32c:	f003 fc34 	bl	8020b98 <st_int8_fill>
 801d330:	9b02      	ldr	r3, [sp, #8]
 801d332:	4455      	add	r5, sl
 801d334:	44b0      	add	r8, r6
 801d336:	455b      	cmp	r3, fp
 801d338:	4454      	add	r4, sl
 801d33a:	d1e8      	bne.n	801d30e <forward_pad+0x39e>
 801d33c:	461a      	mov	r2, r3
 801d33e:	9b03      	ldr	r3, [sp, #12]
 801d340:	fb0a 3302 	mla	r3, sl, r2, r3
 801d344:	9303      	str	r3, [sp, #12]
 801d346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d348:	4648      	mov	r0, r9
 801d34a:	9903      	ldr	r1, [sp, #12]
 801d34c:	b011      	add	sp, #68	; 0x44
 801d34e:	ecbd 8b02 	vpop	{d8}
 801d352:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d356:	f003 bc1f 	b.w	8020b98 <st_int8_fill>
 801d35a:	68db      	ldr	r3, [r3, #12]
 801d35c:	deff      	udf	#255	; 0xff
 801d35e:	2300      	movs	r3, #0
 801d360:	685b      	ldr	r3, [r3, #4]
 801d362:	deff      	udf	#255	; 0xff

0801d364 <func_dummy>:
 801d364:	4770      	bx	lr
 801d366:	bf00      	nop

0801d368 <forward_dw_3x3_sssa8_ch>:
 801d368:	6983      	ldr	r3, [r0, #24]
 801d36a:	881a      	ldrh	r2, [r3, #0]
 801d36c:	2a00      	cmp	r2, #0
 801d36e:	f000 80d6 	beq.w	801d51e <forward_dw_3x3_sssa8_ch+0x1b6>
 801d372:	6859      	ldr	r1, [r3, #4]
 801d374:	684b      	ldr	r3, [r1, #4]
 801d376:	b103      	cbz	r3, 801d37a <forward_dw_3x3_sssa8_ch+0x12>
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	2a01      	cmp	r2, #1
 801d37c:	f000 80f0 	beq.w	801d560 <forward_dw_3x3_sssa8_ch+0x1f8>
 801d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d384:	f8d1 8010 	ldr.w	r8, [r1, #16]
 801d388:	b097      	sub	sp, #92	; 0x5c
 801d38a:	f1b8 0f00 	cmp.w	r8, #0
 801d38e:	d001      	beq.n	801d394 <forward_dw_3x3_sssa8_ch+0x2c>
 801d390:	f8d8 8000 	ldr.w	r8, [r8]
 801d394:	2a02      	cmp	r2, #2
 801d396:	f000 80bf 	beq.w	801d518 <forward_dw_3x3_sssa8_ch+0x1b0>
 801d39a:	69cc      	ldr	r4, [r1, #28]
 801d39c:	2c00      	cmp	r4, #0
 801d39e:	f000 80d6 	beq.w	801d54e <forward_dw_3x3_sssa8_ch+0x1e6>
 801d3a2:	8b0d      	ldrh	r5, [r1, #24]
 801d3a4:	f8d4 e000 	ldr.w	lr, [r4]
 801d3a8:	2d01      	cmp	r5, #1
 801d3aa:	f200 80ba 	bhi.w	801d522 <forward_dw_3x3_sssa8_ch+0x1ba>
 801d3ae:	2500      	movs	r5, #0
 801d3b0:	2a03      	cmp	r2, #3
 801d3b2:	f000 80d8 	beq.w	801d566 <forward_dw_3x3_sssa8_ch+0x1fe>
 801d3b6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 801d3b8:	2a00      	cmp	r2, #0
 801d3ba:	f000 80cd 	beq.w	801d558 <forward_dw_3x3_sssa8_ch+0x1f0>
 801d3be:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801d3c0:	6817      	ldr	r7, [r2, #0]
 801d3c2:	910e      	str	r1, [sp, #56]	; 0x38
 801d3c4:	2900      	cmp	r1, #0
 801d3c6:	f000 80ba 	beq.w	801d53e <forward_dw_3x3_sssa8_ch+0x1d6>
 801d3ca:	6856      	ldr	r6, [r2, #4]
 801d3cc:	69a9      	ldr	r1, [r5, #24]
 801d3ce:	69ba      	ldr	r2, [r7, #24]
 801d3d0:	6889      	ldr	r1, [r1, #8]
 801d3d2:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 801d3d4:	9115      	str	r1, [sp, #84]	; 0x54
 801d3d6:	9713      	str	r7, [sp, #76]	; 0x4c
 801d3d8:	68f1      	ldr	r1, [r6, #12]
 801d3da:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 801d3dc:	68dd      	ldr	r5, [r3, #12]
 801d3de:	9714      	str	r7, [sp, #80]	; 0x50
 801d3e0:	68cf      	ldr	r7, [r1, #12]
 801d3e2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801d3e6:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 801d3ea:	6889      	ldr	r1, [r1, #8]
 801d3ec:	970f      	str	r7, [sp, #60]	; 0x3c
 801d3ee:	68ef      	ldr	r7, [r5, #12]
 801d3f0:	68ad      	ldr	r5, [r5, #8]
 801d3f2:	9110      	str	r1, [sp, #64]	; 0x40
 801d3f4:	fa1f f18c 	uxth.w	r1, ip
 801d3f8:	6892      	ldr	r2, [r2, #8]
 801d3fa:	9711      	str	r7, [sp, #68]	; 0x44
 801d3fc:	9512      	str	r5, [sp, #72]	; 0x48
 801d3fe:	2c00      	cmp	r4, #0
 801d400:	f000 8097 	beq.w	801d532 <forward_dw_3x3_sssa8_ch+0x1ca>
 801d404:	68a4      	ldr	r4, [r4, #8]
 801d406:	2c00      	cmp	r4, #0
 801d408:	f000 8093 	beq.w	801d532 <forward_dw_3x3_sssa8_ch+0x1ca>
 801d40c:	69a7      	ldr	r7, [r4, #24]
 801d40e:	2f00      	cmp	r7, #0
 801d410:	bf18      	it	ne
 801d412:	4627      	movne	r7, r4
 801d414:	681c      	ldr	r4, [r3, #0]
 801d416:	6835      	ldr	r5, [r6, #0]
 801d418:	f8de 0000 	ldr.w	r0, [lr]
 801d41c:	2c00      	cmp	r4, #0
 801d41e:	f000 8085 	beq.w	801d52c <forward_dw_3x3_sssa8_ch+0x1c4>
 801d422:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801d426:	f1b9 0f00 	cmp.w	r9, #0
 801d42a:	d07f      	beq.n	801d52c <forward_dw_3x3_sssa8_ch+0x1c4>
 801d42c:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 801d430:	f1ba 0f00 	cmp.w	sl, #0
 801d434:	d07a      	beq.n	801d52c <forward_dw_3x3_sssa8_ch+0x1c4>
 801d436:	f8d9 9000 	ldr.w	r9, [r9]
 801d43a:	ed99 0a00 	vldr	s0, [r9]
 801d43e:	2d00      	cmp	r5, #0
 801d440:	d071      	beq.n	801d526 <forward_dw_3x3_sssa8_ch+0x1be>
 801d442:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801d446:	f1b9 0f00 	cmp.w	r9, #0
 801d44a:	d06c      	beq.n	801d526 <forward_dw_3x3_sssa8_ch+0x1be>
 801d44c:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 801d450:	f1ba 0f00 	cmp.w	sl, #0
 801d454:	d067      	beq.n	801d526 <forward_dw_3x3_sssa8_ch+0x1be>
 801d456:	f8d9 9000 	ldr.w	r9, [r9]
 801d45a:	edd9 0a00 	vldr	s1, [r9]
 801d45e:	f8d3 9018 	ldr.w	r9, [r3, #24]
 801d462:	f8de 3018 	ldr.w	r3, [lr, #24]
 801d466:	f8d9 9008 	ldr.w	r9, [r9, #8]
 801d46a:	689b      	ldr	r3, [r3, #8]
 801d46c:	930c      	str	r3, [sp, #48]	; 0x30
 801d46e:	69b3      	ldr	r3, [r6, #24]
 801d470:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801d474:	b110      	cbz	r0, 801d47c <forward_dw_3x3_sssa8_ch+0x114>
 801d476:	6840      	ldr	r0, [r0, #4]
 801d478:	b100      	cbz	r0, 801d47c <forward_dw_3x3_sssa8_ch+0x114>
 801d47a:	6800      	ldr	r0, [r0, #0]
 801d47c:	b13c      	cbz	r4, 801d48e <forward_dw_3x3_sssa8_ch+0x126>
 801d47e:	6863      	ldr	r3, [r4, #4]
 801d480:	2b00      	cmp	r3, #0
 801d482:	d060      	beq.n	801d546 <forward_dw_3x3_sssa8_ch+0x1de>
 801d484:	8864      	ldrh	r4, [r4, #2]
 801d486:	b114      	cbz	r4, 801d48e <forward_dw_3x3_sssa8_ch+0x126>
 801d488:	685b      	ldr	r3, [r3, #4]
 801d48a:	f993 4000 	ldrsb.w	r4, [r3]
 801d48e:	b13d      	cbz	r5, 801d4a0 <forward_dw_3x3_sssa8_ch+0x138>
 801d490:	686b      	ldr	r3, [r5, #4]
 801d492:	2b00      	cmp	r3, #0
 801d494:	d059      	beq.n	801d54a <forward_dw_3x3_sssa8_ch+0x1e2>
 801d496:	886d      	ldrh	r5, [r5, #2]
 801d498:	b115      	cbz	r5, 801d4a0 <forward_dw_3x3_sssa8_ch+0x138>
 801d49a:	685b      	ldr	r3, [r3, #4]
 801d49c:	f993 5000 	ldrsb.w	r5, [r3]
 801d4a0:	fa1f f38c 	uxth.w	r3, ip
 801d4a4:	920d      	str	r2, [sp, #52]	; 0x34
 801d4a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d4aa:	f001 fe6f 	bl	801f18c <align_factor_ch>
 801d4ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d4b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d4b2:	4648      	mov	r0, r9
 801d4b4:	9303      	str	r3, [sp, #12]
 801d4b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d4b8:	9404      	str	r4, [sp, #16]
 801d4ba:	2400      	movs	r4, #0
 801d4bc:	9302      	str	r3, [sp, #8]
 801d4be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d4c0:	920a      	str	r2, [sp, #40]	; 0x28
 801d4c2:	9301      	str	r3, [sp, #4]
 801d4c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d4c6:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801d4ca:	9300      	str	r3, [sp, #0]
 801d4cc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801d4d0:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 801d4d4:	9308      	str	r3, [sp, #32]
 801d4d6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d4da:	9409      	str	r4, [sp, #36]	; 0x24
 801d4dc:	9307      	str	r3, [sp, #28]
 801d4de:	465b      	mov	r3, fp
 801d4e0:	e9cd 5a05 	strd	r5, sl, [sp, #20]
 801d4e4:	f001 f810 	bl	801e508 <forward_lite_dw_3x3_sssa8_ch>
 801d4e8:	68b3      	ldr	r3, [r6, #8]
 801d4ea:	0a1b      	lsrs	r3, r3, #8
 801d4ec:	d032      	beq.n	801d554 <forward_dw_3x3_sssa8_ch+0x1ec>
 801d4ee:	68f0      	ldr	r0, [r6, #12]
 801d4f0:	2201      	movs	r2, #1
 801d4f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801d4f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d4fa:	4298      	cmp	r0, r3
 801d4fc:	fb01 f202 	mul.w	r2, r1, r2
 801d500:	d1f9      	bne.n	801d4f6 <forward_dw_3x3_sssa8_ch+0x18e>
 801d502:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801d506:	463b      	mov	r3, r7
 801d508:	4631      	mov	r1, r6
 801d50a:	4640      	mov	r0, r8
 801d50c:	ee17 ca90 	vmov	ip, s15
 801d510:	b017      	add	sp, #92	; 0x5c
 801d512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d516:	4760      	bx	ip
 801d518:	2300      	movs	r3, #0
 801d51a:	685b      	ldr	r3, [r3, #4]
 801d51c:	deff      	udf	#255	; 0xff
 801d51e:	6853      	ldr	r3, [r2, #4]
 801d520:	deff      	udf	#255	; 0xff
 801d522:	6865      	ldr	r5, [r4, #4]
 801d524:	e744      	b.n	801d3b0 <forward_dw_3x3_sssa8_ch+0x48>
 801d526:	eddf 0a12 	vldr	s1, [pc, #72]	; 801d570 <forward_dw_3x3_sssa8_ch+0x208>
 801d52a:	e798      	b.n	801d45e <forward_dw_3x3_sssa8_ch+0xf6>
 801d52c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801d570 <forward_dw_3x3_sssa8_ch+0x208>
 801d530:	e785      	b.n	801d43e <forward_dw_3x3_sssa8_ch+0xd6>
 801d532:	6a07      	ldr	r7, [r0, #32]
 801d534:	2f00      	cmp	r7, #0
 801d536:	f43f af6d 	beq.w	801d414 <forward_dw_3x3_sssa8_ch+0xac>
 801d53a:	68bf      	ldr	r7, [r7, #8]
 801d53c:	e76a      	b.n	801d414 <forward_dw_3x3_sssa8_ch+0xac>
 801d53e:	4a0d      	ldr	r2, [pc, #52]	; (801d574 <forward_dw_3x3_sssa8_ch+0x20c>)
 801d540:	4646      	mov	r6, r8
 801d542:	920e      	str	r2, [sp, #56]	; 0x38
 801d544:	e742      	b.n	801d3cc <forward_dw_3x3_sssa8_ch+0x64>
 801d546:	461c      	mov	r4, r3
 801d548:	e7a1      	b.n	801d48e <forward_dw_3x3_sssa8_ch+0x126>
 801d54a:	461d      	mov	r5, r3
 801d54c:	e7a8      	b.n	801d4a0 <forward_dw_3x3_sssa8_ch+0x138>
 801d54e:	46a6      	mov	lr, r4
 801d550:	4625      	mov	r5, r4
 801d552:	e72d      	b.n	801d3b0 <forward_dw_3x3_sssa8_ch+0x48>
 801d554:	2201      	movs	r2, #1
 801d556:	e7d4      	b.n	801d502 <forward_dw_3x3_sssa8_ch+0x19a>
 801d558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801d55a:	b93b      	cbnz	r3, 801d56c <forward_dw_3x3_sssa8_ch+0x204>
 801d55c:	699b      	ldr	r3, [r3, #24]
 801d55e:	deff      	udf	#255	; 0xff
 801d560:	2300      	movs	r3, #0
 801d562:	685b      	ldr	r3, [r3, #4]
 801d564:	deff      	udf	#255	; 0xff
 801d566:	2300      	movs	r3, #0
 801d568:	685b      	ldr	r3, [r3, #4]
 801d56a:	deff      	udf	#255	; 0xff
 801d56c:	68d3      	ldr	r3, [r2, #12]
 801d56e:	deff      	udf	#255	; 0xff
 801d570:	00000000 	.word	0x00000000
 801d574:	0801d365 	.word	0x0801d365

0801d578 <func_dummy>:
 801d578:	4770      	bx	lr
 801d57a:	bf00      	nop

0801d57c <forward_pw_sssa8_ch>:
 801d57c:	6983      	ldr	r3, [r0, #24]
 801d57e:	8819      	ldrh	r1, [r3, #0]
 801d580:	2900      	cmp	r1, #0
 801d582:	f000 80fa 	beq.w	801d77a <forward_pw_sssa8_ch+0x1fe>
 801d586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d58a:	ed2d 8b02 	vpush	{d8}
 801d58e:	685d      	ldr	r5, [r3, #4]
 801d590:	b095      	sub	sp, #84	; 0x54
 801d592:	686b      	ldr	r3, [r5, #4]
 801d594:	b103      	cbz	r3, 801d598 <forward_pw_sssa8_ch+0x1c>
 801d596:	681b      	ldr	r3, [r3, #0]
 801d598:	2901      	cmp	r1, #1
 801d59a:	f000 8114 	beq.w	801d7c6 <forward_pw_sssa8_ch+0x24a>
 801d59e:	f8d5 b010 	ldr.w	fp, [r5, #16]
 801d5a2:	f1bb 0f00 	cmp.w	fp, #0
 801d5a6:	d001      	beq.n	801d5ac <forward_pw_sssa8_ch+0x30>
 801d5a8:	f8db b000 	ldr.w	fp, [fp]
 801d5ac:	2902      	cmp	r1, #2
 801d5ae:	f000 80e1 	beq.w	801d774 <forward_pw_sssa8_ch+0x1f8>
 801d5b2:	69ec      	ldr	r4, [r5, #28]
 801d5b4:	2c00      	cmp	r4, #0
 801d5b6:	f000 80ff 	beq.w	801d7b8 <forward_pw_sssa8_ch+0x23c>
 801d5ba:	8b2e      	ldrh	r6, [r5, #24]
 801d5bc:	6822      	ldr	r2, [r4, #0]
 801d5be:	2e01      	cmp	r6, #1
 801d5c0:	f200 80dd 	bhi.w	801d77e <forward_pw_sssa8_ch+0x202>
 801d5c4:	2600      	movs	r6, #0
 801d5c6:	2903      	cmp	r1, #3
 801d5c8:	f000 8100 	beq.w	801d7cc <forward_pw_sssa8_ch+0x250>
 801d5cc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801d5ce:	2900      	cmp	r1, #0
 801d5d0:	f000 80f5 	beq.w	801d7be <forward_pw_sssa8_ch+0x242>
 801d5d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d5d6:	680f      	ldr	r7, [r1, #0]
 801d5d8:	9511      	str	r5, [sp, #68]	; 0x44
 801d5da:	970d      	str	r7, [sp, #52]	; 0x34
 801d5dc:	2d00      	cmp	r5, #0
 801d5de:	f000 80e7 	beq.w	801d7b0 <forward_pw_sssa8_ch+0x234>
 801d5e2:	684f      	ldr	r7, [r1, #4]
 801d5e4:	69b1      	ldr	r1, [r6, #24]
 801d5e6:	68fe      	ldr	r6, [r7, #12]
 801d5e8:	6889      	ldr	r1, [r1, #8]
 801d5ea:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801d5ee:	68f5      	ldr	r5, [r6, #12]
 801d5f0:	9113      	str	r1, [sp, #76]	; 0x4c
 801d5f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d5f4:	f8dc e004 	ldr.w	lr, [ip, #4]
 801d5f8:	6989      	ldr	r1, [r1, #24]
 801d5fa:	9510      	str	r5, [sp, #64]	; 0x40
 801d5fc:	68b5      	ldr	r5, [r6, #8]
 801d5fe:	f8d1 a008 	ldr.w	sl, [r1, #8]
 801d602:	9512      	str	r5, [sp, #72]	; 0x48
 801d604:	fa1f f58e 	uxth.w	r5, lr
 801d608:	6871      	ldr	r1, [r6, #4]
 801d60a:	ee08 5a10 	vmov	s16, r5
 801d60e:	b28d      	uxth	r5, r1
 801d610:	950c      	str	r5, [sp, #48]	; 0x30
 801d612:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801d616:	950a      	str	r5, [sp, #40]	; 0x28
 801d618:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801d61c:	950e      	str	r5, [sp, #56]	; 0x38
 801d61e:	2c00      	cmp	r4, #0
 801d620:	f000 80b5 	beq.w	801d78e <forward_pw_sssa8_ch+0x212>
 801d624:	68a4      	ldr	r4, [r4, #8]
 801d626:	2c00      	cmp	r4, #0
 801d628:	f000 80b1 	beq.w	801d78e <forward_pw_sssa8_ch+0x212>
 801d62c:	f8d4 8018 	ldr.w	r8, [r4, #24]
 801d630:	f1b8 0f00 	cmp.w	r8, #0
 801d634:	bf18      	it	ne
 801d636:	46a0      	movne	r8, r4
 801d638:	681d      	ldr	r5, [r3, #0]
 801d63a:	683e      	ldr	r6, [r7, #0]
 801d63c:	6810      	ldr	r0, [r2, #0]
 801d63e:	2d00      	cmp	r5, #0
 801d640:	f000 80a2 	beq.w	801d788 <forward_pw_sssa8_ch+0x20c>
 801d644:	686c      	ldr	r4, [r5, #4]
 801d646:	2c00      	cmp	r4, #0
 801d648:	f000 809e 	beq.w	801d788 <forward_pw_sssa8_ch+0x20c>
 801d64c:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 801d650:	f1bc 0f00 	cmp.w	ip, #0
 801d654:	f000 8098 	beq.w	801d788 <forward_pw_sssa8_ch+0x20c>
 801d658:	6824      	ldr	r4, [r4, #0]
 801d65a:	ed94 0a00 	vldr	s0, [r4]
 801d65e:	2e00      	cmp	r6, #0
 801d660:	f000 808f 	beq.w	801d782 <forward_pw_sssa8_ch+0x206>
 801d664:	6874      	ldr	r4, [r6, #4]
 801d666:	2c00      	cmp	r4, #0
 801d668:	f000 808b 	beq.w	801d782 <forward_pw_sssa8_ch+0x206>
 801d66c:	f8b6 c002 	ldrh.w	ip, [r6, #2]
 801d670:	f1bc 0f00 	cmp.w	ip, #0
 801d674:	f000 8085 	beq.w	801d782 <forward_pw_sssa8_ch+0x206>
 801d678:	6824      	ldr	r4, [r4, #0]
 801d67a:	edd4 0a00 	vldr	s1, [r4]
 801d67e:	699c      	ldr	r4, [r3, #24]
 801d680:	6993      	ldr	r3, [r2, #24]
 801d682:	f8d4 9008 	ldr.w	r9, [r4, #8]
 801d686:	689b      	ldr	r3, [r3, #8]
 801d688:	930f      	str	r3, [sp, #60]	; 0x3c
 801d68a:	69bb      	ldr	r3, [r7, #24]
 801d68c:	689b      	ldr	r3, [r3, #8]
 801d68e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d690:	b110      	cbz	r0, 801d698 <forward_pw_sssa8_ch+0x11c>
 801d692:	6840      	ldr	r0, [r0, #4]
 801d694:	b100      	cbz	r0, 801d698 <forward_pw_sssa8_ch+0x11c>
 801d696:	6800      	ldr	r0, [r0, #0]
 801d698:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d69a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d69c:	fb03 f202 	mul.w	r2, r3, r2
 801d6a0:	b28b      	uxth	r3, r1
 801d6a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d6a4:	fb03 1202 	mla	r2, r3, r2, r1
 801d6a8:	4591      	cmp	r9, r2
 801d6aa:	d279      	bcs.n	801d7a0 <forward_pw_sssa8_ch+0x224>
 801d6ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d6ae:	fa1f fc8e 	uxth.w	ip, lr
 801d6b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d6b4:	fb02 f404 	mul.w	r4, r2, r4
 801d6b8:	fb0c 9404 	mla	r4, ip, r4, r9
 801d6bc:	42a1      	cmp	r1, r4
 801d6be:	bf2c      	ite	cs
 801d6c0:	2400      	movcs	r4, #0
 801d6c2:	2401      	movcc	r4, #1
 801d6c4:	b13d      	cbz	r5, 801d6d6 <forward_pw_sssa8_ch+0x15a>
 801d6c6:	686a      	ldr	r2, [r5, #4]
 801d6c8:	2a00      	cmp	r2, #0
 801d6ca:	d06d      	beq.n	801d7a8 <forward_pw_sssa8_ch+0x22c>
 801d6cc:	886d      	ldrh	r5, [r5, #2]
 801d6ce:	b115      	cbz	r5, 801d6d6 <forward_pw_sssa8_ch+0x15a>
 801d6d0:	6852      	ldr	r2, [r2, #4]
 801d6d2:	f992 5000 	ldrsb.w	r5, [r2]
 801d6d6:	b13e      	cbz	r6, 801d6e8 <forward_pw_sssa8_ch+0x16c>
 801d6d8:	6872      	ldr	r2, [r6, #4]
 801d6da:	2a00      	cmp	r2, #0
 801d6dc:	d066      	beq.n	801d7ac <forward_pw_sssa8_ch+0x230>
 801d6de:	8876      	ldrh	r6, [r6, #2]
 801d6e0:	b116      	cbz	r6, 801d6e8 <forward_pw_sssa8_ch+0x16c>
 801d6e2:	6852      	ldr	r2, [r2, #4]
 801d6e4:	f992 6000 	ldrsb.w	r6, [r2]
 801d6e8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801d6ec:	4652      	mov	r2, sl
 801d6ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d6f0:	f001 fd4c 	bl	801f18c <align_factor_ch>
 801d6f4:	2c00      	cmp	r4, #0
 801d6f6:	d155      	bne.n	801d7a4 <forward_pw_sssa8_ch+0x228>
 801d6f8:	2301      	movs	r3, #1
 801d6fa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d6fe:	930a      	str	r3, [sp, #40]	; 0x28
 801d700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d702:	2401      	movs	r4, #1
 801d704:	9210      	str	r2, [sp, #64]	; 0x40
 801d706:	699b      	ldr	r3, [r3, #24]
 801d708:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d70c:	f004 fd52 	bl	80221b4 <ai_array_get_byte_size>
 801d710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d712:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d714:	9306      	str	r3, [sp, #24]
 801d716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d718:	9008      	str	r0, [sp, #32]
 801d71a:	4648      	mov	r0, r9
 801d71c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d720:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801d724:	9503      	str	r5, [sp, #12]
 801d726:	9407      	str	r4, [sp, #28]
 801d728:	e9cd 6304 	strd	r6, r3, [sp, #16]
 801d72c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d72e:	9302      	str	r3, [sp, #8]
 801d730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d732:	9301      	str	r3, [sp, #4]
 801d734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d736:	9300      	str	r3, [sp, #0]
 801d738:	ee18 3a10 	vmov	r3, s16
 801d73c:	f000 faec 	bl	801dd18 <forward_lite_pw_sssa8_ch>
 801d740:	68bb      	ldr	r3, [r7, #8]
 801d742:	4622      	mov	r2, r4
 801d744:	0a1b      	lsrs	r3, r3, #8
 801d746:	d008      	beq.n	801d75a <forward_pw_sssa8_ch+0x1de>
 801d748:	68f8      	ldr	r0, [r7, #12]
 801d74a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801d74e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d752:	4298      	cmp	r0, r3
 801d754:	fb01 f202 	mul.w	r2, r1, r2
 801d758:	d1f9      	bne.n	801d74e <forward_pw_sssa8_ch+0x1d2>
 801d75a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 801d75e:	4643      	mov	r3, r8
 801d760:	4639      	mov	r1, r7
 801d762:	4658      	mov	r0, fp
 801d764:	ee17 ca90 	vmov	ip, s15
 801d768:	b015      	add	sp, #84	; 0x54
 801d76a:	ecbd 8b02 	vpop	{d8}
 801d76e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d772:	4760      	bx	ip
 801d774:	2300      	movs	r3, #0
 801d776:	685b      	ldr	r3, [r3, #4]
 801d778:	deff      	udf	#255	; 0xff
 801d77a:	684b      	ldr	r3, [r1, #4]
 801d77c:	deff      	udf	#255	; 0xff
 801d77e:	6866      	ldr	r6, [r4, #4]
 801d780:	e721      	b.n	801d5c6 <forward_pw_sssa8_ch+0x4a>
 801d782:	eddf 0a15 	vldr	s1, [pc, #84]	; 801d7d8 <forward_pw_sssa8_ch+0x25c>
 801d786:	e77a      	b.n	801d67e <forward_pw_sssa8_ch+0x102>
 801d788:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801d7d8 <forward_pw_sssa8_ch+0x25c>
 801d78c:	e767      	b.n	801d65e <forward_pw_sssa8_ch+0xe2>
 801d78e:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801d792:	f1b8 0f00 	cmp.w	r8, #0
 801d796:	f43f af4f 	beq.w	801d638 <forward_pw_sssa8_ch+0xbc>
 801d79a:	f8d8 8008 	ldr.w	r8, [r8, #8]
 801d79e:	e74b      	b.n	801d638 <forward_pw_sssa8_ch+0xbc>
 801d7a0:	2400      	movs	r4, #0
 801d7a2:	e78f      	b.n	801d6c4 <forward_pw_sssa8_ch+0x148>
 801d7a4:	4622      	mov	r2, r4
 801d7a6:	e7ab      	b.n	801d700 <forward_pw_sssa8_ch+0x184>
 801d7a8:	4615      	mov	r5, r2
 801d7aa:	e794      	b.n	801d6d6 <forward_pw_sssa8_ch+0x15a>
 801d7ac:	4616      	mov	r6, r2
 801d7ae:	e79b      	b.n	801d6e8 <forward_pw_sssa8_ch+0x16c>
 801d7b0:	490a      	ldr	r1, [pc, #40]	; (801d7dc <forward_pw_sssa8_ch+0x260>)
 801d7b2:	465f      	mov	r7, fp
 801d7b4:	9111      	str	r1, [sp, #68]	; 0x44
 801d7b6:	e715      	b.n	801d5e4 <forward_pw_sssa8_ch+0x68>
 801d7b8:	4622      	mov	r2, r4
 801d7ba:	4626      	mov	r6, r4
 801d7bc:	e703      	b.n	801d5c6 <forward_pw_sssa8_ch+0x4a>
 801d7be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801d7c0:	b93b      	cbnz	r3, 801d7d2 <forward_pw_sssa8_ch+0x256>
 801d7c2:	699b      	ldr	r3, [r3, #24]
 801d7c4:	deff      	udf	#255	; 0xff
 801d7c6:	2300      	movs	r3, #0
 801d7c8:	685b      	ldr	r3, [r3, #4]
 801d7ca:	deff      	udf	#255	; 0xff
 801d7cc:	2300      	movs	r3, #0
 801d7ce:	685b      	ldr	r3, [r3, #4]
 801d7d0:	deff      	udf	#255	; 0xff
 801d7d2:	68cb      	ldr	r3, [r1, #12]
 801d7d4:	deff      	udf	#255	; 0xff
 801d7d6:	bf00      	nop
 801d7d8:	00000000 	.word	0x00000000
 801d7dc:	0801d579 	.word	0x0801d579

0801d7e0 <ai_check_custom_types>:
 801d7e0:	b082      	sub	sp, #8
 801d7e2:	4b12      	ldr	r3, [pc, #72]	; (801d82c <ai_check_custom_types+0x4c>)
 801d7e4:	9301      	str	r3, [sp, #4]
 801d7e6:	b118      	cbz	r0, 801d7f0 <ai_check_custom_types+0x10>
 801d7e8:	7803      	ldrb	r3, [r0, #0]
 801d7ea:	2b03      	cmp	r3, #3
 801d7ec:	d002      	beq.n	801d7f4 <ai_check_custom_types+0x14>
 801d7ee:	2000      	movs	r0, #0
 801d7f0:	b002      	add	sp, #8
 801d7f2:	4770      	bx	lr
 801d7f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801d7f8:	4293      	cmp	r3, r2
 801d7fa:	d004      	beq.n	801d806 <ai_check_custom_types+0x26>
 801d7fc:	2001      	movs	r0, #1
 801d7fe:	f080 0001 	eor.w	r0, r0, #1
 801d802:	b002      	add	sp, #8
 801d804:	4770      	bx	lr
 801d806:	7842      	ldrb	r2, [r0, #1]
 801d808:	3001      	adds	r0, #1
 801d80a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801d80e:	429a      	cmp	r2, r3
 801d810:	d1f4      	bne.n	801d7fc <ai_check_custom_types+0x1c>
 801d812:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801d816:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801d81a:	429a      	cmp	r2, r3
 801d81c:	d1ee      	bne.n	801d7fc <ai_check_custom_types+0x1c>
 801d81e:	7842      	ldrb	r2, [r0, #1]
 801d820:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801d824:	429a      	cmp	r2, r3
 801d826:	d1e9      	bne.n	801d7fc <ai_check_custom_types+0x1c>
 801d828:	2000      	movs	r0, #0
 801d82a:	e7e8      	b.n	801d7fe <ai_check_custom_types+0x1e>
 801d82c:	84048403 	.word	0x84048403

0801d830 <ai_layers_init_all>:
 801d830:	2100      	movs	r1, #0
 801d832:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801d834:	b13b      	cbz	r3, 801d846 <ai_layers_init_all+0x16>
 801d836:	691a      	ldr	r2, [r3, #16]
 801d838:	3101      	adds	r1, #1
 801d83a:	60d8      	str	r0, [r3, #12]
 801d83c:	429a      	cmp	r2, r3
 801d83e:	4613      	mov	r3, r2
 801d840:	d001      	beq.n	801d846 <ai_layers_init_all+0x16>
 801d842:	2a00      	cmp	r2, #0
 801d844:	d1f6      	bne.n	801d834 <ai_layers_init_all+0x4>
 801d846:	4608      	mov	r0, r1
 801d848:	4770      	bx	lr
 801d84a:	bf00      	nop

0801d84c <ai_layers_post_init_all>:
 801d84c:	b538      	push	{r3, r4, r5, lr}
 801d84e:	2500      	movs	r5, #0
 801d850:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801d852:	b16c      	cbz	r4, 801d870 <ai_layers_post_init_all+0x24>
 801d854:	6863      	ldr	r3, [r4, #4]
 801d856:	07db      	lsls	r3, r3, #31
 801d858:	d504      	bpl.n	801d864 <ai_layers_post_init_all+0x18>
 801d85a:	6a23      	ldr	r3, [r4, #32]
 801d85c:	4620      	mov	r0, r4
 801d85e:	b10b      	cbz	r3, 801d864 <ai_layers_post_init_all+0x18>
 801d860:	3501      	adds	r5, #1
 801d862:	4798      	blx	r3
 801d864:	6923      	ldr	r3, [r4, #16]
 801d866:	42a3      	cmp	r3, r4
 801d868:	461c      	mov	r4, r3
 801d86a:	d001      	beq.n	801d870 <ai_layers_post_init_all+0x24>
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d1f0      	bne.n	801d852 <ai_layers_post_init_all+0x6>
 801d870:	4628      	mov	r0, r5
 801d872:	bd38      	pop	{r3, r4, r5, pc}

0801d874 <ai_layers_forward_all>:
 801d874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d878:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 801d87c:	4604      	mov	r4, r0
 801d87e:	f1b8 0f00 	cmp.w	r8, #0
 801d882:	d02a      	beq.n	801d8da <ai_layers_forward_all+0x66>
 801d884:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801d886:	6381      	str	r1, [r0, #56]	; 0x38
 801d888:	b319      	cbz	r1, 801d8d2 <ai_layers_forward_all+0x5e>
 801d88a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801d88c:	2001      	movs	r0, #1
 801d88e:	47c0      	blx	r8
 801d890:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801d892:	b1f6      	cbz	r6, 801d8d2 <ai_layers_forward_all+0x5e>
 801d894:	2700      	movs	r7, #0
 801d896:	4631      	mov	r1, r6
 801d898:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d89a:	2002      	movs	r0, #2
 801d89c:	47c0      	blx	r8
 801d89e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801d8a0:	4628      	mov	r0, r5
 801d8a2:	696b      	ldr	r3, [r5, #20]
 801d8a4:	4798      	blx	r3
 801d8a6:	692e      	ldr	r6, [r5, #16]
 801d8a8:	2003      	movs	r0, #3
 801d8aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d8ac:	42b5      	cmp	r5, r6
 801d8ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d8b0:	d007      	beq.n	801d8c2 <ai_layers_forward_all+0x4e>
 801d8b2:	47c0      	blx	r8
 801d8b4:	3701      	adds	r7, #1
 801d8b6:	63a6      	str	r6, [r4, #56]	; 0x38
 801d8b8:	2e00      	cmp	r6, #0
 801d8ba:	d1ec      	bne.n	801d896 <ai_layers_forward_all+0x22>
 801d8bc:	4638      	mov	r0, r7
 801d8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8c2:	2003      	movs	r0, #3
 801d8c4:	3701      	adds	r7, #1
 801d8c6:	47c0      	blx	r8
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	4638      	mov	r0, r7
 801d8cc:	63a3      	str	r3, [r4, #56]	; 0x38
 801d8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8d2:	2700      	movs	r7, #0
 801d8d4:	4638      	mov	r0, r7
 801d8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8da:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801d8dc:	6385      	str	r5, [r0, #56]	; 0x38
 801d8de:	2d00      	cmp	r5, #0
 801d8e0:	d0f7      	beq.n	801d8d2 <ai_layers_forward_all+0x5e>
 801d8e2:	4647      	mov	r7, r8
 801d8e4:	696b      	ldr	r3, [r5, #20]
 801d8e6:	4628      	mov	r0, r5
 801d8e8:	4798      	blx	r3
 801d8ea:	462b      	mov	r3, r5
 801d8ec:	692d      	ldr	r5, [r5, #16]
 801d8ee:	429d      	cmp	r5, r3
 801d8f0:	d004      	beq.n	801d8fc <ai_layers_forward_all+0x88>
 801d8f2:	3701      	adds	r7, #1
 801d8f4:	63a5      	str	r5, [r4, #56]	; 0x38
 801d8f6:	2d00      	cmp	r5, #0
 801d8f8:	d1f4      	bne.n	801d8e4 <ai_layers_forward_all+0x70>
 801d8fa:	e7df      	b.n	801d8bc <ai_layers_forward_all+0x48>
 801d8fc:	2300      	movs	r3, #0
 801d8fe:	3701      	adds	r7, #1
 801d900:	63a3      	str	r3, [r4, #56]	; 0x38
 801d902:	e7db      	b.n	801d8bc <ai_layers_forward_all+0x48>

0801d904 <ai_layers_destroy_all>:
 801d904:	b538      	push	{r3, r4, r5, lr}
 801d906:	2500      	movs	r5, #0
 801d908:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801d90a:	b16c      	cbz	r4, 801d928 <ai_layers_destroy_all+0x24>
 801d90c:	6863      	ldr	r3, [r4, #4]
 801d90e:	075b      	lsls	r3, r3, #29
 801d910:	d504      	bpl.n	801d91c <ai_layers_destroy_all+0x18>
 801d912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d914:	4620      	mov	r0, r4
 801d916:	b10b      	cbz	r3, 801d91c <ai_layers_destroy_all+0x18>
 801d918:	3501      	adds	r5, #1
 801d91a:	4798      	blx	r3
 801d91c:	6923      	ldr	r3, [r4, #16]
 801d91e:	42a3      	cmp	r3, r4
 801d920:	461c      	mov	r4, r3
 801d922:	d001      	beq.n	801d928 <ai_layers_destroy_all+0x24>
 801d924:	2b00      	cmp	r3, #0
 801d926:	d1f0      	bne.n	801d90a <ai_layers_destroy_all+0x6>
 801d928:	4628      	mov	r0, r5
 801d92a:	bd38      	pop	{r3, r4, r5, pc}

0801d92c <func_dummy>:
 801d92c:	4770      	bx	lr
 801d92e:	bf00      	nop

0801d930 <forward_conv2d_rgb_sssa8_ch>:
 801d930:	6983      	ldr	r3, [r0, #24]
 801d932:	881a      	ldrh	r2, [r3, #0]
 801d934:	2a00      	cmp	r2, #0
 801d936:	f000 80cf 	beq.w	801dad8 <forward_conv2d_rgb_sssa8_ch+0x1a8>
 801d93a:	6859      	ldr	r1, [r3, #4]
 801d93c:	684b      	ldr	r3, [r1, #4]
 801d93e:	b103      	cbz	r3, 801d942 <forward_conv2d_rgb_sssa8_ch+0x12>
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	2a01      	cmp	r2, #1
 801d944:	f000 80e9 	beq.w	801db1a <forward_conv2d_rgb_sssa8_ch+0x1ea>
 801d948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d94c:	f8d1 8010 	ldr.w	r8, [r1, #16]
 801d950:	b095      	sub	sp, #84	; 0x54
 801d952:	f1b8 0f00 	cmp.w	r8, #0
 801d956:	d001      	beq.n	801d95c <forward_conv2d_rgb_sssa8_ch+0x2c>
 801d958:	f8d8 8000 	ldr.w	r8, [r8]
 801d95c:	2a02      	cmp	r2, #2
 801d95e:	f000 80b8 	beq.w	801dad2 <forward_conv2d_rgb_sssa8_ch+0x1a2>
 801d962:	69cc      	ldr	r4, [r1, #28]
 801d964:	2c00      	cmp	r4, #0
 801d966:	f000 80cf 	beq.w	801db08 <forward_conv2d_rgb_sssa8_ch+0x1d8>
 801d96a:	8b0d      	ldrh	r5, [r1, #24]
 801d96c:	f8d4 e000 	ldr.w	lr, [r4]
 801d970:	2d01      	cmp	r5, #1
 801d972:	f200 80b3 	bhi.w	801dadc <forward_conv2d_rgb_sssa8_ch+0x1ac>
 801d976:	2500      	movs	r5, #0
 801d978:	2a03      	cmp	r2, #3
 801d97a:	f000 80d1 	beq.w	801db20 <forward_conv2d_rgb_sssa8_ch+0x1f0>
 801d97e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 801d980:	2a00      	cmp	r2, #0
 801d982:	f000 80c6 	beq.w	801db12 <forward_conv2d_rgb_sssa8_ch+0x1e2>
 801d986:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 801d98a:	6817      	ldr	r7, [r2, #0]
 801d98c:	f1bb 0f00 	cmp.w	fp, #0
 801d990:	f000 80b2 	beq.w	801daf8 <forward_conv2d_rgb_sssa8_ch+0x1c8>
 801d994:	6856      	ldr	r6, [r2, #4]
 801d996:	69a9      	ldr	r1, [r5, #24]
 801d998:	68f5      	ldr	r5, [r6, #12]
 801d99a:	6889      	ldr	r1, [r1, #8]
 801d99c:	69ba      	ldr	r2, [r7, #24]
 801d99e:	9113      	str	r1, [sp, #76]	; 0x4c
 801d9a0:	68d9      	ldr	r1, [r3, #12]
 801d9a2:	6892      	ldr	r2, [r2, #8]
 801d9a4:	6889      	ldr	r1, [r1, #8]
 801d9a6:	910f      	str	r1, [sp, #60]	; 0x3c
 801d9a8:	e9d5 c101 	ldrd	ip, r1, [r5, #4]
 801d9ac:	8d05      	ldrh	r5, [r0, #40]	; 0x28
 801d9ae:	910e      	str	r1, [sp, #56]	; 0x38
 801d9b0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 801d9b2:	9510      	str	r5, [sp, #64]	; 0x40
 801d9b4:	8889      	ldrh	r1, [r1, #4]
 801d9b6:	9111      	str	r1, [sp, #68]	; 0x44
 801d9b8:	f8de 100c 	ldr.w	r1, [lr, #12]
 801d9bc:	6849      	ldr	r1, [r1, #4]
 801d9be:	9112      	str	r1, [sp, #72]	; 0x48
 801d9c0:	fa1f f18c 	uxth.w	r1, ip
 801d9c4:	2c00      	cmp	r4, #0
 801d9c6:	f000 8091 	beq.w	801daec <forward_conv2d_rgb_sssa8_ch+0x1bc>
 801d9ca:	68a4      	ldr	r4, [r4, #8]
 801d9cc:	2c00      	cmp	r4, #0
 801d9ce:	f000 808d 	beq.w	801daec <forward_conv2d_rgb_sssa8_ch+0x1bc>
 801d9d2:	69a7      	ldr	r7, [r4, #24]
 801d9d4:	2f00      	cmp	r7, #0
 801d9d6:	bf18      	it	ne
 801d9d8:	4627      	movne	r7, r4
 801d9da:	681c      	ldr	r4, [r3, #0]
 801d9dc:	6835      	ldr	r5, [r6, #0]
 801d9de:	f8de 0000 	ldr.w	r0, [lr]
 801d9e2:	2c00      	cmp	r4, #0
 801d9e4:	d07f      	beq.n	801dae6 <forward_conv2d_rgb_sssa8_ch+0x1b6>
 801d9e6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801d9ea:	f1b9 0f00 	cmp.w	r9, #0
 801d9ee:	d07a      	beq.n	801dae6 <forward_conv2d_rgb_sssa8_ch+0x1b6>
 801d9f0:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 801d9f4:	f1ba 0f00 	cmp.w	sl, #0
 801d9f8:	d075      	beq.n	801dae6 <forward_conv2d_rgb_sssa8_ch+0x1b6>
 801d9fa:	f8d9 9000 	ldr.w	r9, [r9]
 801d9fe:	ed99 0a00 	vldr	s0, [r9]
 801da02:	2d00      	cmp	r5, #0
 801da04:	d06c      	beq.n	801dae0 <forward_conv2d_rgb_sssa8_ch+0x1b0>
 801da06:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801da0a:	f1b9 0f00 	cmp.w	r9, #0
 801da0e:	d067      	beq.n	801dae0 <forward_conv2d_rgb_sssa8_ch+0x1b0>
 801da10:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 801da14:	f1ba 0f00 	cmp.w	sl, #0
 801da18:	d062      	beq.n	801dae0 <forward_conv2d_rgb_sssa8_ch+0x1b0>
 801da1a:	f8d9 9000 	ldr.w	r9, [r9]
 801da1e:	edd9 0a00 	vldr	s1, [r9]
 801da22:	f8d3 9018 	ldr.w	r9, [r3, #24]
 801da26:	f8de 3018 	ldr.w	r3, [lr, #24]
 801da2a:	f8d9 9008 	ldr.w	r9, [r9, #8]
 801da2e:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801da32:	69b3      	ldr	r3, [r6, #24]
 801da34:	689b      	ldr	r3, [r3, #8]
 801da36:	930b      	str	r3, [sp, #44]	; 0x2c
 801da38:	b110      	cbz	r0, 801da40 <forward_conv2d_rgb_sssa8_ch+0x110>
 801da3a:	6840      	ldr	r0, [r0, #4]
 801da3c:	b100      	cbz	r0, 801da40 <forward_conv2d_rgb_sssa8_ch+0x110>
 801da3e:	6800      	ldr	r0, [r0, #0]
 801da40:	b13c      	cbz	r4, 801da52 <forward_conv2d_rgb_sssa8_ch+0x122>
 801da42:	6863      	ldr	r3, [r4, #4]
 801da44:	2b00      	cmp	r3, #0
 801da46:	d05b      	beq.n	801db00 <forward_conv2d_rgb_sssa8_ch+0x1d0>
 801da48:	8864      	ldrh	r4, [r4, #2]
 801da4a:	b114      	cbz	r4, 801da52 <forward_conv2d_rgb_sssa8_ch+0x122>
 801da4c:	685b      	ldr	r3, [r3, #4]
 801da4e:	f993 4000 	ldrsb.w	r4, [r3]
 801da52:	b13d      	cbz	r5, 801da64 <forward_conv2d_rgb_sssa8_ch+0x134>
 801da54:	686b      	ldr	r3, [r5, #4]
 801da56:	2b00      	cmp	r3, #0
 801da58:	d054      	beq.n	801db04 <forward_conv2d_rgb_sssa8_ch+0x1d4>
 801da5a:	886d      	ldrh	r5, [r5, #2]
 801da5c:	b115      	cbz	r5, 801da64 <forward_conv2d_rgb_sssa8_ch+0x134>
 801da5e:	685b      	ldr	r3, [r3, #4]
 801da60:	f993 5000 	ldrsb.w	r5, [r3]
 801da64:	fa1f f38c 	uxth.w	r3, ip
 801da68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801da6c:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 801da70:	f001 fb8c 	bl	801f18c <align_factor_ch>
 801da74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da78:	4648      	mov	r0, r9
 801da7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801da7c:	9208      	str	r2, [sp, #32]
 801da7e:	4652      	mov	r2, sl
 801da80:	9404      	str	r4, [sp, #16]
 801da82:	e9cd 5305 	strd	r5, r3, [sp, #20]
 801da86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801da88:	9303      	str	r3, [sp, #12]
 801da8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801da8c:	9302      	str	r3, [sp, #8]
 801da8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801da90:	9301      	str	r3, [sp, #4]
 801da92:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801da96:	9307      	str	r3, [sp, #28]
 801da98:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801da9c:	9300      	str	r3, [sp, #0]
 801da9e:	460b      	mov	r3, r1
 801daa0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801daa4:	f000 fad4 	bl	801e050 <forward_lite_conv2d_rgb_sssa8_ch>
 801daa8:	68b3      	ldr	r3, [r6, #8]
 801daaa:	0a1b      	lsrs	r3, r3, #8
 801daac:	d02f      	beq.n	801db0e <forward_conv2d_rgb_sssa8_ch+0x1de>
 801daae:	68f0      	ldr	r0, [r6, #12]
 801dab0:	2201      	movs	r2, #1
 801dab2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801dab6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801daba:	4298      	cmp	r0, r3
 801dabc:	fb01 f202 	mul.w	r2, r1, r2
 801dac0:	d1f9      	bne.n	801dab6 <forward_conv2d_rgb_sssa8_ch+0x186>
 801dac2:	463b      	mov	r3, r7
 801dac4:	4631      	mov	r1, r6
 801dac6:	4640      	mov	r0, r8
 801dac8:	46dc      	mov	ip, fp
 801daca:	b015      	add	sp, #84	; 0x54
 801dacc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dad0:	4760      	bx	ip
 801dad2:	2300      	movs	r3, #0
 801dad4:	685b      	ldr	r3, [r3, #4]
 801dad6:	deff      	udf	#255	; 0xff
 801dad8:	6853      	ldr	r3, [r2, #4]
 801dada:	deff      	udf	#255	; 0xff
 801dadc:	6865      	ldr	r5, [r4, #4]
 801dade:	e74b      	b.n	801d978 <forward_conv2d_rgb_sssa8_ch+0x48>
 801dae0:	eddf 0a12 	vldr	s1, [pc, #72]	; 801db2c <forward_conv2d_rgb_sssa8_ch+0x1fc>
 801dae4:	e79d      	b.n	801da22 <forward_conv2d_rgb_sssa8_ch+0xf2>
 801dae6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801db2c <forward_conv2d_rgb_sssa8_ch+0x1fc>
 801daea:	e78a      	b.n	801da02 <forward_conv2d_rgb_sssa8_ch+0xd2>
 801daec:	6a07      	ldr	r7, [r0, #32]
 801daee:	2f00      	cmp	r7, #0
 801daf0:	f43f af73 	beq.w	801d9da <forward_conv2d_rgb_sssa8_ch+0xaa>
 801daf4:	68bf      	ldr	r7, [r7, #8]
 801daf6:	e770      	b.n	801d9da <forward_conv2d_rgb_sssa8_ch+0xaa>
 801daf8:	4646      	mov	r6, r8
 801dafa:	f8df b034 	ldr.w	fp, [pc, #52]	; 801db30 <forward_conv2d_rgb_sssa8_ch+0x200>
 801dafe:	e74a      	b.n	801d996 <forward_conv2d_rgb_sssa8_ch+0x66>
 801db00:	461c      	mov	r4, r3
 801db02:	e7a6      	b.n	801da52 <forward_conv2d_rgb_sssa8_ch+0x122>
 801db04:	461d      	mov	r5, r3
 801db06:	e7ad      	b.n	801da64 <forward_conv2d_rgb_sssa8_ch+0x134>
 801db08:	46a6      	mov	lr, r4
 801db0a:	4625      	mov	r5, r4
 801db0c:	e734      	b.n	801d978 <forward_conv2d_rgb_sssa8_ch+0x48>
 801db0e:	2201      	movs	r2, #1
 801db10:	e7d7      	b.n	801dac2 <forward_conv2d_rgb_sssa8_ch+0x192>
 801db12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801db14:	b93b      	cbnz	r3, 801db26 <forward_conv2d_rgb_sssa8_ch+0x1f6>
 801db16:	699b      	ldr	r3, [r3, #24]
 801db18:	deff      	udf	#255	; 0xff
 801db1a:	2300      	movs	r3, #0
 801db1c:	685b      	ldr	r3, [r3, #4]
 801db1e:	deff      	udf	#255	; 0xff
 801db20:	2300      	movs	r3, #0
 801db22:	685b      	ldr	r3, [r3, #4]
 801db24:	deff      	udf	#255	; 0xff
 801db26:	68d3      	ldr	r3, [r2, #12]
 801db28:	deff      	udf	#255	; 0xff
 801db2a:	bf00      	nop
 801db2c:	00000000 	.word	0x00000000
 801db30:	0801d92d 	.word	0x0801d92d

0801db34 <forward_ap_integer_INT8>:
 801db34:	6983      	ldr	r3, [r0, #24]
 801db36:	881a      	ldrh	r2, [r3, #0]
 801db38:	2a00      	cmp	r2, #0
 801db3a:	d074      	beq.n	801dc26 <forward_ap_integer_INT8+0xf2>
 801db3c:	6859      	ldr	r1, [r3, #4]
 801db3e:	684b      	ldr	r3, [r1, #4]
 801db40:	b103      	cbz	r3, 801db44 <forward_ap_integer_INT8+0x10>
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	2a01      	cmp	r2, #1
 801db46:	f000 80e0 	beq.w	801dd0a <forward_ap_integer_INT8+0x1d6>
 801db4a:	690a      	ldr	r2, [r1, #16]
 801db4c:	2a00      	cmp	r2, #0
 801db4e:	f000 80df 	beq.w	801dd10 <forward_ap_integer_INT8+0x1dc>
 801db52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db56:	68de      	ldr	r6, [r3, #12]
 801db58:	b095      	sub	sp, #84	; 0x54
 801db5a:	6811      	ldr	r1, [r2, #0]
 801db5c:	681c      	ldr	r4, [r3, #0]
 801db5e:	f8d3 b018 	ldr.w	fp, [r3, #24]
 801db62:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 801db66:	8932      	ldrh	r2, [r6, #8]
 801db68:	89b3      	ldrh	r3, [r6, #12]
 801db6a:	8b86      	ldrh	r6, [r0, #28]
 801db6c:	6b07      	ldr	r7, [r0, #48]	; 0x30
 801db6e:	960d      	str	r6, [sp, #52]	; 0x34
 801db70:	8c06      	ldrh	r6, [r0, #32]
 801db72:	68cd      	ldr	r5, [r1, #12]
 801db74:	960e      	str	r6, [sp, #56]	; 0x38
 801db76:	88be      	ldrh	r6, [r7, #4]
 801db78:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 801db7c:	960f      	str	r6, [sp, #60]	; 0x3c
 801db7e:	883e      	ldrh	r6, [r7, #0]
 801db80:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 801db84:	9610      	str	r6, [sp, #64]	; 0x40
 801db86:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 801db88:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 801db8a:	9611      	str	r6, [sp, #68]	; 0x44
 801db8c:	f8d1 a018 	ldr.w	sl, [r1, #24]
 801db90:	680e      	ldr	r6, [r1, #0]
 801db92:	9012      	str	r0, [sp, #72]	; 0x48
 801db94:	2c00      	cmp	r4, #0
 801db96:	d060      	beq.n	801dc5a <forward_ap_integer_INT8+0x126>
 801db98:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801db9c:	f1b9 0f00 	cmp.w	r9, #0
 801dba0:	d043      	beq.n	801dc2a <forward_ap_integer_INT8+0xf6>
 801dba2:	8865      	ldrh	r5, [r4, #2]
 801dba4:	2d00      	cmp	r5, #0
 801dba6:	d06e      	beq.n	801dc86 <forward_ap_integer_INT8+0x152>
 801dba8:	f8d9 1000 	ldr.w	r1, [r9]
 801dbac:	ed91 0a00 	vldr	s0, [r1]
 801dbb0:	2e00      	cmp	r6, #0
 801dbb2:	d06c      	beq.n	801dc8e <forward_ap_integer_INT8+0x15a>
 801dbb4:	6877      	ldr	r7, [r6, #4]
 801dbb6:	2f00      	cmp	r7, #0
 801dbb8:	d03e      	beq.n	801dc38 <forward_ap_integer_INT8+0x104>
 801dbba:	8871      	ldrh	r1, [r6, #2]
 801dbbc:	9113      	str	r1, [sp, #76]	; 0x4c
 801dbbe:	2900      	cmp	r1, #0
 801dbc0:	d053      	beq.n	801dc6a <forward_ap_integer_INT8+0x136>
 801dbc2:	683d      	ldr	r5, [r7, #0]
 801dbc4:	f8db 0008 	ldr.w	r0, [fp, #8]
 801dbc8:	f8da 1008 	ldr.w	r1, [sl, #8]
 801dbcc:	edd5 0a00 	vldr	s1, [r5]
 801dbd0:	f1b9 0f00 	cmp.w	r9, #0
 801dbd4:	d055      	beq.n	801dc82 <forward_ap_integer_INT8+0x14e>
 801dbd6:	8864      	ldrh	r4, [r4, #2]
 801dbd8:	2c00      	cmp	r4, #0
 801dbda:	d039      	beq.n	801dc50 <forward_ap_integer_INT8+0x11c>
 801dbdc:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801dbe0:	f994 4000 	ldrsb.w	r4, [r4]
 801dbe4:	2e00      	cmp	r6, #0
 801dbe6:	d036      	beq.n	801dc56 <forward_ap_integer_INT8+0x122>
 801dbe8:	2f00      	cmp	r7, #0
 801dbea:	d034      	beq.n	801dc56 <forward_ap_integer_INT8+0x122>
 801dbec:	8875      	ldrh	r5, [r6, #2]
 801dbee:	9513      	str	r5, [sp, #76]	; 0x4c
 801dbf0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801dbf2:	b115      	cbz	r5, 801dbfa <forward_ap_integer_INT8+0xc6>
 801dbf4:	687d      	ldr	r5, [r7, #4]
 801dbf6:	f995 5000 	ldrsb.w	r5, [r5]
 801dbfa:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 801dbfe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dc00:	9406      	str	r4, [sp, #24]
 801dc02:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dc04:	9405      	str	r4, [sp, #20]
 801dc06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dc08:	9404      	str	r4, [sp, #16]
 801dc0a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dc0c:	9403      	str	r4, [sp, #12]
 801dc0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dc10:	9402      	str	r4, [sp, #8]
 801dc12:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dc14:	e9cd e807 	strd	lr, r8, [sp, #28]
 801dc18:	e9cd c400 	strd	ip, r4, [sp]
 801dc1c:	f003 fe0a 	bl	8021834 <st_int8_avepool>
 801dc20:	b015      	add	sp, #84	; 0x54
 801dc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc26:	6853      	ldr	r3, [r2, #4]
 801dc28:	deff      	udf	#255	; 0xff
 801dc2a:	2e00      	cmp	r6, #0
 801dc2c:	d039      	beq.n	801dca2 <forward_ap_integer_INT8+0x16e>
 801dc2e:	6877      	ldr	r7, [r6, #4]
 801dc30:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dc34:	2f00      	cmp	r7, #0
 801dc36:	d1c0      	bne.n	801dbba <forward_ap_integer_INT8+0x86>
 801dc38:	f8db 0008 	ldr.w	r0, [fp, #8]
 801dc3c:	f8da 1008 	ldr.w	r1, [sl, #8]
 801dc40:	f1b9 0f00 	cmp.w	r9, #0
 801dc44:	d05c      	beq.n	801dd00 <forward_ap_integer_INT8+0x1cc>
 801dc46:	8864      	ldrh	r4, [r4, #2]
 801dc48:	2c00      	cmp	r4, #0
 801dc4a:	d152      	bne.n	801dcf2 <forward_ap_integer_INT8+0x1be>
 801dc4c:	eddf 0a31 	vldr	s1, [pc, #196]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dc50:	2400      	movs	r4, #0
 801dc52:	2f00      	cmp	r7, #0
 801dc54:	d1ca      	bne.n	801dbec <forward_ap_integer_INT8+0xb8>
 801dc56:	2500      	movs	r5, #0
 801dc58:	e7cf      	b.n	801dbfa <forward_ap_integer_INT8+0xc6>
 801dc5a:	b316      	cbz	r6, 801dca2 <forward_ap_integer_INT8+0x16e>
 801dc5c:	6877      	ldr	r7, [r6, #4]
 801dc5e:	b35f      	cbz	r7, 801dcb8 <forward_ap_integer_INT8+0x184>
 801dc60:	8871      	ldrh	r1, [r6, #2]
 801dc62:	9113      	str	r1, [sp, #76]	; 0x4c
 801dc64:	bb99      	cbnz	r1, 801dcce <forward_ap_integer_INT8+0x19a>
 801dc66:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dc6a:	f8db 0008 	ldr.w	r0, [fp, #8]
 801dc6e:	f8da 1008 	ldr.w	r1, [sl, #8]
 801dc72:	b194      	cbz	r4, 801dc9a <forward_ap_integer_INT8+0x166>
 801dc74:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801dc78:	eddf 0a26 	vldr	s1, [pc, #152]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dc7c:	f1b9 0f00 	cmp.w	r9, #0
 801dc80:	d1a9      	bne.n	801dbd6 <forward_ap_integer_INT8+0xa2>
 801dc82:	464c      	mov	r4, r9
 801dc84:	e7b4      	b.n	801dbf0 <forward_ap_integer_INT8+0xbc>
 801dc86:	ed9f 0a23 	vldr	s0, [pc, #140]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dc8a:	2e00      	cmp	r6, #0
 801dc8c:	d192      	bne.n	801dbb4 <forward_ap_integer_INT8+0x80>
 801dc8e:	f8db 0008 	ldr.w	r0, [fp, #8]
 801dc92:	f8da 1008 	ldr.w	r1, [sl, #8]
 801dc96:	bb25      	cbnz	r5, 801dce2 <forward_ap_integer_INT8+0x1ae>
 801dc98:	462c      	mov	r4, r5
 801dc9a:	eddf 0a1e 	vldr	s1, [pc, #120]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dc9e:	4625      	mov	r5, r4
 801dca0:	e7ab      	b.n	801dbfa <forward_ap_integer_INT8+0xc6>
 801dca2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dca6:	4634      	mov	r4, r6
 801dca8:	f8db 0008 	ldr.w	r0, [fp, #8]
 801dcac:	4635      	mov	r5, r6
 801dcae:	eef0 0a40 	vmov.f32	s1, s0
 801dcb2:	f8da 1008 	ldr.w	r1, [sl, #8]
 801dcb6:	e7a0      	b.n	801dbfa <forward_ap_integer_INT8+0xc6>
 801dcb8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dcbc:	463c      	mov	r4, r7
 801dcbe:	f8db 0008 	ldr.w	r0, [fp, #8]
 801dcc2:	463d      	mov	r5, r7
 801dcc4:	eef0 0a40 	vmov.f32	s1, s0
 801dcc8:	f8da 1008 	ldr.w	r1, [sl, #8]
 801dccc:	e795      	b.n	801dbfa <forward_ap_integer_INT8+0xc6>
 801dcce:	683d      	ldr	r5, [r7, #0]
 801dcd0:	f8db 0008 	ldr.w	r0, [fp, #8]
 801dcd4:	f8da 1008 	ldr.w	r1, [sl, #8]
 801dcd8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dcdc:	edd5 0a00 	vldr	s1, [r5]
 801dce0:	e788      	b.n	801dbf4 <forward_ap_integer_INT8+0xc0>
 801dce2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801dce6:	4635      	mov	r5, r6
 801dce8:	eddf 0a0a 	vldr	s1, [pc, #40]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dcec:	f994 4000 	ldrsb.w	r4, [r4]
 801dcf0:	e783      	b.n	801dbfa <forward_ap_integer_INT8+0xc6>
 801dcf2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801dcf6:	eddf 0a07 	vldr	s1, [pc, #28]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dcfa:	f994 4000 	ldrsb.w	r4, [r4]
 801dcfe:	e7aa      	b.n	801dc56 <forward_ap_integer_INT8+0x122>
 801dd00:	464c      	mov	r4, r9
 801dd02:	eddf 0a04 	vldr	s1, [pc, #16]	; 801dd14 <forward_ap_integer_INT8+0x1e0>
 801dd06:	464d      	mov	r5, r9
 801dd08:	e777      	b.n	801dbfa <forward_ap_integer_INT8+0xc6>
 801dd0a:	2300      	movs	r3, #0
 801dd0c:	685b      	ldr	r3, [r3, #4]
 801dd0e:	deff      	udf	#255	; 0xff
 801dd10:	68d3      	ldr	r3, [r2, #12]
 801dd12:	deff      	udf	#255	; 0xff
 801dd14:	00000000 	.word	0x00000000

0801dd18 <forward_lite_pw_sssa8_ch>:
 801dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd1c:	b093      	sub	sp, #76	; 0x4c
 801dd1e:	4604      	mov	r4, r0
 801dd20:	930a      	str	r3, [sp, #40]	; 0x28
 801dd22:	f99d 307c 	ldrsb.w	r3, [sp, #124]	; 0x7c
 801dd26:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 801dd2a:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dd2e:	ea4f 0b47 	mov.w	fp, r7, lsl #1
 801dd32:	9111      	str	r1, [sp, #68]	; 0x44
 801dd34:	ebc7 7187 	rsb	r1, r7, r7, lsl #30
 801dd38:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 801dd3c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 801dd40:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 801dd44:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 801dd48:	f99d e080 	ldrsb.w	lr, [sp, #128]	; 0x80
 801dd4c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dd50:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801dd52:	920e      	str	r2, [sp, #56]	; 0x38
 801dd54:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801dd58:	930b      	str	r3, [sp, #44]	; 0x2c
 801dd5a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801dd5e:	9310      	str	r3, [sp, #64]	; 0x40
 801dd60:	00bb      	lsls	r3, r7, #2
 801dd62:	930d      	str	r3, [sp, #52]	; 0x34
 801dd64:	b1c7      	cbz	r7, 801dd98 <forward_lite_pw_sssa8_ch+0x80>
 801dd66:	3104      	adds	r1, #4
 801dd68:	f04f 0801 	mov.w	r8, #1
 801dd6c:	eb00 0c0b 	add.w	ip, r0, fp
 801dd70:	f930 3b02 	ldrsh.w	r3, [r0], #2
 801dd74:	1e5a      	subs	r2, r3, #1
 801dd76:	fa08 f603 	lsl.w	r6, r8, r3
 801dd7a:	fa0e f303 	lsl.w	r3, lr, r3
 801dd7e:	b292      	uxth	r2, r2
 801dd80:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 801dd84:	2a14      	cmp	r2, #20
 801dd86:	d846      	bhi.n	801de16 <forward_lite_pw_sssa8_ch+0xfe>
 801dd88:	4584      	cmp	ip, r0
 801dd8a:	f841 3c04 	str.w	r3, [r1, #-4]
 801dd8e:	f101 0104 	add.w	r1, r1, #4
 801dd92:	d1ed      	bne.n	801dd70 <forward_lite_pw_sssa8_ch+0x58>
 801dd94:	4660      	mov	r0, ip
 801dd96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801dd98:	eba0 030b 	sub.w	r3, r0, fp
 801dd9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dd9e:	930c      	str	r3, [sp, #48]	; 0x30
 801dda0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dda2:	1acb      	subs	r3, r1, r3
 801dda4:	930d      	str	r3, [sp, #52]	; 0x34
 801dda6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dda8:	fb02 f303 	mul.w	r3, r2, r3
 801ddac:	930e      	str	r3, [sp, #56]	; 0x38
 801ddae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ddb0:	2b01      	cmp	r3, #1
 801ddb2:	d037      	beq.n	801de24 <forward_lite_pw_sssa8_ch+0x10c>
 801ddb4:	2300      	movs	r3, #0
 801ddb6:	9310      	str	r3, [sp, #64]	; 0x40
 801ddb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ddba:	b34b      	cbz	r3, 801de10 <forward_lite_pw_sssa8_ch+0xf8>
 801ddbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ddbe:	4651      	mov	r1, sl
 801ddc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ddc2:	2600      	movs	r6, #0
 801ddc4:	fb07 fb03 	mul.w	fp, r7, r3
 801ddc8:	f8dd a094 	ldr.w	sl, [sp, #148]	; 0x94
 801ddcc:	fb02 f803 	mul.w	r8, r2, r3
 801ddd0:	464a      	mov	r2, r9
 801ddd2:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 801ddd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ddd8:	3601      	adds	r6, #1
 801ddda:	4620      	mov	r0, r4
 801dddc:	921e      	str	r2, [sp, #120]	; 0x78
 801ddde:	9308      	str	r3, [sp, #32]
 801dde0:	4444      	add	r4, r8
 801dde2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dde4:	911c      	str	r1, [sp, #112]	; 0x70
 801dde6:	9307      	str	r3, [sp, #28]
 801dde8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ddea:	9306      	str	r3, [sp, #24]
 801ddec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ddee:	9305      	str	r3, [sp, #20]
 801ddf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddf2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801ddf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddf8:	9302      	str	r3, [sp, #8]
 801ddfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddfc:	e9cd a300 	strd	sl, r3, [sp]
 801de00:	462b      	mov	r3, r5
 801de02:	445d      	add	r5, fp
 801de04:	f002 f8bc 	bl	801ff80 <st_sssa8_ch_nn_mat_mult_nt_t>
 801de08:	45b1      	cmp	r9, r6
 801de0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801de0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801de0e:	d1e2      	bne.n	801ddd6 <forward_lite_pw_sssa8_ch+0xbe>
 801de10:	b013      	add	sp, #76	; 0x4c
 801de12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de16:	4584      	cmp	ip, r0
 801de18:	f841 ec04 	str.w	lr, [r1, #-4]
 801de1c:	f101 0104 	add.w	r1, r1, #4
 801de20:	d1a6      	bne.n	801dd70 <forward_lite_pw_sssa8_ch+0x58>
 801de22:	e7b7      	b.n	801dd94 <forward_lite_pw_sssa8_ch+0x7c>
 801de24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801de26:	f06f 0309 	mvn.w	r3, #9
 801de2a:	fb03 2307 	mla	r3, r3, r7, r2
 801de2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801de30:	fb07 f202 	mul.w	r2, r7, r2
 801de34:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801de38:	dbbc      	blt.n	801ddb4 <forward_lite_pw_sssa8_ch+0x9c>
 801de3a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801de3c:	4639      	mov	r1, r7
 801de3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de40:	4650      	mov	r0, sl
 801de42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801de44:	9601      	str	r6, [sp, #4]
 801de46:	9300      	str	r3, [sp, #0]
 801de48:	f002 f85a 	bl	801ff00 <st_sssa8_ch_fullW_prefetch>
 801de4c:	9610      	str	r6, [sp, #64]	; 0x40
 801de4e:	e7b3      	b.n	801ddb8 <forward_lite_pw_sssa8_ch+0xa0>

0801de50 <forward_lite_node_convert_integer_iu8ou8>:
 801de50:	ee07 3a90 	vmov	s15, r3
 801de54:	f89d 3000 	ldrb.w	r3, [sp]
 801de58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801de5c:	ee06 3a90 	vmov	s13, r3
 801de60:	1883      	adds	r3, r0, r2
 801de62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de66:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801de6a:	4298      	cmp	r0, r3
 801de6c:	ee76 6a87 	vadd.f32	s13, s13, s14
 801de70:	eee7 6ac0 	vfms.f32	s13, s15, s0
 801de74:	d215      	bcs.n	801dea2 <forward_lite_node_convert_integer_iu8ou8+0x52>
 801de76:	3801      	subs	r0, #1
 801de78:	440a      	add	r2, r1
 801de7a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801de7e:	eef0 7a66 	vmov.f32	s15, s13
 801de82:	ee07 3a10 	vmov	s14, r3
 801de86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801de8a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801de8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801de92:	ee17 3a90 	vmov	r3, s15
 801de96:	f383 0308 	usat	r3, #8, r3
 801de9a:	f801 3b01 	strb.w	r3, [r1], #1
 801de9e:	4291      	cmp	r1, r2
 801dea0:	d1eb      	bne.n	801de7a <forward_lite_node_convert_integer_iu8ou8+0x2a>
 801dea2:	4770      	bx	lr

0801dea4 <forward_lite_node_convert_integer_iu8os8>:
 801dea4:	ee07 3a90 	vmov	s15, r3
 801dea8:	f99d 3000 	ldrsb.w	r3, [sp]
 801deac:	ee06 3a90 	vmov	s13, r3
 801deb0:	1883      	adds	r3, r0, r2
 801deb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801deb6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801deba:	4298      	cmp	r0, r3
 801debc:	eee7 6ac0 	vfms.f32	s13, s15, s0
 801dec0:	d22d      	bcs.n	801df1e <forward_lite_node_convert_integer_iu8os8+0x7a>
 801dec2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801dec6:	3801      	subs	r0, #1
 801dec8:	440a      	add	r2, r1
 801deca:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801df20 <forward_lite_node_convert_integer_iu8os8+0x7c>
 801dece:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801ded2:	eef0 7a66 	vmov.f32	s15, s13
 801ded6:	ee07 3a10 	vmov	s14, r3
 801deda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dede:	eee7 7a00 	vfma.f32	s15, s14, s0
 801dee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801dee6:	ee37 7aa5 	vadd.f32	s14, s15, s11
 801deea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801deee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801def2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801def6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801defa:	dd08      	ble.n	801df0e <forward_lite_node_convert_integer_iu8os8+0x6a>
 801defc:	ee17 3a10 	vmov	r3, s14
 801df00:	f303 0307 	ssat	r3, #8, r3
 801df04:	f801 3b01 	strb.w	r3, [r1], #1
 801df08:	4291      	cmp	r1, r2
 801df0a:	d1e0      	bne.n	801dece <forward_lite_node_convert_integer_iu8os8+0x2a>
 801df0c:	4770      	bx	lr
 801df0e:	ee17 3a90 	vmov	r3, s15
 801df12:	f303 0307 	ssat	r3, #8, r3
 801df16:	f801 3b01 	strb.w	r3, [r1], #1
 801df1a:	4291      	cmp	r1, r2
 801df1c:	d1d7      	bne.n	801dece <forward_lite_node_convert_integer_iu8os8+0x2a>
 801df1e:	4770      	bx	lr
 801df20:	3efffffc 	.word	0x3efffffc

0801df24 <forward_lite_node_convert_integer_iu8os8_fast>:
 801df24:	b570      	push	{r4, r5, r6, lr}
 801df26:	1095      	asrs	r5, r2, #2
 801df28:	2d00      	cmp	r5, #0
 801df2a:	dd31      	ble.n	801df90 <forward_lite_node_convert_integer_iu8os8_fast+0x6c>
 801df2c:	00ae      	lsls	r6, r5, #2
 801df2e:	460c      	mov	r4, r1
 801df30:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801df34:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 801df38:	f850 3b04 	ldr.w	r3, [r0], #4
 801df3c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 801df40:	fa3f fc8c 	uxtb16	ip, ip
 801df44:	fadc fc0e 	ssub16	ip, ip, lr
 801df48:	fa3f f383 	uxtb16	r3, r3
 801df4c:	fad3 f30e 	ssub16	r3, r3, lr
 801df50:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 801df54:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801df58:	42a8      	cmp	r0, r5
 801df5a:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 801df5e:	ea43 030c 	orr.w	r3, r3, ip
 801df62:	f844 3b04 	str.w	r3, [r4], #4
 801df66:	d1e7      	bne.n	801df38 <forward_lite_node_convert_integer_iu8os8_fast+0x14>
 801df68:	4431      	add	r1, r6
 801df6a:	f012 0203 	ands.w	r2, r2, #3
 801df6e:	d00e      	beq.n	801df8e <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 801df70:	782b      	ldrb	r3, [r5, #0]
 801df72:	3a01      	subs	r2, #1
 801df74:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801df78:	700b      	strb	r3, [r1, #0]
 801df7a:	d008      	beq.n	801df8e <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 801df7c:	786b      	ldrb	r3, [r5, #1]
 801df7e:	2a01      	cmp	r2, #1
 801df80:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801df84:	704b      	strb	r3, [r1, #1]
 801df86:	d002      	beq.n	801df8e <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 801df88:	78ab      	ldrb	r3, [r5, #2]
 801df8a:	3b80      	subs	r3, #128	; 0x80
 801df8c:	708b      	strb	r3, [r1, #2]
 801df8e:	bd70      	pop	{r4, r5, r6, pc}
 801df90:	4605      	mov	r5, r0
 801df92:	e7ea      	b.n	801df6a <forward_lite_node_convert_integer_iu8os8_fast+0x46>

0801df94 <forward_lite_node_convert_integer_is8ou8>:
 801df94:	ee07 3a90 	vmov	s15, r3
 801df98:	f89d 3000 	ldrb.w	r3, [sp]
 801df9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801dfa0:	ee06 3a90 	vmov	s13, r3
 801dfa4:	1883      	adds	r3, r0, r2
 801dfa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dfaa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801dfae:	4298      	cmp	r0, r3
 801dfb0:	ee76 6a87 	vadd.f32	s13, s13, s14
 801dfb4:	eee7 6ac0 	vfms.f32	s13, s15, s0
 801dfb8:	d215      	bcs.n	801dfe6 <forward_lite_node_convert_integer_is8ou8+0x52>
 801dfba:	3801      	subs	r0, #1
 801dfbc:	440a      	add	r2, r1
 801dfbe:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 801dfc2:	eef0 7a66 	vmov.f32	s15, s13
 801dfc6:	ee07 3a10 	vmov	s14, r3
 801dfca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dfce:	eee7 7a00 	vfma.f32	s15, s14, s0
 801dfd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dfd6:	ee17 3a90 	vmov	r3, s15
 801dfda:	f383 0308 	usat	r3, #8, r3
 801dfde:	f801 3b01 	strb.w	r3, [r1], #1
 801dfe2:	4291      	cmp	r1, r2
 801dfe4:	d1eb      	bne.n	801dfbe <forward_lite_node_convert_integer_is8ou8+0x2a>
 801dfe6:	4770      	bx	lr

0801dfe8 <forward_lite_node_convert_integer_is8ou8_fast>:
 801dfe8:	b570      	push	{r4, r5, r6, lr}
 801dfea:	1095      	asrs	r5, r2, #2
 801dfec:	2d00      	cmp	r5, #0
 801dfee:	dd2d      	ble.n	801e04c <forward_lite_node_convert_integer_is8ou8_fast+0x64>
 801dff0:	00ae      	lsls	r6, r5, #2
 801dff2:	460c      	mov	r4, r1
 801dff4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801dff8:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 801dffc:	f850 3b04 	ldr.w	r3, [r0], #4
 801e000:	ea4f 2c33 	mov.w	ip, r3, ror #8
 801e004:	fa2f fc8c 	sxtb16	ip, ip
 801e008:	fa9c fc0e 	sadd16	ip, ip, lr
 801e00c:	fa2f f383 	sxtb16	r3, r3
 801e010:	fa93 f30e 	sadd16	r3, r3, lr
 801e014:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e018:	42a8      	cmp	r0, r5
 801e01a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 801e01e:	f844 3b04 	str.w	r3, [r4], #4
 801e022:	d1eb      	bne.n	801dffc <forward_lite_node_convert_integer_is8ou8_fast+0x14>
 801e024:	4431      	add	r1, r6
 801e026:	f012 0203 	ands.w	r2, r2, #3
 801e02a:	d00e      	beq.n	801e04a <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 801e02c:	782b      	ldrb	r3, [r5, #0]
 801e02e:	3a01      	subs	r2, #1
 801e030:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801e034:	700b      	strb	r3, [r1, #0]
 801e036:	d008      	beq.n	801e04a <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 801e038:	786b      	ldrb	r3, [r5, #1]
 801e03a:	2a01      	cmp	r2, #1
 801e03c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801e040:	704b      	strb	r3, [r1, #1]
 801e042:	d002      	beq.n	801e04a <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 801e044:	78ab      	ldrb	r3, [r5, #2]
 801e046:	3b80      	subs	r3, #128	; 0x80
 801e048:	708b      	strb	r3, [r1, #2]
 801e04a:	bd70      	pop	{r4, r5, r6, pc}
 801e04c:	4605      	mov	r5, r0
 801e04e:	e7ea      	b.n	801e026 <forward_lite_node_convert_integer_is8ou8_fast+0x3e>

0801e050 <forward_lite_conv2d_rgb_sssa8_ch>:
 801e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e054:	ed2d 8b02 	vpush	{d8}
 801e058:	b0cb      	sub	sp, #300	; 0x12c
 801e05a:	461f      	mov	r7, r3
 801e05c:	4694      	mov	ip, r2
 801e05e:	ee08 2a90 	vmov	s17, r2
 801e062:	9c5e      	ldr	r4, [sp, #376]	; 0x178
 801e064:	460d      	mov	r5, r1
 801e066:	9311      	str	r3, [sp, #68]	; 0x44
 801e068:	4661      	mov	r1, ip
 801e06a:	9403      	str	r4, [sp, #12]
 801e06c:	f99d 4168 	ldrsb.w	r4, [sp, #360]	; 0x168
 801e070:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801e072:	9419      	str	r4, [sp, #100]	; 0x64
 801e074:	9402      	str	r4, [sp, #8]
 801e076:	9c5e      	ldr	r4, [sp, #376]	; 0x178
 801e078:	f8bd 6158 	ldrh.w	r6, [sp, #344]	; 0x158
 801e07c:	9301      	str	r3, [sp, #4]
 801e07e:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 801e082:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 801e086:	46b2      	mov	sl, r6
 801e088:	9625      	str	r6, [sp, #148]	; 0x94
 801e08a:	9600      	str	r6, [sp, #0]
 801e08c:	9009      	str	r0, [sp, #36]	; 0x24
 801e08e:	4638      	mov	r0, r7
 801e090:	eb04 0743 	add.w	r7, r4, r3, lsl #1
 801e094:	4633      	mov	r3, r6
 801e096:	f8bd 615c 	ldrh.w	r6, [sp, #348]	; 0x15c
 801e09a:	4681      	mov	r9, r0
 801e09c:	4602      	mov	r2, r0
 801e09e:	2003      	movs	r0, #3
 801e0a0:	961e      	str	r6, [sp, #120]	; 0x78
 801e0a2:	f8bd 6160 	ldrh.w	r6, [sp, #352]	; 0x160
 801e0a6:	f99d 816c 	ldrsb.w	r8, [sp, #364]	; 0x16c
 801e0aa:	960e      	str	r6, [sp, #56]	; 0x38
 801e0ac:	f8bd 6174 	ldrh.w	r6, [sp, #372]	; 0x174
 801e0b0:	9710      	str	r7, [sp, #64]	; 0x40
 801e0b2:	960d      	str	r6, [sp, #52]	; 0x34
 801e0b4:	f001 f8ce 	bl	801f254 <st_sssa8_ch_convolve_rank1upd>
 801e0b8:	fb1a f30a 	smulbb	r3, sl, sl
 801e0bc:	4648      	mov	r0, r9
 801e0be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0c2:	b29b      	uxth	r3, r3
 801e0c4:	9312      	str	r3, [sp, #72]	; 0x48
 801e0c6:	ebc9 7349 	rsb	r3, r9, r9, lsl #29
 801e0ca:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 801e0ce:	0083      	lsls	r3, r0, #2
 801e0d0:	9228      	str	r2, [sp, #160]	; 0xa0
 801e0d2:	18d3      	adds	r3, r2, r3
 801e0d4:	9323      	str	r3, [sp, #140]	; 0x8c
 801e0d6:	2800      	cmp	r0, #0
 801e0d8:	f000 8211 	beq.w	801e4fe <forward_lite_conv2d_rgb_sssa8_ch+0x4ae>
 801e0dc:	1d1a      	adds	r2, r3, #4
 801e0de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e0e0:	4621      	mov	r1, r4
 801e0e2:	f04f 0c01 	mov.w	ip, #1
 801e0e6:	005f      	lsls	r7, r3, #1
 801e0e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e0ec:	f931 3b02 	ldrsh.w	r3, [r1], #2
 801e0f0:	1e58      	subs	r0, r3, #1
 801e0f2:	fa0c f603 	lsl.w	r6, ip, r3
 801e0f6:	fa08 f303 	lsl.w	r3, r8, r3
 801e0fa:	b280      	uxth	r0, r0
 801e0fc:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 801e100:	2814      	cmp	r0, #20
 801e102:	f200 80f6 	bhi.w	801e2f2 <forward_lite_conv2d_rgb_sssa8_ch+0x2a2>
 801e106:	42a1      	cmp	r1, r4
 801e108:	f842 3c04 	str.w	r3, [r2, #-4]
 801e10c:	f102 0204 	add.w	r2, r2, #4
 801e110:	d1ec      	bne.n	801e0ec <forward_lite_conv2d_rgb_sssa8_ch+0x9c>
 801e112:	1be3      	subs	r3, r4, r7
 801e114:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e116:	aa2a      	add	r2, sp, #168	; 0xa8
 801e118:	a936      	add	r1, sp, #216	; 0xd8
 801e11a:	9329      	str	r3, [sp, #164]	; 0xa4
 801e11c:	a840      	add	r0, sp, #256	; 0x100
 801e11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e120:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
 801e124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e126:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
 801e12a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e12c:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
 801e130:	ab32      	add	r3, sp, #200	; 0xc8
 801e132:	9300      	str	r3, [sp, #0]
 801e134:	ab2e      	add	r3, sp, #184	; 0xb8
 801e136:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
 801e13a:	e9cd 552b 	strd	r5, r5, [sp, #172]	; 0xac
 801e13e:	f001 fc13 	bl	801f968 <ai_padding_opt_init>
 801e142:	fb04 f304 	mul.w	r3, r4, r4
 801e146:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 801e14a:	fb01 f403 	mul.w	r4, r1, r3
 801e14e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e152:	fb01 f202 	mul.w	r2, r1, r2
 801e156:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e158:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e15c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e160:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801e164:	930c      	str	r3, [sp, #48]	; 0x30
 801e166:	bfa8      	it	ge
 801e168:	f44f 6420 	movge.w	r4, #2560	; 0xa00
 801e16c:	42a2      	cmp	r2, r4
 801e16e:	f340 81bc 	ble.w	801e4ea <forward_lite_conv2d_rgb_sssa8_ch+0x49a>
 801e172:	2300      	movs	r3, #0
 801e174:	9322      	str	r3, [sp, #136]	; 0x88
 801e176:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e178:	fbb4 f3f3 	udiv	r3, r4, r3
 801e17c:	b29b      	uxth	r3, r3
 801e17e:	4619      	mov	r1, r3
 801e180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e182:	4299      	cmp	r1, r3
 801e184:	bf28      	it	cs
 801e186:	4619      	movcs	r1, r3
 801e188:	fbb3 f2f1 	udiv	r2, r3, r1
 801e18c:	fb01 3312 	mls	r3, r1, r2, r3
 801e190:	b292      	uxth	r2, r2
 801e192:	9124      	str	r1, [sp, #144]	; 0x90
 801e194:	b29b      	uxth	r3, r3
 801e196:	921d      	str	r2, [sp, #116]	; 0x74
 801e198:	b11b      	cbz	r3, 801e1a2 <forward_lite_conv2d_rgb_sssa8_ch+0x152>
 801e19a:	4613      	mov	r3, r2
 801e19c:	3301      	adds	r3, #1
 801e19e:	b29b      	uxth	r3, r3
 801e1a0:	931d      	str	r3, [sp, #116]	; 0x74
 801e1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	f000 8193 	beq.w	801e4d0 <forward_lite_conv2d_rgb_sssa8_ch+0x480>
 801e1aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e1ac:	2400      	movs	r4, #0
 801e1ae:	f8df b354 	ldr.w	fp, [pc, #852]	; 801e504 <forward_lite_conv2d_rgb_sssa8_ch+0x4b4>
 801e1b2:	46aa      	mov	sl, r5
 801e1b4:	425b      	negs	r3, r3
 801e1b6:	4626      	mov	r6, r4
 801e1b8:	b29a      	uxth	r2, r3
 801e1ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e1bc:	3b01      	subs	r3, #1
 801e1be:	9221      	str	r2, [sp, #132]	; 0x84
 801e1c0:	921c      	str	r2, [sp, #112]	; 0x70
 801e1c2:	b29b      	uxth	r3, r3
 801e1c4:	9327      	str	r3, [sp, #156]	; 0x9c
 801e1c6:	a840      	add	r0, sp, #256	; 0x100
 801e1c8:	f001 fc28 	bl	801fa1c <ai_padding_opt_phase1>
 801e1cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e1ce:	9a5c      	ldr	r2, [sp, #368]	; 0x170
 801e1d0:	fb06 f303 	mul.w	r3, r6, r3
 801e1d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e1d6:	fb01 2303 	mla	r3, r1, r3, r2
 801e1da:	9317      	str	r3, [sp, #92]	; 0x5c
 801e1dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	f000 817b 	beq.w	801e4da <forward_lite_conv2d_rgb_sssa8_ch+0x48a>
 801e1e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	f000 8163 	beq.w	801e4b2 <forward_lite_conv2d_rgb_sssa8_ch+0x462>
 801e1ec:	b2a3      	uxth	r3, r4
 801e1ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e1f0:	edcd 8a1f 	vstr	s17, [sp, #124]	; 0x7c
 801e1f4:	9320      	str	r3, [sp, #128]	; 0x80
 801e1f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e1f8:	1a9b      	subs	r3, r3, r2
 801e1fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1fc:	9326      	str	r3, [sp, #152]	; 0x98
 801e1fe:	fb02 3306 	mla	r3, r2, r6, r3
 801e202:	9307      	str	r3, [sp, #28]
 801e204:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 801e208:	930f      	str	r3, [sp, #60]	; 0x3c
 801e20a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e20c:	931a      	str	r3, [sp, #104]	; 0x68
 801e20e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e210:	931b      	str	r3, [sp, #108]	; 0x6c
 801e212:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e214:	9313      	str	r3, [sp, #76]	; 0x4c
 801e216:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e218:	9315      	str	r3, [sp, #84]	; 0x54
 801e21a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e21c:	ee08 3a10 	vmov	s16, r3
 801e220:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e222:	9318      	str	r3, [sp, #96]	; 0x60
 801e224:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 801e226:	9316      	str	r3, [sp, #88]	; 0x58
 801e228:	9b44      	ldr	r3, [sp, #272]	; 0x110
 801e22a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e22c:	9341      	str	r3, [sp, #260]	; 0x104
 801e22e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e230:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 801e232:	9342      	str	r3, [sp, #264]	; 0x108
 801e234:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 801e238:	9114      	str	r1, [sp, #80]	; 0x50
 801e23a:	2100      	movs	r1, #0
 801e23c:	930a      	str	r3, [sp, #40]	; 0x28
 801e23e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e240:	9240      	str	r2, [sp, #256]	; 0x100
 801e242:	9308      	str	r3, [sp, #32]
 801e244:	910b      	str	r1, [sp, #44]	; 0x2c
 801e246:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e248:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 801e24c:	2a00      	cmp	r2, #0
 801e24e:	d078      	beq.n	801e342 <forward_lite_conv2d_rgb_sssa8_ch+0x2f2>
 801e250:	3a01      	subs	r2, #1
 801e252:	9240      	str	r2, [sp, #256]	; 0x100
 801e254:	2201      	movs	r2, #1
 801e256:	f8ad 2126 	strh.w	r2, [sp, #294]	; 0x126
 801e25a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e25c:	9907      	ldr	r1, [sp, #28]
 801e25e:	428a      	cmp	r2, r1
 801e260:	da57      	bge.n	801e312 <forward_lite_conv2d_rgb_sssa8_ch+0x2c2>
 801e262:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 801e266:	4690      	mov	r8, r2
 801e268:	4616      	mov	r6, r2
 801e26a:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	; 0x64
 801e26e:	454f      	cmp	r7, r9
 801e270:	dd47      	ble.n	801e302 <forward_lite_conv2d_rgb_sssa8_ch+0x2b2>
 801e272:	45b2      	cmp	sl, r6
 801e274:	fb06 940a 	mla	r4, r6, sl, r9
 801e278:	f103 0206 	add.w	r2, r3, #6
 801e27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e27e:	bfcc      	ite	gt
 801e280:	2600      	movgt	r6, #0
 801e282:	2601      	movle	r6, #1
 801e284:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e288:	4649      	mov	r1, r9
 801e28a:	ea46 76d8 	orr.w	r6, r6, r8, lsr #31
 801e28e:	441c      	add	r4, r3
 801e290:	9606      	str	r6, [sp, #24]
 801e292:	e00b      	b.n	801e2ac <forward_lite_conv2d_rgb_sssa8_ch+0x25c>
 801e294:	f360 4e1f 	bfi	lr, r0, #16, #16
 801e298:	f842 ec04 	str.w	lr, [r2, #-4]
 801e29c:	3101      	adds	r1, #1
 801e29e:	f822 5c06 	strh.w	r5, [r2, #-6]
 801e2a2:	3403      	adds	r4, #3
 801e2a4:	3206      	adds	r2, #6
 801e2a6:	b20d      	sxth	r5, r1
 801e2a8:	42af      	cmp	r7, r5
 801e2aa:	dd2a      	ble.n	801e302 <forward_lite_conv2d_rgb_sssa8_ch+0x2b2>
 801e2ac:	f04f 0e00 	mov.w	lr, #0
 801e2b0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 801e2b4:	f1a2 0c06 	sub.w	ip, r2, #6
 801e2b8:	4605      	mov	r5, r0
 801e2ba:	f360 0e0f 	bfi	lr, r0, #0, #16
 801e2be:	4613      	mov	r3, r2
 801e2c0:	d1e8      	bne.n	801e294 <forward_lite_conv2d_rgb_sssa8_ch+0x244>
 801e2c2:	9e06      	ldr	r6, [sp, #24]
 801e2c4:	2e00      	cmp	r6, #0
 801e2c6:	d1e5      	bne.n	801e294 <forward_lite_conv2d_rgb_sssa8_ch+0x244>
 801e2c8:	458a      	cmp	sl, r1
 801e2ca:	dde3      	ble.n	801e294 <forward_lite_conv2d_rgb_sssa8_ch+0x244>
 801e2cc:	6823      	ldr	r3, [r4, #0]
 801e2ce:	fa2f f583 	sxtb16	r5, r3
 801e2d2:	ea4f 2e33 	mov.w	lr, r3, ror #8
 801e2d6:	ea05 030b 	and.w	r3, r5, fp
 801e2da:	fa2f fe8e 	sxtb16	lr, lr
 801e2de:	461e      	mov	r6, r3
 801e2e0:	fa1f fe8e 	uxth.w	lr, lr
 801e2e4:	b22d      	sxth	r5, r5
 801e2e6:	4613      	mov	r3, r2
 801e2e8:	ea4e 0e06 	orr.w	lr, lr, r6
 801e2ec:	f8cc e002 	str.w	lr, [ip, #2]
 801e2f0:	e7d4      	b.n	801e29c <forward_lite_conv2d_rgb_sssa8_ch+0x24c>
 801e2f2:	42a1      	cmp	r1, r4
 801e2f4:	f842 8c04 	str.w	r8, [r2, #-4]
 801e2f8:	f102 0204 	add.w	r2, r2, #4
 801e2fc:	f47f aef6 	bne.w	801e0ec <forward_lite_conv2d_rgb_sssa8_ch+0x9c>
 801e300:	e707      	b.n	801e112 <forward_lite_conv2d_rgb_sssa8_ch+0xc2>
 801e302:	f108 0801 	add.w	r8, r8, #1
 801e306:	9a07      	ldr	r2, [sp, #28]
 801e308:	fa0f f888 	sxth.w	r8, r8
 801e30c:	4590      	cmp	r8, r2
 801e30e:	4646      	mov	r6, r8
 801e310:	dbad      	blt.n	801e26e <forward_lite_conv2d_rgb_sssa8_ch+0x21e>
 801e312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e314:	429a      	cmp	r2, r3
 801e316:	d05c      	beq.n	801e3d2 <forward_lite_conv2d_rgb_sssa8_ch+0x382>
 801e318:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e31a:	9a08      	ldr	r2, [sp, #32]
 801e31c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e31e:	4422      	add	r2, r4
 801e320:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e322:	3001      	adds	r0, #1
 801e324:	b292      	uxth	r2, r2
 801e326:	4421      	add	r1, r4
 801e328:	b200      	sxth	r0, r0
 801e32a:	9208      	str	r2, [sp, #32]
 801e32c:	b289      	uxth	r1, r1
 801e32e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e330:	900b      	str	r0, [sp, #44]	; 0x2c
 801e332:	4282      	cmp	r2, r0
 801e334:	910a      	str	r1, [sp, #40]	; 0x28
 801e336:	dd72      	ble.n	801e41e <forward_lite_conv2d_rgb_sssa8_ch+0x3ce>
 801e338:	9a40      	ldr	r2, [sp, #256]	; 0x100
 801e33a:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 801e33e:	2a00      	cmp	r2, #0
 801e340:	d186      	bne.n	801e250 <forward_lite_conv2d_rgb_sssa8_ch+0x200>
 801e342:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e344:	b932      	cbnz	r2, 801e354 <forward_lite_conv2d_rgb_sssa8_ch+0x304>
 801e346:	9a42      	ldr	r2, [sp, #264]	; 0x108
 801e348:	3a01      	subs	r2, #1
 801e34a:	9242      	str	r2, [sp, #264]	; 0x108
 801e34c:	2201      	movs	r2, #1
 801e34e:	f8ad 2126 	strh.w	r2, [sp, #294]	; 0x126
 801e352:	e782      	b.n	801e25a <forward_lite_conv2d_rgb_sssa8_ch+0x20a>
 801e354:	3a01      	subs	r2, #1
 801e356:	9241      	str	r2, [sp, #260]	; 0x104
 801e358:	f8bd 2124 	ldrh.w	r2, [sp, #292]	; 0x124
 801e35c:	2a01      	cmp	r2, #1
 801e35e:	f8ad 2126 	strh.w	r2, [sp, #294]	; 0x126
 801e362:	f43f af7a 	beq.w	801e25a <forward_lite_conv2d_rgb_sssa8_ch+0x20a>
 801e366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e368:	9c07      	ldr	r4, [sp, #28]
 801e36a:	42a2      	cmp	r2, r4
 801e36c:	dad1      	bge.n	801e312 <forward_lite_conv2d_rgb_sssa8_ch+0x2c2>
 801e36e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e370:	4615      	mov	r5, r2
 801e372:	9808      	ldr	r0, [sp, #32]
 801e374:	1e4e      	subs	r6, r1, #1
 801e376:	b20f      	sxth	r7, r1
 801e378:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 801e37c:	4611      	mov	r1, r2
 801e37e:	1a36      	subs	r6, r6, r0
 801e380:	b2b6      	uxth	r6, r6
 801e382:	3601      	adds	r6, #1
 801e384:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e388:	0076      	lsls	r6, r6, #1
 801e38a:	454f      	cmp	r7, r9
 801e38c:	dd19      	ble.n	801e3c2 <forward_lite_conv2d_rgb_sssa8_ch+0x372>
 801e38e:	fb01 910a 	mla	r1, r1, sl, r9
 801e392:	1998      	adds	r0, r3, r6
 801e394:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e398:	4461      	add	r1, ip
 801e39a:	f851 2b03 	ldr.w	r2, [r1], #3
 801e39e:	3306      	adds	r3, #6
 801e3a0:	fa2f fe82 	sxtb16	lr, r2
 801e3a4:	ea4f 2232 	mov.w	r2, r2, ror #8
 801e3a8:	f823 ec06 	strh.w	lr, [r3, #-6]
 801e3ac:	fa2f f282 	sxtb16	r2, r2
 801e3b0:	ea0e 0e0b 	and.w	lr, lr, fp
 801e3b4:	b292      	uxth	r2, r2
 801e3b6:	4283      	cmp	r3, r0
 801e3b8:	ea42 020e 	orr.w	r2, r2, lr
 801e3bc:	f843 2c04 	str.w	r2, [r3, #-4]
 801e3c0:	d1eb      	bne.n	801e39a <forward_lite_conv2d_rgb_sssa8_ch+0x34a>
 801e3c2:	3501      	adds	r5, #1
 801e3c4:	b22d      	sxth	r5, r5
 801e3c6:	42a5      	cmp	r5, r4
 801e3c8:	4629      	mov	r1, r5
 801e3ca:	dbde      	blt.n	801e38a <forward_lite_conv2d_rgb_sssa8_ch+0x33a>
 801e3cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e3ce:	429a      	cmp	r2, r3
 801e3d0:	d1a2      	bne.n	801e318 <forward_lite_conv2d_rgb_sssa8_ch+0x2c8>
 801e3d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e3d4:	4610      	mov	r0, r2
 801e3d6:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e3d8:	ee18 2a10 	vmov	r2, s16
 801e3dc:	9305      	str	r3, [sp, #20]
 801e3de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e3e0:	9304      	str	r3, [sp, #16]
 801e3e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e3e4:	9303      	str	r3, [sp, #12]
 801e3e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e3e8:	9302      	str	r3, [sp, #8]
 801e3ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e3ec:	9301      	str	r3, [sp, #4]
 801e3ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e3f0:	9300      	str	r3, [sp, #0]
 801e3f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e3f4:	f002 fcec 	bl	8020dd0 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 801e3f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e3fa:	9b08      	ldr	r3, [sp, #32]
 801e3fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e3fe:	4423      	add	r3, r4
 801e400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e402:	3101      	adds	r1, #1
 801e404:	9014      	str	r0, [sp, #80]	; 0x50
 801e406:	b29b      	uxth	r3, r3
 801e408:	4422      	add	r2, r4
 801e40a:	b209      	sxth	r1, r1
 801e40c:	9308      	str	r3, [sp, #32]
 801e40e:	b292      	uxth	r2, r2
 801e410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e412:	910b      	str	r1, [sp, #44]	; 0x2c
 801e414:	428b      	cmp	r3, r1
 801e416:	920a      	str	r2, [sp, #40]	; 0x28
 801e418:	dd16      	ble.n	801e448 <forward_lite_conv2d_rgb_sssa8_ch+0x3f8>
 801e41a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e41c:	e78c      	b.n	801e338 <forward_lite_conv2d_rgb_sssa8_ch+0x2e8>
 801e41e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e420:	4299      	cmp	r1, r3
 801e422:	d011      	beq.n	801e448 <forward_lite_conv2d_rgb_sssa8_ch+0x3f8>
 801e424:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e426:	ee18 2a10 	vmov	r2, s16
 801e42a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e42c:	9305      	str	r3, [sp, #20]
 801e42e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e430:	9304      	str	r3, [sp, #16]
 801e432:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e434:	9303      	str	r3, [sp, #12]
 801e436:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e438:	9302      	str	r3, [sp, #8]
 801e43a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e43c:	9301      	str	r3, [sp, #4]
 801e43e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e440:	9300      	str	r3, [sp, #0]
 801e442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e444:	f002 ffe8 	bl	8021418 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 801e448:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e44a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e44c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e44e:	1a9b      	subs	r3, r3, r2
 801e450:	4411      	add	r1, r2
 801e452:	b29b      	uxth	r3, r3
 801e454:	9117      	str	r1, [sp, #92]	; 0x5c
 801e456:	429a      	cmp	r2, r3
 801e458:	931b      	str	r3, [sp, #108]	; 0x6c
 801e45a:	bf28      	it	cs
 801e45c:	461a      	movcs	r2, r3
 801e45e:	b294      	uxth	r4, r2
 801e460:	b954      	cbnz	r4, 801e478 <forward_lite_conv2d_rgb_sssa8_ch+0x428>
 801e462:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e464:	3b01      	subs	r3, #1
 801e466:	b29b      	uxth	r3, r3
 801e468:	461a      	mov	r2, r3
 801e46a:	931a      	str	r3, [sp, #104]	; 0x68
 801e46c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e470:	429a      	cmp	r2, r3
 801e472:	d020      	beq.n	801e4b6 <forward_lite_conv2d_rgb_sssa8_ch+0x466>
 801e474:	9413      	str	r4, [sp, #76]	; 0x4c
 801e476:	e6d7      	b.n	801e228 <forward_lite_conv2d_rgb_sssa8_ch+0x1d8>
 801e478:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801e47c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801e47e:	fb02 1003 	mla	r0, r2, r3, r1
 801e482:	ee18 1a10 	vmov	r1, s16
 801e486:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e48a:	901f      	str	r0, [sp, #124]	; 0x7c
 801e48c:	ee08 1a10 	vmov	s16, r1
 801e490:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e492:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801e496:	9118      	str	r1, [sp, #96]	; 0x60
 801e498:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e49a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e49e:	9116      	str	r1, [sp, #88]	; 0x58
 801e4a0:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e4a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e4a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e4a8:	9315      	str	r3, [sp, #84]	; 0x54
 801e4aa:	4623      	mov	r3, r4
 801e4ac:	f001 fad0 	bl	801fa50 <st_int8_to16_dual>
 801e4b0:	e7d7      	b.n	801e462 <forward_lite_conv2d_rgb_sssa8_ch+0x412>
 801e4b2:	b2a3      	uxth	r3, r4
 801e4b4:	9320      	str	r3, [sp, #128]	; 0x80
 801e4b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e4b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e4ba:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801e4bc:	4413      	add	r3, r2
 801e4be:	3401      	adds	r4, #1
 801e4c0:	b29b      	uxth	r3, r3
 801e4c2:	b224      	sxth	r4, r4
 801e4c4:	931c      	str	r3, [sp, #112]	; 0x70
 801e4c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4c8:	4626      	mov	r6, r4
 801e4ca:	42a3      	cmp	r3, r4
 801e4cc:	f73f ae7b 	bgt.w	801e1c6 <forward_lite_conv2d_rgb_sssa8_ch+0x176>
 801e4d0:	b04b      	add	sp, #300	; 0x12c
 801e4d2:	ecbd 8b02 	vpop	{d8}
 801e4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e4dc:	ee18 0a90 	vmov	r0, s17
 801e4e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e4e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e4e4:	f001 fab4 	bl	801fa50 <st_int8_to16_dual>
 801e4e8:	e67c      	b.n	801e1e4 <forward_lite_conv2d_rgb_sssa8_ch+0x194>
 801e4ea:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
 801e4ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e4f0:	ee18 0a90 	vmov	r0, s17
 801e4f4:	f001 faac 	bl	801fa50 <st_int8_to16_dual>
 801e4f8:	2301      	movs	r3, #1
 801e4fa:	9322      	str	r3, [sp, #136]	; 0x88
 801e4fc:	e63b      	b.n	801e176 <forward_lite_conv2d_rgb_sssa8_ch+0x126>
 801e4fe:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801e500:	e607      	b.n	801e112 <forward_lite_conv2d_rgb_sssa8_ch+0xc2>
 801e502:	bf00      	nop
 801e504:	ffff0000 	.word	0xffff0000

0801e508 <forward_lite_dw_3x3_sssa8_ch>:
 801e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e50c:	b09f      	sub	sp, #124	; 0x7c
 801e50e:	461c      	mov	r4, r3
 801e510:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	; 0xa8
 801e514:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 801e518:	9208      	str	r2, [sp, #32]
 801e51a:	f99d 20b0 	ldrsb.w	r2, [sp, #176]	; 0xb0
 801e51e:	9307      	str	r3, [sp, #28]
 801e520:	9211      	str	r2, [sp, #68]	; 0x44
 801e522:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 801e526:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801e528:	9214      	str	r2, [sp, #80]	; 0x50
 801e52a:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 801e52e:	f99d c0b4 	ldrsb.w	ip, [sp, #180]	; 0xb4
 801e532:	f8dd 90b8 	ldr.w	r9, [sp, #184]	; 0xb8
 801e536:	901b      	str	r0, [sp, #108]	; 0x6c
 801e538:	9106      	str	r1, [sp, #24]
 801e53a:	9219      	str	r2, [sp, #100]	; 0x64
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	f000 8478 	beq.w	801ee32 <forward_lite_dw_3x3_sssa8_ch+0x92a>
 801e542:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e546:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 801e54a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e54c:	4453      	add	r3, sl
 801e54e:	9312      	str	r3, [sp, #72]	; 0x48
 801e550:	4473      	add	r3, lr
 801e552:	9313      	str	r3, [sp, #76]	; 0x4c
 801e554:	b1cc      	cbz	r4, 801e58a <forward_lite_dw_3x3_sssa8_ch+0x82>
 801e556:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e558:	2100      	movs	r1, #0
 801e55a:	2601      	movs	r6, #1
 801e55c:	1e9f      	subs	r7, r3, #2
 801e55e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e560:	1d18      	adds	r0, r3, #4
 801e562:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 801e566:	3101      	adds	r1, #1
 801e568:	1e5a      	subs	r2, r3, #1
 801e56a:	fa06 f503 	lsl.w	r5, r6, r3
 801e56e:	fa0c f303 	lsl.w	r3, ip, r3
 801e572:	b292      	uxth	r2, r2
 801e574:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 801e578:	2a14      	cmp	r2, #20
 801e57a:	f200 8451 	bhi.w	801ee20 <forward_lite_dw_3x3_sssa8_ch+0x918>
 801e57e:	428c      	cmp	r4, r1
 801e580:	f840 3c04 	str.w	r3, [r0, #-4]
 801e584:	f100 0004 	add.w	r0, r0, #4
 801e588:	dceb      	bgt.n	801e562 <forward_lite_dw_3x3_sssa8_ch+0x5a>
 801e58a:	9a07      	ldr	r2, [sp, #28]
 801e58c:	2c03      	cmp	r4, #3
 801e58e:	9b06      	ldr	r3, [sp, #24]
 801e590:	fb04 f202 	mul.w	r2, r4, r2
 801e594:	fb04 f303 	mul.w	r3, r4, r3
 801e598:	9215      	str	r2, [sp, #84]	; 0x54
 801e59a:	9a08      	ldr	r2, [sp, #32]
 801e59c:	fb03 f202 	mul.w	r2, r3, r2
 801e5a0:	eba3 030e 	sub.w	r3, r3, lr
 801e5a4:	9306      	str	r3, [sp, #24]
 801e5a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e5a8:	921a      	str	r2, [sp, #104]	; 0x68
 801e5aa:	f1c3 0300 	rsb	r3, r3, #0
 801e5ae:	b29a      	uxth	r2, r3
 801e5b0:	ea42 4603 	orr.w	r6, r2, r3, lsl #16
 801e5b4:	bf8c      	ite	hi
 801e5b6:	1ee3      	subhi	r3, r4, #3
 801e5b8:	2300      	movls	r3, #0
 801e5ba:	930d      	str	r3, [sp, #52]	; 0x34
 801e5bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	f000 83af 	beq.w	801ed22 <forward_lite_dw_3x3_sssa8_ch+0x81a>
 801e5c4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801e5c6:	eb0a 0304 	add.w	r3, sl, r4
 801e5ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e5ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e5d0:	9316      	str	r3, [sp, #88]	; 0x58
 801e5d2:	f004 0303 	and.w	r3, r4, #3
 801e5d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801e5d8:	2a00      	cmp	r2, #0
 801e5da:	f000 83a2 	beq.w	801ed22 <forward_lite_dw_3x3_sssa8_ch+0x81a>
 801e5de:	3b01      	subs	r3, #1
 801e5e0:	46b0      	mov	r8, r6
 801e5e2:	940c      	str	r4, [sp, #48]	; 0x30
 801e5e4:	b29b      	uxth	r3, r3
 801e5e6:	9317      	str	r3, [sp, #92]	; 0x5c
 801e5e8:	2300      	movs	r3, #0
 801e5ea:	9318      	str	r3, [sp, #96]	; 0x60
 801e5ec:	464d      	mov	r5, r9
 801e5ee:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801e5f2:	fb03 2301 	mla	r3, r3, r1, r2
 801e5f6:	930a      	str	r3, [sp, #40]	; 0x28
 801e5f8:	2300      	movs	r3, #0
 801e5fa:	9310      	str	r3, [sp, #64]	; 0x40
 801e5fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	f000 83ef 	beq.w	801ede2 <forward_lite_dw_3x3_sssa8_ch+0x8da>
 801e604:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801e608:	2200      	movs	r2, #0
 801e60a:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 801e60c:	930e      	str	r3, [sp, #56]	; 0x38
 801e60e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e610:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e612:	f103 0010 	add.w	r0, r3, #16
 801e616:	9403      	str	r4, [sp, #12]
 801e618:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e61a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e61c:	3348      	adds	r3, #72	; 0x48
 801e61e:	9505      	str	r5, [sp, #20]
 801e620:	9207      	str	r2, [sp, #28]
 801e622:	9404      	str	r4, [sp, #16]
 801e624:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801e628:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e62a:	e090      	b.n	801e74e <forward_lite_dw_3x3_sssa8_ch+0x246>
 801e62c:	f1a2 0902 	sub.w	r9, r2, #2
 801e630:	2401      	movs	r4, #1
 801e632:	9e03      	ldr	r6, [sp, #12]
 801e634:	3a01      	subs	r2, #1
 801e636:	fa04 f909 	lsl.w	r9, r4, r9
 801e63a:	9d04      	ldr	r5, [sp, #16]
 801e63c:	f856 4b04 	ldr.w	r4, [r6], #4
 801e640:	1c87      	adds	r7, r0, #2
 801e642:	fb5c 9c04 	smmla	ip, ip, r4, r9
 801e646:	fa4c f202 	asr.w	r2, ip, r2
 801e64a:	f855 4b04 	ldr.w	r4, [r5], #4
 801e64e:	4422      	add	r2, r4
 801e650:	f302 0207 	ssat	r2, #8, r2
 801e654:	f8dd a014 	ldr.w	sl, [sp, #20]
 801e658:	f80a 2b01 	strb.w	r2, [sl], #1
 801e65c:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e660:	2a15      	cmp	r2, #21
 801e662:	f340 8156 	ble.w	801e912 <forward_lite_dw_3x3_sssa8_ch+0x40a>
 801e666:	682f      	ldr	r7, [r5, #0]
 801e668:	2001      	movs	r0, #1
 801e66a:	1e95      	subs	r5, r2, #2
 801e66c:	3a01      	subs	r2, #1
 801e66e:	6834      	ldr	r4, [r6, #0]
 801e670:	fa00 f505 	lsl.w	r5, r0, r5
 801e674:	9803      	ldr	r0, [sp, #12]
 801e676:	fb5e 5e04 	smmla	lr, lr, r4, r5
 801e67a:	fa4e f202 	asr.w	r2, lr, r2
 801e67e:	f100 0608 	add.w	r6, r0, #8
 801e682:	4417      	add	r7, r2
 801e684:	9a01      	ldr	r2, [sp, #4]
 801e686:	f102 0c04 	add.w	ip, r2, #4
 801e68a:	9a04      	ldr	r2, [sp, #16]
 801e68c:	f102 0908 	add.w	r9, r2, #8
 801e690:	f307 0707 	ssat	r7, #8, r7
 801e694:	9a05      	ldr	r2, [sp, #20]
 801e696:	f88a 7000 	strb.w	r7, [sl]
 801e69a:	3202      	adds	r2, #2
 801e69c:	f9bc 4000 	ldrsh.w	r4, [ip]
 801e6a0:	2c15      	cmp	r4, #21
 801e6a2:	f340 8156 	ble.w	801e952 <forward_lite_dw_3x3_sssa8_ch+0x44a>
 801e6a6:	1ea7      	subs	r7, r4, #2
 801e6a8:	2001      	movs	r0, #1
 801e6aa:	3c01      	subs	r4, #1
 801e6ac:	6835      	ldr	r5, [r6, #0]
 801e6ae:	fa00 f707 	lsl.w	r7, r0, r7
 801e6b2:	9803      	ldr	r0, [sp, #12]
 801e6b4:	fb5b 7505 	smmla	r5, fp, r5, r7
 801e6b8:	f100 0c0c 	add.w	ip, r0, #12
 801e6bc:	9801      	ldr	r0, [sp, #4]
 801e6be:	f8d9 6000 	ldr.w	r6, [r9]
 801e6c2:	4125      	asrs	r5, r4
 801e6c4:	f100 0e06 	add.w	lr, r0, #6
 801e6c8:	9804      	ldr	r0, [sp, #16]
 801e6ca:	442e      	add	r6, r5
 801e6cc:	f100 0b0c 	add.w	fp, r0, #12
 801e6d0:	f306 0607 	ssat	r6, #8, r6
 801e6d4:	7016      	strb	r6, [r2, #0]
 801e6d6:	9a05      	ldr	r2, [sp, #20]
 801e6d8:	f102 0903 	add.w	r9, r2, #3
 801e6dc:	f9be 5000 	ldrsh.w	r5, [lr]
 801e6e0:	2d15      	cmp	r5, #21
 801e6e2:	f340 8155 	ble.w	801e990 <forward_lite_dw_3x3_sssa8_ch+0x488>
 801e6e6:	9a01      	ldr	r2, [sp, #4]
 801e6e8:	2001      	movs	r0, #1
 801e6ea:	9f03      	ldr	r7, [sp, #12]
 801e6ec:	f102 0e08 	add.w	lr, r2, #8
 801e6f0:	9e04      	ldr	r6, [sp, #16]
 801e6f2:	1eaa      	subs	r2, r5, #2
 801e6f4:	3d01      	subs	r5, #1
 801e6f6:	f8dc 4000 	ldr.w	r4, [ip]
 801e6fa:	3710      	adds	r7, #16
 801e6fc:	f8db c000 	ldr.w	ip, [fp]
 801e700:	fa00 f202 	lsl.w	r2, r0, r2
 801e704:	3610      	adds	r6, #16
 801e706:	9808      	ldr	r0, [sp, #32]
 801e708:	fb50 2204 	smmla	r2, r0, r4, r2
 801e70c:	fa42 f505 	asr.w	r5, r2, r5
 801e710:	46ba      	mov	sl, r7
 801e712:	4674      	mov	r4, lr
 801e714:	4465      	add	r5, ip
 801e716:	46b4      	mov	ip, r6
 801e718:	f305 0507 	ssat	r5, #8, r5
 801e71c:	9a05      	ldr	r2, [sp, #20]
 801e71e:	f889 5000 	strb.w	r5, [r9]
 801e722:	3204      	adds	r2, #4
 801e724:	4615      	mov	r5, r2
 801e726:	9807      	ldr	r0, [sp, #28]
 801e728:	3348      	adds	r3, #72	; 0x48
 801e72a:	f8cd e004 	str.w	lr, [sp, #4]
 801e72e:	f100 0904 	add.w	r9, r0, #4
 801e732:	9802      	ldr	r0, [sp, #8]
 801e734:	9703      	str	r7, [sp, #12]
 801e736:	3010      	adds	r0, #16
 801e738:	e9cd 6204 	strd	r6, r2, [sp, #16]
 801e73c:	9002      	str	r0, [sp, #8]
 801e73e:	fa1f f089 	uxth.w	r0, r9
 801e742:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801e744:	4602      	mov	r2, r0
 801e746:	9007      	str	r0, [sp, #28]
 801e748:	42b0      	cmp	r0, r6
 801e74a:	f080 819f 	bcs.w	801ea8c <forward_lite_dw_3x3_sssa8_ch+0x584>
 801e74e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e750:	f853 5c48 	ldr.w	r5, [r3, #-72]
 801e754:	5884      	ldr	r4, [r0, r2]
 801e756:	1887      	adds	r7, r0, r2
 801e758:	9802      	ldr	r0, [sp, #8]
 801e75a:	587a      	ldr	r2, [r7, r1]
 801e75c:	fa1f fe84 	uxth.w	lr, r4
 801e760:	f850 6c10 	ldr.w	r6, [r0, #-16]
 801e764:	ea4e 4e02 	orr.w	lr, lr, r2, lsl #16
 801e768:	900b      	str	r0, [sp, #44]	; 0x2c
 801e76a:	0c12      	lsrs	r2, r2, #16
 801e76c:	9309      	str	r3, [sp, #36]	; 0x24
 801e76e:	fa28 fc8e 	sxtab16	ip, r8, lr
 801e772:	0412      	lsls	r2, r2, #16
 801e774:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 801e778:	eb07 0441 	add.w	r4, r7, r1, lsl #1
 801e77c:	fb25 6c0c 	smlad	ip, r5, ip, r6
 801e780:	fa28 fe9e 	sxtab16	lr, r8, lr, ror #8
 801e784:	f853 5c44 	ldr.w	r5, [r3, #-68]
 801e788:	f850 6c0c 	ldr.w	r6, [r0, #-12]
 801e78c:	fb25 6e0e 	smlad	lr, r5, lr, r6
 801e790:	f853 5c40 	ldr.w	r5, [r3, #-64]
 801e794:	f850 6c08 	ldr.w	r6, [r0, #-8]
 801e798:	fa28 f982 	sxtab16	r9, r8, r2
 801e79c:	fb25 6509 	smlad	r5, r5, r9, r6
 801e7a0:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 801e7a4:	9e02      	ldr	r6, [sp, #8]
 801e7a6:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 801e7aa:	f856 6c04 	ldr.w	r6, [r6, #-4]
 801e7ae:	fb20 6202 	smlad	r2, r0, r2, r6
 801e7b2:	f857 a011 	ldr.w	sl, [r7, r1, lsl #1]
 801e7b6:	9f06      	ldr	r7, [sp, #24]
 801e7b8:	f853 0c38 	ldr.w	r0, [r3, #-56]
 801e7bc:	59e6      	ldr	r6, [r4, r7]
 801e7be:	443c      	add	r4, r7
 801e7c0:	4fb1      	ldr	r7, [pc, #708]	; (801ea88 <forward_lite_dw_3x3_sssa8_ch+0x580>)
 801e7c2:	eb04 0901 	add.w	r9, r4, r1
 801e7c6:	4037      	ands	r7, r6
 801e7c8:	ea47 471a 	orr.w	r7, r7, sl, lsr #16
 801e7cc:	fa1f fa8a 	uxth.w	sl, sl
 801e7d0:	ea4a 4a06 	orr.w	sl, sl, r6, lsl #16
 801e7d4:	fa28 f68a 	sxtab16	r6, r8, sl
 801e7d8:	fb20 cc06 	smlad	ip, r0, r6, ip
 801e7dc:	fa28 fa9a 	sxtab16	sl, r8, sl, ror #8
 801e7e0:	f853 0c34 	ldr.w	r0, [r3, #-52]
 801e7e4:	fb20 ee0a 	smlad	lr, r0, sl, lr
 801e7e8:	f853 0c30 	ldr.w	r0, [r3, #-48]
 801e7ec:	fa28 f687 	sxtab16	r6, r8, r7
 801e7f0:	fb20 5506 	smlad	r5, r0, r6, r5
 801e7f4:	fa28 f797 	sxtab16	r7, r8, r7, ror #8
 801e7f8:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 801e7fc:	fb20 2207 	smlad	r2, r0, r7, r2
 801e800:	5866      	ldr	r6, [r4, r1]
 801e802:	4489      	add	r9, r1
 801e804:	f854 4011 	ldr.w	r4, [r4, r1, lsl #1]
 801e808:	b2b7      	uxth	r7, r6
 801e80a:	f853 0c28 	ldr.w	r0, [r3, #-40]
 801e80e:	ea47 4704 	orr.w	r7, r7, r4, lsl #16
 801e812:	0c24      	lsrs	r4, r4, #16
 801e814:	0424      	lsls	r4, r4, #16
 801e816:	ea44 4416 	orr.w	r4, r4, r6, lsr #16
 801e81a:	9e06      	ldr	r6, [sp, #24]
 801e81c:	eb09 0b06 	add.w	fp, r9, r6
 801e820:	fa28 f687 	sxtab16	r6, r8, r7
 801e824:	fb20 cc06 	smlad	ip, r0, r6, ip
 801e828:	fa28 f797 	sxtab16	r7, r8, r7, ror #8
 801e82c:	f853 0c24 	ldr.w	r0, [r3, #-36]
 801e830:	fb20 ee07 	smlad	lr, r0, r7, lr
 801e834:	f853 7c20 	ldr.w	r7, [r3, #-32]
 801e838:	fa28 f684 	sxtab16	r6, r8, r4
 801e83c:	fb27 5506 	smlad	r5, r7, r6, r5
 801e840:	fa28 f494 	sxtab16	r4, r8, r4, ror #8
 801e844:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 801e848:	fb20 2204 	smlad	r2, r0, r4, r2
 801e84c:	9e06      	ldr	r6, [sp, #24]
 801e84e:	4c8e      	ldr	r4, [pc, #568]	; (801ea88 <forward_lite_dw_3x3_sssa8_ch+0x580>)
 801e850:	f859 7006 	ldr.w	r7, [r9, r6]
 801e854:	f85b 6001 	ldr.w	r6, [fp, r1]
 801e858:	f853 0c18 	ldr.w	r0, [r3, #-24]
 801e85c:	4034      	ands	r4, r6
 801e85e:	ea44 4417 	orr.w	r4, r4, r7, lsr #16
 801e862:	b2bf      	uxth	r7, r7
 801e864:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
 801e868:	fa28 f687 	sxtab16	r6, r8, r7
 801e86c:	fb20 cc06 	smlad	ip, r0, r6, ip
 801e870:	fa28 f797 	sxtab16	r7, r8, r7, ror #8
 801e874:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801e878:	fb20 ee07 	smlad	lr, r0, r7, lr
 801e87c:	f853 0c10 	ldr.w	r0, [r3, #-16]
 801e880:	fa28 f784 	sxtab16	r7, r8, r4
 801e884:	fb20 5507 	smlad	r5, r0, r7, r5
 801e888:	fa28 f494 	sxtab16	r4, r8, r4, ror #8
 801e88c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 801e890:	fb20 2204 	smlad	r2, r0, r4, r2
 801e894:	f85b 4011 	ldr.w	r4, [fp, r1, lsl #1]
 801e898:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e89a:	b266      	sxtb	r6, r4
 801e89c:	f344 4b07 	sbfx	fp, r4, #16, #8
 801e8a0:	f833 7c08 	ldrh.w	r7, [r3, #-8]
 801e8a4:	1a36      	subs	r6, r6, r0
 801e8a6:	ebab 0b00 	sub.w	fp, fp, r0
 801e8aa:	f833 ac04 	ldrh.w	sl, [r3, #-4]
 801e8ae:	fb17 cc06 	smlabb	ip, r7, r6, ip
 801e8b2:	f344 2707 	sbfx	r7, r4, #8, #8
 801e8b6:	fb1a 5b0b 	smlabb	fp, sl, fp, r5
 801e8ba:	ebc0 6424 	rsb	r4, r0, r4, asr #24
 801e8be:	f833 5c02 	ldrh.w	r5, [r3, #-2]
 801e8c2:	1a3f      	subs	r7, r7, r0
 801e8c4:	9801      	ldr	r0, [sp, #4]
 801e8c6:	fb15 2204 	smlabb	r2, r5, r4, r2
 801e8ca:	f833 9c06 	ldrh.w	r9, [r3, #-6]
 801e8ce:	9208      	str	r2, [sp, #32]
 801e8d0:	fb19 ee07 	smlabb	lr, r9, r7, lr
 801e8d4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e8d8:	2a15      	cmp	r2, #21
 801e8da:	f73f aea7 	bgt.w	801e62c <forward_lite_dw_3x3_sssa8_ch+0x124>
 801e8de:	2a00      	cmp	r2, #0
 801e8e0:	dd6d      	ble.n	801e9be <forward_lite_dw_3x3_sssa8_ch+0x4b6>
 801e8e2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801e8e6:	1c87      	adds	r7, r0, #2
 801e8e8:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 801e8ec:	f856 4b04 	ldr.w	r4, [r6], #4
 801e8f0:	f855 9b04 	ldr.w	r9, [r5], #4
 801e8f4:	fb5c 9c04 	smmla	ip, ip, r4, r9
 801e8f8:	fa4c fc02 	asr.w	ip, ip, r2
 801e8fc:	f30c 0207 	ssat	r2, #8, ip
 801e900:	f8dd a014 	ldr.w	sl, [sp, #20]
 801e904:	f80a 2b01 	strb.w	r2, [sl], #1
 801e908:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e90c:	2a15      	cmp	r2, #21
 801e90e:	f73f aeaa 	bgt.w	801e666 <forward_lite_dw_3x3_sssa8_ch+0x15e>
 801e912:	2a00      	cmp	r2, #0
 801e914:	f340 809d 	ble.w	801ea52 <forward_lite_dw_3x3_sssa8_ch+0x54a>
 801e918:	9803      	ldr	r0, [sp, #12]
 801e91a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801e91e:	6834      	ldr	r4, [r6, #0]
 801e920:	f100 0608 	add.w	r6, r0, #8
 801e924:	9804      	ldr	r0, [sp, #16]
 801e926:	682d      	ldr	r5, [r5, #0]
 801e928:	f100 0908 	add.w	r9, r0, #8
 801e92c:	9801      	ldr	r0, [sp, #4]
 801e92e:	fb5e 5e04 	smmla	lr, lr, r4, r5
 801e932:	f100 0c04 	add.w	ip, r0, #4
 801e936:	fa4e f202 	asr.w	r2, lr, r2
 801e93a:	f302 0207 	ssat	r2, #8, r2
 801e93e:	f88a 2000 	strb.w	r2, [sl]
 801e942:	f9bc 4000 	ldrsh.w	r4, [ip]
 801e946:	9a05      	ldr	r2, [sp, #20]
 801e948:	2c15      	cmp	r4, #21
 801e94a:	f102 0202 	add.w	r2, r2, #2
 801e94e:	f73f aeaa 	bgt.w	801e6a6 <forward_lite_dw_3x3_sssa8_ch+0x19e>
 801e952:	2c00      	cmp	r4, #0
 801e954:	dd61      	ble.n	801ea1a <forward_lite_dw_3x3_sssa8_ch+0x512>
 801e956:	9803      	ldr	r0, [sp, #12]
 801e958:	ea4f 054b 	mov.w	r5, fp, lsl #1
 801e95c:	6836      	ldr	r6, [r6, #0]
 801e95e:	f100 0c0c 	add.w	ip, r0, #12
 801e962:	9804      	ldr	r0, [sp, #16]
 801e964:	f8d9 7000 	ldr.w	r7, [r9]
 801e968:	f100 0b0c 	add.w	fp, r0, #12
 801e96c:	9801      	ldr	r0, [sp, #4]
 801e96e:	fb55 7506 	smmla	r5, r5, r6, r7
 801e972:	f100 0e06 	add.w	lr, r0, #6
 801e976:	fa45 f404 	asr.w	r4, r5, r4
 801e97a:	f304 0407 	ssat	r4, #8, r4
 801e97e:	7014      	strb	r4, [r2, #0]
 801e980:	f9be 5000 	ldrsh.w	r5, [lr]
 801e984:	9a05      	ldr	r2, [sp, #20]
 801e986:	2d15      	cmp	r5, #21
 801e988:	f102 0903 	add.w	r9, r2, #3
 801e98c:	f73f aeab 	bgt.w	801e6e6 <forward_lite_dw_3x3_sssa8_ch+0x1de>
 801e990:	2d00      	cmp	r5, #0
 801e992:	dd23      	ble.n	801e9dc <forward_lite_dw_3x3_sssa8_ch+0x4d4>
 801e994:	9a01      	ldr	r2, [sp, #4]
 801e996:	9f03      	ldr	r7, [sp, #12]
 801e998:	9e04      	ldr	r6, [sp, #16]
 801e99a:	f102 0e08 	add.w	lr, r2, #8
 801e99e:	3710      	adds	r7, #16
 801e9a0:	9a08      	ldr	r2, [sp, #32]
 801e9a2:	3610      	adds	r6, #16
 801e9a4:	f8dc 4000 	ldr.w	r4, [ip]
 801e9a8:	0052      	lsls	r2, r2, #1
 801e9aa:	f8db c000 	ldr.w	ip, [fp]
 801e9ae:	46ba      	mov	sl, r7
 801e9b0:	fb52 c204 	smmla	r2, r2, r4, ip
 801e9b4:	46b4      	mov	ip, r6
 801e9b6:	fa42 f505 	asr.w	r5, r2, r5
 801e9ba:	4674      	mov	r4, lr
 801e9bc:	e6ac      	b.n	801e718 <forward_lite_dw_3x3_sssa8_ch+0x210>
 801e9be:	f1c2 0201 	rsb	r2, r2, #1
 801e9c2:	fa0c fc02 	lsl.w	ip, ip, r2
 801e9c6:	9a01      	ldr	r2, [sp, #4]
 801e9c8:	1c97      	adds	r7, r2, #2
 801e9ca:	f30c 021f 	ssat	r2, #32, ip
 801e9ce:	9e03      	ldr	r6, [sp, #12]
 801e9d0:	f856 4b04 	ldr.w	r4, [r6], #4
 801e9d4:	fb52 f214 	smmulr	r2, r2, r4
 801e9d8:	9d04      	ldr	r5, [sp, #16]
 801e9da:	e636      	b.n	801e64a <forward_lite_dw_3x3_sssa8_ch+0x142>
 801e9dc:	9a01      	ldr	r2, [sp, #4]
 801e9de:	9808      	ldr	r0, [sp, #32]
 801e9e0:	f102 0e08 	add.w	lr, r2, #8
 801e9e4:	f1c5 0201 	rsb	r2, r5, #1
 801e9e8:	4674      	mov	r4, lr
 801e9ea:	4090      	lsls	r0, r2
 801e9ec:	f300 021f 	ssat	r2, #32, r0
 801e9f0:	9f03      	ldr	r7, [sp, #12]
 801e9f2:	f8dc 5000 	ldr.w	r5, [ip]
 801e9f6:	3710      	adds	r7, #16
 801e9f8:	46ba      	mov	sl, r7
 801e9fa:	fb52 f215 	smmulr	r2, r2, r5
 801e9fe:	9e04      	ldr	r6, [sp, #16]
 801ea00:	f8db 5000 	ldr.w	r5, [fp]
 801ea04:	3610      	adds	r6, #16
 801ea06:	442a      	add	r2, r5
 801ea08:	46b4      	mov	ip, r6
 801ea0a:	f302 0207 	ssat	r2, #8, r2
 801ea0e:	f889 2000 	strb.w	r2, [r9]
 801ea12:	9a05      	ldr	r2, [sp, #20]
 801ea14:	3204      	adds	r2, #4
 801ea16:	4615      	mov	r5, r2
 801ea18:	e685      	b.n	801e726 <forward_lite_dw_3x3_sssa8_ch+0x21e>
 801ea1a:	f1c4 0501 	rsb	r5, r4, #1
 801ea1e:	9801      	ldr	r0, [sp, #4]
 801ea20:	fa0b f505 	lsl.w	r5, fp, r5
 801ea24:	f100 0e06 	add.w	lr, r0, #6
 801ea28:	f305 051f 	ssat	r5, #32, r5
 801ea2c:	9803      	ldr	r0, [sp, #12]
 801ea2e:	6834      	ldr	r4, [r6, #0]
 801ea30:	f100 0c0c 	add.w	ip, r0, #12
 801ea34:	fb55 f514 	smmulr	r5, r5, r4
 801ea38:	f8d9 4000 	ldr.w	r4, [r9]
 801ea3c:	9804      	ldr	r0, [sp, #16]
 801ea3e:	442c      	add	r4, r5
 801ea40:	f100 0b0c 	add.w	fp, r0, #12
 801ea44:	f304 0407 	ssat	r4, #8, r4
 801ea48:	7014      	strb	r4, [r2, #0]
 801ea4a:	9a05      	ldr	r2, [sp, #20]
 801ea4c:	f102 0903 	add.w	r9, r2, #3
 801ea50:	e644      	b.n	801e6dc <forward_lite_dw_3x3_sssa8_ch+0x1d4>
 801ea52:	f1c2 0201 	rsb	r2, r2, #1
 801ea56:	fa0e fe02 	lsl.w	lr, lr, r2
 801ea5a:	9a01      	ldr	r2, [sp, #4]
 801ea5c:	f102 0c04 	add.w	ip, r2, #4
 801ea60:	f30e 0e1f 	ssat	lr, #32, lr
 801ea64:	9803      	ldr	r0, [sp, #12]
 801ea66:	6832      	ldr	r2, [r6, #0]
 801ea68:	f100 0608 	add.w	r6, r0, #8
 801ea6c:	fb5e fe12 	smmulr	lr, lr, r2
 801ea70:	682a      	ldr	r2, [r5, #0]
 801ea72:	9804      	ldr	r0, [sp, #16]
 801ea74:	4472      	add	r2, lr
 801ea76:	f100 0908 	add.w	r9, r0, #8
 801ea7a:	f302 0207 	ssat	r2, #8, r2
 801ea7e:	f88a 2000 	strb.w	r2, [sl]
 801ea82:	9a05      	ldr	r2, [sp, #20]
 801ea84:	3202      	adds	r2, #2
 801ea86:	e609      	b.n	801e69c <forward_lite_dw_3x3_sssa8_ch+0x194>
 801ea88:	ffff0000 	.word	0xffff0000
 801ea8c:	9401      	str	r4, [sp, #4]
 801ea8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ea90:	2b00      	cmp	r3, #0
 801ea92:	f000 8131 	beq.w	801ecf8 <forward_lite_dw_3x3_sssa8_ch+0x7f0>
 801ea96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ea98:	9b07      	ldr	r3, [sp, #28]
 801ea9a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801ea9c:	18d0      	adds	r0, r2, r3
 801ea9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801eaa0:	56d3      	ldrsb	r3, [r2, r3]
 801eaa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801eaa4:	1bda      	subs	r2, r3, r7
 801eaa6:	680b      	ldr	r3, [r1, #0]
 801eaa8:	8821      	ldrh	r1, [r4, #0]
 801eaaa:	fb11 3302 	smlabb	r3, r1, r2, r3
 801eaae:	990c      	ldr	r1, [sp, #48]	; 0x30
 801eab0:	5642      	ldrsb	r2, [r0, r1]
 801eab2:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 801eab6:	f910 0011 	ldrsb.w	r0, [r0, r1, lsl #1]
 801eaba:	1bd2      	subs	r2, r2, r7
 801eabc:	8861      	ldrh	r1, [r4, #2]
 801eabe:	1bc0      	subs	r0, r0, r7
 801eac0:	fb12 3301 	smlabb	r3, r2, r1, r3
 801eac4:	9a06      	ldr	r2, [sp, #24]
 801eac6:	18b4      	adds	r4, r6, r2
 801eac8:	56b2      	ldrsb	r2, [r6, r2]
 801eaca:	463e      	mov	r6, r7
 801eacc:	1bd2      	subs	r2, r2, r7
 801eace:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ead0:	88b9      	ldrh	r1, [r7, #4]
 801ead2:	fb10 3101 	smlabb	r1, r0, r1, r3
 801ead6:	88fb      	ldrh	r3, [r7, #6]
 801ead8:	fb12 1103 	smlabb	r1, r2, r3, r1
 801eadc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eade:	56e2      	ldrsb	r2, [r4, r3]
 801eae0:	eb04 0043 	add.w	r0, r4, r3, lsl #1
 801eae4:	f914 3013 	ldrsb.w	r3, [r4, r3, lsl #1]
 801eae8:	1b92      	subs	r2, r2, r6
 801eaea:	893c      	ldrh	r4, [r7, #8]
 801eaec:	1b9b      	subs	r3, r3, r6
 801eaee:	fb12 1204 	smlabb	r2, r2, r4, r1
 801eaf2:	9906      	ldr	r1, [sp, #24]
 801eaf4:	1844      	adds	r4, r0, r1
 801eaf6:	5641      	ldrsb	r1, [r0, r1]
 801eaf8:	8978      	ldrh	r0, [r7, #10]
 801eafa:	1b89      	subs	r1, r1, r6
 801eafc:	fb13 2300 	smlabb	r3, r3, r0, r2
 801eb00:	89b8      	ldrh	r0, [r7, #12]
 801eb02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eb04:	fb11 3300 	smlabb	r3, r1, r0, r3
 801eb08:	56a1      	ldrsb	r1, [r4, r2]
 801eb0a:	f914 0012 	ldrsb.w	r0, [r4, r2, lsl #1]
 801eb0e:	463c      	mov	r4, r7
 801eb10:	1b8a      	subs	r2, r1, r6
 801eb12:	89f9      	ldrh	r1, [r7, #14]
 801eb14:	1b80      	subs	r0, r0, r6
 801eb16:	fb12 3101 	smlabb	r1, r2, r1, r3
 801eb1a:	9b07      	ldr	r3, [sp, #28]
 801eb1c:	1c5f      	adds	r7, r3, #1
 801eb1e:	8a23      	ldrh	r3, [r4, #16]
 801eb20:	fb10 1003 	smlabb	r0, r0, r3, r1
 801eb24:	9b01      	ldr	r3, [sp, #4]
 801eb26:	b2bf      	uxth	r7, r7
 801eb28:	f9b3 4000 	ldrsh.w	r4, [r3]
 801eb2c:	b231      	sxth	r1, r6
 801eb2e:	2c15      	cmp	r4, #21
 801eb30:	f300 80fa 	bgt.w	801ed28 <forward_lite_dw_3x3_sssa8_ch+0x820>
 801eb34:	2c00      	cmp	r4, #0
 801eb36:	f340 812e 	ble.w	801ed96 <forward_lite_dw_3x3_sssa8_ch+0x88e>
 801eb3a:	f8da 3000 	ldr.w	r3, [sl]
 801eb3e:	0040      	lsls	r0, r0, #1
 801eb40:	f8dc 2000 	ldr.w	r2, [ip]
 801eb44:	fb50 2003 	smmla	r0, r0, r3, r2
 801eb48:	fa40 f404 	asr.w	r4, r0, r4
 801eb4c:	f304 0407 	ssat	r4, #8, r4
 801eb50:	46ae      	mov	lr, r5
 801eb52:	f80e 4b01 	strb.w	r4, [lr], #1
 801eb56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	f000 80cb 	beq.w	801ecf4 <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 801eb5e:	9b07      	ldr	r3, [sp, #28]
 801eb60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801eb62:	3302      	adds	r3, #2
 801eb64:	8a72      	ldrh	r2, [r6, #18]
 801eb66:	fa1f fb83 	uxth.w	fp, r3
 801eb6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb6c:	19dc      	adds	r4, r3, r7
 801eb6e:	57d8      	ldrsb	r0, [r3, r7]
 801eb70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb72:	1a40      	subs	r0, r0, r1
 801eb74:	685b      	ldr	r3, [r3, #4]
 801eb76:	fb10 3302 	smlabb	r3, r0, r2, r3
 801eb7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eb7c:	56a0      	ldrsb	r0, [r4, r2]
 801eb7e:	eb04 0742 	add.w	r7, r4, r2, lsl #1
 801eb82:	f914 4012 	ldrsb.w	r4, [r4, r2, lsl #1]
 801eb86:	1a40      	subs	r0, r0, r1
 801eb88:	8ab2      	ldrh	r2, [r6, #20]
 801eb8a:	1a64      	subs	r4, r4, r1
 801eb8c:	fb10 3002 	smlabb	r0, r0, r2, r3
 801eb90:	9b06      	ldr	r3, [sp, #24]
 801eb92:	18fe      	adds	r6, r7, r3
 801eb94:	56fb      	ldrsb	r3, [r7, r3]
 801eb96:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801eb98:	1a5b      	subs	r3, r3, r1
 801eb9a:	8afa      	ldrh	r2, [r7, #22]
 801eb9c:	fb14 0202 	smlabb	r2, r4, r2, r0
 801eba0:	8b38      	ldrh	r0, [r7, #24]
 801eba2:	fb13 2200 	smlabb	r2, r3, r0, r2
 801eba6:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eba8:	5633      	ldrsb	r3, [r6, r0]
 801ebaa:	eb06 0440 	add.w	r4, r6, r0, lsl #1
 801ebae:	f916 0010 	ldrsb.w	r0, [r6, r0, lsl #1]
 801ebb2:	1a5b      	subs	r3, r3, r1
 801ebb4:	8b7e      	ldrh	r6, [r7, #26]
 801ebb6:	1a40      	subs	r0, r0, r1
 801ebb8:	fb13 2306 	smlabb	r3, r3, r6, r2
 801ebbc:	9a06      	ldr	r2, [sp, #24]
 801ebbe:	18a6      	adds	r6, r4, r2
 801ebc0:	56a2      	ldrsb	r2, [r4, r2]
 801ebc2:	8bbc      	ldrh	r4, [r7, #28]
 801ebc4:	1a52      	subs	r2, r2, r1
 801ebc6:	fb10 3304 	smlabb	r3, r0, r4, r3
 801ebca:	8bf8      	ldrh	r0, [r7, #30]
 801ebcc:	8c3c      	ldrh	r4, [r7, #32]
 801ebce:	fb12 3200 	smlabb	r2, r2, r0, r3
 801ebd2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ebd4:	5633      	ldrsb	r3, [r6, r0]
 801ebd6:	f916 0010 	ldrsb.w	r0, [r6, r0, lsl #1]
 801ebda:	1a5b      	subs	r3, r3, r1
 801ebdc:	1a40      	subs	r0, r0, r1
 801ebde:	fb13 2204 	smlabb	r2, r3, r4, r2
 801ebe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ebe4:	fb10 2003 	smlabb	r0, r0, r3, r2
 801ebe8:	9b01      	ldr	r3, [sp, #4]
 801ebea:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 801ebee:	2c15      	cmp	r4, #21
 801ebf0:	f300 80ad 	bgt.w	801ed4e <forward_lite_dw_3x3_sssa8_ch+0x846>
 801ebf4:	2c00      	cmp	r4, #0
 801ebf6:	f340 80e1 	ble.w	801edbc <forward_lite_dw_3x3_sssa8_ch+0x8b4>
 801ebfa:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ebfe:	0040      	lsls	r0, r0, #1
 801ec00:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ec04:	fb50 2003 	smmla	r0, r0, r3, r2
 801ec08:	fa40 f404 	asr.w	r4, r0, r4
 801ec0c:	f304 0407 	ssat	r4, #8, r4
 801ec10:	46f1      	mov	r9, lr
 801ec12:	f809 4b01 	strb.w	r4, [r9], #1
 801ec16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ec18:	2b02      	cmp	r3, #2
 801ec1a:	d06b      	beq.n	801ecf4 <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 801ec1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ec20:	689c      	ldr	r4, [r3, #8]
 801ec22:	9b01      	ldr	r3, [sp, #4]
 801ec24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ec26:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 801ec2a:	eb02 030b 	add.w	r3, r2, fp
 801ec2e:	f912 200b 	ldrsb.w	r2, [r2, fp]
 801ec32:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ec34:	f1be 0f15 	cmp.w	lr, #21
 801ec38:	eba2 0001 	sub.w	r0, r2, r1
 801ec3c:	8cb6      	ldrh	r6, [r6, #36]	; 0x24
 801ec3e:	fb16 4200 	smlabb	r2, r6, r0, r4
 801ec42:	57de      	ldrsb	r6, [r3, r7]
 801ec44:	eb03 0047 	add.w	r0, r3, r7, lsl #1
 801ec48:	f913 7017 	ldrsb.w	r7, [r3, r7, lsl #1]
 801ec4c:	eba6 0401 	sub.w	r4, r6, r1
 801ec50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ec52:	9b06      	ldr	r3, [sp, #24]
 801ec54:	eba7 0701 	sub.w	r7, r7, r1
 801ec58:	8cf6      	ldrh	r6, [r6, #38]	; 0x26
 801ec5a:	fb16 2604 	smlabb	r6, r6, r4, r2
 801ec5e:	eb00 0403 	add.w	r4, r0, r3
 801ec62:	56c3      	ldrsb	r3, [r0, r3]
 801ec64:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ec66:	eba3 0201 	sub.w	r2, r3, r1
 801ec6a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 801ec6c:	fb13 6307 	smlabb	r3, r3, r7, r6
 801ec70:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ec72:	4606      	mov	r6, r0
 801ec74:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
 801ec76:	fb10 3302 	smlabb	r3, r0, r2, r3
 801ec7a:	57e0      	ldrsb	r0, [r4, r7]
 801ec7c:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 801ec80:	f914 4017 	ldrsb.w	r4, [r4, r7, lsl #1]
 801ec84:	eba0 0001 	sub.w	r0, r0, r1
 801ec88:	4637      	mov	r7, r6
 801ec8a:	8db6      	ldrh	r6, [r6, #44]	; 0x2c
 801ec8c:	eba4 0401 	sub.w	r4, r4, r1
 801ec90:	fb16 3000 	smlabb	r0, r6, r0, r3
 801ec94:	9b06      	ldr	r3, [sp, #24]
 801ec96:	eb02 0603 	add.w	r6, r2, r3
 801ec9a:	56d2      	ldrsb	r2, [r2, r3]
 801ec9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ec9e:	eba2 0201 	sub.w	r2, r2, r1
 801eca2:	fb13 0304 	smlabb	r3, r3, r4, r0
 801eca6:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 801eca8:	463c      	mov	r4, r7
 801ecaa:	fb10 3302 	smlabb	r3, r0, r2, r3
 801ecae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ecb0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801ecb2:	56b7      	ldrsb	r7, [r6, r2]
 801ecb4:	f916 2012 	ldrsb.w	r2, [r6, r2, lsl #1]
 801ecb8:	eba7 0701 	sub.w	r7, r7, r1
 801ecbc:	eba2 0101 	sub.w	r1, r2, r1
 801ecc0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801ecc2:	fb10 3307 	smlabb	r3, r0, r7, r3
 801ecc6:	fb12 3301 	smlabb	r3, r2, r1, r3
 801ecca:	dd53      	ble.n	801ed74 <forward_lite_dw_3x3_sssa8_ch+0x86c>
 801eccc:	f1ae 0102 	sub.w	r1, lr, #2
 801ecd0:	2401      	movs	r4, #1
 801ecd2:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ecd6:	f8dc 0008 	ldr.w	r0, [ip, #8]
 801ecda:	f8da 2008 	ldr.w	r2, [sl, #8]
 801ecde:	fa04 f101 	lsl.w	r1, r4, r1
 801ece2:	fb53 1102 	smmla	r1, r3, r2, r1
 801ece6:	fa41 f10e 	asr.w	r1, r1, lr
 801ecea:	4401      	add	r1, r0
 801ecec:	f301 0107 	ssat	r1, #8, r1
 801ecf0:	f889 1000 	strb.w	r1, [r9]
 801ecf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ecf6:	441d      	add	r5, r3
 801ecf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ecfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ecfc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ecfe:	3301      	adds	r3, #1
 801ed00:	440a      	add	r2, r1
 801ed02:	b21b      	sxth	r3, r3
 801ed04:	920a      	str	r2, [sp, #40]	; 0x28
 801ed06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed08:	9310      	str	r3, [sp, #64]	; 0x40
 801ed0a:	429a      	cmp	r2, r3
 801ed0c:	f73f ac76 	bgt.w	801e5fc <forward_lite_dw_3x3_sssa8_ch+0xf4>
 801ed10:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ed12:	46a9      	mov	r9, r5
 801ed14:	9919      	ldr	r1, [sp, #100]	; 0x64
 801ed16:	3301      	adds	r3, #1
 801ed18:	b21b      	sxth	r3, r3
 801ed1a:	428b      	cmp	r3, r1
 801ed1c:	9318      	str	r3, [sp, #96]	; 0x60
 801ed1e:	f6ff ac65 	blt.w	801e5ec <forward_lite_dw_3x3_sssa8_ch+0xe4>
 801ed22:	b01f      	add	sp, #124	; 0x7c
 801ed24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed28:	1ea6      	subs	r6, r4, #2
 801ed2a:	2301      	movs	r3, #1
 801ed2c:	3c01      	subs	r4, #1
 801ed2e:	f8da 2000 	ldr.w	r2, [sl]
 801ed32:	fa03 f606 	lsl.w	r6, r3, r6
 801ed36:	f8dc 3000 	ldr.w	r3, [ip]
 801ed3a:	fb50 6202 	smmla	r2, r0, r2, r6
 801ed3e:	4122      	asrs	r2, r4
 801ed40:	4413      	add	r3, r2
 801ed42:	f303 0307 	ssat	r3, #8, r3
 801ed46:	46ae      	mov	lr, r5
 801ed48:	f80e 3b01 	strb.w	r3, [lr], #1
 801ed4c:	e703      	b.n	801eb56 <forward_lite_dw_3x3_sssa8_ch+0x64e>
 801ed4e:	1ea6      	subs	r6, r4, #2
 801ed50:	2301      	movs	r3, #1
 801ed52:	3c01      	subs	r4, #1
 801ed54:	f8da 2004 	ldr.w	r2, [sl, #4]
 801ed58:	fa03 f606 	lsl.w	r6, r3, r6
 801ed5c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ed60:	fb50 6202 	smmla	r2, r0, r2, r6
 801ed64:	4122      	asrs	r2, r4
 801ed66:	4413      	add	r3, r2
 801ed68:	f303 0307 	ssat	r3, #8, r3
 801ed6c:	46f1      	mov	r9, lr
 801ed6e:	f809 3b01 	strb.w	r3, [r9], #1
 801ed72:	e750      	b.n	801ec16 <forward_lite_dw_3x3_sssa8_ch+0x70e>
 801ed74:	f1be 0f00 	cmp.w	lr, #0
 801ed78:	dd40      	ble.n	801edfc <forward_lite_dw_3x3_sssa8_ch+0x8f4>
 801ed7a:	f8da 2008 	ldr.w	r2, [sl, #8]
 801ed7e:	005b      	lsls	r3, r3, #1
 801ed80:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801ed84:	fb53 1302 	smmla	r3, r3, r2, r1
 801ed88:	fa43 f30e 	asr.w	r3, r3, lr
 801ed8c:	f303 0307 	ssat	r3, #8, r3
 801ed90:	f889 3000 	strb.w	r3, [r9]
 801ed94:	e7ae      	b.n	801ecf4 <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 801ed96:	f1c4 0401 	rsb	r4, r4, #1
 801ed9a:	fa00 f404 	lsl.w	r4, r0, r4
 801ed9e:	f304 021f 	ssat	r2, #32, r4
 801eda2:	f8da 3000 	ldr.w	r3, [sl]
 801eda6:	fb52 f213 	smmulr	r2, r2, r3
 801edaa:	f8dc 3000 	ldr.w	r3, [ip]
 801edae:	4413      	add	r3, r2
 801edb0:	f303 0307 	ssat	r3, #8, r3
 801edb4:	46ae      	mov	lr, r5
 801edb6:	f80e 3b01 	strb.w	r3, [lr], #1
 801edba:	e6cc      	b.n	801eb56 <forward_lite_dw_3x3_sssa8_ch+0x64e>
 801edbc:	f1c4 0401 	rsb	r4, r4, #1
 801edc0:	fa00 f204 	lsl.w	r2, r0, r4
 801edc4:	f302 021f 	ssat	r2, #32, r2
 801edc8:	f8da 3004 	ldr.w	r3, [sl, #4]
 801edcc:	fb52 f213 	smmulr	r2, r2, r3
 801edd0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801edd4:	4413      	add	r3, r2
 801edd6:	f303 0307 	ssat	r3, #8, r3
 801edda:	46f1      	mov	r9, lr
 801eddc:	f809 3b01 	strb.w	r3, [r9], #1
 801ede0:	e719      	b.n	801ec16 <forward_lite_dw_3x3_sssa8_ch+0x70e>
 801ede2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ede4:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 801ede8:	930b      	str	r3, [sp, #44]	; 0x2c
 801edea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801edec:	f8dd a0c8 	ldr.w	sl, [sp, #200]	; 0xc8
 801edf0:	9309      	str	r3, [sp, #36]	; 0x24
 801edf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801edf4:	9301      	str	r3, [sp, #4]
 801edf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801edf8:	9307      	str	r3, [sp, #28]
 801edfa:	e648      	b.n	801ea8e <forward_lite_dw_3x3_sssa8_ch+0x586>
 801edfc:	f1ce 0e01 	rsb	lr, lr, #1
 801ee00:	fa03 f30e 	lsl.w	r3, r3, lr
 801ee04:	f303 031f 	ssat	r3, #32, r3
 801ee08:	f8da 2008 	ldr.w	r2, [sl, #8]
 801ee0c:	fb53 f312 	smmulr	r3, r3, r2
 801ee10:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ee14:	4413      	add	r3, r2
 801ee16:	f303 0307 	ssat	r3, #8, r3
 801ee1a:	f889 3000 	strb.w	r3, [r9]
 801ee1e:	e769      	b.n	801ecf4 <forward_lite_dw_3x3_sssa8_ch+0x7ec>
 801ee20:	42a1      	cmp	r1, r4
 801ee22:	f840 cc04 	str.w	ip, [r0, #-4]
 801ee26:	f100 0004 	add.w	r0, r0, #4
 801ee2a:	f6ff ab9a 	blt.w	801e562 <forward_lite_dw_3x3_sssa8_ch+0x5a>
 801ee2e:	f7ff bbac 	b.w	801e58a <forward_lite_dw_3x3_sssa8_ch+0x82>
 801ee32:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801ee36:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801ee38:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801ee3c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801ee40:	9303      	str	r3, [sp, #12]
 801ee42:	08a3      	lsrs	r3, r4, #2
 801ee44:	9105      	str	r1, [sp, #20]
 801ee46:	9304      	str	r3, [sp, #16]
 801ee48:	f000 8147 	beq.w	801f0da <forward_lite_dw_3x3_sssa8_ch+0xbd2>
 801ee4c:	3b01      	subs	r3, #1
 801ee4e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ee50:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
 801ee54:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 801ee58:	3204      	adds	r2, #4
 801ee5a:	b29b      	uxth	r3, r3
 801ee5c:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
 801ee60:	48a0      	ldr	r0, [pc, #640]	; (801f0e4 <forward_lite_dw_3x3_sssa8_ch+0xbdc>)
 801ee62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ee66:	9301      	str	r3, [sp, #4]
 801ee68:	465b      	mov	r3, fp
 801ee6a:	191a      	adds	r2, r3, r4
 801ee6c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801ee70:	9302      	str	r3, [sp, #8]
 801ee72:	460b      	mov	r3, r1
 801ee74:	f8db 5000 	ldr.w	r5, [fp]
 801ee78:	931d      	str	r3, [sp, #116]	; 0x74
 801ee7a:	b2a9      	uxth	r1, r5
 801ee7c:	6813      	ldr	r3, [r2, #0]
 801ee7e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ee80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801ee84:	4003      	ands	r3, r0
 801ee86:	fa2f f781 	sxtb16	r7, r1
 801ee8a:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 801ee8e:	1d35      	adds	r5, r6, #4
 801ee90:	6037      	str	r7, [r6, #0]
 801ee92:	951d      	str	r5, [sp, #116]	; 0x74
 801ee94:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801ee96:	fa2f f191 	sxtb16	r1, r1, ror #8
 801ee9a:	1d2e      	adds	r6, r5, #4
 801ee9c:	6029      	str	r1, [r5, #0]
 801ee9e:	fa2f f583 	sxtb16	r5, r3
 801eea2:	961d      	str	r6, [sp, #116]	; 0x74
 801eea4:	991d      	ldr	r1, [sp, #116]	; 0x74
 801eea6:	fa2f f393 	sxtb16	r3, r3, ror #8
 801eeaa:	600d      	str	r5, [r1, #0]
 801eeac:	3104      	adds	r1, #4
 801eeae:	911d      	str	r1, [sp, #116]	; 0x74
 801eeb0:	991d      	ldr	r1, [sp, #116]	; 0x74
 801eeb2:	600b      	str	r3, [r1, #0]
 801eeb4:	3104      	adds	r1, #4
 801eeb6:	f85e 500b 	ldr.w	r5, [lr, fp]
 801eeba:	911d      	str	r1, [sp, #116]	; 0x74
 801eebc:	f85e 3002 	ldr.w	r3, [lr, r2]
 801eec0:	b2a9      	uxth	r1, r5
 801eec2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801eec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801eec8:	4003      	ands	r3, r0
 801eeca:	fa2f f781 	sxtb16	r7, r1
 801eece:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 801eed2:	1d35      	adds	r5, r6, #4
 801eed4:	6037      	str	r7, [r6, #0]
 801eed6:	951d      	str	r5, [sp, #116]	; 0x74
 801eed8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801eeda:	fa2f f191 	sxtb16	r1, r1, ror #8
 801eede:	1d2e      	adds	r6, r5, #4
 801eee0:	6029      	str	r1, [r5, #0]
 801eee2:	fa2f f583 	sxtb16	r5, r3
 801eee6:	961d      	str	r6, [sp, #116]	; 0x74
 801eee8:	991d      	ldr	r1, [sp, #116]	; 0x74
 801eeea:	fa2f f393 	sxtb16	r3, r3, ror #8
 801eeee:	600d      	str	r5, [r1, #0]
 801eef0:	3104      	adds	r1, #4
 801eef2:	911d      	str	r1, [sp, #116]	; 0x74
 801eef4:	991d      	ldr	r1, [sp, #116]	; 0x74
 801eef6:	600b      	str	r3, [r1, #0]
 801eef8:	3104      	adds	r1, #4
 801eefa:	9b02      	ldr	r3, [sp, #8]
 801eefc:	911d      	str	r1, [sp, #116]	; 0x74
 801eefe:	589d      	ldr	r5, [r3, r2]
 801ef00:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ef02:	b2a9      	uxth	r1, r5
 801ef04:	f85a 3002 	ldr.w	r3, [sl, r2]
 801ef08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801ef0c:	4003      	ands	r3, r0
 801ef0e:	fa2f f781 	sxtb16	r7, r1
 801ef12:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 801ef16:	1d35      	adds	r5, r6, #4
 801ef18:	6037      	str	r7, [r6, #0]
 801ef1a:	951d      	str	r5, [sp, #116]	; 0x74
 801ef1c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801ef1e:	fa2f f191 	sxtb16	r1, r1, ror #8
 801ef22:	1d2e      	adds	r6, r5, #4
 801ef24:	6029      	str	r1, [r5, #0]
 801ef26:	fa2f f583 	sxtb16	r5, r3
 801ef2a:	961d      	str	r6, [sp, #116]	; 0x74
 801ef2c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801ef2e:	fa2f f393 	sxtb16	r3, r3, ror #8
 801ef32:	600d      	str	r5, [r1, #0]
 801ef34:	3104      	adds	r1, #4
 801ef36:	911d      	str	r1, [sp, #116]	; 0x74
 801ef38:	991d      	ldr	r1, [sp, #116]	; 0x74
 801ef3a:	600b      	str	r3, [r1, #0]
 801ef3c:	3104      	adds	r1, #4
 801ef3e:	9b03      	ldr	r3, [sp, #12]
 801ef40:	911d      	str	r1, [sp, #116]	; 0x74
 801ef42:	589d      	ldr	r5, [r3, r2]
 801ef44:	f858 300b 	ldr.w	r3, [r8, fp]
 801ef48:	f10b 0b04 	add.w	fp, fp, #4
 801ef4c:	b2a9      	uxth	r1, r5
 801ef4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ef50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801ef54:	4003      	ands	r3, r0
 801ef56:	fa2f f781 	sxtb16	r7, r1
 801ef5a:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 801ef5e:	1d35      	adds	r5, r6, #4
 801ef60:	6037      	str	r7, [r6, #0]
 801ef62:	951d      	str	r5, [sp, #116]	; 0x74
 801ef64:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801ef66:	fa2f f191 	sxtb16	r1, r1, ror #8
 801ef6a:	1d2e      	adds	r6, r5, #4
 801ef6c:	6029      	str	r1, [r5, #0]
 801ef6e:	fa2f f583 	sxtb16	r5, r3
 801ef72:	961d      	str	r6, [sp, #116]	; 0x74
 801ef74:	991d      	ldr	r1, [sp, #116]	; 0x74
 801ef76:	fa2f f393 	sxtb16	r3, r3, ror #8
 801ef7a:	600d      	str	r5, [r1, #0]
 801ef7c:	3104      	adds	r1, #4
 801ef7e:	911d      	str	r1, [sp, #116]	; 0x74
 801ef80:	991d      	ldr	r1, [sp, #116]	; 0x74
 801ef82:	600b      	str	r3, [r1, #0]
 801ef84:	3104      	adds	r1, #4
 801ef86:	f858 3002 	ldr.w	r3, [r8, r2]
 801ef8a:	3204      	adds	r2, #4
 801ef8c:	911d      	str	r1, [sp, #116]	; 0x74
 801ef8e:	ea00 2503 	and.w	r5, r0, r3, lsl #8
 801ef92:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ef94:	b299      	uxth	r1, r3
 801ef96:	430d      	orrs	r5, r1
 801ef98:	ea03 0100 	and.w	r1, r3, r0
 801ef9c:	fa2f f585 	sxtb16	r5, r5
 801efa0:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
 801efa4:	8035      	strh	r5, [r6, #0]
 801efa6:	fa2f f1a1 	sxtb16	r1, r1, ror #16
 801efaa:	0c2d      	lsrs	r5, r5, #16
 801efac:	80b1      	strh	r1, [r6, #4]
 801efae:	0c09      	lsrs	r1, r1, #16
 801efb0:	f106 0308 	add.w	r3, r6, #8
 801efb4:	8075      	strh	r5, [r6, #2]
 801efb6:	80f1      	strh	r1, [r6, #6]
 801efb8:	9901      	ldr	r1, [sp, #4]
 801efba:	4559      	cmp	r1, fp
 801efbc:	f47f af5a 	bne.w	801ee74 <forward_lite_dw_3x3_sssa8_ch+0x96c>
 801efc0:	9a04      	ldr	r2, [sp, #16]
 801efc2:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 801efc6:	fa1f f28b 	uxth.w	r2, fp
 801efca:	9204      	str	r2, [sp, #16]
 801efcc:	f014 0203 	ands.w	r2, r4, #3
 801efd0:	f43f aabb 	beq.w	801e54a <forward_lite_dw_3x3_sssa8_ch+0x42>
 801efd4:	3a01      	subs	r2, #1
 801efd6:	9f04      	ldr	r7, [sp, #16]
 801efd8:	b295      	uxth	r5, r2
 801efda:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801efdc:	1c79      	adds	r1, r7, #1
 801efde:	57d2      	ldrsb	r2, [r2, r7]
 801efe0:	b28e      	uxth	r6, r1
 801efe2:	801a      	strh	r2, [r3, #0]
 801efe4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801efe6:	443a      	add	r2, r7
 801efe8:	5711      	ldrsb	r1, [r2, r4]
 801efea:	8059      	strh	r1, [r3, #2]
 801efec:	1911      	adds	r1, r2, r4
 801efee:	f912 0014 	ldrsb.w	r0, [r2, r4, lsl #1]
 801eff2:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801eff6:	8098      	strh	r0, [r3, #4]
 801eff8:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801effc:	80d9      	strh	r1, [r3, #6]
 801effe:	1911      	adds	r1, r2, r4
 801f000:	f912 0014 	ldrsb.w	r0, [r2, r4, lsl #1]
 801f004:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801f008:	8118      	strh	r0, [r3, #8]
 801f00a:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801f00e:	8159      	strh	r1, [r3, #10]
 801f010:	1911      	adds	r1, r2, r4
 801f012:	f912 0014 	ldrsb.w	r0, [r2, r4, lsl #1]
 801f016:	8198      	strh	r0, [r3, #12]
 801f018:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801f01c:	81d9      	strh	r1, [r3, #14]
 801f01e:	f912 2024 	ldrsb.w	r2, [r2, r4, lsl #2]
 801f022:	821a      	strh	r2, [r3, #16]
 801f024:	2d00      	cmp	r5, #0
 801f026:	d04e      	beq.n	801f0c6 <forward_lite_dw_3x3_sssa8_ch+0xbbe>
 801f028:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f02a:	f107 0b02 	add.w	fp, r7, #2
 801f02e:	2d01      	cmp	r5, #1
 801f030:	5792      	ldrsb	r2, [r2, r6]
 801f032:	fa1f fb8b 	uxth.w	fp, fp
 801f036:	825a      	strh	r2, [r3, #18]
 801f038:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f03a:	4432      	add	r2, r6
 801f03c:	5711      	ldrsb	r1, [r2, r4]
 801f03e:	8299      	strh	r1, [r3, #20]
 801f040:	eb02 0104 	add.w	r1, r2, r4
 801f044:	f912 0014 	ldrsb.w	r0, [r2, r4, lsl #1]
 801f048:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801f04c:	82d8      	strh	r0, [r3, #22]
 801f04e:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801f052:	8319      	strh	r1, [r3, #24]
 801f054:	eb02 0104 	add.w	r1, r2, r4
 801f058:	f912 0014 	ldrsb.w	r0, [r2, r4, lsl #1]
 801f05c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801f060:	8358      	strh	r0, [r3, #26]
 801f062:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801f066:	8399      	strh	r1, [r3, #28]
 801f068:	eb02 0104 	add.w	r1, r2, r4
 801f06c:	f912 0014 	ldrsb.w	r0, [r2, r4, lsl #1]
 801f070:	83d8      	strh	r0, [r3, #30]
 801f072:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801f076:	8419      	strh	r1, [r3, #32]
 801f078:	f912 2024 	ldrsb.w	r2, [r2, r4, lsl #2]
 801f07c:	845a      	strh	r2, [r3, #34]	; 0x22
 801f07e:	d022      	beq.n	801f0c6 <forward_lite_dw_3x3_sssa8_ch+0xbbe>
 801f080:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f082:	f912 100b 	ldrsb.w	r1, [r2, fp]
 801f086:	445a      	add	r2, fp
 801f088:	8499      	strh	r1, [r3, #36]	; 0x24
 801f08a:	5711      	ldrsb	r1, [r2, r4]
 801f08c:	84d9      	strh	r1, [r3, #38]	; 0x26
 801f08e:	1911      	adds	r1, r2, r4
 801f090:	f912 0014 	ldrsb.w	r0, [r2, r4, lsl #1]
 801f094:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801f098:	8518      	strh	r0, [r3, #40]	; 0x28
 801f09a:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801f09e:	8559      	strh	r1, [r3, #42]	; 0x2a
 801f0a0:	1911      	adds	r1, r2, r4
 801f0a2:	f912 0014 	ldrsb.w	r0, [r2, r4, lsl #1]
 801f0a6:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801f0aa:	8598      	strh	r0, [r3, #44]	; 0x2c
 801f0ac:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801f0b0:	85d9      	strh	r1, [r3, #46]	; 0x2e
 801f0b2:	1911      	adds	r1, r2, r4
 801f0b4:	f912 0014 	ldrsb.w	r0, [r2, r4, lsl #1]
 801f0b8:	8618      	strh	r0, [r3, #48]	; 0x30
 801f0ba:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 801f0be:	8659      	strh	r1, [r3, #50]	; 0x32
 801f0c0:	f912 2024 	ldrsb.w	r2, [r2, r4, lsl #2]
 801f0c4:	869a      	strh	r2, [r3, #52]	; 0x34
 801f0c6:	eba4 030a 	sub.w	r3, r4, sl
 801f0ca:	9a05      	ldr	r2, [sp, #20]
 801f0cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f0d0:	9312      	str	r3, [sp, #72]	; 0x48
 801f0d2:	4473      	add	r3, lr
 801f0d4:	9313      	str	r3, [sp, #76]	; 0x4c
 801f0d6:	f7ff ba3e 	b.w	801e556 <forward_lite_dw_3x3_sssa8_ch+0x4e>
 801f0da:	460b      	mov	r3, r1
 801f0dc:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 801f0e0:	e774      	b.n	801efcc <forward_lite_dw_3x3_sssa8_ch+0xac4>
 801f0e2:	bf00      	nop
 801f0e4:	ffff0000 	.word	0xffff0000

0801f0e8 <align_factor>:
 801f0e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f0ec:	4602      	mov	r2, r0
 801f0ee:	b508      	push	{r3, lr}
 801f0f0:	eeb4 0a67 	vcmp.f32	s0, s15
 801f0f4:	2300      	movs	r3, #0
 801f0f6:	8003      	strh	r3, [r0, #0]
 801f0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0fc:	d524      	bpl.n	801f148 <align_factor+0x60>
 801f0fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f106:	dd1f      	ble.n	801f148 <align_factor+0x60>
 801f108:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f10c:	2301      	movs	r3, #1
 801f10e:	e005      	b.n	801f11c <align_factor+0x34>
 801f110:	8013      	strh	r3, [r2, #0]
 801f112:	b28b      	uxth	r3, r1
 801f114:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f118:	2b21      	cmp	r3, #33	; 0x21
 801f11a:	d02b      	beq.n	801f174 <align_factor+0x8c>
 801f11c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f120:	1c59      	adds	r1, r3, #1
 801f122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f126:	d4f3      	bmi.n	801f110 <align_factor+0x28>
 801f128:	eddf 7a17 	vldr	s15, [pc, #92]	; 801f188 <align_factor+0xa0>
 801f12c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f130:	ee17 0a90 	vmov	r0, s15
 801f134:	f7e1 f954 	bl	80003e0 <__aeabi_f2lz>
 801f138:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 801f13c:	d003      	beq.n	801f146 <align_factor+0x5e>
 801f13e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801f142:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 801f146:	bd08      	pop	{r3, pc}
 801f148:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f14c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f150:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801f154:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 801f158:	e005      	b.n	801f166 <align_factor+0x7e>
 801f15a:	8013      	strh	r3, [r2, #0]
 801f15c:	b28b      	uxth	r3, r1
 801f15e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f162:	4283      	cmp	r3, r0
 801f164:	d00a      	beq.n	801f17c <align_factor+0x94>
 801f166:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f16a:	1e59      	subs	r1, r3, #1
 801f16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f170:	dcf3      	bgt.n	801f15a <align_factor+0x72>
 801f172:	e7d9      	b.n	801f128 <align_factor+0x40>
 801f174:	2300      	movs	r3, #0
 801f176:	4618      	mov	r0, r3
 801f178:	8013      	strh	r3, [r2, #0]
 801f17a:	bd08      	pop	{r3, pc}
 801f17c:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 801f180:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f184:	8013      	strh	r3, [r2, #0]
 801f186:	e7cf      	b.n	801f128 <align_factor+0x40>
 801f188:	4f000000 	.word	0x4f000000

0801f18c <align_factor_ch>:
 801f18c:	2900      	cmp	r1, #0
 801f18e:	d05d      	beq.n	801f24c <align_factor_ch+0xc0>
 801f190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f194:	ed2d 8b04 	vpush	{d8-d9}
 801f198:	ee80 9a20 	vdiv.f32	s18, s0, s1
 801f19c:	4604      	mov	r4, r0
 801f19e:	4691      	mov	r9, r2
 801f1a0:	4698      	mov	r8, r3
 801f1a2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 801f1a6:	eddf 9a2a 	vldr	s19, [pc, #168]	; 801f250 <align_factor_ch+0xc4>
 801f1aa:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 801f1ae:	2700      	movs	r7, #0
 801f1b0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801f1b4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801f1b8:	ecf4 7a01 	vldmia	r4!, {s15}
 801f1bc:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f1c0:	eef4 7a68 	vcmp.f32	s15, s17
 801f1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1c8:	d528      	bpl.n	801f21c <align_factor_ch+0x90>
 801f1ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1d2:	dd23      	ble.n	801f21c <align_factor_ch+0x90>
 801f1d4:	2200      	movs	r2, #0
 801f1d6:	e003      	b.n	801f1e0 <align_factor_ch+0x54>
 801f1d8:	2a20      	cmp	r2, #32
 801f1da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f1de:	d031      	beq.n	801f244 <align_factor_ch+0xb8>
 801f1e0:	eef4 7ac8 	vcmpe.f32	s15, s16
 801f1e4:	b213      	sxth	r3, r2
 801f1e6:	3201      	adds	r2, #1
 801f1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1ec:	d4f4      	bmi.n	801f1d8 <align_factor_ch+0x4c>
 801f1ee:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801f1f2:	f8a8 3000 	strh.w	r3, [r8]
 801f1f6:	ee17 0a90 	vmov	r0, s15
 801f1fa:	f7e1 f8f1 	bl	80003e0 <__aeabi_f2lz>
 801f1fe:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 801f202:	bf18      	it	ne
 801f204:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 801f208:	42a5      	cmp	r5, r4
 801f20a:	f108 0802 	add.w	r8, r8, #2
 801f20e:	f849 0b04 	str.w	r0, [r9], #4
 801f212:	d1d1      	bne.n	801f1b8 <align_factor_ch+0x2c>
 801f214:	ecbd 8b04 	vpop	{d8-d9}
 801f218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f21c:	2300      	movs	r3, #0
 801f21e:	e005      	b.n	801f22c <align_factor_ch+0xa0>
 801f220:	b213      	sxth	r3, r2
 801f222:	ee67 7a88 	vmul.f32	s15, s15, s16
 801f226:	f113 0f1f 	cmn.w	r3, #31
 801f22a:	d006      	beq.n	801f23a <align_factor_ch+0xae>
 801f22c:	eef4 7ae8 	vcmpe.f32	s15, s17
 801f230:	1e5a      	subs	r2, r3, #1
 801f232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f236:	dcf3      	bgt.n	801f220 <align_factor_ch+0x94>
 801f238:	e7d9      	b.n	801f1ee <align_factor_ch+0x62>
 801f23a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f23e:	f06f 031d 	mvn.w	r3, #29
 801f242:	e7d4      	b.n	801f1ee <align_factor_ch+0x62>
 801f244:	2000      	movs	r0, #0
 801f246:	f8a8 7000 	strh.w	r7, [r8]
 801f24a:	e7dd      	b.n	801f208 <align_factor_ch+0x7c>
 801f24c:	4770      	bx	lr
 801f24e:	bf00      	nop
 801f250:	4f000000 	.word	0x4f000000

0801f254 <st_sssa8_ch_convolve_rank1upd>:
 801f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f258:	b085      	sub	sp, #20
 801f25a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801f25e:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 801f262:	fb13 f304 	smulbb	r3, r3, r4
 801f266:	fb13 f500 	smulbb	r5, r3, r0
 801f26a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801f26e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 801f272:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f274:	2a00      	cmp	r2, #0
 801f276:	d074      	beq.n	801f362 <st_sssa8_ch_convolve_rank1upd+0x10e>
 801f278:	b2ad      	uxth	r5, r5
 801f27a:	f1aa 0a04 	sub.w	sl, sl, #4
 801f27e:	460c      	mov	r4, r1
 801f280:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 801f284:	ea4f 0995 	mov.w	r9, r5, lsr #2
 801f288:	f005 0503 	and.w	r5, r5, #3
 801f28c:	449a      	add	sl, r3
 801f28e:	eb08 0782 	add.w	r7, r8, r2, lsl #2
 801f292:	f1a9 0381 	sub.w	r3, r9, #129	; 0x81
 801f296:	1e69      	subs	r1, r5, #1
 801f298:	f1a9 0280 	sub.w	r2, r9, #128	; 0x80
 801f29c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 801f2a0:	b289      	uxth	r1, r1
 801f2a2:	9100      	str	r1, [sp, #0]
 801f2a4:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 801f2a8:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 801f2ac:	b292      	uxth	r2, r2
 801f2ae:	9202      	str	r2, [sp, #8]
 801f2b0:	025a      	lsls	r2, r3, #9
 801f2b2:	3301      	adds	r3, #1
 801f2b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801f2b8:	025b      	lsls	r3, r3, #9
 801f2ba:	9203      	str	r2, [sp, #12]
 801f2bc:	9301      	str	r3, [sp, #4]
 801f2be:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 801f2c2:	d953      	bls.n	801f36c <st_sssa8_ch_convolve_rank1upd+0x118>
 801f2c4:	9b03      	ldr	r3, [sp, #12]
 801f2c6:	f504 7000 	add.w	r0, r4, #512	; 0x200
 801f2ca:	2600      	movs	r6, #0
 801f2cc:	eb04 0c03 	add.w	ip, r4, r3
 801f2d0:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 801f2d4:	2200      	movs	r2, #0
 801f2d6:	f851 3b04 	ldr.w	r3, [r1], #4
 801f2da:	fa2f fe83 	sxtb16	lr, r3
 801f2de:	4281      	cmp	r1, r0
 801f2e0:	ea4f 2333 	mov.w	r3, r3, ror #8
 801f2e4:	fa92 f21e 	qadd16	r2, r2, lr
 801f2e8:	fa2f f383 	sxtb16	r3, r3
 801f2ec:	fa92 f213 	qadd16	r2, r2, r3
 801f2f0:	d1f1      	bne.n	801f2d6 <st_sssa8_ch_convolve_rank1upd+0x82>
 801f2f2:	f501 7000 	add.w	r0, r1, #512	; 0x200
 801f2f6:	b213      	sxth	r3, r2
 801f2f8:	4560      	cmp	r0, ip
 801f2fa:	eb03 4222 	add.w	r2, r3, r2, asr #16
 801f2fe:	4416      	add	r6, r2
 801f300:	d1e6      	bne.n	801f2d0 <st_sssa8_ch_convolve_rank1upd+0x7c>
 801f302:	9b01      	ldr	r3, [sp, #4]
 801f304:	18e1      	adds	r1, r4, r3
 801f306:	9c02      	ldr	r4, [sp, #8]
 801f308:	b374      	cbz	r4, 801f368 <st_sssa8_ch_convolve_rank1upd+0x114>
 801f30a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f30e:	2200      	movs	r2, #0
 801f310:	f851 3b04 	ldr.w	r3, [r1], #4
 801f314:	fa2f f083 	sxtb16	r0, r3
 801f318:	428c      	cmp	r4, r1
 801f31a:	ea4f 2333 	mov.w	r3, r3, ror #8
 801f31e:	fa92 f210 	qadd16	r2, r2, r0
 801f322:	fa2f f383 	sxtb16	r3, r3
 801f326:	fa92 f213 	qadd16	r2, r2, r3
 801f32a:	d1f1      	bne.n	801f310 <st_sssa8_ch_convolve_rank1upd+0xbc>
 801f32c:	b213      	sxth	r3, r2
 801f32e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 801f332:	441e      	add	r6, r3
 801f334:	b16d      	cbz	r5, 801f352 <st_sssa8_ch_convolve_rank1upd+0xfe>
 801f336:	f994 3000 	ldrsb.w	r3, [r4]
 801f33a:	441e      	add	r6, r3
 801f33c:	9b00      	ldr	r3, [sp, #0]
 801f33e:	b13b      	cbz	r3, 801f350 <st_sssa8_ch_convolve_rank1upd+0xfc>
 801f340:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801f344:	2d02      	cmp	r5, #2
 801f346:	441e      	add	r6, r3
 801f348:	d002      	beq.n	801f350 <st_sssa8_ch_convolve_rank1upd+0xfc>
 801f34a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 801f34e:	441e      	add	r6, r3
 801f350:	442c      	add	r4, r5
 801f352:	f858 3b04 	ldr.w	r3, [r8], #4
 801f356:	fb0b 3616 	mls	r6, fp, r6, r3
 801f35a:	45b8      	cmp	r8, r7
 801f35c:	f84a 6f04 	str.w	r6, [sl, #4]!
 801f360:	d1ad      	bne.n	801f2be <st_sssa8_ch_convolve_rank1upd+0x6a>
 801f362:	b005      	add	sp, #20
 801f364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f368:	460c      	mov	r4, r1
 801f36a:	e7e3      	b.n	801f334 <st_sssa8_ch_convolve_rank1upd+0xe0>
 801f36c:	4621      	mov	r1, r4
 801f36e:	2600      	movs	r6, #0
 801f370:	464c      	mov	r4, r9
 801f372:	e7c9      	b.n	801f308 <st_sssa8_ch_convolve_rank1upd+0xb4>

0801f374 <st_sssa8_fully_connected>:
 801f374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f378:	b097      	sub	sp, #92	; 0x5c
 801f37a:	460d      	mov	r5, r1
 801f37c:	4683      	mov	fp, r0
 801f37e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801f380:	9313      	str	r3, [sp, #76]	; 0x4c
 801f382:	6823      	ldr	r3, [r4, #0]
 801f384:	9203      	str	r2, [sp, #12]
 801f386:	9307      	str	r3, [sp, #28]
 801f388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f38a:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 801f38e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f392:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 801f396:	1e4a      	subs	r2, r1, #1
 801f398:	9104      	str	r1, [sp, #16]
 801f39a:	920d      	str	r2, [sp, #52]	; 0x34
 801f39c:	b292      	uxth	r2, r2
 801f39e:	2a14      	cmp	r2, #20
 801f3a0:	f200 81b3 	bhi.w	801f70a <st_sssa8_fully_connected+0x396>
 801f3a4:	2201      	movs	r2, #1
 801f3a6:	408b      	lsls	r3, r1
 801f3a8:	408a      	lsls	r2, r1
 801f3aa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801f3ae:	9308      	str	r3, [sp, #32]
 801f3b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	f000 81ae 	beq.w	801f714 <st_sssa8_fully_connected+0x3a0>
 801f3b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f3ba:	b2b3      	uxth	r3, r6
 801f3bc:	9600      	str	r6, [sp, #0]
 801f3be:	4658      	mov	r0, fp
 801f3c0:	0851      	lsrs	r1, r2, #1
 801f3c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 801f3c6:	9e03      	ldr	r6, [sp, #12]
 801f3c8:	460c      	mov	r4, r1
 801f3ca:	9115      	str	r1, [sp, #84]	; 0x54
 801f3cc:	4632      	mov	r2, r6
 801f3ce:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f3d0:	f001 fcc6 	bl	8020d60 <st_int8_reordered_no_shift_zero>
 801f3d4:	4621      	mov	r1, r4
 801f3d6:	2c00      	cmp	r4, #0
 801f3d8:	f000 8145 	beq.w	801f666 <st_sssa8_fully_connected+0x2f2>
 801f3dc:	4634      	mov	r4, r6
 801f3de:	f1a6 0310 	sub.w	r3, r6, #16
 801f3e2:	9e04      	ldr	r6, [sp, #16]
 801f3e4:	1e4a      	subs	r2, r1, #1
 801f3e6:	2001      	movs	r0, #1
 801f3e8:	091b      	lsrs	r3, r3, #4
 801f3ea:	1eb1      	subs	r1, r6, #2
 801f3ec:	b292      	uxth	r2, r2
 801f3ee:	3301      	adds	r3, #1
 801f3f0:	fa00 f101 	lsl.w	r1, r0, r1
 801f3f4:	9112      	str	r1, [sp, #72]	; 0x48
 801f3f6:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f3f8:	3110      	adds	r1, #16
 801f3fa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801f3fe:	920e      	str	r2, [sp, #56]	; 0x38
 801f400:	1ee2      	subs	r2, r4, #3
 801f402:	920f      	str	r2, [sp, #60]	; 0x3c
 801f404:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f406:	3208      	adds	r2, #8
 801f408:	9205      	str	r2, [sp, #20]
 801f40a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f40c:	3202      	adds	r2, #2
 801f40e:	9206      	str	r2, [sp, #24]
 801f410:	011a      	lsls	r2, r3, #4
 801f412:	9209      	str	r2, [sp, #36]	; 0x24
 801f414:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f416:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 801f41a:	9310      	str	r3, [sp, #64]	; 0x40
 801f41c:	1f23      	subs	r3, r4, #4
 801f41e:	9311      	str	r3, [sp, #68]	; 0x44
 801f420:	1b83      	subs	r3, r0, r6
 801f422:	9314      	str	r3, [sp, #80]	; 0x50
 801f424:	9a03      	ldr	r2, [sp, #12]
 801f426:	9b05      	ldr	r3, [sp, #20]
 801f428:	2a0f      	cmp	r2, #15
 801f42a:	eb05 0b02 	add.w	fp, r5, r2
 801f42e:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 801f432:	f340 8261 	ble.w	801f8f8 <st_sssa8_fully_connected+0x584>
 801f436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f438:	465c      	mov	r4, fp
 801f43a:	18ae      	adds	r6, r5, r2
 801f43c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f43e:	682f      	ldr	r7, [r5, #0]
 801f440:	f8d4 a000 	ldr.w	sl, [r4]
 801f444:	ea4f 2037 	mov.w	r0, r7, ror #8
 801f448:	f8d2 9000 	ldr.w	r9, [r2]
 801f44c:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 801f450:	fa2f f080 	sxtb16	r0, r0
 801f454:	fa2f fc8e 	sxtb16	ip, lr
 801f458:	fa2f f787 	sxtb16	r7, r7
 801f45c:	fa2f fe8a 	sxtb16	lr, sl
 801f460:	fb29 1107 	smlad	r1, r9, r7, r1
 801f464:	fb29 390e 	smlad	r9, r9, lr, r3
 801f468:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801f46c:	fb28 1100 	smlad	r1, r8, r0, r1
 801f470:	fb28 9e0c 	smlad	lr, r8, ip, r9
 801f474:	6868      	ldr	r0, [r5, #4]
 801f476:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801f47a:	ea4f 2330 	mov.w	r3, r0, ror #8
 801f47e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 801f482:	ea4f 2a39 	mov.w	sl, r9, ror #8
 801f486:	fa2f f383 	sxtb16	r3, r3
 801f48a:	fa2f f78a 	sxtb16	r7, sl
 801f48e:	fa2f f080 	sxtb16	r0, r0
 801f492:	fa2f fa89 	sxtb16	sl, r9
 801f496:	fb28 1000 	smlad	r0, r8, r0, r1
 801f49a:	fb28 e80a 	smlad	r8, r8, sl, lr
 801f49e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 801f4a2:	fb2c 0003 	smlad	r0, ip, r3, r0
 801f4a6:	fb2c 8a07 	smlad	sl, ip, r7, r8
 801f4aa:	68ab      	ldr	r3, [r5, #8]
 801f4ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
 801f4b0:	ea4f 2133 	mov.w	r1, r3, ror #8
 801f4b4:	f8d2 c010 	ldr.w	ip, [r2, #16]
 801f4b8:	ea4f 2e38 	mov.w	lr, r8, ror #8
 801f4bc:	fa2f f181 	sxtb16	r1, r1
 801f4c0:	fa2f f98e 	sxtb16	r9, lr
 801f4c4:	fa2f f383 	sxtb16	r3, r3
 801f4c8:	fa2f fe88 	sxtb16	lr, r8
 801f4cc:	fb2c 0303 	smlad	r3, ip, r3, r0
 801f4d0:	fb2c ac0e 	smlad	ip, ip, lr, sl
 801f4d4:	6957      	ldr	r7, [r2, #20]
 801f4d6:	fb27 3301 	smlad	r3, r7, r1, r3
 801f4da:	fb27 ce09 	smlad	lr, r7, r9, ip
 801f4de:	68e8      	ldr	r0, [r5, #12]
 801f4e0:	3410      	adds	r4, #16
 801f4e2:	f854 cc04 	ldr.w	ip, [r4, #-4]
 801f4e6:	3510      	adds	r5, #16
 801f4e8:	ea4f 2130 	mov.w	r1, r0, ror #8
 801f4ec:	6997      	ldr	r7, [r2, #24]
 801f4ee:	fa2f f881 	sxtb16	r8, r1
 801f4f2:	fa2f f180 	sxtb16	r1, r0
 801f4f6:	ea4f 203c 	mov.w	r0, ip, ror #8
 801f4fa:	fa2f fc8c 	sxtb16	ip, ip
 801f4fe:	fa2f f080 	sxtb16	r0, r0
 801f502:	fb27 3101 	smlad	r1, r7, r1, r3
 801f506:	fb27 e70c 	smlad	r7, r7, ip, lr
 801f50a:	69d3      	ldr	r3, [r2, #28]
 801f50c:	3220      	adds	r2, #32
 801f50e:	fb23 1108 	smlad	r1, r3, r8, r1
 801f512:	fb23 7300 	smlad	r3, r3, r0, r7
 801f516:	42b5      	cmp	r5, r6
 801f518:	d191      	bne.n	801f43e <st_sssa8_fully_connected+0xca>
 801f51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f51c:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 801f520:	4493      	add	fp, r2
 801f522:	4691      	mov	r9, r2
 801f524:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f526:	4591      	cmp	r9, r2
 801f528:	f280 81e4 	bge.w	801f8f4 <st_sssa8_fully_connected+0x580>
 801f52c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f52e:	4657      	mov	r7, sl
 801f530:	46d8      	mov	r8, fp
 801f532:	eba2 0209 	sub.w	r2, r2, r9
 801f536:	0892      	lsrs	r2, r2, #2
 801f538:	920c      	str	r2, [sp, #48]	; 0x30
 801f53a:	3201      	adds	r2, #1
 801f53c:	0090      	lsls	r0, r2, #2
 801f53e:	920b      	str	r2, [sp, #44]	; 0x2c
 801f540:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 801f544:	900a      	str	r0, [sp, #40]	; 0x28
 801f546:	f856 eb04 	ldr.w	lr, [r6], #4
 801f54a:	f858 0b04 	ldr.w	r0, [r8], #4
 801f54e:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 801f552:	683a      	ldr	r2, [r7, #0]
 801f554:	ea4f 2530 	mov.w	r5, r0, ror #8
 801f558:	fa2f fc8c 	sxtb16	ip, ip
 801f55c:	fa2f fe8e 	sxtb16	lr, lr
 801f560:	fa2f f585 	sxtb16	r5, r5
 801f564:	fa2f f080 	sxtb16	r0, r0
 801f568:	fb22 110e 	smlad	r1, r2, lr, r1
 801f56c:	fb22 3300 	smlad	r3, r2, r0, r3
 801f570:	687a      	ldr	r2, [r7, #4]
 801f572:	3708      	adds	r7, #8
 801f574:	fb22 110c 	smlad	r1, r2, ip, r1
 801f578:	fb22 3305 	smlad	r3, r2, r5, r3
 801f57c:	42a6      	cmp	r6, r4
 801f57e:	d1e2      	bne.n	801f546 <st_sssa8_fully_connected+0x1d2>
 801f580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f582:	f109 0904 	add.w	r9, r9, #4
 801f586:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 801f58a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f58c:	4493      	add	fp, r2
 801f58e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f590:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 801f594:	9d03      	ldr	r5, [sp, #12]
 801f596:	454d      	cmp	r5, r9
 801f598:	dd37      	ble.n	801f60a <st_sssa8_fully_connected+0x296>
 801f59a:	f9ba 2000 	ldrsh.w	r2, [sl]
 801f59e:	f994 0000 	ldrsb.w	r0, [r4]
 801f5a2:	fb12 1100 	smlabb	r1, r2, r0, r1
 801f5a6:	f99b 0000 	ldrsb.w	r0, [fp]
 801f5aa:	fb12 3300 	smlabb	r3, r2, r0, r3
 801f5ae:	f109 0201 	add.w	r2, r9, #1
 801f5b2:	42aa      	cmp	r2, r5
 801f5b4:	da25      	bge.n	801f602 <st_sssa8_fully_connected+0x28e>
 801f5b6:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 801f5ba:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801f5be:	fb12 1100 	smlabb	r1, r2, r0, r1
 801f5c2:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 801f5c6:	fb12 3300 	smlabb	r3, r2, r0, r3
 801f5ca:	f109 0202 	add.w	r2, r9, #2
 801f5ce:	42aa      	cmp	r2, r5
 801f5d0:	da17      	bge.n	801f602 <st_sssa8_fully_connected+0x28e>
 801f5d2:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801f5d6:	f994 0002 	ldrsb.w	r0, [r4, #2]
 801f5da:	fb12 1100 	smlabb	r1, r2, r0, r1
 801f5de:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 801f5e2:	fb12 3300 	smlabb	r3, r2, r0, r3
 801f5e6:	f109 0203 	add.w	r2, r9, #3
 801f5ea:	4295      	cmp	r5, r2
 801f5ec:	dd09      	ble.n	801f602 <st_sssa8_fully_connected+0x28e>
 801f5ee:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 801f5f2:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 801f5f6:	fb12 3300 	smlabb	r3, r2, r0, r3
 801f5fa:	f994 0003 	ldrsb.w	r0, [r4, #3]
 801f5fe:	fb12 1100 	smlabb	r1, r2, r0, r1
 801f602:	9a03      	ldr	r2, [sp, #12]
 801f604:	eba2 0909 	sub.w	r9, r2, r9
 801f608:	444c      	add	r4, r9
 801f60a:	9a04      	ldr	r2, [sp, #16]
 801f60c:	2a15      	cmp	r2, #21
 801f60e:	f340 8141 	ble.w	801f894 <st_sssa8_fully_connected+0x520>
 801f612:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f614:	9a07      	ldr	r2, [sp, #28]
 801f616:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f618:	fb51 0102 	smmla	r1, r1, r2, r0
 801f61c:	fb53 0302 	smmla	r3, r3, r2, r0
 801f620:	4129      	asrs	r1, r5
 801f622:	9a08      	ldr	r2, [sp, #32]
 801f624:	4411      	add	r1, r2
 801f626:	f301 0107 	ssat	r1, #8, r1
 801f62a:	9806      	ldr	r0, [sp, #24]
 801f62c:	412b      	asrs	r3, r5
 801f62e:	f800 1c02 	strb.w	r1, [r0, #-2]
 801f632:	4413      	add	r3, r2
 801f634:	f303 0307 	ssat	r3, #8, r3
 801f638:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f63c:	9a03      	ldr	r2, [sp, #12]
 801f63e:	9b05      	ldr	r3, [sp, #20]
 801f640:	18a5      	adds	r5, r4, r2
 801f642:	9a06      	ldr	r2, [sp, #24]
 801f644:	3308      	adds	r3, #8
 801f646:	3202      	adds	r2, #2
 801f648:	9305      	str	r3, [sp, #20]
 801f64a:	9206      	str	r2, [sp, #24]
 801f64c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f64e:	4293      	cmp	r3, r2
 801f650:	f47f aee8 	bne.w	801f424 <st_sssa8_fully_connected+0xb0>
 801f654:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f658:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801f65c:	9225      	str	r2, [sp, #148]	; 0x94
 801f65e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f664:	9324      	str	r3, [sp, #144]	; 0x90
 801f666:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f668:	07db      	lsls	r3, r3, #31
 801f66a:	d54a      	bpl.n	801f702 <st_sssa8_fully_connected+0x38e>
 801f66c:	9a03      	ldr	r2, [sp, #12]
 801f66e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f670:	0897      	lsrs	r7, r2, #2
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	f000 8176 	beq.w	801f964 <st_sssa8_fully_connected+0x5f0>
 801f678:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 801f67c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f67e:	f855 2b04 	ldr.w	r2, [r5], #4
 801f682:	6801      	ldr	r1, [r0, #0]
 801f684:	fa2f f482 	sxtb16	r4, r2
 801f688:	ea4f 2232 	mov.w	r2, r2, ror #8
 801f68c:	fa2f f282 	sxtb16	r2, r2
 801f690:	fb21 3304 	smlad	r3, r1, r4, r3
 801f694:	6841      	ldr	r1, [r0, #4]
 801f696:	3008      	adds	r0, #8
 801f698:	fb21 3302 	smlad	r3, r1, r2, r3
 801f69c:	42b5      	cmp	r5, r6
 801f69e:	d1ee      	bne.n	801f67e <st_sssa8_fully_connected+0x30a>
 801f6a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f6a2:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 801f6a6:	9226      	str	r2, [sp, #152]	; 0x98
 801f6a8:	9a03      	ldr	r2, [sp, #12]
 801f6aa:	f012 0203 	ands.w	r2, r2, #3
 801f6ae:	d016      	beq.n	801f6de <st_sssa8_fully_connected+0x36a>
 801f6b0:	3a01      	subs	r2, #1
 801f6b2:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f6b4:	f996 1000 	ldrsb.w	r1, [r6]
 801f6b8:	8800      	ldrh	r0, [r0, #0]
 801f6ba:	b292      	uxth	r2, r2
 801f6bc:	fb10 3301 	smlabb	r3, r0, r1, r3
 801f6c0:	b16a      	cbz	r2, 801f6de <st_sssa8_fully_connected+0x36a>
 801f6c2:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f6c4:	2a01      	cmp	r2, #1
 801f6c6:	f996 1001 	ldrsb.w	r1, [r6, #1]
 801f6ca:	8840      	ldrh	r0, [r0, #2]
 801f6cc:	fb10 3301 	smlabb	r3, r0, r1, r3
 801f6d0:	d005      	beq.n	801f6de <st_sssa8_fully_connected+0x36a>
 801f6d2:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f6d4:	f996 2002 	ldrsb.w	r2, [r6, #2]
 801f6d8:	8889      	ldrh	r1, [r1, #4]
 801f6da:	fb11 3302 	smlabb	r3, r1, r2, r3
 801f6de:	9a04      	ldr	r2, [sp, #16]
 801f6e0:	2a15      	cmp	r2, #21
 801f6e2:	f340 811d 	ble.w	801f920 <st_sssa8_fully_connected+0x5ac>
 801f6e6:	1e91      	subs	r1, r2, #2
 801f6e8:	2201      	movs	r2, #1
 801f6ea:	408a      	lsls	r2, r1
 801f6ec:	9907      	ldr	r1, [sp, #28]
 801f6ee:	fb53 2301 	smmla	r3, r3, r1, r2
 801f6f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f6f4:	4113      	asrs	r3, r2
 801f6f6:	9a08      	ldr	r2, [sp, #32]
 801f6f8:	4413      	add	r3, r2
 801f6fa:	f303 0307 	ssat	r3, #8, r3
 801f6fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f700:	7013      	strb	r3, [r2, #0]
 801f702:	2000      	movs	r0, #0
 801f704:	b017      	add	sp, #92	; 0x5c
 801f706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f70a:	9308      	str	r3, [sp, #32]
 801f70c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f70e:	2b00      	cmp	r3, #0
 801f710:	f47f ae52 	bne.w	801f3b8 <st_sssa8_fully_connected+0x44>
 801f714:	4273      	negs	r3, r6
 801f716:	b298      	uxth	r0, r3
 801f718:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 801f71c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f71e:	2b00      	cmp	r3, #0
 801f720:	d0ef      	beq.n	801f702 <st_sssa8_fully_connected+0x38e>
 801f722:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f724:	3301      	adds	r3, #1
 801f726:	9903      	ldr	r1, [sp, #12]
 801f728:	b236      	sxth	r6, r6
 801f72a:	18d3      	adds	r3, r2, r3
 801f72c:	9c04      	ldr	r4, [sp, #16]
 801f72e:	f1a1 0810 	sub.w	r8, r1, #16
 801f732:	f102 0e01 	add.w	lr, r2, #1
 801f736:	9305      	str	r3, [sp, #20]
 801f738:	2201      	movs	r2, #1
 801f73a:	f028 080f 	bic.w	r8, r8, #15
 801f73e:	1ea3      	subs	r3, r4, #2
 801f740:	468c      	mov	ip, r1
 801f742:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 801f746:	fa02 f303 	lsl.w	r3, r2, r3
 801f74a:	f108 0810 	add.w	r8, r8, #16
 801f74e:	f1bc 0f0f 	cmp.w	ip, #15
 801f752:	f8cd b00c 	str.w	fp, [sp, #12]
 801f756:	9309      	str	r3, [sp, #36]	; 0x24
 801f758:	eb0b 0308 	add.w	r3, fp, r8
 801f75c:	9306      	str	r3, [sp, #24]
 801f75e:	eba2 0304 	sub.w	r3, r2, r4
 801f762:	930a      	str	r3, [sp, #40]	; 0x28
 801f764:	f859 3b04 	ldr.w	r3, [r9], #4
 801f768:	dd7e      	ble.n	801f868 <st_sssa8_fully_connected+0x4f4>
 801f76a:	eb05 0708 	add.w	r7, r5, r8
 801f76e:	462a      	mov	r2, r5
 801f770:	9d03      	ldr	r5, [sp, #12]
 801f772:	6811      	ldr	r1, [r2, #0]
 801f774:	682c      	ldr	r4, [r5, #0]
 801f776:	fa2f fb81 	sxtb16	fp, r1
 801f77a:	ea4f 2a34 	mov.w	sl, r4, ror #8
 801f77e:	ea4f 2131 	mov.w	r1, r1, ror #8
 801f782:	fa20 fa8a 	sxtab16	sl, r0, sl
 801f786:	fa2f f181 	sxtb16	r1, r1
 801f78a:	fa20 f484 	sxtab16	r4, r0, r4
 801f78e:	fb24 340b 	smlad	r4, r4, fp, r3
 801f792:	fb2a 4b01 	smlad	fp, sl, r1, r4
 801f796:	6851      	ldr	r1, [r2, #4]
 801f798:	f8d5 a004 	ldr.w	sl, [r5, #4]
 801f79c:	fa2f f481 	sxtb16	r4, r1
 801f7a0:	ea4f 233a 	mov.w	r3, sl, ror #8
 801f7a4:	ea4f 2131 	mov.w	r1, r1, ror #8
 801f7a8:	fa20 f383 	sxtab16	r3, r0, r3
 801f7ac:	fa2f f181 	sxtb16	r1, r1
 801f7b0:	fa20 fa8a 	sxtab16	sl, r0, sl
 801f7b4:	fb2a ba04 	smlad	sl, sl, r4, fp
 801f7b8:	fb23 a401 	smlad	r4, r3, r1, sl
 801f7bc:	6891      	ldr	r1, [r2, #8]
 801f7be:	68ab      	ldr	r3, [r5, #8]
 801f7c0:	fa2f fb81 	sxtb16	fp, r1
 801f7c4:	ea4f 2a33 	mov.w	sl, r3, ror #8
 801f7c8:	ea4f 2131 	mov.w	r1, r1, ror #8
 801f7cc:	fa20 fa8a 	sxtab16	sl, r0, sl
 801f7d0:	fa2f f181 	sxtb16	r1, r1
 801f7d4:	fa20 f383 	sxtab16	r3, r0, r3
 801f7d8:	fb23 430b 	smlad	r3, r3, fp, r4
 801f7dc:	fb2a 3301 	smlad	r3, sl, r1, r3
 801f7e0:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 801f7e4:	3510      	adds	r5, #16
 801f7e6:	f855 1c04 	ldr.w	r1, [r5, #-4]
 801f7ea:	3210      	adds	r2, #16
 801f7ec:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 801f7f0:	ea4f 2431 	mov.w	r4, r1, ror #8
 801f7f4:	fa2f fa8a 	sxtb16	sl, sl
 801f7f8:	fa2f fb8b 	sxtb16	fp, fp
 801f7fc:	fa20 f181 	sxtab16	r1, r0, r1
 801f800:	fa20 f484 	sxtab16	r4, r0, r4
 801f804:	fb21 330a 	smlad	r3, r1, sl, r3
 801f808:	fb24 330b 	smlad	r3, r4, fp, r3
 801f80c:	4297      	cmp	r7, r2
 801f80e:	d1b0      	bne.n	801f772 <st_sssa8_fully_connected+0x3fe>
 801f810:	4645      	mov	r5, r8
 801f812:	9f06      	ldr	r7, [sp, #24]
 801f814:	45ac      	cmp	ip, r5
 801f816:	dd2c      	ble.n	801f872 <st_sssa8_fully_connected+0x4fe>
 801f818:	ebac 0505 	sub.w	r5, ip, r5
 801f81c:	4415      	add	r5, r2
 801f81e:	4611      	mov	r1, r2
 801f820:	f917 4b01 	ldrsb.w	r4, [r7], #1
 801f824:	3201      	adds	r2, #1
 801f826:	7809      	ldrb	r1, [r1, #0]
 801f828:	1ba4      	subs	r4, r4, r6
 801f82a:	42aa      	cmp	r2, r5
 801f82c:	b249      	sxtb	r1, r1
 801f82e:	fb14 3301 	smlabb	r3, r4, r1, r3
 801f832:	d1f4      	bne.n	801f81e <st_sssa8_fully_connected+0x4aa>
 801f834:	9a04      	ldr	r2, [sp, #16]
 801f836:	2a15      	cmp	r2, #21
 801f838:	dd1f      	ble.n	801f87a <st_sssa8_fully_connected+0x506>
 801f83a:	9a07      	ldr	r2, [sp, #28]
 801f83c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f83e:	fb53 1302 	smmla	r3, r3, r2, r1
 801f842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f844:	4113      	asrs	r3, r2
 801f846:	9a08      	ldr	r2, [sp, #32]
 801f848:	4413      	add	r3, r2
 801f84a:	f303 0307 	ssat	r3, #8, r3
 801f84e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 801f852:	f10e 0e01 	add.w	lr, lr, #1
 801f856:	9b05      	ldr	r3, [sp, #20]
 801f858:	459e      	cmp	lr, r3
 801f85a:	f43f af52 	beq.w	801f702 <st_sssa8_fully_connected+0x38e>
 801f85e:	f1bc 0f0f 	cmp.w	ip, #15
 801f862:	f859 3b04 	ldr.w	r3, [r9], #4
 801f866:	dc80      	bgt.n	801f76a <st_sssa8_fully_connected+0x3f6>
 801f868:	462a      	mov	r2, r5
 801f86a:	2500      	movs	r5, #0
 801f86c:	9f03      	ldr	r7, [sp, #12]
 801f86e:	45ac      	cmp	ip, r5
 801f870:	dcd2      	bgt.n	801f818 <st_sssa8_fully_connected+0x4a4>
 801f872:	4615      	mov	r5, r2
 801f874:	9a04      	ldr	r2, [sp, #16]
 801f876:	2a15      	cmp	r2, #21
 801f878:	dcdf      	bgt.n	801f83a <st_sssa8_fully_connected+0x4c6>
 801f87a:	2a00      	cmp	r2, #0
 801f87c:	dd42      	ble.n	801f904 <st_sssa8_fully_connected+0x590>
 801f87e:	005b      	lsls	r3, r3, #1
 801f880:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 801f884:	fb53 4301 	smmla	r3, r3, r1, r4
 801f888:	4113      	asrs	r3, r2
 801f88a:	f303 0307 	ssat	r3, #8, r3
 801f88e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 801f892:	e7de      	b.n	801f852 <st_sssa8_fully_connected+0x4de>
 801f894:	2a00      	cmp	r2, #0
 801f896:	dd13      	ble.n	801f8c0 <st_sssa8_fully_connected+0x54c>
 801f898:	0049      	lsls	r1, r1, #1
 801f89a:	005b      	lsls	r3, r3, #1
 801f89c:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 801f8a0:	fb51 5100 	smmla	r1, r1, r0, r5
 801f8a4:	fb53 5300 	smmla	r3, r3, r0, r5
 801f8a8:	4111      	asrs	r1, r2
 801f8aa:	f301 0107 	ssat	r1, #8, r1
 801f8ae:	9806      	ldr	r0, [sp, #24]
 801f8b0:	4113      	asrs	r3, r2
 801f8b2:	f800 1c02 	strb.w	r1, [r0, #-2]
 801f8b6:	f303 0307 	ssat	r3, #8, r3
 801f8ba:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f8be:	e6bd      	b.n	801f63c <st_sssa8_fully_connected+0x2c8>
 801f8c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f8c2:	fa01 f200 	lsl.w	r2, r1, r0
 801f8c6:	f302 021f 	ssat	r2, #32, r2
 801f8ca:	9907      	ldr	r1, [sp, #28]
 801f8cc:	fb52 f211 	smmulr	r2, r2, r1
 801f8d0:	4083      	lsls	r3, r0
 801f8d2:	f303 031f 	ssat	r3, #32, r3
 801f8d6:	fb53 f311 	smmulr	r3, r3, r1
 801f8da:	9908      	ldr	r1, [sp, #32]
 801f8dc:	440a      	add	r2, r1
 801f8de:	f302 0207 	ssat	r2, #8, r2
 801f8e2:	9806      	ldr	r0, [sp, #24]
 801f8e4:	440b      	add	r3, r1
 801f8e6:	f800 2c02 	strb.w	r2, [r0, #-2]
 801f8ea:	f303 0307 	ssat	r3, #8, r3
 801f8ee:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f8f2:	e6a3      	b.n	801f63c <st_sssa8_fully_connected+0x2c8>
 801f8f4:	4634      	mov	r4, r6
 801f8f6:	e64d      	b.n	801f594 <st_sssa8_fully_connected+0x220>
 801f8f8:	462e      	mov	r6, r5
 801f8fa:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 801f8fe:	f04f 0900 	mov.w	r9, #0
 801f902:	e60f      	b.n	801f524 <st_sssa8_fully_connected+0x1b0>
 801f904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f906:	4093      	lsls	r3, r2
 801f908:	f303 031f 	ssat	r3, #32, r3
 801f90c:	9a07      	ldr	r2, [sp, #28]
 801f90e:	fb53 f312 	smmulr	r3, r3, r2
 801f912:	9a08      	ldr	r2, [sp, #32]
 801f914:	4413      	add	r3, r2
 801f916:	f303 0307 	ssat	r3, #8, r3
 801f91a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 801f91e:	e798      	b.n	801f852 <st_sssa8_fully_connected+0x4de>
 801f920:	2a00      	cmp	r2, #0
 801f922:	dd0d      	ble.n	801f940 <st_sssa8_fully_connected+0x5cc>
 801f924:	005b      	lsls	r3, r3, #1
 801f926:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 801f92a:	fb53 0301 	smmla	r3, r3, r1, r0
 801f92e:	4113      	asrs	r3, r2
 801f930:	f303 0307 	ssat	r3, #8, r3
 801f934:	2000      	movs	r0, #0
 801f936:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f938:	7013      	strb	r3, [r2, #0]
 801f93a:	b017      	add	sp, #92	; 0x5c
 801f93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f940:	f1c2 0201 	rsb	r2, r2, #1
 801f944:	4093      	lsls	r3, r2
 801f946:	f303 031f 	ssat	r3, #32, r3
 801f94a:	9a07      	ldr	r2, [sp, #28]
 801f94c:	fb53 f312 	smmulr	r3, r3, r2
 801f950:	9a08      	ldr	r2, [sp, #32]
 801f952:	441a      	add	r2, r3
 801f954:	f302 0307 	ssat	r3, #8, r2
 801f958:	2000      	movs	r0, #0
 801f95a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f95c:	7013      	strb	r3, [r2, #0]
 801f95e:	b017      	add	sp, #92	; 0x5c
 801f960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f964:	462e      	mov	r6, r5
 801f966:	e69f      	b.n	801f6a8 <st_sssa8_fully_connected+0x334>

0801f968 <ai_padding_opt_init>:
 801f968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f96c:	2700      	movs	r7, #0
 801f96e:	9c07      	ldr	r4, [sp, #28]
 801f970:	e9c0 7700 	strd	r7, r7, [r0]
 801f974:	6087      	str	r7, [r0, #8]
 801f976:	46b9      	mov	r9, r7
 801f978:	690d      	ldr	r5, [r1, #16]
 801f97a:	f1c5 0c00 	rsb	ip, r5, #0
 801f97e:	689d      	ldr	r5, [r3, #8]
 801f980:	42bd      	cmp	r5, r7
 801f982:	dd1c      	ble.n	801f9be <ai_padding_opt_init+0x56>
 801f984:	463e      	mov	r6, r7
 801f986:	46be      	mov	lr, r7
 801f988:	e010      	b.n	801f9ac <ai_padding_opt_init+0x44>
 801f98a:	6895      	ldr	r5, [r2, #8]
 801f98c:	eba5 080c 	sub.w	r8, r5, ip
 801f990:	68a5      	ldr	r5, [r4, #8]
 801f992:	45a8      	cmp	r8, r5
 801f994:	da10      	bge.n	801f9b8 <ai_padding_opt_init+0x50>
 801f996:	f109 0901 	add.w	r9, r9, #1
 801f99a:	f8c0 9008 	str.w	r9, [r0, #8]
 801f99e:	688d      	ldr	r5, [r1, #8]
 801f9a0:	f10e 0e01 	add.w	lr, lr, #1
 801f9a4:	44ac      	add	ip, r5
 801f9a6:	689d      	ldr	r5, [r3, #8]
 801f9a8:	4575      	cmp	r5, lr
 801f9aa:	dd09      	ble.n	801f9c0 <ai_padding_opt_init+0x58>
 801f9ac:	f1bc 0f00 	cmp.w	ip, #0
 801f9b0:	daeb      	bge.n	801f98a <ai_padding_opt_init+0x22>
 801f9b2:	3601      	adds	r6, #1
 801f9b4:	6006      	str	r6, [r0, #0]
 801f9b6:	e7f2      	b.n	801f99e <ai_padding_opt_init+0x36>
 801f9b8:	3701      	adds	r7, #1
 801f9ba:	6047      	str	r7, [r0, #4]
 801f9bc:	e7ef      	b.n	801f99e <ai_padding_opt_init+0x36>
 801f9be:	463e      	mov	r6, r7
 801f9c0:	2500      	movs	r5, #0
 801f9c2:	f8c0 9014 	str.w	r9, [r0, #20]
 801f9c6:	e9c0 6703 	strd	r6, r7, [r0, #12]
 801f9ca:	e9c0 5506 	strd	r5, r5, [r0, #24]
 801f9ce:	6205      	str	r5, [r0, #32]
 801f9d0:	694e      	ldr	r6, [r1, #20]
 801f9d2:	f1c6 0c00 	rsb	ip, r6, #0
 801f9d6:	685e      	ldr	r6, [r3, #4]
 801f9d8:	42ae      	cmp	r6, r5
 801f9da:	dd1c      	ble.n	801fa16 <ai_padding_opt_init+0xae>
 801f9dc:	46ae      	mov	lr, r5
 801f9de:	e00f      	b.n	801fa00 <ai_padding_opt_init+0x98>
 801f9e0:	6855      	ldr	r5, [r2, #4]
 801f9e2:	6866      	ldr	r6, [r4, #4]
 801f9e4:	eba5 050c 	sub.w	r5, r5, ip
 801f9e8:	42b5      	cmp	r5, r6
 801f9ea:	da10      	bge.n	801fa0e <ai_padding_opt_init+0xa6>
 801f9ec:	6a05      	ldr	r5, [r0, #32]
 801f9ee:	3501      	adds	r5, #1
 801f9f0:	6205      	str	r5, [r0, #32]
 801f9f2:	68cd      	ldr	r5, [r1, #12]
 801f9f4:	f10e 0e01 	add.w	lr, lr, #1
 801f9f8:	44ac      	add	ip, r5
 801f9fa:	685d      	ldr	r5, [r3, #4]
 801f9fc:	4575      	cmp	r5, lr
 801f9fe:	dd0a      	ble.n	801fa16 <ai_padding_opt_init+0xae>
 801fa00:	f1bc 0f00 	cmp.w	ip, #0
 801fa04:	daec      	bge.n	801f9e0 <ai_padding_opt_init+0x78>
 801fa06:	6985      	ldr	r5, [r0, #24]
 801fa08:	3501      	adds	r5, #1
 801fa0a:	6185      	str	r5, [r0, #24]
 801fa0c:	e7f1      	b.n	801f9f2 <ai_padding_opt_init+0x8a>
 801fa0e:	69c5      	ldr	r5, [r0, #28]
 801fa10:	3501      	adds	r5, #1
 801fa12:	61c5      	str	r5, [r0, #28]
 801fa14:	e7ed      	b.n	801f9f2 <ai_padding_opt_init+0x8a>
 801fa16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa1a:	bf00      	nop

0801fa1c <ai_padding_opt_phase1>:
 801fa1c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 801fa20:	b923      	cbnz	r3, 801fa2c <ai_padding_opt_phase1+0x10>
 801fa22:	b17a      	cbz	r2, 801fa44 <ai_padding_opt_phase1+0x28>
 801fa24:	3a01      	subs	r2, #1
 801fa26:	8483      	strh	r3, [r0, #36]	; 0x24
 801fa28:	61c2      	str	r2, [r0, #28]
 801fa2a:	e004      	b.n	801fa36 <ai_padding_opt_phase1+0x1a>
 801fa2c:	b152      	cbz	r2, 801fa44 <ai_padding_opt_phase1+0x28>
 801fa2e:	2201      	movs	r2, #1
 801fa30:	3b01      	subs	r3, #1
 801fa32:	8482      	strh	r2, [r0, #36]	; 0x24
 801fa34:	6183      	str	r3, [r0, #24]
 801fa36:	68c3      	ldr	r3, [r0, #12]
 801fa38:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 801fa3c:	6003      	str	r3, [r0, #0]
 801fa3e:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801fa42:	4770      	bx	lr
 801fa44:	6a03      	ldr	r3, [r0, #32]
 801fa46:	2201      	movs	r2, #1
 801fa48:	3b01      	subs	r3, #1
 801fa4a:	8482      	strh	r2, [r0, #36]	; 0x24
 801fa4c:	6203      	str	r3, [r0, #32]
 801fa4e:	e7f2      	b.n	801fa36 <ai_padding_opt_phase1+0x1a>

0801fa50 <st_int8_to16_dual>:
 801fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa54:	b08b      	sub	sp, #44	; 0x2c
 801fa56:	4692      	mov	sl, r2
 801fa58:	468b      	mov	fp, r1
 801fa5a:	eb00 0902 	add.w	r9, r0, r2
 801fa5e:	9309      	str	r3, [sp, #36]	; 0x24
 801fa60:	085b      	lsrs	r3, r3, #1
 801fa62:	9302      	str	r3, [sp, #8]
 801fa64:	f000 810d 	beq.w	801fc82 <st_int8_to16_dual+0x232>
 801fa68:	3a10      	subs	r2, #16
 801fa6a:	f1aa 0304 	sub.w	r3, sl, #4
 801fa6e:	f8cd a004 	str.w	sl, [sp, #4]
 801fa72:	9207      	str	r2, [sp, #28]
 801fa74:	0912      	lsrs	r2, r2, #4
 801fa76:	9306      	str	r3, [sp, #24]
 801fa78:	3201      	adds	r2, #1
 801fa7a:	4ba4      	ldr	r3, [pc, #656]	; (801fd0c <st_int8_to16_dual+0x2bc>)
 801fa7c:	0111      	lsls	r1, r2, #4
 801fa7e:	0192      	lsls	r2, r2, #6
 801fa80:	9103      	str	r1, [sp, #12]
 801fa82:	9208      	str	r2, [sp, #32]
 801fa84:	9a07      	ldr	r2, [sp, #28]
 801fa86:	2a00      	cmp	r2, #0
 801fa88:	f2c0 8131 	blt.w	801fcee <st_int8_to16_dual+0x29e>
 801fa8c:	9a03      	ldr	r2, [sp, #12]
 801fa8e:	464d      	mov	r5, r9
 801fa90:	1886      	adds	r6, r0, r2
 801fa92:	465a      	mov	r2, fp
 801fa94:	f8d0 c000 	ldr.w	ip, [r0]
 801fa98:	3010      	adds	r0, #16
 801fa9a:	fa2f f49c 	sxtb16	r4, ip, ror #8
 801fa9e:	fa2f fc8c 	sxtb16	ip, ip
 801faa2:	fa1f fe8c 	uxth.w	lr, ip
 801faa6:	682f      	ldr	r7, [r5, #0]
 801faa8:	fa2f f197 	sxtb16	r1, r7, ror #8
 801faac:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 801fab0:	401c      	ands	r4, r3
 801fab2:	fa2f f787 	sxtb16	r7, r7
 801fab6:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 801faba:	f8c2 e000 	str.w	lr, [r2]
 801fabe:	3510      	adds	r5, #16
 801fac0:	3240      	adds	r2, #64	; 0x40
 801fac2:	f842 4c38 	str.w	r4, [r2, #-56]
 801fac6:	b2bc      	uxth	r4, r7
 801fac8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801facc:	4019      	ands	r1, r3
 801face:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 801fad2:	f842 4c3c 	str.w	r4, [r2, #-60]
 801fad6:	f842 1c34 	str.w	r1, [r2, #-52]
 801fada:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 801fade:	4286      	cmp	r6, r0
 801fae0:	fa2f f49c 	sxtb16	r4, ip, ror #8
 801fae4:	fa2f fc8c 	sxtb16	ip, ip
 801fae8:	fa1f fe8c 	uxth.w	lr, ip
 801faec:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 801faf0:	fa2f f197 	sxtb16	r1, r7, ror #8
 801faf4:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 801faf8:	ea04 0403 	and.w	r4, r4, r3
 801fafc:	fa2f f787 	sxtb16	r7, r7
 801fb00:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 801fb04:	f842 ec30 	str.w	lr, [r2, #-48]
 801fb08:	f842 4c28 	str.w	r4, [r2, #-40]
 801fb0c:	b2bc      	uxth	r4, r7
 801fb0e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801fb12:	ea01 0103 	and.w	r1, r1, r3
 801fb16:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 801fb1a:	f842 4c2c 	str.w	r4, [r2, #-44]
 801fb1e:	f842 1c24 	str.w	r1, [r2, #-36]
 801fb22:	f850 cc08 	ldr.w	ip, [r0, #-8]
 801fb26:	fa2f f49c 	sxtb16	r4, ip, ror #8
 801fb2a:	fa2f fc8c 	sxtb16	ip, ip
 801fb2e:	fa1f fe8c 	uxth.w	lr, ip
 801fb32:	f855 7c08 	ldr.w	r7, [r5, #-8]
 801fb36:	fa2f f197 	sxtb16	r1, r7, ror #8
 801fb3a:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 801fb3e:	ea04 0403 	and.w	r4, r4, r3
 801fb42:	fa2f f787 	sxtb16	r7, r7
 801fb46:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 801fb4a:	f842 ec20 	str.w	lr, [r2, #-32]
 801fb4e:	f842 4c18 	str.w	r4, [r2, #-24]
 801fb52:	b2bc      	uxth	r4, r7
 801fb54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801fb58:	ea01 0103 	and.w	r1, r1, r3
 801fb5c:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 801fb60:	f842 4c1c 	str.w	r4, [r2, #-28]
 801fb64:	f842 1c14 	str.w	r1, [r2, #-20]
 801fb68:	f850 cc04 	ldr.w	ip, [r0, #-4]
 801fb6c:	fa2f f49c 	sxtb16	r4, ip, ror #8
 801fb70:	fa2f fc8c 	sxtb16	ip, ip
 801fb74:	fa1f fe8c 	uxth.w	lr, ip
 801fb78:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801fb7c:	fa2f f197 	sxtb16	r1, r7, ror #8
 801fb80:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 801fb84:	ea04 0403 	and.w	r4, r4, r3
 801fb88:	fa2f f787 	sxtb16	r7, r7
 801fb8c:	ea44 441c 	orr.w	r4, r4, ip, lsr #16
 801fb90:	f842 ec10 	str.w	lr, [r2, #-16]
 801fb94:	f842 4c08 	str.w	r4, [r2, #-8]
 801fb98:	b2bc      	uxth	r4, r7
 801fb9a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801fb9e:	ea01 0103 	and.w	r1, r1, r3
 801fba2:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 801fba6:	f842 4c0c 	str.w	r4, [r2, #-12]
 801fbaa:	f842 1c04 	str.w	r1, [r2, #-4]
 801fbae:	f47f af71 	bne.w	801fa94 <st_int8_to16_dual+0x44>
 801fbb2:	9a08      	ldr	r2, [sp, #32]
 801fbb4:	4493      	add	fp, r2
 801fbb6:	9a03      	ldr	r2, [sp, #12]
 801fbb8:	4690      	mov	r8, r2
 801fbba:	4491      	add	r9, r2
 801fbbc:	9a06      	ldr	r2, [sp, #24]
 801fbbe:	4542      	cmp	r2, r8
 801fbc0:	f2c0 809b 	blt.w	801fcfa <st_int8_to16_dual+0x2aa>
 801fbc4:	eba2 0a08 	sub.w	sl, r2, r8
 801fbc8:	46ce      	mov	lr, r9
 801fbca:	465c      	mov	r4, fp
 801fbcc:	ea4f 029a 	mov.w	r2, sl, lsr #2
 801fbd0:	f102 0a01 	add.w	sl, r2, #1
 801fbd4:	9204      	str	r2, [sp, #16]
 801fbd6:	eb00 078a 	add.w	r7, r0, sl, lsl #2
 801fbda:	ea4f 028a 	mov.w	r2, sl, lsl #2
 801fbde:	9205      	str	r2, [sp, #20]
 801fbe0:	f850 6b04 	ldr.w	r6, [r0], #4
 801fbe4:	3410      	adds	r4, #16
 801fbe6:	fa2f f196 	sxtb16	r1, r6, ror #8
 801fbea:	fa2f f686 	sxtb16	r6, r6
 801fbee:	fa1f fc86 	uxth.w	ip, r6
 801fbf2:	f85e 5b04 	ldr.w	r5, [lr], #4
 801fbf6:	fa2f f295 	sxtb16	r2, r5, ror #8
 801fbfa:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 801fbfe:	4019      	ands	r1, r3
 801fc00:	fa2f f585 	sxtb16	r5, r5
 801fc04:	ea41 4116 	orr.w	r1, r1, r6, lsr #16
 801fc08:	42b8      	cmp	r0, r7
 801fc0a:	f844 cc10 	str.w	ip, [r4, #-16]
 801fc0e:	f844 1c08 	str.w	r1, [r4, #-8]
 801fc12:	b2a9      	uxth	r1, r5
 801fc14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801fc18:	ea02 0203 	and.w	r2, r2, r3
 801fc1c:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
 801fc20:	f844 1c0c 	str.w	r1, [r4, #-12]
 801fc24:	f844 2c04 	str.w	r2, [r4, #-4]
 801fc28:	d1da      	bne.n	801fbe0 <st_int8_to16_dual+0x190>
 801fc2a:	9a05      	ldr	r2, [sp, #20]
 801fc2c:	f108 0804 	add.w	r8, r8, #4
 801fc30:	eb0b 1b0a 	add.w	fp, fp, sl, lsl #4
 801fc34:	4491      	add	r9, r2
 801fc36:	9a04      	ldr	r2, [sp, #16]
 801fc38:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 801fc3c:	9a01      	ldr	r2, [sp, #4]
 801fc3e:	4542      	cmp	r2, r8
 801fc40:	dd5f      	ble.n	801fd02 <st_int8_to16_dual+0x2b2>
 801fc42:	eba2 0808 	sub.w	r8, r2, r8
 801fc46:	4649      	mov	r1, r9
 801fc48:	f10b 0204 	add.w	r2, fp, #4
 801fc4c:	eb07 0008 	add.w	r0, r7, r8
 801fc50:	f917 4b01 	ldrsb.w	r4, [r7], #1
 801fc54:	3204      	adds	r2, #4
 801fc56:	f822 4c08 	strh.w	r4, [r2, #-8]
 801fc5a:	4287      	cmp	r7, r0
 801fc5c:	f911 4b01 	ldrsb.w	r4, [r1], #1
 801fc60:	f822 4c06 	strh.w	r4, [r2, #-6]
 801fc64:	d1f4      	bne.n	801fc50 <st_int8_to16_dual+0x200>
 801fc66:	44c1      	add	r9, r8
 801fc68:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 801fc6c:	9a02      	ldr	r2, [sp, #8]
 801fc6e:	9901      	ldr	r1, [sp, #4]
 801fc70:	3a01      	subs	r2, #1
 801fc72:	4408      	add	r0, r1
 801fc74:	4489      	add	r9, r1
 801fc76:	b292      	uxth	r2, r2
 801fc78:	9202      	str	r2, [sp, #8]
 801fc7a:	2a00      	cmp	r2, #0
 801fc7c:	f47f af02 	bne.w	801fa84 <st_int8_to16_dual+0x34>
 801fc80:	468a      	mov	sl, r1
 801fc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc84:	07db      	lsls	r3, r3, #31
 801fc86:	d52f      	bpl.n	801fce8 <st_int8_to16_dual+0x298>
 801fc88:	f1ba 0c04 	subs.w	ip, sl, #4
 801fc8c:	d43b      	bmi.n	801fd06 <st_int8_to16_dual+0x2b6>
 801fc8e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 801fc92:	4605      	mov	r5, r0
 801fc94:	4e1d      	ldr	r6, [pc, #116]	; (801fd0c <st_int8_to16_dual+0x2bc>)
 801fc96:	f10c 0c01 	add.w	ip, ip, #1
 801fc9a:	eb0b 07cc 	add.w	r7, fp, ip, lsl #3
 801fc9e:	f855 3b04 	ldr.w	r3, [r5], #4
 801fca2:	f10b 0b08 	add.w	fp, fp, #8
 801fca6:	fa2f f493 	sxtb16	r4, r3, ror #8
 801fcaa:	fa2f f383 	sxtb16	r3, r3
 801fcae:	ea04 0106 	and.w	r1, r4, r6
 801fcb2:	b29a      	uxth	r2, r3
 801fcb4:	455f      	cmp	r7, fp
 801fcb6:	ea41 4313 	orr.w	r3, r1, r3, lsr #16
 801fcba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801fcbe:	f84b 3c04 	str.w	r3, [fp, #-4]
 801fcc2:	f84b 2c08 	str.w	r2, [fp, #-8]
 801fcc6:	d1ea      	bne.n	801fc9e <st_int8_to16_dual+0x24e>
 801fcc8:	ea4f 038c 	mov.w	r3, ip, lsl #2
 801fccc:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 801fcd0:	459a      	cmp	sl, r3
 801fcd2:	dd09      	ble.n	801fce8 <st_int8_to16_dual+0x298>
 801fcd4:	ebaa 0303 	sub.w	r3, sl, r3
 801fcd8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801fcdc:	f910 2b01 	ldrsb.w	r2, [r0], #1
 801fce0:	f82b 2b02 	strh.w	r2, [fp], #2
 801fce4:	459b      	cmp	fp, r3
 801fce6:	d1f9      	bne.n	801fcdc <st_int8_to16_dual+0x28c>
 801fce8:	b00b      	add	sp, #44	; 0x2c
 801fcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcee:	f04f 0800 	mov.w	r8, #0
 801fcf2:	9a06      	ldr	r2, [sp, #24]
 801fcf4:	4542      	cmp	r2, r8
 801fcf6:	f6bf af65 	bge.w	801fbc4 <st_int8_to16_dual+0x174>
 801fcfa:	9a01      	ldr	r2, [sp, #4]
 801fcfc:	4607      	mov	r7, r0
 801fcfe:	4542      	cmp	r2, r8
 801fd00:	dc9f      	bgt.n	801fc42 <st_int8_to16_dual+0x1f2>
 801fd02:	4638      	mov	r0, r7
 801fd04:	e7b2      	b.n	801fc6c <st_int8_to16_dual+0x21c>
 801fd06:	2300      	movs	r3, #0
 801fd08:	e7e2      	b.n	801fcd0 <st_int8_to16_dual+0x280>
 801fd0a:	bf00      	nop
 801fd0c:	ffff0000 	.word	0xffff0000

0801fd10 <weights_2channels_prefetch>:
 801fd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd14:	2b00      	cmp	r3, #0
 801fd16:	b087      	sub	sp, #28
 801fd18:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801fd1c:	9302      	str	r3, [sp, #8]
 801fd1e:	f340 80e6 	ble.w	801feee <weights_2channels_prefetch+0x1de>
 801fd22:	f1a8 0310 	sub.w	r3, r8, #16
 801fd26:	f1a8 0403 	sub.w	r4, r8, #3
 801fd2a:	f04f 0b00 	mov.w	fp, #0
 801fd2e:	091b      	lsrs	r3, r3, #4
 801fd30:	9403      	str	r4, [sp, #12]
 801fd32:	f1a8 0404 	sub.w	r4, r8, #4
 801fd36:	3301      	adds	r3, #1
 801fd38:	9405      	str	r4, [sp, #20]
 801fd3a:	011c      	lsls	r4, r3, #4
 801fd3c:	019b      	lsls	r3, r3, #6
 801fd3e:	9400      	str	r4, [sp, #0]
 801fd40:	9304      	str	r3, [sp, #16]
 801fd42:	f1b8 0f0f 	cmp.w	r8, #15
 801fd46:	f340 80d7 	ble.w	801fef8 <weights_2channels_prefetch+0x1e8>
 801fd4a:	9b00      	ldr	r3, [sp, #0]
 801fd4c:	460d      	mov	r5, r1
 801fd4e:	18c6      	adds	r6, r0, r3
 801fd50:	4613      	mov	r3, r2
 801fd52:	6804      	ldr	r4, [r0, #0]
 801fd54:	3010      	adds	r0, #16
 801fd56:	682f      	ldr	r7, [r5, #0]
 801fd58:	3340      	adds	r3, #64	; 0x40
 801fd5a:	fa2f fc84 	sxtb16	ip, r4
 801fd5e:	3510      	adds	r5, #16
 801fd60:	f843 cc40 	str.w	ip, [r3, #-64]
 801fd64:	ea4f 2434 	mov.w	r4, r4, ror #8
 801fd68:	42b0      	cmp	r0, r6
 801fd6a:	fa2f f484 	sxtb16	r4, r4
 801fd6e:	f843 4c3c 	str.w	r4, [r3, #-60]
 801fd72:	ea4f 2437 	mov.w	r4, r7, ror #8
 801fd76:	fa2f f787 	sxtb16	r7, r7
 801fd7a:	fa2f f484 	sxtb16	r4, r4
 801fd7e:	f843 7c38 	str.w	r7, [r3, #-56]
 801fd82:	f843 4c34 	str.w	r4, [r3, #-52]
 801fd86:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 801fd8a:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 801fd8e:	ea4f 2c34 	mov.w	ip, r4, ror #8
 801fd92:	fa2f f484 	sxtb16	r4, r4
 801fd96:	fa2f fc8c 	sxtb16	ip, ip
 801fd9a:	f843 4c28 	str.w	r4, [r3, #-40]
 801fd9e:	f843 cc24 	str.w	ip, [r3, #-36]
 801fda2:	ea4f 2c37 	mov.w	ip, r7, ror #8
 801fda6:	fa2f f787 	sxtb16	r7, r7
 801fdaa:	f843 7c30 	str.w	r7, [r3, #-48]
 801fdae:	fa2f f78c 	sxtb16	r7, ip
 801fdb2:	f843 7c2c 	str.w	r7, [r3, #-44]
 801fdb6:	f850 7c08 	ldr.w	r7, [r0, #-8]
 801fdba:	f855 4c08 	ldr.w	r4, [r5, #-8]
 801fdbe:	ea4f 2c37 	mov.w	ip, r7, ror #8
 801fdc2:	fa2f f787 	sxtb16	r7, r7
 801fdc6:	fa2f fc8c 	sxtb16	ip, ip
 801fdca:	f843 7c20 	str.w	r7, [r3, #-32]
 801fdce:	ea4f 2734 	mov.w	r7, r4, ror #8
 801fdd2:	f843 cc1c 	str.w	ip, [r3, #-28]
 801fdd6:	fa2f f787 	sxtb16	r7, r7
 801fdda:	fa2f f484 	sxtb16	r4, r4
 801fdde:	f843 7c14 	str.w	r7, [r3, #-20]
 801fde2:	f843 4c18 	str.w	r4, [r3, #-24]
 801fde6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801fdea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801fdee:	ea4f 2c37 	mov.w	ip, r7, ror #8
 801fdf2:	fa2f f787 	sxtb16	r7, r7
 801fdf6:	fa2f fc8c 	sxtb16	ip, ip
 801fdfa:	f843 7c10 	str.w	r7, [r3, #-16]
 801fdfe:	ea4f 2734 	mov.w	r7, r4, ror #8
 801fe02:	f843 cc0c 	str.w	ip, [r3, #-12]
 801fe06:	fa2f f787 	sxtb16	r7, r7
 801fe0a:	fa2f f484 	sxtb16	r4, r4
 801fe0e:	f843 7c04 	str.w	r7, [r3, #-4]
 801fe12:	f843 4c08 	str.w	r4, [r3, #-8]
 801fe16:	d19c      	bne.n	801fd52 <weights_2channels_prefetch+0x42>
 801fe18:	9b04      	ldr	r3, [sp, #16]
 801fe1a:	441a      	add	r2, r3
 801fe1c:	9b00      	ldr	r3, [sp, #0]
 801fe1e:	4419      	add	r1, r3
 801fe20:	469e      	mov	lr, r3
 801fe22:	9b03      	ldr	r3, [sp, #12]
 801fe24:	4573      	cmp	r3, lr
 801fe26:	dd65      	ble.n	801fef4 <weights_2channels_prefetch+0x1e4>
 801fe28:	9b05      	ldr	r3, [sp, #20]
 801fe2a:	4614      	mov	r4, r2
 801fe2c:	460f      	mov	r7, r1
 801fe2e:	eba3 090e 	sub.w	r9, r3, lr
 801fe32:	ea4f 0999 	mov.w	r9, r9, lsr #2
 801fe36:	f109 0a01 	add.w	sl, r9, #1
 801fe3a:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801fe3e:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 801fe42:	9301      	str	r3, [sp, #4]
 801fe44:	f856 3b04 	ldr.w	r3, [r6], #4
 801fe48:	3410      	adds	r4, #16
 801fe4a:	f857 5b04 	ldr.w	r5, [r7], #4
 801fe4e:	fa2f fc83 	sxtb16	ip, r3
 801fe52:	4286      	cmp	r6, r0
 801fe54:	ea4f 2333 	mov.w	r3, r3, ror #8
 801fe58:	fa2f f383 	sxtb16	r3, r3
 801fe5c:	f844 3c0c 	str.w	r3, [r4, #-12]
 801fe60:	ea4f 2335 	mov.w	r3, r5, ror #8
 801fe64:	fa2f f585 	sxtb16	r5, r5
 801fe68:	f844 cc10 	str.w	ip, [r4, #-16]
 801fe6c:	f844 5c08 	str.w	r5, [r4, #-8]
 801fe70:	fa2f f383 	sxtb16	r3, r3
 801fe74:	f844 3c04 	str.w	r3, [r4, #-4]
 801fe78:	d1e4      	bne.n	801fe44 <weights_2channels_prefetch+0x134>
 801fe7a:	9b01      	ldr	r3, [sp, #4]
 801fe7c:	f10e 0e04 	add.w	lr, lr, #4
 801fe80:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 801fe84:	4419      	add	r1, r3
 801fe86:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801fe8a:	45f0      	cmp	r8, lr
 801fe8c:	dd29      	ble.n	801fee2 <weights_2channels_prefetch+0x1d2>
 801fe8e:	f990 3000 	ldrsb.w	r3, [r0]
 801fe92:	8013      	strh	r3, [r2, #0]
 801fe94:	f991 3000 	ldrsb.w	r3, [r1]
 801fe98:	8053      	strh	r3, [r2, #2]
 801fe9a:	f10e 0301 	add.w	r3, lr, #1
 801fe9e:	4598      	cmp	r8, r3
 801fea0:	dd19      	ble.n	801fed6 <weights_2channels_prefetch+0x1c6>
 801fea2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801fea6:	8093      	strh	r3, [r2, #4]
 801fea8:	f991 3001 	ldrsb.w	r3, [r1, #1]
 801feac:	80d3      	strh	r3, [r2, #6]
 801feae:	f10e 0302 	add.w	r3, lr, #2
 801feb2:	4598      	cmp	r8, r3
 801feb4:	dd0f      	ble.n	801fed6 <weights_2channels_prefetch+0x1c6>
 801feb6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801feba:	8113      	strh	r3, [r2, #8]
 801febc:	f10e 0303 	add.w	r3, lr, #3
 801fec0:	f991 4002 	ldrsb.w	r4, [r1, #2]
 801fec4:	4598      	cmp	r8, r3
 801fec6:	8154      	strh	r4, [r2, #10]
 801fec8:	dd05      	ble.n	801fed6 <weights_2channels_prefetch+0x1c6>
 801feca:	f990 3003 	ldrsb.w	r3, [r0, #3]
 801fece:	8193      	strh	r3, [r2, #12]
 801fed0:	f991 3003 	ldrsb.w	r3, [r1, #3]
 801fed4:	81d3      	strh	r3, [r2, #14]
 801fed6:	eba8 0e0e 	sub.w	lr, r8, lr
 801feda:	4470      	add	r0, lr
 801fedc:	4471      	add	r1, lr
 801fede:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 801fee2:	f10b 0b01 	add.w	fp, fp, #1
 801fee6:	9b02      	ldr	r3, [sp, #8]
 801fee8:	455b      	cmp	r3, fp
 801feea:	f47f af2a 	bne.w	801fd42 <weights_2channels_prefetch+0x32>
 801feee:	b007      	add	sp, #28
 801fef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fef4:	4630      	mov	r0, r6
 801fef6:	e7c8      	b.n	801fe8a <weights_2channels_prefetch+0x17a>
 801fef8:	4606      	mov	r6, r0
 801fefa:	f04f 0e00 	mov.w	lr, #0
 801fefe:	e790      	b.n	801fe22 <weights_2channels_prefetch+0x112>

0801ff00 <st_sssa8_ch_fullW_prefetch>:
 801ff00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff04:	b087      	sub	sp, #28
 801ff06:	461c      	mov	r4, r3
 801ff08:	4680      	mov	r8, r0
 801ff0a:	4613      	mov	r3, r2
 801ff0c:	104f      	asrs	r7, r1, #1
 801ff0e:	4620      	mov	r0, r4
 801ff10:	9103      	str	r1, [sp, #12]
 801ff12:	9704      	str	r7, [sp, #16]
 801ff14:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 801ff18:	eb08 0402 	add.w	r4, r8, r2
 801ff1c:	d020      	beq.n	801ff60 <st_sssa8_ch_fullW_prefetch+0x60>
 801ff1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ff20:	4646      	mov	r6, r8
 801ff22:	4655      	mov	r5, sl
 801ff24:	f8cd 8014 	str.w	r8, [sp, #20]
 801ff28:	ea4f 0942 	mov.w	r9, r2, lsl #1
 801ff2c:	4680      	mov	r8, r0
 801ff2e:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 801ff32:	469a      	mov	sl, r3
 801ff34:	462a      	mov	r2, r5
 801ff36:	4621      	mov	r1, r4
 801ff38:	4630      	mov	r0, r6
 801ff3a:	4653      	mov	r3, sl
 801ff3c:	f8cd 8000 	str.w	r8, [sp]
 801ff40:	445d      	add	r5, fp
 801ff42:	f7ff fee5 	bl	801fd10 <weights_2channels_prefetch>
 801ff46:	3f01      	subs	r7, #1
 801ff48:	444c      	add	r4, r9
 801ff4a:	444e      	add	r6, r9
 801ff4c:	d1f2      	bne.n	801ff34 <st_sssa8_ch_fullW_prefetch+0x34>
 801ff4e:	9b04      	ldr	r3, [sp, #16]
 801ff50:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ff54:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801ff58:	fb03 8809 	mla	r8, r3, r9, r8
 801ff5c:	fb03 aa0b 	mla	sl, r3, fp, sl
 801ff60:	9b03      	ldr	r3, [sp, #12]
 801ff62:	07db      	lsls	r3, r3, #31
 801ff64:	d509      	bpl.n	801ff7a <st_sssa8_ch_fullW_prefetch+0x7a>
 801ff66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff68:	2b00      	cmp	r3, #0
 801ff6a:	dd06      	ble.n	801ff7a <st_sssa8_ch_fullW_prefetch+0x7a>
 801ff6c:	4443      	add	r3, r8
 801ff6e:	f918 2b01 	ldrsb.w	r2, [r8], #1
 801ff72:	4543      	cmp	r3, r8
 801ff74:	f82a 2b02 	strh.w	r2, [sl], #2
 801ff78:	d1f9      	bne.n	801ff6e <st_sssa8_ch_fullW_prefetch+0x6e>
 801ff7a:	b007      	add	sp, #28
 801ff7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff80 <st_sssa8_ch_nn_mat_mult_nt_t>:
 801ff80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff84:	b0b5      	sub	sp, #212	; 0xd4
 801ff86:	9027      	str	r0, [sp, #156]	; 0x9c
 801ff88:	912d      	str	r1, [sp, #180]	; 0xb4
 801ff8a:	9233      	str	r2, [sp, #204]	; 0xcc
 801ff8c:	932e      	str	r3, [sp, #184]	; 0xb8
 801ff8e:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	; 0x114
 801ff92:	2c00      	cmp	r4, #0
 801ff94:	bf18      	it	ne
 801ff96:	4620      	movne	r0, r4
 801ff98:	9c41      	ldr	r4, [sp, #260]	; 0x104
 801ff9a:	2c01      	cmp	r4, #1
 801ff9c:	9045      	str	r0, [sp, #276]	; 0x114
 801ff9e:	f340 826b 	ble.w	8020478 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f8>
 801ffa2:	9c42      	ldr	r4, [sp, #264]	; 0x108
 801ffa4:	461e      	mov	r6, r3
 801ffa6:	4694      	mov	ip, r2
 801ffa8:	9f42      	ldr	r7, [sp, #264]	; 0x108
 801ffaa:	f1a4 0310 	sub.w	r3, r4, #16
 801ffae:	9c41      	ldr	r4, [sp, #260]	; 0x104
 801ffb0:	468e      	mov	lr, r1
 801ffb2:	9d40      	ldr	r5, [sp, #256]	; 0x100
 801ffb4:	1ea0      	subs	r0, r4, #2
 801ffb6:	0919      	lsrs	r1, r3, #4
 801ffb8:	f023 030f 	bic.w	r3, r3, #15
 801ffbc:	9c42      	ldr	r4, [sp, #264]	; 0x108
 801ffbe:	f020 0201 	bic.w	r2, r0, #1
 801ffc2:	9032      	str	r0, [sp, #200]	; 0xc8
 801ffc4:	4630      	mov	r0, r6
 801ffc6:	3101      	adds	r1, #1
 801ffc8:	4432      	add	r2, r6
 801ffca:	10a4      	asrs	r4, r4, #2
 801ffcc:	106d      	asrs	r5, r5, #1
 801ffce:	1cd6      	adds	r6, r2, #3
 801ffd0:	f107 0214 	add.w	r2, r7, #20
 801ffd4:	942f      	str	r4, [sp, #188]	; 0xbc
 801ffd6:	18d3      	adds	r3, r2, r3
 801ffd8:	9629      	str	r6, [sp, #164]	; 0xa4
 801ffda:	9e41      	ldr	r6, [sp, #260]	; 0x104
 801ffdc:	9318      	str	r3, [sp, #96]	; 0x60
 801ffde:	f06f 0303 	mvn.w	r3, #3
 801ffe2:	0076      	lsls	r6, r6, #1
 801ffe4:	952a      	str	r5, [sp, #168]	; 0xa8
 801ffe6:	1bdb      	subs	r3, r3, r7
 801ffe8:	9613      	str	r6, [sp, #76]	; 0x4c
 801ffea:	9319      	str	r3, [sp, #100]	; 0x64
 801ffec:	f1a7 030f 	sub.w	r3, r7, #15
 801fff0:	9312      	str	r3, [sp, #72]	; 0x48
 801fff2:	f007 0303 	and.w	r3, r7, #3
 801fff6:	9330      	str	r3, [sp, #192]	; 0xc0
 801fff8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 801fffa:	f003 0301 	and.w	r3, r3, #1
 801fffe:	9328      	str	r3, [sp, #160]	; 0xa0
 8020000:	007b      	lsls	r3, r7, #1
 8020002:	9326      	str	r3, [sp, #152]	; 0x98
 8020004:	00bb      	lsls	r3, r7, #2
 8020006:	932c      	str	r3, [sp, #176]	; 0xb0
 8020008:	1f3b      	subs	r3, r7, #4
 802000a:	9317      	str	r3, [sp, #92]	; 0x5c
 802000c:	1c43      	adds	r3, r0, #1
 802000e:	931b      	str	r3, [sp, #108]	; 0x6c
 8020010:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8020012:	3302      	adds	r3, #2
 8020014:	9321      	str	r3, [sp, #132]	; 0x84
 8020016:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8020018:	3304      	adds	r3, #4
 802001a:	931f      	str	r3, [sp, #124]	; 0x7c
 802001c:	9b44      	ldr	r3, [sp, #272]	; 0x110
 802001e:	3304      	adds	r3, #4
 8020020:	9320      	str	r3, [sp, #128]	; 0x80
 8020022:	4663      	mov	r3, ip
 8020024:	3304      	adds	r3, #4
 8020026:	9322      	str	r3, [sp, #136]	; 0x88
 8020028:	010b      	lsls	r3, r1, #4
 802002a:	9316      	str	r3, [sp, #88]	; 0x58
 802002c:	018b      	lsls	r3, r1, #6
 802002e:	9325      	str	r3, [sp, #148]	; 0x94
 8020030:	0123      	lsls	r3, r4, #4
 8020032:	9331      	str	r3, [sp, #196]	; 0xc4
 8020034:	fb06 f305 	mul.w	r3, r6, r5
 8020038:	932b      	str	r3, [sp, #172]	; 0xac
 802003a:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 802003e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020040:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8020042:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8020046:	f9b2 2000 	ldrsh.w	r2, [r2]
 802004a:	3901      	subs	r1, #1
 802004c:	2b15      	cmp	r3, #21
 802004e:	931a      	str	r3, [sp, #104]	; 0x68
 8020050:	920a      	str	r2, [sp, #40]	; 0x28
 8020052:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020054:	9101      	str	r1, [sp, #4]
 8020056:	f852 1c04 	ldr.w	r1, [r2, #-4]
 802005a:	6812      	ldr	r2, [r2, #0]
 802005c:	910d      	str	r1, [sp, #52]	; 0x34
 802005e:	920e      	str	r2, [sp, #56]	; 0x38
 8020060:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020062:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8020066:	6812      	ldr	r2, [r2, #0]
 8020068:	910f      	str	r1, [sp, #60]	; 0x3c
 802006a:	9210      	str	r2, [sp, #64]	; 0x40
 802006c:	f300 8402 	bgt.w	8020874 <st_sssa8_ch_nn_mat_mult_nt_t+0x8f4>
 8020070:	2b00      	cmp	r3, #0
 8020072:	bfcc      	ite	gt
 8020074:	2300      	movgt	r3, #0
 8020076:	2301      	movle	r3, #1
 8020078:	425b      	negs	r3, r3
 802007a:	9308      	str	r3, [sp, #32]
 802007c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802007e:	2b15      	cmp	r3, #21
 8020080:	f300 82c4 	bgt.w	802060c <st_sssa8_ch_nn_mat_mult_nt_t+0x68c>
 8020084:	2b00      	cmp	r3, #0
 8020086:	bfcc      	ite	gt
 8020088:	2300      	movgt	r3, #0
 802008a:	2301      	movle	r3, #1
 802008c:	425b      	negs	r3, r3
 802008e:	9309      	str	r3, [sp, #36]	; 0x24
 8020090:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8020092:	2b00      	cmp	r3, #0
 8020094:	f000 82c0 	beq.w	8020618 <st_sssa8_ch_nn_mat_mult_nt_t+0x698>
 8020098:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802009a:	2b00      	cmp	r3, #0
 802009c:	f040 8397 	bne.w	80207ce <st_sssa8_ch_nn_mat_mult_nt_t+0x84e>
 80200a0:	461a      	mov	r2, r3
 80200a2:	4619      	mov	r1, r3
 80200a4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80200a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80200aa:	18cb      	adds	r3, r1, r3
 80200ac:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80200ae:	930c      	str	r3, [sp, #48]	; 0x30
 80200b0:	6803      	ldr	r3, [r0, #0]
 80200b2:	18d3      	adds	r3, r2, r3
 80200b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80200b6:	2900      	cmp	r1, #0
 80200b8:	f000 8511 	beq.w	8020ade <st_sssa8_ch_nn_mat_mult_nt_t+0xb5e>
 80200bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80200be:	2001      	movs	r0, #1
 80200c0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80200c2:	1e93      	subs	r3, r2, #2
 80200c4:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 80200c8:	9104      	str	r1, [sp, #16]
 80200ca:	fa00 f303 	lsl.w	r3, r0, r3
 80200ce:	931c      	str	r3, [sp, #112]	; 0x70
 80200d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200d2:	3b02      	subs	r3, #2
 80200d4:	fa00 f303 	lsl.w	r3, r0, r3
 80200d8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80200da:	931d      	str	r3, [sp, #116]	; 0x74
 80200dc:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80200de:	3b03      	subs	r3, #3
 80200e0:	9311      	str	r3, [sp, #68]	; 0x44
 80200e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80200e4:	4418      	add	r0, r3
 80200e6:	9303      	str	r3, [sp, #12]
 80200e8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80200ea:	9002      	str	r0, [sp, #8]
 80200ec:	3304      	adds	r3, #4
 80200ee:	9845      	ldr	r0, [sp, #276]	; 0x114
 80200f0:	9315      	str	r3, [sp, #84]	; 0x54
 80200f2:	1e53      	subs	r3, r2, #1
 80200f4:	4420      	add	r0, r4
 80200f6:	931e      	str	r3, [sp, #120]	; 0x78
 80200f8:	f1c2 0301 	rsb	r3, r2, #1
 80200fc:	9014      	str	r0, [sp, #80]	; 0x50
 80200fe:	9324      	str	r3, [sp, #144]	; 0x90
 8020100:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020102:	2b00      	cmp	r3, #0
 8020104:	f340 8279 	ble.w	80205fa <st_sssa8_ch_nn_mat_mult_nt_t+0x67a>
 8020108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802010a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802010c:	eb0b 0703 	add.w	r7, fp, r3
 8020110:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020112:	f8cd b014 	str.w	fp, [sp, #20]
 8020116:	4604      	mov	r4, r0
 8020118:	445b      	add	r3, fp
 802011a:	9e45      	ldr	r6, [sp, #276]	; 0x114
 802011c:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8020120:	9301      	str	r3, [sp, #4]
 8020122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020124:	4619      	mov	r1, r3
 8020126:	f85b c007 	ldr.w	ip, [fp, r7]
 802012a:	eb0b 0e07 	add.w	lr, fp, r7
 802012e:	fa2f f58c 	sxtb16	r5, ip
 8020132:	6832      	ldr	r2, [r6, #0]
 8020134:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8020138:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802013c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8020140:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8020144:	fb25 0002 	smlad	r0, r5, r2, r0
 8020148:	fb2c 0009 	smlad	r0, ip, r9, r0
 802014c:	fb25 350a 	smlad	r5, r5, sl, r3
 8020150:	fb2c 5508 	smlad	r5, ip, r8, r5
 8020154:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8020158:	fa2f fc83 	sxtb16	ip, r3
 802015c:	fa2f f393 	sxtb16	r3, r3, ror #8
 8020160:	fb2c 4202 	smlad	r2, ip, r2, r4
 8020164:	fb2c 110a 	smlad	r1, ip, sl, r1
 8020168:	fb23 2209 	smlad	r2, r3, r9, r2
 802016c:	f8d6 9010 	ldr.w	r9, [r6, #16]
 8020170:	6974      	ldr	r4, [r6, #20]
 8020172:	fb23 1808 	smlad	r8, r3, r8, r1
 8020176:	f8de 1004 	ldr.w	r1, [lr, #4]
 802017a:	69b3      	ldr	r3, [r6, #24]
 802017c:	fa2f fc81 	sxtb16	ip, r1
 8020180:	f8d6 a01c 	ldr.w	sl, [r6, #28]
 8020184:	fa2f f191 	sxtb16	r1, r1, ror #8
 8020188:	fb2c 0009 	smlad	r0, ip, r9, r0
 802018c:	fb21 0004 	smlad	r0, r1, r4, r0
 8020190:	fb2c 5c03 	smlad	ip, ip, r3, r5
 8020194:	fb21 cc0a 	smlad	ip, r1, sl, ip
 8020198:	683d      	ldr	r5, [r7, #0]
 802019a:	fa2f f185 	sxtb16	r1, r5
 802019e:	fa2f f595 	sxtb16	r5, r5, ror #8
 80201a2:	fb21 2909 	smlad	r9, r1, r9, r2
 80201a6:	fb21 8803 	smlad	r8, r1, r3, r8
 80201aa:	fb25 9904 	smlad	r9, r5, r4, r9
 80201ae:	6a34      	ldr	r4, [r6, #32]
 80201b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80201b2:	fb25 8a0a 	smlad	sl, r5, sl, r8
 80201b6:	f8de 2008 	ldr.w	r2, [lr, #8]
 80201ba:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 80201be:	fa2f f182 	sxtb16	r1, r2
 80201c2:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 80201c4:	fa2f f292 	sxtb16	r2, r2, ror #8
 80201c8:	fb21 0004 	smlad	r0, r1, r4, r0
 80201cc:	fb22 0003 	smlad	r0, r2, r3, r0
 80201d0:	fb21 c108 	smlad	r1, r1, r8, ip
 80201d4:	fb22 1205 	smlad	r2, r2, r5, r1
 80201d8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80201dc:	fa2f f18c 	sxtb16	r1, ip
 80201e0:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 80201e4:	fb21 9404 	smlad	r4, r1, r4, r9
 80201e8:	fb21 aa08 	smlad	sl, r1, r8, sl
 80201ec:	fb2c 4903 	smlad	r9, ip, r3, r4
 80201f0:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
 80201f4:	6b74      	ldr	r4, [r6, #52]	; 0x34
 80201f6:	fb2c a505 	smlad	r5, ip, r5, sl
 80201fa:	f8de 300c 	ldr.w	r3, [lr, #12]
 80201fe:	3640      	adds	r6, #64	; 0x40
 8020200:	fa2f f183 	sxtb16	r1, r3
 8020204:	f856 ac08 	ldr.w	sl, [r6, #-8]
 8020208:	f856 ec04 	ldr.w	lr, [r6, #-4]
 802020c:	fa2f f393 	sxtb16	r3, r3, ror #8
 8020210:	fb21 0008 	smlad	r0, r1, r8, r0
 8020214:	fb23 0004 	smlad	r0, r3, r4, r0
 8020218:	fb21 220a 	smlad	r2, r1, sl, r2
 802021c:	fb23 230e 	smlad	r3, r3, lr, r2
 8020220:	68b9      	ldr	r1, [r7, #8]
 8020222:	fa2f f281 	sxtb16	r2, r1
 8020226:	fa2f f191 	sxtb16	r1, r1, ror #8
 802022a:	fb22 9908 	smlad	r9, r2, r8, r9
 802022e:	fb22 550a 	smlad	r5, r2, sl, r5
 8020232:	fb21 9404 	smlad	r4, r1, r4, r9
 8020236:	fb21 510e 	smlad	r1, r1, lr, r5
 802023a:	3710      	adds	r7, #16
 802023c:	9a01      	ldr	r2, [sp, #4]
 802023e:	4297      	cmp	r7, r2
 8020240:	f47f af71 	bne.w	8020126 <st_sssa8_ch_nn_mat_mult_nt_t+0x1a6>
 8020244:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8020246:	f8dd b014 	ldr.w	fp, [sp, #20]
 802024a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802024c:	4692      	mov	sl, r2
 802024e:	4493      	add	fp, r2
 8020250:	9501      	str	r5, [sp, #4]
 8020252:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020254:	4592      	cmp	sl, r2
 8020256:	f280 81ce 	bge.w	80205f6 <st_sssa8_ch_nn_mat_mult_nt_t+0x676>
 802025a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802025c:	f8cd a01c 	str.w	sl, [sp, #28]
 8020260:	eba5 020a 	sub.w	r2, r5, sl
 8020264:	46aa      	mov	sl, r5
 8020266:	0892      	lsrs	r2, r2, #2
 8020268:	4616      	mov	r6, r2
 802026a:	9206      	str	r2, [sp, #24]
 802026c:	9a01      	ldr	r2, [sp, #4]
 802026e:	3601      	adds	r6, #1
 8020270:	eb0b 0986 	add.w	r9, fp, r6, lsl #2
 8020274:	9605      	str	r6, [sp, #20]
 8020276:	f85b 5b04 	ldr.w	r5, [fp], #4
 802027a:	3210      	adds	r2, #16
 802027c:	fa2f f685 	sxtb16	r6, r5
 8020280:	f852 8c10 	ldr.w	r8, [r2, #-16]
 8020284:	f852 cc0c 	ldr.w	ip, [r2, #-12]
 8020288:	f852 ec08 	ldr.w	lr, [r2, #-8]
 802028c:	f852 7c04 	ldr.w	r7, [r2, #-4]
 8020290:	fa2f f595 	sxtb16	r5, r5, ror #8
 8020294:	fb26 0008 	smlad	r0, r6, r8, r0
 8020298:	fb25 000c 	smlad	r0, r5, ip, r0
 802029c:	fb26 330e 	smlad	r3, r6, lr, r3
 80202a0:	fb25 3307 	smlad	r3, r5, r7, r3
 80202a4:	f85b 500a 	ldr.w	r5, [fp, sl]
 80202a8:	fa2f f685 	sxtb16	r6, r5
 80202ac:	fa2f f595 	sxtb16	r5, r5, ror #8
 80202b0:	fb26 4408 	smlad	r4, r6, r8, r4
 80202b4:	fb26 110e 	smlad	r1, r6, lr, r1
 80202b8:	fb25 440c 	smlad	r4, r5, ip, r4
 80202bc:	fb25 1107 	smlad	r1, r5, r7, r1
 80202c0:	45cb      	cmp	fp, r9
 80202c2:	d1d8      	bne.n	8020276 <st_sssa8_ch_nn_mat_mult_nt_t+0x2f6>
 80202c4:	9a01      	ldr	r2, [sp, #4]
 80202c6:	9d05      	ldr	r5, [sp, #20]
 80202c8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80202cc:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80202d0:	9d06      	ldr	r5, [sp, #24]
 80202d2:	9201      	str	r2, [sp, #4]
 80202d4:	f10a 0204 	add.w	r2, sl, #4
 80202d8:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 80202dc:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80202de:	4552      	cmp	r2, sl
 80202e0:	dd58      	ble.n	8020394 <st_sssa8_ch_nn_mat_mult_nt_t+0x414>
 80202e2:	9f01      	ldr	r7, [sp, #4]
 80202e4:	f999 2000 	ldrsb.w	r2, [r9]
 80202e8:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 80202ec:	f9b7 6000 	ldrsh.w	r6, [r7]
 80202f0:	fb15 3302 	smlabb	r3, r5, r2, r3
 80202f4:	fb16 0002 	smlabb	r0, r6, r2, r0
 80202f8:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80202fa:	f919 2002 	ldrsb.w	r2, [r9, r2]
 80202fe:	fb15 1102 	smlabb	r1, r5, r2, r1
 8020302:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8020304:	fb16 4402 	smlabb	r4, r6, r2, r4
 8020308:	f10a 0201 	add.w	r2, sl, #1
 802030c:	4295      	cmp	r5, r2
 802030e:	dd3d      	ble.n	802038c <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8020310:	eb09 0205 	add.w	r2, r9, r5
 8020314:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8020318:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 802031c:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8020320:	fb16 4402 	smlabb	r4, r6, r2, r4
 8020324:	fb15 1102 	smlabb	r1, r5, r2, r1
 8020328:	f999 2001 	ldrsb.w	r2, [r9, #1]
 802032c:	fb16 0002 	smlabb	r0, r6, r2, r0
 8020330:	9e42      	ldr	r6, [sp, #264]	; 0x108
 8020332:	fb15 3302 	smlabb	r3, r5, r2, r3
 8020336:	f10a 0202 	add.w	r2, sl, #2
 802033a:	f109 0502 	add.w	r5, r9, #2
 802033e:	4296      	cmp	r6, r2
 8020340:	dd24      	ble.n	802038c <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 8020342:	57aa      	ldrsb	r2, [r5, r6]
 8020344:	f9b7 6008 	ldrsh.w	r6, [r7, #8]
 8020348:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 802034c:	fb16 4402 	smlabb	r4, r6, r2, r4
 8020350:	fb15 1102 	smlabb	r1, r5, r2, r1
 8020354:	f999 2002 	ldrsb.w	r2, [r9, #2]
 8020358:	fb16 0002 	smlabb	r0, r6, r2, r0
 802035c:	9e42      	ldr	r6, [sp, #264]	; 0x108
 802035e:	fb15 3302 	smlabb	r3, r5, r2, r3
 8020362:	f10a 0203 	add.w	r2, sl, #3
 8020366:	f109 0503 	add.w	r5, r9, #3
 802036a:	4296      	cmp	r6, r2
 802036c:	dd0e      	ble.n	802038c <st_sssa8_ch_nn_mat_mult_nt_t+0x40c>
 802036e:	57ad      	ldrsb	r5, [r5, r6]
 8020370:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8020374:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 8020378:	fb12 4405 	smlabb	r4, r2, r5, r4
 802037c:	fb16 1105 	smlabb	r1, r6, r5, r1
 8020380:	f999 5003 	ldrsb.w	r5, [r9, #3]
 8020384:	fb12 0005 	smlabb	r0, r2, r5, r0
 8020388:	fb16 3305 	smlabb	r3, r6, r5, r3
 802038c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 802038e:	eba2 020a 	sub.w	r2, r2, sl
 8020392:	4491      	add	r9, r2
 8020394:	9a08      	ldr	r2, [sp, #32]
 8020396:	2a00      	cmp	r2, #0
 8020398:	f040 80dd 	bne.w	8020556 <st_sssa8_ch_nn_mat_mult_nt_t+0x5d6>
 802039c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802039e:	0040      	lsls	r0, r0, #1
 80203a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80203a2:	0064      	lsls	r4, r4, #1
 80203a4:	fb50 5002 	smmla	r0, r0, r2, r5
 80203a8:	fb54 5402 	smmla	r4, r4, r2, r5
 80203ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80203ae:	4110      	asrs	r0, r2
 80203b0:	f300 0007 	ssat	r0, #8, r0
 80203b4:	9d03      	ldr	r5, [sp, #12]
 80203b6:	4114      	asrs	r4, r2
 80203b8:	f805 0c01 	strb.w	r0, [r5, #-1]
 80203bc:	f304 0407 	ssat	r4, #8, r4
 80203c0:	9a02      	ldr	r2, [sp, #8]
 80203c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80203c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80203c8:	2a00      	cmp	r2, #0
 80203ca:	f040 80ac 	bne.w	8020526 <st_sssa8_ch_nn_mat_mult_nt_t+0x5a6>
 80203ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80203d0:	005b      	lsls	r3, r3, #1
 80203d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80203d4:	0049      	lsls	r1, r1, #1
 80203d6:	fb53 0302 	smmla	r3, r3, r2, r0
 80203da:	fb51 0102 	smmla	r1, r1, r2, r0
 80203de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80203e0:	4113      	asrs	r3, r2
 80203e2:	f303 0307 	ssat	r3, #8, r3
 80203e6:	9803      	ldr	r0, [sp, #12]
 80203e8:	4111      	asrs	r1, r2
 80203ea:	7003      	strb	r3, [r0, #0]
 80203ec:	f301 0107 	ssat	r1, #8, r1
 80203f0:	9b02      	ldr	r3, [sp, #8]
 80203f2:	7019      	strb	r1, [r3, #0]
 80203f4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80203f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80203f8:	eb09 0b03 	add.w	fp, r9, r3
 80203fc:	9b03      	ldr	r3, [sp, #12]
 80203fe:	4413      	add	r3, r2
 8020400:	9303      	str	r3, [sp, #12]
 8020402:	9b02      	ldr	r3, [sp, #8]
 8020404:	4413      	add	r3, r2
 8020406:	9302      	str	r3, [sp, #8]
 8020408:	9b04      	ldr	r3, [sp, #16]
 802040a:	3b01      	subs	r3, #1
 802040c:	9304      	str	r3, [sp, #16]
 802040e:	f47f ae77 	bne.w	8020100 <st_sssa8_ch_nn_mat_mult_nt_t+0x180>
 8020412:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020414:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020416:	3b01      	subs	r3, #1
 8020418:	4413      	add	r3, r2
 802041a:	9301      	str	r3, [sp, #4]
 802041c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802041e:	2b00      	cmp	r3, #0
 8020420:	f040 822b 	bne.w	802087a <st_sssa8_ch_nn_mat_mult_nt_t+0x8fa>
 8020424:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020426:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020428:	4413      	add	r3, r2
 802042a:	9323      	str	r3, [sp, #140]	; 0x8c
 802042c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 802042e:	b11b      	cbz	r3, 8020438 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b8>
 8020430:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020432:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020434:	4413      	add	r3, r2
 8020436:	9345      	str	r3, [sp, #276]	; 0x114
 8020438:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802043a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802043c:	3204      	adds	r2, #4
 802043e:	3302      	adds	r3, #2
 8020440:	9221      	str	r2, [sp, #132]	; 0x84
 8020442:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020444:	931b      	str	r3, [sp, #108]	; 0x6c
 8020446:	3208      	adds	r2, #8
 8020448:	921f      	str	r2, [sp, #124]	; 0x7c
 802044a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802044c:	3208      	adds	r2, #8
 802044e:	9220      	str	r2, [sp, #128]	; 0x80
 8020450:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020452:	3208      	adds	r2, #8
 8020454:	9222      	str	r2, [sp, #136]	; 0x88
 8020456:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020458:	429a      	cmp	r2, r3
 802045a:	f47f adf0 	bne.w	802003e <st_sssa8_ch_nn_mat_mult_nt_t+0xbe>
 802045e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020460:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8020462:	085a      	lsrs	r2, r3, #1
 8020464:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020466:	fb02 3303 	mla	r3, r2, r3, r3
 802046a:	3201      	adds	r2, #1
 802046c:	4419      	add	r1, r3
 802046e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020470:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8020474:	912d      	str	r1, [sp, #180]	; 0xb4
 8020476:	932e      	str	r3, [sp, #184]	; 0xb8
 8020478:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802047a:	07db      	lsls	r3, r3, #31
 802047c:	d54f      	bpl.n	802051e <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 802047e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8020480:	2b00      	cmp	r3, #0
 8020482:	dd4c      	ble.n	802051e <st_sssa8_ch_nn_mat_mult_nt_t+0x59e>
 8020484:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020486:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 802048a:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 802048e:	2200      	movs	r2, #0
 8020490:	441c      	add	r4, r3
 8020492:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020494:	f04f 0901 	mov.w	r9, #1
 8020498:	4611      	mov	r1, r2
 802049a:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 802049e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80204a0:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 80204a4:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80204a6:	f8cd e004 	str.w	lr, [sp, #4]
 80204aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80204ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80204b0:	4498      	add	r8, r3
 80204b2:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80204b4:	e9dd e042 	ldrd	lr, r0, [sp, #264]	; 0x108
 80204b8:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 80204bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80204be:	9e01      	ldr	r6, [sp, #4]
 80204c0:	f1be 0f00 	cmp.w	lr, #0
 80204c4:	6837      	ldr	r7, [r6, #0]
 80204c6:	dd0d      	ble.n	80204e4 <st_sssa8_ch_nn_mat_mult_nt_t+0x564>
 80204c8:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 80204ca:	eb03 0b0e 	add.w	fp, r3, lr
 80204ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80204d2:	f913 6b01 	ldrsb.w	r6, [r3], #1
 80204d6:	f91c af01 	ldrsb.w	sl, [ip, #1]!
 80204da:	1a36      	subs	r6, r6, r0
 80204dc:	455b      	cmp	r3, fp
 80204de:	fb0a 7706 	mla	r7, sl, r6, r7
 80204e2:	d1f6      	bne.n	80204d2 <st_sssa8_ch_nn_mat_mult_nt_t+0x552>
 80204e4:	f9b8 c000 	ldrsh.w	ip, [r8]
 80204e8:	f1bc 0f15 	cmp.w	ip, #21
 80204ec:	f340 82fa 	ble.w	8020ae4 <st_sssa8_ch_nn_mat_mult_nt_t+0xb64>
 80204f0:	f1ac 0a02 	sub.w	sl, ip, #2
 80204f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80204f8:	682e      	ldr	r6, [r5, #0]
 80204fa:	fa09 fa0a 	lsl.w	sl, r9, sl
 80204fe:	fb57 a606 	smmla	r6, r7, r6, sl
 8020502:	fa46 fc0c 	asr.w	ip, r6, ip
 8020506:	6826      	ldr	r6, [r4, #0]
 8020508:	4466      	add	r6, ip
 802050a:	f306 0607 	ssat	r6, #8, r6
 802050e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8020510:	54be      	strb	r6, [r7, r2]
 8020512:	9e41      	ldr	r6, [sp, #260]	; 0x104
 8020514:	3101      	adds	r1, #1
 8020516:	4432      	add	r2, r6
 8020518:	9e40      	ldr	r6, [sp, #256]	; 0x100
 802051a:	428e      	cmp	r6, r1
 802051c:	d1cf      	bne.n	80204be <st_sssa8_ch_nn_mat_mult_nt_t+0x53e>
 802051e:	2000      	movs	r0, #0
 8020520:	b035      	add	sp, #212	; 0xd4
 8020522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020526:	3201      	adds	r2, #1
 8020528:	d02e      	beq.n	8020588 <st_sssa8_ch_nn_mat_mult_nt_t+0x608>
 802052a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802052c:	981d      	ldr	r0, [sp, #116]	; 0x74
 802052e:	fb53 0302 	smmla	r3, r3, r2, r0
 8020532:	fb51 0102 	smmla	r1, r1, r2, r0
 8020536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020538:	9810      	ldr	r0, [sp, #64]	; 0x40
 802053a:	3a01      	subs	r2, #1
 802053c:	4113      	asrs	r3, r2
 802053e:	4403      	add	r3, r0
 8020540:	f303 0307 	ssat	r3, #8, r3
 8020544:	4111      	asrs	r1, r2
 8020546:	9a03      	ldr	r2, [sp, #12]
 8020548:	4401      	add	r1, r0
 802054a:	7013      	strb	r3, [r2, #0]
 802054c:	f301 0207 	ssat	r2, #8, r1
 8020550:	9b02      	ldr	r3, [sp, #8]
 8020552:	701a      	strb	r2, [r3, #0]
 8020554:	e74e      	b.n	80203f4 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 8020556:	3201      	adds	r2, #1
 8020558:	d031      	beq.n	80205be <st_sssa8_ch_nn_mat_mult_nt_t+0x63e>
 802055a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 802055c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802055e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020560:	fb50 5002 	smmla	r0, r0, r2, r5
 8020564:	fb54 5402 	smmla	r4, r4, r2, r5
 8020568:	4130      	asrs	r0, r6
 802056a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802056c:	4410      	add	r0, r2
 802056e:	f300 0007 	ssat	r0, #8, r0
 8020572:	9d03      	ldr	r5, [sp, #12]
 8020574:	4134      	asrs	r4, r6
 8020576:	f805 0c01 	strb.w	r0, [r5, #-1]
 802057a:	18a2      	adds	r2, r4, r2
 802057c:	f302 0207 	ssat	r2, #8, r2
 8020580:	9802      	ldr	r0, [sp, #8]
 8020582:	f800 2c01 	strb.w	r2, [r0, #-1]
 8020586:	e71e      	b.n	80203c6 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 8020588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802058a:	f1c2 0201 	rsb	r2, r2, #1
 802058e:	4093      	lsls	r3, r2
 8020590:	f303 031f 	ssat	r3, #32, r3
 8020594:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020596:	fb53 f310 	smmulr	r3, r3, r0
 802059a:	fa01 f202 	lsl.w	r2, r1, r2
 802059e:	f302 021f 	ssat	r2, #32, r2
 80205a2:	fb52 f210 	smmulr	r2, r2, r0
 80205a6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80205a8:	440b      	add	r3, r1
 80205aa:	f303 0307 	ssat	r3, #8, r3
 80205ae:	9803      	ldr	r0, [sp, #12]
 80205b0:	440a      	add	r2, r1
 80205b2:	7003      	strb	r3, [r0, #0]
 80205b4:	f302 0207 	ssat	r2, #8, r2
 80205b8:	9b02      	ldr	r3, [sp, #8]
 80205ba:	701a      	strb	r2, [r3, #0]
 80205bc:	e71a      	b.n	80203f4 <st_sssa8_ch_nn_mat_mult_nt_t+0x474>
 80205be:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80205c0:	fa00 f205 	lsl.w	r2, r0, r5
 80205c4:	f302 021f 	ssat	r2, #32, r2
 80205c8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80205ca:	fb52 f216 	smmulr	r2, r2, r6
 80205ce:	fa04 f005 	lsl.w	r0, r4, r5
 80205d2:	f300 001f 	ssat	r0, #32, r0
 80205d6:	fb50 f016 	smmulr	r0, r0, r6
 80205da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80205dc:	4422      	add	r2, r4
 80205de:	f302 0207 	ssat	r2, #8, r2
 80205e2:	9d03      	ldr	r5, [sp, #12]
 80205e4:	4420      	add	r0, r4
 80205e6:	f805 2c01 	strb.w	r2, [r5, #-1]
 80205ea:	f300 0007 	ssat	r0, #8, r0
 80205ee:	9a02      	ldr	r2, [sp, #8]
 80205f0:	f802 0c01 	strb.w	r0, [r2, #-1]
 80205f4:	e6e7      	b.n	80203c6 <st_sssa8_ch_nn_mat_mult_nt_t+0x446>
 80205f6:	46d9      	mov	r9, fp
 80205f8:	e670      	b.n	80202dc <st_sssa8_ch_nn_mat_mult_nt_t+0x35c>
 80205fa:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80205fc:	f04f 0a00 	mov.w	sl, #0
 8020600:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020602:	9301      	str	r3, [sp, #4]
 8020604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020606:	4604      	mov	r4, r0
 8020608:	4619      	mov	r1, r3
 802060a:	e622      	b.n	8020252 <st_sssa8_ch_nn_mat_mult_nt_t+0x2d2>
 802060c:	2301      	movs	r3, #1
 802060e:	9309      	str	r3, [sp, #36]	; 0x24
 8020610:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8020612:	2b00      	cmp	r3, #0
 8020614:	f47f ad40 	bne.w	8020098 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8020618:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802061a:	9a42      	ldr	r2, [sp, #264]	; 0x108
 802061c:	eb03 0a02 	add.w	sl, r3, r2
 8020620:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020622:	2b00      	cmp	r3, #0
 8020624:	f340 82b2 	ble.w	8020b8c <st_sssa8_ch_nn_mat_mult_nt_t+0xc0c>
 8020628:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802062a:	4650      	mov	r0, sl
 802062c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802062e:	18d5      	adds	r5, r2, r3
 8020630:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020632:	6811      	ldr	r1, [r2, #0]
 8020634:	3210      	adds	r2, #16
 8020636:	6804      	ldr	r4, [r0, #0]
 8020638:	3340      	adds	r3, #64	; 0x40
 802063a:	fa2f f681 	sxtb16	r6, r1
 802063e:	3010      	adds	r0, #16
 8020640:	f843 6c40 	str.w	r6, [r3, #-64]
 8020644:	ea4f 2131 	mov.w	r1, r1, ror #8
 8020648:	42aa      	cmp	r2, r5
 802064a:	fa2f f181 	sxtb16	r1, r1
 802064e:	f843 1c3c 	str.w	r1, [r3, #-60]
 8020652:	ea4f 2134 	mov.w	r1, r4, ror #8
 8020656:	fa2f f484 	sxtb16	r4, r4
 802065a:	fa2f f181 	sxtb16	r1, r1
 802065e:	f843 4c38 	str.w	r4, [r3, #-56]
 8020662:	f843 1c34 	str.w	r1, [r3, #-52]
 8020666:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 802066a:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 802066e:	ea4f 2631 	mov.w	r6, r1, ror #8
 8020672:	fa2f f181 	sxtb16	r1, r1
 8020676:	fa2f f686 	sxtb16	r6, r6
 802067a:	f843 1c28 	str.w	r1, [r3, #-40]
 802067e:	f843 6c24 	str.w	r6, [r3, #-36]
 8020682:	ea4f 2634 	mov.w	r6, r4, ror #8
 8020686:	fa2f f484 	sxtb16	r4, r4
 802068a:	f843 4c30 	str.w	r4, [r3, #-48]
 802068e:	fa2f f486 	sxtb16	r4, r6
 8020692:	f843 4c2c 	str.w	r4, [r3, #-44]
 8020696:	f852 4c08 	ldr.w	r4, [r2, #-8]
 802069a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 802069e:	ea4f 2634 	mov.w	r6, r4, ror #8
 80206a2:	fa2f f484 	sxtb16	r4, r4
 80206a6:	fa2f f686 	sxtb16	r6, r6
 80206aa:	f843 4c20 	str.w	r4, [r3, #-32]
 80206ae:	ea4f 2431 	mov.w	r4, r1, ror #8
 80206b2:	f843 6c1c 	str.w	r6, [r3, #-28]
 80206b6:	fa2f f484 	sxtb16	r4, r4
 80206ba:	fa2f f181 	sxtb16	r1, r1
 80206be:	f843 4c14 	str.w	r4, [r3, #-20]
 80206c2:	f843 1c18 	str.w	r1, [r3, #-24]
 80206c6:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80206ca:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80206ce:	ea4f 2634 	mov.w	r6, r4, ror #8
 80206d2:	fa2f f484 	sxtb16	r4, r4
 80206d6:	fa2f f686 	sxtb16	r6, r6
 80206da:	f843 4c10 	str.w	r4, [r3, #-16]
 80206de:	ea4f 2431 	mov.w	r4, r1, ror #8
 80206e2:	f843 6c0c 	str.w	r6, [r3, #-12]
 80206e6:	fa2f f484 	sxtb16	r4, r4
 80206ea:	fa2f f181 	sxtb16	r1, r1
 80206ee:	f843 4c04 	str.w	r4, [r3, #-4]
 80206f2:	f843 1c08 	str.w	r1, [r3, #-8]
 80206f6:	d19c      	bne.n	8020632 <st_sssa8_ch_nn_mat_mult_nt_t+0x6b2>
 80206f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80206fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80206fc:	9925      	ldr	r1, [sp, #148]	; 0x94
 80206fe:	449a      	add	sl, r3
 8020700:	469c      	mov	ip, r3
 8020702:	1857      	adds	r7, r2, r1
 8020704:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8020706:	3b03      	subs	r3, #3
 8020708:	4563      	cmp	r3, ip
 802070a:	f340 823d 	ble.w	8020b88 <st_sssa8_ch_nn_mat_mult_nt_t+0xc08>
 802070e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020710:	463a      	mov	r2, r7
 8020712:	4650      	mov	r0, sl
 8020714:	eba3 030c 	sub.w	r3, r3, ip
 8020718:	ea4f 0893 	mov.w	r8, r3, lsr #2
 802071c:	f108 0e01 	add.w	lr, r8, #1
 8020720:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8020724:	eb05 068e 	add.w	r6, r5, lr, lsl #2
 8020728:	f855 3b04 	ldr.w	r3, [r5], #4
 802072c:	3210      	adds	r2, #16
 802072e:	f850 1b04 	ldr.w	r1, [r0], #4
 8020732:	fa2f f483 	sxtb16	r4, r3
 8020736:	42b5      	cmp	r5, r6
 8020738:	ea4f 2333 	mov.w	r3, r3, ror #8
 802073c:	fa2f f383 	sxtb16	r3, r3
 8020740:	f842 3c0c 	str.w	r3, [r2, #-12]
 8020744:	ea4f 2331 	mov.w	r3, r1, ror #8
 8020748:	fa2f f181 	sxtb16	r1, r1
 802074c:	f842 4c10 	str.w	r4, [r2, #-16]
 8020750:	f842 1c08 	str.w	r1, [r2, #-8]
 8020754:	fa2f f383 	sxtb16	r3, r3
 8020758:	f842 3c04 	str.w	r3, [r2, #-4]
 802075c:	d1e4      	bne.n	8020728 <st_sssa8_ch_nn_mat_mult_nt_t+0x7a8>
 802075e:	f10c 0304 	add.w	r3, ip, #4
 8020762:	44ca      	add	sl, r9
 8020764:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8020768:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 802076c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 802076e:	4563      	cmp	r3, ip
 8020770:	f77f ac92 	ble.w	8020098 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 8020774:	f996 3000 	ldrsb.w	r3, [r6]
 8020778:	803b      	strh	r3, [r7, #0]
 802077a:	f10c 0301 	add.w	r3, ip, #1
 802077e:	f99a 2000 	ldrsb.w	r2, [sl]
 8020782:	807a      	strh	r2, [r7, #2]
 8020784:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8020786:	429a      	cmp	r2, r3
 8020788:	f77f ac86 	ble.w	8020098 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 802078c:	f996 3001 	ldrsb.w	r3, [r6, #1]
 8020790:	80bb      	strh	r3, [r7, #4]
 8020792:	f10c 0302 	add.w	r3, ip, #2
 8020796:	f99a 2001 	ldrsb.w	r2, [sl, #1]
 802079a:	80fa      	strh	r2, [r7, #6]
 802079c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 802079e:	429a      	cmp	r2, r3
 80207a0:	f77f ac7a 	ble.w	8020098 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 80207a4:	f996 3002 	ldrsb.w	r3, [r6, #2]
 80207a8:	f10c 0c03 	add.w	ip, ip, #3
 80207ac:	813b      	strh	r3, [r7, #8]
 80207ae:	4594      	cmp	ip, r2
 80207b0:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 80207b4:	817b      	strh	r3, [r7, #10]
 80207b6:	f6bf ac6f 	bge.w	8020098 <st_sssa8_ch_nn_mat_mult_nt_t+0x118>
 80207ba:	f996 3003 	ldrsb.w	r3, [r6, #3]
 80207be:	81bb      	strh	r3, [r7, #12]
 80207c0:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 80207c4:	81fb      	strh	r3, [r7, #14]
 80207c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	f43f ac69 	beq.w	80200a0 <st_sssa8_ch_nn_mat_mult_nt_t+0x120>
 80207ce:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80207d0:	2800      	cmp	r0, #0
 80207d2:	f000 81cd 	beq.w	8020b70 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf0>
 80207d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80207d8:	2300      	movs	r3, #0
 80207da:	f102 0110 	add.w	r1, r2, #16
 80207de:	461a      	mov	r2, r3
 80207e0:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 80207e4:	3801      	subs	r0, #1
 80207e6:	f101 0110 	add.w	r1, r1, #16
 80207ea:	eba3 0304 	sub.w	r3, r3, r4
 80207ee:	f931 4c18 	ldrsh.w	r4, [r1, #-24]
 80207f2:	eba2 0204 	sub.w	r2, r2, r4
 80207f6:	f931 4c1e 	ldrsh.w	r4, [r1, #-30]
 80207fa:	eba3 0304 	sub.w	r3, r3, r4
 80207fe:	f931 4c16 	ldrsh.w	r4, [r1, #-22]
 8020802:	eba2 0204 	sub.w	r2, r2, r4
 8020806:	f931 4c1c 	ldrsh.w	r4, [r1, #-28]
 802080a:	eba3 0304 	sub.w	r3, r3, r4
 802080e:	f931 4c14 	ldrsh.w	r4, [r1, #-20]
 8020812:	eba2 0204 	sub.w	r2, r2, r4
 8020816:	f931 4c1a 	ldrsh.w	r4, [r1, #-26]
 802081a:	eba3 0304 	sub.w	r3, r3, r4
 802081e:	f931 4c12 	ldrsh.w	r4, [r1, #-18]
 8020822:	eba2 0204 	sub.w	r2, r2, r4
 8020826:	d1db      	bne.n	80207e0 <st_sssa8_ch_nn_mat_mult_nt_t+0x860>
 8020828:	9945      	ldr	r1, [sp, #276]	; 0x114
 802082a:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802082c:	4401      	add	r1, r0
 802082e:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 8020830:	b1cc      	cbz	r4, 8020866 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8020832:	f9b1 0000 	ldrsh.w	r0, [r1]
 8020836:	2c01      	cmp	r4, #1
 8020838:	eba3 0300 	sub.w	r3, r3, r0
 802083c:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8020840:	eba2 0200 	sub.w	r2, r2, r0
 8020844:	d00f      	beq.n	8020866 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 8020846:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 802084a:	2c02      	cmp	r4, #2
 802084c:	eba3 0300 	sub.w	r3, r3, r0
 8020850:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 8020854:	eba2 0200 	sub.w	r2, r2, r0
 8020858:	d005      	beq.n	8020866 <st_sssa8_ch_nn_mat_mult_nt_t+0x8e6>
 802085a:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 802085e:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8020862:	1a1b      	subs	r3, r3, r0
 8020864:	1a52      	subs	r2, r2, r1
 8020866:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8020868:	fb03 f101 	mul.w	r1, r3, r1
 802086c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802086e:	fb03 f202 	mul.w	r2, r3, r2
 8020872:	e417      	b.n	80200a4 <st_sssa8_ch_nn_mat_mult_nt_t+0x124>
 8020874:	2301      	movs	r3, #1
 8020876:	9308      	str	r3, [sp, #32]
 8020878:	e400      	b.n	802007c <st_sssa8_ch_nn_mat_mult_nt_t+0xfc>
 802087a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802087c:	2b00      	cmp	r3, #0
 802087e:	f340 817d 	ble.w	8020b7c <st_sssa8_ch_nn_mat_mult_nt_t+0xbfc>
 8020882:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020884:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	; 0x2c
 8020888:	eb0b 0003 	add.w	r0, fp, r3
 802088c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802088e:	f8db 1000 	ldr.w	r1, [fp]
 8020892:	681e      	ldr	r6, [r3, #0]
 8020894:	fa2f f481 	sxtb16	r4, r1
 8020898:	fa2f f191 	sxtb16	r1, r1, ror #8
 802089c:	fb24 5506 	smlad	r5, r4, r6, r5
 80208a0:	685e      	ldr	r6, [r3, #4]
 80208a2:	fb21 5606 	smlad	r6, r1, r6, r5
 80208a6:	689d      	ldr	r5, [r3, #8]
 80208a8:	fb24 2205 	smlad	r2, r4, r5, r2
 80208ac:	68dc      	ldr	r4, [r3, #12]
 80208ae:	fb21 2104 	smlad	r1, r1, r4, r2
 80208b2:	f8db 2004 	ldr.w	r2, [fp, #4]
 80208b6:	691d      	ldr	r5, [r3, #16]
 80208b8:	fa2f f482 	sxtb16	r4, r2
 80208bc:	fa2f f292 	sxtb16	r2, r2, ror #8
 80208c0:	fb24 6505 	smlad	r5, r4, r5, r6
 80208c4:	695e      	ldr	r6, [r3, #20]
 80208c6:	fb22 5606 	smlad	r6, r2, r6, r5
 80208ca:	699d      	ldr	r5, [r3, #24]
 80208cc:	fb24 1105 	smlad	r1, r4, r5, r1
 80208d0:	69dc      	ldr	r4, [r3, #28]
 80208d2:	fb22 1104 	smlad	r1, r2, r4, r1
 80208d6:	f8db 2008 	ldr.w	r2, [fp, #8]
 80208da:	6a1d      	ldr	r5, [r3, #32]
 80208dc:	fa2f f482 	sxtb16	r4, r2
 80208e0:	fa2f f292 	sxtb16	r2, r2, ror #8
 80208e4:	fb24 6505 	smlad	r5, r4, r5, r6
 80208e8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80208ea:	fb22 5606 	smlad	r6, r2, r6, r5
 80208ee:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80208f0:	fb24 1105 	smlad	r1, r4, r5, r1
 80208f4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80208f6:	fb22 1104 	smlad	r1, r2, r4, r1
 80208fa:	f8db 200c 	ldr.w	r2, [fp, #12]
 80208fe:	3340      	adds	r3, #64	; 0x40
 8020900:	fa2f f482 	sxtb16	r4, r2
 8020904:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8020908:	f10b 0b10 	add.w	fp, fp, #16
 802090c:	f853 ec0c 	ldr.w	lr, [r3, #-12]
 8020910:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8020914:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8020918:	fa2f f292 	sxtb16	r2, r2, ror #8
 802091c:	fb24 6505 	smlad	r5, r4, r5, r6
 8020920:	fb22 550e 	smlad	r5, r2, lr, r5
 8020924:	fb24 110c 	smlad	r1, r4, ip, r1
 8020928:	fb22 1207 	smlad	r2, r2, r7, r1
 802092c:	4583      	cmp	fp, r0
 802092e:	d1ae      	bne.n	802088e <st_sssa8_ch_nn_mat_mult_nt_t+0x90e>
 8020930:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020932:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020936:	e9cd 250b 	strd	r2, r5, [sp, #44]	; 0x2c
 802093a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802093c:	eb03 0e02 	add.w	lr, r3, r2
 8020940:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8020942:	3b03      	subs	r3, #3
 8020944:	4543      	cmp	r3, r8
 8020946:	f340 8117 	ble.w	8020b78 <st_sssa8_ch_nn_mat_mult_nt_t+0xbf8>
 802094a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802094c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802094e:	eba3 0a08 	sub.w	sl, r3, r8
 8020952:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020954:	4673      	mov	r3, lr
 8020956:	f8cd e008 	str.w	lr, [sp, #8]
 802095a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 802095e:	f10a 0901 	add.w	r9, sl, #1
 8020962:	eb00 0c89 	add.w	ip, r0, r9, lsl #2
 8020966:	f850 2b04 	ldr.w	r2, [r0], #4
 802096a:	3310      	adds	r3, #16
 802096c:	fa2f f182 	sxtb16	r1, r2
 8020970:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8020974:	f853 bc0c 	ldr.w	fp, [r3, #-12]
 8020978:	f853 ec08 	ldr.w	lr, [r3, #-8]
 802097c:	f853 7c04 	ldr.w	r7, [r3, #-4]
 8020980:	fa2f f292 	sxtb16	r2, r2, ror #8
 8020984:	fb21 6604 	smlad	r6, r1, r4, r6
 8020988:	fb22 660b 	smlad	r6, r2, fp, r6
 802098c:	fb21 550e 	smlad	r5, r1, lr, r5
 8020990:	fb22 5507 	smlad	r5, r2, r7, r5
 8020994:	4560      	cmp	r0, ip
 8020996:	d1e6      	bne.n	8020966 <st_sssa8_ch_nn_mat_mult_nt_t+0x9e6>
 8020998:	f8dd e008 	ldr.w	lr, [sp, #8]
 802099c:	f108 0804 	add.w	r8, r8, #4
 80209a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80209a2:	eb0e 1e09 	add.w	lr, lr, r9, lsl #4
 80209a6:	960c      	str	r6, [sp, #48]	; 0x30
 80209a8:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 80209ac:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80209ae:	4543      	cmp	r3, r8
 80209b0:	dd40      	ble.n	8020a34 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 80209b2:	f99c 3000 	ldrsb.w	r3, [ip]
 80209b6:	f8be 2000 	ldrh.w	r2, [lr]
 80209ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80209bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80209be:	fb12 1103 	smlabb	r1, r2, r3, r1
 80209c2:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80209c6:	fb12 0003 	smlabb	r0, r2, r3, r0
 80209ca:	f108 0301 	add.w	r3, r8, #1
 80209ce:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80209d0:	910c      	str	r1, [sp, #48]	; 0x30
 80209d2:	429a      	cmp	r2, r3
 80209d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80209d6:	dd2d      	ble.n	8020a34 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 80209d8:	f99c 3001 	ldrsb.w	r3, [ip, #1]
 80209dc:	f8be 2004 	ldrh.w	r2, [lr, #4]
 80209e0:	fb12 1103 	smlabb	r1, r2, r3, r1
 80209e4:	f8be 2006 	ldrh.w	r2, [lr, #6]
 80209e8:	fb12 0003 	smlabb	r0, r2, r3, r0
 80209ec:	f108 0302 	add.w	r3, r8, #2
 80209f0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80209f2:	910c      	str	r1, [sp, #48]	; 0x30
 80209f4:	429a      	cmp	r2, r3
 80209f6:	900b      	str	r0, [sp, #44]	; 0x2c
 80209f8:	dd1c      	ble.n	8020a34 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 80209fa:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 80209fe:	f108 0803 	add.w	r8, r8, #3
 8020a02:	f8be 2008 	ldrh.w	r2, [lr, #8]
 8020a06:	fb12 1103 	smlabb	r1, r2, r3, r1
 8020a0a:	f8be 200a 	ldrh.w	r2, [lr, #10]
 8020a0e:	fb12 0003 	smlabb	r0, r2, r3, r0
 8020a12:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8020a14:	910c      	str	r1, [sp, #48]	; 0x30
 8020a16:	4543      	cmp	r3, r8
 8020a18:	900b      	str	r0, [sp, #44]	; 0x2c
 8020a1a:	dd0b      	ble.n	8020a34 <st_sssa8_ch_nn_mat_mult_nt_t+0xab4>
 8020a1c:	f99c 3003 	ldrsb.w	r3, [ip, #3]
 8020a20:	f8be 200c 	ldrh.w	r2, [lr, #12]
 8020a24:	fb12 1203 	smlabb	r2, r2, r3, r1
 8020a28:	920c      	str	r2, [sp, #48]	; 0x30
 8020a2a:	f8be 200e 	ldrh.w	r2, [lr, #14]
 8020a2e:	fb12 0303 	smlabb	r3, r2, r3, r0
 8020a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8020a34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020a36:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8020a3a:	2915      	cmp	r1, #21
 8020a3c:	dd3d      	ble.n	8020aba <st_sssa8_ch_nn_mat_mult_nt_t+0xb3a>
 8020a3e:	1e8a      	subs	r2, r1, #2
 8020a40:	2301      	movs	r3, #1
 8020a42:	3901      	subs	r1, #1
 8020a44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020a46:	fa03 f202 	lsl.w	r2, r3, r2
 8020a4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020a4c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020a50:	fb50 2303 	smmla	r3, r0, r3, r2
 8020a54:	fa43 f101 	asr.w	r1, r3, r1
 8020a58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a5a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020a5e:	440b      	add	r3, r1
 8020a60:	f303 0307 	ssat	r3, #8, r3
 8020a64:	9a01      	ldr	r2, [sp, #4]
 8020a66:	7013      	strb	r3, [r2, #0]
 8020a68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020a6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8020a6e:	2915      	cmp	r1, #21
 8020a70:	dd13      	ble.n	8020a9a <st_sssa8_ch_nn_mat_mult_nt_t+0xb1a>
 8020a72:	1e8a      	subs	r2, r1, #2
 8020a74:	2301      	movs	r3, #1
 8020a76:	3901      	subs	r1, #1
 8020a78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020a7a:	fa03 f202 	lsl.w	r2, r3, r2
 8020a7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020a80:	681b      	ldr	r3, [r3, #0]
 8020a82:	fb50 2303 	smmla	r3, r0, r3, r2
 8020a86:	fa43 f101 	asr.w	r1, r3, r1
 8020a8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a8c:	681b      	ldr	r3, [r3, #0]
 8020a8e:	440b      	add	r3, r1
 8020a90:	f303 0307 	ssat	r3, #8, r3
 8020a94:	9a01      	ldr	r2, [sp, #4]
 8020a96:	7053      	strb	r3, [r2, #1]
 8020a98:	e4c4      	b.n	8020424 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 8020a9a:	2900      	cmp	r1, #0
 8020a9c:	dd56      	ble.n	8020b4c <st_sssa8_ch_nn_mat_mult_nt_t+0xbcc>
 8020a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020aa0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020aa2:	0058      	lsls	r0, r3, #1
 8020aa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020aa6:	6812      	ldr	r2, [r2, #0]
 8020aa8:	681b      	ldr	r3, [r3, #0]
 8020aaa:	fb50 2303 	smmla	r3, r0, r3, r2
 8020aae:	410b      	asrs	r3, r1
 8020ab0:	f303 0307 	ssat	r3, #8, r3
 8020ab4:	9a01      	ldr	r2, [sp, #4]
 8020ab6:	7053      	strb	r3, [r2, #1]
 8020ab8:	e4b4      	b.n	8020424 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 8020aba:	2900      	cmp	r1, #0
 8020abc:	dd32      	ble.n	8020b24 <st_sssa8_ch_nn_mat_mult_nt_t+0xba4>
 8020abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020ac0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020ac2:	0058      	lsls	r0, r3, #1
 8020ac4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020ac6:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8020aca:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020ace:	fb50 2303 	smmla	r3, r0, r3, r2
 8020ad2:	410b      	asrs	r3, r1
 8020ad4:	f303 0307 	ssat	r3, #8, r3
 8020ad8:	9a01      	ldr	r2, [sp, #4]
 8020ada:	7013      	strb	r3, [r2, #0]
 8020adc:	e7c4      	b.n	8020a68 <st_sssa8_ch_nn_mat_mult_nt_t+0xae8>
 8020ade:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8020ae2:	e49b      	b.n	802041c <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 8020ae4:	f1bc 0f00 	cmp.w	ip, #0
 8020ae8:	dd0c      	ble.n	8020b04 <st_sssa8_ch_nn_mat_mult_nt_t+0xb84>
 8020aea:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8020aee:	682e      	ldr	r6, [r5, #0]
 8020af0:	6827      	ldr	r7, [r4, #0]
 8020af2:	fb5a 7706 	smmla	r7, sl, r6, r7
 8020af6:	fa47 f60c 	asr.w	r6, r7, ip
 8020afa:	f306 0607 	ssat	r6, #8, r6
 8020afe:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8020b00:	54be      	strb	r6, [r7, r2]
 8020b02:	e506      	b.n	8020512 <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 8020b04:	f1cc 0c01 	rsb	ip, ip, #1
 8020b08:	fa07 f70c 	lsl.w	r7, r7, ip
 8020b0c:	f307 071f 	ssat	r7, #32, r7
 8020b10:	682e      	ldr	r6, [r5, #0]
 8020b12:	fb57 f716 	smmulr	r7, r7, r6
 8020b16:	6826      	ldr	r6, [r4, #0]
 8020b18:	443e      	add	r6, r7
 8020b1a:	f306 0607 	ssat	r6, #8, r6
 8020b1e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8020b20:	54be      	strb	r6, [r7, r2]
 8020b22:	e4f6      	b.n	8020512 <st_sssa8_ch_nn_mat_mult_nt_t+0x592>
 8020b24:	f1c1 0101 	rsb	r1, r1, #1
 8020b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b2a:	408a      	lsls	r2, r1
 8020b2c:	f302 021f 	ssat	r2, #32, r2
 8020b30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020b32:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020b36:	fb52 f213 	smmulr	r2, r2, r3
 8020b3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b3c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020b40:	4413      	add	r3, r2
 8020b42:	f303 0307 	ssat	r3, #8, r3
 8020b46:	9a01      	ldr	r2, [sp, #4]
 8020b48:	7013      	strb	r3, [r2, #0]
 8020b4a:	e78d      	b.n	8020a68 <st_sssa8_ch_nn_mat_mult_nt_t+0xae8>
 8020b4c:	f1c1 0101 	rsb	r1, r1, #1
 8020b50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020b52:	408a      	lsls	r2, r1
 8020b54:	f302 021f 	ssat	r2, #32, r2
 8020b58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020b5a:	681b      	ldr	r3, [r3, #0]
 8020b5c:	fb52 f213 	smmulr	r2, r2, r3
 8020b60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b62:	681b      	ldr	r3, [r3, #0]
 8020b64:	4413      	add	r3, r2
 8020b66:	f303 0307 	ssat	r3, #8, r3
 8020b6a:	9a01      	ldr	r2, [sp, #4]
 8020b6c:	7053      	strb	r3, [r2, #1]
 8020b6e:	e459      	b.n	8020424 <st_sssa8_ch_nn_mat_mult_nt_t+0x4a4>
 8020b70:	4602      	mov	r2, r0
 8020b72:	9945      	ldr	r1, [sp, #276]	; 0x114
 8020b74:	4603      	mov	r3, r0
 8020b76:	e65a      	b.n	802082e <st_sssa8_ch_nn_mat_mult_nt_t+0x8ae>
 8020b78:	4684      	mov	ip, r0
 8020b7a:	e717      	b.n	80209ac <st_sssa8_ch_nn_mat_mult_nt_t+0xa2c>
 8020b7c:	4658      	mov	r0, fp
 8020b7e:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
 8020b82:	f04f 0800 	mov.w	r8, #0
 8020b86:	e6db      	b.n	8020940 <st_sssa8_ch_nn_mat_mult_nt_t+0x9c0>
 8020b88:	462e      	mov	r6, r5
 8020b8a:	e5ef      	b.n	802076c <st_sssa8_ch_nn_mat_mult_nt_t+0x7ec>
 8020b8c:	9f45      	ldr	r7, [sp, #276]	; 0x114
 8020b8e:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8020b90:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
 8020b94:	e5b6      	b.n	8020704 <st_sssa8_ch_nn_mat_mult_nt_t+0x784>
 8020b96:	bf00      	nop

08020b98 <st_int8_fill>:
 8020b98:	078b      	lsls	r3, r1, #30
 8020b9a:	468c      	mov	ip, r1
 8020b9c:	d00a      	beq.n	8020bb4 <st_int8_fill+0x1c>
 8020b9e:	b912      	cbnz	r2, 8020ba6 <st_int8_fill+0xe>
 8020ba0:	e045      	b.n	8020c2e <st_int8_fill+0x96>
 8020ba2:	2a00      	cmp	r2, #0
 8020ba4:	d044      	beq.n	8020c30 <st_int8_fill+0x98>
 8020ba6:	f80c 0b01 	strb.w	r0, [ip], #1
 8020baa:	f01c 0f03 	tst.w	ip, #3
 8020bae:	f102 32ff 	add.w	r2, r2, #4294967295
 8020bb2:	d1f6      	bne.n	8020ba2 <st_int8_fill+0xa>
 8020bb4:	b2c3      	uxtb	r3, r0
 8020bb6:	0911      	lsrs	r1, r2, #4
 8020bb8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8020bbc:	b510      	push	{r4, lr}
 8020bbe:	ea4f 2400 	mov.w	r4, r0, lsl #8
 8020bc2:	b2a4      	uxth	r4, r4
 8020bc4:	ea44 0403 	orr.w	r4, r4, r3
 8020bc8:	ea4f 4300 	mov.w	r3, r0, lsl #16
 8020bcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8020bd0:	ea44 0403 	orr.w	r4, r4, r3
 8020bd4:	d043      	beq.n	8020c5e <st_int8_fill+0xc6>
 8020bd6:	1e4b      	subs	r3, r1, #1
 8020bd8:	2b04      	cmp	r3, #4
 8020bda:	d92a      	bls.n	8020c32 <st_int8_fill+0x9a>
 8020bdc:	f01c 0f07 	tst.w	ip, #7
 8020be0:	d127      	bne.n	8020c32 <st_int8_fill+0x9a>
 8020be2:	f10c 0310 	add.w	r3, ip, #16
 8020be6:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8020bea:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8020bee:	e943 4404 	strd	r4, r4, [r3, #-16]
 8020bf2:	e943 4402 	strd	r4, r4, [r3, #-8]
 8020bf6:	3310      	adds	r3, #16
 8020bf8:	428b      	cmp	r3, r1
 8020bfa:	d1f8      	bne.n	8020bee <st_int8_fill+0x56>
 8020bfc:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8020c00:	44f4      	add	ip, lr
 8020c02:	f002 0203 	and.w	r2, r2, #3
 8020c06:	b15b      	cbz	r3, 8020c20 <st_int8_fill+0x88>
 8020c08:	1e59      	subs	r1, r3, #1
 8020c0a:	f8cc 4000 	str.w	r4, [ip]
 8020c0e:	d005      	beq.n	8020c1c <st_int8_fill+0x84>
 8020c10:	2901      	cmp	r1, #1
 8020c12:	f8cc 4004 	str.w	r4, [ip, #4]
 8020c16:	bf18      	it	ne
 8020c18:	f8cc 4008 	strne.w	r4, [ip, #8]
 8020c1c:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8020c20:	b1e2      	cbz	r2, 8020c5c <st_int8_fill+0xc4>
 8020c22:	4601      	mov	r1, r0
 8020c24:	4660      	mov	r0, ip
 8020c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c2a:	f001 bb57 	b.w	80222dc <memset>
 8020c2e:	4770      	bx	lr
 8020c30:	4770      	bx	lr
 8020c32:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8020c36:	4663      	mov	r3, ip
 8020c38:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8020c3c:	601c      	str	r4, [r3, #0]
 8020c3e:	3310      	adds	r3, #16
 8020c40:	f843 4c0c 	str.w	r4, [r3, #-12]
 8020c44:	f843 4c08 	str.w	r4, [r3, #-8]
 8020c48:	f843 4c04 	str.w	r4, [r3, #-4]
 8020c4c:	4299      	cmp	r1, r3
 8020c4e:	d1f5      	bne.n	8020c3c <st_int8_fill+0xa4>
 8020c50:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8020c54:	44f4      	add	ip, lr
 8020c56:	f002 0203 	and.w	r2, r2, #3
 8020c5a:	e7d4      	b.n	8020c06 <st_int8_fill+0x6e>
 8020c5c:	bd10      	pop	{r4, pc}
 8020c5e:	0893      	lsrs	r3, r2, #2
 8020c60:	f002 0203 	and.w	r2, r2, #3
 8020c64:	e7cf      	b.n	8020c06 <st_int8_fill+0x6e>
 8020c66:	bf00      	nop

08020c68 <st_int8_copy>:
 8020c68:	078b      	lsls	r3, r1, #30
 8020c6a:	d00a      	beq.n	8020c82 <st_int8_copy+0x1a>
 8020c6c:	b912      	cbnz	r2, 8020c74 <st_int8_copy+0xc>
 8020c6e:	e04f      	b.n	8020d10 <st_int8_copy+0xa8>
 8020c70:	2a00      	cmp	r2, #0
 8020c72:	d04e      	beq.n	8020d12 <st_int8_copy+0xaa>
 8020c74:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8020c78:	3a01      	subs	r2, #1
 8020c7a:	f801 3b01 	strb.w	r3, [r1], #1
 8020c7e:	078b      	lsls	r3, r1, #30
 8020c80:	d1f6      	bne.n	8020c70 <st_int8_copy+0x8>
 8020c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c86:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8020c8a:	d065      	beq.n	8020d58 <st_int8_copy+0xf0>
 8020c8c:	ea41 0300 	orr.w	r3, r1, r0
 8020c90:	075b      	lsls	r3, r3, #29
 8020c92:	d13f      	bne.n	8020d14 <st_int8_copy+0xac>
 8020c94:	f10e 33ff 	add.w	r3, lr, #4294967295
 8020c98:	2b01      	cmp	r3, #1
 8020c9a:	d93b      	bls.n	8020d14 <st_int8_copy+0xac>
 8020c9c:	f100 0310 	add.w	r3, r0, #16
 8020ca0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8020ca4:	f101 0c10 	add.w	ip, r1, #16
 8020ca8:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8020cac:	3310      	adds	r3, #16
 8020cae:	f10c 0c10 	add.w	ip, ip, #16
 8020cb2:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8020cb6:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8020cba:	4573      	cmp	r3, lr
 8020cbc:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8020cc0:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8020cc4:	d1f2      	bne.n	8020cac <st_int8_copy+0x44>
 8020cc6:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8020cca:	4421      	add	r1, r4
 8020ccc:	4420      	add	r0, r4
 8020cce:	f002 0203 	and.w	r2, r2, #3
 8020cd2:	b16b      	cbz	r3, 8020cf0 <st_int8_copy+0x88>
 8020cd4:	6804      	ldr	r4, [r0, #0]
 8020cd6:	600c      	str	r4, [r1, #0]
 8020cd8:	1e5c      	subs	r4, r3, #1
 8020cda:	d005      	beq.n	8020ce8 <st_int8_copy+0x80>
 8020cdc:	6845      	ldr	r5, [r0, #4]
 8020cde:	2c01      	cmp	r4, #1
 8020ce0:	604d      	str	r5, [r1, #4]
 8020ce2:	d001      	beq.n	8020ce8 <st_int8_copy+0x80>
 8020ce4:	6884      	ldr	r4, [r0, #8]
 8020ce6:	608c      	str	r4, [r1, #8]
 8020ce8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020cec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020cf0:	b162      	cbz	r2, 8020d0c <st_int8_copy+0xa4>
 8020cf2:	f990 3000 	ldrsb.w	r3, [r0]
 8020cf6:	3a01      	subs	r2, #1
 8020cf8:	700b      	strb	r3, [r1, #0]
 8020cfa:	d007      	beq.n	8020d0c <st_int8_copy+0xa4>
 8020cfc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8020d00:	2a01      	cmp	r2, #1
 8020d02:	704b      	strb	r3, [r1, #1]
 8020d04:	d002      	beq.n	8020d0c <st_int8_copy+0xa4>
 8020d06:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8020d0a:	708b      	strb	r3, [r1, #2]
 8020d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d10:	4770      	bx	lr
 8020d12:	4770      	bx	lr
 8020d14:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8020d18:	460b      	mov	r3, r1
 8020d1a:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8020d1e:	4684      	mov	ip, r0
 8020d20:	f8dc 8000 	ldr.w	r8, [ip]
 8020d24:	3310      	adds	r3, #16
 8020d26:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8020d2a:	f10c 0c10 	add.w	ip, ip, #16
 8020d2e:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8020d32:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8020d36:	f843 8c10 	str.w	r8, [r3, #-16]
 8020d3a:	f843 7c0c 	str.w	r7, [r3, #-12]
 8020d3e:	f843 6c08 	str.w	r6, [r3, #-8]
 8020d42:	f843 5c04 	str.w	r5, [r3, #-4]
 8020d46:	459e      	cmp	lr, r3
 8020d48:	d1ea      	bne.n	8020d20 <st_int8_copy+0xb8>
 8020d4a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8020d4e:	4421      	add	r1, r4
 8020d50:	4420      	add	r0, r4
 8020d52:	f002 0203 	and.w	r2, r2, #3
 8020d56:	e7bc      	b.n	8020cd2 <st_int8_copy+0x6a>
 8020d58:	0893      	lsrs	r3, r2, #2
 8020d5a:	f002 0203 	and.w	r2, r2, #3
 8020d5e:	e7b8      	b.n	8020cd2 <st_int8_copy+0x6a>

08020d60 <st_int8_reordered_no_shift_zero>:
 8020d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d62:	0897      	lsrs	r7, r2, #2
 8020d64:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8020d68:	d02f      	beq.n	8020dca <st_int8_reordered_no_shift_zero+0x6a>
 8020d6a:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8020d6e:	460c      	mov	r4, r1
 8020d70:	f850 cb04 	ldr.w	ip, [r0], #4
 8020d74:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 8020d78:	fa2f fe8e 	sxtb16	lr, lr
 8020d7c:	fade fe03 	ssub16	lr, lr, r3
 8020d80:	fa2f fc8c 	sxtb16	ip, ip
 8020d84:	fadc fc03 	ssub16	ip, ip, r3
 8020d88:	42a8      	cmp	r0, r5
 8020d8a:	f8c4 c000 	str.w	ip, [r4]
 8020d8e:	f8c4 e004 	str.w	lr, [r4, #4]
 8020d92:	f104 0408 	add.w	r4, r4, #8
 8020d96:	d1eb      	bne.n	8020d70 <st_int8_reordered_no_shift_zero+0x10>
 8020d98:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8020d9c:	f012 0203 	ands.w	r2, r2, #3
 8020da0:	d012      	beq.n	8020dc8 <st_int8_reordered_no_shift_zero+0x68>
 8020da2:	f995 0000 	ldrsb.w	r0, [r5]
 8020da6:	b273      	sxtb	r3, r6
 8020da8:	3a01      	subs	r2, #1
 8020daa:	eba0 0003 	sub.w	r0, r0, r3
 8020dae:	8008      	strh	r0, [r1, #0]
 8020db0:	d00a      	beq.n	8020dc8 <st_int8_reordered_no_shift_zero+0x68>
 8020db2:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8020db6:	2a01      	cmp	r2, #1
 8020db8:	eba0 0003 	sub.w	r0, r0, r3
 8020dbc:	8048      	strh	r0, [r1, #2]
 8020dbe:	d003      	beq.n	8020dc8 <st_int8_reordered_no_shift_zero+0x68>
 8020dc0:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8020dc4:	1ad3      	subs	r3, r2, r3
 8020dc6:	808b      	strh	r3, [r1, #4]
 8020dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020dca:	4605      	mov	r5, r0
 8020dcc:	e7e6      	b.n	8020d9c <st_int8_reordered_no_shift_zero+0x3c>
 8020dce:	bf00      	nop

08020dd0 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8020dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dd4:	b09d      	sub	sp, #116	; 0x74
 8020dd6:	4683      	mov	fp, r0
 8020dd8:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8020ddc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8020dde:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8020de2:	441d      	add	r5, r3
 8020de4:	9417      	str	r4, [sp, #92]	; 0x5c
 8020de6:	0864      	lsrs	r4, r4, #1
 8020de8:	9318      	str	r3, [sp, #96]	; 0x60
 8020dea:	910c      	str	r1, [sp, #48]	; 0x30
 8020dec:	9216      	str	r2, [sp, #88]	; 0x58
 8020dee:	9008      	str	r0, [sp, #32]
 8020df0:	9515      	str	r5, [sp, #84]	; 0x54
 8020df2:	9419      	str	r4, [sp, #100]	; 0x64
 8020df4:	f000 81d2 	beq.w	802119c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3cc>
 8020df8:	eb01 0640 	add.w	r6, r1, r0, lsl #1
 8020dfc:	4617      	mov	r7, r2
 8020dfe:	1e62      	subs	r2, r4, #1
 8020e00:	460c      	mov	r4, r1
 8020e02:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020e04:	f1a0 0310 	sub.w	r3, r0, #16
 8020e08:	b292      	uxth	r2, r2
 8020e0a:	46d9      	mov	r9, fp
 8020e0c:	3108      	adds	r1, #8
 8020e0e:	091b      	lsrs	r3, r3, #4
 8020e10:	960f      	str	r6, [sp, #60]	; 0x3c
 8020e12:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8020e16:	463a      	mov	r2, r7
 8020e18:	3301      	adds	r3, #1
 8020e1a:	3208      	adds	r2, #8
 8020e1c:	910e      	str	r1, [sp, #56]	; 0x38
 8020e1e:	4601      	mov	r1, r0
 8020e20:	3803      	subs	r0, #3
 8020e22:	9207      	str	r2, [sp, #28]
 8020e24:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020e26:	900d      	str	r0, [sp, #52]	; 0x34
 8020e28:	3204      	adds	r2, #4
 8020e2a:	9202      	str	r2, [sp, #8]
 8020e2c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020e2e:	3204      	adds	r2, #4
 8020e30:	9203      	str	r2, [sp, #12]
 8020e32:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020e34:	3204      	adds	r2, #4
 8020e36:	9204      	str	r2, [sp, #16]
 8020e38:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020e3a:	3201      	adds	r2, #1
 8020e3c:	9205      	str	r2, [sp, #20]
 8020e3e:	1c6a      	adds	r2, r5, #1
 8020e40:	9206      	str	r2, [sp, #24]
 8020e42:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8020e46:	9213      	str	r2, [sp, #76]	; 0x4c
 8020e48:	019a      	lsls	r2, r3, #6
 8020e4a:	9210      	str	r2, [sp, #64]	; 0x40
 8020e4c:	011a      	lsls	r2, r3, #4
 8020e4e:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8020e52:	9212      	str	r2, [sp, #72]	; 0x48
 8020e54:	9311      	str	r3, [sp, #68]	; 0x44
 8020e56:	1f0b      	subs	r3, r1, #4
 8020e58:	9314      	str	r3, [sp, #80]	; 0x50
 8020e5a:	9a07      	ldr	r2, [sp, #28]
 8020e5c:	9c08      	ldr	r4, [sp, #32]
 8020e5e:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8020e62:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8020e66:	2c0f      	cmp	r4, #15
 8020e68:	931b      	str	r3, [sp, #108]	; 0x6c
 8020e6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020e6c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020e6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8020e70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020e72:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8020e74:	f340 8285 	ble.w	8021382 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5b2>
 8020e78:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020e7a:	464d      	mov	r5, r9
 8020e7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020e7e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020e80:	f8d4 e000 	ldr.w	lr, [r4]
 8020e84:	f8d7 a000 	ldr.w	sl, [r7]
 8020e88:	f8d5 c000 	ldr.w	ip, [r5]
 8020e8c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8020e90:	fb2c 330e 	smlad	r3, ip, lr, r3
 8020e94:	fb2c 000a 	smlad	r0, ip, sl, r0
 8020e98:	fb28 2e0e 	smlad	lr, r8, lr, r2
 8020e9c:	fb28 110a 	smlad	r1, r8, sl, r1
 8020ea0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8020ea4:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8020ea8:	68aa      	ldr	r2, [r5, #8]
 8020eaa:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 8020eae:	fb22 330c 	smlad	r3, r2, ip, r3
 8020eb2:	fb22 0008 	smlad	r0, r2, r8, r0
 8020eb6:	fb2b ee0c 	smlad	lr, fp, ip, lr
 8020eba:	fb2b 1808 	smlad	r8, fp, r8, r1
 8020ebe:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8020ec2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8020ec6:	692a      	ldr	r2, [r5, #16]
 8020ec8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8020ecc:	fb22 330c 	smlad	r3, r2, ip, r3
 8020ed0:	fb22 000b 	smlad	r0, r2, fp, r0
 8020ed4:	fb2a ee0c 	smlad	lr, sl, ip, lr
 8020ed8:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 8020edc:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8020ee0:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8020ee4:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8020ee8:	69e9      	ldr	r1, [r5, #28]
 8020eea:	fb28 330c 	smlad	r3, r8, ip, r3
 8020eee:	fb28 000a 	smlad	r0, r8, sl, r0
 8020ef2:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8020ef6:	fb21 ba0a 	smlad	sl, r1, sl, fp
 8020efa:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8020efe:	6939      	ldr	r1, [r7, #16]
 8020f00:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8020f04:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8020f06:	fb28 330e 	smlad	r3, r8, lr, r3
 8020f0a:	fb28 0001 	smlad	r0, r8, r1, r0
 8020f0e:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8020f12:	fb22 a101 	smlad	r1, r2, r1, sl
 8020f16:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8020f1a:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8020f1e:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 8020f22:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8020f24:	fb28 330e 	smlad	r3, r8, lr, r3
 8020f28:	fb28 000a 	smlad	r0, r8, sl, r0
 8020f2c:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8020f30:	fb22 120a 	smlad	r2, r2, sl, r1
 8020f34:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8020f38:	f8d7 b018 	ldr.w	fp, [r7, #24]
 8020f3c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8020f40:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8020f42:	fb28 330e 	smlad	r3, r8, lr, r3
 8020f46:	fb28 080b 	smlad	r8, r8, fp, r0
 8020f4a:	fb21 ce0e 	smlad	lr, r1, lr, ip
 8020f4e:	fb21 210b 	smlad	r1, r1, fp, r2
 8020f52:	69e2      	ldr	r2, [r4, #28]
 8020f54:	3720      	adds	r7, #32
 8020f56:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8020f58:	3420      	adds	r4, #32
 8020f5a:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 8020f5e:	3540      	adds	r5, #64	; 0x40
 8020f60:	f857 bc04 	ldr.w	fp, [r7, #-4]
 8020f64:	fb20 3302 	smlad	r3, r0, r2, r3
 8020f68:	fb20 800b 	smlad	r0, r0, fp, r8
 8020f6c:	fb2c e202 	smlad	r2, ip, r2, lr
 8020f70:	fb2c 110b 	smlad	r1, ip, fp, r1
 8020f74:	42a6      	cmp	r6, r4
 8020f76:	d183      	bne.n	8020e80 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xb0>
 8020f78:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020f7a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8020f7e:	44a9      	add	r9, r5
 8020f80:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020f82:	9501      	str	r5, [sp, #4]
 8020f84:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020f86:	45ab      	cmp	fp, r5
 8020f88:	f280 8204 	bge.w	8021394 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 8020f8c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020f8e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8020f92:	eba5 050b 	sub.w	r5, r5, fp
 8020f96:	08ad      	lsrs	r5, r5, #2
 8020f98:	462e      	mov	r6, r5
 8020f9a:	950b      	str	r5, [sp, #44]	; 0x2c
 8020f9c:	464d      	mov	r5, r9
 8020f9e:	3601      	adds	r6, #1
 8020fa0:	00f7      	lsls	r7, r6, #3
 8020fa2:	960a      	str	r6, [sp, #40]	; 0x28
 8020fa4:	eb04 08c6 	add.w	r8, r4, r6, lsl #3
 8020fa8:	9709      	str	r7, [sp, #36]	; 0x24
 8020faa:	f8d4 e000 	ldr.w	lr, [r4]
 8020fae:	f8dc 7000 	ldr.w	r7, [ip]
 8020fb2:	f8d5 a000 	ldr.w	sl, [r5]
 8020fb6:	686e      	ldr	r6, [r5, #4]
 8020fb8:	fb2a 330e 	smlad	r3, sl, lr, r3
 8020fbc:	fb2a 0007 	smlad	r0, sl, r7, r0
 8020fc0:	fb26 220e 	smlad	r2, r6, lr, r2
 8020fc4:	fb26 1107 	smlad	r1, r6, r7, r1
 8020fc8:	6867      	ldr	r7, [r4, #4]
 8020fca:	f10c 0c08 	add.w	ip, ip, #8
 8020fce:	68ae      	ldr	r6, [r5, #8]
 8020fd0:	3408      	adds	r4, #8
 8020fd2:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8020fd6:	3510      	adds	r5, #16
 8020fd8:	f85c ac04 	ldr.w	sl, [ip, #-4]
 8020fdc:	fb26 3307 	smlad	r3, r6, r7, r3
 8020fe0:	fb26 000a 	smlad	r0, r6, sl, r0
 8020fe4:	fb2e 2207 	smlad	r2, lr, r7, r2
 8020fe8:	fb2e 110a 	smlad	r1, lr, sl, r1
 8020fec:	4544      	cmp	r4, r8
 8020fee:	d1dc      	bne.n	8020faa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 8020ff0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020ff2:	f10b 0b04 	add.w	fp, fp, #4
 8020ff6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020ff8:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 8020ffc:	9c01      	ldr	r4, [sp, #4]
 8020ffe:	442c      	add	r4, r5
 8021000:	9401      	str	r4, [sp, #4]
 8021002:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021004:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8021008:	9f08      	ldr	r7, [sp, #32]
 802100a:	455f      	cmp	r7, fp
 802100c:	dd54      	ble.n	80210b8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e8>
 802100e:	f9b8 5000 	ldrsh.w	r5, [r8]
 8021012:	f9b9 4002 	ldrsh.w	r4, [r9, #2]
 8021016:	f9b9 6000 	ldrsh.w	r6, [r9]
 802101a:	fb05 2204 	mla	r2, r5, r4, r2
 802101e:	fb06 3305 	mla	r3, r6, r5, r3
 8021022:	9d01      	ldr	r5, [sp, #4]
 8021024:	f9b5 5000 	ldrsh.w	r5, [r5]
 8021028:	fb05 1104 	mla	r1, r5, r4, r1
 802102c:	f10b 0401 	add.w	r4, fp, #1
 8021030:	fb06 0005 	mla	r0, r6, r5, r0
 8021034:	42a7      	cmp	r7, r4
 8021036:	dd3a      	ble.n	80210ae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8021038:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 802103c:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 8021040:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 8021044:	fb05 2204 	mla	r2, r5, r4, r2
 8021048:	fb06 3305 	mla	r3, r6, r5, r3
 802104c:	9d01      	ldr	r5, [sp, #4]
 802104e:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 8021052:	fb05 1104 	mla	r1, r5, r4, r1
 8021056:	f10b 0402 	add.w	r4, fp, #2
 802105a:	fb06 0005 	mla	r0, r6, r5, r0
 802105e:	42a7      	cmp	r7, r4
 8021060:	dd25      	ble.n	80210ae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8021062:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 8021066:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 802106a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 802106e:	fb05 2204 	mla	r2, r5, r4, r2
 8021072:	fb06 3305 	mla	r3, r6, r5, r3
 8021076:	9d01      	ldr	r5, [sp, #4]
 8021078:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 802107c:	fb05 1104 	mla	r1, r5, r4, r1
 8021080:	f10b 0403 	add.w	r4, fp, #3
 8021084:	fb06 0005 	mla	r0, r6, r5, r0
 8021088:	42a7      	cmp	r7, r4
 802108a:	dd10      	ble.n	80210ae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 802108c:	9c01      	ldr	r4, [sp, #4]
 802108e:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 8021092:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 8021096:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 802109a:	fb04 3305 	mla	r3, r4, r5, r3
 802109e:	fb04 0006 	mla	r0, r4, r6, r0
 80210a2:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 80210a6:	fb05 2204 	mla	r2, r5, r4, r2
 80210aa:	fb06 1104 	mla	r1, r6, r4, r1
 80210ae:	9c08      	ldr	r4, [sp, #32]
 80210b0:	eba4 0b0b 	sub.w	fp, r4, fp
 80210b4:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 80210b8:	9c02      	ldr	r4, [sp, #8]
 80210ba:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 80210be:	2c15      	cmp	r4, #21
 80210c0:	f340 80e8 	ble.w	8021294 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4c4>
 80210c4:	1ea6      	subs	r6, r4, #2
 80210c6:	2501      	movs	r5, #1
 80210c8:	3c01      	subs	r4, #1
 80210ca:	fa05 f606 	lsl.w	r6, r5, r6
 80210ce:	9d03      	ldr	r5, [sp, #12]
 80210d0:	f855 5c04 	ldr.w	r5, [r5, #-4]
 80210d4:	fb53 6305 	smmla	r3, r3, r5, r6
 80210d8:	fb50 6005 	smmla	r0, r0, r5, r6
 80210dc:	9d04      	ldr	r5, [sp, #16]
 80210de:	4123      	asrs	r3, r4
 80210e0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80210e4:	443b      	add	r3, r7
 80210e6:	f303 0307 	ssat	r3, #8, r3
 80210ea:	4120      	asrs	r0, r4
 80210ec:	9c05      	ldr	r4, [sp, #20]
 80210ee:	4438      	add	r0, r7
 80210f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80210f4:	f300 0007 	ssat	r0, #8, r0
 80210f8:	9b06      	ldr	r3, [sp, #24]
 80210fa:	f803 0c01 	strb.w	r0, [r3, #-1]
 80210fe:	9b02      	ldr	r3, [sp, #8]
 8021100:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8021104:	2b15      	cmp	r3, #21
 8021106:	f340 80e5 	ble.w	80212d4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x504>
 802110a:	1e9c      	subs	r4, r3, #2
 802110c:	2001      	movs	r0, #1
 802110e:	3b01      	subs	r3, #1
 8021110:	fa00 f404 	lsl.w	r4, r0, r4
 8021114:	9803      	ldr	r0, [sp, #12]
 8021116:	6800      	ldr	r0, [r0, #0]
 8021118:	fb52 4200 	smmla	r2, r2, r0, r4
 802111c:	fb51 4100 	smmla	r1, r1, r0, r4
 8021120:	9804      	ldr	r0, [sp, #16]
 8021122:	411a      	asrs	r2, r3
 8021124:	6805      	ldr	r5, [r0, #0]
 8021126:	442a      	add	r2, r5
 8021128:	f302 0207 	ssat	r2, #8, r2
 802112c:	4119      	asrs	r1, r3
 802112e:	9b05      	ldr	r3, [sp, #20]
 8021130:	4429      	add	r1, r5
 8021132:	701a      	strb	r2, [r3, #0]
 8021134:	f301 0107 	ssat	r1, #8, r1
 8021138:	9b06      	ldr	r3, [sp, #24]
 802113a:	7019      	strb	r1, [r3, #0]
 802113c:	9a07      	ldr	r2, [sp, #28]
 802113e:	9b02      	ldr	r3, [sp, #8]
 8021140:	3208      	adds	r2, #8
 8021142:	3304      	adds	r3, #4
 8021144:	9207      	str	r2, [sp, #28]
 8021146:	9a03      	ldr	r2, [sp, #12]
 8021148:	9302      	str	r3, [sp, #8]
 802114a:	3208      	adds	r2, #8
 802114c:	9203      	str	r2, [sp, #12]
 802114e:	9a04      	ldr	r2, [sp, #16]
 8021150:	3208      	adds	r2, #8
 8021152:	9204      	str	r2, [sp, #16]
 8021154:	9a05      	ldr	r2, [sp, #20]
 8021156:	3202      	adds	r2, #2
 8021158:	9205      	str	r2, [sp, #20]
 802115a:	9a06      	ldr	r2, [sp, #24]
 802115c:	3202      	adds	r2, #2
 802115e:	9206      	str	r2, [sp, #24]
 8021160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021162:	4293      	cmp	r3, r2
 8021164:	f47f ae79 	bne.w	8020e5a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x8a>
 8021168:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802116a:	46cb      	mov	fp, r9
 802116c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802116e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8021172:	9229      	str	r2, [sp, #164]	; 0xa4
 8021174:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021176:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802117a:	922a      	str	r2, [sp, #168]	; 0xa8
 802117c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802117e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8021182:	922b      	str	r2, [sp, #172]	; 0xac
 8021184:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8021186:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 802118a:	9215      	str	r2, [sp, #84]	; 0x54
 802118c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802118e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8021192:	9216      	str	r2, [sp, #88]	; 0x58
 8021194:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802119a:	9328      	str	r3, [sp, #160]	; 0xa0
 802119c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802119e:	07db      	lsls	r3, r3, #31
 80211a0:	d56f      	bpl.n	8021282 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 80211a2:	9a08      	ldr	r2, [sp, #32]
 80211a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80211a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80211a8:	0896      	lsrs	r6, r2, #2
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 80211b0:	f000 812e 	beq.w	8021410 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x640>
 80211b4:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 80211b8:	463c      	mov	r4, r7
 80211ba:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 80211be:	461a      	mov	r2, r3
 80211c0:	f8db 5000 	ldr.w	r5, [fp]
 80211c4:	f10b 0b08 	add.w	fp, fp, #8
 80211c8:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 80211cc:	f8d0 e000 	ldr.w	lr, [r0]
 80211d0:	fb25 330e 	smlad	r3, r5, lr, r3
 80211d4:	f8d4 e000 	ldr.w	lr, [r4]
 80211d8:	fb25 220e 	smlad	r2, r5, lr, r2
 80211dc:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80211e0:	3408      	adds	r4, #8
 80211e2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80211e6:	3008      	adds	r0, #8
 80211e8:	fb21 330e 	smlad	r3, r1, lr, r3
 80211ec:	fb21 2205 	smlad	r2, r1, r5, r2
 80211f0:	45b3      	cmp	fp, r6
 80211f2:	d1e5      	bne.n	80211c0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3f0>
 80211f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80211f6:	4467      	add	r7, ip
 80211f8:	4461      	add	r1, ip
 80211fa:	910c      	str	r1, [sp, #48]	; 0x30
 80211fc:	9908      	ldr	r1, [sp, #32]
 80211fe:	f011 0103 	ands.w	r1, r1, #3
 8021202:	d01d      	beq.n	8021240 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 8021204:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021206:	3901      	subs	r1, #1
 8021208:	f9b6 0000 	ldrsh.w	r0, [r6]
 802120c:	882c      	ldrh	r4, [r5, #0]
 802120e:	b289      	uxth	r1, r1
 8021210:	fb14 3300 	smlabb	r3, r4, r0, r3
 8021214:	883c      	ldrh	r4, [r7, #0]
 8021216:	fb14 2200 	smlabb	r2, r4, r0, r2
 802121a:	b189      	cbz	r1, 8021240 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 802121c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8021220:	2901      	cmp	r1, #1
 8021222:	886c      	ldrh	r4, [r5, #2]
 8021224:	fb14 3300 	smlabb	r3, r4, r0, r3
 8021228:	887c      	ldrh	r4, [r7, #2]
 802122a:	fb14 2200 	smlabb	r2, r4, r0, r2
 802122e:	d007      	beq.n	8021240 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x470>
 8021230:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8021234:	88a8      	ldrh	r0, [r5, #4]
 8021236:	fb11 3300 	smlabb	r3, r1, r0, r3
 802123a:	88b8      	ldrh	r0, [r7, #4]
 802123c:	fb11 2200 	smlabb	r2, r1, r0, r2
 8021240:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021242:	f9b1 1000 	ldrsh.w	r1, [r1]
 8021246:	2915      	cmp	r1, #21
 8021248:	f340 80a6 	ble.w	8021398 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c8>
 802124c:	1e8d      	subs	r5, r1, #2
 802124e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8021250:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8021252:	3901      	subs	r1, #1
 8021254:	2601      	movs	r6, #1
 8021256:	6800      	ldr	r0, [r0, #0]
 8021258:	6824      	ldr	r4, [r4, #0]
 802125a:	40ae      	lsls	r6, r5
 802125c:	fb53 6500 	smmla	r5, r3, r0, r6
 8021260:	fb52 6300 	smmla	r3, r2, r0, r6
 8021264:	fa45 f201 	asr.w	r2, r5, r1
 8021268:	4422      	add	r2, r4
 802126a:	f302 0207 	ssat	r2, #8, r2
 802126e:	410b      	asrs	r3, r1
 8021270:	982b      	ldr	r0, [sp, #172]	; 0xac
 8021272:	4423      	add	r3, r4
 8021274:	f800 2b01 	strb.w	r2, [r0], #1
 8021278:	f303 0307 	ssat	r3, #8, r3
 802127c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802127e:	902b      	str	r0, [sp, #172]	; 0xac
 8021280:	7013      	strb	r3, [r2, #0]
 8021282:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 8021286:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 802128a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802128c:	4418      	add	r0, r3
 802128e:	b01d      	add	sp, #116	; 0x74
 8021290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021294:	2c00      	cmp	r4, #0
 8021296:	dd34      	ble.n	8021302 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x532>
 8021298:	9d03      	ldr	r5, [sp, #12]
 802129a:	005b      	lsls	r3, r3, #1
 802129c:	9e04      	ldr	r6, [sp, #16]
 802129e:	0040      	lsls	r0, r0, #1
 80212a0:	f855 5c04 	ldr.w	r5, [r5, #-4]
 80212a4:	f856 6c04 	ldr.w	r6, [r6, #-4]
 80212a8:	fb53 6305 	smmla	r3, r3, r5, r6
 80212ac:	fb50 6005 	smmla	r0, r0, r5, r6
 80212b0:	4123      	asrs	r3, r4
 80212b2:	f303 0307 	ssat	r3, #8, r3
 80212b6:	4120      	asrs	r0, r4
 80212b8:	9c05      	ldr	r4, [sp, #20]
 80212ba:	f804 3c01 	strb.w	r3, [r4, #-1]
 80212be:	f300 0007 	ssat	r0, #8, r0
 80212c2:	9b06      	ldr	r3, [sp, #24]
 80212c4:	f803 0c01 	strb.w	r0, [r3, #-1]
 80212c8:	9b02      	ldr	r3, [sp, #8]
 80212ca:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 80212ce:	2b15      	cmp	r3, #21
 80212d0:	f73f af1b 	bgt.w	802110a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33a>
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	dd36      	ble.n	8021346 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x576>
 80212d8:	9803      	ldr	r0, [sp, #12]
 80212da:	0052      	lsls	r2, r2, #1
 80212dc:	9c04      	ldr	r4, [sp, #16]
 80212de:	0049      	lsls	r1, r1, #1
 80212e0:	6800      	ldr	r0, [r0, #0]
 80212e2:	6824      	ldr	r4, [r4, #0]
 80212e4:	fb52 4200 	smmla	r2, r2, r0, r4
 80212e8:	fb51 4100 	smmla	r1, r1, r0, r4
 80212ec:	411a      	asrs	r2, r3
 80212ee:	f302 0207 	ssat	r2, #8, r2
 80212f2:	4119      	asrs	r1, r3
 80212f4:	9b05      	ldr	r3, [sp, #20]
 80212f6:	701a      	strb	r2, [r3, #0]
 80212f8:	f301 0107 	ssat	r1, #8, r1
 80212fc:	9b06      	ldr	r3, [sp, #24]
 80212fe:	7019      	strb	r1, [r3, #0]
 8021300:	e71c      	b.n	802113c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36c>
 8021302:	f1c4 0401 	rsb	r4, r4, #1
 8021306:	fa03 f504 	lsl.w	r5, r3, r4
 802130a:	f305 051f 	ssat	r5, #32, r5
 802130e:	9b03      	ldr	r3, [sp, #12]
 8021310:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8021314:	fb55 f516 	smmulr	r5, r5, r6
 8021318:	40a0      	lsls	r0, r4
 802131a:	f300 001f 	ssat	r0, #32, r0
 802131e:	fb50 f016 	smmulr	r0, r0, r6
 8021322:	9c04      	ldr	r4, [sp, #16]
 8021324:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021328:	442b      	add	r3, r5
 802132a:	f303 0307 	ssat	r3, #8, r3
 802132e:	9d05      	ldr	r5, [sp, #20]
 8021330:	f805 3c01 	strb.w	r3, [r5, #-1]
 8021334:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021338:	4403      	add	r3, r0
 802133a:	f303 0307 	ssat	r3, #8, r3
 802133e:	9806      	ldr	r0, [sp, #24]
 8021340:	f800 3c01 	strb.w	r3, [r0, #-1]
 8021344:	e6db      	b.n	80210fe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x32e>
 8021346:	f1c3 0301 	rsb	r3, r3, #1
 802134a:	fa02 f003 	lsl.w	r0, r2, r3
 802134e:	f300 001f 	ssat	r0, #32, r0
 8021352:	9a03      	ldr	r2, [sp, #12]
 8021354:	6814      	ldr	r4, [r2, #0]
 8021356:	fb50 f014 	smmulr	r0, r0, r4
 802135a:	fa01 f303 	lsl.w	r3, r1, r3
 802135e:	f303 021f 	ssat	r2, #32, r3
 8021362:	fb52 f214 	smmulr	r2, r2, r4
 8021366:	9904      	ldr	r1, [sp, #16]
 8021368:	680b      	ldr	r3, [r1, #0]
 802136a:	4403      	add	r3, r0
 802136c:	f303 0307 	ssat	r3, #8, r3
 8021370:	9805      	ldr	r0, [sp, #20]
 8021372:	7003      	strb	r3, [r0, #0]
 8021374:	680b      	ldr	r3, [r1, #0]
 8021376:	4413      	add	r3, r2
 8021378:	f303 0307 	ssat	r3, #8, r3
 802137c:	9a06      	ldr	r2, [sp, #24]
 802137e:	7013      	strb	r3, [r2, #0]
 8021380:	e6dc      	b.n	802113c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x36c>
 8021382:	f04f 0b00 	mov.w	fp, #0
 8021386:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021388:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802138a:	45ab      	cmp	fp, r5
 802138c:	9401      	str	r4, [sp, #4]
 802138e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021390:	f6ff adfc 	blt.w	8020f8c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 8021394:	46a0      	mov	r8, r4
 8021396:	e637      	b.n	8021008 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 8021398:	2900      	cmp	r1, #0
 802139a:	dd1a      	ble.n	80213d2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x602>
 802139c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802139e:	005b      	lsls	r3, r3, #1
 80213a0:	0052      	lsls	r2, r2, #1
 80213a2:	6804      	ldr	r4, [r0, #0]
 80213a4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80213a6:	6805      	ldr	r5, [r0, #0]
 80213a8:	fb53 5004 	smmla	r0, r3, r4, r5
 80213ac:	fb52 5304 	smmla	r3, r2, r4, r5
 80213b0:	fa40 f201 	asr.w	r2, r0, r1
 80213b4:	f302 0207 	ssat	r2, #8, r2
 80213b8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80213ba:	f800 2b01 	strb.w	r2, [r0], #1
 80213be:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80213c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80213c4:	4113      	asrs	r3, r2
 80213c6:	f303 0307 	ssat	r3, #8, r3
 80213ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80213cc:	902b      	str	r0, [sp, #172]	; 0xac
 80213ce:	7013      	strb	r3, [r2, #0]
 80213d0:	e757      	b.n	8021282 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 80213d2:	f1c1 0101 	rsb	r1, r1, #1
 80213d6:	408b      	lsls	r3, r1
 80213d8:	f303 031f 	ssat	r3, #32, r3
 80213dc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80213de:	6800      	ldr	r0, [r0, #0]
 80213e0:	fb53 f310 	smmulr	r3, r3, r0
 80213e4:	408a      	lsls	r2, r1
 80213e6:	f302 021f 	ssat	r2, #32, r2
 80213ea:	fb52 f210 	smmulr	r2, r2, r0
 80213ee:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80213f0:	6809      	ldr	r1, [r1, #0]
 80213f2:	440b      	add	r3, r1
 80213f4:	f303 0307 	ssat	r3, #8, r3
 80213f8:	992b      	ldr	r1, [sp, #172]	; 0xac
 80213fa:	f801 3b01 	strb.w	r3, [r1], #1
 80213fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021400:	681b      	ldr	r3, [r3, #0]
 8021402:	4413      	add	r3, r2
 8021404:	f303 0307 	ssat	r3, #8, r3
 8021408:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802140a:	912b      	str	r1, [sp, #172]	; 0xac
 802140c:	7013      	strb	r3, [r2, #0]
 802140e:	e738      	b.n	8021282 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b2>
 8021410:	465e      	mov	r6, fp
 8021412:	461a      	mov	r2, r3
 8021414:	e6f2      	b.n	80211fc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x42c>
 8021416:	bf00      	nop

08021418 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8021418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802141c:	b093      	sub	sp, #76	; 0x4c
 802141e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8021422:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 8021426:	085d      	lsrs	r5, r3, #1
 8021428:	930e      	str	r3, [sp, #56]	; 0x38
 802142a:	9107      	str	r1, [sp, #28]
 802142c:	920d      	str	r2, [sp, #52]	; 0x34
 802142e:	9405      	str	r4, [sp, #20]
 8021430:	950f      	str	r5, [sp, #60]	; 0x3c
 8021432:	f000 81fc 	beq.w	802182e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x416>
 8021436:	4616      	mov	r6, r2
 8021438:	1e6a      	subs	r2, r5, #1
 802143a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802143c:	460f      	mov	r7, r1
 802143e:	b292      	uxth	r2, r2
 8021440:	f1a4 0310 	sub.w	r3, r4, #16
 8021444:	1d29      	adds	r1, r5, #4
 8021446:	f106 0a08 	add.w	sl, r6, #8
 802144a:	091b      	lsrs	r3, r3, #4
 802144c:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8021450:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021452:	3301      	adds	r3, #1
 8021454:	f102 0b02 	add.w	fp, r2, #2
 8021458:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802145a:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 802145e:	9509      	str	r5, [sp, #36]	; 0x24
 8021460:	3204      	adds	r2, #4
 8021462:	1ee5      	subs	r5, r4, #3
 8021464:	9202      	str	r2, [sp, #8]
 8021466:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021468:	9508      	str	r5, [sp, #32]
 802146a:	3208      	adds	r2, #8
 802146c:	9204      	str	r2, [sp, #16]
 802146e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021470:	3208      	adds	r2, #8
 8021472:	9201      	str	r2, [sp, #4]
 8021474:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021476:	3202      	adds	r2, #2
 8021478:	9203      	str	r2, [sp, #12]
 802147a:	019a      	lsls	r2, r3, #6
 802147c:	011b      	lsls	r3, r3, #4
 802147e:	920a      	str	r2, [sp, #40]	; 0x28
 8021480:	930b      	str	r3, [sp, #44]	; 0x2c
 8021482:	1f23      	subs	r3, r4, #4
 8021484:	930c      	str	r3, [sp, #48]	; 0x30
 8021486:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 802148a:	9905      	ldr	r1, [sp, #20]
 802148c:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8021490:	9311      	str	r3, [sp, #68]	; 0x44
 8021492:	290f      	cmp	r1, #15
 8021494:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021496:	9211      	str	r2, [sp, #68]	; 0x44
 8021498:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802149a:	9c07      	ldr	r4, [sp, #28]
 802149c:	f340 819c 	ble.w	80217d8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c0>
 80214a0:	4601      	mov	r1, r0
 80214a2:	f8d4 c000 	ldr.w	ip, [r4]
 80214a6:	680e      	ldr	r6, [r1, #0]
 80214a8:	fb26 330c 	smlad	r3, r6, ip, r3
 80214ac:	684d      	ldr	r5, [r1, #4]
 80214ae:	fb25 220c 	smlad	r2, r5, ip, r2
 80214b2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80214b6:	688e      	ldr	r6, [r1, #8]
 80214b8:	fb26 360c 	smlad	r6, r6, ip, r3
 80214bc:	68cd      	ldr	r5, [r1, #12]
 80214be:	fb25 250c 	smlad	r5, r5, ip, r2
 80214c2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80214c6:	690b      	ldr	r3, [r1, #16]
 80214c8:	fb23 660c 	smlad	r6, r3, ip, r6
 80214cc:	694a      	ldr	r2, [r1, #20]
 80214ce:	fb22 550c 	smlad	r5, r2, ip, r5
 80214d2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80214d6:	698b      	ldr	r3, [r1, #24]
 80214d8:	fb23 630c 	smlad	r3, r3, ip, r6
 80214dc:	69ca      	ldr	r2, [r1, #28]
 80214de:	fb22 520c 	smlad	r2, r2, ip, r5
 80214e2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80214e6:	6a0e      	ldr	r6, [r1, #32]
 80214e8:	fb26 330c 	smlad	r3, r6, ip, r3
 80214ec:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80214ee:	fb25 220c 	smlad	r2, r5, ip, r2
 80214f2:	f8d4 c014 	ldr.w	ip, [r4, #20]
 80214f6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80214f8:	fb26 360c 	smlad	r6, r6, ip, r3
 80214fc:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80214fe:	fb25 250c 	smlad	r5, r5, ip, r2
 8021502:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8021506:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8021508:	fb23 660c 	smlad	r6, r3, ip, r6
 802150c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 802150e:	fb22 550c 	smlad	r5, r2, ip, r5
 8021512:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8021516:	3140      	adds	r1, #64	; 0x40
 8021518:	f851 3c08 	ldr.w	r3, [r1, #-8]
 802151c:	3420      	adds	r4, #32
 802151e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8021522:	fb23 630c 	smlad	r3, r3, ip, r6
 8021526:	fb22 520c 	smlad	r2, r2, ip, r5
 802152a:	42bc      	cmp	r4, r7
 802152c:	d1b9      	bne.n	80214a2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 802152e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021530:	463c      	mov	r4, r7
 8021532:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8021536:	4408      	add	r0, r1
 8021538:	9908      	ldr	r1, [sp, #32]
 802153a:	458e      	cmp	lr, r1
 802153c:	da25      	bge.n	802158a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 802153e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021540:	eba1 090e 	sub.w	r9, r1, lr
 8021544:	4601      	mov	r1, r0
 8021546:	ea4f 0999 	mov.w	r9, r9, lsr #2
 802154a:	f109 0501 	add.w	r5, r9, #1
 802154e:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 8021552:	9506      	str	r5, [sp, #24]
 8021554:	6825      	ldr	r5, [r4, #0]
 8021556:	680e      	ldr	r6, [r1, #0]
 8021558:	fb26 3305 	smlad	r3, r6, r5, r3
 802155c:	684e      	ldr	r6, [r1, #4]
 802155e:	fb26 2505 	smlad	r5, r6, r5, r2
 8021562:	6866      	ldr	r6, [r4, #4]
 8021564:	3110      	adds	r1, #16
 8021566:	f851 cc08 	ldr.w	ip, [r1, #-8]
 802156a:	3408      	adds	r4, #8
 802156c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8021570:	fb2c 3306 	smlad	r3, ip, r6, r3
 8021574:	fb22 5206 	smlad	r2, r2, r6, r5
 8021578:	45a0      	cmp	r8, r4
 802157a:	d1eb      	bne.n	8021554 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 802157c:	9906      	ldr	r1, [sp, #24]
 802157e:	f10e 0e04 	add.w	lr, lr, #4
 8021582:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8021586:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 802158a:	9e05      	ldr	r6, [sp, #20]
 802158c:	4576      	cmp	r6, lr
 802158e:	dd30      	ble.n	80215f2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1da>
 8021590:	f9b4 1000 	ldrsh.w	r1, [r4]
 8021594:	8805      	ldrh	r5, [r0, #0]
 8021596:	fb15 3301 	smlabb	r3, r5, r1, r3
 802159a:	8845      	ldrh	r5, [r0, #2]
 802159c:	fb11 2205 	smlabb	r2, r1, r5, r2
 80215a0:	f10e 0101 	add.w	r1, lr, #1
 80215a4:	428e      	cmp	r6, r1
 80215a6:	dd1f      	ble.n	80215e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 80215a8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80215ac:	8885      	ldrh	r5, [r0, #4]
 80215ae:	fb15 3301 	smlabb	r3, r5, r1, r3
 80215b2:	88c5      	ldrh	r5, [r0, #6]
 80215b4:	fb11 2205 	smlabb	r2, r1, r5, r2
 80215b8:	f10e 0102 	add.w	r1, lr, #2
 80215bc:	428e      	cmp	r6, r1
 80215be:	dd13      	ble.n	80215e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 80215c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80215c4:	8905      	ldrh	r5, [r0, #8]
 80215c6:	fb15 3301 	smlabb	r3, r5, r1, r3
 80215ca:	8945      	ldrh	r5, [r0, #10]
 80215cc:	fb11 2205 	smlabb	r2, r1, r5, r2
 80215d0:	f10e 0103 	add.w	r1, lr, #3
 80215d4:	428e      	cmp	r6, r1
 80215d6:	dd07      	ble.n	80215e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1d0>
 80215d8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80215dc:	8984      	ldrh	r4, [r0, #12]
 80215de:	fb14 3301 	smlabb	r3, r4, r1, r3
 80215e2:	89c4      	ldrh	r4, [r0, #14]
 80215e4:	fb11 2204 	smlabb	r2, r1, r4, r2
 80215e8:	9905      	ldr	r1, [sp, #20]
 80215ea:	eba1 0e0e 	sub.w	lr, r1, lr
 80215ee:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 80215f2:	9902      	ldr	r1, [sp, #8]
 80215f4:	f931 5c04 	ldrsh.w	r5, [r1, #-4]
 80215f8:	2d15      	cmp	r5, #21
 80215fa:	f340 80b0 	ble.w	802175e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 80215fe:	9e04      	ldr	r6, [sp, #16]
 8021600:	1eac      	subs	r4, r5, #2
 8021602:	2101      	movs	r1, #1
 8021604:	3d01      	subs	r5, #1
 8021606:	f1a6 0e04 	sub.w	lr, r6, #4
 802160a:	fa01 f404 	lsl.w	r4, r1, r4
 802160e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8021612:	fb53 4401 	smmla	r4, r3, r1, r4
 8021616:	9b01      	ldr	r3, [sp, #4]
 8021618:	fa44 f505 	asr.w	r5, r4, r5
 802161c:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8021620:	1f1e      	subs	r6, r3, #4
 8021622:	442c      	add	r4, r5
 8021624:	f304 0407 	ssat	r4, #8, r4
 8021628:	f80b 4c02 	strb.w	r4, [fp, #-2]
 802162c:	9b03      	ldr	r3, [sp, #12]
 802162e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021632:	2b15      	cmp	r3, #21
 8021634:	f340 8085 	ble.w	8021742 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 8021638:	1e9c      	subs	r4, r3, #2
 802163a:	2501      	movs	r5, #1
 802163c:	3b01      	subs	r3, #1
 802163e:	6836      	ldr	r6, [r6, #0]
 8021640:	f8de 1000 	ldr.w	r1, [lr]
 8021644:	fa05 f404 	lsl.w	r4, r5, r4
 8021648:	fb52 4201 	smmla	r2, r2, r1, r4
 802164c:	411a      	asrs	r2, r3
 802164e:	4432      	add	r2, r6
 8021650:	f302 0207 	ssat	r2, #8, r2
 8021654:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8021658:	9b02      	ldr	r3, [sp, #8]
 802165a:	f10b 0b02 	add.w	fp, fp, #2
 802165e:	f10a 0a08 	add.w	sl, sl, #8
 8021662:	3304      	adds	r3, #4
 8021664:	9302      	str	r3, [sp, #8]
 8021666:	9b04      	ldr	r3, [sp, #16]
 8021668:	3308      	adds	r3, #8
 802166a:	9304      	str	r3, [sp, #16]
 802166c:	9b01      	ldr	r3, [sp, #4]
 802166e:	3308      	adds	r3, #8
 8021670:	9301      	str	r3, [sp, #4]
 8021672:	9b03      	ldr	r3, [sp, #12]
 8021674:	3304      	adds	r3, #4
 8021676:	9303      	str	r3, [sp, #12]
 8021678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802167a:	459b      	cmp	fp, r3
 802167c:	f47f af03 	bne.w	8021486 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6e>
 8021680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021682:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021684:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021688:	921e      	str	r2, [sp, #120]	; 0x78
 802168a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802168c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8021690:	921f      	str	r2, [sp, #124]	; 0x7c
 8021692:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021694:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8021698:	9220      	str	r2, [sp, #128]	; 0x80
 802169a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802169c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80216a0:	920d      	str	r2, [sp, #52]	; 0x34
 80216a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80216a4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80216a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80216aa:	07db      	lsls	r3, r3, #31
 80216ac:	d545      	bpl.n	802173a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x322>
 80216ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80216b0:	681a      	ldr	r2, [r3, #0]
 80216b2:	9b05      	ldr	r3, [sp, #20]
 80216b4:	089e      	lsrs	r6, r3, #2
 80216b6:	d014      	beq.n	80216e2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ca>
 80216b8:	00f7      	lsls	r7, r6, #3
 80216ba:	9b07      	ldr	r3, [sp, #28]
 80216bc:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80216c0:	6805      	ldr	r5, [r0, #0]
 80216c2:	3008      	adds	r0, #8
 80216c4:	f850 4c04 	ldr.w	r4, [r0, #-4]
 80216c8:	f8d3 c000 	ldr.w	ip, [r3]
 80216cc:	fb25 220c 	smlad	r2, r5, ip, r2
 80216d0:	685d      	ldr	r5, [r3, #4]
 80216d2:	3308      	adds	r3, #8
 80216d4:	fb24 2205 	smlad	r2, r4, r5, r2
 80216d8:	4286      	cmp	r6, r0
 80216da:	d1f1      	bne.n	80216c0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a8>
 80216dc:	9b07      	ldr	r3, [sp, #28]
 80216de:	443b      	add	r3, r7
 80216e0:	9307      	str	r3, [sp, #28]
 80216e2:	9b05      	ldr	r3, [sp, #20]
 80216e4:	f013 0303 	ands.w	r3, r3, #3
 80216e8:	d011      	beq.n	802170e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 80216ea:	3b01      	subs	r3, #1
 80216ec:	9e07      	ldr	r6, [sp, #28]
 80216ee:	8804      	ldrh	r4, [r0, #0]
 80216f0:	8835      	ldrh	r5, [r6, #0]
 80216f2:	b29b      	uxth	r3, r3
 80216f4:	fb15 2204 	smlabb	r2, r5, r4, r2
 80216f8:	b14b      	cbz	r3, 802170e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 80216fa:	8845      	ldrh	r5, [r0, #2]
 80216fc:	2b01      	cmp	r3, #1
 80216fe:	8874      	ldrh	r4, [r6, #2]
 8021700:	fb15 2204 	smlabb	r2, r5, r4, r2
 8021704:	d003      	beq.n	802170e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f6>
 8021706:	8880      	ldrh	r0, [r0, #4]
 8021708:	88b3      	ldrh	r3, [r6, #4]
 802170a:	fb10 2203 	smlabb	r2, r0, r3, r2
 802170e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021714:	2b15      	cmp	r3, #21
 8021716:	dd62      	ble.n	80217de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c6>
 8021718:	9c20      	ldr	r4, [sp, #128]	; 0x80
 802171a:	1e9e      	subs	r6, r3, #2
 802171c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802171e:	3b01      	subs	r3, #1
 8021720:	6825      	ldr	r5, [r4, #0]
 8021722:	2401      	movs	r4, #1
 8021724:	6800      	ldr	r0, [r0, #0]
 8021726:	40b4      	lsls	r4, r6
 8021728:	fb52 4200 	smmla	r2, r2, r0, r4
 802172c:	fa42 f303 	asr.w	r3, r2, r3
 8021730:	442b      	add	r3, r5
 8021732:	f303 0307 	ssat	r3, #8, r3
 8021736:	f801 3b01 	strb.w	r3, [r1], #1
 802173a:	4608      	mov	r0, r1
 802173c:	b013      	add	sp, #76	; 0x4c
 802173e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021742:	2b00      	cmp	r3, #0
 8021744:	dd21      	ble.n	802178a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x372>
 8021746:	f8de 1000 	ldr.w	r1, [lr]
 802174a:	0052      	lsls	r2, r2, #1
 802174c:	6834      	ldr	r4, [r6, #0]
 802174e:	fb52 4201 	smmla	r2, r2, r1, r4
 8021752:	411a      	asrs	r2, r3
 8021754:	f302 0307 	ssat	r3, #8, r2
 8021758:	f80b 3c01 	strb.w	r3, [fp, #-1]
 802175c:	e77c      	b.n	8021658 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 802175e:	2d00      	cmp	r5, #0
 8021760:	dd24      	ble.n	80217ac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x394>
 8021762:	9e04      	ldr	r6, [sp, #16]
 8021764:	005b      	lsls	r3, r3, #1
 8021766:	9c01      	ldr	r4, [sp, #4]
 8021768:	f856 1c08 	ldr.w	r1, [r6, #-8]
 802176c:	f1a6 0e04 	sub.w	lr, r6, #4
 8021770:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8021774:	fb53 4301 	smmla	r3, r3, r1, r4
 8021778:	9c01      	ldr	r4, [sp, #4]
 802177a:	fa43 f505 	asr.w	r5, r3, r5
 802177e:	1f26      	subs	r6, r4, #4
 8021780:	f305 0507 	ssat	r5, #8, r5
 8021784:	f80b 5c02 	strb.w	r5, [fp, #-2]
 8021788:	e750      	b.n	802162c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 802178a:	f1c3 0301 	rsb	r3, r3, #1
 802178e:	fa02 f303 	lsl.w	r3, r2, r3
 8021792:	f303 031f 	ssat	r3, #32, r3
 8021796:	f8de 2000 	ldr.w	r2, [lr]
 802179a:	fb53 f312 	smmulr	r3, r3, r2
 802179e:	6832      	ldr	r2, [r6, #0]
 80217a0:	441a      	add	r2, r3
 80217a2:	f302 0207 	ssat	r2, #8, r2
 80217a6:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80217aa:	e755      	b.n	8021658 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x240>
 80217ac:	f1c5 0501 	rsb	r5, r5, #1
 80217b0:	40ab      	lsls	r3, r5
 80217b2:	f303 031f 	ssat	r3, #32, r3
 80217b6:	9904      	ldr	r1, [sp, #16]
 80217b8:	f1a1 0e04 	sub.w	lr, r1, #4
 80217bc:	f851 1c08 	ldr.w	r1, [r1, #-8]
 80217c0:	fb53 f111 	smmulr	r1, r3, r1
 80217c4:	9c01      	ldr	r4, [sp, #4]
 80217c6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80217ca:	1f26      	subs	r6, r4, #4
 80217cc:	440b      	add	r3, r1
 80217ce:	f303 0307 	ssat	r3, #8, r3
 80217d2:	f80b 3c02 	strb.w	r3, [fp, #-2]
 80217d6:	e729      	b.n	802162c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x214>
 80217d8:	f04f 0e00 	mov.w	lr, #0
 80217dc:	e6ac      	b.n	8021538 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x120>
 80217de:	2b00      	cmp	r3, #0
 80217e0:	dd10      	ble.n	8021804 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ec>
 80217e2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80217e4:	0052      	lsls	r2, r2, #1
 80217e6:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80217e8:	6800      	ldr	r0, [r0, #0]
 80217ea:	6824      	ldr	r4, [r4, #0]
 80217ec:	fb52 4200 	smmla	r2, r2, r0, r4
 80217f0:	fa42 f303 	asr.w	r3, r2, r3
 80217f4:	f303 0307 	ssat	r3, #8, r3
 80217f8:	f801 3b01 	strb.w	r3, [r1], #1
 80217fc:	4608      	mov	r0, r1
 80217fe:	b013      	add	sp, #76	; 0x4c
 8021800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021804:	f1c3 0301 	rsb	r3, r3, #1
 8021808:	fa02 f303 	lsl.w	r3, r2, r3
 802180c:	f303 031f 	ssat	r3, #32, r3
 8021810:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021812:	6812      	ldr	r2, [r2, #0]
 8021814:	fb53 f312 	smmulr	r3, r3, r2
 8021818:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802181a:	6812      	ldr	r2, [r2, #0]
 802181c:	4413      	add	r3, r2
 802181e:	f303 0307 	ssat	r3, #8, r3
 8021822:	f801 3b01 	strb.w	r3, [r1], #1
 8021826:	4608      	mov	r0, r1
 8021828:	b013      	add	sp, #76	; 0x4c
 802182a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802182e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8021830:	e73a      	b.n	80216a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x290>
 8021832:	bf00      	nop

08021834 <st_int8_avepool>:
 8021834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021838:	b095      	sub	sp, #84	; 0x54
 802183a:	4699      	mov	r9, r3
 802183c:	4692      	mov	sl, r2
 802183e:	ee80 6a20 	vdiv.f32	s12, s0, s1
 8021842:	9102      	str	r1, [sp, #8]
 8021844:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8021848:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 802184c:	910f      	str	r1, [sp, #60]	; 0x3c
 802184e:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8021852:	930d      	str	r3, [sp, #52]	; 0x34
 8021854:	9110      	str	r1, [sp, #64]	; 0x40
 8021856:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 802185a:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 802185e:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8021862:	9309      	str	r3, [sp, #36]	; 0x24
 8021864:	9104      	str	r1, [sp, #16]
 8021866:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 802186a:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 802186e:	930e      	str	r3, [sp, #56]	; 0x38
 8021870:	ee03 1a90 	vmov	s7, r1
 8021874:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 8021878:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 802187c:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	; 0xa0
 8021880:	9211      	str	r2, [sp, #68]	; 0x44
 8021882:	2a00      	cmp	r2, #0
 8021884:	f000 80b3 	beq.w	80219ee <st_int8_avepool+0x1ba>
 8021888:	eeb4 0a60 	vcmp.f32	s0, s1
 802188c:	ee03 1a10 	vmov	s6, r1
 8021890:	4683      	mov	fp, r0
 8021892:	ee13 1a90 	vmov	r1, s7
 8021896:	ee13 0a10 	vmov	r0, s6
 802189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802189e:	bf0c      	ite	eq
 80218a0:	2201      	moveq	r2, #1
 80218a2:	2200      	movne	r2, #0
 80218a4:	4281      	cmp	r1, r0
 80218a6:	bf14      	ite	ne
 80218a8:	2200      	movne	r2, #0
 80218aa:	f002 0201 	andeq.w	r2, r2, #1
 80218ae:	f1b8 0f01 	cmp.w	r8, #1
 80218b2:	9201      	str	r2, [sp, #4]
 80218b4:	f040 80c2 	bne.w	8021a3c <st_int8_avepool+0x208>
 80218b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80218ba:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8021a34 <st_int8_avepool+0x200>
 80218be:	1ad3      	subs	r3, r2, r3
 80218c0:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8021a38 <st_int8_avepool+0x204>
 80218c4:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 80218c8:	b29b      	uxth	r3, r3
 80218ca:	1a89      	subs	r1, r1, r2
 80218cc:	4252      	negs	r2, r2
 80218ce:	9306      	str	r3, [sp, #24]
 80218d0:	b293      	uxth	r3, r2
 80218d2:	2200      	movs	r2, #0
 80218d4:	910d      	str	r1, [sp, #52]	; 0x34
 80218d6:	930c      	str	r3, [sp, #48]	; 0x30
 80218d8:	4613      	mov	r3, r2
 80218da:	9904      	ldr	r1, [sp, #16]
 80218dc:	2900      	cmp	r1, #0
 80218de:	f000 80a6 	beq.w	8021a2e <st_int8_avepool+0x1fa>
 80218e2:	b292      	uxth	r2, r2
 80218e4:	2100      	movs	r1, #0
 80218e6:	eeb8 4ae3 	vcvt.f32.s32	s8, s7
 80218ea:	9207      	str	r2, [sp, #28]
 80218ec:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 80218f0:	9a04      	ldr	r2, [sp, #16]
 80218f2:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80218f6:	4688      	mov	r8, r1
 80218f8:	fb02 f303 	mul.w	r3, r2, r3
 80218fc:	9a06      	ldr	r2, [sp, #24]
 80218fe:	9308      	str	r3, [sp, #32]
 8021900:	fa0f fe82 	sxth.w	lr, r2
 8021904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021906:	1ad3      	subs	r3, r2, r3
 8021908:	b21b      	sxth	r3, r3
 802190a:	930b      	str	r3, [sp, #44]	; 0x2c
 802190c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802190e:	9303      	str	r3, [sp, #12]
 8021910:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8021914:	9305      	str	r3, [sp, #20]
 8021916:	b28b      	uxth	r3, r1
 8021918:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802191a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802191e:	930a      	str	r3, [sp, #40]	; 0x28
 8021920:	4570      	cmp	r0, lr
 8021922:	9b08      	ldr	r3, [sp, #32]
 8021924:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8021928:	4498      	add	r8, r3
 802192a:	da79      	bge.n	8021a20 <st_int8_avepool+0x1ec>
 802192c:	2700      	movs	r7, #0
 802192e:	46bc      	mov	ip, r7
 8021930:	42a6      	cmp	r6, r4
 8021932:	da17      	bge.n	8021964 <st_int8_avepool+0x130>
 8021934:	43c5      	mvns	r5, r0
 8021936:	4548      	cmp	r0, r9
 8021938:	fb0a f200 	mul.w	r2, sl, r0
 802193c:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 8021940:	da10      	bge.n	8021964 <st_int8_avepool+0x130>
 8021942:	4432      	add	r2, r6
 8021944:	4633      	mov	r3, r6
 8021946:	445a      	add	r2, fp
 8021948:	0419      	lsls	r1, r3, #16
 802194a:	d406      	bmi.n	802195a <st_int8_avepool+0x126>
 802194c:	b12d      	cbz	r5, 802195a <st_int8_avepool+0x126>
 802194e:	4553      	cmp	r3, sl
 8021950:	da03      	bge.n	802195a <st_int8_avepool+0x126>
 8021952:	f992 1000 	ldrsb.w	r1, [r2]
 8021956:	3701      	adds	r7, #1
 8021958:	448c      	add	ip, r1
 802195a:	3301      	adds	r3, #1
 802195c:	3201      	adds	r2, #1
 802195e:	b219      	sxth	r1, r3
 8021960:	42a1      	cmp	r1, r4
 8021962:	dbf1      	blt.n	8021948 <st_int8_avepool+0x114>
 8021964:	3001      	adds	r0, #1
 8021966:	b200      	sxth	r0, r0
 8021968:	4570      	cmp	r0, lr
 802196a:	dbe1      	blt.n	8021930 <st_int8_avepool+0xfc>
 802196c:	9b01      	ldr	r3, [sp, #4]
 802196e:	2b00      	cmp	r3, #0
 8021970:	d140      	bne.n	80219f4 <st_int8_avepool+0x1c0>
 8021972:	ee07 ca90 	vmov	s15, ip
 8021976:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802197a:	ee07 7a90 	vmov	s15, r7
 802197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021986:	ee77 7ac4 	vsub.f32	s15, s15, s8
 802198a:	eeb0 7a64 	vmov.f32	s14, s9
 802198e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8021992:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802199a:	fe65 7a25 	vselge.f32	s15, s10, s11
 802199e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80219a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80219a6:	ee17 3a90 	vmov	r3, s15
 80219aa:	f303 0307 	ssat	r3, #8, r3
 80219ae:	9a02      	ldr	r2, [sp, #8]
 80219b0:	f802 3008 	strb.w	r3, [r2, r8]
 80219b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80219b6:	9b05      	ldr	r3, [sp, #20]
 80219b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80219ba:	4403      	add	r3, r0
 80219bc:	9a03      	ldr	r2, [sp, #12]
 80219be:	3101      	adds	r1, #1
 80219c0:	b29b      	uxth	r3, r3
 80219c2:	4402      	add	r2, r0
 80219c4:	b209      	sxth	r1, r1
 80219c6:	9305      	str	r3, [sp, #20]
 80219c8:	b292      	uxth	r2, r2
 80219ca:	9b04      	ldr	r3, [sp, #16]
 80219cc:	4688      	mov	r8, r1
 80219ce:	9203      	str	r2, [sp, #12]
 80219d0:	428b      	cmp	r3, r1
 80219d2:	dca0      	bgt.n	8021916 <st_int8_avepool+0xe2>
 80219d4:	9a07      	ldr	r2, [sp, #28]
 80219d6:	9b06      	ldr	r3, [sp, #24]
 80219d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80219da:	3201      	adds	r2, #1
 80219dc:	440b      	add	r3, r1
 80219de:	b212      	sxth	r2, r2
 80219e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80219e2:	b29b      	uxth	r3, r3
 80219e4:	4291      	cmp	r1, r2
 80219e6:	9306      	str	r3, [sp, #24]
 80219e8:	4613      	mov	r3, r2
 80219ea:	f73f af76 	bgt.w	80218da <st_int8_avepool+0xa6>
 80219ee:	b015      	add	sp, #84	; 0x54
 80219f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219f4:	f1bc 0f00 	cmp.w	ip, #0
 80219f8:	db09      	blt.n	8021a0e <st_int8_avepool+0x1da>
 80219fa:	eb0c 0367 	add.w	r3, ip, r7, asr #1
 80219fe:	fbb3 f7f7 	udiv	r7, r3, r7
 8021a02:	f307 0307 	ssat	r3, #8, r7
 8021a06:	9a02      	ldr	r2, [sp, #8]
 8021a08:	f802 3008 	strb.w	r3, [r2, r8]
 8021a0c:	e7d2      	b.n	80219b4 <st_int8_avepool+0x180>
 8021a0e:	2f00      	cmp	r7, #0
 8021a10:	463b      	mov	r3, r7
 8021a12:	bfb8      	it	lt
 8021a14:	1c7b      	addlt	r3, r7, #1
 8021a16:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8021a1a:	fb93 f7f7 	sdiv	r7, r3, r7
 8021a1e:	e7f0      	b.n	8021a02 <st_int8_avepool+0x1ce>
 8021a20:	9b01      	ldr	r3, [sp, #4]
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	f040 80df 	bne.w	8021be6 <st_int8_avepool+0x3b2>
 8021a28:	eef0 7a62 	vmov.f32	s15, s5
 8021a2c:	e7ab      	b.n	8021986 <st_int8_avepool+0x152>
 8021a2e:	b293      	uxth	r3, r2
 8021a30:	9307      	str	r3, [sp, #28]
 8021a32:	e7cf      	b.n	80219d4 <st_int8_avepool+0x1a0>
 8021a34:	befffffc 	.word	0xbefffffc
 8021a38:	7fc00000 	.word	0x7fc00000
 8021a3c:	425b      	negs	r3, r3
 8021a3e:	2200      	movs	r2, #0
 8021a40:	9904      	ldr	r1, [sp, #16]
 8021a42:	b29b      	uxth	r3, r3
 8021a44:	f8cd b00c 	str.w	fp, [sp, #12]
 8021a48:	ed5f 5a06 	vldr	s11, [pc, #-24]	; 8021a34 <st_int8_avepool+0x200>
 8021a4c:	46d3      	mov	fp, sl
 8021a4e:	9308      	str	r3, [sp, #32]
 8021a50:	46ca      	mov	sl, r9
 8021a52:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8021a38 <st_int8_avepool+0x204>
 8021a56:	4613      	mov	r3, r2
 8021a58:	2900      	cmp	r1, #0
 8021a5a:	f000 80a3 	beq.w	8021ba4 <st_int8_avepool+0x370>
 8021a5e:	b292      	uxth	r2, r2
 8021a60:	2100      	movs	r1, #0
 8021a62:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 8021a66:	920c      	str	r2, [sp, #48]	; 0x30
 8021a68:	9a04      	ldr	r2, [sp, #16]
 8021a6a:	fb03 f302 	mul.w	r3, r3, r2
 8021a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021a70:	9313      	str	r3, [sp, #76]	; 0x4c
 8021a72:	4253      	negs	r3, r2
 8021a74:	b29b      	uxth	r3, r3
 8021a76:	9306      	str	r3, [sp, #24]
 8021a78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a7a:	1a9b      	subs	r3, r3, r2
 8021a7c:	b29b      	uxth	r3, r3
 8021a7e:	9307      	str	r3, [sp, #28]
 8021a80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021a84:	4413      	add	r3, r2
 8021a86:	fa0f fe83 	sxth.w	lr, r3
 8021a8a:	b213      	sxth	r3, r2
 8021a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8021a8e:	460b      	mov	r3, r1
 8021a90:	f1b8 0f00 	cmp.w	r8, #0
 8021a94:	f000 80a4 	beq.w	8021be0 <st_int8_avepool+0x3ac>
 8021a98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021a9a:	eeb8 4ac3 	vcvt.f32.s32	s8, s6
 8021a9e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8021aa2:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8021aa6:	4413      	add	r3, r2
 8021aa8:	b28a      	uxth	r2, r1
 8021aaa:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 8021aae:	920b      	str	r2, [sp, #44]	; 0x2c
 8021ab0:	9a02      	ldr	r2, [sp, #8]
 8021ab2:	fb08 2303 	mla	r3, r8, r3, r2
 8021ab6:	9312      	str	r3, [sp, #72]	; 0x48
 8021ab8:	2300      	movs	r3, #0
 8021aba:	4699      	mov	r9, r3
 8021abc:	9305      	str	r3, [sp, #20]
 8021abe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021ac0:	4570      	cmp	r0, lr
 8021ac2:	f280 8088 	bge.w	8021bd6 <st_int8_avepool+0x3a2>
 8021ac6:	2700      	movs	r7, #0
 8021ac8:	46bc      	mov	ip, r7
 8021aca:	42ae      	cmp	r6, r5
 8021acc:	da1a      	bge.n	8021b04 <st_int8_avepool+0x2d0>
 8021ace:	43c4      	mvns	r4, r0
 8021ad0:	4550      	cmp	r0, sl
 8021ad2:	fb0b f300 	mul.w	r3, fp, r0
 8021ad6:	f3c4 34c0 	ubfx	r4, r4, #15, #1
 8021ada:	da13      	bge.n	8021b04 <st_int8_avepool+0x2d0>
 8021adc:	199a      	adds	r2, r3, r6
 8021ade:	9b03      	ldr	r3, [sp, #12]
 8021ae0:	fb08 9202 	mla	r2, r8, r2, r9
 8021ae4:	441a      	add	r2, r3
 8021ae6:	4633      	mov	r3, r6
 8021ae8:	0419      	lsls	r1, r3, #16
 8021aea:	d406      	bmi.n	8021afa <st_int8_avepool+0x2c6>
 8021aec:	b12c      	cbz	r4, 8021afa <st_int8_avepool+0x2c6>
 8021aee:	459b      	cmp	fp, r3
 8021af0:	dd03      	ble.n	8021afa <st_int8_avepool+0x2c6>
 8021af2:	f992 1000 	ldrsb.w	r1, [r2]
 8021af6:	3701      	adds	r7, #1
 8021af8:	448c      	add	ip, r1
 8021afa:	3301      	adds	r3, #1
 8021afc:	4442      	add	r2, r8
 8021afe:	b219      	sxth	r1, r3
 8021b00:	42a9      	cmp	r1, r5
 8021b02:	dbf1      	blt.n	8021ae8 <st_int8_avepool+0x2b4>
 8021b04:	3001      	adds	r0, #1
 8021b06:	b200      	sxth	r0, r0
 8021b08:	4570      	cmp	r0, lr
 8021b0a:	dbde      	blt.n	8021aca <st_int8_avepool+0x296>
 8021b0c:	9b01      	ldr	r3, [sp, #4]
 8021b0e:	2b00      	cmp	r3, #0
 8021b10:	d14b      	bne.n	8021baa <st_int8_avepool+0x376>
 8021b12:	ee07 ca90 	vmov	s15, ip
 8021b16:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 8021b1a:	ee07 7a90 	vmov	s15, r7
 8021b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021b22:	eec2 7a87 	vdiv.f32	s15, s5, s14
 8021b26:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8021b2a:	eeb0 7a44 	vmov.f32	s14, s8
 8021b2e:	eea7 7a86 	vfma.f32	s14, s15, s12
 8021b32:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b3a:	fe64 7aa5 	vselge.f32	s15, s9, s11
 8021b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021b46:	ee17 3a90 	vmov	r3, s15
 8021b4a:	f303 0307 	ssat	r3, #8, r3
 8021b4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021b50:	f802 3009 	strb.w	r3, [r2, r9]
 8021b54:	9b05      	ldr	r3, [sp, #20]
 8021b56:	3301      	adds	r3, #1
 8021b58:	b21b      	sxth	r3, r3
 8021b5a:	4543      	cmp	r3, r8
 8021b5c:	4699      	mov	r9, r3
 8021b5e:	9305      	str	r3, [sp, #20]
 8021b60:	dbad      	blt.n	8021abe <st_int8_avepool+0x28a>
 8021b62:	9a06      	ldr	r2, [sp, #24]
 8021b64:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021b66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021b68:	4402      	add	r2, r0
 8021b6a:	9b07      	ldr	r3, [sp, #28]
 8021b6c:	3101      	adds	r1, #1
 8021b6e:	b292      	uxth	r2, r2
 8021b70:	4403      	add	r3, r0
 8021b72:	b209      	sxth	r1, r1
 8021b74:	9206      	str	r2, [sp, #24]
 8021b76:	b29b      	uxth	r3, r3
 8021b78:	9a04      	ldr	r2, [sp, #16]
 8021b7a:	9307      	str	r3, [sp, #28]
 8021b7c:	460b      	mov	r3, r1
 8021b7e:	4291      	cmp	r1, r2
 8021b80:	db86      	blt.n	8021a90 <st_int8_avepool+0x25c>
 8021b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021b84:	9b08      	ldr	r3, [sp, #32]
 8021b86:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021b88:	3201      	adds	r2, #1
 8021b8a:	440b      	add	r3, r1
 8021b8c:	b212      	sxth	r2, r2
 8021b8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021b90:	b29b      	uxth	r3, r3
 8021b92:	4291      	cmp	r1, r2
 8021b94:	9308      	str	r3, [sp, #32]
 8021b96:	4613      	mov	r3, r2
 8021b98:	f77f af29 	ble.w	80219ee <st_int8_avepool+0x1ba>
 8021b9c:	9904      	ldr	r1, [sp, #16]
 8021b9e:	2900      	cmp	r1, #0
 8021ba0:	f47f af5d 	bne.w	8021a5e <st_int8_avepool+0x22a>
 8021ba4:	b293      	uxth	r3, r2
 8021ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8021ba8:	e7eb      	b.n	8021b82 <st_int8_avepool+0x34e>
 8021baa:	f1bc 0f00 	cmp.w	ip, #0
 8021bae:	db09      	blt.n	8021bc4 <st_int8_avepool+0x390>
 8021bb0:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 8021bb4:	fbbc f7f7 	udiv	r7, ip, r7
 8021bb8:	f307 0707 	ssat	r7, #8, r7
 8021bbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021bbe:	f803 7009 	strb.w	r7, [r3, r9]
 8021bc2:	e7c7      	b.n	8021b54 <st_int8_avepool+0x320>
 8021bc4:	2f00      	cmp	r7, #0
 8021bc6:	463b      	mov	r3, r7
 8021bc8:	bfb8      	it	lt
 8021bca:	1c7b      	addlt	r3, r7, #1
 8021bcc:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8021bd0:	fb93 f7f7 	sdiv	r7, r3, r7
 8021bd4:	e7f0      	b.n	8021bb8 <st_int8_avepool+0x384>
 8021bd6:	9b01      	ldr	r3, [sp, #4]
 8021bd8:	b92b      	cbnz	r3, 8021be6 <st_int8_avepool+0x3b2>
 8021bda:	eef0 7a66 	vmov.f32	s15, s13
 8021bde:	e7a2      	b.n	8021b26 <st_int8_avepool+0x2f2>
 8021be0:	b28b      	uxth	r3, r1
 8021be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8021be4:	e7bd      	b.n	8021b62 <st_int8_avepool+0x32e>
 8021be6:	deff      	udf	#255	; 0xff

08021be8 <st_dsp_arm_float_to_q15>:
 8021be8:	b530      	push	{r4, r5, lr}
 8021bea:	0895      	lsrs	r5, r2, #2
 8021bec:	d069      	beq.n	8021cc2 <st_dsp_arm_float_to_q15+0xda>
 8021bee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021bf2:	f100 0c10 	add.w	ip, r0, #16
 8021bf6:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8021bfa:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8021d50 <st_dsp_arm_float_to_q15+0x168>
 8021bfe:	f101 0e08 	add.w	lr, r1, #8
 8021c02:	462c      	mov	r4, r5
 8021c04:	ed5c 7a04 	vldr	s15, [ip, #-16]
 8021c08:	ee67 6a86 	vmul.f32	s13, s15, s12
 8021c0c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c14:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8021c18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021c20:	ee17 3a90 	vmov	r3, s15
 8021c24:	f303 030f 	ssat	r3, #16, r3
 8021c28:	f82e 3c08 	strh.w	r3, [lr, #-8]
 8021c2c:	ed5c 7a03 	vldr	s15, [ip, #-12]
 8021c30:	ee67 6a86 	vmul.f32	s13, s15, s12
 8021c34:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c3c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8021c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021c48:	ee17 3a90 	vmov	r3, s15
 8021c4c:	f303 030f 	ssat	r3, #16, r3
 8021c50:	f82e 3c06 	strh.w	r3, [lr, #-6]
 8021c54:	ed5c 7a02 	vldr	s15, [ip, #-8]
 8021c58:	ee67 6a86 	vmul.f32	s13, s15, s12
 8021c5c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c64:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8021c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021c70:	ee17 3a90 	vmov	r3, s15
 8021c74:	f303 030f 	ssat	r3, #16, r3
 8021c78:	f82e 3c04 	strh.w	r3, [lr, #-4]
 8021c7c:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8021c80:	ee67 7a86 	vmul.f32	s15, s15, s12
 8021c84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021c88:	ee77 6a87 	vadd.f32	s13, s15, s14
 8021c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c94:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8021c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021c9c:	bfcc      	ite	gt
 8021c9e:	ee16 3a90 	vmovgt	r3, s13
 8021ca2:	ee17 3a90 	vmovle	r3, s15
 8021ca6:	f303 030f 	ssat	r3, #16, r3
 8021caa:	3c01      	subs	r4, #1
 8021cac:	f82e 3c02 	strh.w	r3, [lr, #-2]
 8021cb0:	f10c 0c10 	add.w	ip, ip, #16
 8021cb4:	f10e 0e08 	add.w	lr, lr, #8
 8021cb8:	d1a4      	bne.n	8021c04 <st_dsp_arm_float_to_q15+0x1c>
 8021cba:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8021cbe:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8021cc2:	f012 0203 	ands.w	r2, r2, #3
 8021cc6:	d042      	beq.n	8021d4e <st_dsp_arm_float_to_q15+0x166>
 8021cc8:	edd0 7a00 	vldr	s15, [r0]
 8021ccc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021cd0:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8021d50 <st_dsp_arm_float_to_q15+0x168>
 8021cd4:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8021cd8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8021cdc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ce4:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8021ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021cf0:	ee17 3a90 	vmov	r3, s15
 8021cf4:	f303 030f 	ssat	r3, #16, r3
 8021cf8:	3a01      	subs	r2, #1
 8021cfa:	800b      	strh	r3, [r1, #0]
 8021cfc:	d027      	beq.n	8021d4e <st_dsp_arm_float_to_q15+0x166>
 8021cfe:	edd0 7a01 	vldr	s15, [r0, #4]
 8021d02:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8021d06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d0e:	fe77 6a06 	vselgt.f32	s13, s14, s12
 8021d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021d1a:	ee17 3a90 	vmov	r3, s15
 8021d1e:	f303 030f 	ssat	r3, #16, r3
 8021d22:	2a01      	cmp	r2, #1
 8021d24:	804b      	strh	r3, [r1, #2]
 8021d26:	d012      	beq.n	8021d4e <st_dsp_arm_float_to_q15+0x166>
 8021d28:	edd0 7a02 	vldr	s15, [r0, #8]
 8021d2c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8021d30:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8021d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d38:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8021d3c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8021d40:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021d44:	ee17 3a10 	vmov	r3, s14
 8021d48:	f303 030f 	ssat	r3, #16, r3
 8021d4c:	808b      	strh	r3, [r1, #4]
 8021d4e:	bd30      	pop	{r4, r5, pc}
 8021d50:	47000000 	.word	0x47000000

08021d54 <st_dsp_arm_float_to_q7>:
 8021d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d56:	0895      	lsrs	r5, r2, #2
 8021d58:	d06f      	beq.n	8021e3a <st_dsp_arm_float_to_q7+0xe6>
 8021d5a:	f101 0c04 	add.w	ip, r1, #4
 8021d5e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8021d62:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 8021d66:	f100 0e10 	add.w	lr, r0, #16
 8021d6a:	eddf 5a5f 	vldr	s11, [pc, #380]	; 8021ee8 <st_dsp_arm_float_to_q7+0x194>
 8021d6e:	00ae      	lsls	r6, r5, #2
 8021d70:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 8021d74:	ed5e 7a04 	vldr	s15, [lr, #-16]
 8021d78:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8021d7c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d84:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8021d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021d90:	ee17 3a90 	vmov	r3, s15
 8021d94:	b21b      	sxth	r3, r3
 8021d96:	f303 0307 	ssat	r3, #8, r3
 8021d9a:	f80c 3c04 	strb.w	r3, [ip, #-4]
 8021d9e:	ed5e 7a03 	vldr	s15, [lr, #-12]
 8021da2:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8021da6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dae:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8021db2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021dba:	ee17 3a90 	vmov	r3, s15
 8021dbe:	b21b      	sxth	r3, r3
 8021dc0:	f303 0307 	ssat	r3, #8, r3
 8021dc4:	f80c 3c03 	strb.w	r3, [ip, #-3]
 8021dc8:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8021dcc:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8021dd0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dd8:	fe76 7a05 	vselgt.f32	s15, s12, s10
 8021ddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021de4:	ee17 3a90 	vmov	r3, s15
 8021de8:	b21b      	sxth	r3, r3
 8021dea:	f303 0307 	ssat	r3, #8, r3
 8021dee:	f80c 3c02 	strb.w	r3, [ip, #-2]
 8021df2:	ed5e 6a01 	vldr	s13, [lr, #-4]
 8021df6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8021dfa:	ee76 7a86 	vadd.f32	s15, s13, s12
 8021dfe:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8021e02:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021e0a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e12:	ee17 3a90 	vmov	r3, s15
 8021e16:	ee17 7a10 	vmov	r7, s14
 8021e1a:	b21b      	sxth	r3, r3
 8021e1c:	b23f      	sxth	r7, r7
 8021e1e:	dd56      	ble.n	8021ece <st_dsp_arm_float_to_q7+0x17a>
 8021e20:	f303 0307 	ssat	r3, #8, r3
 8021e24:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8021e28:	f10c 0c04 	add.w	ip, ip, #4
 8021e2c:	f10e 0e10 	add.w	lr, lr, #16
 8021e30:	4564      	cmp	r4, ip
 8021e32:	d19f      	bne.n	8021d74 <st_dsp_arm_float_to_q7+0x20>
 8021e34:	4431      	add	r1, r6
 8021e36:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8021e3a:	f012 0203 	ands.w	r2, r2, #3
 8021e3e:	d045      	beq.n	8021ecc <st_dsp_arm_float_to_q7+0x178>
 8021e40:	edd0 7a00 	vldr	s15, [r0]
 8021e44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021e48:	ed9f 5a27 	vldr	s10, [pc, #156]	; 8021ee8 <st_dsp_arm_float_to_q7+0x194>
 8021e4c:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8021e50:	ee67 6a85 	vmul.f32	s13, s15, s10
 8021e54:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e5c:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8021e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021e68:	ee17 3a90 	vmov	r3, s15
 8021e6c:	b21b      	sxth	r3, r3
 8021e6e:	f303 0307 	ssat	r3, #8, r3
 8021e72:	3a01      	subs	r2, #1
 8021e74:	700b      	strb	r3, [r1, #0]
 8021e76:	d029      	beq.n	8021ecc <st_dsp_arm_float_to_q7+0x178>
 8021e78:	edd0 6a01 	vldr	s13, [r0, #4]
 8021e7c:	ee26 6a85 	vmul.f32	s12, s13, s10
 8021e80:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e88:	fe77 6a25 	vselgt.f32	s13, s14, s11
 8021e8c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8021e90:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8021e94:	ee16 3a90 	vmov	r3, s13
 8021e98:	b21b      	sxth	r3, r3
 8021e9a:	f303 0307 	ssat	r3, #8, r3
 8021e9e:	2a01      	cmp	r2, #1
 8021ea0:	704b      	strb	r3, [r1, #1]
 8021ea2:	d013      	beq.n	8021ecc <st_dsp_arm_float_to_q7+0x178>
 8021ea4:	edd0 7a02 	vldr	s15, [r0, #8]
 8021ea8:	ee27 5a85 	vmul.f32	s10, s15, s10
 8021eac:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8021eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021eb4:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8021eb8:	ee77 7a85 	vadd.f32	s15, s15, s10
 8021ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021ec0:	ee17 3a90 	vmov	r3, s15
 8021ec4:	b21b      	sxth	r3, r3
 8021ec6:	f303 0307 	ssat	r3, #8, r3
 8021eca:	708b      	strb	r3, [r1, #2]
 8021ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ece:	f307 0707 	ssat	r7, #8, r7
 8021ed2:	f80c 7c01 	strb.w	r7, [ip, #-1]
 8021ed6:	f10c 0c04 	add.w	ip, ip, #4
 8021eda:	f10e 0e10 	add.w	lr, lr, #16
 8021ede:	45a4      	cmp	ip, r4
 8021ee0:	f47f af48 	bne.w	8021d74 <st_dsp_arm_float_to_q7+0x20>
 8021ee4:	e7a6      	b.n	8021e34 <st_dsp_arm_float_to_q7+0xe0>
 8021ee6:	bf00      	nop
 8021ee8:	43000000 	.word	0x43000000

08021eec <st_dsp_arm_q15_to_float>:
 8021eec:	b530      	push	{r4, r5, lr}
 8021eee:	0894      	lsrs	r4, r2, #2
 8021ef0:	d038      	beq.n	8021f64 <st_dsp_arm_q15_to_float+0x78>
 8021ef2:	f100 0c08 	add.w	ip, r0, #8
 8021ef6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8021fb4 <st_dsp_arm_q15_to_float+0xc8>
 8021efa:	f101 0310 	add.w	r3, r1, #16
 8021efe:	46a6      	mov	lr, r4
 8021f00:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 8021f04:	3310      	adds	r3, #16
 8021f06:	f10c 0c08 	add.w	ip, ip, #8
 8021f0a:	f1be 0e01 	subs.w	lr, lr, #1
 8021f0e:	ee07 5a90 	vmov	s15, r5
 8021f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f1a:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8021f1e:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 8021f22:	ee07 5a90 	vmov	s15, r5
 8021f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f2e:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8021f32:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 8021f36:	ee07 5a90 	vmov	s15, r5
 8021f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f42:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8021f46:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 8021f4a:	ee07 5a90 	vmov	s15, r5
 8021f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f56:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8021f5a:	d1d1      	bne.n	8021f00 <st_dsp_arm_q15_to_float+0x14>
 8021f5c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8021f60:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8021f64:	f012 0203 	ands.w	r2, r2, #3
 8021f68:	d023      	beq.n	8021fb2 <st_dsp_arm_q15_to_float+0xc6>
 8021f6a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8021f6e:	3a01      	subs	r2, #1
 8021f70:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8021fb4 <st_dsp_arm_q15_to_float+0xc8>
 8021f74:	ee07 3a90 	vmov	s15, r3
 8021f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f80:	edc1 7a00 	vstr	s15, [r1]
 8021f84:	d015      	beq.n	8021fb2 <st_dsp_arm_q15_to_float+0xc6>
 8021f86:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021f8a:	2a01      	cmp	r2, #1
 8021f8c:	ee07 3a90 	vmov	s15, r3
 8021f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021f98:	edc1 7a01 	vstr	s15, [r1, #4]
 8021f9c:	d009      	beq.n	8021fb2 <st_dsp_arm_q15_to_float+0xc6>
 8021f9e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8021fa2:	ee07 3a90 	vmov	s15, r3
 8021fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021fae:	edc1 7a02 	vstr	s15, [r1, #8]
 8021fb2:	bd30      	pop	{r4, r5, pc}
 8021fb4:	38000000 	.word	0x38000000

08021fb8 <st_dsp_arm_q7_to_float>:
 8021fb8:	b530      	push	{r4, r5, lr}
 8021fba:	0894      	lsrs	r4, r2, #2
 8021fbc:	d036      	beq.n	802202c <st_dsp_arm_q7_to_float+0x74>
 8021fbe:	1d03      	adds	r3, r0, #4
 8021fc0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8021fc4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 802207c <st_dsp_arm_q7_to_float+0xc4>
 8021fc8:	f101 0010 	add.w	r0, r1, #16
 8021fcc:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 8021fd0:	3010      	adds	r0, #16
 8021fd2:	ee07 ea90 	vmov	s15, lr
 8021fd6:	469e      	mov	lr, r3
 8021fd8:	3304      	adds	r3, #4
 8021fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021fde:	45e6      	cmp	lr, ip
 8021fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021fe4:	ed40 7a08 	vstr	s15, [r0, #-32]	; 0xffffffe0
 8021fe8:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 8021fec:	ee07 5a90 	vmov	s15, r5
 8021ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021ff8:	ed40 7a07 	vstr	s15, [r0, #-28]	; 0xffffffe4
 8021ffc:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 8022000:	ee07 5a90 	vmov	s15, r5
 8022004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022008:	ee67 7a87 	vmul.f32	s15, s15, s14
 802200c:	ed40 7a06 	vstr	s15, [r0, #-24]	; 0xffffffe8
 8022010:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 8022014:	ee07 5a90 	vmov	s15, r5
 8022018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802201c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022020:	ed40 7a05 	vstr	s15, [r0, #-20]	; 0xffffffec
 8022024:	d1d2      	bne.n	8021fcc <st_dsp_arm_q7_to_float+0x14>
 8022026:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 802202a:	4660      	mov	r0, ip
 802202c:	f012 0203 	ands.w	r2, r2, #3
 8022030:	d023      	beq.n	802207a <st_dsp_arm_q7_to_float+0xc2>
 8022032:	f990 3000 	ldrsb.w	r3, [r0]
 8022036:	3a01      	subs	r2, #1
 8022038:	ed9f 7a10 	vldr	s14, [pc, #64]	; 802207c <st_dsp_arm_q7_to_float+0xc4>
 802203c:	ee07 3a90 	vmov	s15, r3
 8022040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022048:	edc1 7a00 	vstr	s15, [r1]
 802204c:	d015      	beq.n	802207a <st_dsp_arm_q7_to_float+0xc2>
 802204e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8022052:	2a01      	cmp	r2, #1
 8022054:	ee07 3a90 	vmov	s15, r3
 8022058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802205c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022060:	edc1 7a01 	vstr	s15, [r1, #4]
 8022064:	d009      	beq.n	802207a <st_dsp_arm_q7_to_float+0xc2>
 8022066:	f990 3002 	ldrsb.w	r3, [r0, #2]
 802206a:	ee07 3a90 	vmov	s15, r3
 802206e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022076:	edc1 7a02 	vstr	s15, [r1, #8]
 802207a:	bd30      	pop	{r4, r5, pc}
 802207c:	3c000000 	.word	0x3c000000

08022080 <ai_version_get>:
 8022080:	0212      	lsls	r2, r2, #8
 8022082:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022086:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 802208a:	4770      	bx	lr

0802208c <ai_platform_version_get>:
 802208c:	0e01      	lsrs	r1, r0, #24
 802208e:	2300      	movs	r3, #0
 8022090:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022094:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022098:	f361 0307 	bfi	r3, r1, #0, #8
 802209c:	b082      	sub	sp, #8
 802209e:	f362 230f 	bfi	r3, r2, #8, #8
 80220a2:	f360 4317 	bfi	r3, r0, #16, #8
 80220a6:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 80220aa:	b002      	add	sp, #8
 80220ac:	4770      	bx	lr
 80220ae:	bf00      	nop

080220b0 <get_tensor_byte_size>:
 80220b0:	b430      	push	{r4, r5}
 80220b2:	6985      	ldr	r5, [r0, #24]
 80220b4:	68c4      	ldr	r4, [r0, #12]
 80220b6:	6941      	ldr	r1, [r0, #20]
 80220b8:	4b06      	ldr	r3, [pc, #24]	; (80220d4 <get_tensor_byte_size+0x24>)
 80220ba:	6828      	ldr	r0, [r5, #0]
 80220bc:	4a06      	ldr	r2, [pc, #24]	; (80220d8 <get_tensor_byte_size+0x28>)
 80220be:	4003      	ands	r3, r0
 80220c0:	68c9      	ldr	r1, [r1, #12]
 80220c2:	68e0      	ldr	r0, [r4, #12]
 80220c4:	4293      	cmp	r3, r2
 80220c6:	fb01 f000 	mul.w	r0, r1, r0
 80220ca:	d101      	bne.n	80220d0 <get_tensor_byte_size+0x20>
 80220cc:	3007      	adds	r0, #7
 80220ce:	08c0      	lsrs	r0, r0, #3
 80220d0:	bc30      	pop	{r4, r5}
 80220d2:	4770      	bx	lr
 80220d4:	017fffff 	.word	0x017fffff
 80220d8:	000400c0 	.word	0x000400c0

080220dc <ai_array_to_buffer_fmt>:
 80220dc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80220e0:	2b02      	cmp	r3, #2
 80220e2:	d050      	beq.n	8022186 <ai_array_to_buffer_fmt+0xaa>
 80220e4:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80220e8:	4b29      	ldr	r3, [pc, #164]	; (8022190 <ai_array_to_buffer_fmt+0xb4>)
 80220ea:	429a      	cmp	r2, r3
 80220ec:	d00b      	beq.n	8022106 <ai_array_to_buffer_fmt+0x2a>
 80220ee:	dc1c      	bgt.n	802212a <ai_array_to_buffer_fmt+0x4e>
 80220f0:	4b28      	ldr	r3, [pc, #160]	; (8022194 <ai_array_to_buffer_fmt+0xb8>)
 80220f2:	429a      	cmp	r2, r3
 80220f4:	d007      	beq.n	8022106 <ai_array_to_buffer_fmt+0x2a>
 80220f6:	dd0b      	ble.n	8022110 <ai_array_to_buffer_fmt+0x34>
 80220f8:	4b27      	ldr	r3, [pc, #156]	; (8022198 <ai_array_to_buffer_fmt+0xbc>)
 80220fa:	429a      	cmp	r2, r3
 80220fc:	d003      	beq.n	8022106 <ai_array_to_buffer_fmt+0x2a>
 80220fe:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8022102:	429a      	cmp	r2, r3
 8022104:	d131      	bne.n	802216a <ai_array_to_buffer_fmt+0x8e>
 8022106:	4613      	mov	r3, r2
 8022108:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 802210c:	4318      	orrs	r0, r3
 802210e:	4770      	bx	lr
 8022110:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8022114:	429a      	cmp	r2, r3
 8022116:	d0f6      	beq.n	8022106 <ai_array_to_buffer_fmt+0x2a>
 8022118:	dd2c      	ble.n	8022174 <ai_array_to_buffer_fmt+0x98>
 802211a:	4b20      	ldr	r3, [pc, #128]	; (802219c <ai_array_to_buffer_fmt+0xc0>)
 802211c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8022120:	429a      	cmp	r2, r3
 8022122:	bf18      	it	ne
 8022124:	2340      	movne	r3, #64	; 0x40
 8022126:	4318      	orrs	r0, r3
 8022128:	4770      	bx	lr
 802212a:	4b1d      	ldr	r3, [pc, #116]	; (80221a0 <ai_array_to_buffer_fmt+0xc4>)
 802212c:	429a      	cmp	r2, r3
 802212e:	d0ea      	beq.n	8022106 <ai_array_to_buffer_fmt+0x2a>
 8022130:	dd0e      	ble.n	8022150 <ai_array_to_buffer_fmt+0x74>
 8022132:	4b1c      	ldr	r3, [pc, #112]	; (80221a4 <ai_array_to_buffer_fmt+0xc8>)
 8022134:	429a      	cmp	r2, r3
 8022136:	d0e6      	beq.n	8022106 <ai_array_to_buffer_fmt+0x2a>
 8022138:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 802213c:	429a      	cmp	r2, r3
 802213e:	d0e2      	beq.n	8022106 <ai_array_to_buffer_fmt+0x2a>
 8022140:	4b19      	ldr	r3, [pc, #100]	; (80221a8 <ai_array_to_buffer_fmt+0xcc>)
 8022142:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8022146:	429a      	cmp	r2, r3
 8022148:	bf18      	it	ne
 802214a:	2340      	movne	r3, #64	; 0x40
 802214c:	4318      	orrs	r0, r3
 802214e:	4770      	bx	lr
 8022150:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8022154:	429a      	cmp	r2, r3
 8022156:	d0d6      	beq.n	8022106 <ai_array_to_buffer_fmt+0x2a>
 8022158:	3307      	adds	r3, #7
 802215a:	429a      	cmp	r2, r3
 802215c:	d0d3      	beq.n	8022106 <ai_array_to_buffer_fmt+0x2a>
 802215e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8022162:	429a      	cmp	r2, r3
 8022164:	bf18      	it	ne
 8022166:	2340      	movne	r3, #64	; 0x40
 8022168:	e7ce      	b.n	8022108 <ai_array_to_buffer_fmt+0x2c>
 802216a:	4b10      	ldr	r3, [pc, #64]	; (80221ac <ai_array_to_buffer_fmt+0xd0>)
 802216c:	429a      	cmp	r2, r3
 802216e:	bf18      	it	ne
 8022170:	2340      	movne	r3, #64	; 0x40
 8022172:	e7c9      	b.n	8022108 <ai_array_to_buffer_fmt+0x2c>
 8022174:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8022178:	429a      	cmp	r2, r3
 802217a:	d0c4      	beq.n	8022106 <ai_array_to_buffer_fmt+0x2a>
 802217c:	3380      	adds	r3, #128	; 0x80
 802217e:	429a      	cmp	r2, r3
 8022180:	bf18      	it	ne
 8022182:	2340      	movne	r3, #64	; 0x40
 8022184:	e7c0      	b.n	8022108 <ai_array_to_buffer_fmt+0x2c>
 8022186:	4b0a      	ldr	r3, [pc, #40]	; (80221b0 <ai_array_to_buffer_fmt+0xd4>)
 8022188:	4003      	ands	r3, r0
 802218a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802218e:	e7bb      	b.n	8022108 <ai_array_to_buffer_fmt+0x2c>
 8022190:	00840040 	.word	0x00840040
 8022194:	00040840 	.word	0x00040840
 8022198:	00041040 	.word	0x00041040
 802219c:	00040447 	.word	0x00040447
 80221a0:	00840840 	.word	0x00840840
 80221a4:	00841040 	.word	0x00841040
 80221a8:	0084084f 	.word	0x0084084f
 80221ac:	0004084f 	.word	0x0004084f
 80221b0:	00803fff 	.word	0x00803fff

080221b4 <ai_array_get_byte_size>:
 80221b4:	b319      	cbz	r1, 80221fe <ai_array_get_byte_size+0x4a>
 80221b6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80221ba:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80221be:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80221c2:	11c0      	asrs	r0, r0, #7
 80221c4:	fb03 f101 	mul.w	r1, r3, r1
 80221c8:	2a04      	cmp	r2, #4
 80221ca:	f101 0107 	add.w	r1, r1, #7
 80221ce:	f021 0107 	bic.w	r1, r1, #7
 80221d2:	fa21 f10c 	lsr.w	r1, r1, ip
 80221d6:	d00b      	beq.n	80221f0 <ai_array_get_byte_size+0x3c>
 80221d8:	2a08      	cmp	r2, #8
 80221da:	d002      	beq.n	80221e2 <ai_array_get_byte_size+0x2e>
 80221dc:	3107      	adds	r1, #7
 80221de:	08c8      	lsrs	r0, r1, #3
 80221e0:	4770      	bx	lr
 80221e2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80221e6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80221ea:	3107      	adds	r1, #7
 80221ec:	08c8      	lsrs	r0, r1, #3
 80221ee:	4770      	bx	lr
 80221f0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80221f4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80221f8:	3107      	adds	r1, #7
 80221fa:	08c8      	lsrs	r0, r1, #3
 80221fc:	4770      	bx	lr
 80221fe:	4608      	mov	r0, r1
 8022200:	4770      	bx	lr
 8022202:	bf00      	nop

08022204 <ai_array_get_data_byte_size>:
 8022204:	b161      	cbz	r1, 8022220 <ai_array_get_data_byte_size+0x1c>
 8022206:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 802220a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 802220e:	fb03 f101 	mul.w	r1, r3, r1
 8022212:	1dc8      	adds	r0, r1, #7
 8022214:	f020 0007 	bic.w	r0, r0, #7
 8022218:	40d0      	lsrs	r0, r2
 802221a:	3007      	adds	r0, #7
 802221c:	08c0      	lsrs	r0, r0, #3
 802221e:	4770      	bx	lr
 8022220:	4608      	mov	r0, r1
 8022222:	4770      	bx	lr

08022224 <__libc_init_array>:
 8022224:	b570      	push	{r4, r5, r6, lr}
 8022226:	4d0d      	ldr	r5, [pc, #52]	; (802225c <__libc_init_array+0x38>)
 8022228:	4c0d      	ldr	r4, [pc, #52]	; (8022260 <__libc_init_array+0x3c>)
 802222a:	1b64      	subs	r4, r4, r5
 802222c:	10a4      	asrs	r4, r4, #2
 802222e:	2600      	movs	r6, #0
 8022230:	42a6      	cmp	r6, r4
 8022232:	d109      	bne.n	8022248 <__libc_init_array+0x24>
 8022234:	4d0b      	ldr	r5, [pc, #44]	; (8022264 <__libc_init_array+0x40>)
 8022236:	4c0c      	ldr	r4, [pc, #48]	; (8022268 <__libc_init_array+0x44>)
 8022238:	f003 fa60 	bl	80256fc <_init>
 802223c:	1b64      	subs	r4, r4, r5
 802223e:	10a4      	asrs	r4, r4, #2
 8022240:	2600      	movs	r6, #0
 8022242:	42a6      	cmp	r6, r4
 8022244:	d105      	bne.n	8022252 <__libc_init_array+0x2e>
 8022246:	bd70      	pop	{r4, r5, r6, pc}
 8022248:	f855 3b04 	ldr.w	r3, [r5], #4
 802224c:	4798      	blx	r3
 802224e:	3601      	adds	r6, #1
 8022250:	e7ee      	b.n	8022230 <__libc_init_array+0xc>
 8022252:	f855 3b04 	ldr.w	r3, [r5], #4
 8022256:	4798      	blx	r3
 8022258:	3601      	adds	r6, #1
 802225a:	e7f2      	b.n	8022242 <__libc_init_array+0x1e>
 802225c:	08064618 	.word	0x08064618
 8022260:	08064618 	.word	0x08064618
 8022264:	08064618 	.word	0x08064618
 8022268:	0806461c 	.word	0x0806461c

0802226c <malloc>:
 802226c:	4b02      	ldr	r3, [pc, #8]	; (8022278 <malloc+0xc>)
 802226e:	4601      	mov	r1, r0
 8022270:	6818      	ldr	r0, [r3, #0]
 8022272:	f000 b8a7 	b.w	80223c4 <_malloc_r>
 8022276:	bf00      	nop
 8022278:	20004824 	.word	0x20004824

0802227c <free>:
 802227c:	4b02      	ldr	r3, [pc, #8]	; (8022288 <free+0xc>)
 802227e:	4601      	mov	r1, r0
 8022280:	6818      	ldr	r0, [r3, #0]
 8022282:	f000 b833 	b.w	80222ec <_free_r>
 8022286:	bf00      	nop
 8022288:	20004824 	.word	0x20004824

0802228c <memcpy>:
 802228c:	440a      	add	r2, r1
 802228e:	4291      	cmp	r1, r2
 8022290:	f100 33ff 	add.w	r3, r0, #4294967295
 8022294:	d100      	bne.n	8022298 <memcpy+0xc>
 8022296:	4770      	bx	lr
 8022298:	b510      	push	{r4, lr}
 802229a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802229e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80222a2:	4291      	cmp	r1, r2
 80222a4:	d1f9      	bne.n	802229a <memcpy+0xe>
 80222a6:	bd10      	pop	{r4, pc}

080222a8 <memmove>:
 80222a8:	4288      	cmp	r0, r1
 80222aa:	b510      	push	{r4, lr}
 80222ac:	eb01 0402 	add.w	r4, r1, r2
 80222b0:	d902      	bls.n	80222b8 <memmove+0x10>
 80222b2:	4284      	cmp	r4, r0
 80222b4:	4623      	mov	r3, r4
 80222b6:	d807      	bhi.n	80222c8 <memmove+0x20>
 80222b8:	1e43      	subs	r3, r0, #1
 80222ba:	42a1      	cmp	r1, r4
 80222bc:	d008      	beq.n	80222d0 <memmove+0x28>
 80222be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80222c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80222c6:	e7f8      	b.n	80222ba <memmove+0x12>
 80222c8:	4402      	add	r2, r0
 80222ca:	4601      	mov	r1, r0
 80222cc:	428a      	cmp	r2, r1
 80222ce:	d100      	bne.n	80222d2 <memmove+0x2a>
 80222d0:	bd10      	pop	{r4, pc}
 80222d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80222d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80222da:	e7f7      	b.n	80222cc <memmove+0x24>

080222dc <memset>:
 80222dc:	4402      	add	r2, r0
 80222de:	4603      	mov	r3, r0
 80222e0:	4293      	cmp	r3, r2
 80222e2:	d100      	bne.n	80222e6 <memset+0xa>
 80222e4:	4770      	bx	lr
 80222e6:	f803 1b01 	strb.w	r1, [r3], #1
 80222ea:	e7f9      	b.n	80222e0 <memset+0x4>

080222ec <_free_r>:
 80222ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80222ee:	2900      	cmp	r1, #0
 80222f0:	d044      	beq.n	802237c <_free_r+0x90>
 80222f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80222f6:	9001      	str	r0, [sp, #4]
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	f1a1 0404 	sub.w	r4, r1, #4
 80222fe:	bfb8      	it	lt
 8022300:	18e4      	addlt	r4, r4, r3
 8022302:	f001 fb8b 	bl	8023a1c <__malloc_lock>
 8022306:	4a1e      	ldr	r2, [pc, #120]	; (8022380 <_free_r+0x94>)
 8022308:	9801      	ldr	r0, [sp, #4]
 802230a:	6813      	ldr	r3, [r2, #0]
 802230c:	b933      	cbnz	r3, 802231c <_free_r+0x30>
 802230e:	6063      	str	r3, [r4, #4]
 8022310:	6014      	str	r4, [r2, #0]
 8022312:	b003      	add	sp, #12
 8022314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022318:	f001 bb86 	b.w	8023a28 <__malloc_unlock>
 802231c:	42a3      	cmp	r3, r4
 802231e:	d908      	bls.n	8022332 <_free_r+0x46>
 8022320:	6825      	ldr	r5, [r4, #0]
 8022322:	1961      	adds	r1, r4, r5
 8022324:	428b      	cmp	r3, r1
 8022326:	bf01      	itttt	eq
 8022328:	6819      	ldreq	r1, [r3, #0]
 802232a:	685b      	ldreq	r3, [r3, #4]
 802232c:	1949      	addeq	r1, r1, r5
 802232e:	6021      	streq	r1, [r4, #0]
 8022330:	e7ed      	b.n	802230e <_free_r+0x22>
 8022332:	461a      	mov	r2, r3
 8022334:	685b      	ldr	r3, [r3, #4]
 8022336:	b10b      	cbz	r3, 802233c <_free_r+0x50>
 8022338:	42a3      	cmp	r3, r4
 802233a:	d9fa      	bls.n	8022332 <_free_r+0x46>
 802233c:	6811      	ldr	r1, [r2, #0]
 802233e:	1855      	adds	r5, r2, r1
 8022340:	42a5      	cmp	r5, r4
 8022342:	d10b      	bne.n	802235c <_free_r+0x70>
 8022344:	6824      	ldr	r4, [r4, #0]
 8022346:	4421      	add	r1, r4
 8022348:	1854      	adds	r4, r2, r1
 802234a:	42a3      	cmp	r3, r4
 802234c:	6011      	str	r1, [r2, #0]
 802234e:	d1e0      	bne.n	8022312 <_free_r+0x26>
 8022350:	681c      	ldr	r4, [r3, #0]
 8022352:	685b      	ldr	r3, [r3, #4]
 8022354:	6053      	str	r3, [r2, #4]
 8022356:	4421      	add	r1, r4
 8022358:	6011      	str	r1, [r2, #0]
 802235a:	e7da      	b.n	8022312 <_free_r+0x26>
 802235c:	d902      	bls.n	8022364 <_free_r+0x78>
 802235e:	230c      	movs	r3, #12
 8022360:	6003      	str	r3, [r0, #0]
 8022362:	e7d6      	b.n	8022312 <_free_r+0x26>
 8022364:	6825      	ldr	r5, [r4, #0]
 8022366:	1961      	adds	r1, r4, r5
 8022368:	428b      	cmp	r3, r1
 802236a:	bf04      	itt	eq
 802236c:	6819      	ldreq	r1, [r3, #0]
 802236e:	685b      	ldreq	r3, [r3, #4]
 8022370:	6063      	str	r3, [r4, #4]
 8022372:	bf04      	itt	eq
 8022374:	1949      	addeq	r1, r1, r5
 8022376:	6021      	streq	r1, [r4, #0]
 8022378:	6054      	str	r4, [r2, #4]
 802237a:	e7ca      	b.n	8022312 <_free_r+0x26>
 802237c:	b003      	add	sp, #12
 802237e:	bd30      	pop	{r4, r5, pc}
 8022380:	200073a4 	.word	0x200073a4

08022384 <sbrk_aligned>:
 8022384:	b570      	push	{r4, r5, r6, lr}
 8022386:	4e0e      	ldr	r6, [pc, #56]	; (80223c0 <sbrk_aligned+0x3c>)
 8022388:	460c      	mov	r4, r1
 802238a:	6831      	ldr	r1, [r6, #0]
 802238c:	4605      	mov	r5, r0
 802238e:	b911      	cbnz	r1, 8022396 <sbrk_aligned+0x12>
 8022390:	f000 fcd0 	bl	8022d34 <_sbrk_r>
 8022394:	6030      	str	r0, [r6, #0]
 8022396:	4621      	mov	r1, r4
 8022398:	4628      	mov	r0, r5
 802239a:	f000 fccb 	bl	8022d34 <_sbrk_r>
 802239e:	1c43      	adds	r3, r0, #1
 80223a0:	d00a      	beq.n	80223b8 <sbrk_aligned+0x34>
 80223a2:	1cc4      	adds	r4, r0, #3
 80223a4:	f024 0403 	bic.w	r4, r4, #3
 80223a8:	42a0      	cmp	r0, r4
 80223aa:	d007      	beq.n	80223bc <sbrk_aligned+0x38>
 80223ac:	1a21      	subs	r1, r4, r0
 80223ae:	4628      	mov	r0, r5
 80223b0:	f000 fcc0 	bl	8022d34 <_sbrk_r>
 80223b4:	3001      	adds	r0, #1
 80223b6:	d101      	bne.n	80223bc <sbrk_aligned+0x38>
 80223b8:	f04f 34ff 	mov.w	r4, #4294967295
 80223bc:	4620      	mov	r0, r4
 80223be:	bd70      	pop	{r4, r5, r6, pc}
 80223c0:	200073a8 	.word	0x200073a8

080223c4 <_malloc_r>:
 80223c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80223c8:	1ccd      	adds	r5, r1, #3
 80223ca:	f025 0503 	bic.w	r5, r5, #3
 80223ce:	3508      	adds	r5, #8
 80223d0:	2d0c      	cmp	r5, #12
 80223d2:	bf38      	it	cc
 80223d4:	250c      	movcc	r5, #12
 80223d6:	2d00      	cmp	r5, #0
 80223d8:	4607      	mov	r7, r0
 80223da:	db01      	blt.n	80223e0 <_malloc_r+0x1c>
 80223dc:	42a9      	cmp	r1, r5
 80223de:	d905      	bls.n	80223ec <_malloc_r+0x28>
 80223e0:	230c      	movs	r3, #12
 80223e2:	603b      	str	r3, [r7, #0]
 80223e4:	2600      	movs	r6, #0
 80223e6:	4630      	mov	r0, r6
 80223e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80223ec:	4e2e      	ldr	r6, [pc, #184]	; (80224a8 <_malloc_r+0xe4>)
 80223ee:	f001 fb15 	bl	8023a1c <__malloc_lock>
 80223f2:	6833      	ldr	r3, [r6, #0]
 80223f4:	461c      	mov	r4, r3
 80223f6:	bb34      	cbnz	r4, 8022446 <_malloc_r+0x82>
 80223f8:	4629      	mov	r1, r5
 80223fa:	4638      	mov	r0, r7
 80223fc:	f7ff ffc2 	bl	8022384 <sbrk_aligned>
 8022400:	1c43      	adds	r3, r0, #1
 8022402:	4604      	mov	r4, r0
 8022404:	d14d      	bne.n	80224a2 <_malloc_r+0xde>
 8022406:	6834      	ldr	r4, [r6, #0]
 8022408:	4626      	mov	r6, r4
 802240a:	2e00      	cmp	r6, #0
 802240c:	d140      	bne.n	8022490 <_malloc_r+0xcc>
 802240e:	6823      	ldr	r3, [r4, #0]
 8022410:	4631      	mov	r1, r6
 8022412:	4638      	mov	r0, r7
 8022414:	eb04 0803 	add.w	r8, r4, r3
 8022418:	f000 fc8c 	bl	8022d34 <_sbrk_r>
 802241c:	4580      	cmp	r8, r0
 802241e:	d13a      	bne.n	8022496 <_malloc_r+0xd2>
 8022420:	6821      	ldr	r1, [r4, #0]
 8022422:	3503      	adds	r5, #3
 8022424:	1a6d      	subs	r5, r5, r1
 8022426:	f025 0503 	bic.w	r5, r5, #3
 802242a:	3508      	adds	r5, #8
 802242c:	2d0c      	cmp	r5, #12
 802242e:	bf38      	it	cc
 8022430:	250c      	movcc	r5, #12
 8022432:	4629      	mov	r1, r5
 8022434:	4638      	mov	r0, r7
 8022436:	f7ff ffa5 	bl	8022384 <sbrk_aligned>
 802243a:	3001      	adds	r0, #1
 802243c:	d02b      	beq.n	8022496 <_malloc_r+0xd2>
 802243e:	6823      	ldr	r3, [r4, #0]
 8022440:	442b      	add	r3, r5
 8022442:	6023      	str	r3, [r4, #0]
 8022444:	e00e      	b.n	8022464 <_malloc_r+0xa0>
 8022446:	6822      	ldr	r2, [r4, #0]
 8022448:	1b52      	subs	r2, r2, r5
 802244a:	d41e      	bmi.n	802248a <_malloc_r+0xc6>
 802244c:	2a0b      	cmp	r2, #11
 802244e:	d916      	bls.n	802247e <_malloc_r+0xba>
 8022450:	1961      	adds	r1, r4, r5
 8022452:	42a3      	cmp	r3, r4
 8022454:	6025      	str	r5, [r4, #0]
 8022456:	bf18      	it	ne
 8022458:	6059      	strne	r1, [r3, #4]
 802245a:	6863      	ldr	r3, [r4, #4]
 802245c:	bf08      	it	eq
 802245e:	6031      	streq	r1, [r6, #0]
 8022460:	5162      	str	r2, [r4, r5]
 8022462:	604b      	str	r3, [r1, #4]
 8022464:	4638      	mov	r0, r7
 8022466:	f104 060b 	add.w	r6, r4, #11
 802246a:	f001 fadd 	bl	8023a28 <__malloc_unlock>
 802246e:	f026 0607 	bic.w	r6, r6, #7
 8022472:	1d23      	adds	r3, r4, #4
 8022474:	1af2      	subs	r2, r6, r3
 8022476:	d0b6      	beq.n	80223e6 <_malloc_r+0x22>
 8022478:	1b9b      	subs	r3, r3, r6
 802247a:	50a3      	str	r3, [r4, r2]
 802247c:	e7b3      	b.n	80223e6 <_malloc_r+0x22>
 802247e:	6862      	ldr	r2, [r4, #4]
 8022480:	42a3      	cmp	r3, r4
 8022482:	bf0c      	ite	eq
 8022484:	6032      	streq	r2, [r6, #0]
 8022486:	605a      	strne	r2, [r3, #4]
 8022488:	e7ec      	b.n	8022464 <_malloc_r+0xa0>
 802248a:	4623      	mov	r3, r4
 802248c:	6864      	ldr	r4, [r4, #4]
 802248e:	e7b2      	b.n	80223f6 <_malloc_r+0x32>
 8022490:	4634      	mov	r4, r6
 8022492:	6876      	ldr	r6, [r6, #4]
 8022494:	e7b9      	b.n	802240a <_malloc_r+0x46>
 8022496:	230c      	movs	r3, #12
 8022498:	603b      	str	r3, [r7, #0]
 802249a:	4638      	mov	r0, r7
 802249c:	f001 fac4 	bl	8023a28 <__malloc_unlock>
 80224a0:	e7a1      	b.n	80223e6 <_malloc_r+0x22>
 80224a2:	6025      	str	r5, [r4, #0]
 80224a4:	e7de      	b.n	8022464 <_malloc_r+0xa0>
 80224a6:	bf00      	nop
 80224a8:	200073a4 	.word	0x200073a4

080224ac <__cvt>:
 80224ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224ae:	ed2d 8b02 	vpush	{d8}
 80224b2:	eeb0 8b40 	vmov.f64	d8, d0
 80224b6:	b085      	sub	sp, #20
 80224b8:	4617      	mov	r7, r2
 80224ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80224bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80224be:	ee18 2a90 	vmov	r2, s17
 80224c2:	f025 0520 	bic.w	r5, r5, #32
 80224c6:	2a00      	cmp	r2, #0
 80224c8:	bfb6      	itet	lt
 80224ca:	222d      	movlt	r2, #45	; 0x2d
 80224cc:	2200      	movge	r2, #0
 80224ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80224d2:	2d46      	cmp	r5, #70	; 0x46
 80224d4:	460c      	mov	r4, r1
 80224d6:	701a      	strb	r2, [r3, #0]
 80224d8:	d004      	beq.n	80224e4 <__cvt+0x38>
 80224da:	2d45      	cmp	r5, #69	; 0x45
 80224dc:	d100      	bne.n	80224e0 <__cvt+0x34>
 80224de:	3401      	adds	r4, #1
 80224e0:	2102      	movs	r1, #2
 80224e2:	e000      	b.n	80224e6 <__cvt+0x3a>
 80224e4:	2103      	movs	r1, #3
 80224e6:	ab03      	add	r3, sp, #12
 80224e8:	9301      	str	r3, [sp, #4]
 80224ea:	ab02      	add	r3, sp, #8
 80224ec:	9300      	str	r3, [sp, #0]
 80224ee:	4622      	mov	r2, r4
 80224f0:	4633      	mov	r3, r6
 80224f2:	eeb0 0b48 	vmov.f64	d0, d8
 80224f6:	f000 fd1f 	bl	8022f38 <_dtoa_r>
 80224fa:	2d47      	cmp	r5, #71	; 0x47
 80224fc:	d101      	bne.n	8022502 <__cvt+0x56>
 80224fe:	07fb      	lsls	r3, r7, #31
 8022500:	d51a      	bpl.n	8022538 <__cvt+0x8c>
 8022502:	2d46      	cmp	r5, #70	; 0x46
 8022504:	eb00 0204 	add.w	r2, r0, r4
 8022508:	d10c      	bne.n	8022524 <__cvt+0x78>
 802250a:	7803      	ldrb	r3, [r0, #0]
 802250c:	2b30      	cmp	r3, #48	; 0x30
 802250e:	d107      	bne.n	8022520 <__cvt+0x74>
 8022510:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022518:	bf1c      	itt	ne
 802251a:	f1c4 0401 	rsbne	r4, r4, #1
 802251e:	6034      	strne	r4, [r6, #0]
 8022520:	6833      	ldr	r3, [r6, #0]
 8022522:	441a      	add	r2, r3
 8022524:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802252c:	bf08      	it	eq
 802252e:	9203      	streq	r2, [sp, #12]
 8022530:	2130      	movs	r1, #48	; 0x30
 8022532:	9b03      	ldr	r3, [sp, #12]
 8022534:	4293      	cmp	r3, r2
 8022536:	d307      	bcc.n	8022548 <__cvt+0x9c>
 8022538:	9b03      	ldr	r3, [sp, #12]
 802253a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802253c:	1a1b      	subs	r3, r3, r0
 802253e:	6013      	str	r3, [r2, #0]
 8022540:	b005      	add	sp, #20
 8022542:	ecbd 8b02 	vpop	{d8}
 8022546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022548:	1c5c      	adds	r4, r3, #1
 802254a:	9403      	str	r4, [sp, #12]
 802254c:	7019      	strb	r1, [r3, #0]
 802254e:	e7f0      	b.n	8022532 <__cvt+0x86>

08022550 <__exponent>:
 8022550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022552:	4603      	mov	r3, r0
 8022554:	2900      	cmp	r1, #0
 8022556:	bfb8      	it	lt
 8022558:	4249      	neglt	r1, r1
 802255a:	f803 2b02 	strb.w	r2, [r3], #2
 802255e:	bfb4      	ite	lt
 8022560:	222d      	movlt	r2, #45	; 0x2d
 8022562:	222b      	movge	r2, #43	; 0x2b
 8022564:	2909      	cmp	r1, #9
 8022566:	7042      	strb	r2, [r0, #1]
 8022568:	dd2a      	ble.n	80225c0 <__exponent+0x70>
 802256a:	f10d 0407 	add.w	r4, sp, #7
 802256e:	46a4      	mov	ip, r4
 8022570:	270a      	movs	r7, #10
 8022572:	46a6      	mov	lr, r4
 8022574:	460a      	mov	r2, r1
 8022576:	fb91 f6f7 	sdiv	r6, r1, r7
 802257a:	fb07 1516 	mls	r5, r7, r6, r1
 802257e:	3530      	adds	r5, #48	; 0x30
 8022580:	2a63      	cmp	r2, #99	; 0x63
 8022582:	f104 34ff 	add.w	r4, r4, #4294967295
 8022586:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802258a:	4631      	mov	r1, r6
 802258c:	dcf1      	bgt.n	8022572 <__exponent+0x22>
 802258e:	3130      	adds	r1, #48	; 0x30
 8022590:	f1ae 0502 	sub.w	r5, lr, #2
 8022594:	f804 1c01 	strb.w	r1, [r4, #-1]
 8022598:	1c44      	adds	r4, r0, #1
 802259a:	4629      	mov	r1, r5
 802259c:	4561      	cmp	r1, ip
 802259e:	d30a      	bcc.n	80225b6 <__exponent+0x66>
 80225a0:	f10d 0209 	add.w	r2, sp, #9
 80225a4:	eba2 020e 	sub.w	r2, r2, lr
 80225a8:	4565      	cmp	r5, ip
 80225aa:	bf88      	it	hi
 80225ac:	2200      	movhi	r2, #0
 80225ae:	4413      	add	r3, r2
 80225b0:	1a18      	subs	r0, r3, r0
 80225b2:	b003      	add	sp, #12
 80225b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80225ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80225be:	e7ed      	b.n	802259c <__exponent+0x4c>
 80225c0:	2330      	movs	r3, #48	; 0x30
 80225c2:	3130      	adds	r1, #48	; 0x30
 80225c4:	7083      	strb	r3, [r0, #2]
 80225c6:	70c1      	strb	r1, [r0, #3]
 80225c8:	1d03      	adds	r3, r0, #4
 80225ca:	e7f1      	b.n	80225b0 <__exponent+0x60>
 80225cc:	0000      	movs	r0, r0
	...

080225d0 <_printf_float>:
 80225d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225d4:	b08b      	sub	sp, #44	; 0x2c
 80225d6:	460c      	mov	r4, r1
 80225d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80225dc:	4616      	mov	r6, r2
 80225de:	461f      	mov	r7, r3
 80225e0:	4605      	mov	r5, r0
 80225e2:	f001 fa17 	bl	8023a14 <_localeconv_r>
 80225e6:	f8d0 b000 	ldr.w	fp, [r0]
 80225ea:	4658      	mov	r0, fp
 80225ec:	f7dd fe82 	bl	80002f4 <strlen>
 80225f0:	2300      	movs	r3, #0
 80225f2:	9308      	str	r3, [sp, #32]
 80225f4:	f8d8 3000 	ldr.w	r3, [r8]
 80225f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80225fc:	6822      	ldr	r2, [r4, #0]
 80225fe:	3307      	adds	r3, #7
 8022600:	f023 0307 	bic.w	r3, r3, #7
 8022604:	f103 0108 	add.w	r1, r3, #8
 8022608:	f8c8 1000 	str.w	r1, [r8]
 802260c:	4682      	mov	sl, r0
 802260e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022612:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8022616:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8022878 <_printf_float+0x2a8>
 802261a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802261e:	eeb0 6bc0 	vabs.f64	d6, d0
 8022622:	eeb4 6b47 	vcmp.f64	d6, d7
 8022626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802262a:	dd24      	ble.n	8022676 <_printf_float+0xa6>
 802262c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8022630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022634:	d502      	bpl.n	802263c <_printf_float+0x6c>
 8022636:	232d      	movs	r3, #45	; 0x2d
 8022638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802263c:	4b90      	ldr	r3, [pc, #576]	; (8022880 <_printf_float+0x2b0>)
 802263e:	4891      	ldr	r0, [pc, #580]	; (8022884 <_printf_float+0x2b4>)
 8022640:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8022644:	bf94      	ite	ls
 8022646:	4698      	movls	r8, r3
 8022648:	4680      	movhi	r8, r0
 802264a:	2303      	movs	r3, #3
 802264c:	6123      	str	r3, [r4, #16]
 802264e:	f022 0204 	bic.w	r2, r2, #4
 8022652:	2300      	movs	r3, #0
 8022654:	6022      	str	r2, [r4, #0]
 8022656:	9304      	str	r3, [sp, #16]
 8022658:	9700      	str	r7, [sp, #0]
 802265a:	4633      	mov	r3, r6
 802265c:	aa09      	add	r2, sp, #36	; 0x24
 802265e:	4621      	mov	r1, r4
 8022660:	4628      	mov	r0, r5
 8022662:	f000 f9d3 	bl	8022a0c <_printf_common>
 8022666:	3001      	adds	r0, #1
 8022668:	f040 808a 	bne.w	8022780 <_printf_float+0x1b0>
 802266c:	f04f 30ff 	mov.w	r0, #4294967295
 8022670:	b00b      	add	sp, #44	; 0x2c
 8022672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022676:	eeb4 0b40 	vcmp.f64	d0, d0
 802267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802267e:	d709      	bvc.n	8022694 <_printf_float+0xc4>
 8022680:	ee10 3a90 	vmov	r3, s1
 8022684:	2b00      	cmp	r3, #0
 8022686:	bfbc      	itt	lt
 8022688:	232d      	movlt	r3, #45	; 0x2d
 802268a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802268e:	487e      	ldr	r0, [pc, #504]	; (8022888 <_printf_float+0x2b8>)
 8022690:	4b7e      	ldr	r3, [pc, #504]	; (802288c <_printf_float+0x2bc>)
 8022692:	e7d5      	b.n	8022640 <_printf_float+0x70>
 8022694:	6863      	ldr	r3, [r4, #4]
 8022696:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 802269a:	9104      	str	r1, [sp, #16]
 802269c:	1c59      	adds	r1, r3, #1
 802269e:	d13c      	bne.n	802271a <_printf_float+0x14a>
 80226a0:	2306      	movs	r3, #6
 80226a2:	6063      	str	r3, [r4, #4]
 80226a4:	2300      	movs	r3, #0
 80226a6:	9303      	str	r3, [sp, #12]
 80226a8:	ab08      	add	r3, sp, #32
 80226aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80226ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80226b2:	ab07      	add	r3, sp, #28
 80226b4:	6861      	ldr	r1, [r4, #4]
 80226b6:	9300      	str	r3, [sp, #0]
 80226b8:	6022      	str	r2, [r4, #0]
 80226ba:	f10d 031b 	add.w	r3, sp, #27
 80226be:	4628      	mov	r0, r5
 80226c0:	f7ff fef4 	bl	80224ac <__cvt>
 80226c4:	9b04      	ldr	r3, [sp, #16]
 80226c6:	9907      	ldr	r1, [sp, #28]
 80226c8:	2b47      	cmp	r3, #71	; 0x47
 80226ca:	4680      	mov	r8, r0
 80226cc:	d108      	bne.n	80226e0 <_printf_float+0x110>
 80226ce:	1cc8      	adds	r0, r1, #3
 80226d0:	db02      	blt.n	80226d8 <_printf_float+0x108>
 80226d2:	6863      	ldr	r3, [r4, #4]
 80226d4:	4299      	cmp	r1, r3
 80226d6:	dd41      	ble.n	802275c <_printf_float+0x18c>
 80226d8:	f1a9 0902 	sub.w	r9, r9, #2
 80226dc:	fa5f f989 	uxtb.w	r9, r9
 80226e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80226e4:	d820      	bhi.n	8022728 <_printf_float+0x158>
 80226e6:	3901      	subs	r1, #1
 80226e8:	464a      	mov	r2, r9
 80226ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80226ee:	9107      	str	r1, [sp, #28]
 80226f0:	f7ff ff2e 	bl	8022550 <__exponent>
 80226f4:	9a08      	ldr	r2, [sp, #32]
 80226f6:	9004      	str	r0, [sp, #16]
 80226f8:	1813      	adds	r3, r2, r0
 80226fa:	2a01      	cmp	r2, #1
 80226fc:	6123      	str	r3, [r4, #16]
 80226fe:	dc02      	bgt.n	8022706 <_printf_float+0x136>
 8022700:	6822      	ldr	r2, [r4, #0]
 8022702:	07d2      	lsls	r2, r2, #31
 8022704:	d501      	bpl.n	802270a <_printf_float+0x13a>
 8022706:	3301      	adds	r3, #1
 8022708:	6123      	str	r3, [r4, #16]
 802270a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802270e:	2b00      	cmp	r3, #0
 8022710:	d0a2      	beq.n	8022658 <_printf_float+0x88>
 8022712:	232d      	movs	r3, #45	; 0x2d
 8022714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022718:	e79e      	b.n	8022658 <_printf_float+0x88>
 802271a:	9904      	ldr	r1, [sp, #16]
 802271c:	2947      	cmp	r1, #71	; 0x47
 802271e:	d1c1      	bne.n	80226a4 <_printf_float+0xd4>
 8022720:	2b00      	cmp	r3, #0
 8022722:	d1bf      	bne.n	80226a4 <_printf_float+0xd4>
 8022724:	2301      	movs	r3, #1
 8022726:	e7bc      	b.n	80226a2 <_printf_float+0xd2>
 8022728:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802272c:	d118      	bne.n	8022760 <_printf_float+0x190>
 802272e:	2900      	cmp	r1, #0
 8022730:	6863      	ldr	r3, [r4, #4]
 8022732:	dd0b      	ble.n	802274c <_printf_float+0x17c>
 8022734:	6121      	str	r1, [r4, #16]
 8022736:	b913      	cbnz	r3, 802273e <_printf_float+0x16e>
 8022738:	6822      	ldr	r2, [r4, #0]
 802273a:	07d0      	lsls	r0, r2, #31
 802273c:	d502      	bpl.n	8022744 <_printf_float+0x174>
 802273e:	3301      	adds	r3, #1
 8022740:	440b      	add	r3, r1
 8022742:	6123      	str	r3, [r4, #16]
 8022744:	2300      	movs	r3, #0
 8022746:	65a1      	str	r1, [r4, #88]	; 0x58
 8022748:	9304      	str	r3, [sp, #16]
 802274a:	e7de      	b.n	802270a <_printf_float+0x13a>
 802274c:	b913      	cbnz	r3, 8022754 <_printf_float+0x184>
 802274e:	6822      	ldr	r2, [r4, #0]
 8022750:	07d2      	lsls	r2, r2, #31
 8022752:	d501      	bpl.n	8022758 <_printf_float+0x188>
 8022754:	3302      	adds	r3, #2
 8022756:	e7f4      	b.n	8022742 <_printf_float+0x172>
 8022758:	2301      	movs	r3, #1
 802275a:	e7f2      	b.n	8022742 <_printf_float+0x172>
 802275c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8022760:	9b08      	ldr	r3, [sp, #32]
 8022762:	4299      	cmp	r1, r3
 8022764:	db05      	blt.n	8022772 <_printf_float+0x1a2>
 8022766:	6823      	ldr	r3, [r4, #0]
 8022768:	6121      	str	r1, [r4, #16]
 802276a:	07d8      	lsls	r0, r3, #31
 802276c:	d5ea      	bpl.n	8022744 <_printf_float+0x174>
 802276e:	1c4b      	adds	r3, r1, #1
 8022770:	e7e7      	b.n	8022742 <_printf_float+0x172>
 8022772:	2900      	cmp	r1, #0
 8022774:	bfd4      	ite	le
 8022776:	f1c1 0202 	rsble	r2, r1, #2
 802277a:	2201      	movgt	r2, #1
 802277c:	4413      	add	r3, r2
 802277e:	e7e0      	b.n	8022742 <_printf_float+0x172>
 8022780:	6823      	ldr	r3, [r4, #0]
 8022782:	055a      	lsls	r2, r3, #21
 8022784:	d407      	bmi.n	8022796 <_printf_float+0x1c6>
 8022786:	6923      	ldr	r3, [r4, #16]
 8022788:	4642      	mov	r2, r8
 802278a:	4631      	mov	r1, r6
 802278c:	4628      	mov	r0, r5
 802278e:	47b8      	blx	r7
 8022790:	3001      	adds	r0, #1
 8022792:	d12a      	bne.n	80227ea <_printf_float+0x21a>
 8022794:	e76a      	b.n	802266c <_printf_float+0x9c>
 8022796:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802279a:	f240 80e2 	bls.w	8022962 <_printf_float+0x392>
 802279e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80227a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80227a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227aa:	d133      	bne.n	8022814 <_printf_float+0x244>
 80227ac:	4a38      	ldr	r2, [pc, #224]	; (8022890 <_printf_float+0x2c0>)
 80227ae:	2301      	movs	r3, #1
 80227b0:	4631      	mov	r1, r6
 80227b2:	4628      	mov	r0, r5
 80227b4:	47b8      	blx	r7
 80227b6:	3001      	adds	r0, #1
 80227b8:	f43f af58 	beq.w	802266c <_printf_float+0x9c>
 80227bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80227c0:	429a      	cmp	r2, r3
 80227c2:	db02      	blt.n	80227ca <_printf_float+0x1fa>
 80227c4:	6823      	ldr	r3, [r4, #0]
 80227c6:	07d8      	lsls	r0, r3, #31
 80227c8:	d50f      	bpl.n	80227ea <_printf_float+0x21a>
 80227ca:	4653      	mov	r3, sl
 80227cc:	465a      	mov	r2, fp
 80227ce:	4631      	mov	r1, r6
 80227d0:	4628      	mov	r0, r5
 80227d2:	47b8      	blx	r7
 80227d4:	3001      	adds	r0, #1
 80227d6:	f43f af49 	beq.w	802266c <_printf_float+0x9c>
 80227da:	f04f 0800 	mov.w	r8, #0
 80227de:	f104 091a 	add.w	r9, r4, #26
 80227e2:	9b08      	ldr	r3, [sp, #32]
 80227e4:	3b01      	subs	r3, #1
 80227e6:	4543      	cmp	r3, r8
 80227e8:	dc09      	bgt.n	80227fe <_printf_float+0x22e>
 80227ea:	6823      	ldr	r3, [r4, #0]
 80227ec:	079b      	lsls	r3, r3, #30
 80227ee:	f100 8108 	bmi.w	8022a02 <_printf_float+0x432>
 80227f2:	68e0      	ldr	r0, [r4, #12]
 80227f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227f6:	4298      	cmp	r0, r3
 80227f8:	bfb8      	it	lt
 80227fa:	4618      	movlt	r0, r3
 80227fc:	e738      	b.n	8022670 <_printf_float+0xa0>
 80227fe:	2301      	movs	r3, #1
 8022800:	464a      	mov	r2, r9
 8022802:	4631      	mov	r1, r6
 8022804:	4628      	mov	r0, r5
 8022806:	47b8      	blx	r7
 8022808:	3001      	adds	r0, #1
 802280a:	f43f af2f 	beq.w	802266c <_printf_float+0x9c>
 802280e:	f108 0801 	add.w	r8, r8, #1
 8022812:	e7e6      	b.n	80227e2 <_printf_float+0x212>
 8022814:	9b07      	ldr	r3, [sp, #28]
 8022816:	2b00      	cmp	r3, #0
 8022818:	dc3c      	bgt.n	8022894 <_printf_float+0x2c4>
 802281a:	4a1d      	ldr	r2, [pc, #116]	; (8022890 <_printf_float+0x2c0>)
 802281c:	2301      	movs	r3, #1
 802281e:	4631      	mov	r1, r6
 8022820:	4628      	mov	r0, r5
 8022822:	47b8      	blx	r7
 8022824:	3001      	adds	r0, #1
 8022826:	f43f af21 	beq.w	802266c <_printf_float+0x9c>
 802282a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802282e:	4313      	orrs	r3, r2
 8022830:	d102      	bne.n	8022838 <_printf_float+0x268>
 8022832:	6823      	ldr	r3, [r4, #0]
 8022834:	07d9      	lsls	r1, r3, #31
 8022836:	d5d8      	bpl.n	80227ea <_printf_float+0x21a>
 8022838:	4653      	mov	r3, sl
 802283a:	465a      	mov	r2, fp
 802283c:	4631      	mov	r1, r6
 802283e:	4628      	mov	r0, r5
 8022840:	47b8      	blx	r7
 8022842:	3001      	adds	r0, #1
 8022844:	f43f af12 	beq.w	802266c <_printf_float+0x9c>
 8022848:	f04f 0900 	mov.w	r9, #0
 802284c:	f104 0a1a 	add.w	sl, r4, #26
 8022850:	9b07      	ldr	r3, [sp, #28]
 8022852:	425b      	negs	r3, r3
 8022854:	454b      	cmp	r3, r9
 8022856:	dc01      	bgt.n	802285c <_printf_float+0x28c>
 8022858:	9b08      	ldr	r3, [sp, #32]
 802285a:	e795      	b.n	8022788 <_printf_float+0x1b8>
 802285c:	2301      	movs	r3, #1
 802285e:	4652      	mov	r2, sl
 8022860:	4631      	mov	r1, r6
 8022862:	4628      	mov	r0, r5
 8022864:	47b8      	blx	r7
 8022866:	3001      	adds	r0, #1
 8022868:	f43f af00 	beq.w	802266c <_printf_float+0x9c>
 802286c:	f109 0901 	add.w	r9, r9, #1
 8022870:	e7ee      	b.n	8022850 <_printf_float+0x280>
 8022872:	bf00      	nop
 8022874:	f3af 8000 	nop.w
 8022878:	ffffffff 	.word	0xffffffff
 802287c:	7fefffff 	.word	0x7fefffff
 8022880:	08063834 	.word	0x08063834
 8022884:	08063838 	.word	0x08063838
 8022888:	08063840 	.word	0x08063840
 802288c:	0806383c 	.word	0x0806383c
 8022890:	08063844 	.word	0x08063844
 8022894:	9a08      	ldr	r2, [sp, #32]
 8022896:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022898:	429a      	cmp	r2, r3
 802289a:	bfa8      	it	ge
 802289c:	461a      	movge	r2, r3
 802289e:	2a00      	cmp	r2, #0
 80228a0:	4691      	mov	r9, r2
 80228a2:	dc38      	bgt.n	8022916 <_printf_float+0x346>
 80228a4:	2300      	movs	r3, #0
 80228a6:	9305      	str	r3, [sp, #20]
 80228a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80228ac:	f104 021a 	add.w	r2, r4, #26
 80228b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80228b2:	9905      	ldr	r1, [sp, #20]
 80228b4:	9304      	str	r3, [sp, #16]
 80228b6:	eba3 0309 	sub.w	r3, r3, r9
 80228ba:	428b      	cmp	r3, r1
 80228bc:	dc33      	bgt.n	8022926 <_printf_float+0x356>
 80228be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80228c2:	429a      	cmp	r2, r3
 80228c4:	db3c      	blt.n	8022940 <_printf_float+0x370>
 80228c6:	6823      	ldr	r3, [r4, #0]
 80228c8:	07da      	lsls	r2, r3, #31
 80228ca:	d439      	bmi.n	8022940 <_printf_float+0x370>
 80228cc:	9b08      	ldr	r3, [sp, #32]
 80228ce:	9a04      	ldr	r2, [sp, #16]
 80228d0:	9907      	ldr	r1, [sp, #28]
 80228d2:	1a9a      	subs	r2, r3, r2
 80228d4:	eba3 0901 	sub.w	r9, r3, r1
 80228d8:	4591      	cmp	r9, r2
 80228da:	bfa8      	it	ge
 80228dc:	4691      	movge	r9, r2
 80228de:	f1b9 0f00 	cmp.w	r9, #0
 80228e2:	dc35      	bgt.n	8022950 <_printf_float+0x380>
 80228e4:	f04f 0800 	mov.w	r8, #0
 80228e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80228ec:	f104 0a1a 	add.w	sl, r4, #26
 80228f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80228f4:	1a9b      	subs	r3, r3, r2
 80228f6:	eba3 0309 	sub.w	r3, r3, r9
 80228fa:	4543      	cmp	r3, r8
 80228fc:	f77f af75 	ble.w	80227ea <_printf_float+0x21a>
 8022900:	2301      	movs	r3, #1
 8022902:	4652      	mov	r2, sl
 8022904:	4631      	mov	r1, r6
 8022906:	4628      	mov	r0, r5
 8022908:	47b8      	blx	r7
 802290a:	3001      	adds	r0, #1
 802290c:	f43f aeae 	beq.w	802266c <_printf_float+0x9c>
 8022910:	f108 0801 	add.w	r8, r8, #1
 8022914:	e7ec      	b.n	80228f0 <_printf_float+0x320>
 8022916:	4613      	mov	r3, r2
 8022918:	4631      	mov	r1, r6
 802291a:	4642      	mov	r2, r8
 802291c:	4628      	mov	r0, r5
 802291e:	47b8      	blx	r7
 8022920:	3001      	adds	r0, #1
 8022922:	d1bf      	bne.n	80228a4 <_printf_float+0x2d4>
 8022924:	e6a2      	b.n	802266c <_printf_float+0x9c>
 8022926:	2301      	movs	r3, #1
 8022928:	4631      	mov	r1, r6
 802292a:	4628      	mov	r0, r5
 802292c:	9204      	str	r2, [sp, #16]
 802292e:	47b8      	blx	r7
 8022930:	3001      	adds	r0, #1
 8022932:	f43f ae9b 	beq.w	802266c <_printf_float+0x9c>
 8022936:	9b05      	ldr	r3, [sp, #20]
 8022938:	9a04      	ldr	r2, [sp, #16]
 802293a:	3301      	adds	r3, #1
 802293c:	9305      	str	r3, [sp, #20]
 802293e:	e7b7      	b.n	80228b0 <_printf_float+0x2e0>
 8022940:	4653      	mov	r3, sl
 8022942:	465a      	mov	r2, fp
 8022944:	4631      	mov	r1, r6
 8022946:	4628      	mov	r0, r5
 8022948:	47b8      	blx	r7
 802294a:	3001      	adds	r0, #1
 802294c:	d1be      	bne.n	80228cc <_printf_float+0x2fc>
 802294e:	e68d      	b.n	802266c <_printf_float+0x9c>
 8022950:	9a04      	ldr	r2, [sp, #16]
 8022952:	464b      	mov	r3, r9
 8022954:	4442      	add	r2, r8
 8022956:	4631      	mov	r1, r6
 8022958:	4628      	mov	r0, r5
 802295a:	47b8      	blx	r7
 802295c:	3001      	adds	r0, #1
 802295e:	d1c1      	bne.n	80228e4 <_printf_float+0x314>
 8022960:	e684      	b.n	802266c <_printf_float+0x9c>
 8022962:	9a08      	ldr	r2, [sp, #32]
 8022964:	2a01      	cmp	r2, #1
 8022966:	dc01      	bgt.n	802296c <_printf_float+0x39c>
 8022968:	07db      	lsls	r3, r3, #31
 802296a:	d537      	bpl.n	80229dc <_printf_float+0x40c>
 802296c:	2301      	movs	r3, #1
 802296e:	4642      	mov	r2, r8
 8022970:	4631      	mov	r1, r6
 8022972:	4628      	mov	r0, r5
 8022974:	47b8      	blx	r7
 8022976:	3001      	adds	r0, #1
 8022978:	f43f ae78 	beq.w	802266c <_printf_float+0x9c>
 802297c:	4653      	mov	r3, sl
 802297e:	465a      	mov	r2, fp
 8022980:	4631      	mov	r1, r6
 8022982:	4628      	mov	r0, r5
 8022984:	47b8      	blx	r7
 8022986:	3001      	adds	r0, #1
 8022988:	f43f ae70 	beq.w	802266c <_printf_float+0x9c>
 802298c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8022990:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022998:	d01b      	beq.n	80229d2 <_printf_float+0x402>
 802299a:	9b08      	ldr	r3, [sp, #32]
 802299c:	f108 0201 	add.w	r2, r8, #1
 80229a0:	3b01      	subs	r3, #1
 80229a2:	4631      	mov	r1, r6
 80229a4:	4628      	mov	r0, r5
 80229a6:	47b8      	blx	r7
 80229a8:	3001      	adds	r0, #1
 80229aa:	d10e      	bne.n	80229ca <_printf_float+0x3fa>
 80229ac:	e65e      	b.n	802266c <_printf_float+0x9c>
 80229ae:	2301      	movs	r3, #1
 80229b0:	464a      	mov	r2, r9
 80229b2:	4631      	mov	r1, r6
 80229b4:	4628      	mov	r0, r5
 80229b6:	47b8      	blx	r7
 80229b8:	3001      	adds	r0, #1
 80229ba:	f43f ae57 	beq.w	802266c <_printf_float+0x9c>
 80229be:	f108 0801 	add.w	r8, r8, #1
 80229c2:	9b08      	ldr	r3, [sp, #32]
 80229c4:	3b01      	subs	r3, #1
 80229c6:	4543      	cmp	r3, r8
 80229c8:	dcf1      	bgt.n	80229ae <_printf_float+0x3de>
 80229ca:	9b04      	ldr	r3, [sp, #16]
 80229cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80229d0:	e6db      	b.n	802278a <_printf_float+0x1ba>
 80229d2:	f04f 0800 	mov.w	r8, #0
 80229d6:	f104 091a 	add.w	r9, r4, #26
 80229da:	e7f2      	b.n	80229c2 <_printf_float+0x3f2>
 80229dc:	2301      	movs	r3, #1
 80229de:	4642      	mov	r2, r8
 80229e0:	e7df      	b.n	80229a2 <_printf_float+0x3d2>
 80229e2:	2301      	movs	r3, #1
 80229e4:	464a      	mov	r2, r9
 80229e6:	4631      	mov	r1, r6
 80229e8:	4628      	mov	r0, r5
 80229ea:	47b8      	blx	r7
 80229ec:	3001      	adds	r0, #1
 80229ee:	f43f ae3d 	beq.w	802266c <_printf_float+0x9c>
 80229f2:	f108 0801 	add.w	r8, r8, #1
 80229f6:	68e3      	ldr	r3, [r4, #12]
 80229f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80229fa:	1a5b      	subs	r3, r3, r1
 80229fc:	4543      	cmp	r3, r8
 80229fe:	dcf0      	bgt.n	80229e2 <_printf_float+0x412>
 8022a00:	e6f7      	b.n	80227f2 <_printf_float+0x222>
 8022a02:	f04f 0800 	mov.w	r8, #0
 8022a06:	f104 0919 	add.w	r9, r4, #25
 8022a0a:	e7f4      	b.n	80229f6 <_printf_float+0x426>

08022a0c <_printf_common>:
 8022a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022a10:	4616      	mov	r6, r2
 8022a12:	4699      	mov	r9, r3
 8022a14:	688a      	ldr	r2, [r1, #8]
 8022a16:	690b      	ldr	r3, [r1, #16]
 8022a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022a1c:	4293      	cmp	r3, r2
 8022a1e:	bfb8      	it	lt
 8022a20:	4613      	movlt	r3, r2
 8022a22:	6033      	str	r3, [r6, #0]
 8022a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022a28:	4607      	mov	r7, r0
 8022a2a:	460c      	mov	r4, r1
 8022a2c:	b10a      	cbz	r2, 8022a32 <_printf_common+0x26>
 8022a2e:	3301      	adds	r3, #1
 8022a30:	6033      	str	r3, [r6, #0]
 8022a32:	6823      	ldr	r3, [r4, #0]
 8022a34:	0699      	lsls	r1, r3, #26
 8022a36:	bf42      	ittt	mi
 8022a38:	6833      	ldrmi	r3, [r6, #0]
 8022a3a:	3302      	addmi	r3, #2
 8022a3c:	6033      	strmi	r3, [r6, #0]
 8022a3e:	6825      	ldr	r5, [r4, #0]
 8022a40:	f015 0506 	ands.w	r5, r5, #6
 8022a44:	d106      	bne.n	8022a54 <_printf_common+0x48>
 8022a46:	f104 0a19 	add.w	sl, r4, #25
 8022a4a:	68e3      	ldr	r3, [r4, #12]
 8022a4c:	6832      	ldr	r2, [r6, #0]
 8022a4e:	1a9b      	subs	r3, r3, r2
 8022a50:	42ab      	cmp	r3, r5
 8022a52:	dc26      	bgt.n	8022aa2 <_printf_common+0x96>
 8022a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022a58:	1e13      	subs	r3, r2, #0
 8022a5a:	6822      	ldr	r2, [r4, #0]
 8022a5c:	bf18      	it	ne
 8022a5e:	2301      	movne	r3, #1
 8022a60:	0692      	lsls	r2, r2, #26
 8022a62:	d42b      	bmi.n	8022abc <_printf_common+0xb0>
 8022a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022a68:	4649      	mov	r1, r9
 8022a6a:	4638      	mov	r0, r7
 8022a6c:	47c0      	blx	r8
 8022a6e:	3001      	adds	r0, #1
 8022a70:	d01e      	beq.n	8022ab0 <_printf_common+0xa4>
 8022a72:	6823      	ldr	r3, [r4, #0]
 8022a74:	68e5      	ldr	r5, [r4, #12]
 8022a76:	6832      	ldr	r2, [r6, #0]
 8022a78:	f003 0306 	and.w	r3, r3, #6
 8022a7c:	2b04      	cmp	r3, #4
 8022a7e:	bf08      	it	eq
 8022a80:	1aad      	subeq	r5, r5, r2
 8022a82:	68a3      	ldr	r3, [r4, #8]
 8022a84:	6922      	ldr	r2, [r4, #16]
 8022a86:	bf0c      	ite	eq
 8022a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022a8c:	2500      	movne	r5, #0
 8022a8e:	4293      	cmp	r3, r2
 8022a90:	bfc4      	itt	gt
 8022a92:	1a9b      	subgt	r3, r3, r2
 8022a94:	18ed      	addgt	r5, r5, r3
 8022a96:	2600      	movs	r6, #0
 8022a98:	341a      	adds	r4, #26
 8022a9a:	42b5      	cmp	r5, r6
 8022a9c:	d11a      	bne.n	8022ad4 <_printf_common+0xc8>
 8022a9e:	2000      	movs	r0, #0
 8022aa0:	e008      	b.n	8022ab4 <_printf_common+0xa8>
 8022aa2:	2301      	movs	r3, #1
 8022aa4:	4652      	mov	r2, sl
 8022aa6:	4649      	mov	r1, r9
 8022aa8:	4638      	mov	r0, r7
 8022aaa:	47c0      	blx	r8
 8022aac:	3001      	adds	r0, #1
 8022aae:	d103      	bne.n	8022ab8 <_printf_common+0xac>
 8022ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8022ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ab8:	3501      	adds	r5, #1
 8022aba:	e7c6      	b.n	8022a4a <_printf_common+0x3e>
 8022abc:	18e1      	adds	r1, r4, r3
 8022abe:	1c5a      	adds	r2, r3, #1
 8022ac0:	2030      	movs	r0, #48	; 0x30
 8022ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022ac6:	4422      	add	r2, r4
 8022ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022ad0:	3302      	adds	r3, #2
 8022ad2:	e7c7      	b.n	8022a64 <_printf_common+0x58>
 8022ad4:	2301      	movs	r3, #1
 8022ad6:	4622      	mov	r2, r4
 8022ad8:	4649      	mov	r1, r9
 8022ada:	4638      	mov	r0, r7
 8022adc:	47c0      	blx	r8
 8022ade:	3001      	adds	r0, #1
 8022ae0:	d0e6      	beq.n	8022ab0 <_printf_common+0xa4>
 8022ae2:	3601      	adds	r6, #1
 8022ae4:	e7d9      	b.n	8022a9a <_printf_common+0x8e>
	...

08022ae8 <_printf_i>:
 8022ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022aec:	7e0f      	ldrb	r7, [r1, #24]
 8022aee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022af0:	2f78      	cmp	r7, #120	; 0x78
 8022af2:	4691      	mov	r9, r2
 8022af4:	4680      	mov	r8, r0
 8022af6:	460c      	mov	r4, r1
 8022af8:	469a      	mov	sl, r3
 8022afa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8022afe:	d807      	bhi.n	8022b10 <_printf_i+0x28>
 8022b00:	2f62      	cmp	r7, #98	; 0x62
 8022b02:	d80a      	bhi.n	8022b1a <_printf_i+0x32>
 8022b04:	2f00      	cmp	r7, #0
 8022b06:	f000 80d8 	beq.w	8022cba <_printf_i+0x1d2>
 8022b0a:	2f58      	cmp	r7, #88	; 0x58
 8022b0c:	f000 80a3 	beq.w	8022c56 <_printf_i+0x16e>
 8022b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022b18:	e03a      	b.n	8022b90 <_printf_i+0xa8>
 8022b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022b1e:	2b15      	cmp	r3, #21
 8022b20:	d8f6      	bhi.n	8022b10 <_printf_i+0x28>
 8022b22:	a101      	add	r1, pc, #4	; (adr r1, 8022b28 <_printf_i+0x40>)
 8022b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022b28:	08022b81 	.word	0x08022b81
 8022b2c:	08022b95 	.word	0x08022b95
 8022b30:	08022b11 	.word	0x08022b11
 8022b34:	08022b11 	.word	0x08022b11
 8022b38:	08022b11 	.word	0x08022b11
 8022b3c:	08022b11 	.word	0x08022b11
 8022b40:	08022b95 	.word	0x08022b95
 8022b44:	08022b11 	.word	0x08022b11
 8022b48:	08022b11 	.word	0x08022b11
 8022b4c:	08022b11 	.word	0x08022b11
 8022b50:	08022b11 	.word	0x08022b11
 8022b54:	08022ca1 	.word	0x08022ca1
 8022b58:	08022bc5 	.word	0x08022bc5
 8022b5c:	08022c83 	.word	0x08022c83
 8022b60:	08022b11 	.word	0x08022b11
 8022b64:	08022b11 	.word	0x08022b11
 8022b68:	08022cc3 	.word	0x08022cc3
 8022b6c:	08022b11 	.word	0x08022b11
 8022b70:	08022bc5 	.word	0x08022bc5
 8022b74:	08022b11 	.word	0x08022b11
 8022b78:	08022b11 	.word	0x08022b11
 8022b7c:	08022c8b 	.word	0x08022c8b
 8022b80:	682b      	ldr	r3, [r5, #0]
 8022b82:	1d1a      	adds	r2, r3, #4
 8022b84:	681b      	ldr	r3, [r3, #0]
 8022b86:	602a      	str	r2, [r5, #0]
 8022b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022b90:	2301      	movs	r3, #1
 8022b92:	e0a3      	b.n	8022cdc <_printf_i+0x1f4>
 8022b94:	6820      	ldr	r0, [r4, #0]
 8022b96:	6829      	ldr	r1, [r5, #0]
 8022b98:	0606      	lsls	r6, r0, #24
 8022b9a:	f101 0304 	add.w	r3, r1, #4
 8022b9e:	d50a      	bpl.n	8022bb6 <_printf_i+0xce>
 8022ba0:	680e      	ldr	r6, [r1, #0]
 8022ba2:	602b      	str	r3, [r5, #0]
 8022ba4:	2e00      	cmp	r6, #0
 8022ba6:	da03      	bge.n	8022bb0 <_printf_i+0xc8>
 8022ba8:	232d      	movs	r3, #45	; 0x2d
 8022baa:	4276      	negs	r6, r6
 8022bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022bb0:	485e      	ldr	r0, [pc, #376]	; (8022d2c <_printf_i+0x244>)
 8022bb2:	230a      	movs	r3, #10
 8022bb4:	e019      	b.n	8022bea <_printf_i+0x102>
 8022bb6:	680e      	ldr	r6, [r1, #0]
 8022bb8:	602b      	str	r3, [r5, #0]
 8022bba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022bbe:	bf18      	it	ne
 8022bc0:	b236      	sxthne	r6, r6
 8022bc2:	e7ef      	b.n	8022ba4 <_printf_i+0xbc>
 8022bc4:	682b      	ldr	r3, [r5, #0]
 8022bc6:	6820      	ldr	r0, [r4, #0]
 8022bc8:	1d19      	adds	r1, r3, #4
 8022bca:	6029      	str	r1, [r5, #0]
 8022bcc:	0601      	lsls	r1, r0, #24
 8022bce:	d501      	bpl.n	8022bd4 <_printf_i+0xec>
 8022bd0:	681e      	ldr	r6, [r3, #0]
 8022bd2:	e002      	b.n	8022bda <_printf_i+0xf2>
 8022bd4:	0646      	lsls	r6, r0, #25
 8022bd6:	d5fb      	bpl.n	8022bd0 <_printf_i+0xe8>
 8022bd8:	881e      	ldrh	r6, [r3, #0]
 8022bda:	4854      	ldr	r0, [pc, #336]	; (8022d2c <_printf_i+0x244>)
 8022bdc:	2f6f      	cmp	r7, #111	; 0x6f
 8022bde:	bf0c      	ite	eq
 8022be0:	2308      	moveq	r3, #8
 8022be2:	230a      	movne	r3, #10
 8022be4:	2100      	movs	r1, #0
 8022be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022bea:	6865      	ldr	r5, [r4, #4]
 8022bec:	60a5      	str	r5, [r4, #8]
 8022bee:	2d00      	cmp	r5, #0
 8022bf0:	bfa2      	ittt	ge
 8022bf2:	6821      	ldrge	r1, [r4, #0]
 8022bf4:	f021 0104 	bicge.w	r1, r1, #4
 8022bf8:	6021      	strge	r1, [r4, #0]
 8022bfa:	b90e      	cbnz	r6, 8022c00 <_printf_i+0x118>
 8022bfc:	2d00      	cmp	r5, #0
 8022bfe:	d04d      	beq.n	8022c9c <_printf_i+0x1b4>
 8022c00:	4615      	mov	r5, r2
 8022c02:	fbb6 f1f3 	udiv	r1, r6, r3
 8022c06:	fb03 6711 	mls	r7, r3, r1, r6
 8022c0a:	5dc7      	ldrb	r7, [r0, r7]
 8022c0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022c10:	4637      	mov	r7, r6
 8022c12:	42bb      	cmp	r3, r7
 8022c14:	460e      	mov	r6, r1
 8022c16:	d9f4      	bls.n	8022c02 <_printf_i+0x11a>
 8022c18:	2b08      	cmp	r3, #8
 8022c1a:	d10b      	bne.n	8022c34 <_printf_i+0x14c>
 8022c1c:	6823      	ldr	r3, [r4, #0]
 8022c1e:	07de      	lsls	r6, r3, #31
 8022c20:	d508      	bpl.n	8022c34 <_printf_i+0x14c>
 8022c22:	6923      	ldr	r3, [r4, #16]
 8022c24:	6861      	ldr	r1, [r4, #4]
 8022c26:	4299      	cmp	r1, r3
 8022c28:	bfde      	ittt	le
 8022c2a:	2330      	movle	r3, #48	; 0x30
 8022c2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022c30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022c34:	1b52      	subs	r2, r2, r5
 8022c36:	6122      	str	r2, [r4, #16]
 8022c38:	f8cd a000 	str.w	sl, [sp]
 8022c3c:	464b      	mov	r3, r9
 8022c3e:	aa03      	add	r2, sp, #12
 8022c40:	4621      	mov	r1, r4
 8022c42:	4640      	mov	r0, r8
 8022c44:	f7ff fee2 	bl	8022a0c <_printf_common>
 8022c48:	3001      	adds	r0, #1
 8022c4a:	d14c      	bne.n	8022ce6 <_printf_i+0x1fe>
 8022c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8022c50:	b004      	add	sp, #16
 8022c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c56:	4835      	ldr	r0, [pc, #212]	; (8022d2c <_printf_i+0x244>)
 8022c58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8022c5c:	6829      	ldr	r1, [r5, #0]
 8022c5e:	6823      	ldr	r3, [r4, #0]
 8022c60:	f851 6b04 	ldr.w	r6, [r1], #4
 8022c64:	6029      	str	r1, [r5, #0]
 8022c66:	061d      	lsls	r5, r3, #24
 8022c68:	d514      	bpl.n	8022c94 <_printf_i+0x1ac>
 8022c6a:	07df      	lsls	r7, r3, #31
 8022c6c:	bf44      	itt	mi
 8022c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8022c72:	6023      	strmi	r3, [r4, #0]
 8022c74:	b91e      	cbnz	r6, 8022c7e <_printf_i+0x196>
 8022c76:	6823      	ldr	r3, [r4, #0]
 8022c78:	f023 0320 	bic.w	r3, r3, #32
 8022c7c:	6023      	str	r3, [r4, #0]
 8022c7e:	2310      	movs	r3, #16
 8022c80:	e7b0      	b.n	8022be4 <_printf_i+0xfc>
 8022c82:	6823      	ldr	r3, [r4, #0]
 8022c84:	f043 0320 	orr.w	r3, r3, #32
 8022c88:	6023      	str	r3, [r4, #0]
 8022c8a:	2378      	movs	r3, #120	; 0x78
 8022c8c:	4828      	ldr	r0, [pc, #160]	; (8022d30 <_printf_i+0x248>)
 8022c8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022c92:	e7e3      	b.n	8022c5c <_printf_i+0x174>
 8022c94:	0659      	lsls	r1, r3, #25
 8022c96:	bf48      	it	mi
 8022c98:	b2b6      	uxthmi	r6, r6
 8022c9a:	e7e6      	b.n	8022c6a <_printf_i+0x182>
 8022c9c:	4615      	mov	r5, r2
 8022c9e:	e7bb      	b.n	8022c18 <_printf_i+0x130>
 8022ca0:	682b      	ldr	r3, [r5, #0]
 8022ca2:	6826      	ldr	r6, [r4, #0]
 8022ca4:	6961      	ldr	r1, [r4, #20]
 8022ca6:	1d18      	adds	r0, r3, #4
 8022ca8:	6028      	str	r0, [r5, #0]
 8022caa:	0635      	lsls	r5, r6, #24
 8022cac:	681b      	ldr	r3, [r3, #0]
 8022cae:	d501      	bpl.n	8022cb4 <_printf_i+0x1cc>
 8022cb0:	6019      	str	r1, [r3, #0]
 8022cb2:	e002      	b.n	8022cba <_printf_i+0x1d2>
 8022cb4:	0670      	lsls	r0, r6, #25
 8022cb6:	d5fb      	bpl.n	8022cb0 <_printf_i+0x1c8>
 8022cb8:	8019      	strh	r1, [r3, #0]
 8022cba:	2300      	movs	r3, #0
 8022cbc:	6123      	str	r3, [r4, #16]
 8022cbe:	4615      	mov	r5, r2
 8022cc0:	e7ba      	b.n	8022c38 <_printf_i+0x150>
 8022cc2:	682b      	ldr	r3, [r5, #0]
 8022cc4:	1d1a      	adds	r2, r3, #4
 8022cc6:	602a      	str	r2, [r5, #0]
 8022cc8:	681d      	ldr	r5, [r3, #0]
 8022cca:	6862      	ldr	r2, [r4, #4]
 8022ccc:	2100      	movs	r1, #0
 8022cce:	4628      	mov	r0, r5
 8022cd0:	f7dd fb1e 	bl	8000310 <memchr>
 8022cd4:	b108      	cbz	r0, 8022cda <_printf_i+0x1f2>
 8022cd6:	1b40      	subs	r0, r0, r5
 8022cd8:	6060      	str	r0, [r4, #4]
 8022cda:	6863      	ldr	r3, [r4, #4]
 8022cdc:	6123      	str	r3, [r4, #16]
 8022cde:	2300      	movs	r3, #0
 8022ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022ce4:	e7a8      	b.n	8022c38 <_printf_i+0x150>
 8022ce6:	6923      	ldr	r3, [r4, #16]
 8022ce8:	462a      	mov	r2, r5
 8022cea:	4649      	mov	r1, r9
 8022cec:	4640      	mov	r0, r8
 8022cee:	47d0      	blx	sl
 8022cf0:	3001      	adds	r0, #1
 8022cf2:	d0ab      	beq.n	8022c4c <_printf_i+0x164>
 8022cf4:	6823      	ldr	r3, [r4, #0]
 8022cf6:	079b      	lsls	r3, r3, #30
 8022cf8:	d413      	bmi.n	8022d22 <_printf_i+0x23a>
 8022cfa:	68e0      	ldr	r0, [r4, #12]
 8022cfc:	9b03      	ldr	r3, [sp, #12]
 8022cfe:	4298      	cmp	r0, r3
 8022d00:	bfb8      	it	lt
 8022d02:	4618      	movlt	r0, r3
 8022d04:	e7a4      	b.n	8022c50 <_printf_i+0x168>
 8022d06:	2301      	movs	r3, #1
 8022d08:	4632      	mov	r2, r6
 8022d0a:	4649      	mov	r1, r9
 8022d0c:	4640      	mov	r0, r8
 8022d0e:	47d0      	blx	sl
 8022d10:	3001      	adds	r0, #1
 8022d12:	d09b      	beq.n	8022c4c <_printf_i+0x164>
 8022d14:	3501      	adds	r5, #1
 8022d16:	68e3      	ldr	r3, [r4, #12]
 8022d18:	9903      	ldr	r1, [sp, #12]
 8022d1a:	1a5b      	subs	r3, r3, r1
 8022d1c:	42ab      	cmp	r3, r5
 8022d1e:	dcf2      	bgt.n	8022d06 <_printf_i+0x21e>
 8022d20:	e7eb      	b.n	8022cfa <_printf_i+0x212>
 8022d22:	2500      	movs	r5, #0
 8022d24:	f104 0619 	add.w	r6, r4, #25
 8022d28:	e7f5      	b.n	8022d16 <_printf_i+0x22e>
 8022d2a:	bf00      	nop
 8022d2c:	08063846 	.word	0x08063846
 8022d30:	08063857 	.word	0x08063857

08022d34 <_sbrk_r>:
 8022d34:	b538      	push	{r3, r4, r5, lr}
 8022d36:	4d06      	ldr	r5, [pc, #24]	; (8022d50 <_sbrk_r+0x1c>)
 8022d38:	2300      	movs	r3, #0
 8022d3a:	4604      	mov	r4, r0
 8022d3c:	4608      	mov	r0, r1
 8022d3e:	602b      	str	r3, [r5, #0]
 8022d40:	f002 fcc4 	bl	80256cc <_sbrk>
 8022d44:	1c43      	adds	r3, r0, #1
 8022d46:	d102      	bne.n	8022d4e <_sbrk_r+0x1a>
 8022d48:	682b      	ldr	r3, [r5, #0]
 8022d4a:	b103      	cbz	r3, 8022d4e <_sbrk_r+0x1a>
 8022d4c:	6023      	str	r3, [r4, #0]
 8022d4e:	bd38      	pop	{r3, r4, r5, pc}
 8022d50:	200073ac 	.word	0x200073ac

08022d54 <sniprintf>:
 8022d54:	b40c      	push	{r2, r3}
 8022d56:	b530      	push	{r4, r5, lr}
 8022d58:	4b17      	ldr	r3, [pc, #92]	; (8022db8 <sniprintf+0x64>)
 8022d5a:	1e0c      	subs	r4, r1, #0
 8022d5c:	681d      	ldr	r5, [r3, #0]
 8022d5e:	b09d      	sub	sp, #116	; 0x74
 8022d60:	da08      	bge.n	8022d74 <sniprintf+0x20>
 8022d62:	238b      	movs	r3, #139	; 0x8b
 8022d64:	602b      	str	r3, [r5, #0]
 8022d66:	f04f 30ff 	mov.w	r0, #4294967295
 8022d6a:	b01d      	add	sp, #116	; 0x74
 8022d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022d70:	b002      	add	sp, #8
 8022d72:	4770      	bx	lr
 8022d74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022d78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022d7c:	bf14      	ite	ne
 8022d7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022d82:	4623      	moveq	r3, r4
 8022d84:	9304      	str	r3, [sp, #16]
 8022d86:	9307      	str	r3, [sp, #28]
 8022d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022d8c:	9002      	str	r0, [sp, #8]
 8022d8e:	9006      	str	r0, [sp, #24]
 8022d90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022d94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022d96:	ab21      	add	r3, sp, #132	; 0x84
 8022d98:	a902      	add	r1, sp, #8
 8022d9a:	4628      	mov	r0, r5
 8022d9c:	9301      	str	r3, [sp, #4]
 8022d9e:	f001 fa6d 	bl	802427c <_svfiprintf_r>
 8022da2:	1c43      	adds	r3, r0, #1
 8022da4:	bfbc      	itt	lt
 8022da6:	238b      	movlt	r3, #139	; 0x8b
 8022da8:	602b      	strlt	r3, [r5, #0]
 8022daa:	2c00      	cmp	r4, #0
 8022dac:	d0dd      	beq.n	8022d6a <sniprintf+0x16>
 8022dae:	9b02      	ldr	r3, [sp, #8]
 8022db0:	2200      	movs	r2, #0
 8022db2:	701a      	strb	r2, [r3, #0]
 8022db4:	e7d9      	b.n	8022d6a <sniprintf+0x16>
 8022db6:	bf00      	nop
 8022db8:	20004824 	.word	0x20004824

08022dbc <siprintf>:
 8022dbc:	b40e      	push	{r1, r2, r3}
 8022dbe:	b500      	push	{lr}
 8022dc0:	b09c      	sub	sp, #112	; 0x70
 8022dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8022dc4:	9002      	str	r0, [sp, #8]
 8022dc6:	9006      	str	r0, [sp, #24]
 8022dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022dcc:	4809      	ldr	r0, [pc, #36]	; (8022df4 <siprintf+0x38>)
 8022dce:	9107      	str	r1, [sp, #28]
 8022dd0:	9104      	str	r1, [sp, #16]
 8022dd2:	4909      	ldr	r1, [pc, #36]	; (8022df8 <siprintf+0x3c>)
 8022dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8022dd8:	9105      	str	r1, [sp, #20]
 8022dda:	6800      	ldr	r0, [r0, #0]
 8022ddc:	9301      	str	r3, [sp, #4]
 8022dde:	a902      	add	r1, sp, #8
 8022de0:	f001 fa4c 	bl	802427c <_svfiprintf_r>
 8022de4:	9b02      	ldr	r3, [sp, #8]
 8022de6:	2200      	movs	r2, #0
 8022de8:	701a      	strb	r2, [r3, #0]
 8022dea:	b01c      	add	sp, #112	; 0x70
 8022dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8022df0:	b003      	add	sp, #12
 8022df2:	4770      	bx	lr
 8022df4:	20004824 	.word	0x20004824
 8022df8:	ffff0208 	.word	0xffff0208

08022dfc <stpcpy>:
 8022dfc:	4603      	mov	r3, r0
 8022dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022e02:	4618      	mov	r0, r3
 8022e04:	f803 2b01 	strb.w	r2, [r3], #1
 8022e08:	2a00      	cmp	r2, #0
 8022e0a:	d1f8      	bne.n	8022dfe <stpcpy+0x2>
 8022e0c:	4770      	bx	lr

08022e0e <strcpy>:
 8022e0e:	4603      	mov	r3, r0
 8022e10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022e14:	f803 2b01 	strb.w	r2, [r3], #1
 8022e18:	2a00      	cmp	r2, #0
 8022e1a:	d1f9      	bne.n	8022e10 <strcpy+0x2>
 8022e1c:	4770      	bx	lr

08022e1e <quorem>:
 8022e1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e22:	6903      	ldr	r3, [r0, #16]
 8022e24:	690c      	ldr	r4, [r1, #16]
 8022e26:	42a3      	cmp	r3, r4
 8022e28:	4607      	mov	r7, r0
 8022e2a:	f2c0 8081 	blt.w	8022f30 <quorem+0x112>
 8022e2e:	3c01      	subs	r4, #1
 8022e30:	f101 0814 	add.w	r8, r1, #20
 8022e34:	f100 0514 	add.w	r5, r0, #20
 8022e38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022e3c:	9301      	str	r3, [sp, #4]
 8022e3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8022e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022e46:	3301      	adds	r3, #1
 8022e48:	429a      	cmp	r2, r3
 8022e4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8022e4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8022e52:	fbb2 f6f3 	udiv	r6, r2, r3
 8022e56:	d331      	bcc.n	8022ebc <quorem+0x9e>
 8022e58:	f04f 0e00 	mov.w	lr, #0
 8022e5c:	4640      	mov	r0, r8
 8022e5e:	46ac      	mov	ip, r5
 8022e60:	46f2      	mov	sl, lr
 8022e62:	f850 2b04 	ldr.w	r2, [r0], #4
 8022e66:	b293      	uxth	r3, r2
 8022e68:	fb06 e303 	mla	r3, r6, r3, lr
 8022e6c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8022e70:	b29b      	uxth	r3, r3
 8022e72:	ebaa 0303 	sub.w	r3, sl, r3
 8022e76:	f8dc a000 	ldr.w	sl, [ip]
 8022e7a:	0c12      	lsrs	r2, r2, #16
 8022e7c:	fa13 f38a 	uxtah	r3, r3, sl
 8022e80:	fb06 e202 	mla	r2, r6, r2, lr
 8022e84:	9300      	str	r3, [sp, #0]
 8022e86:	9b00      	ldr	r3, [sp, #0]
 8022e88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8022e8c:	b292      	uxth	r2, r2
 8022e8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8022e92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022e96:	f8bd 3000 	ldrh.w	r3, [sp]
 8022e9a:	4581      	cmp	r9, r0
 8022e9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022ea0:	f84c 3b04 	str.w	r3, [ip], #4
 8022ea4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8022ea8:	d2db      	bcs.n	8022e62 <quorem+0x44>
 8022eaa:	f855 300b 	ldr.w	r3, [r5, fp]
 8022eae:	b92b      	cbnz	r3, 8022ebc <quorem+0x9e>
 8022eb0:	9b01      	ldr	r3, [sp, #4]
 8022eb2:	3b04      	subs	r3, #4
 8022eb4:	429d      	cmp	r5, r3
 8022eb6:	461a      	mov	r2, r3
 8022eb8:	d32e      	bcc.n	8022f18 <quorem+0xfa>
 8022eba:	613c      	str	r4, [r7, #16]
 8022ebc:	4638      	mov	r0, r7
 8022ebe:	f001 f83b 	bl	8023f38 <__mcmp>
 8022ec2:	2800      	cmp	r0, #0
 8022ec4:	db24      	blt.n	8022f10 <quorem+0xf2>
 8022ec6:	3601      	adds	r6, #1
 8022ec8:	4628      	mov	r0, r5
 8022eca:	f04f 0c00 	mov.w	ip, #0
 8022ece:	f858 2b04 	ldr.w	r2, [r8], #4
 8022ed2:	f8d0 e000 	ldr.w	lr, [r0]
 8022ed6:	b293      	uxth	r3, r2
 8022ed8:	ebac 0303 	sub.w	r3, ip, r3
 8022edc:	0c12      	lsrs	r2, r2, #16
 8022ede:	fa13 f38e 	uxtah	r3, r3, lr
 8022ee2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8022ee6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022eea:	b29b      	uxth	r3, r3
 8022eec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022ef0:	45c1      	cmp	r9, r8
 8022ef2:	f840 3b04 	str.w	r3, [r0], #4
 8022ef6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022efa:	d2e8      	bcs.n	8022ece <quorem+0xb0>
 8022efc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022f00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022f04:	b922      	cbnz	r2, 8022f10 <quorem+0xf2>
 8022f06:	3b04      	subs	r3, #4
 8022f08:	429d      	cmp	r5, r3
 8022f0a:	461a      	mov	r2, r3
 8022f0c:	d30a      	bcc.n	8022f24 <quorem+0x106>
 8022f0e:	613c      	str	r4, [r7, #16]
 8022f10:	4630      	mov	r0, r6
 8022f12:	b003      	add	sp, #12
 8022f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f18:	6812      	ldr	r2, [r2, #0]
 8022f1a:	3b04      	subs	r3, #4
 8022f1c:	2a00      	cmp	r2, #0
 8022f1e:	d1cc      	bne.n	8022eba <quorem+0x9c>
 8022f20:	3c01      	subs	r4, #1
 8022f22:	e7c7      	b.n	8022eb4 <quorem+0x96>
 8022f24:	6812      	ldr	r2, [r2, #0]
 8022f26:	3b04      	subs	r3, #4
 8022f28:	2a00      	cmp	r2, #0
 8022f2a:	d1f0      	bne.n	8022f0e <quorem+0xf0>
 8022f2c:	3c01      	subs	r4, #1
 8022f2e:	e7eb      	b.n	8022f08 <quorem+0xea>
 8022f30:	2000      	movs	r0, #0
 8022f32:	e7ee      	b.n	8022f12 <quorem+0xf4>
 8022f34:	0000      	movs	r0, r0
	...

08022f38 <_dtoa_r>:
 8022f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f3c:	ed2d 8b02 	vpush	{d8}
 8022f40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022f42:	b091      	sub	sp, #68	; 0x44
 8022f44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8022f48:	ec59 8b10 	vmov	r8, r9, d0
 8022f4c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8022f4e:	9106      	str	r1, [sp, #24]
 8022f50:	4606      	mov	r6, r0
 8022f52:	9208      	str	r2, [sp, #32]
 8022f54:	930c      	str	r3, [sp, #48]	; 0x30
 8022f56:	b975      	cbnz	r5, 8022f76 <_dtoa_r+0x3e>
 8022f58:	2010      	movs	r0, #16
 8022f5a:	f7ff f987 	bl	802226c <malloc>
 8022f5e:	4602      	mov	r2, r0
 8022f60:	6270      	str	r0, [r6, #36]	; 0x24
 8022f62:	b920      	cbnz	r0, 8022f6e <_dtoa_r+0x36>
 8022f64:	4baa      	ldr	r3, [pc, #680]	; (8023210 <_dtoa_r+0x2d8>)
 8022f66:	21ea      	movs	r1, #234	; 0xea
 8022f68:	48aa      	ldr	r0, [pc, #680]	; (8023214 <_dtoa_r+0x2dc>)
 8022f6a:	f001 fa87 	bl	802447c <__assert_func>
 8022f6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8022f72:	6005      	str	r5, [r0, #0]
 8022f74:	60c5      	str	r5, [r0, #12]
 8022f76:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8022f78:	6819      	ldr	r1, [r3, #0]
 8022f7a:	b151      	cbz	r1, 8022f92 <_dtoa_r+0x5a>
 8022f7c:	685a      	ldr	r2, [r3, #4]
 8022f7e:	604a      	str	r2, [r1, #4]
 8022f80:	2301      	movs	r3, #1
 8022f82:	4093      	lsls	r3, r2
 8022f84:	608b      	str	r3, [r1, #8]
 8022f86:	4630      	mov	r0, r6
 8022f88:	f000 fd94 	bl	8023ab4 <_Bfree>
 8022f8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8022f8e:	2200      	movs	r2, #0
 8022f90:	601a      	str	r2, [r3, #0]
 8022f92:	f1b9 0300 	subs.w	r3, r9, #0
 8022f96:	bfbb      	ittet	lt
 8022f98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8022f9c:	9303      	strlt	r3, [sp, #12]
 8022f9e:	2300      	movge	r3, #0
 8022fa0:	2201      	movlt	r2, #1
 8022fa2:	bfac      	ite	ge
 8022fa4:	6023      	strge	r3, [r4, #0]
 8022fa6:	6022      	strlt	r2, [r4, #0]
 8022fa8:	4b9b      	ldr	r3, [pc, #620]	; (8023218 <_dtoa_r+0x2e0>)
 8022faa:	9c03      	ldr	r4, [sp, #12]
 8022fac:	43a3      	bics	r3, r4
 8022fae:	d11c      	bne.n	8022fea <_dtoa_r+0xb2>
 8022fb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022fb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8022fb6:	6013      	str	r3, [r2, #0]
 8022fb8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8022fbc:	ea53 0308 	orrs.w	r3, r3, r8
 8022fc0:	f000 84fd 	beq.w	80239be <_dtoa_r+0xa86>
 8022fc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022fc6:	b963      	cbnz	r3, 8022fe2 <_dtoa_r+0xaa>
 8022fc8:	4b94      	ldr	r3, [pc, #592]	; (802321c <_dtoa_r+0x2e4>)
 8022fca:	e01f      	b.n	802300c <_dtoa_r+0xd4>
 8022fcc:	4b94      	ldr	r3, [pc, #592]	; (8023220 <_dtoa_r+0x2e8>)
 8022fce:	9301      	str	r3, [sp, #4]
 8022fd0:	3308      	adds	r3, #8
 8022fd2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8022fd4:	6013      	str	r3, [r2, #0]
 8022fd6:	9801      	ldr	r0, [sp, #4]
 8022fd8:	b011      	add	sp, #68	; 0x44
 8022fda:	ecbd 8b02 	vpop	{d8}
 8022fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fe2:	4b8e      	ldr	r3, [pc, #568]	; (802321c <_dtoa_r+0x2e4>)
 8022fe4:	9301      	str	r3, [sp, #4]
 8022fe6:	3303      	adds	r3, #3
 8022fe8:	e7f3      	b.n	8022fd2 <_dtoa_r+0x9a>
 8022fea:	ed9d 8b02 	vldr	d8, [sp, #8]
 8022fee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ff6:	d10b      	bne.n	8023010 <_dtoa_r+0xd8>
 8022ff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022ffa:	2301      	movs	r3, #1
 8022ffc:	6013      	str	r3, [r2, #0]
 8022ffe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023000:	2b00      	cmp	r3, #0
 8023002:	f000 84d9 	beq.w	80239b8 <_dtoa_r+0xa80>
 8023006:	4887      	ldr	r0, [pc, #540]	; (8023224 <_dtoa_r+0x2ec>)
 8023008:	6018      	str	r0, [r3, #0]
 802300a:	1e43      	subs	r3, r0, #1
 802300c:	9301      	str	r3, [sp, #4]
 802300e:	e7e2      	b.n	8022fd6 <_dtoa_r+0x9e>
 8023010:	a90f      	add	r1, sp, #60	; 0x3c
 8023012:	aa0e      	add	r2, sp, #56	; 0x38
 8023014:	4630      	mov	r0, r6
 8023016:	eeb0 0b48 	vmov.f64	d0, d8
 802301a:	f001 f833 	bl	8024084 <__d2b>
 802301e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8023022:	4605      	mov	r5, r0
 8023024:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023026:	2900      	cmp	r1, #0
 8023028:	d046      	beq.n	80230b8 <_dtoa_r+0x180>
 802302a:	ee18 4a90 	vmov	r4, s17
 802302e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8023032:	ec53 2b18 	vmov	r2, r3, d8
 8023036:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802303a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802303e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8023042:	2400      	movs	r4, #0
 8023044:	ec43 2b16 	vmov	d6, r2, r3
 8023048:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802304c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80231f8 <_dtoa_r+0x2c0>
 8023050:	ee36 7b47 	vsub.f64	d7, d6, d7
 8023054:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8023200 <_dtoa_r+0x2c8>
 8023058:	eea7 6b05 	vfma.f64	d6, d7, d5
 802305c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8023208 <_dtoa_r+0x2d0>
 8023060:	ee07 1a90 	vmov	s15, r1
 8023064:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8023068:	eeb0 7b46 	vmov.f64	d7, d6
 802306c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8023070:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8023074:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8023078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802307c:	ee16 ba90 	vmov	fp, s13
 8023080:	940a      	str	r4, [sp, #40]	; 0x28
 8023082:	d508      	bpl.n	8023096 <_dtoa_r+0x15e>
 8023084:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8023088:	eeb4 6b47 	vcmp.f64	d6, d7
 802308c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023090:	bf18      	it	ne
 8023092:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8023096:	f1bb 0f16 	cmp.w	fp, #22
 802309a:	d82f      	bhi.n	80230fc <_dtoa_r+0x1c4>
 802309c:	4b62      	ldr	r3, [pc, #392]	; (8023228 <_dtoa_r+0x2f0>)
 802309e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80230a2:	ed93 7b00 	vldr	d7, [r3]
 80230a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80230aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230ae:	d501      	bpl.n	80230b4 <_dtoa_r+0x17c>
 80230b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80230b4:	2300      	movs	r3, #0
 80230b6:	e022      	b.n	80230fe <_dtoa_r+0x1c6>
 80230b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80230ba:	4401      	add	r1, r0
 80230bc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80230c0:	2b20      	cmp	r3, #32
 80230c2:	bfc1      	itttt	gt
 80230c4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80230c8:	fa04 f303 	lslgt.w	r3, r4, r3
 80230cc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80230d0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80230d4:	bfd6      	itet	le
 80230d6:	f1c3 0320 	rsble	r3, r3, #32
 80230da:	ea43 0808 	orrgt.w	r8, r3, r8
 80230de:	fa08 f803 	lslle.w	r8, r8, r3
 80230e2:	ee07 8a90 	vmov	s15, r8
 80230e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80230ea:	3901      	subs	r1, #1
 80230ec:	ee17 4a90 	vmov	r4, s15
 80230f0:	ec53 2b17 	vmov	r2, r3, d7
 80230f4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80230f8:	2401      	movs	r4, #1
 80230fa:	e7a3      	b.n	8023044 <_dtoa_r+0x10c>
 80230fc:	2301      	movs	r3, #1
 80230fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8023100:	1a43      	subs	r3, r0, r1
 8023102:	1e5a      	subs	r2, r3, #1
 8023104:	bf45      	ittet	mi
 8023106:	f1c3 0301 	rsbmi	r3, r3, #1
 802310a:	9304      	strmi	r3, [sp, #16]
 802310c:	2300      	movpl	r3, #0
 802310e:	2300      	movmi	r3, #0
 8023110:	9205      	str	r2, [sp, #20]
 8023112:	bf54      	ite	pl
 8023114:	9304      	strpl	r3, [sp, #16]
 8023116:	9305      	strmi	r3, [sp, #20]
 8023118:	f1bb 0f00 	cmp.w	fp, #0
 802311c:	db18      	blt.n	8023150 <_dtoa_r+0x218>
 802311e:	9b05      	ldr	r3, [sp, #20]
 8023120:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8023124:	445b      	add	r3, fp
 8023126:	9305      	str	r3, [sp, #20]
 8023128:	2300      	movs	r3, #0
 802312a:	9a06      	ldr	r2, [sp, #24]
 802312c:	2a09      	cmp	r2, #9
 802312e:	d849      	bhi.n	80231c4 <_dtoa_r+0x28c>
 8023130:	2a05      	cmp	r2, #5
 8023132:	bfc4      	itt	gt
 8023134:	3a04      	subgt	r2, #4
 8023136:	9206      	strgt	r2, [sp, #24]
 8023138:	9a06      	ldr	r2, [sp, #24]
 802313a:	f1a2 0202 	sub.w	r2, r2, #2
 802313e:	bfcc      	ite	gt
 8023140:	2400      	movgt	r4, #0
 8023142:	2401      	movle	r4, #1
 8023144:	2a03      	cmp	r2, #3
 8023146:	d848      	bhi.n	80231da <_dtoa_r+0x2a2>
 8023148:	e8df f002 	tbb	[pc, r2]
 802314c:	3a2c2e0b 	.word	0x3a2c2e0b
 8023150:	9b04      	ldr	r3, [sp, #16]
 8023152:	2200      	movs	r2, #0
 8023154:	eba3 030b 	sub.w	r3, r3, fp
 8023158:	9304      	str	r3, [sp, #16]
 802315a:	9209      	str	r2, [sp, #36]	; 0x24
 802315c:	f1cb 0300 	rsb	r3, fp, #0
 8023160:	e7e3      	b.n	802312a <_dtoa_r+0x1f2>
 8023162:	2200      	movs	r2, #0
 8023164:	9207      	str	r2, [sp, #28]
 8023166:	9a08      	ldr	r2, [sp, #32]
 8023168:	2a00      	cmp	r2, #0
 802316a:	dc39      	bgt.n	80231e0 <_dtoa_r+0x2a8>
 802316c:	f04f 0a01 	mov.w	sl, #1
 8023170:	46d1      	mov	r9, sl
 8023172:	4652      	mov	r2, sl
 8023174:	f8cd a020 	str.w	sl, [sp, #32]
 8023178:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802317a:	2100      	movs	r1, #0
 802317c:	6079      	str	r1, [r7, #4]
 802317e:	2004      	movs	r0, #4
 8023180:	f100 0c14 	add.w	ip, r0, #20
 8023184:	4594      	cmp	ip, r2
 8023186:	6879      	ldr	r1, [r7, #4]
 8023188:	d92f      	bls.n	80231ea <_dtoa_r+0x2b2>
 802318a:	4630      	mov	r0, r6
 802318c:	930d      	str	r3, [sp, #52]	; 0x34
 802318e:	f000 fc51 	bl	8023a34 <_Balloc>
 8023192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023194:	9001      	str	r0, [sp, #4]
 8023196:	4602      	mov	r2, r0
 8023198:	2800      	cmp	r0, #0
 802319a:	d149      	bne.n	8023230 <_dtoa_r+0x2f8>
 802319c:	4b23      	ldr	r3, [pc, #140]	; (802322c <_dtoa_r+0x2f4>)
 802319e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80231a2:	e6e1      	b.n	8022f68 <_dtoa_r+0x30>
 80231a4:	2201      	movs	r2, #1
 80231a6:	e7dd      	b.n	8023164 <_dtoa_r+0x22c>
 80231a8:	2200      	movs	r2, #0
 80231aa:	9207      	str	r2, [sp, #28]
 80231ac:	9a08      	ldr	r2, [sp, #32]
 80231ae:	eb0b 0a02 	add.w	sl, fp, r2
 80231b2:	f10a 0901 	add.w	r9, sl, #1
 80231b6:	464a      	mov	r2, r9
 80231b8:	2a01      	cmp	r2, #1
 80231ba:	bfb8      	it	lt
 80231bc:	2201      	movlt	r2, #1
 80231be:	e7db      	b.n	8023178 <_dtoa_r+0x240>
 80231c0:	2201      	movs	r2, #1
 80231c2:	e7f2      	b.n	80231aa <_dtoa_r+0x272>
 80231c4:	2401      	movs	r4, #1
 80231c6:	2200      	movs	r2, #0
 80231c8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80231cc:	f04f 3aff 	mov.w	sl, #4294967295
 80231d0:	2100      	movs	r1, #0
 80231d2:	46d1      	mov	r9, sl
 80231d4:	2212      	movs	r2, #18
 80231d6:	9108      	str	r1, [sp, #32]
 80231d8:	e7ce      	b.n	8023178 <_dtoa_r+0x240>
 80231da:	2201      	movs	r2, #1
 80231dc:	9207      	str	r2, [sp, #28]
 80231de:	e7f5      	b.n	80231cc <_dtoa_r+0x294>
 80231e0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80231e4:	46d1      	mov	r9, sl
 80231e6:	4652      	mov	r2, sl
 80231e8:	e7c6      	b.n	8023178 <_dtoa_r+0x240>
 80231ea:	3101      	adds	r1, #1
 80231ec:	6079      	str	r1, [r7, #4]
 80231ee:	0040      	lsls	r0, r0, #1
 80231f0:	e7c6      	b.n	8023180 <_dtoa_r+0x248>
 80231f2:	bf00      	nop
 80231f4:	f3af 8000 	nop.w
 80231f8:	636f4361 	.word	0x636f4361
 80231fc:	3fd287a7 	.word	0x3fd287a7
 8023200:	8b60c8b3 	.word	0x8b60c8b3
 8023204:	3fc68a28 	.word	0x3fc68a28
 8023208:	509f79fb 	.word	0x509f79fb
 802320c:	3fd34413 	.word	0x3fd34413
 8023210:	08063875 	.word	0x08063875
 8023214:	0806388c 	.word	0x0806388c
 8023218:	7ff00000 	.word	0x7ff00000
 802321c:	08063871 	.word	0x08063871
 8023220:	08063868 	.word	0x08063868
 8023224:	08063845 	.word	0x08063845
 8023228:	08063980 	.word	0x08063980
 802322c:	080638e7 	.word	0x080638e7
 8023230:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8023232:	9901      	ldr	r1, [sp, #4]
 8023234:	6011      	str	r1, [r2, #0]
 8023236:	f1b9 0f0e 	cmp.w	r9, #14
 802323a:	d86c      	bhi.n	8023316 <_dtoa_r+0x3de>
 802323c:	2c00      	cmp	r4, #0
 802323e:	d06a      	beq.n	8023316 <_dtoa_r+0x3de>
 8023240:	f1bb 0f00 	cmp.w	fp, #0
 8023244:	f340 80a0 	ble.w	8023388 <_dtoa_r+0x450>
 8023248:	49c1      	ldr	r1, [pc, #772]	; (8023550 <_dtoa_r+0x618>)
 802324a:	f00b 020f 	and.w	r2, fp, #15
 802324e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8023252:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8023256:	ed92 7b00 	vldr	d7, [r2]
 802325a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802325e:	f000 8087 	beq.w	8023370 <_dtoa_r+0x438>
 8023262:	4abc      	ldr	r2, [pc, #752]	; (8023554 <_dtoa_r+0x61c>)
 8023264:	ed92 6b08 	vldr	d6, [r2, #32]
 8023268:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802326c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8023270:	f001 010f 	and.w	r1, r1, #15
 8023274:	2203      	movs	r2, #3
 8023276:	48b7      	ldr	r0, [pc, #732]	; (8023554 <_dtoa_r+0x61c>)
 8023278:	2900      	cmp	r1, #0
 802327a:	d17b      	bne.n	8023374 <_dtoa_r+0x43c>
 802327c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023280:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8023284:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802328a:	2900      	cmp	r1, #0
 802328c:	f000 80a2 	beq.w	80233d4 <_dtoa_r+0x49c>
 8023290:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8023294:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023298:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232a0:	f140 8098 	bpl.w	80233d4 <_dtoa_r+0x49c>
 80232a4:	f1b9 0f00 	cmp.w	r9, #0
 80232a8:	f000 8094 	beq.w	80233d4 <_dtoa_r+0x49c>
 80232ac:	f1ba 0f00 	cmp.w	sl, #0
 80232b0:	dd2f      	ble.n	8023312 <_dtoa_r+0x3da>
 80232b2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80232b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80232ba:	ed8d 7b02 	vstr	d7, [sp, #8]
 80232be:	f10b 37ff 	add.w	r7, fp, #4294967295
 80232c2:	3201      	adds	r2, #1
 80232c4:	4650      	mov	r0, sl
 80232c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80232ca:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80232ce:	ee07 2a90 	vmov	s15, r2
 80232d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80232d6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80232da:	ee15 4a90 	vmov	r4, s11
 80232de:	ec52 1b15 	vmov	r1, r2, d5
 80232e2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80232e6:	2800      	cmp	r0, #0
 80232e8:	d177      	bne.n	80233da <_dtoa_r+0x4a2>
 80232ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80232ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80232f2:	ec42 1b17 	vmov	d7, r1, r2
 80232f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80232fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232fe:	f300 8263 	bgt.w	80237c8 <_dtoa_r+0x890>
 8023302:	eeb1 7b47 	vneg.f64	d7, d7
 8023306:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802330e:	f100 8258 	bmi.w	80237c2 <_dtoa_r+0x88a>
 8023312:	ed8d 8b02 	vstr	d8, [sp, #8]
 8023316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023318:	2a00      	cmp	r2, #0
 802331a:	f2c0 811d 	blt.w	8023558 <_dtoa_r+0x620>
 802331e:	f1bb 0f0e 	cmp.w	fp, #14
 8023322:	f300 8119 	bgt.w	8023558 <_dtoa_r+0x620>
 8023326:	4b8a      	ldr	r3, [pc, #552]	; (8023550 <_dtoa_r+0x618>)
 8023328:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802332c:	ed93 6b00 	vldr	d6, [r3]
 8023330:	9b08      	ldr	r3, [sp, #32]
 8023332:	2b00      	cmp	r3, #0
 8023334:	f280 80b7 	bge.w	80234a6 <_dtoa_r+0x56e>
 8023338:	f1b9 0f00 	cmp.w	r9, #0
 802333c:	f300 80b3 	bgt.w	80234a6 <_dtoa_r+0x56e>
 8023340:	f040 823f 	bne.w	80237c2 <_dtoa_r+0x88a>
 8023344:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8023348:	ee26 6b07 	vmul.f64	d6, d6, d7
 802334c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023350:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023358:	464c      	mov	r4, r9
 802335a:	464f      	mov	r7, r9
 802335c:	f280 8215 	bge.w	802378a <_dtoa_r+0x852>
 8023360:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8023364:	2331      	movs	r3, #49	; 0x31
 8023366:	f808 3b01 	strb.w	r3, [r8], #1
 802336a:	f10b 0b01 	add.w	fp, fp, #1
 802336e:	e211      	b.n	8023794 <_dtoa_r+0x85c>
 8023370:	2202      	movs	r2, #2
 8023372:	e780      	b.n	8023276 <_dtoa_r+0x33e>
 8023374:	07cc      	lsls	r4, r1, #31
 8023376:	d504      	bpl.n	8023382 <_dtoa_r+0x44a>
 8023378:	ed90 6b00 	vldr	d6, [r0]
 802337c:	3201      	adds	r2, #1
 802337e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023382:	1049      	asrs	r1, r1, #1
 8023384:	3008      	adds	r0, #8
 8023386:	e777      	b.n	8023278 <_dtoa_r+0x340>
 8023388:	d022      	beq.n	80233d0 <_dtoa_r+0x498>
 802338a:	f1cb 0100 	rsb	r1, fp, #0
 802338e:	4a70      	ldr	r2, [pc, #448]	; (8023550 <_dtoa_r+0x618>)
 8023390:	f001 000f 	and.w	r0, r1, #15
 8023394:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8023398:	ed92 7b00 	vldr	d7, [r2]
 802339c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80233a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80233a4:	486b      	ldr	r0, [pc, #428]	; (8023554 <_dtoa_r+0x61c>)
 80233a6:	1109      	asrs	r1, r1, #4
 80233a8:	2400      	movs	r4, #0
 80233aa:	2202      	movs	r2, #2
 80233ac:	b929      	cbnz	r1, 80233ba <_dtoa_r+0x482>
 80233ae:	2c00      	cmp	r4, #0
 80233b0:	f43f af6a 	beq.w	8023288 <_dtoa_r+0x350>
 80233b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80233b8:	e766      	b.n	8023288 <_dtoa_r+0x350>
 80233ba:	07cf      	lsls	r7, r1, #31
 80233bc:	d505      	bpl.n	80233ca <_dtoa_r+0x492>
 80233be:	ed90 6b00 	vldr	d6, [r0]
 80233c2:	3201      	adds	r2, #1
 80233c4:	2401      	movs	r4, #1
 80233c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80233ca:	1049      	asrs	r1, r1, #1
 80233cc:	3008      	adds	r0, #8
 80233ce:	e7ed      	b.n	80233ac <_dtoa_r+0x474>
 80233d0:	2202      	movs	r2, #2
 80233d2:	e759      	b.n	8023288 <_dtoa_r+0x350>
 80233d4:	465f      	mov	r7, fp
 80233d6:	4648      	mov	r0, r9
 80233d8:	e775      	b.n	80232c6 <_dtoa_r+0x38e>
 80233da:	ec42 1b17 	vmov	d7, r1, r2
 80233de:	4a5c      	ldr	r2, [pc, #368]	; (8023550 <_dtoa_r+0x618>)
 80233e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80233e4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80233e8:	9a01      	ldr	r2, [sp, #4]
 80233ea:	1814      	adds	r4, r2, r0
 80233ec:	9a07      	ldr	r2, [sp, #28]
 80233ee:	b352      	cbz	r2, 8023446 <_dtoa_r+0x50e>
 80233f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80233f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80233f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80233fc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8023400:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8023404:	ee35 7b47 	vsub.f64	d7, d5, d7
 8023408:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802340c:	ee14 2a90 	vmov	r2, s9
 8023410:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023414:	3230      	adds	r2, #48	; 0x30
 8023416:	ee36 6b45 	vsub.f64	d6, d6, d5
 802341a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023422:	f808 2b01 	strb.w	r2, [r8], #1
 8023426:	d439      	bmi.n	802349c <_dtoa_r+0x564>
 8023428:	ee32 5b46 	vsub.f64	d5, d2, d6
 802342c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8023430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023434:	d472      	bmi.n	802351c <_dtoa_r+0x5e4>
 8023436:	45a0      	cmp	r8, r4
 8023438:	f43f af6b 	beq.w	8023312 <_dtoa_r+0x3da>
 802343c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8023440:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023444:	e7e0      	b.n	8023408 <_dtoa_r+0x4d0>
 8023446:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802344a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802344e:	4621      	mov	r1, r4
 8023450:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8023454:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8023458:	ee14 2a90 	vmov	r2, s9
 802345c:	3230      	adds	r2, #48	; 0x30
 802345e:	f808 2b01 	strb.w	r2, [r8], #1
 8023462:	45a0      	cmp	r8, r4
 8023464:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023468:	ee36 6b45 	vsub.f64	d6, d6, d5
 802346c:	d118      	bne.n	80234a0 <_dtoa_r+0x568>
 802346e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8023472:	ee37 4b05 	vadd.f64	d4, d7, d5
 8023476:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802347e:	dc4d      	bgt.n	802351c <_dtoa_r+0x5e4>
 8023480:	ee35 7b47 	vsub.f64	d7, d5, d7
 8023484:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802348c:	f57f af41 	bpl.w	8023312 <_dtoa_r+0x3da>
 8023490:	4688      	mov	r8, r1
 8023492:	3901      	subs	r1, #1
 8023494:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8023498:	2b30      	cmp	r3, #48	; 0x30
 802349a:	d0f9      	beq.n	8023490 <_dtoa_r+0x558>
 802349c:	46bb      	mov	fp, r7
 802349e:	e02a      	b.n	80234f6 <_dtoa_r+0x5be>
 80234a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80234a4:	e7d6      	b.n	8023454 <_dtoa_r+0x51c>
 80234a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80234aa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80234ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80234b2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80234b6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80234ba:	ee15 3a10 	vmov	r3, s10
 80234be:	3330      	adds	r3, #48	; 0x30
 80234c0:	f808 3b01 	strb.w	r3, [r8], #1
 80234c4:	9b01      	ldr	r3, [sp, #4]
 80234c6:	eba8 0303 	sub.w	r3, r8, r3
 80234ca:	4599      	cmp	r9, r3
 80234cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80234d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80234d4:	d133      	bne.n	802353e <_dtoa_r+0x606>
 80234d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80234da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80234de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234e2:	dc1a      	bgt.n	802351a <_dtoa_r+0x5e2>
 80234e4:	eeb4 7b46 	vcmp.f64	d7, d6
 80234e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234ec:	d103      	bne.n	80234f6 <_dtoa_r+0x5be>
 80234ee:	ee15 3a10 	vmov	r3, s10
 80234f2:	07d9      	lsls	r1, r3, #31
 80234f4:	d411      	bmi.n	802351a <_dtoa_r+0x5e2>
 80234f6:	4629      	mov	r1, r5
 80234f8:	4630      	mov	r0, r6
 80234fa:	f000 fadb 	bl	8023ab4 <_Bfree>
 80234fe:	2300      	movs	r3, #0
 8023500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023502:	f888 3000 	strb.w	r3, [r8]
 8023506:	f10b 0301 	add.w	r3, fp, #1
 802350a:	6013      	str	r3, [r2, #0]
 802350c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802350e:	2b00      	cmp	r3, #0
 8023510:	f43f ad61 	beq.w	8022fd6 <_dtoa_r+0x9e>
 8023514:	f8c3 8000 	str.w	r8, [r3]
 8023518:	e55d      	b.n	8022fd6 <_dtoa_r+0x9e>
 802351a:	465f      	mov	r7, fp
 802351c:	4643      	mov	r3, r8
 802351e:	4698      	mov	r8, r3
 8023520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023524:	2a39      	cmp	r2, #57	; 0x39
 8023526:	d106      	bne.n	8023536 <_dtoa_r+0x5fe>
 8023528:	9a01      	ldr	r2, [sp, #4]
 802352a:	429a      	cmp	r2, r3
 802352c:	d1f7      	bne.n	802351e <_dtoa_r+0x5e6>
 802352e:	9901      	ldr	r1, [sp, #4]
 8023530:	2230      	movs	r2, #48	; 0x30
 8023532:	3701      	adds	r7, #1
 8023534:	700a      	strb	r2, [r1, #0]
 8023536:	781a      	ldrb	r2, [r3, #0]
 8023538:	3201      	adds	r2, #1
 802353a:	701a      	strb	r2, [r3, #0]
 802353c:	e7ae      	b.n	802349c <_dtoa_r+0x564>
 802353e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023542:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802354a:	d1b2      	bne.n	80234b2 <_dtoa_r+0x57a>
 802354c:	e7d3      	b.n	80234f6 <_dtoa_r+0x5be>
 802354e:	bf00      	nop
 8023550:	08063980 	.word	0x08063980
 8023554:	08063958 	.word	0x08063958
 8023558:	9907      	ldr	r1, [sp, #28]
 802355a:	2900      	cmp	r1, #0
 802355c:	f000 80d0 	beq.w	8023700 <_dtoa_r+0x7c8>
 8023560:	9906      	ldr	r1, [sp, #24]
 8023562:	2901      	cmp	r1, #1
 8023564:	f300 80b4 	bgt.w	80236d0 <_dtoa_r+0x798>
 8023568:	990a      	ldr	r1, [sp, #40]	; 0x28
 802356a:	2900      	cmp	r1, #0
 802356c:	f000 80ac 	beq.w	80236c8 <_dtoa_r+0x790>
 8023570:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023574:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8023578:	461c      	mov	r4, r3
 802357a:	930a      	str	r3, [sp, #40]	; 0x28
 802357c:	9b04      	ldr	r3, [sp, #16]
 802357e:	4413      	add	r3, r2
 8023580:	9304      	str	r3, [sp, #16]
 8023582:	9b05      	ldr	r3, [sp, #20]
 8023584:	2101      	movs	r1, #1
 8023586:	4413      	add	r3, r2
 8023588:	4630      	mov	r0, r6
 802358a:	9305      	str	r3, [sp, #20]
 802358c:	f000 fb4a 	bl	8023c24 <__i2b>
 8023590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023592:	4607      	mov	r7, r0
 8023594:	f1b8 0f00 	cmp.w	r8, #0
 8023598:	dd0d      	ble.n	80235b6 <_dtoa_r+0x67e>
 802359a:	9a05      	ldr	r2, [sp, #20]
 802359c:	2a00      	cmp	r2, #0
 802359e:	dd0a      	ble.n	80235b6 <_dtoa_r+0x67e>
 80235a0:	4542      	cmp	r2, r8
 80235a2:	9904      	ldr	r1, [sp, #16]
 80235a4:	bfa8      	it	ge
 80235a6:	4642      	movge	r2, r8
 80235a8:	1a89      	subs	r1, r1, r2
 80235aa:	9104      	str	r1, [sp, #16]
 80235ac:	9905      	ldr	r1, [sp, #20]
 80235ae:	eba8 0802 	sub.w	r8, r8, r2
 80235b2:	1a8a      	subs	r2, r1, r2
 80235b4:	9205      	str	r2, [sp, #20]
 80235b6:	b303      	cbz	r3, 80235fa <_dtoa_r+0x6c2>
 80235b8:	9a07      	ldr	r2, [sp, #28]
 80235ba:	2a00      	cmp	r2, #0
 80235bc:	f000 80a5 	beq.w	802370a <_dtoa_r+0x7d2>
 80235c0:	2c00      	cmp	r4, #0
 80235c2:	dd13      	ble.n	80235ec <_dtoa_r+0x6b4>
 80235c4:	4639      	mov	r1, r7
 80235c6:	4622      	mov	r2, r4
 80235c8:	4630      	mov	r0, r6
 80235ca:	930d      	str	r3, [sp, #52]	; 0x34
 80235cc:	f000 fbea 	bl	8023da4 <__pow5mult>
 80235d0:	462a      	mov	r2, r5
 80235d2:	4601      	mov	r1, r0
 80235d4:	4607      	mov	r7, r0
 80235d6:	4630      	mov	r0, r6
 80235d8:	f000 fb3a 	bl	8023c50 <__multiply>
 80235dc:	4629      	mov	r1, r5
 80235de:	900a      	str	r0, [sp, #40]	; 0x28
 80235e0:	4630      	mov	r0, r6
 80235e2:	f000 fa67 	bl	8023ab4 <_Bfree>
 80235e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80235e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80235ea:	4615      	mov	r5, r2
 80235ec:	1b1a      	subs	r2, r3, r4
 80235ee:	d004      	beq.n	80235fa <_dtoa_r+0x6c2>
 80235f0:	4629      	mov	r1, r5
 80235f2:	4630      	mov	r0, r6
 80235f4:	f000 fbd6 	bl	8023da4 <__pow5mult>
 80235f8:	4605      	mov	r5, r0
 80235fa:	2101      	movs	r1, #1
 80235fc:	4630      	mov	r0, r6
 80235fe:	f000 fb11 	bl	8023c24 <__i2b>
 8023602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023604:	2b00      	cmp	r3, #0
 8023606:	4604      	mov	r4, r0
 8023608:	f340 8081 	ble.w	802370e <_dtoa_r+0x7d6>
 802360c:	461a      	mov	r2, r3
 802360e:	4601      	mov	r1, r0
 8023610:	4630      	mov	r0, r6
 8023612:	f000 fbc7 	bl	8023da4 <__pow5mult>
 8023616:	9b06      	ldr	r3, [sp, #24]
 8023618:	2b01      	cmp	r3, #1
 802361a:	4604      	mov	r4, r0
 802361c:	dd7a      	ble.n	8023714 <_dtoa_r+0x7dc>
 802361e:	2300      	movs	r3, #0
 8023620:	930a      	str	r3, [sp, #40]	; 0x28
 8023622:	6922      	ldr	r2, [r4, #16]
 8023624:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8023628:	6910      	ldr	r0, [r2, #16]
 802362a:	f000 faab 	bl	8023b84 <__hi0bits>
 802362e:	f1c0 0020 	rsb	r0, r0, #32
 8023632:	9b05      	ldr	r3, [sp, #20]
 8023634:	4418      	add	r0, r3
 8023636:	f010 001f 	ands.w	r0, r0, #31
 802363a:	f000 808c 	beq.w	8023756 <_dtoa_r+0x81e>
 802363e:	f1c0 0220 	rsb	r2, r0, #32
 8023642:	2a04      	cmp	r2, #4
 8023644:	f340 8085 	ble.w	8023752 <_dtoa_r+0x81a>
 8023648:	f1c0 001c 	rsb	r0, r0, #28
 802364c:	9b04      	ldr	r3, [sp, #16]
 802364e:	4403      	add	r3, r0
 8023650:	9304      	str	r3, [sp, #16]
 8023652:	9b05      	ldr	r3, [sp, #20]
 8023654:	4403      	add	r3, r0
 8023656:	4480      	add	r8, r0
 8023658:	9305      	str	r3, [sp, #20]
 802365a:	9b04      	ldr	r3, [sp, #16]
 802365c:	2b00      	cmp	r3, #0
 802365e:	dd05      	ble.n	802366c <_dtoa_r+0x734>
 8023660:	4629      	mov	r1, r5
 8023662:	461a      	mov	r2, r3
 8023664:	4630      	mov	r0, r6
 8023666:	f000 fbf7 	bl	8023e58 <__lshift>
 802366a:	4605      	mov	r5, r0
 802366c:	9b05      	ldr	r3, [sp, #20]
 802366e:	2b00      	cmp	r3, #0
 8023670:	dd05      	ble.n	802367e <_dtoa_r+0x746>
 8023672:	4621      	mov	r1, r4
 8023674:	461a      	mov	r2, r3
 8023676:	4630      	mov	r0, r6
 8023678:	f000 fbee 	bl	8023e58 <__lshift>
 802367c:	4604      	mov	r4, r0
 802367e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023680:	2b00      	cmp	r3, #0
 8023682:	d06a      	beq.n	802375a <_dtoa_r+0x822>
 8023684:	4621      	mov	r1, r4
 8023686:	4628      	mov	r0, r5
 8023688:	f000 fc56 	bl	8023f38 <__mcmp>
 802368c:	2800      	cmp	r0, #0
 802368e:	da64      	bge.n	802375a <_dtoa_r+0x822>
 8023690:	2300      	movs	r3, #0
 8023692:	4629      	mov	r1, r5
 8023694:	220a      	movs	r2, #10
 8023696:	4630      	mov	r0, r6
 8023698:	f000 fa2e 	bl	8023af8 <__multadd>
 802369c:	9b07      	ldr	r3, [sp, #28]
 802369e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80236a2:	4605      	mov	r5, r0
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	f000 8191 	beq.w	80239cc <_dtoa_r+0xa94>
 80236aa:	4639      	mov	r1, r7
 80236ac:	2300      	movs	r3, #0
 80236ae:	220a      	movs	r2, #10
 80236b0:	4630      	mov	r0, r6
 80236b2:	f000 fa21 	bl	8023af8 <__multadd>
 80236b6:	f1ba 0f00 	cmp.w	sl, #0
 80236ba:	4607      	mov	r7, r0
 80236bc:	f300 808d 	bgt.w	80237da <_dtoa_r+0x8a2>
 80236c0:	9b06      	ldr	r3, [sp, #24]
 80236c2:	2b02      	cmp	r3, #2
 80236c4:	dc50      	bgt.n	8023768 <_dtoa_r+0x830>
 80236c6:	e088      	b.n	80237da <_dtoa_r+0x8a2>
 80236c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80236ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80236ce:	e751      	b.n	8023574 <_dtoa_r+0x63c>
 80236d0:	f109 34ff 	add.w	r4, r9, #4294967295
 80236d4:	42a3      	cmp	r3, r4
 80236d6:	bfbf      	itttt	lt
 80236d8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80236da:	1ae3      	sublt	r3, r4, r3
 80236dc:	18d2      	addlt	r2, r2, r3
 80236de:	9209      	strlt	r2, [sp, #36]	; 0x24
 80236e0:	bfb6      	itet	lt
 80236e2:	4623      	movlt	r3, r4
 80236e4:	1b1c      	subge	r4, r3, r4
 80236e6:	2400      	movlt	r4, #0
 80236e8:	f1b9 0f00 	cmp.w	r9, #0
 80236ec:	bfb5      	itete	lt
 80236ee:	9a04      	ldrlt	r2, [sp, #16]
 80236f0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80236f4:	eba2 0809 	sublt.w	r8, r2, r9
 80236f8:	464a      	movge	r2, r9
 80236fa:	bfb8      	it	lt
 80236fc:	2200      	movlt	r2, #0
 80236fe:	e73c      	b.n	802357a <_dtoa_r+0x642>
 8023700:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8023704:	9f07      	ldr	r7, [sp, #28]
 8023706:	461c      	mov	r4, r3
 8023708:	e744      	b.n	8023594 <_dtoa_r+0x65c>
 802370a:	461a      	mov	r2, r3
 802370c:	e770      	b.n	80235f0 <_dtoa_r+0x6b8>
 802370e:	9b06      	ldr	r3, [sp, #24]
 8023710:	2b01      	cmp	r3, #1
 8023712:	dc18      	bgt.n	8023746 <_dtoa_r+0x80e>
 8023714:	9b02      	ldr	r3, [sp, #8]
 8023716:	b9b3      	cbnz	r3, 8023746 <_dtoa_r+0x80e>
 8023718:	9b03      	ldr	r3, [sp, #12]
 802371a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802371e:	b9a2      	cbnz	r2, 802374a <_dtoa_r+0x812>
 8023720:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8023724:	0d12      	lsrs	r2, r2, #20
 8023726:	0512      	lsls	r2, r2, #20
 8023728:	b18a      	cbz	r2, 802374e <_dtoa_r+0x816>
 802372a:	9b04      	ldr	r3, [sp, #16]
 802372c:	3301      	adds	r3, #1
 802372e:	9304      	str	r3, [sp, #16]
 8023730:	9b05      	ldr	r3, [sp, #20]
 8023732:	3301      	adds	r3, #1
 8023734:	9305      	str	r3, [sp, #20]
 8023736:	2301      	movs	r3, #1
 8023738:	930a      	str	r3, [sp, #40]	; 0x28
 802373a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802373c:	2b00      	cmp	r3, #0
 802373e:	f47f af70 	bne.w	8023622 <_dtoa_r+0x6ea>
 8023742:	2001      	movs	r0, #1
 8023744:	e775      	b.n	8023632 <_dtoa_r+0x6fa>
 8023746:	2300      	movs	r3, #0
 8023748:	e7f6      	b.n	8023738 <_dtoa_r+0x800>
 802374a:	9b02      	ldr	r3, [sp, #8]
 802374c:	e7f4      	b.n	8023738 <_dtoa_r+0x800>
 802374e:	920a      	str	r2, [sp, #40]	; 0x28
 8023750:	e7f3      	b.n	802373a <_dtoa_r+0x802>
 8023752:	d082      	beq.n	802365a <_dtoa_r+0x722>
 8023754:	4610      	mov	r0, r2
 8023756:	301c      	adds	r0, #28
 8023758:	e778      	b.n	802364c <_dtoa_r+0x714>
 802375a:	f1b9 0f00 	cmp.w	r9, #0
 802375e:	dc37      	bgt.n	80237d0 <_dtoa_r+0x898>
 8023760:	9b06      	ldr	r3, [sp, #24]
 8023762:	2b02      	cmp	r3, #2
 8023764:	dd34      	ble.n	80237d0 <_dtoa_r+0x898>
 8023766:	46ca      	mov	sl, r9
 8023768:	f1ba 0f00 	cmp.w	sl, #0
 802376c:	d10d      	bne.n	802378a <_dtoa_r+0x852>
 802376e:	4621      	mov	r1, r4
 8023770:	4653      	mov	r3, sl
 8023772:	2205      	movs	r2, #5
 8023774:	4630      	mov	r0, r6
 8023776:	f000 f9bf 	bl	8023af8 <__multadd>
 802377a:	4601      	mov	r1, r0
 802377c:	4604      	mov	r4, r0
 802377e:	4628      	mov	r0, r5
 8023780:	f000 fbda 	bl	8023f38 <__mcmp>
 8023784:	2800      	cmp	r0, #0
 8023786:	f73f adeb 	bgt.w	8023360 <_dtoa_r+0x428>
 802378a:	9b08      	ldr	r3, [sp, #32]
 802378c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8023790:	ea6f 0b03 	mvn.w	fp, r3
 8023794:	f04f 0900 	mov.w	r9, #0
 8023798:	4621      	mov	r1, r4
 802379a:	4630      	mov	r0, r6
 802379c:	f000 f98a 	bl	8023ab4 <_Bfree>
 80237a0:	2f00      	cmp	r7, #0
 80237a2:	f43f aea8 	beq.w	80234f6 <_dtoa_r+0x5be>
 80237a6:	f1b9 0f00 	cmp.w	r9, #0
 80237aa:	d005      	beq.n	80237b8 <_dtoa_r+0x880>
 80237ac:	45b9      	cmp	r9, r7
 80237ae:	d003      	beq.n	80237b8 <_dtoa_r+0x880>
 80237b0:	4649      	mov	r1, r9
 80237b2:	4630      	mov	r0, r6
 80237b4:	f000 f97e 	bl	8023ab4 <_Bfree>
 80237b8:	4639      	mov	r1, r7
 80237ba:	4630      	mov	r0, r6
 80237bc:	f000 f97a 	bl	8023ab4 <_Bfree>
 80237c0:	e699      	b.n	80234f6 <_dtoa_r+0x5be>
 80237c2:	2400      	movs	r4, #0
 80237c4:	4627      	mov	r7, r4
 80237c6:	e7e0      	b.n	802378a <_dtoa_r+0x852>
 80237c8:	46bb      	mov	fp, r7
 80237ca:	4604      	mov	r4, r0
 80237cc:	4607      	mov	r7, r0
 80237ce:	e5c7      	b.n	8023360 <_dtoa_r+0x428>
 80237d0:	9b07      	ldr	r3, [sp, #28]
 80237d2:	46ca      	mov	sl, r9
 80237d4:	2b00      	cmp	r3, #0
 80237d6:	f000 8100 	beq.w	80239da <_dtoa_r+0xaa2>
 80237da:	f1b8 0f00 	cmp.w	r8, #0
 80237de:	dd05      	ble.n	80237ec <_dtoa_r+0x8b4>
 80237e0:	4639      	mov	r1, r7
 80237e2:	4642      	mov	r2, r8
 80237e4:	4630      	mov	r0, r6
 80237e6:	f000 fb37 	bl	8023e58 <__lshift>
 80237ea:	4607      	mov	r7, r0
 80237ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d05d      	beq.n	80238ae <_dtoa_r+0x976>
 80237f2:	6879      	ldr	r1, [r7, #4]
 80237f4:	4630      	mov	r0, r6
 80237f6:	f000 f91d 	bl	8023a34 <_Balloc>
 80237fa:	4680      	mov	r8, r0
 80237fc:	b928      	cbnz	r0, 802380a <_dtoa_r+0x8d2>
 80237fe:	4b82      	ldr	r3, [pc, #520]	; (8023a08 <_dtoa_r+0xad0>)
 8023800:	4602      	mov	r2, r0
 8023802:	f240 21ea 	movw	r1, #746	; 0x2ea
 8023806:	f7ff bbaf 	b.w	8022f68 <_dtoa_r+0x30>
 802380a:	693a      	ldr	r2, [r7, #16]
 802380c:	3202      	adds	r2, #2
 802380e:	0092      	lsls	r2, r2, #2
 8023810:	f107 010c 	add.w	r1, r7, #12
 8023814:	300c      	adds	r0, #12
 8023816:	f7fe fd39 	bl	802228c <memcpy>
 802381a:	2201      	movs	r2, #1
 802381c:	4641      	mov	r1, r8
 802381e:	4630      	mov	r0, r6
 8023820:	f000 fb1a 	bl	8023e58 <__lshift>
 8023824:	9b01      	ldr	r3, [sp, #4]
 8023826:	3301      	adds	r3, #1
 8023828:	9304      	str	r3, [sp, #16]
 802382a:	9b01      	ldr	r3, [sp, #4]
 802382c:	4453      	add	r3, sl
 802382e:	9308      	str	r3, [sp, #32]
 8023830:	9b02      	ldr	r3, [sp, #8]
 8023832:	f003 0301 	and.w	r3, r3, #1
 8023836:	46b9      	mov	r9, r7
 8023838:	9307      	str	r3, [sp, #28]
 802383a:	4607      	mov	r7, r0
 802383c:	9b04      	ldr	r3, [sp, #16]
 802383e:	4621      	mov	r1, r4
 8023840:	3b01      	subs	r3, #1
 8023842:	4628      	mov	r0, r5
 8023844:	9302      	str	r3, [sp, #8]
 8023846:	f7ff faea 	bl	8022e1e <quorem>
 802384a:	4603      	mov	r3, r0
 802384c:	3330      	adds	r3, #48	; 0x30
 802384e:	9005      	str	r0, [sp, #20]
 8023850:	4649      	mov	r1, r9
 8023852:	4628      	mov	r0, r5
 8023854:	9309      	str	r3, [sp, #36]	; 0x24
 8023856:	f000 fb6f 	bl	8023f38 <__mcmp>
 802385a:	463a      	mov	r2, r7
 802385c:	4682      	mov	sl, r0
 802385e:	4621      	mov	r1, r4
 8023860:	4630      	mov	r0, r6
 8023862:	f000 fb85 	bl	8023f70 <__mdiff>
 8023866:	68c2      	ldr	r2, [r0, #12]
 8023868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802386a:	4680      	mov	r8, r0
 802386c:	bb0a      	cbnz	r2, 80238b2 <_dtoa_r+0x97a>
 802386e:	4601      	mov	r1, r0
 8023870:	4628      	mov	r0, r5
 8023872:	f000 fb61 	bl	8023f38 <__mcmp>
 8023876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023878:	4602      	mov	r2, r0
 802387a:	4641      	mov	r1, r8
 802387c:	4630      	mov	r0, r6
 802387e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8023882:	f000 f917 	bl	8023ab4 <_Bfree>
 8023886:	9b06      	ldr	r3, [sp, #24]
 8023888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802388a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802388e:	ea43 0102 	orr.w	r1, r3, r2
 8023892:	9b07      	ldr	r3, [sp, #28]
 8023894:	430b      	orrs	r3, r1
 8023896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023898:	d10d      	bne.n	80238b6 <_dtoa_r+0x97e>
 802389a:	2b39      	cmp	r3, #57	; 0x39
 802389c:	d029      	beq.n	80238f2 <_dtoa_r+0x9ba>
 802389e:	f1ba 0f00 	cmp.w	sl, #0
 80238a2:	dd01      	ble.n	80238a8 <_dtoa_r+0x970>
 80238a4:	9b05      	ldr	r3, [sp, #20]
 80238a6:	3331      	adds	r3, #49	; 0x31
 80238a8:	9a02      	ldr	r2, [sp, #8]
 80238aa:	7013      	strb	r3, [r2, #0]
 80238ac:	e774      	b.n	8023798 <_dtoa_r+0x860>
 80238ae:	4638      	mov	r0, r7
 80238b0:	e7b8      	b.n	8023824 <_dtoa_r+0x8ec>
 80238b2:	2201      	movs	r2, #1
 80238b4:	e7e1      	b.n	802387a <_dtoa_r+0x942>
 80238b6:	f1ba 0f00 	cmp.w	sl, #0
 80238ba:	db06      	blt.n	80238ca <_dtoa_r+0x992>
 80238bc:	9906      	ldr	r1, [sp, #24]
 80238be:	ea41 0a0a 	orr.w	sl, r1, sl
 80238c2:	9907      	ldr	r1, [sp, #28]
 80238c4:	ea5a 0101 	orrs.w	r1, sl, r1
 80238c8:	d120      	bne.n	802390c <_dtoa_r+0x9d4>
 80238ca:	2a00      	cmp	r2, #0
 80238cc:	ddec      	ble.n	80238a8 <_dtoa_r+0x970>
 80238ce:	4629      	mov	r1, r5
 80238d0:	2201      	movs	r2, #1
 80238d2:	4630      	mov	r0, r6
 80238d4:	9304      	str	r3, [sp, #16]
 80238d6:	f000 fabf 	bl	8023e58 <__lshift>
 80238da:	4621      	mov	r1, r4
 80238dc:	4605      	mov	r5, r0
 80238de:	f000 fb2b 	bl	8023f38 <__mcmp>
 80238e2:	2800      	cmp	r0, #0
 80238e4:	9b04      	ldr	r3, [sp, #16]
 80238e6:	dc02      	bgt.n	80238ee <_dtoa_r+0x9b6>
 80238e8:	d1de      	bne.n	80238a8 <_dtoa_r+0x970>
 80238ea:	07da      	lsls	r2, r3, #31
 80238ec:	d5dc      	bpl.n	80238a8 <_dtoa_r+0x970>
 80238ee:	2b39      	cmp	r3, #57	; 0x39
 80238f0:	d1d8      	bne.n	80238a4 <_dtoa_r+0x96c>
 80238f2:	9a02      	ldr	r2, [sp, #8]
 80238f4:	2339      	movs	r3, #57	; 0x39
 80238f6:	7013      	strb	r3, [r2, #0]
 80238f8:	4643      	mov	r3, r8
 80238fa:	4698      	mov	r8, r3
 80238fc:	3b01      	subs	r3, #1
 80238fe:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8023902:	2a39      	cmp	r2, #57	; 0x39
 8023904:	d051      	beq.n	80239aa <_dtoa_r+0xa72>
 8023906:	3201      	adds	r2, #1
 8023908:	701a      	strb	r2, [r3, #0]
 802390a:	e745      	b.n	8023798 <_dtoa_r+0x860>
 802390c:	2a00      	cmp	r2, #0
 802390e:	dd03      	ble.n	8023918 <_dtoa_r+0x9e0>
 8023910:	2b39      	cmp	r3, #57	; 0x39
 8023912:	d0ee      	beq.n	80238f2 <_dtoa_r+0x9ba>
 8023914:	3301      	adds	r3, #1
 8023916:	e7c7      	b.n	80238a8 <_dtoa_r+0x970>
 8023918:	9a04      	ldr	r2, [sp, #16]
 802391a:	9908      	ldr	r1, [sp, #32]
 802391c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023920:	428a      	cmp	r2, r1
 8023922:	d02b      	beq.n	802397c <_dtoa_r+0xa44>
 8023924:	4629      	mov	r1, r5
 8023926:	2300      	movs	r3, #0
 8023928:	220a      	movs	r2, #10
 802392a:	4630      	mov	r0, r6
 802392c:	f000 f8e4 	bl	8023af8 <__multadd>
 8023930:	45b9      	cmp	r9, r7
 8023932:	4605      	mov	r5, r0
 8023934:	f04f 0300 	mov.w	r3, #0
 8023938:	f04f 020a 	mov.w	r2, #10
 802393c:	4649      	mov	r1, r9
 802393e:	4630      	mov	r0, r6
 8023940:	d107      	bne.n	8023952 <_dtoa_r+0xa1a>
 8023942:	f000 f8d9 	bl	8023af8 <__multadd>
 8023946:	4681      	mov	r9, r0
 8023948:	4607      	mov	r7, r0
 802394a:	9b04      	ldr	r3, [sp, #16]
 802394c:	3301      	adds	r3, #1
 802394e:	9304      	str	r3, [sp, #16]
 8023950:	e774      	b.n	802383c <_dtoa_r+0x904>
 8023952:	f000 f8d1 	bl	8023af8 <__multadd>
 8023956:	4639      	mov	r1, r7
 8023958:	4681      	mov	r9, r0
 802395a:	2300      	movs	r3, #0
 802395c:	220a      	movs	r2, #10
 802395e:	4630      	mov	r0, r6
 8023960:	f000 f8ca 	bl	8023af8 <__multadd>
 8023964:	4607      	mov	r7, r0
 8023966:	e7f0      	b.n	802394a <_dtoa_r+0xa12>
 8023968:	f1ba 0f00 	cmp.w	sl, #0
 802396c:	9a01      	ldr	r2, [sp, #4]
 802396e:	bfcc      	ite	gt
 8023970:	46d0      	movgt	r8, sl
 8023972:	f04f 0801 	movle.w	r8, #1
 8023976:	4490      	add	r8, r2
 8023978:	f04f 0900 	mov.w	r9, #0
 802397c:	4629      	mov	r1, r5
 802397e:	2201      	movs	r2, #1
 8023980:	4630      	mov	r0, r6
 8023982:	9302      	str	r3, [sp, #8]
 8023984:	f000 fa68 	bl	8023e58 <__lshift>
 8023988:	4621      	mov	r1, r4
 802398a:	4605      	mov	r5, r0
 802398c:	f000 fad4 	bl	8023f38 <__mcmp>
 8023990:	2800      	cmp	r0, #0
 8023992:	dcb1      	bgt.n	80238f8 <_dtoa_r+0x9c0>
 8023994:	d102      	bne.n	802399c <_dtoa_r+0xa64>
 8023996:	9b02      	ldr	r3, [sp, #8]
 8023998:	07db      	lsls	r3, r3, #31
 802399a:	d4ad      	bmi.n	80238f8 <_dtoa_r+0x9c0>
 802399c:	4643      	mov	r3, r8
 802399e:	4698      	mov	r8, r3
 80239a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80239a4:	2a30      	cmp	r2, #48	; 0x30
 80239a6:	d0fa      	beq.n	802399e <_dtoa_r+0xa66>
 80239a8:	e6f6      	b.n	8023798 <_dtoa_r+0x860>
 80239aa:	9a01      	ldr	r2, [sp, #4]
 80239ac:	429a      	cmp	r2, r3
 80239ae:	d1a4      	bne.n	80238fa <_dtoa_r+0x9c2>
 80239b0:	f10b 0b01 	add.w	fp, fp, #1
 80239b4:	2331      	movs	r3, #49	; 0x31
 80239b6:	e778      	b.n	80238aa <_dtoa_r+0x972>
 80239b8:	4b14      	ldr	r3, [pc, #80]	; (8023a0c <_dtoa_r+0xad4>)
 80239ba:	f7ff bb27 	b.w	802300c <_dtoa_r+0xd4>
 80239be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80239c0:	2b00      	cmp	r3, #0
 80239c2:	f47f ab03 	bne.w	8022fcc <_dtoa_r+0x94>
 80239c6:	4b12      	ldr	r3, [pc, #72]	; (8023a10 <_dtoa_r+0xad8>)
 80239c8:	f7ff bb20 	b.w	802300c <_dtoa_r+0xd4>
 80239cc:	f1ba 0f00 	cmp.w	sl, #0
 80239d0:	dc03      	bgt.n	80239da <_dtoa_r+0xaa2>
 80239d2:	9b06      	ldr	r3, [sp, #24]
 80239d4:	2b02      	cmp	r3, #2
 80239d6:	f73f aec7 	bgt.w	8023768 <_dtoa_r+0x830>
 80239da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80239de:	4621      	mov	r1, r4
 80239e0:	4628      	mov	r0, r5
 80239e2:	f7ff fa1c 	bl	8022e1e <quorem>
 80239e6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80239ea:	f808 3b01 	strb.w	r3, [r8], #1
 80239ee:	9a01      	ldr	r2, [sp, #4]
 80239f0:	eba8 0202 	sub.w	r2, r8, r2
 80239f4:	4592      	cmp	sl, r2
 80239f6:	ddb7      	ble.n	8023968 <_dtoa_r+0xa30>
 80239f8:	4629      	mov	r1, r5
 80239fa:	2300      	movs	r3, #0
 80239fc:	220a      	movs	r2, #10
 80239fe:	4630      	mov	r0, r6
 8023a00:	f000 f87a 	bl	8023af8 <__multadd>
 8023a04:	4605      	mov	r5, r0
 8023a06:	e7ea      	b.n	80239de <_dtoa_r+0xaa6>
 8023a08:	080638e7 	.word	0x080638e7
 8023a0c:	08063844 	.word	0x08063844
 8023a10:	08063868 	.word	0x08063868

08023a14 <_localeconv_r>:
 8023a14:	4800      	ldr	r0, [pc, #0]	; (8023a18 <_localeconv_r+0x4>)
 8023a16:	4770      	bx	lr
 8023a18:	20004978 	.word	0x20004978

08023a1c <__malloc_lock>:
 8023a1c:	4801      	ldr	r0, [pc, #4]	; (8023a24 <__malloc_lock+0x8>)
 8023a1e:	f000 bd5e 	b.w	80244de <__retarget_lock_acquire_recursive>
 8023a22:	bf00      	nop
 8023a24:	200073b0 	.word	0x200073b0

08023a28 <__malloc_unlock>:
 8023a28:	4801      	ldr	r0, [pc, #4]	; (8023a30 <__malloc_unlock+0x8>)
 8023a2a:	f000 bd59 	b.w	80244e0 <__retarget_lock_release_recursive>
 8023a2e:	bf00      	nop
 8023a30:	200073b0 	.word	0x200073b0

08023a34 <_Balloc>:
 8023a34:	b570      	push	{r4, r5, r6, lr}
 8023a36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023a38:	4604      	mov	r4, r0
 8023a3a:	460d      	mov	r5, r1
 8023a3c:	b976      	cbnz	r6, 8023a5c <_Balloc+0x28>
 8023a3e:	2010      	movs	r0, #16
 8023a40:	f7fe fc14 	bl	802226c <malloc>
 8023a44:	4602      	mov	r2, r0
 8023a46:	6260      	str	r0, [r4, #36]	; 0x24
 8023a48:	b920      	cbnz	r0, 8023a54 <_Balloc+0x20>
 8023a4a:	4b18      	ldr	r3, [pc, #96]	; (8023aac <_Balloc+0x78>)
 8023a4c:	4818      	ldr	r0, [pc, #96]	; (8023ab0 <_Balloc+0x7c>)
 8023a4e:	2166      	movs	r1, #102	; 0x66
 8023a50:	f000 fd14 	bl	802447c <__assert_func>
 8023a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023a58:	6006      	str	r6, [r0, #0]
 8023a5a:	60c6      	str	r6, [r0, #12]
 8023a5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023a5e:	68f3      	ldr	r3, [r6, #12]
 8023a60:	b183      	cbz	r3, 8023a84 <_Balloc+0x50>
 8023a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023a64:	68db      	ldr	r3, [r3, #12]
 8023a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8023a6a:	b9b8      	cbnz	r0, 8023a9c <_Balloc+0x68>
 8023a6c:	2101      	movs	r1, #1
 8023a6e:	fa01 f605 	lsl.w	r6, r1, r5
 8023a72:	1d72      	adds	r2, r6, #5
 8023a74:	0092      	lsls	r2, r2, #2
 8023a76:	4620      	mov	r0, r4
 8023a78:	f000 fb60 	bl	802413c <_calloc_r>
 8023a7c:	b160      	cbz	r0, 8023a98 <_Balloc+0x64>
 8023a7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8023a82:	e00e      	b.n	8023aa2 <_Balloc+0x6e>
 8023a84:	2221      	movs	r2, #33	; 0x21
 8023a86:	2104      	movs	r1, #4
 8023a88:	4620      	mov	r0, r4
 8023a8a:	f000 fb57 	bl	802413c <_calloc_r>
 8023a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023a90:	60f0      	str	r0, [r6, #12]
 8023a92:	68db      	ldr	r3, [r3, #12]
 8023a94:	2b00      	cmp	r3, #0
 8023a96:	d1e4      	bne.n	8023a62 <_Balloc+0x2e>
 8023a98:	2000      	movs	r0, #0
 8023a9a:	bd70      	pop	{r4, r5, r6, pc}
 8023a9c:	6802      	ldr	r2, [r0, #0]
 8023a9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8023aa2:	2300      	movs	r3, #0
 8023aa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023aa8:	e7f7      	b.n	8023a9a <_Balloc+0x66>
 8023aaa:	bf00      	nop
 8023aac:	08063875 	.word	0x08063875
 8023ab0:	080638f8 	.word	0x080638f8

08023ab4 <_Bfree>:
 8023ab4:	b570      	push	{r4, r5, r6, lr}
 8023ab6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8023ab8:	4605      	mov	r5, r0
 8023aba:	460c      	mov	r4, r1
 8023abc:	b976      	cbnz	r6, 8023adc <_Bfree+0x28>
 8023abe:	2010      	movs	r0, #16
 8023ac0:	f7fe fbd4 	bl	802226c <malloc>
 8023ac4:	4602      	mov	r2, r0
 8023ac6:	6268      	str	r0, [r5, #36]	; 0x24
 8023ac8:	b920      	cbnz	r0, 8023ad4 <_Bfree+0x20>
 8023aca:	4b09      	ldr	r3, [pc, #36]	; (8023af0 <_Bfree+0x3c>)
 8023acc:	4809      	ldr	r0, [pc, #36]	; (8023af4 <_Bfree+0x40>)
 8023ace:	218a      	movs	r1, #138	; 0x8a
 8023ad0:	f000 fcd4 	bl	802447c <__assert_func>
 8023ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023ad8:	6006      	str	r6, [r0, #0]
 8023ada:	60c6      	str	r6, [r0, #12]
 8023adc:	b13c      	cbz	r4, 8023aee <_Bfree+0x3a>
 8023ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8023ae0:	6862      	ldr	r2, [r4, #4]
 8023ae2:	68db      	ldr	r3, [r3, #12]
 8023ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023ae8:	6021      	str	r1, [r4, #0]
 8023aea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8023aee:	bd70      	pop	{r4, r5, r6, pc}
 8023af0:	08063875 	.word	0x08063875
 8023af4:	080638f8 	.word	0x080638f8

08023af8 <__multadd>:
 8023af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023afc:	690d      	ldr	r5, [r1, #16]
 8023afe:	4607      	mov	r7, r0
 8023b00:	460c      	mov	r4, r1
 8023b02:	461e      	mov	r6, r3
 8023b04:	f101 0c14 	add.w	ip, r1, #20
 8023b08:	2000      	movs	r0, #0
 8023b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8023b0e:	b299      	uxth	r1, r3
 8023b10:	fb02 6101 	mla	r1, r2, r1, r6
 8023b14:	0c1e      	lsrs	r6, r3, #16
 8023b16:	0c0b      	lsrs	r3, r1, #16
 8023b18:	fb02 3306 	mla	r3, r2, r6, r3
 8023b1c:	b289      	uxth	r1, r1
 8023b1e:	3001      	adds	r0, #1
 8023b20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8023b24:	4285      	cmp	r5, r0
 8023b26:	f84c 1b04 	str.w	r1, [ip], #4
 8023b2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8023b2e:	dcec      	bgt.n	8023b0a <__multadd+0x12>
 8023b30:	b30e      	cbz	r6, 8023b76 <__multadd+0x7e>
 8023b32:	68a3      	ldr	r3, [r4, #8]
 8023b34:	42ab      	cmp	r3, r5
 8023b36:	dc19      	bgt.n	8023b6c <__multadd+0x74>
 8023b38:	6861      	ldr	r1, [r4, #4]
 8023b3a:	4638      	mov	r0, r7
 8023b3c:	3101      	adds	r1, #1
 8023b3e:	f7ff ff79 	bl	8023a34 <_Balloc>
 8023b42:	4680      	mov	r8, r0
 8023b44:	b928      	cbnz	r0, 8023b52 <__multadd+0x5a>
 8023b46:	4602      	mov	r2, r0
 8023b48:	4b0c      	ldr	r3, [pc, #48]	; (8023b7c <__multadd+0x84>)
 8023b4a:	480d      	ldr	r0, [pc, #52]	; (8023b80 <__multadd+0x88>)
 8023b4c:	21b5      	movs	r1, #181	; 0xb5
 8023b4e:	f000 fc95 	bl	802447c <__assert_func>
 8023b52:	6922      	ldr	r2, [r4, #16]
 8023b54:	3202      	adds	r2, #2
 8023b56:	f104 010c 	add.w	r1, r4, #12
 8023b5a:	0092      	lsls	r2, r2, #2
 8023b5c:	300c      	adds	r0, #12
 8023b5e:	f7fe fb95 	bl	802228c <memcpy>
 8023b62:	4621      	mov	r1, r4
 8023b64:	4638      	mov	r0, r7
 8023b66:	f7ff ffa5 	bl	8023ab4 <_Bfree>
 8023b6a:	4644      	mov	r4, r8
 8023b6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023b70:	3501      	adds	r5, #1
 8023b72:	615e      	str	r6, [r3, #20]
 8023b74:	6125      	str	r5, [r4, #16]
 8023b76:	4620      	mov	r0, r4
 8023b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b7c:	080638e7 	.word	0x080638e7
 8023b80:	080638f8 	.word	0x080638f8

08023b84 <__hi0bits>:
 8023b84:	0c03      	lsrs	r3, r0, #16
 8023b86:	041b      	lsls	r3, r3, #16
 8023b88:	b9d3      	cbnz	r3, 8023bc0 <__hi0bits+0x3c>
 8023b8a:	0400      	lsls	r0, r0, #16
 8023b8c:	2310      	movs	r3, #16
 8023b8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8023b92:	bf04      	itt	eq
 8023b94:	0200      	lsleq	r0, r0, #8
 8023b96:	3308      	addeq	r3, #8
 8023b98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8023b9c:	bf04      	itt	eq
 8023b9e:	0100      	lsleq	r0, r0, #4
 8023ba0:	3304      	addeq	r3, #4
 8023ba2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8023ba6:	bf04      	itt	eq
 8023ba8:	0080      	lsleq	r0, r0, #2
 8023baa:	3302      	addeq	r3, #2
 8023bac:	2800      	cmp	r0, #0
 8023bae:	db05      	blt.n	8023bbc <__hi0bits+0x38>
 8023bb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8023bb4:	f103 0301 	add.w	r3, r3, #1
 8023bb8:	bf08      	it	eq
 8023bba:	2320      	moveq	r3, #32
 8023bbc:	4618      	mov	r0, r3
 8023bbe:	4770      	bx	lr
 8023bc0:	2300      	movs	r3, #0
 8023bc2:	e7e4      	b.n	8023b8e <__hi0bits+0xa>

08023bc4 <__lo0bits>:
 8023bc4:	6803      	ldr	r3, [r0, #0]
 8023bc6:	f013 0207 	ands.w	r2, r3, #7
 8023bca:	4601      	mov	r1, r0
 8023bcc:	d00b      	beq.n	8023be6 <__lo0bits+0x22>
 8023bce:	07da      	lsls	r2, r3, #31
 8023bd0:	d423      	bmi.n	8023c1a <__lo0bits+0x56>
 8023bd2:	0798      	lsls	r0, r3, #30
 8023bd4:	bf49      	itett	mi
 8023bd6:	085b      	lsrmi	r3, r3, #1
 8023bd8:	089b      	lsrpl	r3, r3, #2
 8023bda:	2001      	movmi	r0, #1
 8023bdc:	600b      	strmi	r3, [r1, #0]
 8023bde:	bf5c      	itt	pl
 8023be0:	600b      	strpl	r3, [r1, #0]
 8023be2:	2002      	movpl	r0, #2
 8023be4:	4770      	bx	lr
 8023be6:	b298      	uxth	r0, r3
 8023be8:	b9a8      	cbnz	r0, 8023c16 <__lo0bits+0x52>
 8023bea:	0c1b      	lsrs	r3, r3, #16
 8023bec:	2010      	movs	r0, #16
 8023bee:	b2da      	uxtb	r2, r3
 8023bf0:	b90a      	cbnz	r2, 8023bf6 <__lo0bits+0x32>
 8023bf2:	3008      	adds	r0, #8
 8023bf4:	0a1b      	lsrs	r3, r3, #8
 8023bf6:	071a      	lsls	r2, r3, #28
 8023bf8:	bf04      	itt	eq
 8023bfa:	091b      	lsreq	r3, r3, #4
 8023bfc:	3004      	addeq	r0, #4
 8023bfe:	079a      	lsls	r2, r3, #30
 8023c00:	bf04      	itt	eq
 8023c02:	089b      	lsreq	r3, r3, #2
 8023c04:	3002      	addeq	r0, #2
 8023c06:	07da      	lsls	r2, r3, #31
 8023c08:	d403      	bmi.n	8023c12 <__lo0bits+0x4e>
 8023c0a:	085b      	lsrs	r3, r3, #1
 8023c0c:	f100 0001 	add.w	r0, r0, #1
 8023c10:	d005      	beq.n	8023c1e <__lo0bits+0x5a>
 8023c12:	600b      	str	r3, [r1, #0]
 8023c14:	4770      	bx	lr
 8023c16:	4610      	mov	r0, r2
 8023c18:	e7e9      	b.n	8023bee <__lo0bits+0x2a>
 8023c1a:	2000      	movs	r0, #0
 8023c1c:	4770      	bx	lr
 8023c1e:	2020      	movs	r0, #32
 8023c20:	4770      	bx	lr
	...

08023c24 <__i2b>:
 8023c24:	b510      	push	{r4, lr}
 8023c26:	460c      	mov	r4, r1
 8023c28:	2101      	movs	r1, #1
 8023c2a:	f7ff ff03 	bl	8023a34 <_Balloc>
 8023c2e:	4602      	mov	r2, r0
 8023c30:	b928      	cbnz	r0, 8023c3e <__i2b+0x1a>
 8023c32:	4b05      	ldr	r3, [pc, #20]	; (8023c48 <__i2b+0x24>)
 8023c34:	4805      	ldr	r0, [pc, #20]	; (8023c4c <__i2b+0x28>)
 8023c36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8023c3a:	f000 fc1f 	bl	802447c <__assert_func>
 8023c3e:	2301      	movs	r3, #1
 8023c40:	6144      	str	r4, [r0, #20]
 8023c42:	6103      	str	r3, [r0, #16]
 8023c44:	bd10      	pop	{r4, pc}
 8023c46:	bf00      	nop
 8023c48:	080638e7 	.word	0x080638e7
 8023c4c:	080638f8 	.word	0x080638f8

08023c50 <__multiply>:
 8023c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c54:	4691      	mov	r9, r2
 8023c56:	690a      	ldr	r2, [r1, #16]
 8023c58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8023c5c:	429a      	cmp	r2, r3
 8023c5e:	bfb8      	it	lt
 8023c60:	460b      	movlt	r3, r1
 8023c62:	460c      	mov	r4, r1
 8023c64:	bfbc      	itt	lt
 8023c66:	464c      	movlt	r4, r9
 8023c68:	4699      	movlt	r9, r3
 8023c6a:	6927      	ldr	r7, [r4, #16]
 8023c6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8023c70:	68a3      	ldr	r3, [r4, #8]
 8023c72:	6861      	ldr	r1, [r4, #4]
 8023c74:	eb07 060a 	add.w	r6, r7, sl
 8023c78:	42b3      	cmp	r3, r6
 8023c7a:	b085      	sub	sp, #20
 8023c7c:	bfb8      	it	lt
 8023c7e:	3101      	addlt	r1, #1
 8023c80:	f7ff fed8 	bl	8023a34 <_Balloc>
 8023c84:	b930      	cbnz	r0, 8023c94 <__multiply+0x44>
 8023c86:	4602      	mov	r2, r0
 8023c88:	4b44      	ldr	r3, [pc, #272]	; (8023d9c <__multiply+0x14c>)
 8023c8a:	4845      	ldr	r0, [pc, #276]	; (8023da0 <__multiply+0x150>)
 8023c8c:	f240 115d 	movw	r1, #349	; 0x15d
 8023c90:	f000 fbf4 	bl	802447c <__assert_func>
 8023c94:	f100 0514 	add.w	r5, r0, #20
 8023c98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8023c9c:	462b      	mov	r3, r5
 8023c9e:	2200      	movs	r2, #0
 8023ca0:	4543      	cmp	r3, r8
 8023ca2:	d321      	bcc.n	8023ce8 <__multiply+0x98>
 8023ca4:	f104 0314 	add.w	r3, r4, #20
 8023ca8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8023cac:	f109 0314 	add.w	r3, r9, #20
 8023cb0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8023cb4:	9202      	str	r2, [sp, #8]
 8023cb6:	1b3a      	subs	r2, r7, r4
 8023cb8:	3a15      	subs	r2, #21
 8023cba:	f022 0203 	bic.w	r2, r2, #3
 8023cbe:	3204      	adds	r2, #4
 8023cc0:	f104 0115 	add.w	r1, r4, #21
 8023cc4:	428f      	cmp	r7, r1
 8023cc6:	bf38      	it	cc
 8023cc8:	2204      	movcc	r2, #4
 8023cca:	9201      	str	r2, [sp, #4]
 8023ccc:	9a02      	ldr	r2, [sp, #8]
 8023cce:	9303      	str	r3, [sp, #12]
 8023cd0:	429a      	cmp	r2, r3
 8023cd2:	d80c      	bhi.n	8023cee <__multiply+0x9e>
 8023cd4:	2e00      	cmp	r6, #0
 8023cd6:	dd03      	ble.n	8023ce0 <__multiply+0x90>
 8023cd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8023cdc:	2b00      	cmp	r3, #0
 8023cde:	d05a      	beq.n	8023d96 <__multiply+0x146>
 8023ce0:	6106      	str	r6, [r0, #16]
 8023ce2:	b005      	add	sp, #20
 8023ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ce8:	f843 2b04 	str.w	r2, [r3], #4
 8023cec:	e7d8      	b.n	8023ca0 <__multiply+0x50>
 8023cee:	f8b3 a000 	ldrh.w	sl, [r3]
 8023cf2:	f1ba 0f00 	cmp.w	sl, #0
 8023cf6:	d024      	beq.n	8023d42 <__multiply+0xf2>
 8023cf8:	f104 0e14 	add.w	lr, r4, #20
 8023cfc:	46a9      	mov	r9, r5
 8023cfe:	f04f 0c00 	mov.w	ip, #0
 8023d02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8023d06:	f8d9 1000 	ldr.w	r1, [r9]
 8023d0a:	fa1f fb82 	uxth.w	fp, r2
 8023d0e:	b289      	uxth	r1, r1
 8023d10:	fb0a 110b 	mla	r1, sl, fp, r1
 8023d14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8023d18:	f8d9 2000 	ldr.w	r2, [r9]
 8023d1c:	4461      	add	r1, ip
 8023d1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8023d22:	fb0a c20b 	mla	r2, sl, fp, ip
 8023d26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8023d2a:	b289      	uxth	r1, r1
 8023d2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8023d30:	4577      	cmp	r7, lr
 8023d32:	f849 1b04 	str.w	r1, [r9], #4
 8023d36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8023d3a:	d8e2      	bhi.n	8023d02 <__multiply+0xb2>
 8023d3c:	9a01      	ldr	r2, [sp, #4]
 8023d3e:	f845 c002 	str.w	ip, [r5, r2]
 8023d42:	9a03      	ldr	r2, [sp, #12]
 8023d44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8023d48:	3304      	adds	r3, #4
 8023d4a:	f1b9 0f00 	cmp.w	r9, #0
 8023d4e:	d020      	beq.n	8023d92 <__multiply+0x142>
 8023d50:	6829      	ldr	r1, [r5, #0]
 8023d52:	f104 0c14 	add.w	ip, r4, #20
 8023d56:	46ae      	mov	lr, r5
 8023d58:	f04f 0a00 	mov.w	sl, #0
 8023d5c:	f8bc b000 	ldrh.w	fp, [ip]
 8023d60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8023d64:	fb09 220b 	mla	r2, r9, fp, r2
 8023d68:	4492      	add	sl, r2
 8023d6a:	b289      	uxth	r1, r1
 8023d6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8023d70:	f84e 1b04 	str.w	r1, [lr], #4
 8023d74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8023d78:	f8be 1000 	ldrh.w	r1, [lr]
 8023d7c:	0c12      	lsrs	r2, r2, #16
 8023d7e:	fb09 1102 	mla	r1, r9, r2, r1
 8023d82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8023d86:	4567      	cmp	r7, ip
 8023d88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8023d8c:	d8e6      	bhi.n	8023d5c <__multiply+0x10c>
 8023d8e:	9a01      	ldr	r2, [sp, #4]
 8023d90:	50a9      	str	r1, [r5, r2]
 8023d92:	3504      	adds	r5, #4
 8023d94:	e79a      	b.n	8023ccc <__multiply+0x7c>
 8023d96:	3e01      	subs	r6, #1
 8023d98:	e79c      	b.n	8023cd4 <__multiply+0x84>
 8023d9a:	bf00      	nop
 8023d9c:	080638e7 	.word	0x080638e7
 8023da0:	080638f8 	.word	0x080638f8

08023da4 <__pow5mult>:
 8023da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023da8:	4615      	mov	r5, r2
 8023daa:	f012 0203 	ands.w	r2, r2, #3
 8023dae:	4606      	mov	r6, r0
 8023db0:	460f      	mov	r7, r1
 8023db2:	d007      	beq.n	8023dc4 <__pow5mult+0x20>
 8023db4:	4c25      	ldr	r4, [pc, #148]	; (8023e4c <__pow5mult+0xa8>)
 8023db6:	3a01      	subs	r2, #1
 8023db8:	2300      	movs	r3, #0
 8023dba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023dbe:	f7ff fe9b 	bl	8023af8 <__multadd>
 8023dc2:	4607      	mov	r7, r0
 8023dc4:	10ad      	asrs	r5, r5, #2
 8023dc6:	d03d      	beq.n	8023e44 <__pow5mult+0xa0>
 8023dc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023dca:	b97c      	cbnz	r4, 8023dec <__pow5mult+0x48>
 8023dcc:	2010      	movs	r0, #16
 8023dce:	f7fe fa4d 	bl	802226c <malloc>
 8023dd2:	4602      	mov	r2, r0
 8023dd4:	6270      	str	r0, [r6, #36]	; 0x24
 8023dd6:	b928      	cbnz	r0, 8023de4 <__pow5mult+0x40>
 8023dd8:	4b1d      	ldr	r3, [pc, #116]	; (8023e50 <__pow5mult+0xac>)
 8023dda:	481e      	ldr	r0, [pc, #120]	; (8023e54 <__pow5mult+0xb0>)
 8023ddc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8023de0:	f000 fb4c 	bl	802447c <__assert_func>
 8023de4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023de8:	6004      	str	r4, [r0, #0]
 8023dea:	60c4      	str	r4, [r0, #12]
 8023dec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8023df0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023df4:	b94c      	cbnz	r4, 8023e0a <__pow5mult+0x66>
 8023df6:	f240 2171 	movw	r1, #625	; 0x271
 8023dfa:	4630      	mov	r0, r6
 8023dfc:	f7ff ff12 	bl	8023c24 <__i2b>
 8023e00:	2300      	movs	r3, #0
 8023e02:	f8c8 0008 	str.w	r0, [r8, #8]
 8023e06:	4604      	mov	r4, r0
 8023e08:	6003      	str	r3, [r0, #0]
 8023e0a:	f04f 0900 	mov.w	r9, #0
 8023e0e:	07eb      	lsls	r3, r5, #31
 8023e10:	d50a      	bpl.n	8023e28 <__pow5mult+0x84>
 8023e12:	4639      	mov	r1, r7
 8023e14:	4622      	mov	r2, r4
 8023e16:	4630      	mov	r0, r6
 8023e18:	f7ff ff1a 	bl	8023c50 <__multiply>
 8023e1c:	4639      	mov	r1, r7
 8023e1e:	4680      	mov	r8, r0
 8023e20:	4630      	mov	r0, r6
 8023e22:	f7ff fe47 	bl	8023ab4 <_Bfree>
 8023e26:	4647      	mov	r7, r8
 8023e28:	106d      	asrs	r5, r5, #1
 8023e2a:	d00b      	beq.n	8023e44 <__pow5mult+0xa0>
 8023e2c:	6820      	ldr	r0, [r4, #0]
 8023e2e:	b938      	cbnz	r0, 8023e40 <__pow5mult+0x9c>
 8023e30:	4622      	mov	r2, r4
 8023e32:	4621      	mov	r1, r4
 8023e34:	4630      	mov	r0, r6
 8023e36:	f7ff ff0b 	bl	8023c50 <__multiply>
 8023e3a:	6020      	str	r0, [r4, #0]
 8023e3c:	f8c0 9000 	str.w	r9, [r0]
 8023e40:	4604      	mov	r4, r0
 8023e42:	e7e4      	b.n	8023e0e <__pow5mult+0x6a>
 8023e44:	4638      	mov	r0, r7
 8023e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e4a:	bf00      	nop
 8023e4c:	08063a48 	.word	0x08063a48
 8023e50:	08063875 	.word	0x08063875
 8023e54:	080638f8 	.word	0x080638f8

08023e58 <__lshift>:
 8023e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023e5c:	460c      	mov	r4, r1
 8023e5e:	6849      	ldr	r1, [r1, #4]
 8023e60:	6923      	ldr	r3, [r4, #16]
 8023e62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8023e66:	68a3      	ldr	r3, [r4, #8]
 8023e68:	4607      	mov	r7, r0
 8023e6a:	4691      	mov	r9, r2
 8023e6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023e70:	f108 0601 	add.w	r6, r8, #1
 8023e74:	42b3      	cmp	r3, r6
 8023e76:	db0b      	blt.n	8023e90 <__lshift+0x38>
 8023e78:	4638      	mov	r0, r7
 8023e7a:	f7ff fddb 	bl	8023a34 <_Balloc>
 8023e7e:	4605      	mov	r5, r0
 8023e80:	b948      	cbnz	r0, 8023e96 <__lshift+0x3e>
 8023e82:	4602      	mov	r2, r0
 8023e84:	4b2a      	ldr	r3, [pc, #168]	; (8023f30 <__lshift+0xd8>)
 8023e86:	482b      	ldr	r0, [pc, #172]	; (8023f34 <__lshift+0xdc>)
 8023e88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8023e8c:	f000 faf6 	bl	802447c <__assert_func>
 8023e90:	3101      	adds	r1, #1
 8023e92:	005b      	lsls	r3, r3, #1
 8023e94:	e7ee      	b.n	8023e74 <__lshift+0x1c>
 8023e96:	2300      	movs	r3, #0
 8023e98:	f100 0114 	add.w	r1, r0, #20
 8023e9c:	f100 0210 	add.w	r2, r0, #16
 8023ea0:	4618      	mov	r0, r3
 8023ea2:	4553      	cmp	r3, sl
 8023ea4:	db37      	blt.n	8023f16 <__lshift+0xbe>
 8023ea6:	6920      	ldr	r0, [r4, #16]
 8023ea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023eac:	f104 0314 	add.w	r3, r4, #20
 8023eb0:	f019 091f 	ands.w	r9, r9, #31
 8023eb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023eb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8023ebc:	d02f      	beq.n	8023f1e <__lshift+0xc6>
 8023ebe:	f1c9 0e20 	rsb	lr, r9, #32
 8023ec2:	468a      	mov	sl, r1
 8023ec4:	f04f 0c00 	mov.w	ip, #0
 8023ec8:	681a      	ldr	r2, [r3, #0]
 8023eca:	fa02 f209 	lsl.w	r2, r2, r9
 8023ece:	ea42 020c 	orr.w	r2, r2, ip
 8023ed2:	f84a 2b04 	str.w	r2, [sl], #4
 8023ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8023eda:	4298      	cmp	r0, r3
 8023edc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8023ee0:	d8f2      	bhi.n	8023ec8 <__lshift+0x70>
 8023ee2:	1b03      	subs	r3, r0, r4
 8023ee4:	3b15      	subs	r3, #21
 8023ee6:	f023 0303 	bic.w	r3, r3, #3
 8023eea:	3304      	adds	r3, #4
 8023eec:	f104 0215 	add.w	r2, r4, #21
 8023ef0:	4290      	cmp	r0, r2
 8023ef2:	bf38      	it	cc
 8023ef4:	2304      	movcc	r3, #4
 8023ef6:	f841 c003 	str.w	ip, [r1, r3]
 8023efa:	f1bc 0f00 	cmp.w	ip, #0
 8023efe:	d001      	beq.n	8023f04 <__lshift+0xac>
 8023f00:	f108 0602 	add.w	r6, r8, #2
 8023f04:	3e01      	subs	r6, #1
 8023f06:	4638      	mov	r0, r7
 8023f08:	612e      	str	r6, [r5, #16]
 8023f0a:	4621      	mov	r1, r4
 8023f0c:	f7ff fdd2 	bl	8023ab4 <_Bfree>
 8023f10:	4628      	mov	r0, r5
 8023f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023f16:	f842 0f04 	str.w	r0, [r2, #4]!
 8023f1a:	3301      	adds	r3, #1
 8023f1c:	e7c1      	b.n	8023ea2 <__lshift+0x4a>
 8023f1e:	3904      	subs	r1, #4
 8023f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8023f24:	f841 2f04 	str.w	r2, [r1, #4]!
 8023f28:	4298      	cmp	r0, r3
 8023f2a:	d8f9      	bhi.n	8023f20 <__lshift+0xc8>
 8023f2c:	e7ea      	b.n	8023f04 <__lshift+0xac>
 8023f2e:	bf00      	nop
 8023f30:	080638e7 	.word	0x080638e7
 8023f34:	080638f8 	.word	0x080638f8

08023f38 <__mcmp>:
 8023f38:	b530      	push	{r4, r5, lr}
 8023f3a:	6902      	ldr	r2, [r0, #16]
 8023f3c:	690c      	ldr	r4, [r1, #16]
 8023f3e:	1b12      	subs	r2, r2, r4
 8023f40:	d10e      	bne.n	8023f60 <__mcmp+0x28>
 8023f42:	f100 0314 	add.w	r3, r0, #20
 8023f46:	3114      	adds	r1, #20
 8023f48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8023f4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8023f50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8023f54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8023f58:	42a5      	cmp	r5, r4
 8023f5a:	d003      	beq.n	8023f64 <__mcmp+0x2c>
 8023f5c:	d305      	bcc.n	8023f6a <__mcmp+0x32>
 8023f5e:	2201      	movs	r2, #1
 8023f60:	4610      	mov	r0, r2
 8023f62:	bd30      	pop	{r4, r5, pc}
 8023f64:	4283      	cmp	r3, r0
 8023f66:	d3f3      	bcc.n	8023f50 <__mcmp+0x18>
 8023f68:	e7fa      	b.n	8023f60 <__mcmp+0x28>
 8023f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8023f6e:	e7f7      	b.n	8023f60 <__mcmp+0x28>

08023f70 <__mdiff>:
 8023f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f74:	460c      	mov	r4, r1
 8023f76:	4606      	mov	r6, r0
 8023f78:	4611      	mov	r1, r2
 8023f7a:	4620      	mov	r0, r4
 8023f7c:	4690      	mov	r8, r2
 8023f7e:	f7ff ffdb 	bl	8023f38 <__mcmp>
 8023f82:	1e05      	subs	r5, r0, #0
 8023f84:	d110      	bne.n	8023fa8 <__mdiff+0x38>
 8023f86:	4629      	mov	r1, r5
 8023f88:	4630      	mov	r0, r6
 8023f8a:	f7ff fd53 	bl	8023a34 <_Balloc>
 8023f8e:	b930      	cbnz	r0, 8023f9e <__mdiff+0x2e>
 8023f90:	4b3a      	ldr	r3, [pc, #232]	; (802407c <__mdiff+0x10c>)
 8023f92:	4602      	mov	r2, r0
 8023f94:	f240 2132 	movw	r1, #562	; 0x232
 8023f98:	4839      	ldr	r0, [pc, #228]	; (8024080 <__mdiff+0x110>)
 8023f9a:	f000 fa6f 	bl	802447c <__assert_func>
 8023f9e:	2301      	movs	r3, #1
 8023fa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fa8:	bfa4      	itt	ge
 8023faa:	4643      	movge	r3, r8
 8023fac:	46a0      	movge	r8, r4
 8023fae:	4630      	mov	r0, r6
 8023fb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023fb4:	bfa6      	itte	ge
 8023fb6:	461c      	movge	r4, r3
 8023fb8:	2500      	movge	r5, #0
 8023fba:	2501      	movlt	r5, #1
 8023fbc:	f7ff fd3a 	bl	8023a34 <_Balloc>
 8023fc0:	b920      	cbnz	r0, 8023fcc <__mdiff+0x5c>
 8023fc2:	4b2e      	ldr	r3, [pc, #184]	; (802407c <__mdiff+0x10c>)
 8023fc4:	4602      	mov	r2, r0
 8023fc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8023fca:	e7e5      	b.n	8023f98 <__mdiff+0x28>
 8023fcc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8023fd0:	6926      	ldr	r6, [r4, #16]
 8023fd2:	60c5      	str	r5, [r0, #12]
 8023fd4:	f104 0914 	add.w	r9, r4, #20
 8023fd8:	f108 0514 	add.w	r5, r8, #20
 8023fdc:	f100 0e14 	add.w	lr, r0, #20
 8023fe0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8023fe4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8023fe8:	f108 0210 	add.w	r2, r8, #16
 8023fec:	46f2      	mov	sl, lr
 8023fee:	2100      	movs	r1, #0
 8023ff0:	f859 3b04 	ldr.w	r3, [r9], #4
 8023ff4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8023ff8:	fa1f f883 	uxth.w	r8, r3
 8023ffc:	fa11 f18b 	uxtah	r1, r1, fp
 8024000:	0c1b      	lsrs	r3, r3, #16
 8024002:	eba1 0808 	sub.w	r8, r1, r8
 8024006:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802400a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802400e:	fa1f f888 	uxth.w	r8, r8
 8024012:	1419      	asrs	r1, r3, #16
 8024014:	454e      	cmp	r6, r9
 8024016:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802401a:	f84a 3b04 	str.w	r3, [sl], #4
 802401e:	d8e7      	bhi.n	8023ff0 <__mdiff+0x80>
 8024020:	1b33      	subs	r3, r6, r4
 8024022:	3b15      	subs	r3, #21
 8024024:	f023 0303 	bic.w	r3, r3, #3
 8024028:	3304      	adds	r3, #4
 802402a:	3415      	adds	r4, #21
 802402c:	42a6      	cmp	r6, r4
 802402e:	bf38      	it	cc
 8024030:	2304      	movcc	r3, #4
 8024032:	441d      	add	r5, r3
 8024034:	4473      	add	r3, lr
 8024036:	469e      	mov	lr, r3
 8024038:	462e      	mov	r6, r5
 802403a:	4566      	cmp	r6, ip
 802403c:	d30e      	bcc.n	802405c <__mdiff+0xec>
 802403e:	f10c 0203 	add.w	r2, ip, #3
 8024042:	1b52      	subs	r2, r2, r5
 8024044:	f022 0203 	bic.w	r2, r2, #3
 8024048:	3d03      	subs	r5, #3
 802404a:	45ac      	cmp	ip, r5
 802404c:	bf38      	it	cc
 802404e:	2200      	movcc	r2, #0
 8024050:	441a      	add	r2, r3
 8024052:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8024056:	b17b      	cbz	r3, 8024078 <__mdiff+0x108>
 8024058:	6107      	str	r7, [r0, #16]
 802405a:	e7a3      	b.n	8023fa4 <__mdiff+0x34>
 802405c:	f856 8b04 	ldr.w	r8, [r6], #4
 8024060:	fa11 f288 	uxtah	r2, r1, r8
 8024064:	1414      	asrs	r4, r2, #16
 8024066:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802406a:	b292      	uxth	r2, r2
 802406c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8024070:	f84e 2b04 	str.w	r2, [lr], #4
 8024074:	1421      	asrs	r1, r4, #16
 8024076:	e7e0      	b.n	802403a <__mdiff+0xca>
 8024078:	3f01      	subs	r7, #1
 802407a:	e7ea      	b.n	8024052 <__mdiff+0xe2>
 802407c:	080638e7 	.word	0x080638e7
 8024080:	080638f8 	.word	0x080638f8

08024084 <__d2b>:
 8024084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024088:	4689      	mov	r9, r1
 802408a:	2101      	movs	r1, #1
 802408c:	ec57 6b10 	vmov	r6, r7, d0
 8024090:	4690      	mov	r8, r2
 8024092:	f7ff fccf 	bl	8023a34 <_Balloc>
 8024096:	4604      	mov	r4, r0
 8024098:	b930      	cbnz	r0, 80240a8 <__d2b+0x24>
 802409a:	4602      	mov	r2, r0
 802409c:	4b25      	ldr	r3, [pc, #148]	; (8024134 <__d2b+0xb0>)
 802409e:	4826      	ldr	r0, [pc, #152]	; (8024138 <__d2b+0xb4>)
 80240a0:	f240 310a 	movw	r1, #778	; 0x30a
 80240a4:	f000 f9ea 	bl	802447c <__assert_func>
 80240a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80240ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80240b0:	bb35      	cbnz	r5, 8024100 <__d2b+0x7c>
 80240b2:	2e00      	cmp	r6, #0
 80240b4:	9301      	str	r3, [sp, #4]
 80240b6:	d028      	beq.n	802410a <__d2b+0x86>
 80240b8:	4668      	mov	r0, sp
 80240ba:	9600      	str	r6, [sp, #0]
 80240bc:	f7ff fd82 	bl	8023bc4 <__lo0bits>
 80240c0:	9900      	ldr	r1, [sp, #0]
 80240c2:	b300      	cbz	r0, 8024106 <__d2b+0x82>
 80240c4:	9a01      	ldr	r2, [sp, #4]
 80240c6:	f1c0 0320 	rsb	r3, r0, #32
 80240ca:	fa02 f303 	lsl.w	r3, r2, r3
 80240ce:	430b      	orrs	r3, r1
 80240d0:	40c2      	lsrs	r2, r0
 80240d2:	6163      	str	r3, [r4, #20]
 80240d4:	9201      	str	r2, [sp, #4]
 80240d6:	9b01      	ldr	r3, [sp, #4]
 80240d8:	61a3      	str	r3, [r4, #24]
 80240da:	2b00      	cmp	r3, #0
 80240dc:	bf14      	ite	ne
 80240de:	2202      	movne	r2, #2
 80240e0:	2201      	moveq	r2, #1
 80240e2:	6122      	str	r2, [r4, #16]
 80240e4:	b1d5      	cbz	r5, 802411c <__d2b+0x98>
 80240e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80240ea:	4405      	add	r5, r0
 80240ec:	f8c9 5000 	str.w	r5, [r9]
 80240f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80240f4:	f8c8 0000 	str.w	r0, [r8]
 80240f8:	4620      	mov	r0, r4
 80240fa:	b003      	add	sp, #12
 80240fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024104:	e7d5      	b.n	80240b2 <__d2b+0x2e>
 8024106:	6161      	str	r1, [r4, #20]
 8024108:	e7e5      	b.n	80240d6 <__d2b+0x52>
 802410a:	a801      	add	r0, sp, #4
 802410c:	f7ff fd5a 	bl	8023bc4 <__lo0bits>
 8024110:	9b01      	ldr	r3, [sp, #4]
 8024112:	6163      	str	r3, [r4, #20]
 8024114:	2201      	movs	r2, #1
 8024116:	6122      	str	r2, [r4, #16]
 8024118:	3020      	adds	r0, #32
 802411a:	e7e3      	b.n	80240e4 <__d2b+0x60>
 802411c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8024120:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8024124:	f8c9 0000 	str.w	r0, [r9]
 8024128:	6918      	ldr	r0, [r3, #16]
 802412a:	f7ff fd2b 	bl	8023b84 <__hi0bits>
 802412e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8024132:	e7df      	b.n	80240f4 <__d2b+0x70>
 8024134:	080638e7 	.word	0x080638e7
 8024138:	080638f8 	.word	0x080638f8

0802413c <_calloc_r>:
 802413c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802413e:	fba1 2402 	umull	r2, r4, r1, r2
 8024142:	b94c      	cbnz	r4, 8024158 <_calloc_r+0x1c>
 8024144:	4611      	mov	r1, r2
 8024146:	9201      	str	r2, [sp, #4]
 8024148:	f7fe f93c 	bl	80223c4 <_malloc_r>
 802414c:	9a01      	ldr	r2, [sp, #4]
 802414e:	4605      	mov	r5, r0
 8024150:	b930      	cbnz	r0, 8024160 <_calloc_r+0x24>
 8024152:	4628      	mov	r0, r5
 8024154:	b003      	add	sp, #12
 8024156:	bd30      	pop	{r4, r5, pc}
 8024158:	220c      	movs	r2, #12
 802415a:	6002      	str	r2, [r0, #0]
 802415c:	2500      	movs	r5, #0
 802415e:	e7f8      	b.n	8024152 <_calloc_r+0x16>
 8024160:	4621      	mov	r1, r4
 8024162:	f7fe f8bb 	bl	80222dc <memset>
 8024166:	e7f4      	b.n	8024152 <_calloc_r+0x16>

08024168 <_realloc_r>:
 8024168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802416c:	4680      	mov	r8, r0
 802416e:	4614      	mov	r4, r2
 8024170:	460e      	mov	r6, r1
 8024172:	b921      	cbnz	r1, 802417e <_realloc_r+0x16>
 8024174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024178:	4611      	mov	r1, r2
 802417a:	f7fe b923 	b.w	80223c4 <_malloc_r>
 802417e:	b92a      	cbnz	r2, 802418c <_realloc_r+0x24>
 8024180:	f7fe f8b4 	bl	80222ec <_free_r>
 8024184:	4625      	mov	r5, r4
 8024186:	4628      	mov	r0, r5
 8024188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802418c:	f000 f9bb 	bl	8024506 <_malloc_usable_size_r>
 8024190:	4284      	cmp	r4, r0
 8024192:	4607      	mov	r7, r0
 8024194:	d802      	bhi.n	802419c <_realloc_r+0x34>
 8024196:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802419a:	d812      	bhi.n	80241c2 <_realloc_r+0x5a>
 802419c:	4621      	mov	r1, r4
 802419e:	4640      	mov	r0, r8
 80241a0:	f7fe f910 	bl	80223c4 <_malloc_r>
 80241a4:	4605      	mov	r5, r0
 80241a6:	2800      	cmp	r0, #0
 80241a8:	d0ed      	beq.n	8024186 <_realloc_r+0x1e>
 80241aa:	42bc      	cmp	r4, r7
 80241ac:	4622      	mov	r2, r4
 80241ae:	4631      	mov	r1, r6
 80241b0:	bf28      	it	cs
 80241b2:	463a      	movcs	r2, r7
 80241b4:	f7fe f86a 	bl	802228c <memcpy>
 80241b8:	4631      	mov	r1, r6
 80241ba:	4640      	mov	r0, r8
 80241bc:	f7fe f896 	bl	80222ec <_free_r>
 80241c0:	e7e1      	b.n	8024186 <_realloc_r+0x1e>
 80241c2:	4635      	mov	r5, r6
 80241c4:	e7df      	b.n	8024186 <_realloc_r+0x1e>

080241c6 <__ssputs_r>:
 80241c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80241ca:	688e      	ldr	r6, [r1, #8]
 80241cc:	429e      	cmp	r6, r3
 80241ce:	4682      	mov	sl, r0
 80241d0:	460c      	mov	r4, r1
 80241d2:	4690      	mov	r8, r2
 80241d4:	461f      	mov	r7, r3
 80241d6:	d838      	bhi.n	802424a <__ssputs_r+0x84>
 80241d8:	898a      	ldrh	r2, [r1, #12]
 80241da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80241de:	d032      	beq.n	8024246 <__ssputs_r+0x80>
 80241e0:	6825      	ldr	r5, [r4, #0]
 80241e2:	6909      	ldr	r1, [r1, #16]
 80241e4:	eba5 0901 	sub.w	r9, r5, r1
 80241e8:	6965      	ldr	r5, [r4, #20]
 80241ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80241ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80241f2:	3301      	adds	r3, #1
 80241f4:	444b      	add	r3, r9
 80241f6:	106d      	asrs	r5, r5, #1
 80241f8:	429d      	cmp	r5, r3
 80241fa:	bf38      	it	cc
 80241fc:	461d      	movcc	r5, r3
 80241fe:	0553      	lsls	r3, r2, #21
 8024200:	d531      	bpl.n	8024266 <__ssputs_r+0xa0>
 8024202:	4629      	mov	r1, r5
 8024204:	f7fe f8de 	bl	80223c4 <_malloc_r>
 8024208:	4606      	mov	r6, r0
 802420a:	b950      	cbnz	r0, 8024222 <__ssputs_r+0x5c>
 802420c:	230c      	movs	r3, #12
 802420e:	f8ca 3000 	str.w	r3, [sl]
 8024212:	89a3      	ldrh	r3, [r4, #12]
 8024214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024218:	81a3      	strh	r3, [r4, #12]
 802421a:	f04f 30ff 	mov.w	r0, #4294967295
 802421e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024222:	6921      	ldr	r1, [r4, #16]
 8024224:	464a      	mov	r2, r9
 8024226:	f7fe f831 	bl	802228c <memcpy>
 802422a:	89a3      	ldrh	r3, [r4, #12]
 802422c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8024230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024234:	81a3      	strh	r3, [r4, #12]
 8024236:	6126      	str	r6, [r4, #16]
 8024238:	6165      	str	r5, [r4, #20]
 802423a:	444e      	add	r6, r9
 802423c:	eba5 0509 	sub.w	r5, r5, r9
 8024240:	6026      	str	r6, [r4, #0]
 8024242:	60a5      	str	r5, [r4, #8]
 8024244:	463e      	mov	r6, r7
 8024246:	42be      	cmp	r6, r7
 8024248:	d900      	bls.n	802424c <__ssputs_r+0x86>
 802424a:	463e      	mov	r6, r7
 802424c:	6820      	ldr	r0, [r4, #0]
 802424e:	4632      	mov	r2, r6
 8024250:	4641      	mov	r1, r8
 8024252:	f7fe f829 	bl	80222a8 <memmove>
 8024256:	68a3      	ldr	r3, [r4, #8]
 8024258:	1b9b      	subs	r3, r3, r6
 802425a:	60a3      	str	r3, [r4, #8]
 802425c:	6823      	ldr	r3, [r4, #0]
 802425e:	4433      	add	r3, r6
 8024260:	6023      	str	r3, [r4, #0]
 8024262:	2000      	movs	r0, #0
 8024264:	e7db      	b.n	802421e <__ssputs_r+0x58>
 8024266:	462a      	mov	r2, r5
 8024268:	f7ff ff7e 	bl	8024168 <_realloc_r>
 802426c:	4606      	mov	r6, r0
 802426e:	2800      	cmp	r0, #0
 8024270:	d1e1      	bne.n	8024236 <__ssputs_r+0x70>
 8024272:	6921      	ldr	r1, [r4, #16]
 8024274:	4650      	mov	r0, sl
 8024276:	f7fe f839 	bl	80222ec <_free_r>
 802427a:	e7c7      	b.n	802420c <__ssputs_r+0x46>

0802427c <_svfiprintf_r>:
 802427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024280:	4698      	mov	r8, r3
 8024282:	898b      	ldrh	r3, [r1, #12]
 8024284:	061b      	lsls	r3, r3, #24
 8024286:	b09d      	sub	sp, #116	; 0x74
 8024288:	4607      	mov	r7, r0
 802428a:	460d      	mov	r5, r1
 802428c:	4614      	mov	r4, r2
 802428e:	d50e      	bpl.n	80242ae <_svfiprintf_r+0x32>
 8024290:	690b      	ldr	r3, [r1, #16]
 8024292:	b963      	cbnz	r3, 80242ae <_svfiprintf_r+0x32>
 8024294:	2140      	movs	r1, #64	; 0x40
 8024296:	f7fe f895 	bl	80223c4 <_malloc_r>
 802429a:	6028      	str	r0, [r5, #0]
 802429c:	6128      	str	r0, [r5, #16]
 802429e:	b920      	cbnz	r0, 80242aa <_svfiprintf_r+0x2e>
 80242a0:	230c      	movs	r3, #12
 80242a2:	603b      	str	r3, [r7, #0]
 80242a4:	f04f 30ff 	mov.w	r0, #4294967295
 80242a8:	e0d1      	b.n	802444e <_svfiprintf_r+0x1d2>
 80242aa:	2340      	movs	r3, #64	; 0x40
 80242ac:	616b      	str	r3, [r5, #20]
 80242ae:	2300      	movs	r3, #0
 80242b0:	9309      	str	r3, [sp, #36]	; 0x24
 80242b2:	2320      	movs	r3, #32
 80242b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80242b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80242bc:	2330      	movs	r3, #48	; 0x30
 80242be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024468 <_svfiprintf_r+0x1ec>
 80242c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80242c6:	f04f 0901 	mov.w	r9, #1
 80242ca:	4623      	mov	r3, r4
 80242cc:	469a      	mov	sl, r3
 80242ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80242d2:	b10a      	cbz	r2, 80242d8 <_svfiprintf_r+0x5c>
 80242d4:	2a25      	cmp	r2, #37	; 0x25
 80242d6:	d1f9      	bne.n	80242cc <_svfiprintf_r+0x50>
 80242d8:	ebba 0b04 	subs.w	fp, sl, r4
 80242dc:	d00b      	beq.n	80242f6 <_svfiprintf_r+0x7a>
 80242de:	465b      	mov	r3, fp
 80242e0:	4622      	mov	r2, r4
 80242e2:	4629      	mov	r1, r5
 80242e4:	4638      	mov	r0, r7
 80242e6:	f7ff ff6e 	bl	80241c6 <__ssputs_r>
 80242ea:	3001      	adds	r0, #1
 80242ec:	f000 80aa 	beq.w	8024444 <_svfiprintf_r+0x1c8>
 80242f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80242f2:	445a      	add	r2, fp
 80242f4:	9209      	str	r2, [sp, #36]	; 0x24
 80242f6:	f89a 3000 	ldrb.w	r3, [sl]
 80242fa:	2b00      	cmp	r3, #0
 80242fc:	f000 80a2 	beq.w	8024444 <_svfiprintf_r+0x1c8>
 8024300:	2300      	movs	r3, #0
 8024302:	f04f 32ff 	mov.w	r2, #4294967295
 8024306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802430a:	f10a 0a01 	add.w	sl, sl, #1
 802430e:	9304      	str	r3, [sp, #16]
 8024310:	9307      	str	r3, [sp, #28]
 8024312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024316:	931a      	str	r3, [sp, #104]	; 0x68
 8024318:	4654      	mov	r4, sl
 802431a:	2205      	movs	r2, #5
 802431c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024320:	4851      	ldr	r0, [pc, #324]	; (8024468 <_svfiprintf_r+0x1ec>)
 8024322:	f7db fff5 	bl	8000310 <memchr>
 8024326:	9a04      	ldr	r2, [sp, #16]
 8024328:	b9d8      	cbnz	r0, 8024362 <_svfiprintf_r+0xe6>
 802432a:	06d0      	lsls	r0, r2, #27
 802432c:	bf44      	itt	mi
 802432e:	2320      	movmi	r3, #32
 8024330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024334:	0711      	lsls	r1, r2, #28
 8024336:	bf44      	itt	mi
 8024338:	232b      	movmi	r3, #43	; 0x2b
 802433a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802433e:	f89a 3000 	ldrb.w	r3, [sl]
 8024342:	2b2a      	cmp	r3, #42	; 0x2a
 8024344:	d015      	beq.n	8024372 <_svfiprintf_r+0xf6>
 8024346:	9a07      	ldr	r2, [sp, #28]
 8024348:	4654      	mov	r4, sl
 802434a:	2000      	movs	r0, #0
 802434c:	f04f 0c0a 	mov.w	ip, #10
 8024350:	4621      	mov	r1, r4
 8024352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024356:	3b30      	subs	r3, #48	; 0x30
 8024358:	2b09      	cmp	r3, #9
 802435a:	d94e      	bls.n	80243fa <_svfiprintf_r+0x17e>
 802435c:	b1b0      	cbz	r0, 802438c <_svfiprintf_r+0x110>
 802435e:	9207      	str	r2, [sp, #28]
 8024360:	e014      	b.n	802438c <_svfiprintf_r+0x110>
 8024362:	eba0 0308 	sub.w	r3, r0, r8
 8024366:	fa09 f303 	lsl.w	r3, r9, r3
 802436a:	4313      	orrs	r3, r2
 802436c:	9304      	str	r3, [sp, #16]
 802436e:	46a2      	mov	sl, r4
 8024370:	e7d2      	b.n	8024318 <_svfiprintf_r+0x9c>
 8024372:	9b03      	ldr	r3, [sp, #12]
 8024374:	1d19      	adds	r1, r3, #4
 8024376:	681b      	ldr	r3, [r3, #0]
 8024378:	9103      	str	r1, [sp, #12]
 802437a:	2b00      	cmp	r3, #0
 802437c:	bfbb      	ittet	lt
 802437e:	425b      	neglt	r3, r3
 8024380:	f042 0202 	orrlt.w	r2, r2, #2
 8024384:	9307      	strge	r3, [sp, #28]
 8024386:	9307      	strlt	r3, [sp, #28]
 8024388:	bfb8      	it	lt
 802438a:	9204      	strlt	r2, [sp, #16]
 802438c:	7823      	ldrb	r3, [r4, #0]
 802438e:	2b2e      	cmp	r3, #46	; 0x2e
 8024390:	d10c      	bne.n	80243ac <_svfiprintf_r+0x130>
 8024392:	7863      	ldrb	r3, [r4, #1]
 8024394:	2b2a      	cmp	r3, #42	; 0x2a
 8024396:	d135      	bne.n	8024404 <_svfiprintf_r+0x188>
 8024398:	9b03      	ldr	r3, [sp, #12]
 802439a:	1d1a      	adds	r2, r3, #4
 802439c:	681b      	ldr	r3, [r3, #0]
 802439e:	9203      	str	r2, [sp, #12]
 80243a0:	2b00      	cmp	r3, #0
 80243a2:	bfb8      	it	lt
 80243a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80243a8:	3402      	adds	r4, #2
 80243aa:	9305      	str	r3, [sp, #20]
 80243ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024478 <_svfiprintf_r+0x1fc>
 80243b0:	7821      	ldrb	r1, [r4, #0]
 80243b2:	2203      	movs	r2, #3
 80243b4:	4650      	mov	r0, sl
 80243b6:	f7db ffab 	bl	8000310 <memchr>
 80243ba:	b140      	cbz	r0, 80243ce <_svfiprintf_r+0x152>
 80243bc:	2340      	movs	r3, #64	; 0x40
 80243be:	eba0 000a 	sub.w	r0, r0, sl
 80243c2:	fa03 f000 	lsl.w	r0, r3, r0
 80243c6:	9b04      	ldr	r3, [sp, #16]
 80243c8:	4303      	orrs	r3, r0
 80243ca:	3401      	adds	r4, #1
 80243cc:	9304      	str	r3, [sp, #16]
 80243ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80243d2:	4826      	ldr	r0, [pc, #152]	; (802446c <_svfiprintf_r+0x1f0>)
 80243d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80243d8:	2206      	movs	r2, #6
 80243da:	f7db ff99 	bl	8000310 <memchr>
 80243de:	2800      	cmp	r0, #0
 80243e0:	d038      	beq.n	8024454 <_svfiprintf_r+0x1d8>
 80243e2:	4b23      	ldr	r3, [pc, #140]	; (8024470 <_svfiprintf_r+0x1f4>)
 80243e4:	bb1b      	cbnz	r3, 802442e <_svfiprintf_r+0x1b2>
 80243e6:	9b03      	ldr	r3, [sp, #12]
 80243e8:	3307      	adds	r3, #7
 80243ea:	f023 0307 	bic.w	r3, r3, #7
 80243ee:	3308      	adds	r3, #8
 80243f0:	9303      	str	r3, [sp, #12]
 80243f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243f4:	4433      	add	r3, r6
 80243f6:	9309      	str	r3, [sp, #36]	; 0x24
 80243f8:	e767      	b.n	80242ca <_svfiprintf_r+0x4e>
 80243fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80243fe:	460c      	mov	r4, r1
 8024400:	2001      	movs	r0, #1
 8024402:	e7a5      	b.n	8024350 <_svfiprintf_r+0xd4>
 8024404:	2300      	movs	r3, #0
 8024406:	3401      	adds	r4, #1
 8024408:	9305      	str	r3, [sp, #20]
 802440a:	4619      	mov	r1, r3
 802440c:	f04f 0c0a 	mov.w	ip, #10
 8024410:	4620      	mov	r0, r4
 8024412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024416:	3a30      	subs	r2, #48	; 0x30
 8024418:	2a09      	cmp	r2, #9
 802441a:	d903      	bls.n	8024424 <_svfiprintf_r+0x1a8>
 802441c:	2b00      	cmp	r3, #0
 802441e:	d0c5      	beq.n	80243ac <_svfiprintf_r+0x130>
 8024420:	9105      	str	r1, [sp, #20]
 8024422:	e7c3      	b.n	80243ac <_svfiprintf_r+0x130>
 8024424:	fb0c 2101 	mla	r1, ip, r1, r2
 8024428:	4604      	mov	r4, r0
 802442a:	2301      	movs	r3, #1
 802442c:	e7f0      	b.n	8024410 <_svfiprintf_r+0x194>
 802442e:	ab03      	add	r3, sp, #12
 8024430:	9300      	str	r3, [sp, #0]
 8024432:	462a      	mov	r2, r5
 8024434:	4b0f      	ldr	r3, [pc, #60]	; (8024474 <_svfiprintf_r+0x1f8>)
 8024436:	a904      	add	r1, sp, #16
 8024438:	4638      	mov	r0, r7
 802443a:	f7fe f8c9 	bl	80225d0 <_printf_float>
 802443e:	1c42      	adds	r2, r0, #1
 8024440:	4606      	mov	r6, r0
 8024442:	d1d6      	bne.n	80243f2 <_svfiprintf_r+0x176>
 8024444:	89ab      	ldrh	r3, [r5, #12]
 8024446:	065b      	lsls	r3, r3, #25
 8024448:	f53f af2c 	bmi.w	80242a4 <_svfiprintf_r+0x28>
 802444c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802444e:	b01d      	add	sp, #116	; 0x74
 8024450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024454:	ab03      	add	r3, sp, #12
 8024456:	9300      	str	r3, [sp, #0]
 8024458:	462a      	mov	r2, r5
 802445a:	4b06      	ldr	r3, [pc, #24]	; (8024474 <_svfiprintf_r+0x1f8>)
 802445c:	a904      	add	r1, sp, #16
 802445e:	4638      	mov	r0, r7
 8024460:	f7fe fb42 	bl	8022ae8 <_printf_i>
 8024464:	e7eb      	b.n	802443e <_svfiprintf_r+0x1c2>
 8024466:	bf00      	nop
 8024468:	08063a54 	.word	0x08063a54
 802446c:	08063a5e 	.word	0x08063a5e
 8024470:	080225d1 	.word	0x080225d1
 8024474:	080241c7 	.word	0x080241c7
 8024478:	08063a5a 	.word	0x08063a5a

0802447c <__assert_func>:
 802447c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802447e:	4614      	mov	r4, r2
 8024480:	461a      	mov	r2, r3
 8024482:	4b09      	ldr	r3, [pc, #36]	; (80244a8 <__assert_func+0x2c>)
 8024484:	681b      	ldr	r3, [r3, #0]
 8024486:	4605      	mov	r5, r0
 8024488:	68d8      	ldr	r0, [r3, #12]
 802448a:	b14c      	cbz	r4, 80244a0 <__assert_func+0x24>
 802448c:	4b07      	ldr	r3, [pc, #28]	; (80244ac <__assert_func+0x30>)
 802448e:	9100      	str	r1, [sp, #0]
 8024490:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024494:	4906      	ldr	r1, [pc, #24]	; (80244b0 <__assert_func+0x34>)
 8024496:	462b      	mov	r3, r5
 8024498:	f000 f80e 	bl	80244b8 <fiprintf>
 802449c:	f000 fa62 	bl	8024964 <abort>
 80244a0:	4b04      	ldr	r3, [pc, #16]	; (80244b4 <__assert_func+0x38>)
 80244a2:	461c      	mov	r4, r3
 80244a4:	e7f3      	b.n	802448e <__assert_func+0x12>
 80244a6:	bf00      	nop
 80244a8:	20004824 	.word	0x20004824
 80244ac:	08063a65 	.word	0x08063a65
 80244b0:	08063a72 	.word	0x08063a72
 80244b4:	08063aa0 	.word	0x08063aa0

080244b8 <fiprintf>:
 80244b8:	b40e      	push	{r1, r2, r3}
 80244ba:	b503      	push	{r0, r1, lr}
 80244bc:	4601      	mov	r1, r0
 80244be:	ab03      	add	r3, sp, #12
 80244c0:	4805      	ldr	r0, [pc, #20]	; (80244d8 <fiprintf+0x20>)
 80244c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80244c6:	6800      	ldr	r0, [r0, #0]
 80244c8:	9301      	str	r3, [sp, #4]
 80244ca:	f000 f84d 	bl	8024568 <_vfiprintf_r>
 80244ce:	b002      	add	sp, #8
 80244d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80244d4:	b003      	add	sp, #12
 80244d6:	4770      	bx	lr
 80244d8:	20004824 	.word	0x20004824

080244dc <__retarget_lock_init_recursive>:
 80244dc:	4770      	bx	lr

080244de <__retarget_lock_acquire_recursive>:
 80244de:	4770      	bx	lr

080244e0 <__retarget_lock_release_recursive>:
 80244e0:	4770      	bx	lr

080244e2 <__ascii_mbtowc>:
 80244e2:	b082      	sub	sp, #8
 80244e4:	b901      	cbnz	r1, 80244e8 <__ascii_mbtowc+0x6>
 80244e6:	a901      	add	r1, sp, #4
 80244e8:	b142      	cbz	r2, 80244fc <__ascii_mbtowc+0x1a>
 80244ea:	b14b      	cbz	r3, 8024500 <__ascii_mbtowc+0x1e>
 80244ec:	7813      	ldrb	r3, [r2, #0]
 80244ee:	600b      	str	r3, [r1, #0]
 80244f0:	7812      	ldrb	r2, [r2, #0]
 80244f2:	1e10      	subs	r0, r2, #0
 80244f4:	bf18      	it	ne
 80244f6:	2001      	movne	r0, #1
 80244f8:	b002      	add	sp, #8
 80244fa:	4770      	bx	lr
 80244fc:	4610      	mov	r0, r2
 80244fe:	e7fb      	b.n	80244f8 <__ascii_mbtowc+0x16>
 8024500:	f06f 0001 	mvn.w	r0, #1
 8024504:	e7f8      	b.n	80244f8 <__ascii_mbtowc+0x16>

08024506 <_malloc_usable_size_r>:
 8024506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802450a:	1f18      	subs	r0, r3, #4
 802450c:	2b00      	cmp	r3, #0
 802450e:	bfbc      	itt	lt
 8024510:	580b      	ldrlt	r3, [r1, r0]
 8024512:	18c0      	addlt	r0, r0, r3
 8024514:	4770      	bx	lr

08024516 <__sfputc_r>:
 8024516:	6893      	ldr	r3, [r2, #8]
 8024518:	3b01      	subs	r3, #1
 802451a:	2b00      	cmp	r3, #0
 802451c:	b410      	push	{r4}
 802451e:	6093      	str	r3, [r2, #8]
 8024520:	da08      	bge.n	8024534 <__sfputc_r+0x1e>
 8024522:	6994      	ldr	r4, [r2, #24]
 8024524:	42a3      	cmp	r3, r4
 8024526:	db01      	blt.n	802452c <__sfputc_r+0x16>
 8024528:	290a      	cmp	r1, #10
 802452a:	d103      	bne.n	8024534 <__sfputc_r+0x1e>
 802452c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024530:	f000 b94a 	b.w	80247c8 <__swbuf_r>
 8024534:	6813      	ldr	r3, [r2, #0]
 8024536:	1c58      	adds	r0, r3, #1
 8024538:	6010      	str	r0, [r2, #0]
 802453a:	7019      	strb	r1, [r3, #0]
 802453c:	4608      	mov	r0, r1
 802453e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024542:	4770      	bx	lr

08024544 <__sfputs_r>:
 8024544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024546:	4606      	mov	r6, r0
 8024548:	460f      	mov	r7, r1
 802454a:	4614      	mov	r4, r2
 802454c:	18d5      	adds	r5, r2, r3
 802454e:	42ac      	cmp	r4, r5
 8024550:	d101      	bne.n	8024556 <__sfputs_r+0x12>
 8024552:	2000      	movs	r0, #0
 8024554:	e007      	b.n	8024566 <__sfputs_r+0x22>
 8024556:	f814 1b01 	ldrb.w	r1, [r4], #1
 802455a:	463a      	mov	r2, r7
 802455c:	4630      	mov	r0, r6
 802455e:	f7ff ffda 	bl	8024516 <__sfputc_r>
 8024562:	1c43      	adds	r3, r0, #1
 8024564:	d1f3      	bne.n	802454e <__sfputs_r+0xa>
 8024566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024568 <_vfiprintf_r>:
 8024568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802456c:	460d      	mov	r5, r1
 802456e:	b09d      	sub	sp, #116	; 0x74
 8024570:	4614      	mov	r4, r2
 8024572:	4698      	mov	r8, r3
 8024574:	4606      	mov	r6, r0
 8024576:	b118      	cbz	r0, 8024580 <_vfiprintf_r+0x18>
 8024578:	6983      	ldr	r3, [r0, #24]
 802457a:	b90b      	cbnz	r3, 8024580 <_vfiprintf_r+0x18>
 802457c:	f000 fb14 	bl	8024ba8 <__sinit>
 8024580:	4b89      	ldr	r3, [pc, #548]	; (80247a8 <_vfiprintf_r+0x240>)
 8024582:	429d      	cmp	r5, r3
 8024584:	d11b      	bne.n	80245be <_vfiprintf_r+0x56>
 8024586:	6875      	ldr	r5, [r6, #4]
 8024588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802458a:	07d9      	lsls	r1, r3, #31
 802458c:	d405      	bmi.n	802459a <_vfiprintf_r+0x32>
 802458e:	89ab      	ldrh	r3, [r5, #12]
 8024590:	059a      	lsls	r2, r3, #22
 8024592:	d402      	bmi.n	802459a <_vfiprintf_r+0x32>
 8024594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024596:	f7ff ffa2 	bl	80244de <__retarget_lock_acquire_recursive>
 802459a:	89ab      	ldrh	r3, [r5, #12]
 802459c:	071b      	lsls	r3, r3, #28
 802459e:	d501      	bpl.n	80245a4 <_vfiprintf_r+0x3c>
 80245a0:	692b      	ldr	r3, [r5, #16]
 80245a2:	b9eb      	cbnz	r3, 80245e0 <_vfiprintf_r+0x78>
 80245a4:	4629      	mov	r1, r5
 80245a6:	4630      	mov	r0, r6
 80245a8:	f000 f96e 	bl	8024888 <__swsetup_r>
 80245ac:	b1c0      	cbz	r0, 80245e0 <_vfiprintf_r+0x78>
 80245ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80245b0:	07dc      	lsls	r4, r3, #31
 80245b2:	d50e      	bpl.n	80245d2 <_vfiprintf_r+0x6a>
 80245b4:	f04f 30ff 	mov.w	r0, #4294967295
 80245b8:	b01d      	add	sp, #116	; 0x74
 80245ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245be:	4b7b      	ldr	r3, [pc, #492]	; (80247ac <_vfiprintf_r+0x244>)
 80245c0:	429d      	cmp	r5, r3
 80245c2:	d101      	bne.n	80245c8 <_vfiprintf_r+0x60>
 80245c4:	68b5      	ldr	r5, [r6, #8]
 80245c6:	e7df      	b.n	8024588 <_vfiprintf_r+0x20>
 80245c8:	4b79      	ldr	r3, [pc, #484]	; (80247b0 <_vfiprintf_r+0x248>)
 80245ca:	429d      	cmp	r5, r3
 80245cc:	bf08      	it	eq
 80245ce:	68f5      	ldreq	r5, [r6, #12]
 80245d0:	e7da      	b.n	8024588 <_vfiprintf_r+0x20>
 80245d2:	89ab      	ldrh	r3, [r5, #12]
 80245d4:	0598      	lsls	r0, r3, #22
 80245d6:	d4ed      	bmi.n	80245b4 <_vfiprintf_r+0x4c>
 80245d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80245da:	f7ff ff81 	bl	80244e0 <__retarget_lock_release_recursive>
 80245de:	e7e9      	b.n	80245b4 <_vfiprintf_r+0x4c>
 80245e0:	2300      	movs	r3, #0
 80245e2:	9309      	str	r3, [sp, #36]	; 0x24
 80245e4:	2320      	movs	r3, #32
 80245e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80245ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80245ee:	2330      	movs	r3, #48	; 0x30
 80245f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80247b4 <_vfiprintf_r+0x24c>
 80245f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80245f8:	f04f 0901 	mov.w	r9, #1
 80245fc:	4623      	mov	r3, r4
 80245fe:	469a      	mov	sl, r3
 8024600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024604:	b10a      	cbz	r2, 802460a <_vfiprintf_r+0xa2>
 8024606:	2a25      	cmp	r2, #37	; 0x25
 8024608:	d1f9      	bne.n	80245fe <_vfiprintf_r+0x96>
 802460a:	ebba 0b04 	subs.w	fp, sl, r4
 802460e:	d00b      	beq.n	8024628 <_vfiprintf_r+0xc0>
 8024610:	465b      	mov	r3, fp
 8024612:	4622      	mov	r2, r4
 8024614:	4629      	mov	r1, r5
 8024616:	4630      	mov	r0, r6
 8024618:	f7ff ff94 	bl	8024544 <__sfputs_r>
 802461c:	3001      	adds	r0, #1
 802461e:	f000 80aa 	beq.w	8024776 <_vfiprintf_r+0x20e>
 8024622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024624:	445a      	add	r2, fp
 8024626:	9209      	str	r2, [sp, #36]	; 0x24
 8024628:	f89a 3000 	ldrb.w	r3, [sl]
 802462c:	2b00      	cmp	r3, #0
 802462e:	f000 80a2 	beq.w	8024776 <_vfiprintf_r+0x20e>
 8024632:	2300      	movs	r3, #0
 8024634:	f04f 32ff 	mov.w	r2, #4294967295
 8024638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802463c:	f10a 0a01 	add.w	sl, sl, #1
 8024640:	9304      	str	r3, [sp, #16]
 8024642:	9307      	str	r3, [sp, #28]
 8024644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024648:	931a      	str	r3, [sp, #104]	; 0x68
 802464a:	4654      	mov	r4, sl
 802464c:	2205      	movs	r2, #5
 802464e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024652:	4858      	ldr	r0, [pc, #352]	; (80247b4 <_vfiprintf_r+0x24c>)
 8024654:	f7db fe5c 	bl	8000310 <memchr>
 8024658:	9a04      	ldr	r2, [sp, #16]
 802465a:	b9d8      	cbnz	r0, 8024694 <_vfiprintf_r+0x12c>
 802465c:	06d1      	lsls	r1, r2, #27
 802465e:	bf44      	itt	mi
 8024660:	2320      	movmi	r3, #32
 8024662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024666:	0713      	lsls	r3, r2, #28
 8024668:	bf44      	itt	mi
 802466a:	232b      	movmi	r3, #43	; 0x2b
 802466c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024670:	f89a 3000 	ldrb.w	r3, [sl]
 8024674:	2b2a      	cmp	r3, #42	; 0x2a
 8024676:	d015      	beq.n	80246a4 <_vfiprintf_r+0x13c>
 8024678:	9a07      	ldr	r2, [sp, #28]
 802467a:	4654      	mov	r4, sl
 802467c:	2000      	movs	r0, #0
 802467e:	f04f 0c0a 	mov.w	ip, #10
 8024682:	4621      	mov	r1, r4
 8024684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024688:	3b30      	subs	r3, #48	; 0x30
 802468a:	2b09      	cmp	r3, #9
 802468c:	d94e      	bls.n	802472c <_vfiprintf_r+0x1c4>
 802468e:	b1b0      	cbz	r0, 80246be <_vfiprintf_r+0x156>
 8024690:	9207      	str	r2, [sp, #28]
 8024692:	e014      	b.n	80246be <_vfiprintf_r+0x156>
 8024694:	eba0 0308 	sub.w	r3, r0, r8
 8024698:	fa09 f303 	lsl.w	r3, r9, r3
 802469c:	4313      	orrs	r3, r2
 802469e:	9304      	str	r3, [sp, #16]
 80246a0:	46a2      	mov	sl, r4
 80246a2:	e7d2      	b.n	802464a <_vfiprintf_r+0xe2>
 80246a4:	9b03      	ldr	r3, [sp, #12]
 80246a6:	1d19      	adds	r1, r3, #4
 80246a8:	681b      	ldr	r3, [r3, #0]
 80246aa:	9103      	str	r1, [sp, #12]
 80246ac:	2b00      	cmp	r3, #0
 80246ae:	bfbb      	ittet	lt
 80246b0:	425b      	neglt	r3, r3
 80246b2:	f042 0202 	orrlt.w	r2, r2, #2
 80246b6:	9307      	strge	r3, [sp, #28]
 80246b8:	9307      	strlt	r3, [sp, #28]
 80246ba:	bfb8      	it	lt
 80246bc:	9204      	strlt	r2, [sp, #16]
 80246be:	7823      	ldrb	r3, [r4, #0]
 80246c0:	2b2e      	cmp	r3, #46	; 0x2e
 80246c2:	d10c      	bne.n	80246de <_vfiprintf_r+0x176>
 80246c4:	7863      	ldrb	r3, [r4, #1]
 80246c6:	2b2a      	cmp	r3, #42	; 0x2a
 80246c8:	d135      	bne.n	8024736 <_vfiprintf_r+0x1ce>
 80246ca:	9b03      	ldr	r3, [sp, #12]
 80246cc:	1d1a      	adds	r2, r3, #4
 80246ce:	681b      	ldr	r3, [r3, #0]
 80246d0:	9203      	str	r2, [sp, #12]
 80246d2:	2b00      	cmp	r3, #0
 80246d4:	bfb8      	it	lt
 80246d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80246da:	3402      	adds	r4, #2
 80246dc:	9305      	str	r3, [sp, #20]
 80246de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80247c4 <_vfiprintf_r+0x25c>
 80246e2:	7821      	ldrb	r1, [r4, #0]
 80246e4:	2203      	movs	r2, #3
 80246e6:	4650      	mov	r0, sl
 80246e8:	f7db fe12 	bl	8000310 <memchr>
 80246ec:	b140      	cbz	r0, 8024700 <_vfiprintf_r+0x198>
 80246ee:	2340      	movs	r3, #64	; 0x40
 80246f0:	eba0 000a 	sub.w	r0, r0, sl
 80246f4:	fa03 f000 	lsl.w	r0, r3, r0
 80246f8:	9b04      	ldr	r3, [sp, #16]
 80246fa:	4303      	orrs	r3, r0
 80246fc:	3401      	adds	r4, #1
 80246fe:	9304      	str	r3, [sp, #16]
 8024700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024704:	482c      	ldr	r0, [pc, #176]	; (80247b8 <_vfiprintf_r+0x250>)
 8024706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802470a:	2206      	movs	r2, #6
 802470c:	f7db fe00 	bl	8000310 <memchr>
 8024710:	2800      	cmp	r0, #0
 8024712:	d03f      	beq.n	8024794 <_vfiprintf_r+0x22c>
 8024714:	4b29      	ldr	r3, [pc, #164]	; (80247bc <_vfiprintf_r+0x254>)
 8024716:	bb1b      	cbnz	r3, 8024760 <_vfiprintf_r+0x1f8>
 8024718:	9b03      	ldr	r3, [sp, #12]
 802471a:	3307      	adds	r3, #7
 802471c:	f023 0307 	bic.w	r3, r3, #7
 8024720:	3308      	adds	r3, #8
 8024722:	9303      	str	r3, [sp, #12]
 8024724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024726:	443b      	add	r3, r7
 8024728:	9309      	str	r3, [sp, #36]	; 0x24
 802472a:	e767      	b.n	80245fc <_vfiprintf_r+0x94>
 802472c:	fb0c 3202 	mla	r2, ip, r2, r3
 8024730:	460c      	mov	r4, r1
 8024732:	2001      	movs	r0, #1
 8024734:	e7a5      	b.n	8024682 <_vfiprintf_r+0x11a>
 8024736:	2300      	movs	r3, #0
 8024738:	3401      	adds	r4, #1
 802473a:	9305      	str	r3, [sp, #20]
 802473c:	4619      	mov	r1, r3
 802473e:	f04f 0c0a 	mov.w	ip, #10
 8024742:	4620      	mov	r0, r4
 8024744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024748:	3a30      	subs	r2, #48	; 0x30
 802474a:	2a09      	cmp	r2, #9
 802474c:	d903      	bls.n	8024756 <_vfiprintf_r+0x1ee>
 802474e:	2b00      	cmp	r3, #0
 8024750:	d0c5      	beq.n	80246de <_vfiprintf_r+0x176>
 8024752:	9105      	str	r1, [sp, #20]
 8024754:	e7c3      	b.n	80246de <_vfiprintf_r+0x176>
 8024756:	fb0c 2101 	mla	r1, ip, r1, r2
 802475a:	4604      	mov	r4, r0
 802475c:	2301      	movs	r3, #1
 802475e:	e7f0      	b.n	8024742 <_vfiprintf_r+0x1da>
 8024760:	ab03      	add	r3, sp, #12
 8024762:	9300      	str	r3, [sp, #0]
 8024764:	462a      	mov	r2, r5
 8024766:	4b16      	ldr	r3, [pc, #88]	; (80247c0 <_vfiprintf_r+0x258>)
 8024768:	a904      	add	r1, sp, #16
 802476a:	4630      	mov	r0, r6
 802476c:	f7fd ff30 	bl	80225d0 <_printf_float>
 8024770:	4607      	mov	r7, r0
 8024772:	1c78      	adds	r0, r7, #1
 8024774:	d1d6      	bne.n	8024724 <_vfiprintf_r+0x1bc>
 8024776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024778:	07d9      	lsls	r1, r3, #31
 802477a:	d405      	bmi.n	8024788 <_vfiprintf_r+0x220>
 802477c:	89ab      	ldrh	r3, [r5, #12]
 802477e:	059a      	lsls	r2, r3, #22
 8024780:	d402      	bmi.n	8024788 <_vfiprintf_r+0x220>
 8024782:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024784:	f7ff feac 	bl	80244e0 <__retarget_lock_release_recursive>
 8024788:	89ab      	ldrh	r3, [r5, #12]
 802478a:	065b      	lsls	r3, r3, #25
 802478c:	f53f af12 	bmi.w	80245b4 <_vfiprintf_r+0x4c>
 8024790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024792:	e711      	b.n	80245b8 <_vfiprintf_r+0x50>
 8024794:	ab03      	add	r3, sp, #12
 8024796:	9300      	str	r3, [sp, #0]
 8024798:	462a      	mov	r2, r5
 802479a:	4b09      	ldr	r3, [pc, #36]	; (80247c0 <_vfiprintf_r+0x258>)
 802479c:	a904      	add	r1, sp, #16
 802479e:	4630      	mov	r0, r6
 80247a0:	f7fe f9a2 	bl	8022ae8 <_printf_i>
 80247a4:	e7e4      	b.n	8024770 <_vfiprintf_r+0x208>
 80247a6:	bf00      	nop
 80247a8:	08063acc 	.word	0x08063acc
 80247ac:	08063aec 	.word	0x08063aec
 80247b0:	08063aac 	.word	0x08063aac
 80247b4:	08063a54 	.word	0x08063a54
 80247b8:	08063a5e 	.word	0x08063a5e
 80247bc:	080225d1 	.word	0x080225d1
 80247c0:	08024545 	.word	0x08024545
 80247c4:	08063a5a 	.word	0x08063a5a

080247c8 <__swbuf_r>:
 80247c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247ca:	460e      	mov	r6, r1
 80247cc:	4614      	mov	r4, r2
 80247ce:	4605      	mov	r5, r0
 80247d0:	b118      	cbz	r0, 80247da <__swbuf_r+0x12>
 80247d2:	6983      	ldr	r3, [r0, #24]
 80247d4:	b90b      	cbnz	r3, 80247da <__swbuf_r+0x12>
 80247d6:	f000 f9e7 	bl	8024ba8 <__sinit>
 80247da:	4b21      	ldr	r3, [pc, #132]	; (8024860 <__swbuf_r+0x98>)
 80247dc:	429c      	cmp	r4, r3
 80247de:	d12b      	bne.n	8024838 <__swbuf_r+0x70>
 80247e0:	686c      	ldr	r4, [r5, #4]
 80247e2:	69a3      	ldr	r3, [r4, #24]
 80247e4:	60a3      	str	r3, [r4, #8]
 80247e6:	89a3      	ldrh	r3, [r4, #12]
 80247e8:	071a      	lsls	r2, r3, #28
 80247ea:	d52f      	bpl.n	802484c <__swbuf_r+0x84>
 80247ec:	6923      	ldr	r3, [r4, #16]
 80247ee:	b36b      	cbz	r3, 802484c <__swbuf_r+0x84>
 80247f0:	6923      	ldr	r3, [r4, #16]
 80247f2:	6820      	ldr	r0, [r4, #0]
 80247f4:	1ac0      	subs	r0, r0, r3
 80247f6:	6963      	ldr	r3, [r4, #20]
 80247f8:	b2f6      	uxtb	r6, r6
 80247fa:	4283      	cmp	r3, r0
 80247fc:	4637      	mov	r7, r6
 80247fe:	dc04      	bgt.n	802480a <__swbuf_r+0x42>
 8024800:	4621      	mov	r1, r4
 8024802:	4628      	mov	r0, r5
 8024804:	f000 f93c 	bl	8024a80 <_fflush_r>
 8024808:	bb30      	cbnz	r0, 8024858 <__swbuf_r+0x90>
 802480a:	68a3      	ldr	r3, [r4, #8]
 802480c:	3b01      	subs	r3, #1
 802480e:	60a3      	str	r3, [r4, #8]
 8024810:	6823      	ldr	r3, [r4, #0]
 8024812:	1c5a      	adds	r2, r3, #1
 8024814:	6022      	str	r2, [r4, #0]
 8024816:	701e      	strb	r6, [r3, #0]
 8024818:	6963      	ldr	r3, [r4, #20]
 802481a:	3001      	adds	r0, #1
 802481c:	4283      	cmp	r3, r0
 802481e:	d004      	beq.n	802482a <__swbuf_r+0x62>
 8024820:	89a3      	ldrh	r3, [r4, #12]
 8024822:	07db      	lsls	r3, r3, #31
 8024824:	d506      	bpl.n	8024834 <__swbuf_r+0x6c>
 8024826:	2e0a      	cmp	r6, #10
 8024828:	d104      	bne.n	8024834 <__swbuf_r+0x6c>
 802482a:	4621      	mov	r1, r4
 802482c:	4628      	mov	r0, r5
 802482e:	f000 f927 	bl	8024a80 <_fflush_r>
 8024832:	b988      	cbnz	r0, 8024858 <__swbuf_r+0x90>
 8024834:	4638      	mov	r0, r7
 8024836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024838:	4b0a      	ldr	r3, [pc, #40]	; (8024864 <__swbuf_r+0x9c>)
 802483a:	429c      	cmp	r4, r3
 802483c:	d101      	bne.n	8024842 <__swbuf_r+0x7a>
 802483e:	68ac      	ldr	r4, [r5, #8]
 8024840:	e7cf      	b.n	80247e2 <__swbuf_r+0x1a>
 8024842:	4b09      	ldr	r3, [pc, #36]	; (8024868 <__swbuf_r+0xa0>)
 8024844:	429c      	cmp	r4, r3
 8024846:	bf08      	it	eq
 8024848:	68ec      	ldreq	r4, [r5, #12]
 802484a:	e7ca      	b.n	80247e2 <__swbuf_r+0x1a>
 802484c:	4621      	mov	r1, r4
 802484e:	4628      	mov	r0, r5
 8024850:	f000 f81a 	bl	8024888 <__swsetup_r>
 8024854:	2800      	cmp	r0, #0
 8024856:	d0cb      	beq.n	80247f0 <__swbuf_r+0x28>
 8024858:	f04f 37ff 	mov.w	r7, #4294967295
 802485c:	e7ea      	b.n	8024834 <__swbuf_r+0x6c>
 802485e:	bf00      	nop
 8024860:	08063acc 	.word	0x08063acc
 8024864:	08063aec 	.word	0x08063aec
 8024868:	08063aac 	.word	0x08063aac

0802486c <__ascii_wctomb>:
 802486c:	b149      	cbz	r1, 8024882 <__ascii_wctomb+0x16>
 802486e:	2aff      	cmp	r2, #255	; 0xff
 8024870:	bf85      	ittet	hi
 8024872:	238a      	movhi	r3, #138	; 0x8a
 8024874:	6003      	strhi	r3, [r0, #0]
 8024876:	700a      	strbls	r2, [r1, #0]
 8024878:	f04f 30ff 	movhi.w	r0, #4294967295
 802487c:	bf98      	it	ls
 802487e:	2001      	movls	r0, #1
 8024880:	4770      	bx	lr
 8024882:	4608      	mov	r0, r1
 8024884:	4770      	bx	lr
	...

08024888 <__swsetup_r>:
 8024888:	4b32      	ldr	r3, [pc, #200]	; (8024954 <__swsetup_r+0xcc>)
 802488a:	b570      	push	{r4, r5, r6, lr}
 802488c:	681d      	ldr	r5, [r3, #0]
 802488e:	4606      	mov	r6, r0
 8024890:	460c      	mov	r4, r1
 8024892:	b125      	cbz	r5, 802489e <__swsetup_r+0x16>
 8024894:	69ab      	ldr	r3, [r5, #24]
 8024896:	b913      	cbnz	r3, 802489e <__swsetup_r+0x16>
 8024898:	4628      	mov	r0, r5
 802489a:	f000 f985 	bl	8024ba8 <__sinit>
 802489e:	4b2e      	ldr	r3, [pc, #184]	; (8024958 <__swsetup_r+0xd0>)
 80248a0:	429c      	cmp	r4, r3
 80248a2:	d10f      	bne.n	80248c4 <__swsetup_r+0x3c>
 80248a4:	686c      	ldr	r4, [r5, #4]
 80248a6:	89a3      	ldrh	r3, [r4, #12]
 80248a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80248ac:	0719      	lsls	r1, r3, #28
 80248ae:	d42c      	bmi.n	802490a <__swsetup_r+0x82>
 80248b0:	06dd      	lsls	r5, r3, #27
 80248b2:	d411      	bmi.n	80248d8 <__swsetup_r+0x50>
 80248b4:	2309      	movs	r3, #9
 80248b6:	6033      	str	r3, [r6, #0]
 80248b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80248bc:	81a3      	strh	r3, [r4, #12]
 80248be:	f04f 30ff 	mov.w	r0, #4294967295
 80248c2:	e03e      	b.n	8024942 <__swsetup_r+0xba>
 80248c4:	4b25      	ldr	r3, [pc, #148]	; (802495c <__swsetup_r+0xd4>)
 80248c6:	429c      	cmp	r4, r3
 80248c8:	d101      	bne.n	80248ce <__swsetup_r+0x46>
 80248ca:	68ac      	ldr	r4, [r5, #8]
 80248cc:	e7eb      	b.n	80248a6 <__swsetup_r+0x1e>
 80248ce:	4b24      	ldr	r3, [pc, #144]	; (8024960 <__swsetup_r+0xd8>)
 80248d0:	429c      	cmp	r4, r3
 80248d2:	bf08      	it	eq
 80248d4:	68ec      	ldreq	r4, [r5, #12]
 80248d6:	e7e6      	b.n	80248a6 <__swsetup_r+0x1e>
 80248d8:	0758      	lsls	r0, r3, #29
 80248da:	d512      	bpl.n	8024902 <__swsetup_r+0x7a>
 80248dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80248de:	b141      	cbz	r1, 80248f2 <__swsetup_r+0x6a>
 80248e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80248e4:	4299      	cmp	r1, r3
 80248e6:	d002      	beq.n	80248ee <__swsetup_r+0x66>
 80248e8:	4630      	mov	r0, r6
 80248ea:	f7fd fcff 	bl	80222ec <_free_r>
 80248ee:	2300      	movs	r3, #0
 80248f0:	6363      	str	r3, [r4, #52]	; 0x34
 80248f2:	89a3      	ldrh	r3, [r4, #12]
 80248f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80248f8:	81a3      	strh	r3, [r4, #12]
 80248fa:	2300      	movs	r3, #0
 80248fc:	6063      	str	r3, [r4, #4]
 80248fe:	6923      	ldr	r3, [r4, #16]
 8024900:	6023      	str	r3, [r4, #0]
 8024902:	89a3      	ldrh	r3, [r4, #12]
 8024904:	f043 0308 	orr.w	r3, r3, #8
 8024908:	81a3      	strh	r3, [r4, #12]
 802490a:	6923      	ldr	r3, [r4, #16]
 802490c:	b94b      	cbnz	r3, 8024922 <__swsetup_r+0x9a>
 802490e:	89a3      	ldrh	r3, [r4, #12]
 8024910:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024918:	d003      	beq.n	8024922 <__swsetup_r+0x9a>
 802491a:	4621      	mov	r1, r4
 802491c:	4630      	mov	r0, r6
 802491e:	f000 fa05 	bl	8024d2c <__smakebuf_r>
 8024922:	89a0      	ldrh	r0, [r4, #12]
 8024924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024928:	f010 0301 	ands.w	r3, r0, #1
 802492c:	d00a      	beq.n	8024944 <__swsetup_r+0xbc>
 802492e:	2300      	movs	r3, #0
 8024930:	60a3      	str	r3, [r4, #8]
 8024932:	6963      	ldr	r3, [r4, #20]
 8024934:	425b      	negs	r3, r3
 8024936:	61a3      	str	r3, [r4, #24]
 8024938:	6923      	ldr	r3, [r4, #16]
 802493a:	b943      	cbnz	r3, 802494e <__swsetup_r+0xc6>
 802493c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024940:	d1ba      	bne.n	80248b8 <__swsetup_r+0x30>
 8024942:	bd70      	pop	{r4, r5, r6, pc}
 8024944:	0781      	lsls	r1, r0, #30
 8024946:	bf58      	it	pl
 8024948:	6963      	ldrpl	r3, [r4, #20]
 802494a:	60a3      	str	r3, [r4, #8]
 802494c:	e7f4      	b.n	8024938 <__swsetup_r+0xb0>
 802494e:	2000      	movs	r0, #0
 8024950:	e7f7      	b.n	8024942 <__swsetup_r+0xba>
 8024952:	bf00      	nop
 8024954:	20004824 	.word	0x20004824
 8024958:	08063acc 	.word	0x08063acc
 802495c:	08063aec 	.word	0x08063aec
 8024960:	08063aac 	.word	0x08063aac

08024964 <abort>:
 8024964:	b508      	push	{r3, lr}
 8024966:	2006      	movs	r0, #6
 8024968:	f000 fa48 	bl	8024dfc <raise>
 802496c:	2001      	movs	r0, #1
 802496e:	f000 fec3 	bl	80256f8 <_exit>
	...

08024974 <__sflush_r>:
 8024974:	898a      	ldrh	r2, [r1, #12]
 8024976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802497a:	4605      	mov	r5, r0
 802497c:	0710      	lsls	r0, r2, #28
 802497e:	460c      	mov	r4, r1
 8024980:	d458      	bmi.n	8024a34 <__sflush_r+0xc0>
 8024982:	684b      	ldr	r3, [r1, #4]
 8024984:	2b00      	cmp	r3, #0
 8024986:	dc05      	bgt.n	8024994 <__sflush_r+0x20>
 8024988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802498a:	2b00      	cmp	r3, #0
 802498c:	dc02      	bgt.n	8024994 <__sflush_r+0x20>
 802498e:	2000      	movs	r0, #0
 8024990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024996:	2e00      	cmp	r6, #0
 8024998:	d0f9      	beq.n	802498e <__sflush_r+0x1a>
 802499a:	2300      	movs	r3, #0
 802499c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80249a0:	682f      	ldr	r7, [r5, #0]
 80249a2:	602b      	str	r3, [r5, #0]
 80249a4:	d032      	beq.n	8024a0c <__sflush_r+0x98>
 80249a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80249a8:	89a3      	ldrh	r3, [r4, #12]
 80249aa:	075a      	lsls	r2, r3, #29
 80249ac:	d505      	bpl.n	80249ba <__sflush_r+0x46>
 80249ae:	6863      	ldr	r3, [r4, #4]
 80249b0:	1ac0      	subs	r0, r0, r3
 80249b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80249b4:	b10b      	cbz	r3, 80249ba <__sflush_r+0x46>
 80249b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80249b8:	1ac0      	subs	r0, r0, r3
 80249ba:	2300      	movs	r3, #0
 80249bc:	4602      	mov	r2, r0
 80249be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80249c0:	6a21      	ldr	r1, [r4, #32]
 80249c2:	4628      	mov	r0, r5
 80249c4:	47b0      	blx	r6
 80249c6:	1c43      	adds	r3, r0, #1
 80249c8:	89a3      	ldrh	r3, [r4, #12]
 80249ca:	d106      	bne.n	80249da <__sflush_r+0x66>
 80249cc:	6829      	ldr	r1, [r5, #0]
 80249ce:	291d      	cmp	r1, #29
 80249d0:	d82c      	bhi.n	8024a2c <__sflush_r+0xb8>
 80249d2:	4a2a      	ldr	r2, [pc, #168]	; (8024a7c <__sflush_r+0x108>)
 80249d4:	40ca      	lsrs	r2, r1
 80249d6:	07d6      	lsls	r6, r2, #31
 80249d8:	d528      	bpl.n	8024a2c <__sflush_r+0xb8>
 80249da:	2200      	movs	r2, #0
 80249dc:	6062      	str	r2, [r4, #4]
 80249de:	04d9      	lsls	r1, r3, #19
 80249e0:	6922      	ldr	r2, [r4, #16]
 80249e2:	6022      	str	r2, [r4, #0]
 80249e4:	d504      	bpl.n	80249f0 <__sflush_r+0x7c>
 80249e6:	1c42      	adds	r2, r0, #1
 80249e8:	d101      	bne.n	80249ee <__sflush_r+0x7a>
 80249ea:	682b      	ldr	r3, [r5, #0]
 80249ec:	b903      	cbnz	r3, 80249f0 <__sflush_r+0x7c>
 80249ee:	6560      	str	r0, [r4, #84]	; 0x54
 80249f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80249f2:	602f      	str	r7, [r5, #0]
 80249f4:	2900      	cmp	r1, #0
 80249f6:	d0ca      	beq.n	802498e <__sflush_r+0x1a>
 80249f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80249fc:	4299      	cmp	r1, r3
 80249fe:	d002      	beq.n	8024a06 <__sflush_r+0x92>
 8024a00:	4628      	mov	r0, r5
 8024a02:	f7fd fc73 	bl	80222ec <_free_r>
 8024a06:	2000      	movs	r0, #0
 8024a08:	6360      	str	r0, [r4, #52]	; 0x34
 8024a0a:	e7c1      	b.n	8024990 <__sflush_r+0x1c>
 8024a0c:	6a21      	ldr	r1, [r4, #32]
 8024a0e:	2301      	movs	r3, #1
 8024a10:	4628      	mov	r0, r5
 8024a12:	47b0      	blx	r6
 8024a14:	1c41      	adds	r1, r0, #1
 8024a16:	d1c7      	bne.n	80249a8 <__sflush_r+0x34>
 8024a18:	682b      	ldr	r3, [r5, #0]
 8024a1a:	2b00      	cmp	r3, #0
 8024a1c:	d0c4      	beq.n	80249a8 <__sflush_r+0x34>
 8024a1e:	2b1d      	cmp	r3, #29
 8024a20:	d001      	beq.n	8024a26 <__sflush_r+0xb2>
 8024a22:	2b16      	cmp	r3, #22
 8024a24:	d101      	bne.n	8024a2a <__sflush_r+0xb6>
 8024a26:	602f      	str	r7, [r5, #0]
 8024a28:	e7b1      	b.n	802498e <__sflush_r+0x1a>
 8024a2a:	89a3      	ldrh	r3, [r4, #12]
 8024a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024a30:	81a3      	strh	r3, [r4, #12]
 8024a32:	e7ad      	b.n	8024990 <__sflush_r+0x1c>
 8024a34:	690f      	ldr	r7, [r1, #16]
 8024a36:	2f00      	cmp	r7, #0
 8024a38:	d0a9      	beq.n	802498e <__sflush_r+0x1a>
 8024a3a:	0793      	lsls	r3, r2, #30
 8024a3c:	680e      	ldr	r6, [r1, #0]
 8024a3e:	bf08      	it	eq
 8024a40:	694b      	ldreq	r3, [r1, #20]
 8024a42:	600f      	str	r7, [r1, #0]
 8024a44:	bf18      	it	ne
 8024a46:	2300      	movne	r3, #0
 8024a48:	eba6 0807 	sub.w	r8, r6, r7
 8024a4c:	608b      	str	r3, [r1, #8]
 8024a4e:	f1b8 0f00 	cmp.w	r8, #0
 8024a52:	dd9c      	ble.n	802498e <__sflush_r+0x1a>
 8024a54:	6a21      	ldr	r1, [r4, #32]
 8024a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024a58:	4643      	mov	r3, r8
 8024a5a:	463a      	mov	r2, r7
 8024a5c:	4628      	mov	r0, r5
 8024a5e:	47b0      	blx	r6
 8024a60:	2800      	cmp	r0, #0
 8024a62:	dc06      	bgt.n	8024a72 <__sflush_r+0xfe>
 8024a64:	89a3      	ldrh	r3, [r4, #12]
 8024a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024a6a:	81a3      	strh	r3, [r4, #12]
 8024a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8024a70:	e78e      	b.n	8024990 <__sflush_r+0x1c>
 8024a72:	4407      	add	r7, r0
 8024a74:	eba8 0800 	sub.w	r8, r8, r0
 8024a78:	e7e9      	b.n	8024a4e <__sflush_r+0xda>
 8024a7a:	bf00      	nop
 8024a7c:	20400001 	.word	0x20400001

08024a80 <_fflush_r>:
 8024a80:	b538      	push	{r3, r4, r5, lr}
 8024a82:	690b      	ldr	r3, [r1, #16]
 8024a84:	4605      	mov	r5, r0
 8024a86:	460c      	mov	r4, r1
 8024a88:	b913      	cbnz	r3, 8024a90 <_fflush_r+0x10>
 8024a8a:	2500      	movs	r5, #0
 8024a8c:	4628      	mov	r0, r5
 8024a8e:	bd38      	pop	{r3, r4, r5, pc}
 8024a90:	b118      	cbz	r0, 8024a9a <_fflush_r+0x1a>
 8024a92:	6983      	ldr	r3, [r0, #24]
 8024a94:	b90b      	cbnz	r3, 8024a9a <_fflush_r+0x1a>
 8024a96:	f000 f887 	bl	8024ba8 <__sinit>
 8024a9a:	4b14      	ldr	r3, [pc, #80]	; (8024aec <_fflush_r+0x6c>)
 8024a9c:	429c      	cmp	r4, r3
 8024a9e:	d11b      	bne.n	8024ad8 <_fflush_r+0x58>
 8024aa0:	686c      	ldr	r4, [r5, #4]
 8024aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024aa6:	2b00      	cmp	r3, #0
 8024aa8:	d0ef      	beq.n	8024a8a <_fflush_r+0xa>
 8024aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024aac:	07d0      	lsls	r0, r2, #31
 8024aae:	d404      	bmi.n	8024aba <_fflush_r+0x3a>
 8024ab0:	0599      	lsls	r1, r3, #22
 8024ab2:	d402      	bmi.n	8024aba <_fflush_r+0x3a>
 8024ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024ab6:	f7ff fd12 	bl	80244de <__retarget_lock_acquire_recursive>
 8024aba:	4628      	mov	r0, r5
 8024abc:	4621      	mov	r1, r4
 8024abe:	f7ff ff59 	bl	8024974 <__sflush_r>
 8024ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024ac4:	07da      	lsls	r2, r3, #31
 8024ac6:	4605      	mov	r5, r0
 8024ac8:	d4e0      	bmi.n	8024a8c <_fflush_r+0xc>
 8024aca:	89a3      	ldrh	r3, [r4, #12]
 8024acc:	059b      	lsls	r3, r3, #22
 8024ace:	d4dd      	bmi.n	8024a8c <_fflush_r+0xc>
 8024ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024ad2:	f7ff fd05 	bl	80244e0 <__retarget_lock_release_recursive>
 8024ad6:	e7d9      	b.n	8024a8c <_fflush_r+0xc>
 8024ad8:	4b05      	ldr	r3, [pc, #20]	; (8024af0 <_fflush_r+0x70>)
 8024ada:	429c      	cmp	r4, r3
 8024adc:	d101      	bne.n	8024ae2 <_fflush_r+0x62>
 8024ade:	68ac      	ldr	r4, [r5, #8]
 8024ae0:	e7df      	b.n	8024aa2 <_fflush_r+0x22>
 8024ae2:	4b04      	ldr	r3, [pc, #16]	; (8024af4 <_fflush_r+0x74>)
 8024ae4:	429c      	cmp	r4, r3
 8024ae6:	bf08      	it	eq
 8024ae8:	68ec      	ldreq	r4, [r5, #12]
 8024aea:	e7da      	b.n	8024aa2 <_fflush_r+0x22>
 8024aec:	08063acc 	.word	0x08063acc
 8024af0:	08063aec 	.word	0x08063aec
 8024af4:	08063aac 	.word	0x08063aac

08024af8 <std>:
 8024af8:	2300      	movs	r3, #0
 8024afa:	b510      	push	{r4, lr}
 8024afc:	4604      	mov	r4, r0
 8024afe:	e9c0 3300 	strd	r3, r3, [r0]
 8024b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024b06:	6083      	str	r3, [r0, #8]
 8024b08:	8181      	strh	r1, [r0, #12]
 8024b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8024b0c:	81c2      	strh	r2, [r0, #14]
 8024b0e:	6183      	str	r3, [r0, #24]
 8024b10:	4619      	mov	r1, r3
 8024b12:	2208      	movs	r2, #8
 8024b14:	305c      	adds	r0, #92	; 0x5c
 8024b16:	f7fd fbe1 	bl	80222dc <memset>
 8024b1a:	4b05      	ldr	r3, [pc, #20]	; (8024b30 <std+0x38>)
 8024b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8024b1e:	4b05      	ldr	r3, [pc, #20]	; (8024b34 <std+0x3c>)
 8024b20:	62a3      	str	r3, [r4, #40]	; 0x28
 8024b22:	4b05      	ldr	r3, [pc, #20]	; (8024b38 <std+0x40>)
 8024b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024b26:	4b05      	ldr	r3, [pc, #20]	; (8024b3c <std+0x44>)
 8024b28:	6224      	str	r4, [r4, #32]
 8024b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8024b2c:	bd10      	pop	{r4, pc}
 8024b2e:	bf00      	nop
 8024b30:	08024e35 	.word	0x08024e35
 8024b34:	08024e57 	.word	0x08024e57
 8024b38:	08024e8f 	.word	0x08024e8f
 8024b3c:	08024eb3 	.word	0x08024eb3

08024b40 <_cleanup_r>:
 8024b40:	4901      	ldr	r1, [pc, #4]	; (8024b48 <_cleanup_r+0x8>)
 8024b42:	f000 b8af 	b.w	8024ca4 <_fwalk_reent>
 8024b46:	bf00      	nop
 8024b48:	08024a81 	.word	0x08024a81

08024b4c <__sfmoreglue>:
 8024b4c:	b570      	push	{r4, r5, r6, lr}
 8024b4e:	2268      	movs	r2, #104	; 0x68
 8024b50:	1e4d      	subs	r5, r1, #1
 8024b52:	4355      	muls	r5, r2
 8024b54:	460e      	mov	r6, r1
 8024b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024b5a:	f7fd fc33 	bl	80223c4 <_malloc_r>
 8024b5e:	4604      	mov	r4, r0
 8024b60:	b140      	cbz	r0, 8024b74 <__sfmoreglue+0x28>
 8024b62:	2100      	movs	r1, #0
 8024b64:	e9c0 1600 	strd	r1, r6, [r0]
 8024b68:	300c      	adds	r0, #12
 8024b6a:	60a0      	str	r0, [r4, #8]
 8024b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024b70:	f7fd fbb4 	bl	80222dc <memset>
 8024b74:	4620      	mov	r0, r4
 8024b76:	bd70      	pop	{r4, r5, r6, pc}

08024b78 <__sfp_lock_acquire>:
 8024b78:	4801      	ldr	r0, [pc, #4]	; (8024b80 <__sfp_lock_acquire+0x8>)
 8024b7a:	f7ff bcb0 	b.w	80244de <__retarget_lock_acquire_recursive>
 8024b7e:	bf00      	nop
 8024b80:	200073b1 	.word	0x200073b1

08024b84 <__sfp_lock_release>:
 8024b84:	4801      	ldr	r0, [pc, #4]	; (8024b8c <__sfp_lock_release+0x8>)
 8024b86:	f7ff bcab 	b.w	80244e0 <__retarget_lock_release_recursive>
 8024b8a:	bf00      	nop
 8024b8c:	200073b1 	.word	0x200073b1

08024b90 <__sinit_lock_acquire>:
 8024b90:	4801      	ldr	r0, [pc, #4]	; (8024b98 <__sinit_lock_acquire+0x8>)
 8024b92:	f7ff bca4 	b.w	80244de <__retarget_lock_acquire_recursive>
 8024b96:	bf00      	nop
 8024b98:	200073b2 	.word	0x200073b2

08024b9c <__sinit_lock_release>:
 8024b9c:	4801      	ldr	r0, [pc, #4]	; (8024ba4 <__sinit_lock_release+0x8>)
 8024b9e:	f7ff bc9f 	b.w	80244e0 <__retarget_lock_release_recursive>
 8024ba2:	bf00      	nop
 8024ba4:	200073b2 	.word	0x200073b2

08024ba8 <__sinit>:
 8024ba8:	b510      	push	{r4, lr}
 8024baa:	4604      	mov	r4, r0
 8024bac:	f7ff fff0 	bl	8024b90 <__sinit_lock_acquire>
 8024bb0:	69a3      	ldr	r3, [r4, #24]
 8024bb2:	b11b      	cbz	r3, 8024bbc <__sinit+0x14>
 8024bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024bb8:	f7ff bff0 	b.w	8024b9c <__sinit_lock_release>
 8024bbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8024bc0:	6523      	str	r3, [r4, #80]	; 0x50
 8024bc2:	4b13      	ldr	r3, [pc, #76]	; (8024c10 <__sinit+0x68>)
 8024bc4:	4a13      	ldr	r2, [pc, #76]	; (8024c14 <__sinit+0x6c>)
 8024bc6:	681b      	ldr	r3, [r3, #0]
 8024bc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8024bca:	42a3      	cmp	r3, r4
 8024bcc:	bf04      	itt	eq
 8024bce:	2301      	moveq	r3, #1
 8024bd0:	61a3      	streq	r3, [r4, #24]
 8024bd2:	4620      	mov	r0, r4
 8024bd4:	f000 f820 	bl	8024c18 <__sfp>
 8024bd8:	6060      	str	r0, [r4, #4]
 8024bda:	4620      	mov	r0, r4
 8024bdc:	f000 f81c 	bl	8024c18 <__sfp>
 8024be0:	60a0      	str	r0, [r4, #8]
 8024be2:	4620      	mov	r0, r4
 8024be4:	f000 f818 	bl	8024c18 <__sfp>
 8024be8:	2200      	movs	r2, #0
 8024bea:	60e0      	str	r0, [r4, #12]
 8024bec:	2104      	movs	r1, #4
 8024bee:	6860      	ldr	r0, [r4, #4]
 8024bf0:	f7ff ff82 	bl	8024af8 <std>
 8024bf4:	68a0      	ldr	r0, [r4, #8]
 8024bf6:	2201      	movs	r2, #1
 8024bf8:	2109      	movs	r1, #9
 8024bfa:	f7ff ff7d 	bl	8024af8 <std>
 8024bfe:	68e0      	ldr	r0, [r4, #12]
 8024c00:	2202      	movs	r2, #2
 8024c02:	2112      	movs	r1, #18
 8024c04:	f7ff ff78 	bl	8024af8 <std>
 8024c08:	2301      	movs	r3, #1
 8024c0a:	61a3      	str	r3, [r4, #24]
 8024c0c:	e7d2      	b.n	8024bb4 <__sinit+0xc>
 8024c0e:	bf00      	nop
 8024c10:	08063830 	.word	0x08063830
 8024c14:	08024b41 	.word	0x08024b41

08024c18 <__sfp>:
 8024c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c1a:	4607      	mov	r7, r0
 8024c1c:	f7ff ffac 	bl	8024b78 <__sfp_lock_acquire>
 8024c20:	4b1e      	ldr	r3, [pc, #120]	; (8024c9c <__sfp+0x84>)
 8024c22:	681e      	ldr	r6, [r3, #0]
 8024c24:	69b3      	ldr	r3, [r6, #24]
 8024c26:	b913      	cbnz	r3, 8024c2e <__sfp+0x16>
 8024c28:	4630      	mov	r0, r6
 8024c2a:	f7ff ffbd 	bl	8024ba8 <__sinit>
 8024c2e:	3648      	adds	r6, #72	; 0x48
 8024c30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024c34:	3b01      	subs	r3, #1
 8024c36:	d503      	bpl.n	8024c40 <__sfp+0x28>
 8024c38:	6833      	ldr	r3, [r6, #0]
 8024c3a:	b30b      	cbz	r3, 8024c80 <__sfp+0x68>
 8024c3c:	6836      	ldr	r6, [r6, #0]
 8024c3e:	e7f7      	b.n	8024c30 <__sfp+0x18>
 8024c40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024c44:	b9d5      	cbnz	r5, 8024c7c <__sfp+0x64>
 8024c46:	4b16      	ldr	r3, [pc, #88]	; (8024ca0 <__sfp+0x88>)
 8024c48:	60e3      	str	r3, [r4, #12]
 8024c4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024c4e:	6665      	str	r5, [r4, #100]	; 0x64
 8024c50:	f7ff fc44 	bl	80244dc <__retarget_lock_init_recursive>
 8024c54:	f7ff ff96 	bl	8024b84 <__sfp_lock_release>
 8024c58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024c5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8024c60:	6025      	str	r5, [r4, #0]
 8024c62:	61a5      	str	r5, [r4, #24]
 8024c64:	2208      	movs	r2, #8
 8024c66:	4629      	mov	r1, r5
 8024c68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024c6c:	f7fd fb36 	bl	80222dc <memset>
 8024c70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024c74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024c78:	4620      	mov	r0, r4
 8024c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024c7c:	3468      	adds	r4, #104	; 0x68
 8024c7e:	e7d9      	b.n	8024c34 <__sfp+0x1c>
 8024c80:	2104      	movs	r1, #4
 8024c82:	4638      	mov	r0, r7
 8024c84:	f7ff ff62 	bl	8024b4c <__sfmoreglue>
 8024c88:	4604      	mov	r4, r0
 8024c8a:	6030      	str	r0, [r6, #0]
 8024c8c:	2800      	cmp	r0, #0
 8024c8e:	d1d5      	bne.n	8024c3c <__sfp+0x24>
 8024c90:	f7ff ff78 	bl	8024b84 <__sfp_lock_release>
 8024c94:	230c      	movs	r3, #12
 8024c96:	603b      	str	r3, [r7, #0]
 8024c98:	e7ee      	b.n	8024c78 <__sfp+0x60>
 8024c9a:	bf00      	nop
 8024c9c:	08063830 	.word	0x08063830
 8024ca0:	ffff0001 	.word	0xffff0001

08024ca4 <_fwalk_reent>:
 8024ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024ca8:	4606      	mov	r6, r0
 8024caa:	4688      	mov	r8, r1
 8024cac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024cb0:	2700      	movs	r7, #0
 8024cb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024cb6:	f1b9 0901 	subs.w	r9, r9, #1
 8024cba:	d505      	bpl.n	8024cc8 <_fwalk_reent+0x24>
 8024cbc:	6824      	ldr	r4, [r4, #0]
 8024cbe:	2c00      	cmp	r4, #0
 8024cc0:	d1f7      	bne.n	8024cb2 <_fwalk_reent+0xe>
 8024cc2:	4638      	mov	r0, r7
 8024cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024cc8:	89ab      	ldrh	r3, [r5, #12]
 8024cca:	2b01      	cmp	r3, #1
 8024ccc:	d907      	bls.n	8024cde <_fwalk_reent+0x3a>
 8024cce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024cd2:	3301      	adds	r3, #1
 8024cd4:	d003      	beq.n	8024cde <_fwalk_reent+0x3a>
 8024cd6:	4629      	mov	r1, r5
 8024cd8:	4630      	mov	r0, r6
 8024cda:	47c0      	blx	r8
 8024cdc:	4307      	orrs	r7, r0
 8024cde:	3568      	adds	r5, #104	; 0x68
 8024ce0:	e7e9      	b.n	8024cb6 <_fwalk_reent+0x12>

08024ce2 <__swhatbuf_r>:
 8024ce2:	b570      	push	{r4, r5, r6, lr}
 8024ce4:	460e      	mov	r6, r1
 8024ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024cea:	2900      	cmp	r1, #0
 8024cec:	b096      	sub	sp, #88	; 0x58
 8024cee:	4614      	mov	r4, r2
 8024cf0:	461d      	mov	r5, r3
 8024cf2:	da08      	bge.n	8024d06 <__swhatbuf_r+0x24>
 8024cf4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024cf8:	2200      	movs	r2, #0
 8024cfa:	602a      	str	r2, [r5, #0]
 8024cfc:	061a      	lsls	r2, r3, #24
 8024cfe:	d410      	bmi.n	8024d22 <__swhatbuf_r+0x40>
 8024d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024d04:	e00e      	b.n	8024d24 <__swhatbuf_r+0x42>
 8024d06:	466a      	mov	r2, sp
 8024d08:	f000 f8fa 	bl	8024f00 <_fstat_r>
 8024d0c:	2800      	cmp	r0, #0
 8024d0e:	dbf1      	blt.n	8024cf4 <__swhatbuf_r+0x12>
 8024d10:	9a01      	ldr	r2, [sp, #4]
 8024d12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024d16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024d1a:	425a      	negs	r2, r3
 8024d1c:	415a      	adcs	r2, r3
 8024d1e:	602a      	str	r2, [r5, #0]
 8024d20:	e7ee      	b.n	8024d00 <__swhatbuf_r+0x1e>
 8024d22:	2340      	movs	r3, #64	; 0x40
 8024d24:	2000      	movs	r0, #0
 8024d26:	6023      	str	r3, [r4, #0]
 8024d28:	b016      	add	sp, #88	; 0x58
 8024d2a:	bd70      	pop	{r4, r5, r6, pc}

08024d2c <__smakebuf_r>:
 8024d2c:	898b      	ldrh	r3, [r1, #12]
 8024d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024d30:	079d      	lsls	r5, r3, #30
 8024d32:	4606      	mov	r6, r0
 8024d34:	460c      	mov	r4, r1
 8024d36:	d507      	bpl.n	8024d48 <__smakebuf_r+0x1c>
 8024d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024d3c:	6023      	str	r3, [r4, #0]
 8024d3e:	6123      	str	r3, [r4, #16]
 8024d40:	2301      	movs	r3, #1
 8024d42:	6163      	str	r3, [r4, #20]
 8024d44:	b002      	add	sp, #8
 8024d46:	bd70      	pop	{r4, r5, r6, pc}
 8024d48:	ab01      	add	r3, sp, #4
 8024d4a:	466a      	mov	r2, sp
 8024d4c:	f7ff ffc9 	bl	8024ce2 <__swhatbuf_r>
 8024d50:	9900      	ldr	r1, [sp, #0]
 8024d52:	4605      	mov	r5, r0
 8024d54:	4630      	mov	r0, r6
 8024d56:	f7fd fb35 	bl	80223c4 <_malloc_r>
 8024d5a:	b948      	cbnz	r0, 8024d70 <__smakebuf_r+0x44>
 8024d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024d60:	059a      	lsls	r2, r3, #22
 8024d62:	d4ef      	bmi.n	8024d44 <__smakebuf_r+0x18>
 8024d64:	f023 0303 	bic.w	r3, r3, #3
 8024d68:	f043 0302 	orr.w	r3, r3, #2
 8024d6c:	81a3      	strh	r3, [r4, #12]
 8024d6e:	e7e3      	b.n	8024d38 <__smakebuf_r+0xc>
 8024d70:	4b0d      	ldr	r3, [pc, #52]	; (8024da8 <__smakebuf_r+0x7c>)
 8024d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8024d74:	89a3      	ldrh	r3, [r4, #12]
 8024d76:	6020      	str	r0, [r4, #0]
 8024d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024d7c:	81a3      	strh	r3, [r4, #12]
 8024d7e:	9b00      	ldr	r3, [sp, #0]
 8024d80:	6163      	str	r3, [r4, #20]
 8024d82:	9b01      	ldr	r3, [sp, #4]
 8024d84:	6120      	str	r0, [r4, #16]
 8024d86:	b15b      	cbz	r3, 8024da0 <__smakebuf_r+0x74>
 8024d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024d8c:	4630      	mov	r0, r6
 8024d8e:	f000 f8c9 	bl	8024f24 <_isatty_r>
 8024d92:	b128      	cbz	r0, 8024da0 <__smakebuf_r+0x74>
 8024d94:	89a3      	ldrh	r3, [r4, #12]
 8024d96:	f023 0303 	bic.w	r3, r3, #3
 8024d9a:	f043 0301 	orr.w	r3, r3, #1
 8024d9e:	81a3      	strh	r3, [r4, #12]
 8024da0:	89a0      	ldrh	r0, [r4, #12]
 8024da2:	4305      	orrs	r5, r0
 8024da4:	81a5      	strh	r5, [r4, #12]
 8024da6:	e7cd      	b.n	8024d44 <__smakebuf_r+0x18>
 8024da8:	08024b41 	.word	0x08024b41

08024dac <_raise_r>:
 8024dac:	291f      	cmp	r1, #31
 8024dae:	b538      	push	{r3, r4, r5, lr}
 8024db0:	4604      	mov	r4, r0
 8024db2:	460d      	mov	r5, r1
 8024db4:	d904      	bls.n	8024dc0 <_raise_r+0x14>
 8024db6:	2316      	movs	r3, #22
 8024db8:	6003      	str	r3, [r0, #0]
 8024dba:	f04f 30ff 	mov.w	r0, #4294967295
 8024dbe:	bd38      	pop	{r3, r4, r5, pc}
 8024dc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024dc2:	b112      	cbz	r2, 8024dca <_raise_r+0x1e>
 8024dc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024dc8:	b94b      	cbnz	r3, 8024dde <_raise_r+0x32>
 8024dca:	4620      	mov	r0, r4
 8024dcc:	f000 f830 	bl	8024e30 <_getpid_r>
 8024dd0:	462a      	mov	r2, r5
 8024dd2:	4601      	mov	r1, r0
 8024dd4:	4620      	mov	r0, r4
 8024dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024dda:	f000 b817 	b.w	8024e0c <_kill_r>
 8024dde:	2b01      	cmp	r3, #1
 8024de0:	d00a      	beq.n	8024df8 <_raise_r+0x4c>
 8024de2:	1c59      	adds	r1, r3, #1
 8024de4:	d103      	bne.n	8024dee <_raise_r+0x42>
 8024de6:	2316      	movs	r3, #22
 8024de8:	6003      	str	r3, [r0, #0]
 8024dea:	2001      	movs	r0, #1
 8024dec:	e7e7      	b.n	8024dbe <_raise_r+0x12>
 8024dee:	2400      	movs	r4, #0
 8024df0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024df4:	4628      	mov	r0, r5
 8024df6:	4798      	blx	r3
 8024df8:	2000      	movs	r0, #0
 8024dfa:	e7e0      	b.n	8024dbe <_raise_r+0x12>

08024dfc <raise>:
 8024dfc:	4b02      	ldr	r3, [pc, #8]	; (8024e08 <raise+0xc>)
 8024dfe:	4601      	mov	r1, r0
 8024e00:	6818      	ldr	r0, [r3, #0]
 8024e02:	f7ff bfd3 	b.w	8024dac <_raise_r>
 8024e06:	bf00      	nop
 8024e08:	20004824 	.word	0x20004824

08024e0c <_kill_r>:
 8024e0c:	b538      	push	{r3, r4, r5, lr}
 8024e0e:	4d07      	ldr	r5, [pc, #28]	; (8024e2c <_kill_r+0x20>)
 8024e10:	2300      	movs	r3, #0
 8024e12:	4604      	mov	r4, r0
 8024e14:	4608      	mov	r0, r1
 8024e16:	4611      	mov	r1, r2
 8024e18:	602b      	str	r3, [r5, #0]
 8024e1a:	f000 fc3f 	bl	802569c <_kill>
 8024e1e:	1c43      	adds	r3, r0, #1
 8024e20:	d102      	bne.n	8024e28 <_kill_r+0x1c>
 8024e22:	682b      	ldr	r3, [r5, #0]
 8024e24:	b103      	cbz	r3, 8024e28 <_kill_r+0x1c>
 8024e26:	6023      	str	r3, [r4, #0]
 8024e28:	bd38      	pop	{r3, r4, r5, pc}
 8024e2a:	bf00      	nop
 8024e2c:	200073ac 	.word	0x200073ac

08024e30 <_getpid_r>:
 8024e30:	f000 bc24 	b.w	802567c <_getpid>

08024e34 <__sread>:
 8024e34:	b510      	push	{r4, lr}
 8024e36:	460c      	mov	r4, r1
 8024e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e3c:	f000 f894 	bl	8024f68 <_read_r>
 8024e40:	2800      	cmp	r0, #0
 8024e42:	bfab      	itete	ge
 8024e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024e46:	89a3      	ldrhlt	r3, [r4, #12]
 8024e48:	181b      	addge	r3, r3, r0
 8024e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024e4e:	bfac      	ite	ge
 8024e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8024e52:	81a3      	strhlt	r3, [r4, #12]
 8024e54:	bd10      	pop	{r4, pc}

08024e56 <__swrite>:
 8024e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024e5a:	461f      	mov	r7, r3
 8024e5c:	898b      	ldrh	r3, [r1, #12]
 8024e5e:	05db      	lsls	r3, r3, #23
 8024e60:	4605      	mov	r5, r0
 8024e62:	460c      	mov	r4, r1
 8024e64:	4616      	mov	r6, r2
 8024e66:	d505      	bpl.n	8024e74 <__swrite+0x1e>
 8024e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e6c:	2302      	movs	r3, #2
 8024e6e:	2200      	movs	r2, #0
 8024e70:	f000 f868 	bl	8024f44 <_lseek_r>
 8024e74:	89a3      	ldrh	r3, [r4, #12]
 8024e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024e7e:	81a3      	strh	r3, [r4, #12]
 8024e80:	4632      	mov	r2, r6
 8024e82:	463b      	mov	r3, r7
 8024e84:	4628      	mov	r0, r5
 8024e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024e8a:	f000 b817 	b.w	8024ebc <_write_r>

08024e8e <__sseek>:
 8024e8e:	b510      	push	{r4, lr}
 8024e90:	460c      	mov	r4, r1
 8024e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e96:	f000 f855 	bl	8024f44 <_lseek_r>
 8024e9a:	1c43      	adds	r3, r0, #1
 8024e9c:	89a3      	ldrh	r3, [r4, #12]
 8024e9e:	bf15      	itete	ne
 8024ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8024ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024eaa:	81a3      	strheq	r3, [r4, #12]
 8024eac:	bf18      	it	ne
 8024eae:	81a3      	strhne	r3, [r4, #12]
 8024eb0:	bd10      	pop	{r4, pc}

08024eb2 <__sclose>:
 8024eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024eb6:	f000 b813 	b.w	8024ee0 <_close_r>
	...

08024ebc <_write_r>:
 8024ebc:	b538      	push	{r3, r4, r5, lr}
 8024ebe:	4d07      	ldr	r5, [pc, #28]	; (8024edc <_write_r+0x20>)
 8024ec0:	4604      	mov	r4, r0
 8024ec2:	4608      	mov	r0, r1
 8024ec4:	4611      	mov	r1, r2
 8024ec6:	2200      	movs	r2, #0
 8024ec8:	602a      	str	r2, [r5, #0]
 8024eca:	461a      	mov	r2, r3
 8024ecc:	f000 fc0c 	bl	80256e8 <_write>
 8024ed0:	1c43      	adds	r3, r0, #1
 8024ed2:	d102      	bne.n	8024eda <_write_r+0x1e>
 8024ed4:	682b      	ldr	r3, [r5, #0]
 8024ed6:	b103      	cbz	r3, 8024eda <_write_r+0x1e>
 8024ed8:	6023      	str	r3, [r4, #0]
 8024eda:	bd38      	pop	{r3, r4, r5, pc}
 8024edc:	200073ac 	.word	0x200073ac

08024ee0 <_close_r>:
 8024ee0:	b538      	push	{r3, r4, r5, lr}
 8024ee2:	4d06      	ldr	r5, [pc, #24]	; (8024efc <_close_r+0x1c>)
 8024ee4:	2300      	movs	r3, #0
 8024ee6:	4604      	mov	r4, r0
 8024ee8:	4608      	mov	r0, r1
 8024eea:	602b      	str	r3, [r5, #0]
 8024eec:	f000 fbb6 	bl	802565c <_close>
 8024ef0:	1c43      	adds	r3, r0, #1
 8024ef2:	d102      	bne.n	8024efa <_close_r+0x1a>
 8024ef4:	682b      	ldr	r3, [r5, #0]
 8024ef6:	b103      	cbz	r3, 8024efa <_close_r+0x1a>
 8024ef8:	6023      	str	r3, [r4, #0]
 8024efa:	bd38      	pop	{r3, r4, r5, pc}
 8024efc:	200073ac 	.word	0x200073ac

08024f00 <_fstat_r>:
 8024f00:	b538      	push	{r3, r4, r5, lr}
 8024f02:	4d07      	ldr	r5, [pc, #28]	; (8024f20 <_fstat_r+0x20>)
 8024f04:	2300      	movs	r3, #0
 8024f06:	4604      	mov	r4, r0
 8024f08:	4608      	mov	r0, r1
 8024f0a:	4611      	mov	r1, r2
 8024f0c:	602b      	str	r3, [r5, #0]
 8024f0e:	f000 fbad 	bl	802566c <_fstat>
 8024f12:	1c43      	adds	r3, r0, #1
 8024f14:	d102      	bne.n	8024f1c <_fstat_r+0x1c>
 8024f16:	682b      	ldr	r3, [r5, #0]
 8024f18:	b103      	cbz	r3, 8024f1c <_fstat_r+0x1c>
 8024f1a:	6023      	str	r3, [r4, #0]
 8024f1c:	bd38      	pop	{r3, r4, r5, pc}
 8024f1e:	bf00      	nop
 8024f20:	200073ac 	.word	0x200073ac

08024f24 <_isatty_r>:
 8024f24:	b538      	push	{r3, r4, r5, lr}
 8024f26:	4d06      	ldr	r5, [pc, #24]	; (8024f40 <_isatty_r+0x1c>)
 8024f28:	2300      	movs	r3, #0
 8024f2a:	4604      	mov	r4, r0
 8024f2c:	4608      	mov	r0, r1
 8024f2e:	602b      	str	r3, [r5, #0]
 8024f30:	f000 fbac 	bl	802568c <_isatty>
 8024f34:	1c43      	adds	r3, r0, #1
 8024f36:	d102      	bne.n	8024f3e <_isatty_r+0x1a>
 8024f38:	682b      	ldr	r3, [r5, #0]
 8024f3a:	b103      	cbz	r3, 8024f3e <_isatty_r+0x1a>
 8024f3c:	6023      	str	r3, [r4, #0]
 8024f3e:	bd38      	pop	{r3, r4, r5, pc}
 8024f40:	200073ac 	.word	0x200073ac

08024f44 <_lseek_r>:
 8024f44:	b538      	push	{r3, r4, r5, lr}
 8024f46:	4d07      	ldr	r5, [pc, #28]	; (8024f64 <_lseek_r+0x20>)
 8024f48:	4604      	mov	r4, r0
 8024f4a:	4608      	mov	r0, r1
 8024f4c:	4611      	mov	r1, r2
 8024f4e:	2200      	movs	r2, #0
 8024f50:	602a      	str	r2, [r5, #0]
 8024f52:	461a      	mov	r2, r3
 8024f54:	f000 fbaa 	bl	80256ac <_lseek>
 8024f58:	1c43      	adds	r3, r0, #1
 8024f5a:	d102      	bne.n	8024f62 <_lseek_r+0x1e>
 8024f5c:	682b      	ldr	r3, [r5, #0]
 8024f5e:	b103      	cbz	r3, 8024f62 <_lseek_r+0x1e>
 8024f60:	6023      	str	r3, [r4, #0]
 8024f62:	bd38      	pop	{r3, r4, r5, pc}
 8024f64:	200073ac 	.word	0x200073ac

08024f68 <_read_r>:
 8024f68:	b538      	push	{r3, r4, r5, lr}
 8024f6a:	4d07      	ldr	r5, [pc, #28]	; (8024f88 <_read_r+0x20>)
 8024f6c:	4604      	mov	r4, r0
 8024f6e:	4608      	mov	r0, r1
 8024f70:	4611      	mov	r1, r2
 8024f72:	2200      	movs	r2, #0
 8024f74:	602a      	str	r2, [r5, #0]
 8024f76:	461a      	mov	r2, r3
 8024f78:	f000 fba0 	bl	80256bc <_read>
 8024f7c:	1c43      	adds	r3, r0, #1
 8024f7e:	d102      	bne.n	8024f86 <_read_r+0x1e>
 8024f80:	682b      	ldr	r3, [r5, #0]
 8024f82:	b103      	cbz	r3, 8024f86 <_read_r+0x1e>
 8024f84:	6023      	str	r3, [r4, #0]
 8024f86:	bd38      	pop	{r3, r4, r5, pc}
 8024f88:	200073ac 	.word	0x200073ac
 8024f8c:	00000000 	.word	0x00000000

08024f90 <log>:
 8024f90:	b470      	push	{r4, r5, r6}
 8024f92:	ee10 1a90 	vmov	r1, s1
 8024f96:	ee10 2a10 	vmov	r2, s0
 8024f9a:	f04f 34ff 	mov.w	r4, #4294967295
 8024f9e:	4294      	cmp	r4, r2
 8024fa0:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8024fa4:	4c72      	ldr	r4, [pc, #456]	; (8025170 <log+0x1e0>)
 8024fa6:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8024faa:	eb74 0000 	sbcs.w	r0, r4, r0
 8024fae:	ed2d 8b02 	vpush	{d8}
 8024fb2:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8024fb6:	d35c      	bcc.n	8025072 <log+0xe2>
 8024fb8:	4b6e      	ldr	r3, [pc, #440]	; (8025174 <log+0x1e4>)
 8024fba:	4299      	cmp	r1, r3
 8024fbc:	bf08      	it	eq
 8024fbe:	2a00      	cmpeq	r2, #0
 8024fc0:	f000 80c6 	beq.w	8025150 <log+0x1c0>
 8024fc4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8024fc8:	ee30 0b47 	vsub.f64	d0, d0, d7
 8024fcc:	4b6a      	ldr	r3, [pc, #424]	; (8025178 <log+0x1e8>)
 8024fce:	ee20 2b00 	vmul.f64	d2, d0, d0
 8024fd2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8024fd6:	ee20 4b02 	vmul.f64	d4, d0, d2
 8024fda:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8024fde:	eea6 7b00 	vfma.f64	d7, d6, d0
 8024fe2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8024fe6:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8024fea:	eea6 7b02 	vfma.f64	d7, d6, d2
 8024fee:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8024ff2:	eea5 6b00 	vfma.f64	d6, d5, d0
 8024ff6:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8024ffa:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8024ffe:	eea5 6b02 	vfma.f64	d6, d5, d2
 8025002:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8025006:	eea3 5b00 	vfma.f64	d5, d3, d0
 802500a:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 802500e:	eea3 5b02 	vfma.f64	d5, d3, d2
 8025012:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8025016:	eeb0 2b40 	vmov.f64	d2, d0
 802501a:	eea3 5b04 	vfma.f64	d5, d3, d4
 802501e:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8025022:	eea5 6b04 	vfma.f64	d6, d5, d4
 8025026:	eea6 7b04 	vfma.f64	d7, d6, d4
 802502a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8025158 <log+0x1c8>
 802502e:	eeb0 1b47 	vmov.f64	d1, d7
 8025032:	eeb0 5b40 	vmov.f64	d5, d0
 8025036:	eea0 5b06 	vfma.f64	d5, d0, d6
 802503a:	eea0 5b46 	vfms.f64	d5, d0, d6
 802503e:	ee30 8b45 	vsub.f64	d8, d0, d5
 8025042:	ee25 7b05 	vmul.f64	d7, d5, d5
 8025046:	ee30 5b05 	vadd.f64	d5, d0, d5
 802504a:	eea7 2b03 	vfma.f64	d2, d7, d3
 802504e:	ee30 6b42 	vsub.f64	d6, d0, d2
 8025052:	eea7 6b03 	vfma.f64	d6, d7, d3
 8025056:	ee23 3b08 	vmul.f64	d3, d3, d8
 802505a:	eea3 6b05 	vfma.f64	d6, d3, d5
 802505e:	eeb0 0b46 	vmov.f64	d0, d6
 8025062:	eea1 0b04 	vfma.f64	d0, d1, d4
 8025066:	ee32 0b00 	vadd.f64	d0, d2, d0
 802506a:	ecbd 8b02 	vpop	{d8}
 802506e:	bc70      	pop	{r4, r5, r6}
 8025070:	4770      	bx	lr
 8025072:	f1a3 0410 	sub.w	r4, r3, #16
 8025076:	f647 70df 	movw	r0, #32735	; 0x7fdf
 802507a:	4284      	cmp	r4, r0
 802507c:	d923      	bls.n	80250c6 <log+0x136>
 802507e:	1894      	adds	r4, r2, r2
 8025080:	eb41 0001 	adc.w	r0, r1, r1
 8025084:	4320      	orrs	r0, r4
 8025086:	d105      	bne.n	8025094 <log+0x104>
 8025088:	ecbd 8b02 	vpop	{d8}
 802508c:	2001      	movs	r0, #1
 802508e:	bc70      	pop	{r4, r5, r6}
 8025090:	f000 b882 	b.w	8025198 <__math_divzero>
 8025094:	4839      	ldr	r0, [pc, #228]	; (802517c <log+0x1ec>)
 8025096:	4281      	cmp	r1, r0
 8025098:	bf08      	it	eq
 802509a:	2a00      	cmpeq	r2, #0
 802509c:	d0e5      	beq.n	802506a <log+0xda>
 802509e:	041a      	lsls	r2, r3, #16
 80250a0:	d404      	bmi.n	80250ac <log+0x11c>
 80250a2:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 80250a6:	ea32 0303 	bics.w	r3, r2, r3
 80250aa:	d104      	bne.n	80250b6 <log+0x126>
 80250ac:	ecbd 8b02 	vpop	{d8}
 80250b0:	bc70      	pop	{r4, r5, r6}
 80250b2:	f000 b889 	b.w	80251c8 <__math_invalid>
 80250b6:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8025160 <log+0x1d0>
 80250ba:	ee20 7b07 	vmul.f64	d7, d0, d7
 80250be:	ec53 2b17 	vmov	r2, r3, d7
 80250c2:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 80250c6:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 80250ca:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 80250ce:	0d1e      	lsrs	r6, r3, #20
 80250d0:	1e14      	subs	r4, r2, #0
 80250d2:	4a29      	ldr	r2, [pc, #164]	; (8025178 <log+0x1e8>)
 80250d4:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80250d8:	f3c3 3046 	ubfx	r0, r3, #13, #7
 80250dc:	0536      	lsls	r6, r6, #20
 80250de:	1b8d      	subs	r5, r1, r6
 80250e0:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 80250e4:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 80250e8:	ec45 4b16 	vmov	d6, r4, r5
 80250ec:	151b      	asrs	r3, r3, #20
 80250ee:	eea6 5b07 	vfma.f64	d5, d6, d7
 80250f2:	ee07 3a90 	vmov	s15, r3
 80250f6:	ee25 2b05 	vmul.f64	d2, d5, d5
 80250fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80250fe:	ed92 4b00 	vldr	d4, [r2]
 8025102:	ee25 1b02 	vmul.f64	d1, d5, d2
 8025106:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 802510a:	eea4 7b06 	vfma.f64	d7, d4, d6
 802510e:	ee35 4b07 	vadd.f64	d4, d5, d7
 8025112:	ee37 0b44 	vsub.f64	d0, d7, d4
 8025116:	ed92 7b02 	vldr	d7, [r2, #8]
 802511a:	ee30 0b05 	vadd.f64	d0, d0, d5
 802511e:	eea7 0b06 	vfma.f64	d0, d7, d6
 8025122:	ed92 7b04 	vldr	d7, [r2, #16]
 8025126:	ed92 6b08 	vldr	d6, [r2, #32]
 802512a:	eea7 0b02 	vfma.f64	d0, d7, d2
 802512e:	ed92 7b06 	vldr	d7, [r2, #24]
 8025132:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 8025136:	eea6 7b05 	vfma.f64	d7, d6, d5
 802513a:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 802513e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8025142:	eea6 7b02 	vfma.f64	d7, d6, d2
 8025146:	eea1 0b07 	vfma.f64	d0, d1, d7
 802514a:	ee30 0b04 	vadd.f64	d0, d0, d4
 802514e:	e78c      	b.n	802506a <log+0xda>
 8025150:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8025168 <log+0x1d8>
 8025154:	e789      	b.n	802506a <log+0xda>
 8025156:	bf00      	nop
 8025158:	00000000 	.word	0x00000000
 802515c:	41a00000 	.word	0x41a00000
 8025160:	00000000 	.word	0x00000000
 8025164:	43300000 	.word	0x43300000
	...
 8025170:	000308ff 	.word	0x000308ff
 8025174:	3ff00000 	.word	0x3ff00000
 8025178:	08063b10 	.word	0x08063b10
 802517c:	7ff00000 	.word	0x7ff00000

08025180 <with_errno>:
 8025180:	b513      	push	{r0, r1, r4, lr}
 8025182:	4604      	mov	r4, r0
 8025184:	ed8d 0b00 	vstr	d0, [sp]
 8025188:	f000 fa62 	bl	8025650 <__errno>
 802518c:	ed9d 0b00 	vldr	d0, [sp]
 8025190:	6004      	str	r4, [r0, #0]
 8025192:	b002      	add	sp, #8
 8025194:	bd10      	pop	{r4, pc}
	...

08025198 <__math_divzero>:
 8025198:	b082      	sub	sp, #8
 802519a:	2800      	cmp	r0, #0
 802519c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80251a0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80251a4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80251a8:	ed8d 7b00 	vstr	d7, [sp]
 80251ac:	ed9d 0b00 	vldr	d0, [sp]
 80251b0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80251c0 <__math_divzero+0x28>
 80251b4:	2022      	movs	r0, #34	; 0x22
 80251b6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80251ba:	b002      	add	sp, #8
 80251bc:	f7ff bfe0 	b.w	8025180 <with_errno>
	...

080251c8 <__math_invalid>:
 80251c8:	eeb0 7b40 	vmov.f64	d7, d0
 80251cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80251d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80251d4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80251d8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80251dc:	d602      	bvs.n	80251e4 <__math_invalid+0x1c>
 80251de:	2021      	movs	r0, #33	; 0x21
 80251e0:	f7ff bfce 	b.w	8025180 <with_errno>
 80251e4:	4770      	bx	lr

080251e6 <with_errnof>:
 80251e6:	b513      	push	{r0, r1, r4, lr}
 80251e8:	4604      	mov	r4, r0
 80251ea:	ed8d 0a01 	vstr	s0, [sp, #4]
 80251ee:	f000 fa2f 	bl	8025650 <__errno>
 80251f2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80251f6:	6004      	str	r4, [r0, #0]
 80251f8:	b002      	add	sp, #8
 80251fa:	bd10      	pop	{r4, pc}

080251fc <xflowf>:
 80251fc:	b130      	cbz	r0, 802520c <xflowf+0x10>
 80251fe:	eef1 7a40 	vneg.f32	s15, s0
 8025202:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025206:	2022      	movs	r0, #34	; 0x22
 8025208:	f7ff bfed 	b.w	80251e6 <with_errnof>
 802520c:	eef0 7a40 	vmov.f32	s15, s0
 8025210:	e7f7      	b.n	8025202 <xflowf+0x6>
	...

08025214 <__math_uflowf>:
 8025214:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802521c <__math_uflowf+0x8>
 8025218:	f7ff bff0 	b.w	80251fc <xflowf>
 802521c:	10000000 	.word	0x10000000

08025220 <__math_may_uflowf>:
 8025220:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025228 <__math_may_uflowf+0x8>
 8025224:	f7ff bfea 	b.w	80251fc <xflowf>
 8025228:	1a200000 	.word	0x1a200000

0802522c <__math_oflowf>:
 802522c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025234 <__math_oflowf+0x8>
 8025230:	f7ff bfe4 	b.w	80251fc <xflowf>
 8025234:	70000000 	.word	0x70000000

08025238 <__math_divzerof>:
 8025238:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802523c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8025240:	2800      	cmp	r0, #0
 8025242:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8025246:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8025254 <__math_divzerof+0x1c>
 802524a:	2022      	movs	r0, #34	; 0x22
 802524c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8025250:	f7ff bfc9 	b.w	80251e6 <with_errnof>
 8025254:	00000000 	.word	0x00000000

08025258 <__math_invalidf>:
 8025258:	eef0 7a40 	vmov.f32	s15, s0
 802525c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8025260:	eef4 7a67 	vcmp.f32	s15, s15
 8025264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025268:	ee87 0a07 	vdiv.f32	s0, s14, s14
 802526c:	d602      	bvs.n	8025274 <__math_invalidf+0x1c>
 802526e:	2021      	movs	r0, #33	; 0x21
 8025270:	f7ff bfb9 	b.w	80251e6 <with_errnof>
 8025274:	4770      	bx	lr
	...

08025278 <expf>:
 8025278:	ee10 2a10 	vmov	r2, s0
 802527c:	f240 412a 	movw	r1, #1066	; 0x42a
 8025280:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8025284:	428b      	cmp	r3, r1
 8025286:	b430      	push	{r4, r5}
 8025288:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802528c:	d92a      	bls.n	80252e4 <expf+0x6c>
 802528e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8025292:	d058      	beq.n	8025346 <expf+0xce>
 8025294:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8025298:	d303      	bcc.n	80252a2 <expf+0x2a>
 802529a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802529e:	bc30      	pop	{r4, r5}
 80252a0:	4770      	bx	lr
 80252a2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 802534c <expf+0xd4>
 80252a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80252aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252ae:	dd03      	ble.n	80252b8 <expf+0x40>
 80252b0:	bc30      	pop	{r4, r5}
 80252b2:	2000      	movs	r0, #0
 80252b4:	f7ff bfba 	b.w	802522c <__math_oflowf>
 80252b8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8025350 <expf+0xd8>
 80252bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80252c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252c4:	d503      	bpl.n	80252ce <expf+0x56>
 80252c6:	bc30      	pop	{r4, r5}
 80252c8:	2000      	movs	r0, #0
 80252ca:	f7ff bfa3 	b.w	8025214 <__math_uflowf>
 80252ce:	eddf 7a21 	vldr	s15, [pc, #132]	; 8025354 <expf+0xdc>
 80252d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80252d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252da:	d503      	bpl.n	80252e4 <expf+0x6c>
 80252dc:	bc30      	pop	{r4, r5}
 80252de:	2000      	movs	r0, #0
 80252e0:	f7ff bf9e 	b.w	8025220 <__math_may_uflowf>
 80252e4:	4b1c      	ldr	r3, [pc, #112]	; (8025358 <expf+0xe0>)
 80252e6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80252ea:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 80252ee:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 80252f2:	eeb0 7b44 	vmov.f64	d7, d4
 80252f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80252fa:	ee17 0a10 	vmov	r0, s14
 80252fe:	ee37 7b44 	vsub.f64	d7, d7, d4
 8025302:	f000 021f 	and.w	r2, r0, #31
 8025306:	ee95 7b06 	vfnms.f64	d7, d5, d6
 802530a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 802530e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8025312:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8025316:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 802531a:	eea5 6b07 	vfma.f64	d6, d5, d7
 802531e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8025322:	684d      	ldr	r5, [r1, #4]
 8025324:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8025328:	2100      	movs	r1, #0
 802532a:	190a      	adds	r2, r1, r4
 802532c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8025330:	eea5 0b07 	vfma.f64	d0, d5, d7
 8025334:	ec43 2b17 	vmov	d7, r2, r3
 8025338:	eea6 0b04 	vfma.f64	d0, d6, d4
 802533c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8025340:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025344:	e7ab      	b.n	802529e <expf+0x26>
 8025346:	ed9f 0a05 	vldr	s0, [pc, #20]	; 802535c <expf+0xe4>
 802534a:	e7a8      	b.n	802529e <expf+0x26>
 802534c:	42b17217 	.word	0x42b17217
 8025350:	c2cff1b4 	.word	0xc2cff1b4
 8025354:	c2ce8ecf 	.word	0xc2ce8ecf
 8025358:	080643a0 	.word	0x080643a0
 802535c:	00000000 	.word	0x00000000

08025360 <checkint>:
 8025360:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8025364:	2b7e      	cmp	r3, #126	; 0x7e
 8025366:	dd10      	ble.n	802538a <checkint+0x2a>
 8025368:	2b96      	cmp	r3, #150	; 0x96
 802536a:	dc0c      	bgt.n	8025386 <checkint+0x26>
 802536c:	2201      	movs	r2, #1
 802536e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8025372:	fa02 f303 	lsl.w	r3, r2, r3
 8025376:	1e5a      	subs	r2, r3, #1
 8025378:	4202      	tst	r2, r0
 802537a:	d106      	bne.n	802538a <checkint+0x2a>
 802537c:	4203      	tst	r3, r0
 802537e:	bf0c      	ite	eq
 8025380:	2002      	moveq	r0, #2
 8025382:	2001      	movne	r0, #1
 8025384:	4770      	bx	lr
 8025386:	2002      	movs	r0, #2
 8025388:	4770      	bx	lr
 802538a:	2000      	movs	r0, #0
 802538c:	4770      	bx	lr
	...

08025390 <powf>:
 8025390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025392:	ee10 1a10 	vmov	r1, s0
 8025396:	ee10 4a90 	vmov	r4, s1
 802539a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 802539e:	0062      	lsls	r2, r4, #1
 80253a0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80253a4:	eef0 7a40 	vmov.f32	s15, s0
 80253a8:	f102 30ff 	add.w	r0, r2, #4294967295
 80253ac:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80253b0:	d252      	bcs.n	8025458 <powf+0xc8>
 80253b2:	4298      	cmp	r0, r3
 80253b4:	d252      	bcs.n	802545c <powf+0xcc>
 80253b6:	2000      	movs	r0, #0
 80253b8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80253bc:	4ca0      	ldr	r4, [pc, #640]	; (8025640 <powf+0x2b0>)
 80253be:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80253c2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80253c6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 80253ca:	0dd2      	lsrs	r2, r2, #23
 80253cc:	05d2      	lsls	r2, r2, #23
 80253ce:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 80253d2:	1a8b      	subs	r3, r1, r2
 80253d4:	ed95 6b00 	vldr	d6, [r5]
 80253d8:	ee07 3a90 	vmov	s15, r3
 80253dc:	15d2      	asrs	r2, r2, #23
 80253de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80253e2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80253e6:	ed95 6b02 	vldr	d6, [r5, #8]
 80253ea:	ee25 2b05 	vmul.f64	d2, d5, d5
 80253ee:	ee22 1b02 	vmul.f64	d1, d2, d2
 80253f2:	ee07 2a90 	vmov	s15, r2
 80253f6:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80253fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80253fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8025402:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8025406:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 802540a:	eea5 3b06 	vfma.f64	d3, d5, d6
 802540e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8025412:	eea5 6b04 	vfma.f64	d6, d5, d4
 8025416:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 802541a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 802541e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8025422:	eea2 7b06 	vfma.f64	d7, d2, d6
 8025426:	eea3 7b01 	vfma.f64	d7, d3, d1
 802542a:	ee20 0b07 	vmul.f64	d0, d0, d7
 802542e:	ee10 3a90 	vmov	r3, s1
 8025432:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8025436:	f248 03bf 	movw	r3, #32959	; 0x80bf
 802543a:	429a      	cmp	r2, r3
 802543c:	f0c0 80b1 	bcc.w	80255a2 <powf+0x212>
 8025440:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8025620 <powf+0x290>
 8025444:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8025448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802544c:	dd79      	ble.n	8025542 <powf+0x1b2>
 802544e:	b003      	add	sp, #12
 8025450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025454:	f7ff beea 	b.w	802522c <__math_oflowf>
 8025458:	4298      	cmp	r0, r3
 802545a:	d32d      	bcc.n	80254b8 <powf+0x128>
 802545c:	b952      	cbnz	r2, 8025474 <powf+0xe4>
 802545e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8025462:	005b      	lsls	r3, r3, #1
 8025464:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8025468:	f240 80c9 	bls.w	80255fe <powf+0x26e>
 802546c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8025470:	b003      	add	sp, #12
 8025472:	bd30      	pop	{r4, r5, pc}
 8025474:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8025478:	d105      	bne.n	8025486 <powf+0xf6>
 802547a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 802547e:	0064      	lsls	r4, r4, #1
 8025480:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8025484:	e7f0      	b.n	8025468 <powf+0xd8>
 8025486:	004b      	lsls	r3, r1, #1
 8025488:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 802548c:	d8ee      	bhi.n	802546c <powf+0xdc>
 802548e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8025492:	d1eb      	bne.n	802546c <powf+0xdc>
 8025494:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8025498:	f000 80b1 	beq.w	80255fe <powf+0x26e>
 802549c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80254a0:	ea6f 0404 	mvn.w	r4, r4
 80254a4:	bf34      	ite	cc
 80254a6:	2300      	movcc	r3, #0
 80254a8:	2301      	movcs	r3, #1
 80254aa:	0fe4      	lsrs	r4, r4, #31
 80254ac:	42a3      	cmp	r3, r4
 80254ae:	f040 80a9 	bne.w	8025604 <powf+0x274>
 80254b2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80254b6:	e7db      	b.n	8025470 <powf+0xe0>
 80254b8:	004d      	lsls	r5, r1, #1
 80254ba:	1e6a      	subs	r2, r5, #1
 80254bc:	429a      	cmp	r2, r3
 80254be:	d31c      	bcc.n	80254fa <powf+0x16a>
 80254c0:	2900      	cmp	r1, #0
 80254c2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80254c6:	da0f      	bge.n	80254e8 <powf+0x158>
 80254c8:	ee10 0a90 	vmov	r0, s1
 80254cc:	f7ff ff48 	bl	8025360 <checkint>
 80254d0:	2801      	cmp	r0, #1
 80254d2:	d109      	bne.n	80254e8 <powf+0x158>
 80254d4:	eeb1 0a40 	vneg.f32	s0, s0
 80254d8:	b945      	cbnz	r5, 80254ec <powf+0x15c>
 80254da:	2c00      	cmp	r4, #0
 80254dc:	dac8      	bge.n	8025470 <powf+0xe0>
 80254de:	b003      	add	sp, #12
 80254e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80254e4:	f7ff bea8 	b.w	8025238 <__math_divzerof>
 80254e8:	2000      	movs	r0, #0
 80254ea:	e7f5      	b.n	80254d8 <powf+0x148>
 80254ec:	2c00      	cmp	r4, #0
 80254ee:	dabf      	bge.n	8025470 <powf+0xe0>
 80254f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80254f4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80254f8:	e7ba      	b.n	8025470 <powf+0xe0>
 80254fa:	2900      	cmp	r1, #0
 80254fc:	da1f      	bge.n	802553e <powf+0x1ae>
 80254fe:	ee10 0a90 	vmov	r0, s1
 8025502:	f7ff ff2d 	bl	8025360 <checkint>
 8025506:	b920      	cbnz	r0, 8025512 <powf+0x182>
 8025508:	b003      	add	sp, #12
 802550a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802550e:	f7ff bea3 	b.w	8025258 <__math_invalidf>
 8025512:	2801      	cmp	r0, #1
 8025514:	bf14      	ite	ne
 8025516:	2000      	movne	r0, #0
 8025518:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 802551c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8025520:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8025524:	f4bf af48 	bcs.w	80253b8 <powf+0x28>
 8025528:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8025644 <powf+0x2b4>
 802552c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025530:	ee10 3a10 	vmov	r3, s0
 8025534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025538:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 802553c:	e73c      	b.n	80253b8 <powf+0x28>
 802553e:	2000      	movs	r0, #0
 8025540:	e7ee      	b.n	8025520 <powf+0x190>
 8025542:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8025628 <powf+0x298>
 8025546:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802554a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802554e:	dd10      	ble.n	8025572 <powf+0x1e2>
 8025550:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8025554:	2800      	cmp	r0, #0
 8025556:	d158      	bne.n	802560a <powf+0x27a>
 8025558:	9300      	str	r3, [sp, #0]
 802555a:	eddd 7a00 	vldr	s15, [sp]
 802555e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025562:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025566:	eef4 7a47 	vcmp.f32	s15, s14
 802556a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802556e:	f47f af6e 	bne.w	802544e <powf+0xbe>
 8025572:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8025630 <powf+0x2a0>
 8025576:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802557a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802557e:	d804      	bhi.n	802558a <powf+0x1fa>
 8025580:	b003      	add	sp, #12
 8025582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025586:	f7ff be45 	b.w	8025214 <__math_uflowf>
 802558a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8025638 <powf+0x2a8>
 802558e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8025592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025596:	d504      	bpl.n	80255a2 <powf+0x212>
 8025598:	b003      	add	sp, #12
 802559a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802559e:	f7ff be3f 	b.w	8025220 <__math_may_uflowf>
 80255a2:	4b29      	ldr	r3, [pc, #164]	; (8025648 <powf+0x2b8>)
 80255a4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 80255a8:	ee30 6b07 	vadd.f64	d6, d0, d7
 80255ac:	ee16 2a10 	vmov	r2, s12
 80255b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80255b4:	f002 011f 	and.w	r1, r2, #31
 80255b8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80255bc:	ee30 7b47 	vsub.f64	d7, d0, d7
 80255c0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80255c4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80255c8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80255cc:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80255d0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80255d4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80255d8:	686d      	ldr	r5, [r5, #4]
 80255da:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80255de:	1882      	adds	r2, r0, r2
 80255e0:	2300      	movs	r3, #0
 80255e2:	1918      	adds	r0, r3, r4
 80255e4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80255e8:	eea7 0b05 	vfma.f64	d0, d7, d5
 80255ec:	ec41 0b17 	vmov	d7, r0, r1
 80255f0:	eea6 0b04 	vfma.f64	d0, d6, d4
 80255f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80255f8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80255fc:	e738      	b.n	8025470 <powf+0xe0>
 80255fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8025602:	e735      	b.n	8025470 <powf+0xe0>
 8025604:	ed9f 0a11 	vldr	s0, [pc, #68]	; 802564c <powf+0x2bc>
 8025608:	e732      	b.n	8025470 <powf+0xe0>
 802560a:	9301      	str	r3, [sp, #4]
 802560c:	eddd 7a01 	vldr	s15, [sp, #4]
 8025610:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025618:	e7a5      	b.n	8025566 <powf+0x1d6>
 802561a:	bf00      	nop
 802561c:	f3af 8000 	nop.w
 8025620:	ffd1d571 	.word	0xffd1d571
 8025624:	405fffff 	.word	0x405fffff
 8025628:	ffa3aae2 	.word	0xffa3aae2
 802562c:	405fffff 	.word	0x405fffff
 8025630:	00000000 	.word	0x00000000
 8025634:	c062c000 	.word	0xc062c000
 8025638:	00000000 	.word	0x00000000
 802563c:	c062a000 	.word	0xc062a000
 8025640:	080644e8 	.word	0x080644e8
 8025644:	4b000000 	.word	0x4b000000
 8025648:	080643a0 	.word	0x080643a0
 802564c:	00000000 	.word	0x00000000

08025650 <__errno>:
 8025650:	4b01      	ldr	r3, [pc, #4]	; (8025658 <__errno+0x8>)
 8025652:	6818      	ldr	r0, [r3, #0]
 8025654:	4770      	bx	lr
 8025656:	bf00      	nop
 8025658:	20004824 	.word	0x20004824

0802565c <_close>:
 802565c:	4b02      	ldr	r3, [pc, #8]	; (8025668 <_close+0xc>)
 802565e:	2258      	movs	r2, #88	; 0x58
 8025660:	601a      	str	r2, [r3, #0]
 8025662:	f04f 30ff 	mov.w	r0, #4294967295
 8025666:	4770      	bx	lr
 8025668:	200073ac 	.word	0x200073ac

0802566c <_fstat>:
 802566c:	4b02      	ldr	r3, [pc, #8]	; (8025678 <_fstat+0xc>)
 802566e:	2258      	movs	r2, #88	; 0x58
 8025670:	601a      	str	r2, [r3, #0]
 8025672:	f04f 30ff 	mov.w	r0, #4294967295
 8025676:	4770      	bx	lr
 8025678:	200073ac 	.word	0x200073ac

0802567c <_getpid>:
 802567c:	4b02      	ldr	r3, [pc, #8]	; (8025688 <_getpid+0xc>)
 802567e:	2258      	movs	r2, #88	; 0x58
 8025680:	601a      	str	r2, [r3, #0]
 8025682:	f04f 30ff 	mov.w	r0, #4294967295
 8025686:	4770      	bx	lr
 8025688:	200073ac 	.word	0x200073ac

0802568c <_isatty>:
 802568c:	4b02      	ldr	r3, [pc, #8]	; (8025698 <_isatty+0xc>)
 802568e:	2258      	movs	r2, #88	; 0x58
 8025690:	601a      	str	r2, [r3, #0]
 8025692:	2000      	movs	r0, #0
 8025694:	4770      	bx	lr
 8025696:	bf00      	nop
 8025698:	200073ac 	.word	0x200073ac

0802569c <_kill>:
 802569c:	4b02      	ldr	r3, [pc, #8]	; (80256a8 <_kill+0xc>)
 802569e:	2258      	movs	r2, #88	; 0x58
 80256a0:	601a      	str	r2, [r3, #0]
 80256a2:	f04f 30ff 	mov.w	r0, #4294967295
 80256a6:	4770      	bx	lr
 80256a8:	200073ac 	.word	0x200073ac

080256ac <_lseek>:
 80256ac:	4b02      	ldr	r3, [pc, #8]	; (80256b8 <_lseek+0xc>)
 80256ae:	2258      	movs	r2, #88	; 0x58
 80256b0:	601a      	str	r2, [r3, #0]
 80256b2:	f04f 30ff 	mov.w	r0, #4294967295
 80256b6:	4770      	bx	lr
 80256b8:	200073ac 	.word	0x200073ac

080256bc <_read>:
 80256bc:	4b02      	ldr	r3, [pc, #8]	; (80256c8 <_read+0xc>)
 80256be:	2258      	movs	r2, #88	; 0x58
 80256c0:	601a      	str	r2, [r3, #0]
 80256c2:	f04f 30ff 	mov.w	r0, #4294967295
 80256c6:	4770      	bx	lr
 80256c8:	200073ac 	.word	0x200073ac

080256cc <_sbrk>:
 80256cc:	4a04      	ldr	r2, [pc, #16]	; (80256e0 <_sbrk+0x14>)
 80256ce:	6811      	ldr	r1, [r2, #0]
 80256d0:	4603      	mov	r3, r0
 80256d2:	b909      	cbnz	r1, 80256d8 <_sbrk+0xc>
 80256d4:	4903      	ldr	r1, [pc, #12]	; (80256e4 <_sbrk+0x18>)
 80256d6:	6011      	str	r1, [r2, #0]
 80256d8:	6810      	ldr	r0, [r2, #0]
 80256da:	4403      	add	r3, r0
 80256dc:	6013      	str	r3, [r2, #0]
 80256de:	4770      	bx	lr
 80256e0:	200073b4 	.word	0x200073b4
 80256e4:	200073b8 	.word	0x200073b8

080256e8 <_write>:
 80256e8:	4b02      	ldr	r3, [pc, #8]	; (80256f4 <_write+0xc>)
 80256ea:	2258      	movs	r2, #88	; 0x58
 80256ec:	601a      	str	r2, [r3, #0]
 80256ee:	f04f 30ff 	mov.w	r0, #4294967295
 80256f2:	4770      	bx	lr
 80256f4:	200073ac 	.word	0x200073ac

080256f8 <_exit>:
 80256f8:	e7fe      	b.n	80256f8 <_exit>
	...

080256fc <_init>:
 80256fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256fe:	bf00      	nop
 8025700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025702:	bc08      	pop	{r3}
 8025704:	469e      	mov	lr, r3
 8025706:	4770      	bx	lr

08025708 <_fini>:
 8025708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802570a:	bf00      	nop
 802570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802570e:	bc08      	pop	{r3}
 8025710:	469e      	mov	lr, r3
 8025712:	4770      	bx	lr
